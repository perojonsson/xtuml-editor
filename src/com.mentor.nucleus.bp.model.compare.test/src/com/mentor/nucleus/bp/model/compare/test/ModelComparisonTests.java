//========================================================================
//
// File: <complete_generated_file_path>.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/generate_metamodel_compare_test.arc
// Version:      $Revision: 1.7.8.2 $
//
// Copyright 2005-2014 Mentor Graphics Corporation.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
package com.mentor.nucleus.bp.model.compare.test;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.compare.internal.CompareEditor;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.team.internal.ui.actions.CompareAction;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.core.common.ModelRoot;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.core.common.PersistableModelComponent;
import com.mentor.nucleus.bp.core.common.Transaction;
import com.mentor.nucleus.bp.core.common.TransactionException;
import com.mentor.nucleus.bp.core.common.TransactionManager;
import com.mentor.nucleus.bp.core.inspector.ObjectElement;
import com.mentor.nucleus.bp.core.util.WorkspaceUtil;
import com.mentor.nucleus.bp.model.compare.ComparableTreeObject;
import com.mentor.nucleus.bp.model.compare.TreeDifference;
import com.mentor.nucleus.bp.model.compare.TreeDifferencer;
import com.mentor.nucleus.bp.model.compare.providers.NonRootModelElementComparable;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.ui.canvas.Fillcolorstyle_c;
import com.mentor.nucleus.bp.ui.canvas.FloatingText_c;
import com.mentor.nucleus.bp.ui.canvas.Graphconnector_c;
import com.mentor.nucleus.bp.ui.canvas.Graphelement_c;
import com.mentor.nucleus.bp.ui.canvas.Graphnode_c;
import com.mentor.nucleus.bp.ui.canvas.Layer_c;
import com.mentor.nucleus.bp.ui.canvas.Linecolorstyle_c;
import com.mentor.nucleus.bp.ui.canvas.Model_c;
import com.mentor.nucleus.bp.ui.canvas.Ooaofgraphics;
import com.mentor.nucleus.bp.ui.canvas.Waypoint_c;

public class ModelComparisonTests extends BaseTest {

	private static String modifyString = "_modified";
	
		@Override
	public void initialSetup() throws CoreException, IOException {
		// load test model 
		WorkspaceUtil.setAutobuilding(false);

		final IProject project = ResourcesPlugin.getWorkspace().getRoot()
				.getProject("HierarchyTestModel");

		loadProject("HierarchyTestModel");
		
		m_sys = SystemModel_c.SystemModelInstance(Ooaofooa
				.getDefaultInstance(), new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				return ((SystemModel_c) candidate).getName().equals(
						project.getName());
			}

		});
		PersistableModelComponent sys_comp = m_sys
				.getPersistableComponent();
		sys_comp.loadComponentAndChildren(new NullProgressMonitor());
	}
	

    /**
     *  Test modification of attribute: Include:Descrip
     */
	public void testAttributeValueModificationIncludeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Include_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Include_c.IncludeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Include::Descrip", instance);
		performTest(instance, "setDescrip", "Include::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Generalization:Descrip
     */
	public void testAttributeValueModificationGeneralizationDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Generalization_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Generalization_c.GeneralizationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Generalization::Descrip", instance);
		performTest(instance, "setDescrip", "Generalization::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Extend:Descrip
     */
	public void testAttributeValueModificationExtendDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Extend_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Extend_c.ExtendInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Extend::Descrip", instance);
		performTest(instance, "setDescrip", "Extend::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Binary Association:Descrip
     */
	public void testAttributeValueModificationBinary_AssociationDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		BinaryAssociation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = BinaryAssociation_c.BinaryAssociationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Binary Association::Descrip", instance);
		performTest(instance, "setDescrip", "Binary Association::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Referential Attribute:Ref_Mode
     */
	public void testAttributeValueModificationReferential_AttributeRef_Mode() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReferentialAttribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReferentialAttribute_c.ReferentialAttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Referential Attribute::Ref_Mode", instance);
		performTest(instance, "setRef_mode", "Referential Attribute::Ref_Mode", instance.getRef_mode() + 1);
	}

    /**
     *  Test modification of attribute: Operation Parameter:Name
     */
	public void testAttributeValueModificationOperation_ParameterName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		OperationParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = OperationParameter_c.OperationParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation Parameter::Name", instance);
		performTest(instance, "setName", "Operation Parameter::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Operation Parameter:By_Ref
     */
	public void testAttributeValueModificationOperation_ParameterBy_Ref() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		OperationParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = OperationParameter_c.OperationParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation Parameter::By_Ref", instance);
		performTest(instance, "setBy_ref", "Operation Parameter::By_Ref", instance.getBy_ref() + 1);
	}

    /**
     *  Test modification of attribute: Operation Parameter:Dimensions
     */
	public void testAttributeValueModificationOperation_ParameterDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		OperationParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = OperationParameter_c.OperationParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation Parameter::Dimensions", instance);
		performTest(instance, "setDimensions", "Operation Parameter::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Operation Parameter:Descrip
     */
	public void testAttributeValueModificationOperation_ParameterDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		OperationParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = OperationParameter_c.OperationParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation Parameter::Descrip", instance);
		performTest(instance, "setDescrip", "Operation Parameter::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Operation:Name
     */
	public void testAttributeValueModificationOperationName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Operation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Operation_c.OperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation::Name", instance);
		performTest(instance, "setName", "Operation::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Operation:Descrip
     */
	public void testAttributeValueModificationOperationDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Operation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Operation_c.OperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation::Descrip", instance);
		performTest(instance, "setDescrip", "Operation::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Operation:Instance_Based
     */
	public void testAttributeValueModificationOperationInstance_Based() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Operation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Operation_c.OperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation::Instance_Based", instance);
		performTest(instance, "setInstance_based", "Operation::Instance_Based", Scope_c.Class);
	}

    /**
     *  Test modification of attribute: Operation:Suc_Pars
     */
	public void testAttributeValueModificationOperationSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Operation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Operation_c.OperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Operation::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Operation:Return_Dimensions
     */
	public void testAttributeValueModificationOperationReturn_Dimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Operation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Operation_c.OperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Operation::Return_Dimensions", instance);
		performTest(instance, "setReturn_dimensions", "Operation::Return_Dimensions", instance.getReturn_dimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Model Class:Numb
     */
	public void testAttributeValueModificationModel_ClassNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ModelClass_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ModelClass_c.ModelClassInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Model Class::Numb", instance);
		performTest(instance, "setNumb", "Model Class::Numb", instance.getNumb() + 1);
	}

    /**
     *  Test modification of attribute: Model Class:Key_Lett
     */
	public void testAttributeValueModificationModel_ClassKey_Lett() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ModelClass_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ModelClass_c.ModelClassInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Model Class::Key_Lett", instance);
		performTest(instance, "setKey_lett", "Model Class::Key_Lett", instance.getKey_lett() + modifyString);
	}

    /**
     *  Test modification of attribute: Model Class:Descrip
     */
	public void testAttributeValueModificationModel_ClassDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ModelClass_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ModelClass_c.ModelClassInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Model Class::Descrip", instance);
		performTest(instance, "setDescrip", "Model Class::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Derived Base Attribute:Suc_Pars
     */
	public void testAttributeValueModificationDerived_Base_AttributeSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		DerivedBaseAttribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = DerivedBaseAttribute_c.DerivedBaseAttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Derived Base Attribute::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Derived Base Attribute::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Attribute Reference in Class:Is_Cstrd
     */
	public void testAttributeValueModificationAttribute_Reference_in_ClassIs_Cstrd() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AttributeReferenceInClass_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AttributeReferenceInClass_c.AttributeReferenceInClassInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute Reference in Class::Is_Cstrd", instance);
		performTest(instance, "setIs_cstrd", "Attribute Reference in Class::Is_Cstrd", !instance.getIs_cstrd());
	}

    /**
     *  Test modification of attribute: Attribute Reference in Class:Descrip
     */
	public void testAttributeValueModificationAttribute_Reference_in_ClassDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AttributeReferenceInClass_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AttributeReferenceInClass_c.AttributeReferenceInClassInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute Reference in Class::Descrip", instance);
		performTest(instance, "setDescrip", "Attribute Reference in Class::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Attribute:Descrip
     */
	public void testAttributeValueModificationAttributeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Attribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Attribute_c.AttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute::Descrip", instance);
		performTest(instance, "setDescrip", "Attribute::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Attribute:Prefix
     */
	public void testAttributeValueModificationAttributePrefix() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Attribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Attribute_c.AttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute::Prefix", instance);
		performTest(instance, "setPrefix", "Attribute::Prefix", instance.getPrefix() + modifyString);
	}

    /**
     *  Test modification of attribute: Attribute:Root_Nam
     */
	public void testAttributeValueModificationAttributeRoot_Nam() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Attribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Attribute_c.AttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute::Root_Nam", instance);
		performTest(instance, "setRoot_nam", "Attribute::Root_Nam", instance.getRoot_nam() + modifyString);
	}

    /**
     *  Test modification of attribute: Attribute:Pfx_Mode
     */
	public void testAttributeValueModificationAttributePfx_Mode() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Attribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Attribute_c.AttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute::Pfx_Mode", instance);
		performTest(instance, "setPfx_mode", "Attribute::Pfx_Mode", instance.getPfx_mode() + 1);
	}

    /**
     *  Test modification of attribute: Attribute:Dimensions
     */
	public void testAttributeValueModificationAttributeDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Attribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Attribute_c.AttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute::Dimensions", instance);
		performTest(instance, "setDimensions", "Attribute::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Attribute:DefaultValue
     */
	public void testAttributeValueModificationAttributeDefaultValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Attribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Attribute_c.AttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Attribute::DefaultValue", instance);
		performTest(instance, "setDefaultvalue", "Attribute::DefaultValue", instance.getDefaultvalue() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine State:Name
     */
	public void testAttributeValueModificationState_Machine_StateName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineState_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineState_c.StateMachineStateInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine State::Name", instance);
		performTest(instance, "setName", "State Machine State::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine State:Numb
     */
	public void testAttributeValueModificationState_Machine_StateNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineState_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineState_c.StateMachineStateInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine State::Numb", instance);
		performTest(instance, "setNumb", "State Machine State::Numb", instance.getNumb() + 1);
	}

    /**
     *  Test modification of attribute: State Machine State:Final
     */
	public void testAttributeValueModificationState_Machine_StateFinal() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineState_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineState_c.StateMachineStateInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine State::Final", instance);
		performTest(instance, "setFinal", "State Machine State::Final", instance.getFinal() + 1);
	}

    /**
     *  Test modification of attribute: State Machine Event Data Item:Name
     */
	public void testAttributeValueModificationState_Machine_Event_Data_ItemName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEventDataItem_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event Data Item::Name", instance);
		performTest(instance, "setName", "State Machine Event Data Item::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine Event Data Item:Descrip
     */
	public void testAttributeValueModificationState_Machine_Event_Data_ItemDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEventDataItem_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event Data Item::Descrip", instance);
		performTest(instance, "setDescrip", "State Machine Event Data Item::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine Event Data Item:Dimensions
     */
	public void testAttributeValueModificationState_Machine_Event_Data_ItemDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEventDataItem_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event Data Item::Dimensions", instance);
		performTest(instance, "setDimensions", "State Machine Event Data Item::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine Event:Numb
     */
	public void testAttributeValueModificationState_Machine_EventNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEvent_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEvent_c.StateMachineEventInstance(root);
			SignalEvent_c sig = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(instance));
			if(instance != null && instance.getFile() != null && sig == null) {
			    break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event::Numb", instance);
		performTest(instance, "setNumb", "State Machine Event::Numb", instance.getNumb() + 1);
	}

    /**
     *  Test modification of attribute: State Machine Event:Mning
     */
	public void testAttributeValueModificationState_Machine_EventMning() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEvent_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEvent_c.StateMachineEventInstance(root);
			SignalEvent_c sig = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(instance));
			if(instance != null && instance.getFile() != null && sig == null) {
			    break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event::Mning", instance);
		performTest(instance, "setMning", "State Machine Event::Mning", instance.getMning() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine Event:Is_Lbl_U
     */
	public void testAttributeValueModificationState_Machine_EventIs_Lbl_U() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEvent_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEvent_c.StateMachineEventInstance(root);
			SignalEvent_c sig = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(instance));
			if(instance != null && instance.getFile() != null && sig == null) {
			    break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event::Is_Lbl_U", instance);
		performTest(instance, "setIs_lbl_u", "State Machine Event::Is_Lbl_U", instance.getIs_lbl_u() + 1);
	}

    /**
     *  Test modification of attribute: State Machine Event:Unq_Lbl
     */
	public void testAttributeValueModificationState_Machine_EventUnq_Lbl() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEvent_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEvent_c.StateMachineEventInstance(root);
			SignalEvent_c sig = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(instance));
			if(instance != null && instance.getFile() != null && sig == null) {
			    break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event::Unq_Lbl", instance);
		performTest(instance, "setUnq_lbl", "State Machine Event::Unq_Lbl", instance.getUnq_lbl() + modifyString);
	}

    /**
     *  Test modification of attribute: State Machine Event:Descrip
     */
	public void testAttributeValueModificationState_Machine_EventDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StateMachineEvent_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StateMachineEvent_c.StateMachineEventInstance(root);
			SignalEvent_c sig = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(instance));
			if(instance != null && instance.getFile() != null && sig == null) {
			    break;
			}
		}
		assertNotNull("Unable to locate test element for: State Machine Event::Descrip", instance);
		performTest(instance, "setDescrip", "State Machine Event::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Event Ignored:Descrip
     */
	public void testAttributeValueModificationEvent_IgnoredDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		EventIgnored_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = EventIgnored_c.EventIgnoredInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Event Ignored::Descrip", instance);
		performTest(instance, "setDescrip", "Event Ignored::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Cant Happen:Descrip
     */
	public void testAttributeValueModificationCant_HappenDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CantHappen_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CantHappen_c.CantHappenInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Cant Happen::Descrip", instance);
		performTest(instance, "setDescrip", "Cant Happen::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Action:Suc_Pars
     */
	public void testAttributeValueModificationActionSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Action_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Action_c.ActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Action::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Action::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Action:Descrip
     */
	public void testAttributeValueModificationActionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Action_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Action_c.ActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Action::Descrip", instance);
		performTest(instance, "setDescrip", "Action::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Packageable Element:Visibility
     */
	public void testAttributeValueModificationPackageable_ElementVisibility() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PackageableElement_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PackageableElement_c.PackageableElementInstance(root);
     		instance = null;
     		ModelClass_c modelClass = ModelClass_c.ModelClassInstance(root);
     		if(modelClass != null) {
				instance = PackageableElement_c.getOnePE_PEOnR8001(modelClass);
			}
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Packageable Element::Visibility", instance);
		performTest(instance, "setVisibility", "Packageable Element::Visibility", Visibility_c.Protected);
	}

    /**
     *  Test modification of attribute: Synchronous Message:ResultTarget
     */
	public void testAttributeValueModificationSynchronous_MessageResultTarget() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SynchronousMessage_c.SynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Synchronous Message::ResultTarget", instance);
		performTest(instance, "setResulttarget", "Synchronous Message::ResultTarget", instance.getResulttarget() + modifyString);
	}

    /**
     *  Test modification of attribute: Synchronous Message:ReturnValue
     */
	public void testAttributeValueModificationSynchronous_MessageReturnValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SynchronousMessage_c.SynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Synchronous Message::ReturnValue", instance);
		performTest(instance, "setReturnvalue", "Synchronous Message::ReturnValue", instance.getReturnvalue() + modifyString);
	}

    /**
     *  Test modification of attribute: Synchronous Message:GuardCondition
     */
	public void testAttributeValueModificationSynchronous_MessageGuardCondition() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SynchronousMessage_c.SynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Synchronous Message::GuardCondition", instance);
		performTest(instance, "setGuardcondition", "Synchronous Message::GuardCondition", instance.getGuardcondition() + modifyString);
	}

    /**
     *  Test modification of attribute: Synchronous Message:Descrip
     */
	public void testAttributeValueModificationSynchronous_MessageDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SynchronousMessage_c.SynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Synchronous Message::Descrip", instance);
		performTest(instance, "setDescrip", "Synchronous Message::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Synchronous Message:InformalName
     */
	public void testAttributeValueModificationSynchronous_MessageInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SynchronousMessage_c.SynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Synchronous Message::InformalName", instance);
		performTest(instance, "setInformalname", "Synchronous Message::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Synchronous Message:SequenceNumb
     */
	public void testAttributeValueModificationSynchronous_MessageSequenceNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SynchronousMessage_c.SynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Synchronous Message::SequenceNumb", instance);
		performTest(instance, "setSequencenumb", "Synchronous Message::SequenceNumb", instance.getSequencenumb() + modifyString);
	}

    /**
     *  Test modification of attribute: Return Message:ReturnValue
     */
	public void testAttributeValueModificationReturn_MessageReturnValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReturnMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReturnMessage_c.ReturnMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Return Message::ReturnValue", instance);
		performTest(instance, "setReturnvalue", "Return Message::ReturnValue", instance.getReturnvalue() + modifyString);
	}

    /**
     *  Test modification of attribute: Return Message:ResultTarget
     */
	public void testAttributeValueModificationReturn_MessageResultTarget() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReturnMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReturnMessage_c.ReturnMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Return Message::ResultTarget", instance);
		performTest(instance, "setResulttarget", "Return Message::ResultTarget", instance.getResulttarget() + modifyString);
	}

    /**
     *  Test modification of attribute: Return Message:GuardCondition
     */
	public void testAttributeValueModificationReturn_MessageGuardCondition() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReturnMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReturnMessage_c.ReturnMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Return Message::GuardCondition", instance);
		performTest(instance, "setGuardcondition", "Return Message::GuardCondition", instance.getGuardcondition() + modifyString);
	}

    /**
     *  Test modification of attribute: Return Message:Descrip
     */
	public void testAttributeValueModificationReturn_MessageDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReturnMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReturnMessage_c.ReturnMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Return Message::Descrip", instance);
		performTest(instance, "setDescrip", "Return Message::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Return Message:Name
     */
	public void testAttributeValueModificationReturn_MessageName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReturnMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReturnMessage_c.ReturnMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Return Message::Name", instance);
		performTest(instance, "setName", "Return Message::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Return Message:SequenceNumb
     */
	public void testAttributeValueModificationReturn_MessageSequenceNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ReturnMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ReturnMessage_c.ReturnMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Return Message::SequenceNumb", instance);
		performTest(instance, "setSequencenumb", "Return Message::SequenceNumb", instance.getSequencenumb() + modifyString);
	}

    /**
     *  Test modification of attribute: Message Argument:Value
     */
	public void testAttributeValueModificationMessage_ArgumentValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		MessageArgument_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = MessageArgument_c.MessageArgumentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Message Argument::Value", instance);
		performTest(instance, "setValue", "Message Argument::Value", instance.getValue() + modifyString);
	}

    /**
     *  Test modification of attribute: Message Argument:InformalName
     */
	public void testAttributeValueModificationMessage_ArgumentInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		MessageArgument_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = MessageArgument_c.MessageArgumentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Message Argument::InformalName", instance);
		performTest(instance, "setInformalname", "Message Argument::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Message Argument:Descrip
     */
	public void testAttributeValueModificationMessage_ArgumentDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		MessageArgument_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = MessageArgument_c.MessageArgumentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Message Argument::Descrip", instance);
		performTest(instance, "setDescrip", "Message Argument::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Asynchronous Message:GuardCondition
     */
	public void testAttributeValueModificationAsynchronous_MessageGuardCondition() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AsynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AsynchronousMessage_c.AsynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Asynchronous Message::GuardCondition", instance);
		performTest(instance, "setGuardcondition", "Asynchronous Message::GuardCondition", instance.getGuardcondition() + modifyString);
	}

    /**
     *  Test modification of attribute: Asynchronous Message:Descrip
     */
	public void testAttributeValueModificationAsynchronous_MessageDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AsynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AsynchronousMessage_c.AsynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Asynchronous Message::Descrip", instance);
		performTest(instance, "setDescrip", "Asynchronous Message::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Asynchronous Message:DurationConstraint
     */
	public void testAttributeValueModificationAsynchronous_MessageDurationConstraint() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AsynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AsynchronousMessage_c.AsynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Asynchronous Message::DurationConstraint", instance);
		performTest(instance, "setDurationconstraint", "Asynchronous Message::DurationConstraint", instance.getDurationconstraint() + modifyString);
	}

    /**
     *  Test modification of attribute: Asynchronous Message:DurationObservation
     */
	public void testAttributeValueModificationAsynchronous_MessageDurationObservation() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AsynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AsynchronousMessage_c.AsynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Asynchronous Message::DurationObservation", instance);
		performTest(instance, "setDurationobservation", "Asynchronous Message::DurationObservation", instance.getDurationobservation() + modifyString);
	}

    /**
     *  Test modification of attribute: Asynchronous Message:InformalName
     */
	public void testAttributeValueModificationAsynchronous_MessageInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AsynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AsynchronousMessage_c.AsynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Asynchronous Message::InformalName", instance);
		performTest(instance, "setInformalname", "Asynchronous Message::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Asynchronous Message:SequenceNumb
     */
	public void testAttributeValueModificationAsynchronous_MessageSequenceNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AsynchronousMessage_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AsynchronousMessage_c.AsynchronousMessageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Asynchronous Message::SequenceNumb", instance);
		performTest(instance, "setSequencenumb", "Asynchronous Message::SequenceNumb", instance.getSequencenumb() + modifyString);
	}

    /**
     *  Test modification of attribute: Use Case Participant:Name
     */
	public void testAttributeValueModificationUse_Case_ParticipantName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		UseCaseParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = UseCaseParticipant_c.UseCaseParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Use Case Participant::Name", instance);
		performTest(instance, "setName", "Use Case Participant::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Use Case Participant:Descrip
     */
	public void testAttributeValueModificationUse_Case_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		UseCaseParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = UseCaseParticipant_c.UseCaseParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Use Case Participant::Descrip", instance);
		performTest(instance, "setDescrip", "Use Case Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Timing Mark:Name
     */
	public void testAttributeValueModificationTiming_MarkName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		TimingMark_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = TimingMark_c.TimingMarkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Timing Mark::Name", instance);
		performTest(instance, "setName", "Timing Mark::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Timing Mark:Descrip
     */
	public void testAttributeValueModificationTiming_MarkDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		TimingMark_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = TimingMark_c.TimingMarkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Timing Mark::Descrip", instance);
		performTest(instance, "setDescrip", "Timing Mark::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Time Span:Name
     */
	public void testAttributeValueModificationTime_SpanName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		TimeSpan_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = TimeSpan_c.TimeSpanInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Time Span::Name", instance);
		performTest(instance, "setName", "Time Span::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Time Span:Descrip
     */
	public void testAttributeValueModificationTime_SpanDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		TimeSpan_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = TimeSpan_c.TimeSpanInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Time Span::Descrip", instance);
		performTest(instance, "setDescrip", "Time Span::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Package Participant:InformalName
     */
	public void testAttributeValueModificationPackage_ParticipantInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PackageParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PackageParticipant_c.PackageParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Package Participant::InformalName", instance);
		performTest(instance, "setInformalname", "Package Participant::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Package Participant:Descrip
     */
	public void testAttributeValueModificationPackage_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PackageParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PackageParticipant_c.PackageParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Package Participant::Descrip", instance);
		performTest(instance, "setDescrip", "Package Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Lifespan:Descrip
     */
	public void testAttributeValueModificationLifespanDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Lifespan_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Lifespan_c.LifespanInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Lifespan::Descrip", instance);
		performTest(instance, "setDescrip", "Lifespan::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Lifespan:Destroyed
     */
	public void testAttributeValueModificationLifespanDestroyed() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Lifespan_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Lifespan_c.LifespanInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Lifespan::Destroyed", instance);
		performTest(instance, "setDestroyed", "Lifespan::Destroyed", !instance.getDestroyed());
	}

    /**
     *  Test modification of attribute: Instance Attribute Value:Value
     */
	public void testAttributeValueModificationInstance_Attribute_ValueValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InstanceAttributeValue_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InstanceAttributeValue_c.InstanceAttributeValueInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Instance Attribute Value::Value", instance);
		performTest(instance, "setValue", "Instance Attribute Value::Value", instance.getValue() + modifyString);
	}

    /**
     *  Test modification of attribute: Instance Attribute Value:InformalName
     */
	public void testAttributeValueModificationInstance_Attribute_ValueInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InstanceAttributeValue_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InstanceAttributeValue_c.InstanceAttributeValueInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Instance Attribute Value::InformalName", instance);
		performTest(instance, "setInformalname", "Instance Attribute Value::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Instance Attribute Value:Descrip
     */
	public void testAttributeValueModificationInstance_Attribute_ValueDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InstanceAttributeValue_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InstanceAttributeValue_c.InstanceAttributeValueInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Instance Attribute Value::Descrip", instance);
		performTest(instance, "setDescrip", "Instance Attribute Value::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity Participant:InformalName
     */
	public void testAttributeValueModificationExternal_Entity_ParticipantInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntityParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntityParticipant_c.ExternalEntityParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity Participant::InformalName", instance);
		performTest(instance, "setInformalname", "External Entity Participant::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity Participant:Descrip
     */
	public void testAttributeValueModificationExternal_Entity_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntityParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntityParticipant_c.ExternalEntityParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity Participant::Descrip", instance);
		performTest(instance, "setDescrip", "External Entity Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Component Participant:InformalComponentName
     */
	public void testAttributeValueModificationComponent_ParticipantInformalComponentName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ComponentParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ComponentParticipant_c.ComponentParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component Participant::InformalComponentName", instance);
		performTest(instance, "setInformalcomponentname", "Component Participant::InformalComponentName", instance.getInformalcomponentname() + modifyString);
	}

    /**
     *  Test modification of attribute: Component Participant:Descrip
     */
	public void testAttributeValueModificationComponent_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ComponentParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ComponentParticipant_c.ComponentParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component Participant::Descrip", instance);
		performTest(instance, "setDescrip", "Component Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Participant Attribute:Name
     */
	public void testAttributeValueModificationClass_Participant_AttributeName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassParticipantAttribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassParticipantAttribute_c.ClassParticipantAttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Participant Attribute::Name", instance);
		performTest(instance, "setName", "Class Participant Attribute::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Participant Attribute:Type
     */
	public void testAttributeValueModificationClass_Participant_AttributeType() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassParticipantAttribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassParticipantAttribute_c.ClassParticipantAttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Participant Attribute::Type", instance);
		performTest(instance, "setType", "Class Participant Attribute::Type", instance.getType() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Participant Attribute:Descrip
     */
	public void testAttributeValueModificationClass_Participant_AttributeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassParticipantAttribute_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassParticipantAttribute_c.ClassParticipantAttributeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Participant Attribute::Descrip", instance);
		performTest(instance, "setDescrip", "Class Participant Attribute::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Participant:InformalName
     */
	public void testAttributeValueModificationClass_ParticipantInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassParticipant_c.ClassParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Participant::InformalName", instance);
		performTest(instance, "setInformalname", "Class Participant::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Participant:Descrip
     */
	public void testAttributeValueModificationClass_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassParticipant_c.ClassParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Participant::Descrip", instance);
		performTest(instance, "setDescrip", "Class Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Instance Participant:Name
     */
	public void testAttributeValueModificationClass_Instance_ParticipantName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassInstanceParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassInstanceParticipant_c.ClassInstanceParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Instance Participant::Name", instance);
		performTest(instance, "setName", "Class Instance Participant::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Instance Participant:InformalClassName
     */
	public void testAttributeValueModificationClass_Instance_ParticipantInformalClassName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassInstanceParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassInstanceParticipant_c.ClassInstanceParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Instance Participant::InformalClassName", instance);
		performTest(instance, "setInformalclassname", "Class Instance Participant::InformalClassName", instance.getInformalclassname() + modifyString);
	}

    /**
     *  Test modification of attribute: Class Instance Participant:Descrip
     */
	public void testAttributeValueModificationClass_Instance_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassInstanceParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassInstanceParticipant_c.ClassInstanceParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class Instance Participant::Descrip", instance);
		performTest(instance, "setDescrip", "Class Instance Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Actor Participant:Name
     */
	public void testAttributeValueModificationActor_ParticipantName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActorParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActorParticipant_c.ActorParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Actor Participant::Name", instance);
		performTest(instance, "setName", "Actor Participant::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Actor Participant:Descrip
     */
	public void testAttributeValueModificationActor_ParticipantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActorParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActorParticipant_c.ActorParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Actor Participant::Descrip", instance);
		performTest(instance, "setDescrip", "Actor Participant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Package:Descrip
     */
	public void testAttributeValueModificationPackageDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Package_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Package_c.PackageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Package::Descrip", instance);
		performTest(instance, "setDescrip", "Package::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Package:Num_Rng
     */
	public void testAttributeValueModificationPackageNum_Rng() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Package_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Package_c.PackageInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Package::Num_Rng", instance);
		performTest(instance, "setNum_rng", "Package::Num_Rng", instance.getNum_rng() + 1);
	}

    /**
     *  Test modification of attribute: Structure Member:Name
     */
	public void testAttributeValueModificationStructure_MemberName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StructureMember_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StructureMember_c.StructureMemberInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Structure Member::Name", instance);
		performTest(instance, "setName", "Structure Member::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Structure Member:Descrip
     */
	public void testAttributeValueModificationStructure_MemberDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StructureMember_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StructureMember_c.StructureMemberInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Structure Member::Descrip", instance);
		performTest(instance, "setDescrip", "Structure Member::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Structure Member:Dimensions
     */
	public void testAttributeValueModificationStructure_MemberDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		StructureMember_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = StructureMember_c.StructureMemberInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Structure Member::Dimensions", instance);
		performTest(instance, "setDimensions", "Structure Member::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Function Parameter:Name
     */
	public void testAttributeValueModificationFunction_ParameterName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		FunctionParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = FunctionParameter_c.FunctionParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function Parameter::Name", instance);
		performTest(instance, "setName", "Function Parameter::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Function Parameter:By_Ref
     */
	public void testAttributeValueModificationFunction_ParameterBy_Ref() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		FunctionParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = FunctionParameter_c.FunctionParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function Parameter::By_Ref", instance);
		performTest(instance, "setBy_ref", "Function Parameter::By_Ref", instance.getBy_ref() + 1);
	}

    /**
     *  Test modification of attribute: Function Parameter:Dimensions
     */
	public void testAttributeValueModificationFunction_ParameterDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		FunctionParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = FunctionParameter_c.FunctionParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function Parameter::Dimensions", instance);
		performTest(instance, "setDimensions", "Function Parameter::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Function Parameter:Descrip
     */
	public void testAttributeValueModificationFunction_ParameterDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		FunctionParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = FunctionParameter_c.FunctionParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function Parameter::Descrip", instance);
		performTest(instance, "setDescrip", "Function Parameter::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Function:Name
     */
	public void testAttributeValueModificationFunctionName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Function_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Function_c.FunctionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function::Name", instance);
		performTest(instance, "setName", "Function::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Function:Descrip
     */
	public void testAttributeValueModificationFunctionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Function_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Function_c.FunctionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function::Descrip", instance);
		performTest(instance, "setDescrip", "Function::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Function:Suc_Pars
     */
	public void testAttributeValueModificationFunctionSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Function_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Function_c.FunctionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Function::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Function:Return_Dimensions
     */
	public void testAttributeValueModificationFunctionReturn_Dimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Function_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Function_c.FunctionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Function::Return_Dimensions", instance);
		performTest(instance, "setReturn_dimensions", "Function::Return_Dimensions", instance.getReturn_dimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity:Name
     */
	public void testAttributeValueModificationExternal_EntityName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntity_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntity_c.ExternalEntityInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity::Name", instance);
		performTest(instance, "setName", "External Entity::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity:Descrip
     */
	public void testAttributeValueModificationExternal_EntityDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntity_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntity_c.ExternalEntityInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity::Descrip", instance);
		performTest(instance, "setDescrip", "External Entity::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity:Key_Lett
     */
	public void testAttributeValueModificationExternal_EntityKey_Lett() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntity_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntity_c.ExternalEntityInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity::Key_Lett", instance);
		performTest(instance, "setKey_lett", "External Entity::Key_Lett", instance.getKey_lett() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity:Realized_Class_Path
     */
	public void testAttributeValueModificationExternal_EntityRealized_Class_Path() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntity_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntity_c.ExternalEntityInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity::Realized_Class_Path", instance);
		performTest(instance, "setRealized_class_path", "External Entity::Realized_Class_Path", instance.getRealized_class_path() + modifyString);
	}

    /**
     *  Test modification of attribute: External Entity:isRealized
     */
	public void testAttributeValueModificationExternal_EntityisRealized() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ExternalEntity_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ExternalEntity_c.ExternalEntityInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: External Entity::isRealized", instance);
		performTest(instance, "setIsrealized", "External Entity::isRealized", !instance.getIsrealized());
	}

    /**
     *  Test modification of attribute: Enumerator:Name
     */
	public void testAttributeValueModificationEnumeratorName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Enumerator_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Enumerator_c.EnumeratorInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Enumerator::Name", instance);
		performTest(instance, "setName", "Enumerator::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Enumerator:Descrip
     */
	public void testAttributeValueModificationEnumeratorDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Enumerator_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Enumerator_c.EnumeratorInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Enumerator::Descrip", instance);
		performTest(instance, "setDescrip", "Enumerator::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Data Type:Name
     */
	public void testAttributeValueModificationData_TypeName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		DataType_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = DataType_c.DataTypeInstance(root);
			InstanceReferenceDataType_c irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(instance);
			if(irdt != null) {
				instance = null;
				continue;
			}
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Data Type::Name", instance);
		performTest(instance, "setName", "Data Type::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Data Type:Descrip
     */
	public void testAttributeValueModificationData_TypeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		DataType_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = DataType_c.DataTypeInstance(root);
			InstanceReferenceDataType_c irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(instance);
			if(irdt != null) {
				instance = null;
				continue;
			}
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Data Type::Descrip", instance);
		performTest(instance, "setDescrip", "Data Type::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Data Type:DefaultValue
     */
	public void testAttributeValueModificationData_TypeDefaultValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		DataType_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = DataType_c.DataTypeInstance(root);
			InstanceReferenceDataType_c irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(instance);
			if(irdt != null) {
				instance = null;
				continue;
			}
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Data Type::DefaultValue", instance);
		performTest(instance, "setDefaultvalue", "Data Type::DefaultValue", instance.getDefaultvalue() + modifyString);
	}

    /**
     *  Test modification of attribute: Bridge Parameter:Name
     */
	public void testAttributeValueModificationBridge_ParameterName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		BridgeParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = BridgeParameter_c.BridgeParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge Parameter::Name", instance);
		performTest(instance, "setName", "Bridge Parameter::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Bridge Parameter:By_Ref
     */
	public void testAttributeValueModificationBridge_ParameterBy_Ref() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		BridgeParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = BridgeParameter_c.BridgeParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge Parameter::By_Ref", instance);
		performTest(instance, "setBy_ref", "Bridge Parameter::By_Ref", instance.getBy_ref() + 1);
	}

    /**
     *  Test modification of attribute: Bridge Parameter:Dimensions
     */
	public void testAttributeValueModificationBridge_ParameterDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		BridgeParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = BridgeParameter_c.BridgeParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge Parameter::Dimensions", instance);
		performTest(instance, "setDimensions", "Bridge Parameter::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Bridge Parameter:Descrip
     */
	public void testAttributeValueModificationBridge_ParameterDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		BridgeParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = BridgeParameter_c.BridgeParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge Parameter::Descrip", instance);
		performTest(instance, "setDescrip", "Bridge Parameter::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Bridge:Name
     */
	public void testAttributeValueModificationBridgeName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Bridge_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Bridge_c.BridgeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge::Name", instance);
		performTest(instance, "setName", "Bridge::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Bridge:Descrip
     */
	public void testAttributeValueModificationBridgeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Bridge_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Bridge_c.BridgeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge::Descrip", instance);
		performTest(instance, "setDescrip", "Bridge::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Bridge:Suc_Pars
     */
	public void testAttributeValueModificationBridgeSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Bridge_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Bridge_c.BridgeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Bridge::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Bridge:Return_Dimensions
     */
	public void testAttributeValueModificationBridgeReturn_Dimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Bridge_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Bridge_c.BridgeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Bridge::Return_Dimensions", instance);
		performTest(instance, "setReturn_dimensions", "Bridge::Return_Dimensions", instance.getReturn_dimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Symbolic Constant:Name
     */
	public void testAttributeValueModificationSymbolic_ConstantName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SymbolicConstant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SymbolicConstant_c.SymbolicConstantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Symbolic Constant::Name", instance);
		performTest(instance, "setName", "Symbolic Constant::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Symbolic Constant:Descrip
     */
	public void testAttributeValueModificationSymbolic_ConstantDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SymbolicConstant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SymbolicConstant_c.SymbolicConstantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Symbolic Constant::Descrip", instance);
		performTest(instance, "setDescrip", "Symbolic Constant::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Literal Symbolic Constant:Value
     */
	public void testAttributeValueModificationLiteral_Symbolic_ConstantValue() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		LiteralSymbolicConstant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Literal Symbolic Constant::Value", instance);
		performTest(instance, "setValue", "Literal Symbolic Constant::Value", instance.getValue() + modifyString);
	}

    /**
     *  Test modification of attribute: Constant Specification:InformalGroupName
     */
	public void testAttributeValueModificationConstant_SpecificationInformalGroupName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ConstantSpecification_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ConstantSpecification_c.ConstantSpecificationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Constant Specification::InformalGroupName", instance);
		performTest(instance, "setInformalgroupname", "Constant Specification::InformalGroupName", instance.getInformalgroupname() + modifyString);
	}

    /**
     *  Test modification of attribute: Constant Specification:Descrip
     */
	public void testAttributeValueModificationConstant_SpecificationDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ConstantSpecification_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ConstantSpecification_c.ConstantSpecificationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Constant Specification::Descrip", instance);
		performTest(instance, "setDescrip", "Constant Specification::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Required Signal:Suc_Pars
     */
	public void testAttributeValueModificationRequired_SignalSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		RequiredSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = RequiredSignal_c.RequiredSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Required Signal::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Required Signal::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Required Operation:Suc_Pars
     */
	public void testAttributeValueModificationRequired_OperationSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		RequiredOperation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = RequiredOperation_c.RequiredOperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Required Operation::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Required Operation::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Provided Signal:Suc_Pars
     */
	public void testAttributeValueModificationProvided_SignalSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ProvidedSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ProvidedSignal_c.ProvidedSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Provided Signal::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Provided Signal::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Provided Operation:Suc_Pars
     */
	public void testAttributeValueModificationProvided_OperationSuc_Pars() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ProvidedOperation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ProvidedOperation_c.ProvidedOperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Provided Operation::Suc_Pars", instance);
		performTest(instance, "setSuc_pars", "Provided Operation::Suc_Pars", Parsestatus_c.doNotParse);
	}

    /**
     *  Test modification of attribute: Satisfaction:Descrip
     */
	public void testAttributeValueModificationSatisfactionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Satisfaction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Satisfaction_c.SatisfactionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Satisfaction::Descrip", instance);
		performTest(instance, "setDescrip", "Satisfaction::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Requirement:Descrip
     */
	public void testAttributeValueModificationRequirementDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Requirement_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Requirement_c.RequirementInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Requirement::Descrip", instance);
		performTest(instance, "setDescrip", "Requirement::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Requirement:InformalName
     */
	public void testAttributeValueModificationRequirementInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Requirement_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Requirement_c.RequirementInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Requirement::InformalName", instance);
		performTest(instance, "setInformalname", "Requirement::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Provision:Descrip
     */
	public void testAttributeValueModificationProvisionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Provision_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Provision_c.ProvisionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Provision::Descrip", instance);
		performTest(instance, "setDescrip", "Provision::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Provision:InformalName
     */
	public void testAttributeValueModificationProvisionInformalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Provision_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Provision_c.ProvisionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Provision::InformalName", instance);
		performTest(instance, "setInformalname", "Provision::InformalName", instance.getInformalname() + modifyString);
	}

    /**
     *  Test modification of attribute: Property Parameter:Name
     */
	public void testAttributeValueModificationProperty_ParameterName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PropertyParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PropertyParameter_c.PropertyParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Property Parameter::Name", instance);
		performTest(instance, "setName", "Property Parameter::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Property Parameter:Descrip
     */
	public void testAttributeValueModificationProperty_ParameterDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PropertyParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PropertyParameter_c.PropertyParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Property Parameter::Descrip", instance);
		performTest(instance, "setDescrip", "Property Parameter::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Property Parameter:By_Ref
     */
	public void testAttributeValueModificationProperty_ParameterBy_Ref() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PropertyParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PropertyParameter_c.PropertyParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Property Parameter::By_Ref", instance);
		performTest(instance, "setBy_ref", "Property Parameter::By_Ref", instance.getBy_ref() + 1);
	}

    /**
     *  Test modification of attribute: Property Parameter:Dimensions
     */
	public void testAttributeValueModificationProperty_ParameterDimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		PropertyParameter_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = PropertyParameter_c.PropertyParameterInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Property Parameter::Dimensions", instance);
		performTest(instance, "setDimensions", "Property Parameter::Dimensions", instance.getDimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Port:Name
     */
	public void testAttributeValueModificationPortName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Port_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Port_c.PortInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Port::Name", instance);
		performTest(instance, "setName", "Port::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Port:DoNotShowPortOnCanvas
     */
	public void testAttributeValueModificationPortDoNotShowPortOnCanvas() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Port_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Port_c.PortInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Port::DoNotShowPortOnCanvas", instance);
		performTest(instance, "setDonotshowportoncanvas", "Port::DoNotShowPortOnCanvas", !instance.getDonotshowportoncanvas());
	}

    /**
     *  Test modification of attribute: Port:Mult
     */
	public void testAttributeValueModificationPortMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Port_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Port_c.PortInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Port::Mult", instance);
		performTest(instance, "setMult", "Port::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Interface Signal:Name
     */
	public void testAttributeValueModificationInterface_SignalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceSignal_c.InterfaceSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Signal::Name", instance);
		performTest(instance, "setName", "Interface Signal::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Interface Signal:Descrip
     */
	public void testAttributeValueModificationInterface_SignalDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceSignal_c.InterfaceSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Signal::Descrip", instance);
		performTest(instance, "setDescrip", "Interface Signal::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Interface Signal:Direction
     */
	public void testAttributeValueModificationInterface_SignalDirection() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceSignal_c.InterfaceSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Signal::Direction", instance);
		performTest(instance, "setDirection", "Interface Signal::Direction", Ifdirectiontype_c.ServerClient);
	}

    /**
     *  Test modification of attribute: Interface Operation:Name
     */
	public void testAttributeValueModificationInterface_OperationName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceOperation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceOperation_c.InterfaceOperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Operation::Name", instance);
		performTest(instance, "setName", "Interface Operation::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Interface Operation:Descrip
     */
	public void testAttributeValueModificationInterface_OperationDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceOperation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceOperation_c.InterfaceOperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Operation::Descrip", instance);
		performTest(instance, "setDescrip", "Interface Operation::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Interface Operation:Direction
     */
	public void testAttributeValueModificationInterface_OperationDirection() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceOperation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceOperation_c.InterfaceOperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Operation::Direction", instance);
		performTest(instance, "setDirection", "Interface Operation::Direction", Ifdirectiontype_c.ServerClient);
	}

    /**
     *  Test modification of attribute: Interface Operation:Return_Dimensions
     */
	public void testAttributeValueModificationInterface_OperationReturn_Dimensions() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InterfaceOperation_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InterfaceOperation_c.InterfaceOperationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface Operation::Return_Dimensions", instance);
		performTest(instance, "setReturn_dimensions", "Interface Operation::Return_Dimensions", instance.getReturn_dimensions() + modifyString);
	}

    /**
     *  Test modification of attribute: Interface:Descrip
     */
	public void testAttributeValueModificationInterfaceDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Interface_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Interface_c.InterfaceInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Interface::Descrip", instance);
		performTest(instance, "setDescrip", "Interface::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Imported Requirement:Descrip
     */
	public void testAttributeValueModificationImported_RequirementDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ImportedRequirement_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ImportedRequirement_c.ImportedRequirementInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Imported Requirement::Descrip", instance);
		performTest(instance, "setDescrip", "Imported Requirement::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Imported Provision:Descrip
     */
	public void testAttributeValueModificationImported_ProvisionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ImportedProvision_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ImportedProvision_c.ImportedProvisionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Imported Provision::Descrip", instance);
		performTest(instance, "setDescrip", "Imported Provision::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Component Reference:Mult
     */
	public void testAttributeValueModificationComponent_ReferenceMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ComponentReference_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ComponentReference_c.ComponentReferenceInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component Reference::Mult", instance);
		performTest(instance, "setMult", "Component Reference::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Component Reference:ClassifierName
     */
	public void testAttributeValueModificationComponent_ReferenceClassifierName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ComponentReference_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ComponentReference_c.ComponentReferenceInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component Reference::ClassifierName", instance);
		performTest(instance, "setClassifiername", "Component Reference::ClassifierName", instance.getClassifiername() + modifyString);
	}

    /**
     *  Test modification of attribute: Component Reference:Descrip
     */
	public void testAttributeValueModificationComponent_ReferenceDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ComponentReference_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ComponentReference_c.ComponentReferenceInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component Reference::Descrip", instance);
		performTest(instance, "setDescrip", "Component Reference::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Component:Descrip
     */
	public void testAttributeValueModificationComponentDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Component_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Component_c.ComponentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component::Descrip", instance);
		performTest(instance, "setDescrip", "Component::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Component:Mult
     */
	public void testAttributeValueModificationComponentMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Component_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Component_c.ComponentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component::Mult", instance);
		performTest(instance, "setMult", "Component::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Component:isRealized
     */
	public void testAttributeValueModificationComponentisRealized() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Component_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Component_c.ComponentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component::isRealized", instance);
		performTest(instance, "setIsrealized", "Component::isRealized", !instance.getIsrealized());
	}

    /**
     *  Test modification of attribute: Component:Realized_Class_Path
     */
	public void testAttributeValueModificationComponentRealized_Class_Path() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Component_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Component_c.ComponentInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Component::Realized_Class_Path", instance);
		performTest(instance, "setRealized_class_path", "Component::Realized_Class_Path", instance.getRealized_class_path() + modifyString);
	}

    /**
     *  Test modification of attribute: Communication Link:Numb
     */
	public void testAttributeValueModificationCommunication_LinkNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CommunicationLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CommunicationLink_c.CommunicationLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Communication Link::Numb", instance);
		performTest(instance, "setNumb", "Communication Link::Numb", instance.getNumb() + modifyString);
	}

    /**
     *  Test modification of attribute: Communication Link:StartText
     */
	public void testAttributeValueModificationCommunication_LinkStartText() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CommunicationLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CommunicationLink_c.CommunicationLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Communication Link::StartText", instance);
		performTest(instance, "setStarttext", "Communication Link::StartText", instance.getStarttext() + modifyString);
	}

    /**
     *  Test modification of attribute: Communication Link:EndText
     */
	public void testAttributeValueModificationCommunication_LinkEndText() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CommunicationLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CommunicationLink_c.CommunicationLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Communication Link::EndText", instance);
		performTest(instance, "setEndtext", "Communication Link::EndText", instance.getEndtext() + modifyString);
	}

    /**
     *  Test modification of attribute: Communication Link:StartVisibility
     */
	public void testAttributeValueModificationCommunication_LinkStartVisibility() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CommunicationLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CommunicationLink_c.CommunicationLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Communication Link::StartVisibility", instance);
		performTest(instance, "setStartvisibility", "Communication Link::StartVisibility", Visibility_c.Protected);
	}

    /**
     *  Test modification of attribute: Communication Link:EndVisibility
     */
	public void testAttributeValueModificationCommunication_LinkEndVisibility() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CommunicationLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CommunicationLink_c.CommunicationLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Communication Link::EndVisibility", instance);
		performTest(instance, "setEndvisibility", "Communication Link::EndVisibility", Visibility_c.Protected);
	}

    /**
     *  Test modification of attribute: Communication Link:Descrip
     */
	public void testAttributeValueModificationCommunication_LinkDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		CommunicationLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = CommunicationLink_c.CommunicationLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Communication Link::Descrip", instance);
		performTest(instance, "setDescrip", "Communication Link::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Class As Simple Participant:Mult
     */
	public void testAttributeValueModificationClass_As_Simple_ParticipantMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsSimpleParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsSimpleParticipant_c.ClassAsSimpleParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Simple Participant::Mult", instance);
		performTest(instance, "setMult", "Class As Simple Participant::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Class As Simple Participant:Cond
     */
	public void testAttributeValueModificationClass_As_Simple_ParticipantCond() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsSimpleParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsSimpleParticipant_c.ClassAsSimpleParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Simple Participant::Cond", instance);
		performTest(instance, "setCond", "Class As Simple Participant::Cond", instance.getCond() + 1);
	}

    /**
     *  Test modification of attribute: Class As Simple Participant:Txt_Phrs
     */
	public void testAttributeValueModificationClass_As_Simple_ParticipantTxt_Phrs() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsSimpleParticipant_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsSimpleParticipant_c.ClassAsSimpleParticipantInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Simple Participant::Txt_Phrs", instance);
		performTest(instance, "setTxt_phrs", "Class As Simple Participant::Txt_Phrs", instance.getTxt_phrs() + modifyString);
	}

    /**
     *  Test modification of attribute: Class As Simple Formalizer:Mult
     */
	public void testAttributeValueModificationClass_As_Simple_FormalizerMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsSimpleFormalizer_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsSimpleFormalizer_c.ClassAsSimpleFormalizerInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Simple Formalizer::Mult", instance);
		performTest(instance, "setMult", "Class As Simple Formalizer::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Class As Simple Formalizer:Cond
     */
	public void testAttributeValueModificationClass_As_Simple_FormalizerCond() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsSimpleFormalizer_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsSimpleFormalizer_c.ClassAsSimpleFormalizerInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Simple Formalizer::Cond", instance);
		performTest(instance, "setCond", "Class As Simple Formalizer::Cond", instance.getCond() + 1);
	}

    /**
     *  Test modification of attribute: Class As Simple Formalizer:Txt_Phrs
     */
	public void testAttributeValueModificationClass_As_Simple_FormalizerTxt_Phrs() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsSimpleFormalizer_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsSimpleFormalizer_c.ClassAsSimpleFormalizerInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Simple Formalizer::Txt_Phrs", instance);
		performTest(instance, "setTxt_phrs", "Class As Simple Formalizer::Txt_Phrs", instance.getTxt_phrs() + modifyString);
	}

    /**
     *  Test modification of attribute: Class As Link:Mult
     */
	public void testAttributeValueModificationClass_As_LinkMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsLink_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsLink_c.ClassAsLinkInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Link::Mult", instance);
		performTest(instance, "setMult", "Class As Link::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Class As Associated Other Side:Mult
     */
	public void testAttributeValueModificationClass_As_Associated_Other_SideMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsAssociatedOtherSide_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsAssociatedOtherSide_c.ClassAsAssociatedOtherSideInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Associated Other Side::Mult", instance);
		performTest(instance, "setMult", "Class As Associated Other Side::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Class As Associated Other Side:Cond
     */
	public void testAttributeValueModificationClass_As_Associated_Other_SideCond() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsAssociatedOtherSide_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsAssociatedOtherSide_c.ClassAsAssociatedOtherSideInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Associated Other Side::Cond", instance);
		performTest(instance, "setCond", "Class As Associated Other Side::Cond", instance.getCond() + 1);
	}

    /**
     *  Test modification of attribute: Class As Associated Other Side:Txt_Phrs
     */
	public void testAttributeValueModificationClass_As_Associated_Other_SideTxt_Phrs() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsAssociatedOtherSide_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsAssociatedOtherSide_c.ClassAsAssociatedOtherSideInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Associated Other Side::Txt_Phrs", instance);
		performTest(instance, "setTxt_phrs", "Class As Associated Other Side::Txt_Phrs", instance.getTxt_phrs() + modifyString);
	}

    /**
     *  Test modification of attribute: Class As Associated One Side:Mult
     */
	public void testAttributeValueModificationClass_As_Associated_One_SideMult() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsAssociatedOneSide_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsAssociatedOneSide_c.ClassAsAssociatedOneSideInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Associated One Side::Mult", instance);
		performTest(instance, "setMult", "Class As Associated One Side::Mult", instance.getMult() + 1);
	}

    /**
     *  Test modification of attribute: Class As Associated One Side:Cond
     */
	public void testAttributeValueModificationClass_As_Associated_One_SideCond() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsAssociatedOneSide_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsAssociatedOneSide_c.ClassAsAssociatedOneSideInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Associated One Side::Cond", instance);
		performTest(instance, "setCond", "Class As Associated One Side::Cond", instance.getCond() + 1);
	}

    /**
     *  Test modification of attribute: Class As Associated One Side:Txt_Phrs
     */
	public void testAttributeValueModificationClass_As_Associated_One_SideTxt_Phrs() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ClassAsAssociatedOneSide_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ClassAsAssociatedOneSide_c.ClassAsAssociatedOneSideInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Class As Associated One Side::Txt_Phrs", instance);
		performTest(instance, "setTxt_phrs", "Class As Associated One Side::Txt_Phrs", instance.getTxt_phrs() + modifyString);
	}

    /**
     *  Test modification of attribute: Association:Numb
     */
	public void testAttributeValueModificationAssociationNumb() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Association_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Association_c.AssociationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Association::Numb", instance);
		performTest(instance, "setNumb", "Association::Numb", instance.getNumb() + 1);
	}

    /**
     *  Test modification of attribute: Association:Descrip
     */
	public void testAttributeValueModificationAssociationDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		Association_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = Association_c.AssociationInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Association::Descrip", instance);
		performTest(instance, "setDescrip", "Association::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Send Signal:Name
     */
	public void testAttributeValueModificationSend_SignalName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SendSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SendSignal_c.SendSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Send Signal::Name", instance);
		performTest(instance, "setName", "Send Signal::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Send Signal:Descrip
     */
	public void testAttributeValueModificationSend_SignalDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		SendSignal_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = SendSignal_c.SendSignalInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Send Signal::Descrip", instance);
		performTest(instance, "setDescrip", "Send Signal::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Object Node:Name
     */
	public void testAttributeValueModificationObject_NodeName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ObjectNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ObjectNode_c.ObjectNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Object Node::Name", instance);
		performTest(instance, "setName", "Object Node::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Object Node:Descrip
     */
	public void testAttributeValueModificationObject_NodeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ObjectNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ObjectNode_c.ObjectNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Object Node::Descrip", instance);
		performTest(instance, "setDescrip", "Object Node::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Initial Node:Descrip
     */
	public void testAttributeValueModificationInitial_NodeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		InitialNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = InitialNode_c.InitialNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Initial Node::Descrip", instance);
		performTest(instance, "setDescrip", "Initial Node::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Fork Join Node:Descrip
     */
	public void testAttributeValueModificationFork_Join_NodeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ForkJoinNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ForkJoinNode_c.ForkJoinNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Fork Join Node::Descrip", instance);
		performTest(instance, "setDescrip", "Fork Join Node::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Fork Join Node:GuardCondition
     */
	public void testAttributeValueModificationFork_Join_NodeGuardCondition() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ForkJoinNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ForkJoinNode_c.ForkJoinNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Fork Join Node::GuardCondition", instance);
		performTest(instance, "setGuardcondition", "Fork Join Node::GuardCondition", instance.getGuardcondition() + modifyString);
	}

    /**
     *  Test modification of attribute: Flow Final Node:Descrip
     */
	public void testAttributeValueModificationFlow_Final_NodeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		FlowFinalNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = FlowFinalNode_c.FlowFinalNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Flow Final Node::Descrip", instance);
		performTest(instance, "setDescrip", "Flow Final Node::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Decision Merge Node:Name
     */
	public void testAttributeValueModificationDecision_Merge_NodeName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		DecisionMergeNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = DecisionMergeNode_c.DecisionMergeNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Decision Merge Node::Name", instance);
		performTest(instance, "setName", "Decision Merge Node::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Decision Merge Node:Descrip
     */
	public void testAttributeValueModificationDecision_Merge_NodeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		DecisionMergeNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = DecisionMergeNode_c.DecisionMergeNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Decision Merge Node::Descrip", instance);
		performTest(instance, "setDescrip", "Decision Merge Node::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Partition:Name
     */
	public void testAttributeValueModificationActivity_PartitionName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityPartition_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityPartition_c.ActivityPartitionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Partition::Name", instance);
		performTest(instance, "setName", "Activity Partition::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Partition:Descrip
     */
	public void testAttributeValueModificationActivity_PartitionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityPartition_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityPartition_c.ActivityPartitionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Partition::Descrip", instance);
		performTest(instance, "setDescrip", "Activity Partition::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Final Node:Descrip
     */
	public void testAttributeValueModificationActivity_Final_NodeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityFinalNode_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityFinalNode_c.ActivityFinalNodeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Final Node::Descrip", instance);
		performTest(instance, "setDescrip", "Activity Final Node::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Edge:Guard
     */
	public void testAttributeValueModificationActivity_EdgeGuard() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityEdge_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityEdge_c.ActivityEdgeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Edge::Guard", instance);
		performTest(instance, "setGuard", "Activity Edge::Guard", instance.getGuard() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Edge:Descrip
     */
	public void testAttributeValueModificationActivity_EdgeDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityEdge_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityEdge_c.ActivityEdgeInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Edge::Descrip", instance);
		performTest(instance, "setDescrip", "Activity Edge::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Diagram Action:Name
     */
	public void testAttributeValueModificationActivity_Diagram_ActionName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityDiagramAction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityDiagramAction_c.ActivityDiagramActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Diagram Action::Name", instance);
		performTest(instance, "setName", "Activity Diagram Action::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Activity Diagram Action:Descrip
     */
	public void testAttributeValueModificationActivity_Diagram_ActionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		ActivityDiagramAction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = ActivityDiagramAction_c.ActivityDiagramActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Activity Diagram Action::Descrip", instance);
		performTest(instance, "setDescrip", "Activity Diagram Action::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Accept Time Event Action:Name
     */
	public void testAttributeValueModificationAccept_Time_Event_ActionName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AcceptTimeEventAction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AcceptTimeEventAction_c.AcceptTimeEventActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Accept Time Event Action::Name", instance);
		performTest(instance, "setName", "Accept Time Event Action::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Accept Time Event Action:Descrip
     */
	public void testAttributeValueModificationAccept_Time_Event_ActionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AcceptTimeEventAction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AcceptTimeEventAction_c.AcceptTimeEventActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Accept Time Event Action::Descrip", instance);
		performTest(instance, "setDescrip", "Accept Time Event Action::Descrip", instance.getDescrip() + modifyString);
	}

    /**
     *  Test modification of attribute: Accept Event Action:Name
     */
	public void testAttributeValueModificationAccept_Event_ActionName() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AcceptEventAction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AcceptEventAction_c.AcceptEventActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Accept Event Action::Name", instance);
		performTest(instance, "setName", "Accept Event Action::Name", instance.getName() + modifyString);
	}

    /**
     *  Test modification of attribute: Accept Event Action:Descrip
     */
	public void testAttributeValueModificationAccept_Event_ActionDescrip() throws CoreException, SecurityException, IllegalArgumentException,
			NoSuchMethodException, IllegalAccessException,
			InvocationTargetException {
		AcceptEventAction_c instance = null;
		Ooaofooa[] roots = Ooaofooa.getInstancesUnderSystem("HierarchyTestModel");
		for(Ooaofooa root : roots) {
			instance = AcceptEventAction_c.AcceptEventActionInstance(root);
     		if(instance != null && instance.getFile() != null) {
				break;
			}
		}
		assertNotNull("Unable to locate test element for: Accept Event Action::Descrip", instance);
		performTest(instance, "setDescrip", "Accept Event Action::Descrip", instance.getDescrip() + modifyString);
	}

	@SuppressWarnings("restriction")
	private TreeDifferencer compareElementWithLocalHistory(NonRootModelElement instance, IFile copy) {
		IFile file = instance.getFile();
		CompareAction action = new CompareAction();
		action.selectionChanged(null, new StructuredSelection(new Object[] {
				file, copy }));
		action.run(null);
		IEditorPart activeEditor = PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor();
		assertTrue("Unable to locate compare editor.", activeEditor instanceof CompareEditor);
		while(PlatformUI.getWorkbench().getDisplay().readAndDispatch());
		Set<Object> keySet = TreeDifferencer.instances.keySet();
		Object key = null;
		for(Iterator<Object> iterator = keySet.iterator(); iterator.hasNext();) {
			key = iterator.next();
		}
		return TreeDifferencer.instances.get(key);
	}
	
	private void performTest(NonRootModelElement instance, String methodName,
			String modelPath, Object newValue) throws SecurityException,
			NoSuchMethodException, CoreException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException {
		IFile copy = null;
		Transaction transaction = null;
		try {
			instance.getFile().copy(
					new Path("/" + instance.getFile().getProject().getName() + "/"
							+ instance.getFile().getName()), true,
					new NullProgressMonitor());
			copy = instance.getFile().getProject().getFile(
					instance.getFile().getName());
			TransactionManager manager = TransactionManager.getSingleton();
				transaction = manager.startTransaction(
						"Modify attribute value for " + modelPath, new ModelRoot[] {
								Ooaofooa.getDefaultInstance(),
								Ooaofgraphics.getDefaultInstance() });
				Method[] methods = instance.getClass().getMethods();
				for(Method method : methods) {
					if(method.getName().equals(methodName)) {
						method.invoke(instance, new Object[] { newValue });
						break;
					}
				}
				manager.endTransaction(transaction);
			TreeDifferencer differencer = compareElementWithLocalHistory(instance,
					copy);
			assertTrue("No differences found for attribute value modification: "
					+ modelPath, differencer.getLeftDifferences().size() != 0);
			assertTrue(
					"More differences found for attribute value modification than expected.",
					differencer.getLeftDifferences().size() == getExpectedSizeForChange(differencer, instance));
			if(getExpectedSizeForChange(differencer, instance) == 1) {
				assertTrue(
						"Invalid difference type found for attribute value modification.",
						differencer.getLeftDifferences().get(0).getType() == TreeDifference.VALUE_DIFFERENCE);
			}
		} catch(Exception e) {
			if(transaction != null) {
				TransactionManager.getSingleton().cancelTransaction(transaction);
			}
			fail("Unable to modify attribute value.");
		} finally {
			// undo the change
			if(transaction != null) {
				TransactionManager.getSingleton().getUndoAction().run();
			}
			// remove copy
			if(copy != null) {
				copy.delete(true, new NullProgressMonitor());
			}
			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().closeAllEditors(false);
			while(PlatformUI.getWorkbench().getDisplay().readAndDispatch());
		}
	}

	private int getExpectedSizeForChange(TreeDifferencer differencer, Object testElement) {
		if(getName().contains("Layer_Name")) {
			return 2;
		}
		if(differencer.getLeftDifferences().size() == 2) {
			// this could be rename, where the differences
			// are shown both for the attribute and the root
			// element
			for(TreeDifference difference : differencer.getLeftDifferences()) {
				if(difference.getType().equals(TreeDifference.VALUE_DIFFERENCE)) {
					ComparableTreeObject comparable = (ComparableTreeObject) difference.getElement();
					if(comparable.getRealElement() instanceof ObjectElement) {
						ObjectElement obEle = (ObjectElement) comparable.getRealElement();
						ComparableTreeObject one = new NonRootModelElementComparable((NonRootModelElement) testElement);
						ComparableTreeObject two = new NonRootModelElementComparable((NonRootModelElement) obEle.getParent());
						if(one.equals(two)) {
							return 2;
						} else {
							return 1;
						}
					} else {
						return 1;
					}
				}
				if(difference.getType().equals(TreeDifference.NAME_DIFFERENCE)) {
					continue;
				} else {
					return 1;
				}
			}
		} else if(differencer.getLeftDifferences().size() == 3) {
			int count = 0;
			for(TreeDifference difference : differencer.getLeftDifferences()) {
				if(difference.getType().equals(TreeDifference.VALUE_DIFFERENCE)) {
					ComparableTreeObject comparable = (ComparableTreeObject) difference.getElement();
					if(comparable.getRealElement() instanceof ObjectElement) {
						ObjectElement obEle = (ObjectElement) comparable.getRealElement();
						ComparableTreeObject one = new NonRootModelElementComparable((NonRootModelElement) testElement);
						ComparableTreeObject two = new NonRootModelElementComparable((NonRootModelElement) obEle.getParent());
						if(one.equals(two)) {
							if(count == 1) {
								count++;
								continue;
							} else if(count == 2) {
								return 3;
							}
						} else {
							return 1;
						}
					} else {
						return 1;
					}
				}
				if(difference.getType().equals(TreeDifference.NAME_DIFFERENCE)) {
					count++;
					continue;
				} else {
					return 1;
				}
			}
		}
		return 1;
	}

}
