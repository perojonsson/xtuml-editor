//======================================================================
//
// File: com.mentor.nucleus.bp.ui.text/ModelAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_modeladapter_java.arc
// Version:      $Revision: 1.20 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class handles the input to the Description and Activity
// text editors.
//
package com.mentor.nucleus.bp.ui.text;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;

public class ModelAdapter {
	private ModelAdapter() {
	};
	protected static String getName(Object input) {
		String result = ""; //$NON-NLS-1$
		Class inputClass = input.getClass();
		Class[] type = new Class[0];
		Method getName = null;
		try {
			getName = inputClass.getMethod("Get_label", type); //$NON-NLS-1$
		} catch (NoSuchMethodException e1) {
			try {
				getName = inputClass.getMethod("getName", type); //$NON-NLS-1$
			} catch (NoSuchMethodException e2) {
				// There is no accessor, try an explicit operation . . .
				try {
					getName = inputClass.getMethod("Get_name", type); //$NON-NLS-1$
				} catch (NoSuchMethodException e3) {
					TextPlugin.logError(
							"Class does not implement any name accessor", e3); //$NON-NLS-1$
				}
			}
		}
		if (getName != null) {
			try {
				Object[] args = new Object[0];
				result = (String) getName.invoke(input, args);
			} catch (InvocationTargetException e) {
				TextPlugin
						.logError("Invocation Target exception in getName", e); //$NON-NLS-1$
			} catch (IllegalAccessException e) {
				TextPlugin.logError("Illegal Access exception in getName", e); //$NON-NLS-1$
			}
			return result;
		} else {
			return null;
		}
	}

	public static interface IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement);
		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID);
		public String getName(NonRootModelElement modelElement);
	}

	static Map adapterRegistry = new HashMap();

	public static IModelElementAdapter getModelElementAdapter(
			NonRootModelElement modelElement) {
		if (modelElement == null) {
			throw new IllegalArgumentException("modelElement cannot be null"); //$NON-NLS-1$
		}
		return getModelElementAdapter(modelElement.getClass().getName());
	}

	public static IModelElementAdapter getModelElementAdapter(String type) {
		return (IModelElementAdapter) adapterRegistry.get(type);
	}

	static {
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Operation_c", new Operation_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Function_c", new Function_cAdapter()); //$NON-NLS-1$
		adapterRegistry.put(
				"com.mentor.nucleus.bp.core.Bridge_c", new Bridge_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.RequiredSignal_c", new RequiredSignal_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.RequiredOperation_c", new RequiredOperation_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ProvidedSignal_c", new ProvidedSignal_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ProvidedOperation_c", new ProvidedOperation_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Attribute_c", new Attribute_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.StateMachineState_c", new StateMachineState_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Transition_c", new Transition_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.CreationTransition_c", new CreationTransition_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.UseCaseDiagram_c", new UseCaseDiagram_cAdapter()); //$NON-NLS-1$
		adapterRegistry.put(
				"com.mentor.nucleus.bp.core.Include_c", new Include_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Generalization_c", new Generalization_cAdapter()); //$NON-NLS-1$
		adapterRegistry.put(
				"com.mentor.nucleus.bp.core.Extend_c", new Extend_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.BinaryAssociation_c", new BinaryAssociation_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.OperationParameter_c", new OperationParameter_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ModelClass_c", new ModelClass_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.AttributeReferenceInClass_c", new AttributeReferenceInClass_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.StateMachineEventDataItem_c", new StateMachineEventDataItem_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.StateMachineEvent_c", new StateMachineEvent_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.EventIgnored_c", new EventIgnored_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.CantHappen_c", new CantHappen_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Sequence_c", new Sequence_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.SynchronousMessage_c", new SynchronousMessage_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ReturnMessage_c", new ReturnMessage_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.MessageArgument_c", new MessageArgument_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.AsynchronousMessage_c", new AsynchronousMessage_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.InterfacePackage_c", new InterfacePackage_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.UseCaseParticipant_c", new UseCaseParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.TimingMark_c", new TimingMark_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.TimeSpan_c", new TimeSpan_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.PackageParticipant_c", new PackageParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Lifespan_c", new Lifespan_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.InstanceAttributeValue_c", new InstanceAttributeValue_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.FunctionPackageParticipant_c", new FunctionPackageParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ExternalEntityParticipant_c", new ExternalEntityParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ComponentParticipant_c", new ComponentParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ClassParticipantAttribute_c", new ClassParticipantAttribute_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ClassParticipant_c", new ClassParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ClassInstanceParticipant_c", new ClassInstanceParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ActorParticipant_c", new ActorParticipant_cAdapter()); //$NON-NLS-1$
		adapterRegistry.put(
				"com.mentor.nucleus.bp.core.Package_c", new Package_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Subsystem_c", new Subsystem_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.StructureMember_c", new StructureMember_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.FunctionParameter_c", new FunctionParameter_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ExternalEntityEventDataItem_c", new ExternalEntityEventDataItem_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ExternalEntityEvent_c", new ExternalEntityEvent_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ExternalEntityDataItem_c", new ExternalEntityDataItem_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ExternalEntity_c", new ExternalEntity_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Enumerator_c", new Enumerator_cAdapter()); //$NON-NLS-1$
		adapterRegistry.put(
				"com.mentor.nucleus.bp.core.Domain_c", new Domain_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.BridgeParameter_c", new BridgeParameter_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.SymbolicConstant_c", new SymbolicConstant_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ConstantSpecification_c", new ConstantSpecification_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Satisfaction_c", new Satisfaction_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Requirement_c", new Requirement_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Provision_c", new Provision_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.PropertyParameter_c", new PropertyParameter_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.InterfaceSignal_c", new InterfaceSignal_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.InterfaceOperation_c", new InterfaceOperation_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Interface_c", new Interface_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ExecutableProperty_c", new ExecutableProperty_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ComponentPackage_c", new ComponentPackage_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ImportedRequirement_c", new ImportedRequirement_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ImportedReference_c", new ImportedReference_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ImportedProvision_c", new ImportedProvision_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ComponentReference_c", new ComponentReference_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Component_c", new Component_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.CommunicationLink_c", new CommunicationLink_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Communication_c", new Communication_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Association_c", new Association_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.SendSignal_c", new SendSignal_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ObjectNode_c", new ObjectNode_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.InitialNode_c", new InitialNode_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ForkJoinNode_c", new ForkJoinNode_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.FlowFinalNode_c", new FlowFinalNode_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.DecisionMergeNode_c", new DecisionMergeNode_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ActivityPartition_c", new ActivityPartition_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ActivityFinalNode_c", new ActivityFinalNode_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ActivityEdge_c", new ActivityEdge_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ActivityDiagramAction_c", new ActivityDiagramAction_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.Activity_c", new Activity_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.AcceptTimeEventAction_c", new AcceptTimeEventAction_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.AcceptEventAction_c", new AcceptEventAction_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.InstanceStateMachine_c", new InstanceStateMachine_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.ClassStateMachine_c", new ClassStateMachine_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.UserDataType_c", new UserDataType_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.EnumerationDataType_c", new EnumerationDataType_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.StructuredDataType_c", new StructuredDataType_cAdapter()); //$NON-NLS-1$
		adapterRegistry.put(
				"com.mentor.nucleus.bp.core.Action_c", new Action_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.StateMachine_c", new StateMachine_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.DataType_c", new DataType_cAdapter()); //$NON-NLS-1$
		adapterRegistry
				.put("com.mentor.nucleus.bp.core.DerivedBaseAttribute_c", new DerivedBaseAttribute_cAdapter()); //$NON-NLS-1$
	}

	public static final class Operation_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Operation_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Operation_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryOperation_c(
					(Operation_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Operation_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Operation_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Operation_c.OperationInstance(modelRoot,
					new queryOperation_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Operation";
			}
			if (!(modelElement instanceof Operation_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Operation_c"); //$NON-NLS-1$
			}
			Operation_c obj = (Operation_c) modelElement;
			return obj.getName() + ": Operation"; //$NON-NLS-1$
		}
	}

	public static final class queryOperation_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Operation_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Tfr_id = IdAssigner.NULL_UUID;
		public queryOperation_c(Operation_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Tfr_id = inst.getTfr_id();
		}
		public queryOperation_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Tfr_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Tfr_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Operation_c candidate = (Operation_c) inst;
			return candidate.getTfr_id().equals(Tfr_id);
		}
	}

	public static final class Function_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Function_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Function_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryFunction_c((Function_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Function_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Function_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Function_c.FunctionInstance(modelRoot, new queryFunction_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Function";
			}
			if (!(modelElement instanceof Function_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Function_c"); //$NON-NLS-1$
			}
			Function_c obj = (Function_c) modelElement;
			return obj.getName() + ": Function"; //$NON-NLS-1$
		}
	}

	public static final class queryFunction_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Function_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sync_id = IdAssigner.NULL_UUID;
		public queryFunction_c(Function_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sync_id = inst.getSync_id();
			if (IdAssigner.NULL_UUID.equals(Sync_id)) {
				Sync_id = inst.getSync_idCachedValue();
			}
		}
		public queryFunction_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sync_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sync_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Function_c candidate = (Function_c) inst;
			return candidate.getSync_id().equals(Sync_id);
		}
	}

	public static final class Bridge_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Bridge_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Bridge_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryBridge_c((Bridge_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Bridge_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Bridge_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Bridge_c.BridgeInstance(modelRoot, new queryBridge_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Bridge";
			}
			if (!(modelElement instanceof Bridge_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Bridge_c"); //$NON-NLS-1$
			}
			Bridge_c obj = (Bridge_c) modelElement;
			return obj.getName() + ": Bridge"; //$NON-NLS-1$
		}
	}

	public static final class queryBridge_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Bridge_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Brg_id = IdAssigner.NULL_UUID;
		public queryBridge_c(Bridge_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Brg_id = inst.getBrg_id();
		}
		public queryBridge_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Brg_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Brg_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Bridge_c candidate = (Bridge_c) inst;
			return candidate.getBrg_id().equals(Brg_id);
		}
	}

	public static final class RequiredSignal_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof RequiredSignal_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type RequiredSignal_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryRequiredSignal_c(
					(RequiredSignal_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.RequiredSignal_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type RequiredSignal_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return RequiredSignal_c.RequiredSignalInstance(modelRoot,
					new queryRequiredSignal_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Required Signal";
			}
			if (!(modelElement instanceof RequiredSignal_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof RequiredSignal_c"); //$NON-NLS-1$
			}
			RequiredSignal_c obj = (RequiredSignal_c) modelElement;
			return obj.getName() + ": Required Signal"; //$NON-NLS-1$
		}
	}

	public static final class queryRequiredSignal_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.RequiredSignal_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryRequiredSignal_c(RequiredSignal_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryRequiredSignal_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			RequiredSignal_c candidate = (RequiredSignal_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class RequiredOperation_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof RequiredOperation_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type RequiredOperation_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryRequiredOperation_c(
					(RequiredOperation_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.RequiredOperation_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type RequiredOperation_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return RequiredOperation_c.RequiredOperationInstance(modelRoot,
					new queryRequiredOperation_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Required Operation";
			}
			if (!(modelElement instanceof RequiredOperation_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof RequiredOperation_c"); //$NON-NLS-1$
			}
			RequiredOperation_c obj = (RequiredOperation_c) modelElement;
			return obj.getName() + ": Required Operation"; //$NON-NLS-1$
		}
	}

	public static final class queryRequiredOperation_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.RequiredOperation_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryRequiredOperation_c(RequiredOperation_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryRequiredOperation_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			RequiredOperation_c candidate = (RequiredOperation_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ProvidedSignal_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ProvidedSignal_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ProvidedSignal_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryProvidedSignal_c(
					(ProvidedSignal_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ProvidedSignal_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ProvidedSignal_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ProvidedSignal_c.ProvidedSignalInstance(modelRoot,
					new queryProvidedSignal_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Provided Signal";
			}
			if (!(modelElement instanceof ProvidedSignal_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ProvidedSignal_c"); //$NON-NLS-1$
			}
			ProvidedSignal_c obj = (ProvidedSignal_c) modelElement;
			return obj.getName() + ": Provided Signal"; //$NON-NLS-1$
		}
	}

	public static final class queryProvidedSignal_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ProvidedSignal_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryProvidedSignal_c(ProvidedSignal_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryProvidedSignal_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ProvidedSignal_c candidate = (ProvidedSignal_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ProvidedOperation_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ProvidedOperation_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ProvidedOperation_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryProvidedOperation_c(
					(ProvidedOperation_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ProvidedOperation_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ProvidedOperation_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ProvidedOperation_c.ProvidedOperationInstance(modelRoot,
					new queryProvidedOperation_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Provided Operation";
			}
			if (!(modelElement instanceof ProvidedOperation_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ProvidedOperation_c"); //$NON-NLS-1$
			}
			ProvidedOperation_c obj = (ProvidedOperation_c) modelElement;
			return obj.getName() + ": Provided Operation"; //$NON-NLS-1$
		}
	}

	public static final class queryProvidedOperation_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ProvidedOperation_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryProvidedOperation_c(ProvidedOperation_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryProvidedOperation_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ProvidedOperation_c candidate = (ProvidedOperation_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class Attribute_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Attribute_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Attribute_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAttribute_c(
					(Attribute_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Attribute_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Attribute_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Attribute_c.AttributeInstance(modelRoot,
					new queryAttribute_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Attribute";
			}
			if (!(modelElement instanceof Attribute_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Attribute_c"); //$NON-NLS-1$
			}
			Attribute_c obj = (Attribute_c) modelElement;
			return obj.getName() + ": Attribute"; //$NON-NLS-1$
		}
	}

	public static final class queryAttribute_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Attribute_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Attr_id = IdAssigner.NULL_UUID;
		private UUID Obj_id = IdAssigner.NULL_UUID;
		public queryAttribute_c(Attribute_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Attr_id = inst.getAttr_id();
			Obj_id = inst.getObj_id();
			if (IdAssigner.NULL_UUID.equals(Obj_id)) {
				Obj_id = inst.getObj_idCachedValue();
			}
		}
		public queryAttribute_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Attr_id = UUID.fromString(set.getId(0));
				Obj_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Attr_id));
			id.add(String.valueOf(Obj_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Attribute_c candidate = (Attribute_c) inst;
			return candidate.getAttr_id().equals(Attr_id)
					&& candidate.getObj_id().equals(Obj_id);
		}
	}

	public static final class StateMachineState_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof StateMachineState_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type StateMachineState_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryStateMachineState_c(
					(StateMachineState_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.StateMachineState_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type StateMachineState_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return StateMachineState_c.StateMachineStateInstance(modelRoot,
					new queryStateMachineState_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "State Machine State";
			}
			if (!(modelElement instanceof StateMachineState_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof StateMachineState_c"); //$NON-NLS-1$
			}
			StateMachineState_c obj = (StateMachineState_c) modelElement;
			return obj.getName() + ": State Machine State"; //$NON-NLS-1$
		}
	}

	public static final class queryStateMachineState_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.StateMachineState_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		private UUID Smstt_id = IdAssigner.NULL_UUID;
		public queryStateMachineState_c(StateMachineState_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
			Smstt_id = inst.getSmstt_id();
		}
		public queryStateMachineState_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
				Smstt_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			id.add(String.valueOf(Smstt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			StateMachineState_c candidate = (StateMachineState_c) inst;
			return candidate.getSm_id().equals(Sm_id)
					&& candidate.getSmstt_id().equals(Smstt_id);
		}
	}

	public static final class Transition_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Transition_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Transition_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryTransition_c(
					(Transition_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Transition_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Transition_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Transition_c.TransitionInstance(modelRoot,
					new queryTransition_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Transition";
			}
			if (!(modelElement instanceof Transition_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Transition_c"); //$NON-NLS-1$
			}
			Transition_c obj = (Transition_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Transition";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryTransition_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Transition_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Trans_id = IdAssigner.NULL_UUID;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		public queryTransition_c(Transition_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Trans_id = inst.getTrans_id();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
		}
		public queryTransition_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Trans_id = UUID.fromString(set.getId(0));
				Sm_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Trans_id));
			id.add(String.valueOf(Sm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Transition_c candidate = (Transition_c) inst;
			return candidate.getTrans_id().equals(Trans_id)
					&& candidate.getSm_id().equals(Sm_id);
		}
	}

	public static final class CreationTransition_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof CreationTransition_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type CreationTransition_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryCreationTransition_c(
					(CreationTransition_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.CreationTransition_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type CreationTransition_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return CreationTransition_c.CreationTransitionInstance(modelRoot,
					new queryCreationTransition_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Creation Transition";
			}
			if (!(modelElement instanceof CreationTransition_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof CreationTransition_c"); //$NON-NLS-1$
			}
			CreationTransition_c obj = (CreationTransition_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Creation Transition";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryCreationTransition_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.CreationTransition_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		private UUID Trans_id = IdAssigner.NULL_UUID;
		public queryCreationTransition_c(CreationTransition_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
			Trans_id = inst.getTrans_id();
			if (IdAssigner.NULL_UUID.equals(Trans_id)) {
				Trans_id = inst.getTrans_idCachedValue();
			}
		}
		public queryCreationTransition_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
				Trans_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			id.add(String.valueOf(Trans_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			CreationTransition_c candidate = (CreationTransition_c) inst;
			return candidate.getSm_id().equals(Sm_id)
					&& candidate.getTrans_id().equals(Trans_id);
		}
	}

	public static final class UseCaseDiagram_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof UseCaseDiagram_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type UseCaseDiagram_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryUseCaseDiagram_c(
					(UseCaseDiagram_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.UseCaseDiagram_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type UseCaseDiagram_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return UseCaseDiagram_c.UseCaseDiagramInstance(modelRoot,
					new queryUseCaseDiagram_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Use Case Diagram";
			}
			if (!(modelElement instanceof UseCaseDiagram_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof UseCaseDiagram_c"); //$NON-NLS-1$
			}
			UseCaseDiagram_c obj = (UseCaseDiagram_c) modelElement;
			return obj.getName() + ": Use Case Diagram"; //$NON-NLS-1$
		}
	}

	public static final class queryUseCaseDiagram_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.UseCaseDiagram_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public queryUseCaseDiagram_c(UseCaseDiagram_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public queryUseCaseDiagram_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			UseCaseDiagram_c candidate = (UseCaseDiagram_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class Include_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Include_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Include_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInclude_c((Include_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Include_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Include_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Include_c.IncludeInstance(modelRoot, new queryInclude_c(
					modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Include";
			}
			if (!(modelElement instanceof Include_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Include_c"); //$NON-NLS-1$
			}
			Include_c obj = (Include_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Include";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryInclude_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Include_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Assoc_id = IdAssigner.NULL_UUID;
		public queryInclude_c(Include_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Assoc_id = inst.getAssoc_id();
			if (IdAssigner.NULL_UUID.equals(Assoc_id)) {
				Assoc_id = inst.getAssoc_idCachedValue();
			}
		}
		public queryInclude_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Assoc_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Assoc_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Include_c candidate = (Include_c) inst;
			return candidate.getAssoc_id().equals(Assoc_id);
		}
	}

	public static final class Generalization_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Generalization_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Generalization_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryGeneralization_c(
					(Generalization_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Generalization_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Generalization_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Generalization_c.GeneralizationInstance(modelRoot,
					new queryGeneralization_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Generalization";
			}
			if (!(modelElement instanceof Generalization_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Generalization_c"); //$NON-NLS-1$
			}
			Generalization_c obj = (Generalization_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Generalization";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryGeneralization_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Generalization_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Assoc_id = IdAssigner.NULL_UUID;
		public queryGeneralization_c(Generalization_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Assoc_id = inst.getAssoc_id();
			if (IdAssigner.NULL_UUID.equals(Assoc_id)) {
				Assoc_id = inst.getAssoc_idCachedValue();
			}
		}
		public queryGeneralization_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Assoc_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Assoc_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Generalization_c candidate = (Generalization_c) inst;
			return candidate.getAssoc_id().equals(Assoc_id);
		}
	}

	public static final class Extend_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Extend_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Extend_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExtend_c((Extend_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Extend_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Extend_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Extend_c.ExtendInstance(modelRoot, new queryExtend_c(
					modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Extend";
			}
			if (!(modelElement instanceof Extend_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Extend_c"); //$NON-NLS-1$
			}
			Extend_c obj = (Extend_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Extend";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryExtend_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Extend_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Assoc_id = IdAssigner.NULL_UUID;
		public queryExtend_c(Extend_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Assoc_id = inst.getAssoc_id();
			if (IdAssigner.NULL_UUID.equals(Assoc_id)) {
				Assoc_id = inst.getAssoc_idCachedValue();
			}
		}
		public queryExtend_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Assoc_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Assoc_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Extend_c candidate = (Extend_c) inst;
			return candidate.getAssoc_id().equals(Assoc_id);
		}
	}

	public static final class BinaryAssociation_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof BinaryAssociation_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type BinaryAssociation_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryBinaryAssociation_c(
					(BinaryAssociation_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.BinaryAssociation_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type BinaryAssociation_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return BinaryAssociation_c.BinaryAssociationInstance(modelRoot,
					new queryBinaryAssociation_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Binary Association";
			}
			if (!(modelElement instanceof BinaryAssociation_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof BinaryAssociation_c"); //$NON-NLS-1$
			}
			BinaryAssociation_c obj = (BinaryAssociation_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Binary Association";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryBinaryAssociation_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.BinaryAssociation_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Assoc_id = IdAssigner.NULL_UUID;
		public queryBinaryAssociation_c(BinaryAssociation_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Assoc_id = inst.getAssoc_id();
			if (IdAssigner.NULL_UUID.equals(Assoc_id)) {
				Assoc_id = inst.getAssoc_idCachedValue();
			}
		}
		public queryBinaryAssociation_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Assoc_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Assoc_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			BinaryAssociation_c candidate = (BinaryAssociation_c) inst;
			return candidate.getAssoc_id().equals(Assoc_id);
		}
	}

	public static final class OperationParameter_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof OperationParameter_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type OperationParameter_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryOperationParameter_c(
					(OperationParameter_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.OperationParameter_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type OperationParameter_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return OperationParameter_c.OperationParameterInstance(modelRoot,
					new queryOperationParameter_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Operation Parameter";
			}
			if (!(modelElement instanceof OperationParameter_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof OperationParameter_c"); //$NON-NLS-1$
			}
			OperationParameter_c obj = (OperationParameter_c) modelElement;
			return obj.getName() + ": Operation Parameter"; //$NON-NLS-1$
		}
	}

	public static final class queryOperationParameter_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.OperationParameter_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Tparm_id = IdAssigner.NULL_UUID;
		public queryOperationParameter_c(OperationParameter_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Tparm_id = inst.getTparm_id();
		}
		public queryOperationParameter_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Tparm_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Tparm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			OperationParameter_c candidate = (OperationParameter_c) inst;
			return candidate.getTparm_id().equals(Tparm_id);
		}
	}

	public static final class ModelClass_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ModelClass_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ModelClass_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryModelClass_c(
					(ModelClass_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ModelClass_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ModelClass_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ModelClass_c.ModelClassInstance(modelRoot,
					new queryModelClass_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Model Class";
			}
			if (!(modelElement instanceof ModelClass_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ModelClass_c"); //$NON-NLS-1$
			}
			ModelClass_c obj = (ModelClass_c) modelElement;
			return obj.getName() + ": Model Class"; //$NON-NLS-1$
		}
	}

	public static final class queryModelClass_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ModelClass_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Obj_id = IdAssigner.NULL_UUID;
		public queryModelClass_c(ModelClass_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Obj_id = inst.getObj_id();
			if (IdAssigner.NULL_UUID.equals(Obj_id)) {
				Obj_id = inst.getObj_idCachedValue();
			}
		}
		public queryModelClass_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Obj_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Obj_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ModelClass_c candidate = (ModelClass_c) inst;
			return candidate.getObj_id().equals(Obj_id);
		}
	}

	public static final class AttributeReferenceInClass_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof AttributeReferenceInClass_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type AttributeReferenceInClass_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAttributeReferenceInClass_c(
					(AttributeReferenceInClass_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.AttributeReferenceInClass_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type AttributeReferenceInClass_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return AttributeReferenceInClass_c
					.AttributeReferenceInClassInstance(
							modelRoot,
							new queryAttributeReferenceInClass_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Attribute Reference in Class";
			}
			if (!(modelElement instanceof AttributeReferenceInClass_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof AttributeReferenceInClass_c"); //$NON-NLS-1$
			}
			AttributeReferenceInClass_c obj = (AttributeReferenceInClass_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj)
						+ ": Attribute Reference in Class";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryAttributeReferenceInClass_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.AttributeReferenceInClass_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private long Roid_id = 0;
		private UUID Rattr_id = IdAssigner.NULL_UUID;
		private UUID Oir_id = IdAssigner.NULL_UUID;
		private UUID Roir_id = IdAssigner.NULL_UUID;
		private UUID Robj_id = IdAssigner.NULL_UUID;
		private UUID Obj_id = IdAssigner.NULL_UUID;
		private UUID Rel_id = IdAssigner.NULL_UUID;
		public queryAttributeReferenceInClass_c(AttributeReferenceInClass_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Roid_id = inst.getRoid_id();
			if (IdAssigner.NULL_UUID.equals(Roid_id)) {
				Roid_id = inst.getRoid_idCachedValue();
			}
			Rattr_id = inst.getRattr_id();
			if (IdAssigner.NULL_UUID.equals(Rattr_id)) {
				Rattr_id = inst.getRattr_idCachedValue();
			}
			Oir_id = inst.getOir_id();
			if (IdAssigner.NULL_UUID.equals(Oir_id)) {
				Oir_id = inst.getOir_idCachedValue();
			}
			Roir_id = inst.getRoir_id();
			if (IdAssigner.NULL_UUID.equals(Roir_id)) {
				Roir_id = inst.getRoir_idCachedValue();
			}
			Robj_id = inst.getRobj_id();
			if (IdAssigner.NULL_UUID.equals(Robj_id)) {
				Robj_id = inst.getRobj_idCachedValue();
			}
			Obj_id = inst.getObj_id();
			if (IdAssigner.NULL_UUID.equals(Obj_id)) {
				Obj_id = inst.getObj_idCachedValue();
			}
			Rel_id = inst.getRel_id();
			if (IdAssigner.NULL_UUID.equals(Rel_id)) {
				Rel_id = inst.getRel_idCachedValue();
			}
		}
		public queryAttributeReferenceInClass_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Roid_id = Long.parseLong(set.getId(0));
				Rattr_id = UUID.fromString(set.getId(1));
				Oir_id = UUID.fromString(set.getId(2));
				Roir_id = UUID.fromString(set.getId(3));
				Robj_id = UUID.fromString(set.getId(4));
				Obj_id = UUID.fromString(set.getId(5));
				Rel_id = UUID.fromString(set.getId(6));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Roid_id));
			id.add(String.valueOf(Rattr_id));
			id.add(String.valueOf(Oir_id));
			id.add(String.valueOf(Roir_id));
			id.add(String.valueOf(Robj_id));
			id.add(String.valueOf(Obj_id));
			id.add(String.valueOf(Rel_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			AttributeReferenceInClass_c candidate = (AttributeReferenceInClass_c) inst;
			return candidate.getRoid_id() == Roid_id
					&& candidate.getRattr_id().equals(Rattr_id)
					&& candidate.getOir_id().equals(Oir_id)
					&& candidate.getRoir_id().equals(Roir_id)
					&& candidate.getRobj_id().equals(Robj_id)
					&& candidate.getObj_id().equals(Obj_id)
					&& candidate.getRel_id().equals(Rel_id);
		}
	}

	public static final class StateMachineEventDataItem_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof StateMachineEventDataItem_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type StateMachineEventDataItem_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryStateMachineEventDataItem_c(
					(StateMachineEventDataItem_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.StateMachineEventDataItem_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type StateMachineEventDataItem_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return StateMachineEventDataItem_c
					.StateMachineEventDataItemInstance(
							modelRoot,
							new queryStateMachineEventDataItem_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "State Machine Event Data Item";
			}
			if (!(modelElement instanceof StateMachineEventDataItem_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof StateMachineEventDataItem_c"); //$NON-NLS-1$
			}
			StateMachineEventDataItem_c obj = (StateMachineEventDataItem_c) modelElement;
			return obj.getName() + ": State Machine Event Data Item"; //$NON-NLS-1$
		}
	}

	public static final class queryStateMachineEventDataItem_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.StateMachineEventDataItem_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		private UUID Smedi_id = IdAssigner.NULL_UUID;
		public queryStateMachineEventDataItem_c(StateMachineEventDataItem_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
			Smedi_id = inst.getSmedi_id();
		}
		public queryStateMachineEventDataItem_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
				Smedi_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			id.add(String.valueOf(Smedi_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			StateMachineEventDataItem_c candidate = (StateMachineEventDataItem_c) inst;
			return candidate.getSm_id().equals(Sm_id)
					&& candidate.getSmedi_id().equals(Smedi_id);
		}
	}

	public static final class StateMachineEvent_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof StateMachineEvent_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type StateMachineEvent_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryStateMachineEvent_c(
					(StateMachineEvent_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.StateMachineEvent_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type StateMachineEvent_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return StateMachineEvent_c.StateMachineEventInstance(modelRoot,
					new queryStateMachineEvent_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "State Machine Event";
			}
			if (!(modelElement instanceof StateMachineEvent_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof StateMachineEvent_c"); //$NON-NLS-1$
			}
			StateMachineEvent_c obj = (StateMachineEvent_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": State Machine Event";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryStateMachineEvent_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.StateMachineEvent_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Smevt_id = IdAssigner.NULL_UUID;
		public queryStateMachineEvent_c(StateMachineEvent_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Smevt_id = inst.getSmevt_id();
		}
		public queryStateMachineEvent_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Smevt_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Smevt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			StateMachineEvent_c candidate = (StateMachineEvent_c) inst;
			return candidate.getSmevt_id().equals(Smevt_id);
		}
	}

	public static final class EventIgnored_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof EventIgnored_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type EventIgnored_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryEventIgnored_c(
					(EventIgnored_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.EventIgnored_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type EventIgnored_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return EventIgnored_c.EventIgnoredInstance(modelRoot,
					new queryEventIgnored_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Event Ignored";
			}
			if (!(modelElement instanceof EventIgnored_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof EventIgnored_c"); //$NON-NLS-1$
			}
			EventIgnored_c obj = (EventIgnored_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Event Ignored";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryEventIgnored_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.EventIgnored_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Smevt_id = IdAssigner.NULL_UUID;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		private UUID Smspd_id = IdAssigner.NULL_UUID;
		private UUID Smstt_id = IdAssigner.NULL_UUID;
		public queryEventIgnored_c(EventIgnored_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Smevt_id = inst.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(Smevt_id)) {
				Smevt_id = inst.getSmevt_idCachedValue();
			}
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
			Smspd_id = inst.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(Smspd_id)) {
				Smspd_id = inst.getSmspd_idCachedValue();
			}
			Smstt_id = inst.getSmstt_id();
			if (IdAssigner.NULL_UUID.equals(Smstt_id)) {
				Smstt_id = inst.getSmstt_idCachedValue();
			}
		}
		public queryEventIgnored_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Smevt_id = UUID.fromString(set.getId(0));
				Sm_id = UUID.fromString(set.getId(1));
				Smspd_id = UUID.fromString(set.getId(2));
				Smstt_id = UUID.fromString(set.getId(3));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Smevt_id));
			id.add(String.valueOf(Sm_id));
			id.add(String.valueOf(Smspd_id));
			id.add(String.valueOf(Smstt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			EventIgnored_c candidate = (EventIgnored_c) inst;
			return candidate.getSmevt_id().equals(Smevt_id)
					&& candidate.getSm_id().equals(Sm_id)
					&& candidate.getSmspd_id().equals(Smspd_id)
					&& candidate.getSmstt_id().equals(Smstt_id);
		}
	}

	public static final class CantHappen_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof CantHappen_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type CantHappen_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryCantHappen_c(
					(CantHappen_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.CantHappen_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type CantHappen_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return CantHappen_c.CantHappenInstance(modelRoot,
					new queryCantHappen_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Cant Happen";
			}
			if (!(modelElement instanceof CantHappen_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof CantHappen_c"); //$NON-NLS-1$
			}
			CantHappen_c obj = (CantHappen_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Cant Happen";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryCantHappen_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.CantHappen_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Smspd_id = IdAssigner.NULL_UUID;
		private UUID Smevt_id = IdAssigner.NULL_UUID;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		private UUID Smstt_id = IdAssigner.NULL_UUID;
		public queryCantHappen_c(CantHappen_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Smspd_id = inst.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(Smspd_id)) {
				Smspd_id = inst.getSmspd_idCachedValue();
			}
			Smevt_id = inst.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(Smevt_id)) {
				Smevt_id = inst.getSmevt_idCachedValue();
			}
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
			Smstt_id = inst.getSmstt_id();
			if (IdAssigner.NULL_UUID.equals(Smstt_id)) {
				Smstt_id = inst.getSmstt_idCachedValue();
			}
		}
		public queryCantHappen_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Smspd_id = UUID.fromString(set.getId(0));
				Smevt_id = UUID.fromString(set.getId(1));
				Sm_id = UUID.fromString(set.getId(2));
				Smstt_id = UUID.fromString(set.getId(3));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Smspd_id));
			id.add(String.valueOf(Smevt_id));
			id.add(String.valueOf(Sm_id));
			id.add(String.valueOf(Smstt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			CantHappen_c candidate = (CantHappen_c) inst;
			return candidate.getSmspd_id().equals(Smspd_id)
					&& candidate.getSmevt_id().equals(Smevt_id)
					&& candidate.getSm_id().equals(Sm_id)
					&& candidate.getSmstt_id().equals(Smstt_id);
		}
	}

	public static final class Sequence_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Sequence_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Sequence_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new querySequence_c((Sequence_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Sequence_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Sequence_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Sequence_c.SequenceInstance(modelRoot, new querySequence_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Sequence";
			}
			if (!(modelElement instanceof Sequence_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Sequence_c"); //$NON-NLS-1$
			}
			Sequence_c obj = (Sequence_c) modelElement;
			return obj.getName() + ": Sequence"; //$NON-NLS-1$
		}
	}

	public static final class querySequence_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Sequence_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public querySequence_c(Sequence_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public querySequence_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Sequence_c candidate = (Sequence_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class SynchronousMessage_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof SynchronousMessage_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type SynchronousMessage_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new querySynchronousMessage_c(
					(SynchronousMessage_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.SynchronousMessage_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type SynchronousMessage_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return SynchronousMessage_c.SynchronousMessageInstance(modelRoot,
					new querySynchronousMessage_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Synchronous Message";
			}
			if (!(modelElement instanceof SynchronousMessage_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof SynchronousMessage_c"); //$NON-NLS-1$
			}
			SynchronousMessage_c obj = (SynchronousMessage_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Synchronous Message";
			else
				return "UNKNOWN";
		}
	}

	public static final class querySynchronousMessage_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.SynchronousMessage_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Msg_id = IdAssigner.NULL_UUID;
		public querySynchronousMessage_c(SynchronousMessage_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Msg_id = inst.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(Msg_id)) {
				Msg_id = inst.getMsg_idCachedValue();
			}
		}
		public querySynchronousMessage_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Msg_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Msg_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			SynchronousMessage_c candidate = (SynchronousMessage_c) inst;
			return candidate.getMsg_id().equals(Msg_id);
		}
	}

	public static final class ReturnMessage_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ReturnMessage_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ReturnMessage_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryReturnMessage_c(
					(ReturnMessage_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ReturnMessage_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ReturnMessage_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ReturnMessage_c.ReturnMessageInstance(modelRoot,
					new queryReturnMessage_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Return Message";
			}
			if (!(modelElement instanceof ReturnMessage_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ReturnMessage_c"); //$NON-NLS-1$
			}
			ReturnMessage_c obj = (ReturnMessage_c) modelElement;
			return obj.getName() + ": Return Message"; //$NON-NLS-1$
		}
	}

	public static final class queryReturnMessage_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ReturnMessage_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Msg_id = IdAssigner.NULL_UUID;
		public queryReturnMessage_c(ReturnMessage_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Msg_id = inst.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(Msg_id)) {
				Msg_id = inst.getMsg_idCachedValue();
			}
		}
		public queryReturnMessage_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Msg_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Msg_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ReturnMessage_c candidate = (ReturnMessage_c) inst;
			return candidate.getMsg_id().equals(Msg_id);
		}
	}

	public static final class MessageArgument_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof MessageArgument_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type MessageArgument_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryMessageArgument_c(
					(MessageArgument_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.MessageArgument_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type MessageArgument_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return MessageArgument_c.MessageArgumentInstance(modelRoot,
					new queryMessageArgument_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Message Argument";
			}
			if (!(modelElement instanceof MessageArgument_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof MessageArgument_c"); //$NON-NLS-1$
			}
			MessageArgument_c obj = (MessageArgument_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Message Argument";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryMessageArgument_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.MessageArgument_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Arg_id = IdAssigner.NULL_UUID;
		public queryMessageArgument_c(MessageArgument_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Arg_id = inst.getArg_id();
		}
		public queryMessageArgument_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Arg_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Arg_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			MessageArgument_c candidate = (MessageArgument_c) inst;
			return candidate.getArg_id().equals(Arg_id);
		}
	}

	public static final class AsynchronousMessage_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof AsynchronousMessage_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type AsynchronousMessage_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAsynchronousMessage_c(
					(AsynchronousMessage_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.AsynchronousMessage_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type AsynchronousMessage_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return AsynchronousMessage_c.AsynchronousMessageInstance(modelRoot,
					new queryAsynchronousMessage_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Asynchronous Message";
			}
			if (!(modelElement instanceof AsynchronousMessage_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof AsynchronousMessage_c"); //$NON-NLS-1$
			}
			AsynchronousMessage_c obj = (AsynchronousMessage_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Asynchronous Message";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryAsynchronousMessage_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.AsynchronousMessage_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Msg_id = IdAssigner.NULL_UUID;
		public queryAsynchronousMessage_c(AsynchronousMessage_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Msg_id = inst.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(Msg_id)) {
				Msg_id = inst.getMsg_idCachedValue();
			}
		}
		public queryAsynchronousMessage_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Msg_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Msg_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			AsynchronousMessage_c candidate = (AsynchronousMessage_c) inst;
			return candidate.getMsg_id().equals(Msg_id);
		}
	}

	public static final class InterfacePackage_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof InterfacePackage_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type InterfacePackage_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInterfacePackage_c(
					(InterfacePackage_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.InterfacePackage_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type InterfacePackage_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return InterfacePackage_c.InterfacePackageInstance(modelRoot,
					new queryInterfacePackage_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Interface Package";
			}
			if (!(modelElement instanceof InterfacePackage_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof InterfacePackage_c"); //$NON-NLS-1$
			}
			InterfacePackage_c obj = (InterfacePackage_c) modelElement;
			return obj.getName() + ": Interface Package"; //$NON-NLS-1$
		}
	}

	public static final class queryInterfacePackage_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.InterfacePackage_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public queryInterfacePackage_c(InterfacePackage_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public queryInterfacePackage_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			InterfacePackage_c candidate = (InterfacePackage_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class UseCaseParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof UseCaseParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type UseCaseParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryUseCaseParticipant_c(
					(UseCaseParticipant_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.UseCaseParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type UseCaseParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return UseCaseParticipant_c.UseCaseParticipantInstance(modelRoot,
					new queryUseCaseParticipant_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Use Case Participant";
			}
			if (!(modelElement instanceof UseCaseParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof UseCaseParticipant_c"); //$NON-NLS-1$
			}
			UseCaseParticipant_c obj = (UseCaseParticipant_c) modelElement;
			return obj.getName() + ": Use Case Participant"; //$NON-NLS-1$
		}
	}

	public static final class queryUseCaseParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.UseCaseParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryUseCaseParticipant_c(UseCaseParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryUseCaseParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			UseCaseParticipant_c candidate = (UseCaseParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class TimingMark_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof TimingMark_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type TimingMark_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryTimingMark_c(
					(TimingMark_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.TimingMark_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type TimingMark_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return TimingMark_c.TimingMarkInstance(modelRoot,
					new queryTimingMark_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Timing Mark";
			}
			if (!(modelElement instanceof TimingMark_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof TimingMark_c"); //$NON-NLS-1$
			}
			TimingMark_c obj = (TimingMark_c) modelElement;
			return obj.getName() + ": Timing Mark"; //$NON-NLS-1$
		}
	}

	public static final class queryTimingMark_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.TimingMark_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Mark_id = IdAssigner.NULL_UUID;
		public queryTimingMark_c(TimingMark_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Mark_id = inst.getMark_id();
		}
		public queryTimingMark_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Mark_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Mark_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			TimingMark_c candidate = (TimingMark_c) inst;
			return candidate.getMark_id().equals(Mark_id);
		}
	}

	public static final class TimeSpan_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof TimeSpan_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type TimeSpan_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryTimeSpan_c((TimeSpan_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.TimeSpan_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type TimeSpan_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return TimeSpan_c.TimeSpanInstance(modelRoot, new queryTimeSpan_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Time Span";
			}
			if (!(modelElement instanceof TimeSpan_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof TimeSpan_c"); //$NON-NLS-1$
			}
			TimeSpan_c obj = (TimeSpan_c) modelElement;
			return obj.getName() + ": Time Span"; //$NON-NLS-1$
		}
	}

	public static final class queryTimeSpan_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.TimeSpan_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Span_id = IdAssigner.NULL_UUID;
		public queryTimeSpan_c(TimeSpan_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Span_id = inst.getSpan_id();
		}
		public queryTimeSpan_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Span_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Span_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			TimeSpan_c candidate = (TimeSpan_c) inst;
			return candidate.getSpan_id().equals(Span_id);
		}
	}

	public static final class PackageParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof PackageParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type PackageParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryPackageParticipant_c(
					(PackageParticipant_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.PackageParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type PackageParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return PackageParticipant_c.PackageParticipantInstance(modelRoot,
					new queryPackageParticipant_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Package Participant";
			}
			if (!(modelElement instanceof PackageParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof PackageParticipant_c"); //$NON-NLS-1$
			}
			PackageParticipant_c obj = (PackageParticipant_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Package Participant";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryPackageParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.PackageParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryPackageParticipant_c(PackageParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryPackageParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			PackageParticipant_c candidate = (PackageParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class Lifespan_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Lifespan_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Lifespan_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryLifespan_c((Lifespan_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Lifespan_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Lifespan_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Lifespan_c.LifespanInstance(modelRoot, new queryLifespan_c(
					modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Lifespan";
			}
			if (!(modelElement instanceof Lifespan_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Lifespan_c"); //$NON-NLS-1$
			}
			Lifespan_c obj = (Lifespan_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Lifespan";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryLifespan_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Lifespan_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryLifespan_c(Lifespan_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryLifespan_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Lifespan_c candidate = (Lifespan_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class InstanceAttributeValue_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof InstanceAttributeValue_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type InstanceAttributeValue_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInstanceAttributeValue_c(
					(InstanceAttributeValue_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.InstanceAttributeValue_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type InstanceAttributeValue_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return InstanceAttributeValue_c.InstanceAttributeValueInstance(
					modelRoot,
					new queryInstanceAttributeValue_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Instance Attribute Value";
			}
			if (!(modelElement instanceof InstanceAttributeValue_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof InstanceAttributeValue_c"); //$NON-NLS-1$
			}
			InstanceAttributeValue_c obj = (InstanceAttributeValue_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Instance Attribute Value";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryInstanceAttributeValue_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.InstanceAttributeValue_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Av_id = IdAssigner.NULL_UUID;
		public queryInstanceAttributeValue_c(InstanceAttributeValue_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Av_id = inst.getAv_id();
		}
		public queryInstanceAttributeValue_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Av_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Av_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			InstanceAttributeValue_c candidate = (InstanceAttributeValue_c) inst;
			return candidate.getAv_id().equals(Av_id);
		}
	}

	public static final class FunctionPackageParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof FunctionPackageParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type FunctionPackageParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryFunctionPackageParticipant_c(
					(FunctionPackageParticipant_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.FunctionPackageParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type FunctionPackageParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return FunctionPackageParticipant_c
					.FunctionPackageParticipantInstance(modelRoot,
							new queryFunctionPackageParticipant_c(
									modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Function Package Participant";
			}
			if (!(modelElement instanceof FunctionPackageParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof FunctionPackageParticipant_c"); //$NON-NLS-1$
			}
			FunctionPackageParticipant_c obj = (FunctionPackageParticipant_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj)
						+ ": Function Package Participant";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryFunctionPackageParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.FunctionPackageParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryFunctionPackageParticipant_c(
				FunctionPackageParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryFunctionPackageParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			FunctionPackageParticipant_c candidate = (FunctionPackageParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class ExternalEntityParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ExternalEntityParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ExternalEntityParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExternalEntityParticipant_c(
					(ExternalEntityParticipant_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ExternalEntityParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ExternalEntityParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ExternalEntityParticipant_c
					.ExternalEntityParticipantInstance(
							modelRoot,
							new queryExternalEntityParticipant_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "External Entity Participant";
			}
			if (!(modelElement instanceof ExternalEntityParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ExternalEntityParticipant_c"); //$NON-NLS-1$
			}
			ExternalEntityParticipant_c obj = (ExternalEntityParticipant_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj)
						+ ": External Entity Participant";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryExternalEntityParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ExternalEntityParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryExternalEntityParticipant_c(ExternalEntityParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryExternalEntityParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ExternalEntityParticipant_c candidate = (ExternalEntityParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class ComponentParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ComponentParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ComponentParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryComponentParticipant_c(
					(ComponentParticipant_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ComponentParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ComponentParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ComponentParticipant_c.ComponentParticipantInstance(
					modelRoot, new queryComponentParticipant_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Component Participant";
			}
			if (!(modelElement instanceof ComponentParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ComponentParticipant_c"); //$NON-NLS-1$
			}
			ComponentParticipant_c obj = (ComponentParticipant_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Component Participant";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryComponentParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ComponentParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryComponentParticipant_c(ComponentParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryComponentParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ComponentParticipant_c candidate = (ComponentParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class ClassParticipantAttribute_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ClassParticipantAttribute_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ClassParticipantAttribute_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryClassParticipantAttribute_c(
					(ClassParticipantAttribute_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ClassParticipantAttribute_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ClassParticipantAttribute_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ClassParticipantAttribute_c
					.ClassParticipantAttributeInstance(
							modelRoot,
							new queryClassParticipantAttribute_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Class Participant Attribute";
			}
			if (!(modelElement instanceof ClassParticipantAttribute_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ClassParticipantAttribute_c"); //$NON-NLS-1$
			}
			ClassParticipantAttribute_c obj = (ClassParticipantAttribute_c) modelElement;
			return obj.getName() + ": Class Participant Attribute"; //$NON-NLS-1$
		}
	}

	public static final class queryClassParticipantAttribute_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ClassParticipantAttribute_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Ia_id = IdAssigner.NULL_UUID;
		public queryClassParticipantAttribute_c(ClassParticipantAttribute_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Ia_id = inst.getIa_id();
		}
		public queryClassParticipantAttribute_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Ia_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Ia_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ClassParticipantAttribute_c candidate = (ClassParticipantAttribute_c) inst;
			return candidate.getIa_id().equals(Ia_id);
		}
	}

	public static final class ClassParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ClassParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ClassParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryClassParticipant_c(
					(ClassParticipant_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ClassParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ClassParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ClassParticipant_c.ClassParticipantInstance(modelRoot,
					new queryClassParticipant_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Class Participant";
			}
			if (!(modelElement instanceof ClassParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ClassParticipant_c"); //$NON-NLS-1$
			}
			ClassParticipant_c obj = (ClassParticipant_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Class Participant";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryClassParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ClassParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryClassParticipant_c(ClassParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryClassParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ClassParticipant_c candidate = (ClassParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class ClassInstanceParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ClassInstanceParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ClassInstanceParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryClassInstanceParticipant_c(
					(ClassInstanceParticipant_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ClassInstanceParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ClassInstanceParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ClassInstanceParticipant_c.ClassInstanceParticipantInstance(
					modelRoot, new queryClassInstanceParticipant_c(
							modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Class Instance Participant";
			}
			if (!(modelElement instanceof ClassInstanceParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ClassInstanceParticipant_c"); //$NON-NLS-1$
			}
			ClassInstanceParticipant_c obj = (ClassInstanceParticipant_c) modelElement;
			return obj.getName() + ": Class Instance Participant"; //$NON-NLS-1$
		}
	}

	public static final class queryClassInstanceParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ClassInstanceParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryClassInstanceParticipant_c(ClassInstanceParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryClassInstanceParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ClassInstanceParticipant_c candidate = (ClassInstanceParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class ActorParticipant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ActorParticipant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ActorParticipant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryActorParticipant_c(
					(ActorParticipant_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ActorParticipant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ActorParticipant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ActorParticipant_c.ActorParticipantInstance(modelRoot,
					new queryActorParticipant_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Actor Participant";
			}
			if (!(modelElement instanceof ActorParticipant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ActorParticipant_c"); //$NON-NLS-1$
			}
			ActorParticipant_c obj = (ActorParticipant_c) modelElement;
			return obj.getName() + ": Actor Participant"; //$NON-NLS-1$
		}
	}

	public static final class queryActorParticipant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ActorParticipant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Part_id = IdAssigner.NULL_UUID;
		public queryActorParticipant_c(ActorParticipant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Part_id = inst.getPart_id();
			if (IdAssigner.NULL_UUID.equals(Part_id)) {
				Part_id = inst.getPart_idCachedValue();
			}
		}
		public queryActorParticipant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Part_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Part_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ActorParticipant_c candidate = (ActorParticipant_c) inst;
			return candidate.getPart_id().equals(Part_id);
		}
	}

	public static final class Package_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Package_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Package_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryPackage_c((Package_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Package_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Package_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Package_c.PackageInstance(modelRoot, new queryPackage_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Package";
			}
			if (!(modelElement instanceof Package_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Package_c"); //$NON-NLS-1$
			}
			Package_c obj = (Package_c) modelElement;
			return obj.getName() + ": Package"; //$NON-NLS-1$
		}
	}

	public static final class queryPackage_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Package_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public queryPackage_c(Package_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public queryPackage_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Package_c candidate = (Package_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class Subsystem_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Subsystem_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Subsystem_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new querySubsystem_c(
					(Subsystem_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Subsystem_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Subsystem_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Subsystem_c.SubsystemInstance(modelRoot,
					new querySubsystem_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Subsystem";
			}
			if (!(modelElement instanceof Subsystem_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Subsystem_c"); //$NON-NLS-1$
			}
			Subsystem_c obj = (Subsystem_c) modelElement;
			return obj.getName() + ": Subsystem"; //$NON-NLS-1$
		}
	}

	public static final class querySubsystem_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Subsystem_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Ss_id = IdAssigner.NULL_UUID;
		public querySubsystem_c(Subsystem_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Ss_id = inst.getSs_id();
		}
		public querySubsystem_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Ss_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Ss_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Subsystem_c candidate = (Subsystem_c) inst;
			return candidate.getSs_id().equals(Ss_id);
		}
	}

	public static final class StructureMember_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof StructureMember_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type StructureMember_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryStructureMember_c(
					(StructureMember_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.StructureMember_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type StructureMember_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return StructureMember_c.StructureMemberInstance(modelRoot,
					new queryStructureMember_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Structure Member";
			}
			if (!(modelElement instanceof StructureMember_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof StructureMember_c"); //$NON-NLS-1$
			}
			StructureMember_c obj = (StructureMember_c) modelElement;
			return obj.getName() + ": Structure Member"; //$NON-NLS-1$
		}
	}

	public static final class queryStructureMember_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.StructureMember_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Member_id = IdAssigner.NULL_UUID;
		private UUID Parent_dt_dt_id = IdAssigner.NULL_UUID;
		public queryStructureMember_c(StructureMember_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Member_id = inst.getMember_id();
			Parent_dt_dt_id = inst.getParent_dt_dt_id();
			if (IdAssigner.NULL_UUID.equals(Parent_dt_dt_id)) {
				Parent_dt_dt_id = inst.getParent_dt_dt_idCachedValue();
			}
		}
		public queryStructureMember_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Member_id = UUID.fromString(set.getId(0));
				Parent_dt_dt_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Member_id));
			id.add(String.valueOf(Parent_dt_dt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			StructureMember_c candidate = (StructureMember_c) inst;
			return candidate.getMember_id().equals(Member_id)
					&& candidate.getParent_dt_dt_id().equals(Parent_dt_dt_id);
		}
	}

	public static final class FunctionParameter_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof FunctionParameter_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type FunctionParameter_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryFunctionParameter_c(
					(FunctionParameter_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.FunctionParameter_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type FunctionParameter_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return FunctionParameter_c.FunctionParameterInstance(modelRoot,
					new queryFunctionParameter_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Function Parameter";
			}
			if (!(modelElement instanceof FunctionParameter_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof FunctionParameter_c"); //$NON-NLS-1$
			}
			FunctionParameter_c obj = (FunctionParameter_c) modelElement;
			return obj.getName() + ": Function Parameter"; //$NON-NLS-1$
		}
	}

	public static final class queryFunctionParameter_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.FunctionParameter_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sparm_id = IdAssigner.NULL_UUID;
		public queryFunctionParameter_c(FunctionParameter_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sparm_id = inst.getSparm_id();
		}
		public queryFunctionParameter_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sparm_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sparm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			FunctionParameter_c candidate = (FunctionParameter_c) inst;
			return candidate.getSparm_id().equals(Sparm_id);
		}
	}

	public static final class ExternalEntityEventDataItem_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ExternalEntityEventDataItem_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ExternalEntityEventDataItem_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExternalEntityEventDataItem_c(
					(ExternalEntityEventDataItem_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ExternalEntityEventDataItem_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ExternalEntityEventDataItem_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ExternalEntityEventDataItem_c
					.ExternalEntityEventDataItemInstance(modelRoot,
							new queryExternalEntityEventDataItem_c(
									modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "External Entity Event Data Item";
			}
			if (!(modelElement instanceof ExternalEntityEventDataItem_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ExternalEntityEventDataItem_c"); //$NON-NLS-1$
			}
			ExternalEntityEventDataItem_c obj = (ExternalEntityEventDataItem_c) modelElement;
			return obj.getName() + ": External Entity Event Data Item"; //$NON-NLS-1$
		}
	}

	public static final class queryExternalEntityEventDataItem_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ExternalEntityEventDataItem_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Eeedi_id = IdAssigner.NULL_UUID;
		private UUID Ee_id = IdAssigner.NULL_UUID;
		public queryExternalEntityEventDataItem_c(
				ExternalEntityEventDataItem_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Eeedi_id = inst.getEeedi_id();
			Ee_id = inst.getEe_id();
			if (IdAssigner.NULL_UUID.equals(Ee_id)) {
				Ee_id = inst.getEe_idCachedValue();
			}
		}
		public queryExternalEntityEventDataItem_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Eeedi_id = UUID.fromString(set.getId(0));
				Ee_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Eeedi_id));
			id.add(String.valueOf(Ee_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ExternalEntityEventDataItem_c candidate = (ExternalEntityEventDataItem_c) inst;
			return candidate.getEeedi_id().equals(Eeedi_id)
					&& candidate.getEe_id().equals(Ee_id);
		}
	}

	public static final class ExternalEntityEvent_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ExternalEntityEvent_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ExternalEntityEvent_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExternalEntityEvent_c(
					(ExternalEntityEvent_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ExternalEntityEvent_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ExternalEntityEvent_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ExternalEntityEvent_c.ExternalEntityEventInstance(modelRoot,
					new queryExternalEntityEvent_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "External Entity Event";
			}
			if (!(modelElement instanceof ExternalEntityEvent_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ExternalEntityEvent_c"); //$NON-NLS-1$
			}
			ExternalEntityEvent_c obj = (ExternalEntityEvent_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": External Entity Event";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryExternalEntityEvent_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ExternalEntityEvent_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Eeevt_id = IdAssigner.NULL_UUID;
		private UUID Ee_id = IdAssigner.NULL_UUID;
		public queryExternalEntityEvent_c(ExternalEntityEvent_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Eeevt_id = inst.getEeevt_id();
			Ee_id = inst.getEe_id();
			if (IdAssigner.NULL_UUID.equals(Ee_id)) {
				Ee_id = inst.getEe_idCachedValue();
			}
		}
		public queryExternalEntityEvent_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Eeevt_id = UUID.fromString(set.getId(0));
				Ee_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Eeevt_id));
			id.add(String.valueOf(Ee_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ExternalEntityEvent_c candidate = (ExternalEntityEvent_c) inst;
			return candidate.getEeevt_id().equals(Eeevt_id)
					&& candidate.getEe_id().equals(Ee_id);
		}
	}

	public static final class ExternalEntityDataItem_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ExternalEntityDataItem_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ExternalEntityDataItem_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExternalEntityDataItem_c(
					(ExternalEntityDataItem_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ExternalEntityDataItem_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ExternalEntityDataItem_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ExternalEntityDataItem_c.ExternalEntityDataItemInstance(
					modelRoot,
					new queryExternalEntityDataItem_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "External Entity Data Item";
			}
			if (!(modelElement instanceof ExternalEntityDataItem_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ExternalEntityDataItem_c"); //$NON-NLS-1$
			}
			ExternalEntityDataItem_c obj = (ExternalEntityDataItem_c) modelElement;
			return obj.getName() + ": External Entity Data Item"; //$NON-NLS-1$
		}
	}

	public static final class queryExternalEntityDataItem_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ExternalEntityDataItem_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Eedi_id = IdAssigner.NULL_UUID;
		private UUID Ee_id = IdAssigner.NULL_UUID;
		public queryExternalEntityDataItem_c(ExternalEntityDataItem_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Eedi_id = inst.getEedi_id();
			Ee_id = inst.getEe_id();
			if (IdAssigner.NULL_UUID.equals(Ee_id)) {
				Ee_id = inst.getEe_idCachedValue();
			}
		}
		public queryExternalEntityDataItem_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Eedi_id = UUID.fromString(set.getId(0));
				Ee_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Eedi_id));
			id.add(String.valueOf(Ee_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ExternalEntityDataItem_c candidate = (ExternalEntityDataItem_c) inst;
			return candidate.getEedi_id().equals(Eedi_id)
					&& candidate.getEe_id().equals(Ee_id);
		}
	}

	public static final class ExternalEntity_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ExternalEntity_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ExternalEntity_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExternalEntity_c(
					(ExternalEntity_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ExternalEntity_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ExternalEntity_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ExternalEntity_c.ExternalEntityInstance(modelRoot,
					new queryExternalEntity_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "External Entity";
			}
			if (!(modelElement instanceof ExternalEntity_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ExternalEntity_c"); //$NON-NLS-1$
			}
			ExternalEntity_c obj = (ExternalEntity_c) modelElement;
			return obj.getName() + ": External Entity"; //$NON-NLS-1$
		}
	}

	public static final class queryExternalEntity_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ExternalEntity_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Ee_id = IdAssigner.NULL_UUID;
		public queryExternalEntity_c(ExternalEntity_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Ee_id = inst.getEe_id();
			if (IdAssigner.NULL_UUID.equals(Ee_id)) {
				Ee_id = inst.getEe_idCachedValue();
			}
		}
		public queryExternalEntity_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Ee_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Ee_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ExternalEntity_c candidate = (ExternalEntity_c) inst;
			return candidate.getEe_id().equals(Ee_id);
		}
	}

	public static final class Enumerator_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Enumerator_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Enumerator_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryEnumerator_c(
					(Enumerator_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Enumerator_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Enumerator_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Enumerator_c.EnumeratorInstance(modelRoot,
					new queryEnumerator_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Enumerator";
			}
			if (!(modelElement instanceof Enumerator_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Enumerator_c"); //$NON-NLS-1$
			}
			Enumerator_c obj = (Enumerator_c) modelElement;
			return obj.getName() + ": Enumerator"; //$NON-NLS-1$
		}
	}

	public static final class queryEnumerator_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Enumerator_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Enum_id = IdAssigner.NULL_UUID;
		public queryEnumerator_c(Enumerator_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Enum_id = inst.getEnum_id();
		}
		public queryEnumerator_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Enum_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Enum_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Enumerator_c candidate = (Enumerator_c) inst;
			return candidate.getEnum_id().equals(Enum_id);
		}
	}

	public static final class Domain_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Domain_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Domain_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryDomain_c((Domain_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Domain_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Domain_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Domain_c.DomainInstance(modelRoot, new queryDomain_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Domain";
			}
			if (!(modelElement instanceof Domain_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Domain_c"); //$NON-NLS-1$
			}
			Domain_c obj = (Domain_c) modelElement;
			return obj.getName() + ": Domain"; //$NON-NLS-1$
		}
	}

	public static final class queryDomain_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Domain_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Dom_id = IdAssigner.NULL_UUID;
		public queryDomain_c(Domain_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Dom_id = inst.getDom_id();
		}
		public queryDomain_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Dom_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Dom_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Domain_c candidate = (Domain_c) inst;
			return candidate.getDom_id().equals(Dom_id);
		}
	}

	public static final class BridgeParameter_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof BridgeParameter_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type BridgeParameter_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryBridgeParameter_c(
					(BridgeParameter_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.BridgeParameter_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type BridgeParameter_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return BridgeParameter_c.BridgeParameterInstance(modelRoot,
					new queryBridgeParameter_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Bridge Parameter";
			}
			if (!(modelElement instanceof BridgeParameter_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof BridgeParameter_c"); //$NON-NLS-1$
			}
			BridgeParameter_c obj = (BridgeParameter_c) modelElement;
			return obj.getName() + ": Bridge Parameter"; //$NON-NLS-1$
		}
	}

	public static final class queryBridgeParameter_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.BridgeParameter_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Bparm_id = IdAssigner.NULL_UUID;
		public queryBridgeParameter_c(BridgeParameter_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Bparm_id = inst.getBparm_id();
		}
		public queryBridgeParameter_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Bparm_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Bparm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			BridgeParameter_c candidate = (BridgeParameter_c) inst;
			return candidate.getBparm_id().equals(Bparm_id);
		}
	}

	public static final class SymbolicConstant_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof SymbolicConstant_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type SymbolicConstant_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new querySymbolicConstant_c(
					(SymbolicConstant_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.SymbolicConstant_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type SymbolicConstant_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return SymbolicConstant_c.SymbolicConstantInstance(modelRoot,
					new querySymbolicConstant_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Symbolic Constant";
			}
			if (!(modelElement instanceof SymbolicConstant_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof SymbolicConstant_c"); //$NON-NLS-1$
			}
			SymbolicConstant_c obj = (SymbolicConstant_c) modelElement;
			return obj.getName() + ": Symbolic Constant"; //$NON-NLS-1$
		}
	}

	public static final class querySymbolicConstant_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.SymbolicConstant_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Const_id = IdAssigner.NULL_UUID;
		private UUID Dt_id = IdAssigner.NULL_UUID;
		public querySymbolicConstant_c(SymbolicConstant_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Const_id = inst.getConst_id();
			Dt_id = inst.getDt_id();
			if (IdAssigner.NULL_UUID.equals(Dt_id)) {
				Dt_id = inst.getDt_idCachedValue();
			}
		}
		public querySymbolicConstant_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Const_id = UUID.fromString(set.getId(0));
				Dt_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Const_id));
			id.add(String.valueOf(Dt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			SymbolicConstant_c candidate = (SymbolicConstant_c) inst;
			return candidate.getConst_id().equals(Const_id)
					&& candidate.getDt_id().equals(Dt_id);
		}
	}

	public static final class ConstantSpecification_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ConstantSpecification_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ConstantSpecification_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryConstantSpecification_c(
					(ConstantSpecification_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ConstantSpecification_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ConstantSpecification_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ConstantSpecification_c
					.ConstantSpecificationInstance(modelRoot,
							new queryConstantSpecification_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Constant Specification";
			}
			if (!(modelElement instanceof ConstantSpecification_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ConstantSpecification_c"); //$NON-NLS-1$
			}
			ConstantSpecification_c obj = (ConstantSpecification_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Constant Specification";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryConstantSpecification_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ConstantSpecification_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Constant_spec_id = IdAssigner.NULL_UUID;
		public queryConstantSpecification_c(ConstantSpecification_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Constant_spec_id = inst.getConstant_spec_id();
			if (IdAssigner.NULL_UUID.equals(Constant_spec_id)) {
				Constant_spec_id = inst.getConstant_spec_idCachedValue();
			}
		}
		public queryConstantSpecification_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Constant_spec_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Constant_spec_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ConstantSpecification_c candidate = (ConstantSpecification_c) inst;
			return candidate.getConstant_spec_id().equals(Constant_spec_id);
		}
	}

	public static final class Satisfaction_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Satisfaction_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Satisfaction_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new querySatisfaction_c(
					(Satisfaction_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Satisfaction_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Satisfaction_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Satisfaction_c.SatisfactionInstance(modelRoot,
					new querySatisfaction_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Satisfaction";
			}
			if (!(modelElement instanceof Satisfaction_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Satisfaction_c"); //$NON-NLS-1$
			}
			Satisfaction_c obj = (Satisfaction_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Satisfaction";
			else
				return "UNKNOWN";
		}
	}

	public static final class querySatisfaction_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Satisfaction_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public querySatisfaction_c(Satisfaction_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public querySatisfaction_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Satisfaction_c candidate = (Satisfaction_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class Requirement_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Requirement_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Requirement_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryRequirement_c(
					(Requirement_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Requirement_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Requirement_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Requirement_c.RequirementInstance(modelRoot,
					new queryRequirement_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Requirement";
			}
			if (!(modelElement instanceof Requirement_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Requirement_c"); //$NON-NLS-1$
			}
			Requirement_c obj = (Requirement_c) modelElement;
			return obj.getName() + ": Requirement"; //$NON-NLS-1$
		}
	}

	public static final class queryRequirement_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Requirement_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Requirement_id = IdAssigner.NULL_UUID;
		public queryRequirement_c(Requirement_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Requirement_id = inst.getRequirement_id();
			if (IdAssigner.NULL_UUID.equals(Requirement_id)) {
				Requirement_id = inst.getRequirement_idCachedValue();
			}
		}
		public queryRequirement_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Requirement_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Requirement_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Requirement_c candidate = (Requirement_c) inst;
			return candidate.getRequirement_id().equals(Requirement_id);
		}
	}

	public static final class Provision_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Provision_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Provision_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryProvision_c(
					(Provision_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Provision_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Provision_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Provision_c.ProvisionInstance(modelRoot,
					new queryProvision_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Provision";
			}
			if (!(modelElement instanceof Provision_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Provision_c"); //$NON-NLS-1$
			}
			Provision_c obj = (Provision_c) modelElement;
			return obj.getName() + ": Provision"; //$NON-NLS-1$
		}
	}

	public static final class queryProvision_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Provision_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Provision_id = IdAssigner.NULL_UUID;
		public queryProvision_c(Provision_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Provision_id = inst.getProvision_id();
			if (IdAssigner.NULL_UUID.equals(Provision_id)) {
				Provision_id = inst.getProvision_idCachedValue();
			}
		}
		public queryProvision_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Provision_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Provision_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Provision_c candidate = (Provision_c) inst;
			return candidate.getProvision_id().equals(Provision_id);
		}
	}

	public static final class PropertyParameter_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof PropertyParameter_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type PropertyParameter_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryPropertyParameter_c(
					(PropertyParameter_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.PropertyParameter_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type PropertyParameter_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return PropertyParameter_c.PropertyParameterInstance(modelRoot,
					new queryPropertyParameter_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Property Parameter";
			}
			if (!(modelElement instanceof PropertyParameter_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof PropertyParameter_c"); //$NON-NLS-1$
			}
			PropertyParameter_c obj = (PropertyParameter_c) modelElement;
			return obj.getName() + ": Property Parameter"; //$NON-NLS-1$
		}
	}

	public static final class queryPropertyParameter_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.PropertyParameter_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Pp_id = IdAssigner.NULL_UUID;
		public queryPropertyParameter_c(PropertyParameter_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Pp_id = inst.getPp_id();
		}
		public queryPropertyParameter_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Pp_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Pp_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			PropertyParameter_c candidate = (PropertyParameter_c) inst;
			return candidate.getPp_id().equals(Pp_id);
		}
	}

	public static final class InterfaceSignal_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof InterfaceSignal_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type InterfaceSignal_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInterfaceSignal_c(
					(InterfaceSignal_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.InterfaceSignal_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type InterfaceSignal_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return InterfaceSignal_c.InterfaceSignalInstance(modelRoot,
					new queryInterfaceSignal_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Interface Signal";
			}
			if (!(modelElement instanceof InterfaceSignal_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof InterfaceSignal_c"); //$NON-NLS-1$
			}
			InterfaceSignal_c obj = (InterfaceSignal_c) modelElement;
			return obj.getName() + ": Interface Signal"; //$NON-NLS-1$
		}
	}

	public static final class queryInterfaceSignal_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.InterfaceSignal_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryInterfaceSignal_c(InterfaceSignal_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryInterfaceSignal_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			InterfaceSignal_c candidate = (InterfaceSignal_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class InterfaceOperation_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof InterfaceOperation_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type InterfaceOperation_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInterfaceOperation_c(
					(InterfaceOperation_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.InterfaceOperation_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type InterfaceOperation_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return InterfaceOperation_c.InterfaceOperationInstance(modelRoot,
					new queryInterfaceOperation_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Interface Operation";
			}
			if (!(modelElement instanceof InterfaceOperation_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof InterfaceOperation_c"); //$NON-NLS-1$
			}
			InterfaceOperation_c obj = (InterfaceOperation_c) modelElement;
			return obj.getName() + ": Interface Operation"; //$NON-NLS-1$
		}
	}

	public static final class queryInterfaceOperation_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.InterfaceOperation_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryInterfaceOperation_c(InterfaceOperation_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryInterfaceOperation_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			InterfaceOperation_c candidate = (InterfaceOperation_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class Interface_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Interface_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Interface_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInterface_c(
					(Interface_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Interface_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Interface_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Interface_c.InterfaceInstance(modelRoot,
					new queryInterface_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Interface";
			}
			if (!(modelElement instanceof Interface_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Interface_c"); //$NON-NLS-1$
			}
			Interface_c obj = (Interface_c) modelElement;
			return obj.getName() + ": Interface"; //$NON-NLS-1$
		}
	}

	public static final class queryInterface_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Interface_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryInterface_c(Interface_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryInterface_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Interface_c candidate = (Interface_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ExecutableProperty_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ExecutableProperty_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ExecutableProperty_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryExecutableProperty_c(
					(ExecutableProperty_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ExecutableProperty_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ExecutableProperty_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ExecutableProperty_c.ExecutablePropertyInstance(modelRoot,
					new queryExecutableProperty_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Executable Property";
			}
			if (!(modelElement instanceof ExecutableProperty_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ExecutableProperty_c"); //$NON-NLS-1$
			}
			ExecutableProperty_c obj = (ExecutableProperty_c) modelElement;
			return obj.getName() + ": Executable Property"; //$NON-NLS-1$
		}
	}

	public static final class queryExecutableProperty_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ExecutableProperty_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryExecutableProperty_c(ExecutableProperty_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
		}
		public queryExecutableProperty_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ExecutableProperty_c candidate = (ExecutableProperty_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ComponentPackage_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ComponentPackage_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ComponentPackage_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryComponentPackage_c(
					(ComponentPackage_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ComponentPackage_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ComponentPackage_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ComponentPackage_c.ComponentPackageInstance(modelRoot,
					new queryComponentPackage_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Component Package";
			}
			if (!(modelElement instanceof ComponentPackage_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ComponentPackage_c"); //$NON-NLS-1$
			}
			ComponentPackage_c obj = (ComponentPackage_c) modelElement;
			return obj.getName() + ": Component Package"; //$NON-NLS-1$
		}
	}

	public static final class queryComponentPackage_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ComponentPackage_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public queryComponentPackage_c(ComponentPackage_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public queryComponentPackage_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ComponentPackage_c candidate = (ComponentPackage_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class ImportedRequirement_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ImportedRequirement_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ImportedRequirement_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryImportedRequirement_c(
					(ImportedRequirement_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ImportedRequirement_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ImportedRequirement_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ImportedRequirement_c.ImportedRequirementInstance(modelRoot,
					new queryImportedRequirement_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Imported Requirement";
			}
			if (!(modelElement instanceof ImportedRequirement_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ImportedRequirement_c"); //$NON-NLS-1$
			}
			ImportedRequirement_c obj = (ImportedRequirement_c) modelElement;
			return obj.getName() + ": Imported Requirement"; //$NON-NLS-1$
		}
	}

	public static final class queryImportedRequirement_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ImportedRequirement_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryImportedRequirement_c(ImportedRequirement_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryImportedRequirement_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ImportedRequirement_c candidate = (ImportedRequirement_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ImportedReference_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ImportedReference_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ImportedReference_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryImportedReference_c(
					(ImportedReference_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ImportedReference_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ImportedReference_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ImportedReference_c.ImportedReferenceInstance(modelRoot,
					new queryImportedReference_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Imported Reference";
			}
			if (!(modelElement instanceof ImportedReference_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ImportedReference_c"); //$NON-NLS-1$
			}
			ImportedReference_c obj = (ImportedReference_c) modelElement;
			return obj.getName() + ": Imported Reference"; //$NON-NLS-1$
		}
	}

	public static final class queryImportedReference_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ImportedReference_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryImportedReference_c(ImportedReference_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
		}
		public queryImportedReference_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ImportedReference_c candidate = (ImportedReference_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ImportedProvision_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ImportedProvision_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ImportedProvision_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryImportedProvision_c(
					(ImportedProvision_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ImportedProvision_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ImportedProvision_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ImportedProvision_c.ImportedProvisionInstance(modelRoot,
					new queryImportedProvision_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Imported Provision";
			}
			if (!(modelElement instanceof ImportedProvision_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ImportedProvision_c"); //$NON-NLS-1$
			}
			ImportedProvision_c obj = (ImportedProvision_c) modelElement;
			return obj.getName() + ": Imported Provision"; //$NON-NLS-1$
		}
	}

	public static final class queryImportedProvision_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ImportedProvision_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryImportedProvision_c(ImportedProvision_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryImportedProvision_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ImportedProvision_c candidate = (ImportedProvision_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ComponentReference_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ComponentReference_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ComponentReference_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryComponentReference_c(
					(ComponentReference_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ComponentReference_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ComponentReference_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ComponentReference_c.ComponentReferenceInstance(modelRoot,
					new queryComponentReference_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Component Reference";
			}
			if (!(modelElement instanceof ComponentReference_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ComponentReference_c"); //$NON-NLS-1$
			}
			ComponentReference_c obj = (ComponentReference_c) modelElement;
			return obj.getName() + ": Component Reference"; //$NON-NLS-1$
		}
	}

	public static final class queryComponentReference_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ComponentReference_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryComponentReference_c(ComponentReference_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryComponentReference_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ComponentReference_c candidate = (ComponentReference_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class Component_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Component_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Component_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryComponent_c(
					(Component_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Component_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Component_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Component_c.ComponentInstance(modelRoot,
					new queryComponent_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Component";
			}
			if (!(modelElement instanceof Component_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Component_c"); //$NON-NLS-1$
			}
			Component_c obj = (Component_c) modelElement;
			return obj.getName() + ": Component"; //$NON-NLS-1$
		}
	}

	public static final class queryComponent_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Component_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryComponent_c(Component_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryComponent_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Component_c candidate = (Component_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class CommunicationLink_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof CommunicationLink_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type CommunicationLink_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryCommunicationLink_c(
					(CommunicationLink_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.CommunicationLink_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type CommunicationLink_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return CommunicationLink_c.CommunicationLinkInstance(modelRoot,
					new queryCommunicationLink_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Communication Link";
			}
			if (!(modelElement instanceof CommunicationLink_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof CommunicationLink_c"); //$NON-NLS-1$
			}
			CommunicationLink_c obj = (CommunicationLink_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Communication Link";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryCommunicationLink_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.CommunicationLink_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Link_id = IdAssigner.NULL_UUID;
		public queryCommunicationLink_c(CommunicationLink_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Link_id = inst.getLink_id();
		}
		public queryCommunicationLink_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Link_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Link_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			CommunicationLink_c candidate = (CommunicationLink_c) inst;
			return candidate.getLink_id().equals(Link_id);
		}
	}

	public static final class Communication_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Communication_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Communication_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryCommunication_c(
					(Communication_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Communication_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Communication_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Communication_c.CommunicationInstance(modelRoot,
					new queryCommunication_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Communication";
			}
			if (!(modelElement instanceof Communication_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Communication_c"); //$NON-NLS-1$
			}
			Communication_c obj = (Communication_c) modelElement;
			return obj.getName() + ": Communication"; //$NON-NLS-1$
		}
	}

	public static final class queryCommunication_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Communication_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public queryCommunication_c(Communication_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public queryCommunication_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Communication_c candidate = (Communication_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class Association_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Association_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Association_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAssociation_c(
					(Association_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Association_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Association_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Association_c.AssociationInstance(modelRoot,
					new queryAssociation_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Association";
			}
			if (!(modelElement instanceof Association_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Association_c"); //$NON-NLS-1$
			}
			Association_c obj = (Association_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Association";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryAssociation_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Association_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Rel_id = IdAssigner.NULL_UUID;
		public queryAssociation_c(Association_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Rel_id = inst.getRel_id();
			if (IdAssigner.NULL_UUID.equals(Rel_id)) {
				Rel_id = inst.getRel_idCachedValue();
			}
		}
		public queryAssociation_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Rel_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Rel_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Association_c candidate = (Association_c) inst;
			return candidate.getRel_id().equals(Rel_id);
		}
	}

	public static final class SendSignal_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof SendSignal_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type SendSignal_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new querySendSignal_c(
					(SendSignal_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.SendSignal_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type SendSignal_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return SendSignal_c.SendSignalInstance(modelRoot,
					new querySendSignal_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Send Signal";
			}
			if (!(modelElement instanceof SendSignal_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof SendSignal_c"); //$NON-NLS-1$
			}
			SendSignal_c obj = (SendSignal_c) modelElement;
			return obj.getName() + ": Send Signal"; //$NON-NLS-1$
		}
	}

	public static final class querySendSignal_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.SendSignal_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public querySendSignal_c(SendSignal_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public querySendSignal_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			SendSignal_c candidate = (SendSignal_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ObjectNode_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ObjectNode_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ObjectNode_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryObjectNode_c(
					(ObjectNode_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ObjectNode_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ObjectNode_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ObjectNode_c.ObjectNodeInstance(modelRoot,
					new queryObjectNode_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Object Node";
			}
			if (!(modelElement instanceof ObjectNode_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ObjectNode_c"); //$NON-NLS-1$
			}
			ObjectNode_c obj = (ObjectNode_c) modelElement;
			return obj.getName() + ": Object Node"; //$NON-NLS-1$
		}
	}

	public static final class queryObjectNode_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ObjectNode_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryObjectNode_c(ObjectNode_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryObjectNode_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ObjectNode_c candidate = (ObjectNode_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class InitialNode_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof InitialNode_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type InitialNode_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInitialNode_c(
					(InitialNode_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.InitialNode_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type InitialNode_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return InitialNode_c.InitialNodeInstance(modelRoot,
					new queryInitialNode_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Initial Node";
			}
			if (!(modelElement instanceof InitialNode_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof InitialNode_c"); //$NON-NLS-1$
			}
			InitialNode_c obj = (InitialNode_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Initial Node";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryInitialNode_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.InitialNode_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryInitialNode_c(InitialNode_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryInitialNode_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			InitialNode_c candidate = (InitialNode_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ForkJoinNode_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ForkJoinNode_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ForkJoinNode_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryForkJoinNode_c(
					(ForkJoinNode_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ForkJoinNode_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ForkJoinNode_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ForkJoinNode_c.ForkJoinNodeInstance(modelRoot,
					new queryForkJoinNode_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Fork Join Node";
			}
			if (!(modelElement instanceof ForkJoinNode_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ForkJoinNode_c"); //$NON-NLS-1$
			}
			ForkJoinNode_c obj = (ForkJoinNode_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Fork Join Node";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryForkJoinNode_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ForkJoinNode_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryForkJoinNode_c(ForkJoinNode_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryForkJoinNode_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ForkJoinNode_c candidate = (ForkJoinNode_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class FlowFinalNode_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof FlowFinalNode_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type FlowFinalNode_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryFlowFinalNode_c(
					(FlowFinalNode_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.FlowFinalNode_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type FlowFinalNode_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return FlowFinalNode_c.FlowFinalNodeInstance(modelRoot,
					new queryFlowFinalNode_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Flow Final Node";
			}
			if (!(modelElement instanceof FlowFinalNode_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof FlowFinalNode_c"); //$NON-NLS-1$
			}
			FlowFinalNode_c obj = (FlowFinalNode_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Flow Final Node";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryFlowFinalNode_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.FlowFinalNode_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryFlowFinalNode_c(FlowFinalNode_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryFlowFinalNode_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			FlowFinalNode_c candidate = (FlowFinalNode_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class DecisionMergeNode_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof DecisionMergeNode_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type DecisionMergeNode_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryDecisionMergeNode_c(
					(DecisionMergeNode_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.DecisionMergeNode_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type DecisionMergeNode_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return DecisionMergeNode_c.DecisionMergeNodeInstance(modelRoot,
					new queryDecisionMergeNode_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Decision Merge Node";
			}
			if (!(modelElement instanceof DecisionMergeNode_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof DecisionMergeNode_c"); //$NON-NLS-1$
			}
			DecisionMergeNode_c obj = (DecisionMergeNode_c) modelElement;
			return obj.getName() + ": Decision Merge Node"; //$NON-NLS-1$
		}
	}

	public static final class queryDecisionMergeNode_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.DecisionMergeNode_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryDecisionMergeNode_c(DecisionMergeNode_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryDecisionMergeNode_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			DecisionMergeNode_c candidate = (DecisionMergeNode_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ActivityPartition_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ActivityPartition_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ActivityPartition_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryActivityPartition_c(
					(ActivityPartition_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ActivityPartition_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ActivityPartition_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ActivityPartition_c.ActivityPartitionInstance(modelRoot,
					new queryActivityPartition_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Activity Partition";
			}
			if (!(modelElement instanceof ActivityPartition_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ActivityPartition_c"); //$NON-NLS-1$
			}
			ActivityPartition_c obj = (ActivityPartition_c) modelElement;
			return obj.getName() + ": Activity Partition"; //$NON-NLS-1$
		}
	}

	public static final class queryActivityPartition_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ActivityPartition_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryActivityPartition_c(ActivityPartition_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryActivityPartition_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ActivityPartition_c candidate = (ActivityPartition_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ActivityFinalNode_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ActivityFinalNode_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ActivityFinalNode_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryActivityFinalNode_c(
					(ActivityFinalNode_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ActivityFinalNode_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ActivityFinalNode_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ActivityFinalNode_c.ActivityFinalNodeInstance(modelRoot,
					new queryActivityFinalNode_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Activity Final Node";
			}
			if (!(modelElement instanceof ActivityFinalNode_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ActivityFinalNode_c"); //$NON-NLS-1$
			}
			ActivityFinalNode_c obj = (ActivityFinalNode_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Activity Final Node";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryActivityFinalNode_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ActivityFinalNode_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryActivityFinalNode_c(ActivityFinalNode_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryActivityFinalNode_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ActivityFinalNode_c candidate = (ActivityFinalNode_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ActivityEdge_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ActivityEdge_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ActivityEdge_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryActivityEdge_c(
					(ActivityEdge_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ActivityEdge_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ActivityEdge_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ActivityEdge_c.ActivityEdgeInstance(modelRoot,
					new queryActivityEdge_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Activity Edge";
			}
			if (!(modelElement instanceof ActivityEdge_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ActivityEdge_c"); //$NON-NLS-1$
			}
			ActivityEdge_c obj = (ActivityEdge_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Activity Edge";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryActivityEdge_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ActivityEdge_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryActivityEdge_c(ActivityEdge_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryActivityEdge_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ActivityEdge_c candidate = (ActivityEdge_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class ActivityDiagramAction_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ActivityDiagramAction_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ActivityDiagramAction_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryActivityDiagramAction_c(
					(ActivityDiagramAction_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ActivityDiagramAction_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ActivityDiagramAction_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ActivityDiagramAction_c
					.ActivityDiagramActionInstance(modelRoot,
							new queryActivityDiagramAction_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Activity Diagram Action";
			}
			if (!(modelElement instanceof ActivityDiagramAction_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ActivityDiagramAction_c"); //$NON-NLS-1$
			}
			ActivityDiagramAction_c obj = (ActivityDiagramAction_c) modelElement;
			return obj.getName() + ": Activity Diagram Action"; //$NON-NLS-1$
		}
	}

	public static final class queryActivityDiagramAction_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ActivityDiagramAction_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryActivityDiagramAction_c(ActivityDiagramAction_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryActivityDiagramAction_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ActivityDiagramAction_c candidate = (ActivityDiagramAction_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class Activity_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Activity_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Activity_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryActivity_c((Activity_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Activity_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Activity_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Activity_c.ActivityInstance(modelRoot, new queryActivity_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Activity";
			}
			if (!(modelElement instanceof Activity_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Activity_c"); //$NON-NLS-1$
			}
			Activity_c obj = (Activity_c) modelElement;
			return obj.getName() + ": Activity"; //$NON-NLS-1$
		}
	}

	public static final class queryActivity_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Activity_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Package_id = IdAssigner.NULL_UUID;
		public queryActivity_c(Activity_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Package_id = inst.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(Package_id)) {
				Package_id = inst.getPackage_idCachedValue();
			}
		}
		public queryActivity_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Package_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Package_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Activity_c candidate = (Activity_c) inst;
			return candidate.getPackage_id().equals(Package_id);
		}
	}

	public static final class AcceptTimeEventAction_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof AcceptTimeEventAction_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type AcceptTimeEventAction_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAcceptTimeEventAction_c(
					(AcceptTimeEventAction_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.AcceptTimeEventAction_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type AcceptTimeEventAction_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return AcceptTimeEventAction_c
					.AcceptTimeEventActionInstance(modelRoot,
							new queryAcceptTimeEventAction_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Accept Time Event Action";
			}
			if (!(modelElement instanceof AcceptTimeEventAction_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof AcceptTimeEventAction_c"); //$NON-NLS-1$
			}
			AcceptTimeEventAction_c obj = (AcceptTimeEventAction_c) modelElement;
			return obj.getName() + ": Accept Time Event Action"; //$NON-NLS-1$
		}
	}

	public static final class queryAcceptTimeEventAction_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.AcceptTimeEventAction_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryAcceptTimeEventAction_c(AcceptTimeEventAction_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryAcceptTimeEventAction_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			AcceptTimeEventAction_c candidate = (AcceptTimeEventAction_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class AcceptEventAction_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof AcceptEventAction_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type AcceptEventAction_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAcceptEventAction_c(
					(AcceptEventAction_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.AcceptEventAction_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type AcceptEventAction_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return AcceptEventAction_c.AcceptEventActionInstance(modelRoot,
					new queryAcceptEventAction_c(modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Accept Event Action";
			}
			if (!(modelElement instanceof AcceptEventAction_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof AcceptEventAction_c"); //$NON-NLS-1$
			}
			AcceptEventAction_c obj = (AcceptEventAction_c) modelElement;
			return obj.getName() + ": Accept Event Action"; //$NON-NLS-1$
		}
	}

	public static final class queryAcceptEventAction_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.AcceptEventAction_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Id = IdAssigner.NULL_UUID;
		public queryAcceptEventAction_c(AcceptEventAction_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Id = inst.getId();
			if (IdAssigner.NULL_UUID.equals(Id)) {
				Id = inst.getIdCachedValue();
			}
		}
		public queryAcceptEventAction_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Id));
			return id;
		}
		public boolean evaluate(Object inst) {
			AcceptEventAction_c candidate = (AcceptEventAction_c) inst;
			return candidate.getId().equals(Id);
		}
	}

	public static final class InstanceStateMachine_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof InstanceStateMachine_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type InstanceStateMachine_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryInstanceStateMachine_c(
					(InstanceStateMachine_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.InstanceStateMachine_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type InstanceStateMachine_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return InstanceStateMachine_c.InstanceStateMachineInstance(
					modelRoot, new queryInstanceStateMachine_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Instance State Machine";
			}
			if (!(modelElement instanceof InstanceStateMachine_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof InstanceStateMachine_c"); //$NON-NLS-1$
			}
			InstanceStateMachine_c obj = (InstanceStateMachine_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Instance State Machine";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryInstanceStateMachine_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.InstanceStateMachine_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		public queryInstanceStateMachine_c(InstanceStateMachine_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
		}
		public queryInstanceStateMachine_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			InstanceStateMachine_c candidate = (InstanceStateMachine_c) inst;
			return candidate.getSm_id().equals(Sm_id);
		}
	}

	public static final class ClassStateMachine_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof ClassStateMachine_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type ClassStateMachine_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryClassStateMachine_c(
					(ClassStateMachine_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.ClassStateMachine_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type ClassStateMachine_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return ClassStateMachine_c.ClassStateMachineInstance(modelRoot,
					new queryClassStateMachine_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Class State Machine";
			}
			if (!(modelElement instanceof ClassStateMachine_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof ClassStateMachine_c"); //$NON-NLS-1$
			}
			ClassStateMachine_c obj = (ClassStateMachine_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Class State Machine";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryClassStateMachine_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.ClassStateMachine_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		public queryClassStateMachine_c(ClassStateMachine_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
		}
		public queryClassStateMachine_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			ClassStateMachine_c candidate = (ClassStateMachine_c) inst;
			return candidate.getSm_id().equals(Sm_id);
		}
	}

	public static final class UserDataType_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof UserDataType_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type UserDataType_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryUserDataType_c(
					(UserDataType_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.UserDataType_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type UserDataType_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return UserDataType_c.UserDataTypeInstance(modelRoot,
					new queryUserDataType_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "User Data Type";
			}
			if (!(modelElement instanceof UserDataType_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof UserDataType_c"); //$NON-NLS-1$
			}
			UserDataType_c obj = (UserDataType_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": User Data Type";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryUserDataType_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.UserDataType_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Dt_id = IdAssigner.NULL_UUID;
		public queryUserDataType_c(UserDataType_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Dt_id = inst.getDt_id();
			if (IdAssigner.NULL_UUID.equals(Dt_id)) {
				Dt_id = inst.getDt_idCachedValue();
			}
		}
		public queryUserDataType_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Dt_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Dt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			UserDataType_c candidate = (UserDataType_c) inst;
			return candidate.getDt_id().equals(Dt_id);
		}
	}

	public static final class EnumerationDataType_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof EnumerationDataType_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type EnumerationDataType_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryEnumerationDataType_c(
					(EnumerationDataType_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.EnumerationDataType_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type EnumerationDataType_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return EnumerationDataType_c.EnumerationDataTypeInstance(modelRoot,
					new queryEnumerationDataType_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Enumeration Data Type";
			}
			if (!(modelElement instanceof EnumerationDataType_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof EnumerationDataType_c"); //$NON-NLS-1$
			}
			EnumerationDataType_c obj = (EnumerationDataType_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Enumeration Data Type";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryEnumerationDataType_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.EnumerationDataType_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Dt_id = IdAssigner.NULL_UUID;
		public queryEnumerationDataType_c(EnumerationDataType_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Dt_id = inst.getDt_id();
			if (IdAssigner.NULL_UUID.equals(Dt_id)) {
				Dt_id = inst.getDt_idCachedValue();
			}
		}
		public queryEnumerationDataType_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Dt_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Dt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			EnumerationDataType_c candidate = (EnumerationDataType_c) inst;
			return candidate.getDt_id().equals(Dt_id);
		}
	}

	public static final class StructuredDataType_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof StructuredDataType_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type StructuredDataType_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryStructuredDataType_c(
					(StructuredDataType_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.StructuredDataType_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type StructuredDataType_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return StructuredDataType_c.StructuredDataTypeInstance(modelRoot,
					new queryStructuredDataType_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Structured Data Type";
			}
			if (!(modelElement instanceof StructuredDataType_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof StructuredDataType_c"); //$NON-NLS-1$
			}
			StructuredDataType_c obj = (StructuredDataType_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Structured Data Type";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryStructuredDataType_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.StructuredDataType_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Dt_id = IdAssigner.NULL_UUID;
		public queryStructuredDataType_c(StructuredDataType_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Dt_id = inst.getDt_id();
			if (IdAssigner.NULL_UUID.equals(Dt_id)) {
				Dt_id = inst.getDt_idCachedValue();
			}
		}
		public queryStructuredDataType_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Dt_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Dt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			StructuredDataType_c candidate = (StructuredDataType_c) inst;
			return candidate.getDt_id().equals(Dt_id);
		}
	}

	public static final class Action_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof Action_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type Action_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryAction_c((Action_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.Action_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type Action_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return Action_c.ActionInstance(modelRoot, new queryAction_c(
					modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Action";
			}
			if (!(modelElement instanceof Action_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof Action_c"); //$NON-NLS-1$
			}
			Action_c obj = (Action_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Action";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryAction_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.Action_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		private UUID Act_id = IdAssigner.NULL_UUID;
		public queryAction_c(Action_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
			if (IdAssigner.NULL_UUID.equals(Sm_id)) {
				Sm_id = inst.getSm_idCachedValue();
			}
			Act_id = inst.getAct_id();
		}
		public queryAction_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
				Act_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			id.add(String.valueOf(Act_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			Action_c candidate = (Action_c) inst;
			return candidate.getSm_id().equals(Sm_id)
					&& candidate.getAct_id().equals(Act_id);
		}
	}

	public static final class StateMachine_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof StateMachine_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type StateMachine_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryStateMachine_c(
					(StateMachine_c) modelElement)).createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.StateMachine_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type StateMachine_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return StateMachine_c.StateMachineInstance(modelRoot,
					new queryStateMachine_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "State Machine";
			}
			if (!(modelElement instanceof StateMachine_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof StateMachine_c"); //$NON-NLS-1$
			}
			StateMachine_c obj = (StateMachine_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": State Machine";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryStateMachine_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.StateMachine_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Sm_id = IdAssigner.NULL_UUID;
		public queryStateMachine_c(StateMachine_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Sm_id = inst.getSm_id();
		}
		public queryStateMachine_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Sm_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Sm_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			StateMachine_c candidate = (StateMachine_c) inst;
			return candidate.getSm_id().equals(Sm_id);
		}
	}

	public static final class DataType_cAdapter implements IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof DataType_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type DataType_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryDataType_c((DataType_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.DataType_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type DataType_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return DataType_c.DataTypeInstance(modelRoot, new queryDataType_c(
					modelElementID));
		}

		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Data Type";
			}
			if (!(modelElement instanceof DataType_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof DataType_c"); //$NON-NLS-1$
			}
			DataType_c obj = (DataType_c) modelElement;
			return obj.getName() + ": Data Type"; //$NON-NLS-1$
		}
	}

	public static final class queryDataType_c implements ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.DataType_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Dt_id = IdAssigner.NULL_UUID;
		public queryDataType_c(DataType_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Dt_id = inst.getDt_id();
			if (IdAssigner.NULL_UUID.equals(Dt_id)) {
				Dt_id = inst.getDt_idCachedValue();
			}
		}
		public queryDataType_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Dt_id = UUID.fromString(set.getId(0));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Dt_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			DataType_c candidate = (DataType_c) inst;
			return candidate.getDt_id().equals(Dt_id);
		}
	}

	public static final class DerivedBaseAttribute_cAdapter
			implements
				IModelElementAdapter {
		public ModelElementID createModelElementID(
				NonRootModelElement modelElement) {
			if (!(modelElement instanceof DerivedBaseAttribute_c)) {
				throw new IllegalArgumentException(
						"Model element is not of type DerivedBaseAttribute_c"); //$NON-NLS-1$
			}

			ModelElementID id = (new queryDerivedBaseAttribute_c(
					(DerivedBaseAttribute_c) modelElement))
					.createModelElementID();
			id.modelElement = modelElement;
			id.modelRoot = (Ooaofooa) (modelElement.getModelRoot());
			// update the cached name
			id.getLastValidName();
			return id;
		}

		public NonRootModelElement resolveModelElement(
				ModelElementID modelElementID) {
			if (!"com.mentor.nucleus.bp.core.DerivedBaseAttribute_c".equals(modelElementID.getType())) { //$NON-NLS-1$
				throw new IllegalArgumentException(
						"Given ModelElementID does not represent type DerivedBaseAttribute_c"); //$NON-NLS-1$
			}

			Ooaofooa modelRoot = Ooaofooa.getInstance(
					modelElementID.getModelRootID(), false);
			if (modelRoot == null) {
				return null;
			}

			String componentPath = modelElementID.getComponentPath();
			if (componentPath != null) {
				IFile f = ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(componentPath));
				try {
					// if the resource tree isn't locked, then we can do a refresh
					// the resource tree has locking conflicts during unit tests,
					// so only check this if we are running a unit test
					if (!ResourcesPlugin.getWorkspace().isTreeLocked()) {
						f.refreshLocal(0, new NullProgressMonitor());
					}
				} catch (CoreException e) {
					TextPlugin.logError("Unable to refresh component file", e);
				}
				if (!f.exists()) {
					return null;
				} else {
					PersistenceManager.getDefaultInstance()
							.loadAndFinishComponent(componentPath);
					PersistableModelComponent pmc = PersistenceManager
							.findComponent(new Path(componentPath));
					if (pmc == null) {
						return null;
					}
				}
			}
			return DerivedBaseAttribute_c.DerivedBaseAttributeInstance(
					modelRoot, new queryDerivedBaseAttribute_c(modelElementID));
		}

		private static String m_getNameValid = "no"; //$NON-NLS-1$
		public final String getName(NonRootModelElement modelElement) {
			if (modelElement == null) {
				return "Derived Base Attribute";
			}
			if (!(modelElement instanceof DerivedBaseAttribute_c)) {
				throw new IllegalArgumentException(
						"argument should be instanceof DerivedBaseAttribute_c"); //$NON-NLS-1$
			}
			DerivedBaseAttribute_c obj = (DerivedBaseAttribute_c) modelElement;
			if (m_getNameValid != null && m_getNameValid.equals("no")) //$NON-NLS-1$
			{
				m_getNameValid = ModelAdapter.getName(obj);
				if (m_getNameValid != null)
					m_getNameValid = "yes"; //$NON-NLS-1$
			}
			if (m_getNameValid != null && m_getNameValid.equals("yes")) //$NON-NLS-1$
				return ModelAdapter.getName(obj) + ": Derived Base Attribute";
			else
				return "UNKNOWN";
		}
	}

	public static final class queryDerivedBaseAttribute_c
			implements
				ClassQueryInterface_c {
		private final static String type = "com.mentor.nucleus.bp.core.DerivedBaseAttribute_c"; //$NON-NLS-1$
		private String modelRootID = null;
		private String componentPath;
		private UUID Attr_id = IdAssigner.NULL_UUID;
		private UUID Obj_id = IdAssigner.NULL_UUID;
		public queryDerivedBaseAttribute_c(DerivedBaseAttribute_c inst) {
			modelRootID = inst.getModelRoot().getId();
			componentPath = inst.getContent();
			Attr_id = inst.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(Attr_id)) {
				Attr_id = inst.getAttr_idCachedValue();
			}
			Obj_id = inst.getObj_id();
			if (IdAssigner.NULL_UUID.equals(Obj_id)) {
				Obj_id = inst.getObj_idCachedValue();
			}
		}
		public queryDerivedBaseAttribute_c(ModelElementID set) {
			if (set.getType().equals(type)) {
				modelRootID = set.getModelRootID();
				Attr_id = UUID.fromString(set.getId(0));
				Obj_id = UUID.fromString(set.getId(1));
			} else {
				throw new IllegalArgumentException("Mis type argument"); //$NON-NLS-1$
			}
		}
		public ModelElementID createModelElementID() {
			ModelElementID id = new ModelElementID(modelRootID, type,
					componentPath);
			id.add(String.valueOf(Attr_id));
			id.add(String.valueOf(Obj_id));
			return id;
		}
		public boolean evaluate(Object inst) {
			DerivedBaseAttribute_c candidate = (DerivedBaseAttribute_c) inst;
			return candidate.getAttr_id().equals(Attr_id)
					&& candidate.getObj_id().equals(Obj_id);
		}
	}
}
