//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       connector_move.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.ui.canvas.test.movement;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class ConnectorMoveTests_0 extends ConnectorMoveTests {

	protected String getResultName() {
		return super.getResultName();
	}

	public ConnectorMoveTests_0(String arg0) {
		super("ConnectorMoveTests_0", arg0);
	}

	protected void setUp() throws Exception {
		super.setUp();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C1D3E1F2).
	 * 
	 */
	public void testA1B1_C1D3E1F2() {
		test_id = getTestId("A1B1", "C1D3E1F2", "1");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C1D3E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C1D3E2F2).
	 * 
	 */
	public void testA1B1_C1D3E2F2() {
		test_id = getTestId("A1B1", "C1D3E2F2", "2");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C1D3E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C2D1E1F2).
	 * 
	 */
	public void testA1B1_C2D1E1F2() {
		test_id = getTestId("A1B1", "C2D1E1F2", "3");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C2D1E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C2D1E2F2).
	 * 
	 */
	public void testA1B1_C2D1E2F2() {
		test_id = getTestId("A1B1", "C2D1E2F2", "4");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C2D1E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C2D2E1F2).
	 * 
	 */
	public void testA1B1_C2D2E1F2() {
		test_id = getTestId("A1B1", "C2D2E1F2", "5");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C2D2E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C2D2E2F2).
	 * 
	 */
	public void testA1B1_C2D2E2F2() {
		test_id = getTestId("A1B1", "C2D2E2F2", "6");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C2D2E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C3D1E1F2).
	 * 
	 */
	public void testA1B1_C3D1E1F2() {
		test_id = getTestId("A1B1", "C3D1E1F2", "7");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C3D1E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The target connection attached was moved.",
				checkResult_targetConnectionEndNotMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C3D1E2F2).
	 * 
	 */
	public void testA1B1_C3D1E2F2() {
		test_id = getTestId("A1B1", "C3D1E2F2", "8");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C3D1E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C3D2E1F2).
	 * 
	 */
	public void testA1B1_C3D2E1F2() {
		test_id = getTestId("A1B1", "C3D2E1F2", "9");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C3D2E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C3D2E2F2).
	 * 
	 */
	public void testA1B1_C3D2E2F2() {
		test_id = getTestId("A1B1", "C3D2E2F2", "10");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C3D2E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C3D3E1F2).
	 * 
	 */
	public void testA1B1_C3D3E1F2() {
		test_id = getTestId("A1B1", "C3D3E1F2", "11");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C3D3E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B1) and row (C3D3E2F2).
	 * 
	 */
	public void testA1B1_C3D3E2F2() {
		test_id = getTestId("A1B1", "C3D3E2F2", "12");

		NonRootModelElement src = selectAB("A1B1");

		NonRootModelElement dest = selectCDEF("C3D3E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C1D3E1F3).
	 * 
	 */
	public void testA1B2_C1D3E1F3() {
		test_id = getTestId("A1B2", "C1D3E1F3", "13");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C1D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C1D3E2F3).
	 * 
	 */
	public void testA1B2_C1D3E2F3() {
		test_id = getTestId("A1B2", "C1D3E2F3", "14");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C1D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C2D1E1F3).
	 * 
	 */
	public void testA1B2_C2D1E1F3() {
		test_id = getTestId("A1B2", "C2D1E1F3", "15");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C2D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C2D1E2F3).
	 * 
	 */
	public void testA1B2_C2D1E2F3() {
		test_id = getTestId("A1B2", "C2D1E2F3", "16");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C2D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C2D2E1F3).
	 * 
	 */
	public void testA1B2_C2D2E1F3() {
		test_id = getTestId("A1B2", "C2D2E1F3", "17");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C2D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C2D2E2F3).
	 * 
	 */
	public void testA1B2_C2D2E2F3() {
		test_id = getTestId("A1B2", "C2D2E2F3", "18");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C2D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C3D1E1F3).
	 * 
	 */
	public void testA1B2_C3D1E1F3() {
		test_id = getTestId("A1B2", "C3D1E1F3", "19");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C3D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C3D1E2F3).
	 * 
	 */
	public void testA1B2_C3D1E2F3() {
		test_id = getTestId("A1B2", "C3D1E2F3", "20");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C3D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C3D2E1F3).
	 * 
	 */
	public void testA1B2_C3D2E1F3() {
		test_id = getTestId("A1B2", "C3D2E1F3", "21");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C3D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C3D2E2F3).
	 * 
	 */
	public void testA1B2_C3D2E2F3() {
		test_id = getTestId("A1B2", "C3D2E2F3", "22");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C3D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C3D3E1F3).
	 * 
	 */
	public void testA1B2_C3D3E1F3() {
		test_id = getTestId("A1B2", "C3D3E1F3", "23");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C3D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B2) and row (C3D3E2F3).
	 * 
	 */
	public void testA1B2_C3D3E2F3() {
		test_id = getTestId("A1B2", "C3D3E2F3", "24");

		NonRootModelElement src = selectAB("A1B2");

		NonRootModelElement dest = selectCDEF("C3D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C1D3E1F2).
	 * 
	 */
	public void testA1B3_C1D3E1F2() {
		test_id = getTestId("A1B3", "C1D3E1F2", "25");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C1D3E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C1D3E2F2).
	 * 
	 */
	public void testA1B3_C1D3E2F2() {
		test_id = getTestId("A1B3", "C1D3E2F2", "26");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C1D3E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C2D1E1F2).
	 * 
	 */
	public void testA1B3_C2D1E1F2() {
		test_id = getTestId("A1B3", "C2D1E1F2", "27");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C2D1E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The target connection attached was moved.",
				checkResult_targetConnectionEndNotMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C2D1E2F2).
	 * 
	 */
	public void testA1B3_C2D1E2F2() {
		test_id = getTestId("A1B3", "C2D1E2F2", "28");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C2D1E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C2D2E1F2).
	 * 
	 */
	public void testA1B3_C2D2E1F2() {
		test_id = getTestId("A1B3", "C2D2E1F2", "29");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C2D2E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C2D2E2F2).
	 * 
	 */
	public void testA1B3_C2D2E2F2() {
		test_id = getTestId("A1B3", "C2D2E2F2", "30");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C2D2E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C3D1E1F2).
	 * 
	 */
	public void testA1B3_C3D1E1F2() {
		test_id = getTestId("A1B3", "C3D1E1F2", "31");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C3D1E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The target connection attached was moved.",
				checkResult_targetConnectionEndNotMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C3D1E2F2).
	 * 
	 */
	public void testA1B3_C3D1E2F2() {
		test_id = getTestId("A1B3", "C3D1E2F2", "32");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C3D1E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C3D2E1F2).
	 * 
	 */
	public void testA1B3_C3D2E1F2() {
		test_id = getTestId("A1B3", "C3D2E1F2", "33");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C3D2E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C3D2E2F2).
	 * 
	 */
	public void testA1B3_C3D2E2F2() {
		test_id = getTestId("A1B3", "C3D2E2F2", "34");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C3D2E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C3D3E1F2).
	 * 
	 */
	public void testA1B3_C3D3E1F2() {
		test_id = getTestId("A1B3", "C3D3E1F2", "35");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C3D3E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("The target connection attached was moved.",
				checkResult_targetConnectionEndNotMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A1B3) and row (C3D3E2F2).
	 * 
	 */
	public void testA1B3_C3D3E2F2() {
		test_id = getTestId("A1B3", "C3D3E2F2", "36");

		NonRootModelElement src = selectAB("A1B3");

		NonRootModelElement dest = selectCDEF("C3D3E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C1D3E1F3).
	 * 
	 */
	public void testA2B1_C1D3E1F3() {
		test_id = getTestId("A2B1", "C1D3E1F3", "37");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C1D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C1D3E2F3).
	 * 
	 */
	public void testA2B1_C1D3E2F3() {
		test_id = getTestId("A2B1", "C1D3E2F3", "38");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C1D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C2D1E1F3).
	 * 
	 */
	public void testA2B1_C2D1E1F3() {
		test_id = getTestId("A2B1", "C2D1E1F3", "39");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C2D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C2D1E2F3).
	 * 
	 */
	public void testA2B1_C2D1E2F3() {
		test_id = getTestId("A2B1", "C2D1E2F3", "40");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C2D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C2D2E1F3).
	 * 
	 */
	public void testA2B1_C2D2E1F3() {
		test_id = getTestId("A2B1", "C2D2E1F3", "41");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C2D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C2D2E2F3).
	 * 
	 */
	public void testA2B1_C2D2E2F3() {
		test_id = getTestId("A2B1", "C2D2E2F3", "42");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C2D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C3D1E1F3).
	 * 
	 */
	public void testA2B1_C3D1E1F3() {
		test_id = getTestId("A2B1", "C3D1E1F3", "43");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C3D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C3D1E2F3).
	 * 
	 */
	public void testA2B1_C3D1E2F3() {
		test_id = getTestId("A2B1", "C3D1E2F3", "44");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C3D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C3D2E1F3).
	 * 
	 */
	public void testA2B1_C3D2E1F3() {
		test_id = getTestId("A2B1", "C3D2E1F3", "45");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C3D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C3D2E2F3).
	 * 
	 */
	public void testA2B1_C3D2E2F3() {
		test_id = getTestId("A2B1", "C3D2E2F3", "46");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C3D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C3D3E1F3).
	 * 
	 */
	public void testA2B1_C3D3E1F3() {
		test_id = getTestId("A2B1", "C3D3E1F3", "47");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C3D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B1) and row (C3D3E2F3).
	 * 
	 */
	public void testA2B1_C3D3E2F3() {
		test_id = getTestId("A2B1", "C3D3E2F3", "48");

		NonRootModelElement src = selectAB("A2B1");

		NonRootModelElement dest = selectCDEF("C3D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C1D3E1F3).
	 * 
	 */
	public void testA2B2_C1D3E1F3() {
		test_id = getTestId("A2B2", "C1D3E1F3", "49");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C1D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C1D3E2F3).
	 * 
	 */
	public void testA2B2_C1D3E2F3() {
		test_id = getTestId("A2B2", "C1D3E2F3", "50");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C1D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C2D1E1F3).
	 * 
	 */
	public void testA2B2_C2D1E1F3() {
		test_id = getTestId("A2B2", "C2D1E1F3", "51");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C2D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C2D1E2F3).
	 * 
	 */
	public void testA2B2_C2D1E2F3() {
		test_id = getTestId("A2B2", "C2D1E2F3", "52");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C2D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C2D2E1F3).
	 * 
	 */
	public void testA2B2_C2D2E1F3() {
		test_id = getTestId("A2B2", "C2D2E1F3", "53");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C2D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C2D2E2F3).
	 * 
	 */
	public void testA2B2_C2D2E2F3() {
		test_id = getTestId("A2B2", "C2D2E2F3", "54");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C2D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C3D1E1F3).
	 * 
	 */
	public void testA2B2_C3D1E1F3() {
		test_id = getTestId("A2B2", "C3D1E1F3", "55");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C3D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C3D1E2F3).
	 * 
	 */
	public void testA2B2_C3D1E2F3() {
		test_id = getTestId("A2B2", "C3D1E2F3", "56");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C3D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C3D2E1F3).
	 * 
	 */
	public void testA2B2_C3D2E1F3() {
		test_id = getTestId("A2B2", "C3D2E1F3", "57");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C3D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C3D2E2F3).
	 * 
	 */
	public void testA2B2_C3D2E2F3() {
		test_id = getTestId("A2B2", "C3D2E2F3", "58");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C3D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C3D3E1F3).
	 * 
	 */
	public void testA2B2_C3D3E1F3() {
		test_id = getTestId("A2B2", "C3D3E1F3", "59");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C3D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B2) and row (C3D3E2F3).
	 * 
	 */
	public void testA2B2_C3D3E2F3() {
		test_id = getTestId("A2B2", "C3D3E2F3", "60");

		NonRootModelElement src = selectAB("A2B2");

		NonRootModelElement dest = selectCDEF("C3D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C1D3E1F1).
	 * 
	 */
	public void testA2B3_C1D3E1F1() {
		test_id = getTestId("A2B3", "C1D3E1F1", "61");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C1D3E1F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C1D3E2F1).
	 * 
	 */
	public void testA2B3_C1D3E2F1() {
		test_id = getTestId("A2B3", "C1D3E2F1", "62");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C1D3E2F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C1D3E1F2).
	 * 
	 */
	public void testA2B3_C1D3E1F2() {
		test_id = getTestId("A2B3", "C1D3E1F2", "63");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C1D3E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C1D3E2F2).
	 * 
	 */
	public void testA2B3_C1D3E2F2() {
		test_id = getTestId("A2B3", "C1D3E2F2", "64");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C1D3E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D1E1F1).
	 * 
	 */
	public void testA2B3_C2D1E1F1() {
		test_id = getTestId("A2B3", "C2D1E1F1", "65");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D1E1F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D1E2F1).
	 * 
	 */
	public void testA2B3_C2D1E2F1() {
		test_id = getTestId("A2B3", "C2D1E2F1", "66");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D1E2F1");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D2E1F1).
	 * 
	 */
	public void testA2B3_C2D2E1F1() {
		test_id = getTestId("A2B3", "C2D2E1F1", "67");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D2E1F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D2E2F1).
	 * 
	 */
	public void testA2B3_C2D2E2F1() {
		test_id = getTestId("A2B3", "C2D2E2F1", "68");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D2E2F1");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D1E1F2).
	 * 
	 */
	public void testA2B3_C2D1E1F2() {
		test_id = getTestId("A2B3", "C2D1E1F2", "69");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D1E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D1E2F2).
	 * 
	 */
	public void testA2B3_C2D1E2F2() {
		test_id = getTestId("A2B3", "C2D1E2F2", "70");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D1E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D2E1F2).
	 * 
	 */
	public void testA2B3_C2D2E1F2() {
		test_id = getTestId("A2B3", "C2D2E1F2", "71");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D2E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C2D2E2F2).
	 * 
	 */
	public void testA2B3_C2D2E2F2() {
		test_id = getTestId("A2B3", "C2D2E2F2", "72");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C2D2E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D1E1F1).
	 * 
	 */
	public void testA2B3_C3D1E1F1() {
		test_id = getTestId("A2B3", "C3D1E1F1", "73");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D1E1F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The source connection attached was moved.",
				checkResult_sourceConnectionEndNotMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D1E2F1).
	 * 
	 */
	public void testA2B3_C3D1E2F1() {
		test_id = getTestId("A2B3", "C3D1E2F1", "74");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D1E2F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D2E1F1).
	 * 
	 */
	public void testA2B3_C3D2E1F1() {
		test_id = getTestId("A2B3", "C3D2E1F1", "75");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D2E1F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D2E2F1).
	 * 
	 */
	public void testA2B3_C3D2E2F1() {
		test_id = getTestId("A2B3", "C3D2E2F1", "76");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D2E2F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D3E1F1).
	 * 
	 */
	public void testA2B3_C3D3E1F1() {
		test_id = getTestId("A2B3", "C3D3E1F1", "77");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D3E1F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D3E2F1).
	 * 
	 */
	public void testA2B3_C3D3E2F1() {
		test_id = getTestId("A2B3", "C3D3E2F1", "78");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D3E2F1");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Source connection was not moved as expected.",
				checkResult_sourceConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D1E1F2).
	 * 
	 */
	public void testA2B3_C3D1E1F2() {
		test_id = getTestId("A2B3", "C3D1E1F2", "79");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D1E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The target connection attached was moved.",
				checkResult_targetConnectionEndNotMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D1E2F2).
	 * 
	 */
	public void testA2B3_C3D1E2F2() {
		test_id = getTestId("A2B3", "C3D1E2F2", "80");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D1E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D2E1F2).
	 * 
	 */
	public void testA2B3_C3D2E1F2() {
		test_id = getTestId("A2B3", "C3D2E1F2", "81");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D2E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D2E2F2).
	 * 
	 */
	public void testA2B3_C3D2E2F2() {
		test_id = getTestId("A2B3", "C3D2E2F2", "82");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D2E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D3E1F2).
	 * 
	 */
	public void testA2B3_C3D3E1F2() {
		test_id = getTestId("A2B3", "C3D3E1F2", "83");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D3E1F2");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A2B3) and row (C3D3E2F2).
	 * 
	 */
	public void testA2B3_C3D3E2F2() {
		test_id = getTestId("A2B3", "C3D3E2F2", "84");

		NonRootModelElement src = selectAB("A2B3");

		NonRootModelElement dest = selectCDEF("C3D3E2F2");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));
		assertTrue("Target connection was not moved as expected.",
				checkResult_targetConnectionEndMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C1D3E1F3).
	 * 
	 */
	public void testA3B2_C1D3E1F3() {
		test_id = getTestId("A3B2", "C1D3E1F3", "85");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C1D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C1D3E2F3).
	 * 
	 */
	public void testA3B2_C1D3E2F3() {
		test_id = getTestId("A3B2", "C1D3E2F3", "86");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C1D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C2D1E1F3).
	 * 
	 */
	public void testA3B2_C2D1E1F3() {
		test_id = getTestId("A3B2", "C2D1E1F3", "87");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C2D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C2D1E2F3).
	 * 
	 */
	public void testA3B2_C2D1E2F3() {
		test_id = getTestId("A3B2", "C2D1E2F3", "88");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C2D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C2D2E1F3).
	 * 
	 */
	public void testA3B2_C2D2E1F3() {
		test_id = getTestId("A3B2", "C2D2E1F3", "89");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C2D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C2D2E2F3).
	 * 
	 */
	public void testA3B2_C2D2E2F3() {
		test_id = getTestId("A3B2", "C2D2E2F3", "90");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C2D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C3D1E1F3).
	 * 
	 */
	public void testA3B2_C3D1E1F3() {
		test_id = getTestId("A3B2", "C3D1E1F3", "91");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C3D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C3D1E2F3).
	 * 
	 */
	public void testA3B2_C3D1E2F3() {
		test_id = getTestId("A3B2", "C3D1E2F3", "92");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C3D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C3D2E1F3).
	 * 
	 */
	public void testA3B2_C3D2E1F3() {
		test_id = getTestId("A3B2", "C3D2E1F3", "93");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C3D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C3D2E2F3).
	 * 
	 */
	public void testA3B2_C3D2E2F3() {
		test_id = getTestId("A3B2", "C3D2E2F3", "94");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C3D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C3D3E1F3).
	 * 
	 */
	public void testA3B2_C3D3E1F3() {
		test_id = getTestId("A3B2", "C3D3E1F3", "95");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C3D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The first bendpoint was not moved as expected.",
				checkResult_firstBendpointMoved(src, dest));
		assertTrue("The second bendpoint was not moved as expected.",
				checkResult_secondBendpointMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B2) and row (C3D3E2F3).
	 * 
	 */
	public void testA3B2_C3D3E2F3() {
		test_id = getTestId("A3B2", "C3D3E2F3", "96");

		NonRootModelElement src = selectAB("A3B2");

		NonRootModelElement dest = selectCDEF("C3D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C1D3E1F3).
	 * 
	 */
	public void testA3B3_C1D3E1F3() {
		test_id = getTestId("A3B3", "C1D3E1F3", "97");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C1D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C1D3E2F3).
	 * 
	 */
	public void testA3B3_C1D3E2F3() {
		test_id = getTestId("A3B3", "C1D3E2F3", "98");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C1D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("The start anchor was not moved as expected.",
				checkResult_startAnchorMoved(src, dest));
		assertTrue("The end anchor was not moved as expected.",
				checkResult_endAnchorMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C2D1E1F3).
	 * 
	 */
	public void testA3B3_C2D1E1F3() {
		test_id = getTestId("A3B3", "C2D1E1F3", "99");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C2D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C2D1E2F3).
	 * 
	 */
	public void testA3B3_C2D1E2F3() {
		test_id = getTestId("A3B3", "C2D1E2F3", "100");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C2D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C2D2E1F3).
	 * 
	 */
	public void testA3B3_C2D2E1F3() {
		test_id = getTestId("A3B3", "C2D2E1F3", "101");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C2D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C2D2E2F3).
	 * 
	 */
	public void testA3B3_C2D2E2F3() {
		test_id = getTestId("A3B3", "C2D2E2F3", "102");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C2D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C3D1E1F3).
	 * 
	 */
	public void testA3B3_C3D1E1F3() {
		test_id = getTestId("A3B3", "C3D1E1F3", "103");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C3D1E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C3D1E2F3).
	 * 
	 */
	public void testA3B3_C3D1E2F3() {
		test_id = getTestId("A3B3", "C3D1E2F3", "104");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C3D1E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C3D2E1F3).
	 * 
	 */
	public void testA3B3_C3D2E1F3() {
		test_id = getTestId("A3B3", "C3D2E1F3", "105");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C3D2E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C3D2E2F3).
	 * 
	 */
	public void testA3B3_C3D2E2F3() {
		test_id = getTestId("A3B3", "C3D2E2F3", "106");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C3D2E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C3D3E1F3).
	 * 
	 */
	public void testA3B3_C3D3E1F3() {
		test_id = getTestId("A3B3", "C3D3E1F3", "107");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C3D3E1F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (A3B3) and row (C3D3E2F3).
	 * 
	 */
	public void testA3B3_C3D3E2F3() {
		test_id = getTestId("A3B3", "C3D3E2F3", "108");

		NonRootModelElement src = selectAB("A3B3");

		NonRootModelElement dest = selectCDEF("C3D3E2F3");

		AB_CDEF_Action(src, dest);
		assertTrue("All connection points were not moved as expected.",
				checkResult_allPointsMoved(src, dest));
		assertTrue(
				"The other connection in the selection was not moved as expected.",
				checkResult_otherSelectedConnectorMoved(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

}
