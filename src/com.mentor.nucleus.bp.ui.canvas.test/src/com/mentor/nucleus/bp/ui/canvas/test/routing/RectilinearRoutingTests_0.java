//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       rectilinear_routing.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.ui.canvas.test.routing;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class RectilinearRoutingTests_0 extends RectilinearRoutingTests {

	protected String getResultName() {
		return super.getResultName();
	}

	public RectilinearRoutingTests_0(String arg0) {
		super("RectilinearRoutingTests_0", arg0);
	}

	protected void setUp() throws Exception {
		super.setUp();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	/**
	 * Perform the test for the given matrix column (C1D1) and row (A1B1).
	 * 
	 */
	public void testC1D1_A1B1() {
		test_id = getTestId("C1D1", "A1B1", "1");

		NonRootModelElement src = selectCD("C1D1");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C1D1) and row (A2B1).
	 * 
	 */
	public void testC1D1_A2B1() {
		test_id = getTestId("C1D1", "A2B1", "2");

		NonRootModelElement src = selectCD("C1D1");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C1D1) and row (A3B1).
	 * 
	 */
	public void testC1D1_A3B1() {
		test_id = getTestId("C1D1", "A3B1", "3");

		NonRootModelElement src = selectCD("C1D1");

		NonRootModelElement dest = selectAB("A3B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C1D1) and row (A4B1).
	 * 
	 */
	public void testC1D1_A4B1() {
		test_id = getTestId("C1D1", "A4B1", "4");

		NonRootModelElement src = selectCD("C1D1");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C1D1) and row (A5B1).
	 * 
	 */
	public void testC1D1_A5B1() {
		test_id = getTestId("C1D1", "A5B1", "5");

		NonRootModelElement src = selectCD("C1D1");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C1D1) and row (A6B1).
	 * 
	 */
	public void testC1D1_A6B1() {
		test_id = getTestId("C1D1", "A6B1", "6");

		NonRootModelElement src = selectCD("C1D1");

		NonRootModelElement dest = selectAB("A6B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A1B1).
	 * 
	 */
	public void testC2D1_A1B1() {
		test_id = getTestId("C2D1", "A1B1", "7");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A1B2).
	 * 
	 */
	public void testC2D1_A1B2() {
		test_id = getTestId("C2D1", "A1B2", "8");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A2B1).
	 * 
	 */
	public void testC2D1_A2B1() {
		test_id = getTestId("C2D1", "A2B1", "9");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A2B2).
	 * 
	 */
	public void testC2D1_A2B2() {
		test_id = getTestId("C2D1", "A2B2", "10");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A3B1).
	 * 
	 */
	public void testC2D1_A3B1() {
		test_id = getTestId("C2D1", "A3B1", "11");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A3B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A3B2).
	 * 
	 */
	public void testC2D1_A3B2() {
		test_id = getTestId("C2D1", "A3B2", "12");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A3B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A4B1).
	 * 
	 */
	public void testC2D1_A4B1() {
		test_id = getTestId("C2D1", "A4B1", "13");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A4B2).
	 * 
	 */
	public void testC2D1_A4B2() {
		test_id = getTestId("C2D1", "A4B2", "14");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A5B1).
	 * 
	 */
	public void testC2D1_A5B1() {
		test_id = getTestId("C2D1", "A5B1", "15");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A5B2).
	 * 
	 */
	public void testC2D1_A5B2() {
		test_id = getTestId("C2D1", "A5B2", "16");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A6B1).
	 * 
	 */
	public void testC2D1_A6B1() {
		test_id = getTestId("C2D1", "A6B1", "17");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A6B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D1) and row (A6B2).
	 * 
	 */
	public void testC2D1_A6B2() {
		test_id = getTestId("C2D1", "A6B2", "18");

		NonRootModelElement src = selectCD("C2D1");

		NonRootModelElement dest = selectAB("A6B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A1B1).
	 * 
	 */
	public void testC2D2_A1B1() {
		test_id = getTestId("C2D2", "A1B1", "19");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A1B2).
	 * 
	 */
	public void testC2D2_A1B2() {
		test_id = getTestId("C2D2", "A1B2", "20");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A2B1).
	 * 
	 */
	public void testC2D2_A2B1() {
		test_id = getTestId("C2D2", "A2B1", "21");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A2B2).
	 * 
	 */
	public void testC2D2_A2B2() {
		test_id = getTestId("C2D2", "A2B2", "22");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A4B1).
	 * 
	 */
	public void testC2D2_A4B1() {
		test_id = getTestId("C2D2", "A4B1", "23");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A4B2).
	 * 
	 */
	public void testC2D2_A4B2() {
		test_id = getTestId("C2D2", "A4B2", "24");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A5B1).
	 * 
	 */
	public void testC2D2_A5B1() {
		test_id = getTestId("C2D2", "A5B1", "25");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D2) and row (A5B2).
	 * 
	 */
	public void testC2D2_A5B2() {
		test_id = getTestId("C2D2", "A5B2", "26");

		NonRootModelElement src = selectCD("C2D2");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A1B1).
	 * 
	 */
	public void testC2D3_A1B1() {
		test_id = getTestId("C2D3", "A1B1", "27");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A1B2).
	 * 
	 */
	public void testC2D3_A1B2() {
		test_id = getTestId("C2D3", "A1B2", "28");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A2B1).
	 * 
	 */
	public void testC2D3_A2B1() {
		test_id = getTestId("C2D3", "A2B1", "29");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A2B2).
	 * 
	 */
	public void testC2D3_A2B2() {
		test_id = getTestId("C2D3", "A2B2", "30");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A4B1).
	 * 
	 */
	public void testC2D3_A4B1() {
		test_id = getTestId("C2D3", "A4B1", "31");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A4B2).
	 * 
	 */
	public void testC2D3_A4B2() {
		test_id = getTestId("C2D3", "A4B2", "32");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A5B1).
	 * 
	 */
	public void testC2D3_A5B1() {
		test_id = getTestId("C2D3", "A5B1", "33");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D3) and row (A5B2).
	 * 
	 */
	public void testC2D3_A5B2() {
		test_id = getTestId("C2D3", "A5B2", "34");

		NonRootModelElement src = selectCD("C2D3");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A1B1).
	 * 
	 */
	public void testC2D4_A1B1() {
		test_id = getTestId("C2D4", "A1B1", "35");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A1B2).
	 * 
	 */
	public void testC2D4_A1B2() {
		test_id = getTestId("C2D4", "A1B2", "36");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A2B1).
	 * 
	 */
	public void testC2D4_A2B1() {
		test_id = getTestId("C2D4", "A2B1", "37");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A2B2).
	 * 
	 */
	public void testC2D4_A2B2() {
		test_id = getTestId("C2D4", "A2B2", "38");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A4B1).
	 * 
	 */
	public void testC2D4_A4B1() {
		test_id = getTestId("C2D4", "A4B1", "39");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A4B2).
	 * 
	 */
	public void testC2D4_A4B2() {
		test_id = getTestId("C2D4", "A4B2", "40");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A5B1).
	 * 
	 */
	public void testC2D4_A5B1() {
		test_id = getTestId("C2D4", "A5B1", "41");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D4) and row (A5B2).
	 * 
	 */
	public void testC2D4_A5B2() {
		test_id = getTestId("C2D4", "A5B2", "42");

		NonRootModelElement src = selectCD("C2D4");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A1B1).
	 * 
	 */
	public void testC2D5_A1B1() {
		test_id = getTestId("C2D5", "A1B1", "43");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A1B2).
	 * 
	 */
	public void testC2D5_A1B2() {
		test_id = getTestId("C2D5", "A1B2", "44");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A2B1).
	 * 
	 */
	public void testC2D5_A2B1() {
		test_id = getTestId("C2D5", "A2B1", "45");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A2B2).
	 * 
	 */
	public void testC2D5_A2B2() {
		test_id = getTestId("C2D5", "A2B2", "46");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A4B1).
	 * 
	 */
	public void testC2D5_A4B1() {
		test_id = getTestId("C2D5", "A4B1", "47");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A4B2).
	 * 
	 */
	public void testC2D5_A4B2() {
		test_id = getTestId("C2D5", "A4B2", "48");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A5B1).
	 * 
	 */
	public void testC2D5_A5B1() {
		test_id = getTestId("C2D5", "A5B1", "49");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C2D5) and row (A5B2).
	 * 
	 */
	public void testC2D5_A5B2() {
		test_id = getTestId("C2D5", "A5B2", "50");

		NonRootModelElement src = selectCD("C2D5");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A1B1).
	 * 
	 */
	public void testC3D1_A1B1() {
		test_id = getTestId("C3D1", "A1B1", "51");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A1B2).
	 * 
	 */
	public void testC3D1_A1B2() {
		test_id = getTestId("C3D1", "A1B2", "52");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A2B1).
	 * 
	 */
	public void testC3D1_A2B1() {
		test_id = getTestId("C3D1", "A2B1", "53");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A2B2).
	 * 
	 */
	public void testC3D1_A2B2() {
		test_id = getTestId("C3D1", "A2B2", "54");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A4B1).
	 * 
	 */
	public void testC3D1_A4B1() {
		test_id = getTestId("C3D1", "A4B1", "55");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A4B2).
	 * 
	 */
	public void testC3D1_A4B2() {
		test_id = getTestId("C3D1", "A4B2", "56");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A5B1).
	 * 
	 */
	public void testC3D1_A5B1() {
		test_id = getTestId("C3D1", "A5B1", "57");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D1) and row (A5B2).
	 * 
	 */
	public void testC3D1_A5B2() {
		test_id = getTestId("C3D1", "A5B2", "58");

		NonRootModelElement src = selectCD("C3D1");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue("The segment did not remain attached on the original side.",
				checkResult_segmentSameSide(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A1B1).
	 * 
	 */
	public void testC3D2_A1B1() {
		test_id = getTestId("C3D2", "A1B1", "59");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A1B2).
	 * 
	 */
	public void testC3D2_A1B2() {
		test_id = getTestId("C3D2", "A1B2", "60");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A2B1).
	 * 
	 */
	public void testC3D2_A2B1() {
		test_id = getTestId("C3D2", "A2B1", "61");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A2B2).
	 * 
	 */
	public void testC3D2_A2B2() {
		test_id = getTestId("C3D2", "A2B2", "62");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A4B1).
	 * 
	 */
	public void testC3D2_A4B1() {
		test_id = getTestId("C3D2", "A4B1", "63");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A4B2).
	 * 
	 */
	public void testC3D2_A4B2() {
		test_id = getTestId("C3D2", "A4B2", "64");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A5B1).
	 * 
	 */
	public void testC3D2_A5B1() {
		test_id = getTestId("C3D2", "A5B1", "65");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D2) and row (A5B2).
	 * 
	 */
	public void testC3D2_A5B2() {
		test_id = getTestId("C3D2", "A5B2", "66");

		NonRootModelElement src = selectCD("C3D2");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the north side of attached element.",
				checkResult_segmentNewSideNorth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A1B1).
	 * 
	 */
	public void testC3D3_A1B1() {
		test_id = getTestId("C3D3", "A1B1", "67");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A1B2).
	 * 
	 */
	public void testC3D3_A1B2() {
		test_id = getTestId("C3D3", "A1B2", "68");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A2B1).
	 * 
	 */
	public void testC3D3_A2B1() {
		test_id = getTestId("C3D3", "A2B1", "69");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A2B2).
	 * 
	 */
	public void testC3D3_A2B2() {
		test_id = getTestId("C3D3", "A2B2", "70");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A4B1).
	 * 
	 */
	public void testC3D3_A4B1() {
		test_id = getTestId("C3D3", "A4B1", "71");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A4B2).
	 * 
	 */
	public void testC3D3_A4B2() {
		test_id = getTestId("C3D3", "A4B2", "72");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A5B1).
	 * 
	 */
	public void testC3D3_A5B1() {
		test_id = getTestId("C3D3", "A5B1", "73");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D3) and row (A5B2).
	 * 
	 */
	public void testC3D3_A5B2() {
		test_id = getTestId("C3D3", "A5B2", "74");

		NonRootModelElement src = selectCD("C3D3");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the south side of attached element.",
				checkResult_segmentNewSideSouth(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A1B1).
	 * 
	 */
	public void testC3D4_A1B1() {
		test_id = getTestId("C3D4", "A1B1", "75");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A1B2).
	 * 
	 */
	public void testC3D4_A1B2() {
		test_id = getTestId("C3D4", "A1B2", "76");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A2B1).
	 * 
	 */
	public void testC3D4_A2B1() {
		test_id = getTestId("C3D4", "A2B1", "77");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A2B2).
	 * 
	 */
	public void testC3D4_A2B2() {
		test_id = getTestId("C3D4", "A2B2", "78");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A4B1).
	 * 
	 */
	public void testC3D4_A4B1() {
		test_id = getTestId("C3D4", "A4B1", "79");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A4B2).
	 * 
	 */
	public void testC3D4_A4B2() {
		test_id = getTestId("C3D4", "A4B2", "80");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A5B1).
	 * 
	 */
	public void testC3D4_A5B1() {
		test_id = getTestId("C3D4", "A5B1", "81");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D4) and row (A5B2).
	 * 
	 */
	public void testC3D4_A5B2() {
		test_id = getTestId("C3D4", "A5B2", "82");

		NonRootModelElement src = selectCD("C3D4");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the east side of attached element.",
				checkResult_segmentNewSideEast(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A1B1).
	 * 
	 */
	public void testC3D5_A1B1() {
		test_id = getTestId("C3D5", "A1B1", "83");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A1B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A1B2).
	 * 
	 */
	public void testC3D5_A1B2() {
		test_id = getTestId("C3D5", "A1B2", "84");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A1B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A2B1).
	 * 
	 */
	public void testC3D5_A2B1() {
		test_id = getTestId("C3D5", "A2B1", "85");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A2B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A2B2).
	 * 
	 */
	public void testC3D5_A2B2() {
		test_id = getTestId("C3D5", "A2B2", "86");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A2B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A4B1).
	 * 
	 */
	public void testC3D5_A4B1() {
		test_id = getTestId("C3D5", "A4B1", "87");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A4B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A4B2).
	 * 
	 */
	public void testC3D5_A4B2() {
		test_id = getTestId("C3D5", "A4B2", "88");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A4B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A5B1).
	 * 
	 */
	public void testC3D5_A5B1() {
		test_id = getTestId("C3D5", "A5B1", "89");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A5B1");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

	/**
	 * Perform the test for the given matrix column (C3D5) and row (A5B2).
	 * 
	 */
	public void testC3D5_A5B2() {
		test_id = getTestId("C3D5", "A5B2", "90");

		NonRootModelElement src = selectCD("C3D5");

		NonRootModelElement dest = selectAB("A5B2");

		CD_AB_Action(src, dest);
		assertTrue(
				"The line was not routed such that all segments are orthogonal.",
				checkResult_lineOrthogonal(src, dest));
		assertTrue(
				"The segment did not move to the west side of attached element.",
				checkResult_segmentNewSideWest(src, dest));

		GraphicalEditor editor = getActiveEditor();
		if (editor != null && useDrawResults) {
			validateOrGenerateResults(editor, generateResults);
		}
	}

}
