package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/InstanceStateMachinesAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class InstanceStateMachine_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
/**
 * This file adapts the meta-model entity; 'InstanceStateMachine_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class InstanceStateMachinesAdapter implements ITreeContentProvider {
	static InstanceStateMachinesAdapter instancestatemachinesadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static InstanceStateMachinesAdapter getInstance() {
		if (instancestatemachinesadapter == null) {
			instancestatemachinesadapter = new InstanceStateMachinesAdapter();
		}
		return instancestatemachinesadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		ModelClass_c result11 = ModelClass_c
				.getOneO_OBJOnR518((InstanceStateMachine_c) arg);
		if (result11 != null) {
			return result11;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		StateMachineState_c[] states_517_1 = StateMachineState_c
				.getManySM_STATEsOnR501(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg));

		ModelContentProvider.sort(states_517_1);
		resultSize += states_517_1.length;
		StateMachineEvent_c[] events_517_2 = StateMachineEvent_c
				.getManySM_EVTsOnR525(SemEvent_c.getManySM_SEVTsOnR526(LocalEvent_c.getManySM_LEVTsOnR526(SemEvent_c.getManySM_SEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg))))));

		ModelContentProvider.sort(events_517_2);
		resultSize += events_517_2.length;
		StateMachineEvent_c[] deliveredevents_517_3 = StateMachineEvent_c
				.getManySM_EVTsOnR525(PolymorphicEvent_c.getManySM_PEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg))));

		ModelContentProvider.sort(deliveredevents_517_3);
		resultSize += deliveredevents_517_3.length;
		NonLocalEvent_c[] inheritedevents_517_4 = NonLocalEvent_c
				.getManySM_NLEVTsOnR526(SemEvent_c.getManySM_SEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg))));

		ModelContentProvider.sort(inheritedevents_517_4);
		resultSize += inheritedevents_517_4.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < states_517_1.length; i++) {
			result[count] = states_517_1[i];
			count++;
		}
		for (int i = 0; i < events_517_2.length; i++) {
			result[count] = events_517_2[i];
			count++;
		}
		for (int i = 0; i < deliveredevents_517_3.length; i++) {
			result[count] = deliveredevents_517_3[i];
			count++;
		}
		for (int i = 0; i < inheritedevents_517_4.length; i++) {
			result[count] = inheritedevents_517_4[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		StateMachineState_c[] states_517_1 = StateMachineState_c
				.getManySM_STATEsOnR501(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg));

		if (states_517_1.length > 0)
			return true;
		StateMachineEvent_c[] events_517_2 = StateMachineEvent_c
				.getManySM_EVTsOnR525(SemEvent_c.getManySM_SEVTsOnR526(LocalEvent_c.getManySM_LEVTsOnR526(SemEvent_c.getManySM_SEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg))))));

		if (events_517_2.length > 0)
			return true;
		StateMachineEvent_c[] deliveredevents_517_3 = StateMachineEvent_c
				.getManySM_EVTsOnR525(PolymorphicEvent_c.getManySM_PEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg))));

		if (deliveredevents_517_3.length > 0)
			return true;
		NonLocalEvent_c[] inheritedevents_517_4 = NonLocalEvent_c
				.getManySM_NLEVTsOnR526(SemEvent_c.getManySM_SEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(StateMachine_c
						.getManySM_SMsOnR517((InstanceStateMachine_c) arg))));

		if (inheritedevents_517_4.length > 0)
			return true;
		return false;
	}
}
