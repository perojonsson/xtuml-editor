package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/PortsAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class Port_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
/**
 * This file adapts the meta-model entity; 'Port_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class PortsAdapter implements ITreeContentProvider {
	static PortsAdapter portsadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static PortsAdapter getInstance() {
		if (portsadapter == null) {
			portsadapter = new PortsAdapter();
		}
		return portsadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		Component_c result196 = Component_c.getOneC_COnR4010((Port_c) arg);
		if (result196 != null) {
			return result196;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		Provision_c[] providedinterfaces_4016_1 = Provision_c
				.getManyC_PsOnR4009(InterfaceReference_c
						.getManyC_IRsOnR4016((Port_c) arg));

		ModelContentProvider.sort(providedinterfaces_4016_1);
		resultSize += providedinterfaces_4016_1.length;
		Requirement_c[] requiredinterfaces_4016_2 = Requirement_c
				.getManyC_RsOnR4009(InterfaceReference_c
						.getManyC_IRsOnR4016((Port_c) arg));

		ModelContentProvider.sort(requiredinterfaces_4016_2);
		resultSize += requiredinterfaces_4016_2.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < providedinterfaces_4016_1.length; i++) {
			result[count] = providedinterfaces_4016_1[i];
			count++;
		}
		for (int i = 0; i < requiredinterfaces_4016_2.length; i++) {
			result[count] = requiredinterfaces_4016_2[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		Provision_c[] providedinterfaces_4016_1 = Provision_c
				.getManyC_PsOnR4009(InterfaceReference_c
						.getManyC_IRsOnR4016((Port_c) arg));

		if (providedinterfaces_4016_1.length > 0)
			return true;
		Requirement_c[] requiredinterfaces_4016_2 = Requirement_c
				.getManyC_RsOnR4009(InterfaceReference_c
						.getManyC_IRsOnR4016((Port_c) arg));

		if (requiredinterfaces_4016_2.length > 0)
			return true;
		return false;
	}
}
