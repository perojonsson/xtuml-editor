package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/SubsystemsAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class Subsystem_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
/**
 * This file adapts the meta-model entity; 'Subsystem_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class SubsystemsAdapter implements ITreeContentProvider {
	static SubsystemsAdapter subsystemsadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static SubsystemsAdapter getInstance() {
		if (subsystemsadapter == null) {
			subsystemsadapter = new SubsystemsAdapter();
		}
		return subsystemsadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		Component_c result2 = Component_c.getOneC_COnR4204(DomainAsComponent_c
				.getOneCN_DCOnR4204(Domain_c
						.getOneS_DOMOnR43(SubsystemInDomain_c
								.getOneS_SIDOnR43((Subsystem_c) arg))));
		if (result2 != null) {
			return result2;
		}
		Domain_c result3 = Domain_c.getOneS_DOMOnR43((Subsystem_c) arg);
		if (result3 != null) {
			return result3;
		}
		Subsystem_c result4 = Subsystem_c
				.getOneS_SSOnR41(SubsystemInSubsystem_c
						.getOneS_SISOnR42((Subsystem_c) arg));
		if (result4 != null) {
			return result4;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		Subsystem_c[] subsystems_41_1 = Subsystem_c
				.getManyS_SSsOnR42(SubsystemInSubsystem_c
						.getManyS_SISsOnR41((Subsystem_c) arg));

		ModelContentProvider.sort(subsystems_41_1);
		resultSize += subsystems_41_1.length;
		Sequence_c[] sequences_914_2 = Sequence_c
				.getManySQ_SsOnR914((Subsystem_c) arg);

		ModelContentProvider.sort(sequences_914_2);
		resultSize += sequences_914_2.length;
		ModelClass_c[] classes_2_3 = ModelClass_c
				.getManyO_OBJsOnR2((Subsystem_c) arg);

		ModelContentProvider.sort(classes_2_3);
		resultSize += classes_2_3.length;
		Activity_c[] activities_1108_4 = Activity_c
				.getManyA_AsOnR1108((Subsystem_c) arg);

		ModelContentProvider.sort(activities_1108_4);
		resultSize += activities_1108_4.length;
		Communication_c[] communications_1131_5 = Communication_c
				.getManyCOMM_COMMsOnR1131((Subsystem_c) arg);

		ModelContentProvider.sort(communications_1131_5);
		resultSize += communications_1131_5.length;
		UseCaseDiagram_c[] usecasediagrams_1202_6 = UseCaseDiagram_c
				.getManyUC_UCCsOnR1202((Subsystem_c) arg);

		ModelContentProvider.sort(usecasediagrams_1202_6);
		resultSize += usecasediagrams_1202_6.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < subsystems_41_1.length; i++) {
			result[count] = subsystems_41_1[i];
			count++;
		}
		for (int i = 0; i < sequences_914_2.length; i++) {
			result[count] = sequences_914_2[i];
			count++;
		}
		for (int i = 0; i < classes_2_3.length; i++) {
			result[count] = classes_2_3[i];
			count++;
		}
		for (int i = 0; i < activities_1108_4.length; i++) {
			result[count] = activities_1108_4[i];
			count++;
		}
		for (int i = 0; i < communications_1131_5.length; i++) {
			result[count] = communications_1131_5[i];
			count++;
		}
		for (int i = 0; i < usecasediagrams_1202_6.length; i++) {
			result[count] = usecasediagrams_1202_6[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		Subsystem_c[] subsystems_41_1 = Subsystem_c
				.getManyS_SSsOnR42(SubsystemInSubsystem_c
						.getManyS_SISsOnR41((Subsystem_c) arg));

		if (subsystems_41_1.length > 0)
			return true;
		Sequence_c[] sequences_914_2 = Sequence_c
				.getManySQ_SsOnR914((Subsystem_c) arg);

		if (sequences_914_2.length > 0)
			return true;
		ModelClass_c[] classes_2_3 = ModelClass_c
				.getManyO_OBJsOnR2((Subsystem_c) arg);

		if (classes_2_3.length > 0)
			return true;
		Activity_c[] activities_1108_4 = Activity_c
				.getManyA_AsOnR1108((Subsystem_c) arg);

		if (activities_1108_4.length > 0)
			return true;
		Communication_c[] communications_1131_5 = Communication_c
				.getManyCOMM_COMMsOnR1131((Subsystem_c) arg);

		if (communications_1131_5.length > 0)
			return true;
		UseCaseDiagram_c[] usecasediagrams_1202_6 = UseCaseDiagram_c
				.getManyUC_UCCsOnR1202((Subsystem_c) arg);

		if (usecasediagrams_1202_6.length > 0)
			return true;
		return false;
	}
}
