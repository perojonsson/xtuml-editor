package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/ProvidedInterfacesAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class Provision_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
/**
 * This file adapts the meta-model entity; 'Provision_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class ProvidedInterfacesAdapter implements ITreeContentProvider {
	static ProvidedInterfacesAdapter providedinterfacesadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static ProvidedInterfacesAdapter getInstance() {
		if (providedinterfacesadapter == null) {
			providedinterfacesadapter = new ProvidedInterfacesAdapter();
		}
		return providedinterfacesadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		Port_c result178 = Port_c.getOneC_POOnR4016(InterfaceReference_c
				.getOneC_IROnR4009((Provision_c) arg));
		if (result178 != null) {
			return result178;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		ProvidedOperation_c[] providedinterfaceoperations_4501_1 = ProvidedOperation_c
				.getManySPR_POsOnR4503(ProvidedExecutableProperty_c
						.getManySPR_PEPsOnR4501((Provision_c) arg));

		ModelContentProvider.sort(providedinterfaceoperations_4501_1);
		resultSize += providedinterfaceoperations_4501_1.length;
		ProvidedSignal_c[] providedinterfacesignals_4501_2 = ProvidedSignal_c
				.getManySPR_PSsOnR4503(ProvidedExecutableProperty_c
						.getManySPR_PEPsOnR4501((Provision_c) arg));

		ModelContentProvider.sort(providedinterfacesignals_4501_2);
		resultSize += providedinterfacesignals_4501_2.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < providedinterfaceoperations_4501_1.length; i++) {
			result[count] = providedinterfaceoperations_4501_1[i];
			count++;
		}
		for (int i = 0; i < providedinterfacesignals_4501_2.length; i++) {
			result[count] = providedinterfacesignals_4501_2[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		ProvidedOperation_c[] providedinterfaceoperations_4501_1 = ProvidedOperation_c
				.getManySPR_POsOnR4503(ProvidedExecutableProperty_c
						.getManySPR_PEPsOnR4501((Provision_c) arg));

		if (providedinterfaceoperations_4501_1.length > 0)
			return true;
		ProvidedSignal_c[] providedinterfacesignals_4501_2 = ProvidedSignal_c
				.getManySPR_PSsOnR4503(ProvidedExecutableProperty_c
						.getManySPR_PEPsOnR4501((Provision_c) arg));

		if (providedinterfacesignals_4501_2.length > 0)
			return true;
		return false;
	}
}
