package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/EventsAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class StateMachineEvent_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
import com.mentor.nucleus.bp.core.sorter.StateMachineEventDataItem_cSorter;
/**
 * This file adapts the meta-model entity; 'StateMachineEvent_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class EventsAdapter implements ITreeContentProvider {
	static EventsAdapter eventsadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static EventsAdapter getInstance() {
		if (eventsadapter == null) {
			eventsadapter = new EventsAdapter();
		}
		return eventsadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		InstanceStateMachine_c result14 = InstanceStateMachine_c
				.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(LocalEvent_c.getOneSM_LEVTOnR526(SemEvent_c
						.getOneSM_SEVTOnR525((StateMachineEvent_c) arg))))));
		if (result14 != null) {
			return result14;
		}
		ClassStateMachine_c result15 = ClassStateMachine_c
				.getOneSM_ASMOnR517(StateMachine_c
						.getOneSM_SMOnR502((StateMachineEvent_c) arg));
		if (result15 != null) {
			return result15;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		SupplementalDataItems_c[] eventdataitems_520_1 = SupplementalDataItems_c
				.getManySM_SDIsOnR522(EventSupplementalData_c
						.getManySM_SUPDTsOnR520((StateMachineEvent_c) arg));

		ModelContentProvider.sort(eventdataitems_520_1);
		resultSize += eventdataitems_520_1.length;
		StateMachineEventDataItem_c[] statemachineeventdataitems_532_2 = StateMachineEventDataItem_c
				.getManySM_EVTDIsOnR532((StateMachineEvent_c) arg);

		resultSize += statemachineeventdataitems_532_2.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < eventdataitems_520_1.length; i++) {
			result[count] = eventdataitems_520_1[i];
			count++;
		}
		StateMachineEventDataItem_cSorter sorterSM_EVTDI = new StateMachineEventDataItem_cSorter();
		sorterSM_EVTDI.sort(statemachineeventdataitems_532_2);
		for (int i = 0; i < statemachineeventdataitems_532_2.length; i++) {
			result[count] = statemachineeventdataitems_532_2[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		SupplementalDataItems_c[] eventdataitems_520_1 = SupplementalDataItems_c
				.getManySM_SDIsOnR522(EventSupplementalData_c
						.getManySM_SUPDTsOnR520((StateMachineEvent_c) arg));

		if (eventdataitems_520_1.length > 0)
			return true;
		StateMachineEventDataItem_c[] statemachineeventdataitems_532_2 = StateMachineEventDataItem_c
				.getManySM_EVTDIsOnR532((StateMachineEvent_c) arg);

		if (statemachineeventdataitems_532_2.length > 0)
			return true;
		return false;
	}
}
