package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/ClassesAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class ModelClass_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
import com.mentor.nucleus.bp.core.sorter.Attribute_cSorter;
import com.mentor.nucleus.bp.core.sorter.Operation_cSorter;
/**
 * This file adapts the meta-model entity; 'ModelClass_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class ClassesAdapter implements ITreeContentProvider {
	static ClassesAdapter classesadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static ClassesAdapter getInstance() {
		if (classesadapter == null) {
			classesadapter = new ClassesAdapter();
		}
		return classesadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		Subsystem_c result5 = Subsystem_c.getOneS_SSOnR2((ModelClass_c) arg);
		if (result5 != null) {
			return result5;
		}
		Package_c result6 = Package_c.getOneEP_PKGOnR8000(PackageableElement_c
				.getOnePE_PEOnR8001((ModelClass_c) arg));
		if (result6 != null) {
			return result6;
		}
		Component_c result7 = Component_c.getOneC_COnR8003(PackageableElement_c
				.getOnePE_PEOnR8001((ModelClass_c) arg));
		if (result7 != null) {
			return result7;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		Attribute_c[] attributes_102_1 = Attribute_c
				.getManyO_ATTRsOnR102((ModelClass_c) arg);

		resultSize += attributes_102_1.length;
		Operation_c[] operations_115_2 = Operation_c
				.getManyO_TFRsOnR115((ModelClass_c) arg);

		resultSize += operations_115_2.length;
		InstanceStateMachine_c[] instancestatemachines_518_3 = InstanceStateMachine_c
				.getManySM_ISMsOnR518((ModelClass_c) arg);

		ModelContentProvider.sort(instancestatemachines_518_3);
		resultSize += instancestatemachines_518_3.length;
		ClassStateMachine_c[] classstatemachines_519_4 = ClassStateMachine_c
				.getManySM_ASMsOnR519((ModelClass_c) arg);

		ModelContentProvider.sort(classstatemachines_519_4);
		resultSize += classstatemachines_519_4.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		Attribute_cSorter sorterO_ATTR = new Attribute_cSorter();
		sorterO_ATTR.sort(attributes_102_1);
		for (int i = 0; i < attributes_102_1.length; i++) {
			result[count] = attributes_102_1[i];
			count++;
		}
		Operation_cSorter sorterO_TFR = new Operation_cSorter();
		sorterO_TFR.sort(operations_115_2);
		for (int i = 0; i < operations_115_2.length; i++) {
			result[count] = operations_115_2[i];
			count++;
		}
		for (int i = 0; i < instancestatemachines_518_3.length; i++) {
			result[count] = instancestatemachines_518_3[i];
			count++;
		}
		for (int i = 0; i < classstatemachines_519_4.length; i++) {
			result[count] = classstatemachines_519_4[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		Attribute_c[] attributes_102_1 = Attribute_c
				.getManyO_ATTRsOnR102((ModelClass_c) arg);

		if (attributes_102_1.length > 0)
			return true;
		Operation_c[] operations_115_2 = Operation_c
				.getManyO_TFRsOnR115((ModelClass_c) arg);

		if (operations_115_2.length > 0)
			return true;
		InstanceStateMachine_c[] instancestatemachines_518_3 = InstanceStateMachine_c
				.getManySM_ISMsOnR518((ModelClass_c) arg);

		if (instancestatemachines_518_3.length > 0)
			return true;
		ClassStateMachine_c[] classstatemachines_519_4 = ClassStateMachine_c
				.getManySM_ASMsOnR519((ModelClass_c) arg);

		if (classstatemachines_519_4.length > 0)
			return true;
		return false;
	}
}
