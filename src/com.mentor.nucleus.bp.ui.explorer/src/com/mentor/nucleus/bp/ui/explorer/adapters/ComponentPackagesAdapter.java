package com.mentor.nucleus.bp.ui.explorer.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/adapters/ComponentPackagesAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_adapters.inc
// Version:      $Revision: 1.31 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class ComponentPackage_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;

import com.mentor.nucleus.bp.ui.explorer.*;
/**
 * This file adapts the meta-model entity; 'ComponentPackage_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Mentor 
 * Graphics MC-Java code generator product.
 * </p>
 */
public class ComponentPackagesAdapter implements ITreeContentProvider {
	static ComponentPackagesAdapter componentpackagesadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static ComponentPackagesAdapter getInstance() {
		if (componentpackagesadapter == null) {
			componentpackagesadapter = new ComponentPackagesAdapter();
		}
		return componentpackagesadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		SystemModel_c result171 = SystemModel_c
				.getOneS_SYSOnR4602((ComponentPackage_c) arg);
		if (result171 != null) {
			return result171;
		}
		ComponentPackage_c result172 = ComponentPackage_c
				.getOneCP_CPOnR4600(ComponentPackageInPackage_c
						.getOneCP_CPINPOnR4601((ComponentPackage_c) arg));
		if (result172 != null) {
			return result172;
		}
		Package_c result173 = Package_c
				.getOneEP_PKGOnR1400(SpecificationPackage_c
						.getOneEP_SPKGOnR1402((ComponentPackage_c) arg));
		if (result173 != null) {
			return result173;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		Sequence_c[] sequences_951_1 = Sequence_c
				.getManySQ_SsOnR951((ComponentPackage_c) arg);

		ModelContentProvider.sort(sequences_951_1);
		resultSize += sequences_951_1.length;
		Communication_c[] communications_1137_2 = Communication_c
				.getManyCOMM_COMMsOnR1137((ComponentPackage_c) arg);

		ModelContentProvider.sort(communications_1137_2);
		resultSize += communications_1137_2.length;
		UseCaseDiagram_c[] usecasediagrams_1212_3 = UseCaseDiagram_c
				.getManyUC_UCCsOnR1212((ComponentPackage_c) arg);

		ModelContentProvider.sort(usecasediagrams_1212_3);
		resultSize += usecasediagrams_1212_3.length;
		Activity_c[] activities_1114_4 = Activity_c
				.getManyA_AsOnR1114((ComponentPackage_c) arg);

		ModelContentProvider.sort(activities_1114_4);
		resultSize += activities_1114_4.length;
		InterfacePackage_c[] interfacepackages_4607_5 = InterfacePackage_c
				.getManyIP_IPsOnR4607((ComponentPackage_c) arg);

		ModelContentProvider.sort(interfacepackages_4607_5);
		resultSize += interfacepackages_4607_5.length;
		ComponentPackage_c[] componentpackages_4600_6 = ComponentPackage_c
				.getManyCP_CPsOnR4601(ComponentPackageInPackage_c
						.getManyCP_CPINPsOnR4600((ComponentPackage_c) arg));

		ModelContentProvider.sort(componentpackages_4600_6);
		resultSize += componentpackages_4600_6.length;
		Component_c[] components_4604_7 = Component_c
				.getManyC_CsOnR4604((ComponentPackage_c) arg);

		ModelContentProvider.sort(components_4604_7);
		resultSize += components_4604_7.length;
		ComponentReference_c[] componentreferences_4605_8 = ComponentReference_c
				.getManyCL_ICsOnR4605((ComponentPackage_c) arg);

		ModelContentProvider.sort(componentreferences_4605_8);
		resultSize += componentreferences_4605_8.length;

		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < sequences_951_1.length; i++) {
			result[count] = sequences_951_1[i];
			count++;
		}
		for (int i = 0; i < communications_1137_2.length; i++) {
			result[count] = communications_1137_2[i];
			count++;
		}
		for (int i = 0; i < usecasediagrams_1212_3.length; i++) {
			result[count] = usecasediagrams_1212_3[i];
			count++;
		}
		for (int i = 0; i < activities_1114_4.length; i++) {
			result[count] = activities_1114_4[i];
			count++;
		}
		for (int i = 0; i < interfacepackages_4607_5.length; i++) {
			result[count] = interfacepackages_4607_5[i];
			count++;
		}
		for (int i = 0; i < componentpackages_4600_6.length; i++) {
			result[count] = componentpackages_4600_6[i];
			count++;
		}
		for (int i = 0; i < components_4604_7.length; i++) {
			result[count] = components_4604_7[i];
			count++;
		}
		for (int i = 0; i < componentreferences_4605_8.length; i++) {
			result[count] = componentreferences_4605_8[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		Sequence_c[] sequences_951_1 = Sequence_c
				.getManySQ_SsOnR951((ComponentPackage_c) arg);

		if (sequences_951_1.length > 0)
			return true;
		Communication_c[] communications_1137_2 = Communication_c
				.getManyCOMM_COMMsOnR1137((ComponentPackage_c) arg);

		if (communications_1137_2.length > 0)
			return true;
		UseCaseDiagram_c[] usecasediagrams_1212_3 = UseCaseDiagram_c
				.getManyUC_UCCsOnR1212((ComponentPackage_c) arg);

		if (usecasediagrams_1212_3.length > 0)
			return true;
		Activity_c[] activities_1114_4 = Activity_c
				.getManyA_AsOnR1114((ComponentPackage_c) arg);

		if (activities_1114_4.length > 0)
			return true;
		InterfacePackage_c[] interfacepackages_4607_5 = InterfacePackage_c
				.getManyIP_IPsOnR4607((ComponentPackage_c) arg);

		if (interfacepackages_4607_5.length > 0)
			return true;
		ComponentPackage_c[] componentpackages_4600_6 = ComponentPackage_c
				.getManyCP_CPsOnR4601(ComponentPackageInPackage_c
						.getManyCP_CPINPsOnR4600((ComponentPackage_c) arg));

		if (componentpackages_4600_6.length > 0)
			return true;
		Component_c[] components_4604_7 = Component_c
				.getManyC_CsOnR4604((ComponentPackage_c) arg);

		if (components_4604_7.length > 0)
			return true;
		ComponentReference_c[] componentreferences_4605_8 = ComponentReference_c
				.getManyCL_ICsOnR4605((ComponentPackage_c) arg);

		if (componentreferences_4605_8.length > 0)
			return true;
		return false;
	}
}
