package com.mentor.nucleus.bp.ui.explorer;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/explorer/ExplorerView.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_explorer_view.inc
// Version:      $Revision: 1.79 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is the main entry point for the Model Explorer View.
// It is responsible for building the presentation to the user and
// for provideing the interface to the Eclipse infrastructure.
//
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.*;
import org.eclipse.jface.action.*;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.*;
import org.eclipse.ui.actions.*;
import org.eclipse.ui.part.ViewPart;
import org.eclipse.ui.views.framelist.*;
import org.eclipse.ui.views.properties.IPropertySheetPage;
import org.eclipse.ui.views.properties.PropertySheetPage;
import org.osgi.framework.Bundle;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.ui.*;
import com.mentor.nucleus.bp.core.util.*;
import com.mentor.nucleus.bp.ui.explorer.ui.actions.ExplorerCopyAction;
import com.mentor.nucleus.bp.ui.explorer.ui.actions.ExplorerCutAction;
import com.mentor.nucleus.bp.ui.explorer.ui.actions.ExplorerPasteAction;
import com.mentor.nucleus.bp.ui.properties.BridgepointPropertySheetPage;
import com.mentor.nucleus.bp.ui.properties.ModelPropertySourceProvider;

/**
 * ExplorerView allows the user to navigate the BridgePoint
 * metamodel. It provides a tree view analogous to that provided
 * by the Java Package Explorer.
 * 
 * @see ViewPart
 */
public class ExplorerView extends ViewPart implements IModelViewerProvider {
	private static final String COLLAPSE = "Collapse All";
	private static final String OPEN = "open";
	private static final String HIDE_STATICS = "Hide Static Members";
	private static final String HIDE_SYSTEM = "Hide System";
	private static final String HIDE_DOMAINS = "Hide Domains";
	private static final String HIDE_SUBSYSTEMS = "Hide Subsystems";
	private static final String HIDE_CLASSES = "Hide Classes";
	private static final String HIDE_ATTRIBUTES = "Hide Attributes";
	private static final String HIDE_OPERATIONS = "Hide Operations";
	private static final String HIDE_OPERATION_PARAMETERS = "Hide Operation Parameters";
	private static final String HIDE_INSTANCE_STATE_MACHINES = "Hide Instance State Machines";
	private static final String HIDE_STATES = "Hide States";
	private static final String HIDE_EVENTS = "Hide Events";
	private static final String HIDE_INHERITED_EVENTS = "Hide Inherited Events";
	private static final String HIDE_DELIVERED_EVENTS = "Hide Delivered Events";
	private static final String HIDE_STATE_MACHINE_EVENT_DATA_ITEMS = "Hide State Machine Event Data Items";
	private static final String HIDE_CLASS_STATE_MACHINES = "Hide Class State Machines";
	private static final String HIDE_FUNCTION_PACKAGES = "Hide Function Packages";
	private static final String HIDE_FUNCTIONS = "Hide Functions";
	private static final String HIDE_FUNCTION_PARAMETERS = "Hide Function Parameters";
	private static final String HIDE_DATA_TYPE_PACKAGES = "Hide Data Type Packages";
	private static final String HIDE_EXTERNAL_ENTITY_PACKAGES = "Hide External Entity Packages";
	private static final String HIDE_USER_DEFINED_DATA_TYPES = "Hide User Defined Data Types";
	private static final String HIDE_EXTERNAL_ENTITIES = "Hide External Entities";
	private static final String HIDE_BRIDGE_OPERATIONS = "Hide Bridge Operations";
	private static final String HIDE_BRIDGE_PARAMETERS = "Hide Bridge Parameters";
	private static final String HIDE_ENUMERATIONS = "Hide Enumerations";
	private static final String HIDE_ENUMERATORS = "Hide Enumerators";
	private static final String HIDE_CORE_DATA_TYPES = "Hide Core Data Types";
	private static final String HIDE_EVENT_DATA_ITEMS = "Hide Event Data Items";
	private static final String HIDE_SEQUENCES = "Hide Sequences";
	private static final String HIDE_INSTANCES = "Hide Instances";
	private static final String HIDE_INFORMAL_INSTANCE_ATTRIBUTES = "Hide Informal Instance Attributes";
	private static final String HIDE_INFORMAL_MESSAGE_ARGUMENTS = "Hide Informal Message Arguments";
	private static final String HIDE_EVENT_MESSAGE_ARGUMENTS = "Hide Event Message Arguments";
	private static final String HIDE_FUNCTION_MESSAGE_ARGUMENTS = "Hide Function Message Arguments";
	private static final String HIDE_CLASS_MESSAGE_ARGUMENTS = "Hide Class Message Arguments";
	private static final String HIDE_BRIDGE_MESSAGE_ARGUMENTS = "Hide Bridge Message Arguments";
	private static final String HIDE_IMPORTED_CLASSES = "Hide Imported Classes";
	private static final String HIDE_IMPORTED_EXTERNAL_ENTITIES = "Hide Imported External Entities";
	private static final String HIDE_IMPORTED_FUNCTION_PACKAGES = "Hide Imported Function Packages";
	private static final String HIDE_IMPORTED_PACKAGES = "Hide Imported Packages";
	private static final String HIDE_INFORMAL_CLASS_ATTRIBUTES = "Hide Informal Class Attributes";
	private static final String HIDE_FORMAL_INSTANCE_ATTRIBUTES = "Hide Formal Instance Attributes";
	private static final String HIDE_ACTORS = "Hide Actors";
	private static final String HIDE_INCOMING_SYNCHRONOUS_MESSAGES = "Hide Incoming Synchronous Messages";
	private static final String HIDE_INCOMING_ASYNCHRONOUS_MESSAGES = "Hide Incoming Asynchronous Messages";
	private static final String HIDE_INCOMING_RETURN_MESSAGES = "Hide Incoming Return Messages";
	private static final String HIDE_COMMUNICATIONS = "Hide Communications";
	private static final String HIDE_USE_CASE_DIAGRAMS = "Hide Use Case Diagrams";
	private static final String HIDE_USE_CASES = "Hide Use Cases";
	private static final String HIDE_ACTIVITIES = "Hide Activities";
	private static final String HIDE_ACTIONS = "Hide Actions";
	private static final String HIDE_OBJECTNODES = "Hide ObjectNodes";
	private static final String HIDE_ACCEPT_EVENT_ACTIONS = "Hide Accept Event Actions";
	private static final String HIDE_SEND_SIGNAL_ACTIONS = "Hide Send Signal Actions";
	private static final String HIDE_ACCEPT_TIME_EVENT_ACTIONS = "Hide Accept Time Event Actions";
	private static final String HIDE_INTERFACE_PACKAGES = "Hide Interface Packages";
	private static final String HIDE_INTERFACES = "Hide Interfaces";
	private static final String HIDE_SIGNALS = "Hide Signals";
	private static final String HIDE_PARAMETERS = "Hide Parameters";
	private static final String HIDE_COMPONENT_PACKAGES = "Hide Component Packages";
	private static final String HIDE_COMPONENTS = "Hide Components";
	private static final String HIDE_PROVIDED_INTERFACES = "Hide Provided Interfaces";
	private static final String HIDE_REQUIRED_INTERFACES = "Hide Required Interfaces";
	private static final String HIDE_REQUIRED_INTERFACE_OPERATIONS = "Hide Required Interface Operations";
	private static final String HIDE_PROVIDED_INTERFACE_OPERATIONS = "Hide Provided Interface Operations";
	private static final String HIDE_REQUIRED_INTERFACE_SIGNALS = "Hide Required Interface Signals";
	private static final String HIDE_PROVIDED_INTERFACE_SIGNALS = "Hide Provided Interface Signals";
	private static final String HIDE_INTERFACE_OPERATIONS = "Hide Interface Operations";
	private static final String HIDE_COMPONENT_REFERENCES = "Hide Component References";
	private static final String HIDE_STRUCTURED_DATA_TYPES = "Hide Structured Data Types";
	private static final String HIDE_MEMBERS = "Hide Members";
	private static final String HIDE_PORTS = "Hide Ports";
	private static final String HIDE_IMPORTED_PROVIDED_INTERFACES = "Hide Imported Provided Interfaces";
	private static final String HIDE_IMPORTED_REQUIRED_INTERFACES = "Hide Imported Required Interfaces";
	private static final String HIDE_COMPONENT_PARTICIPANTS = "Hide Component Participants";
	private static final String HIDE_PACKAGES = "Hide Packages";
	private static final String HIDE_CONSTANT_SPECIFICATIONS = "Hide Constant Specifications";
	private static final String HIDE_LITERAL_SYMBOLIC_CONSTANTS = "Hide Literal Symbolic Constants";
	private FrameList frames;
	protected static ExplorerTreeViewer treeViewer;
	protected ModelLabelProvider labelProvider;
	protected MenuManager menuManager;
	protected Action collapseAll, linkWithEditor;
	protected Action back, fwd, up;
	protected Action cut, copy, paste;
	protected Action undo, redo;
	protected Action open, delete, rename;
	protected Action fileImport, fileExport;
	protected Action treeRefresh;
	protected Action hideStatics;
	protected ConvertToMultifileAction convertToMFP;
	protected Action hideSystem, hideDomains, hideSubsystems, hideClasses,
			hideAttributes, hideOperations, hideOperationParameters,
			hideInstanceStateMachines, hideStates, hideEvents,
			hideInheritedEvents, hideDeliveredEvents,
			hideStateMachineEventDataItems, hideClassStateMachines,
			hideFunctionPackages, hideFunctions, hideFunctionParameters,
			hideDataTypePackages, hideExternalEntityPackages,
			hideUserDefinedDataTypes, hideExternalEntities,
			hideBridgeOperations, hideBridgeParameters, hideEnumerations,
			hideEnumerators, hideCoreDataTypes, hideEventDataItems,
			hideSequences, hideInstances, hideInformalInstanceAttributes,
			hideInformalMessageArguments, hideEventMessageArguments,
			hideFunctionMessageArguments, hideClassMessageArguments,
			hideBridgeMessageArguments, hideImportedClasses,
			hideImportedExternalEntities, hideImportedFunctionPackages,
			hideImportedPackages, hideInformalClassAttributes,
			hideFormalInstanceAttributes, hideActors,
			hideIncomingSynchronousMessages, hideIncomingAsynchronousMessages,
			hideIncomingReturnMessages, hideCommunications,
			hideUseCaseDiagrams, hideUseCases, hideActivities, hideActions,
			hideObjectNodes, hideAcceptEventActions, hideSendSignalActions,
			hideAcceptTimeEventActions, hideInterfacePackages, hideInterfaces,
			hideSignals, hideParameters, hideComponentPackages, hideComponents,
			hideProvidedInterfaces, hideRequiredInterfaces,
			hideRequiredInterfaceOperations, hideProvidedInterfaceOperations,
			hideRequiredInterfaceSignals, hideProvidedInterfaceSignals,
			hideInterfaceOperations, hideComponentReferences,
			hideStructuredDataTypes, hideMembers, hidePorts,
			hideImportedProvidedInterfaces, hideImportedRequiredInterfaces,
			hideComponentParticipants, hidePackages,
			hideConstantSpecifications, hideLiteralSymbolicConstants;
	protected FilterSelectionAction filters;
	protected ViewerFilter filterStatics;
	protected ViewerFilter filterSystem, filterDomains, filterSubsystems,
			filterClasses, filterAttributes, filterOperations,
			filterOperationParameters, filterInstanceStateMachines,
			filterStates, filterEvents, filterInheritedEvents,
			filterDeliveredEvents, filterStateMachineEventDataItems,
			filterClassStateMachines, filterFunctionPackages, filterFunctions,
			filterFunctionParameters, filterDataTypePackages,
			filterExternalEntityPackages, filterUserDefinedDataTypes,
			filterExternalEntities, filterBridgeOperations,
			filterBridgeParameters, filterEnumerations, filterEnumerators,
			filterCoreDataTypes, filterEventDataItems, filterSequences,
			filterInstances, filterInformalInstanceAttributes,
			filterInformalMessageArguments, filterEventMessageArguments,
			filterFunctionMessageArguments, filterClassMessageArguments,
			filterBridgeMessageArguments, filterImportedClasses,
			filterImportedExternalEntities, filterImportedFunctionPackages,
			filterImportedPackages, filterInformalClassAttributes,
			filterFormalInstanceAttributes, filterActors,
			filterIncomingSynchronousMessages,
			filterIncomingAsynchronousMessages, filterIncomingReturnMessages,
			filterCommunications, filterUseCaseDiagrams, filterUseCases,
			filterActivities, filterActions, filterObjectNodes,
			filterAcceptEventActions, filterSendSignalActions,
			filterAcceptTimeEventActions, filterInterfacePackages,
			filterInterfaces, filterSignals, filterParameters,
			filterComponentPackages, filterComponents,
			filterProvidedInterfaces, filterRequiredInterfaces,
			filterRequiredInterfaceOperations,
			filterProvidedInterfaceOperations, filterRequiredInterfaceSignals,
			filterProvidedInterfaceSignals, filterInterfaceOperations,
			filterComponentReferences, filterStructuredDataTypes,
			filterMembers, filterPorts, filterImportedProvidedInterfaces,
			filterImportedRequiredInterfaces, filterComponentParticipants,
			filterPackages, filterConstantSpecifications,
			filterLiteralSymbolicConstants;

	private IModelChangeListener m_modelChangeListener;
	private ITransactionListener m_transactionListener;
	private ISelectionChangedListener m_selChangedListener;
	private IPartListener m_partListener;
	private ISelectionChangedListener m_postSelectionChangedListener;

	private static Selection selection = Selection.getInstance();

	/**
	 * The constructor.
	 */
	public ExplorerView() {
	}
	/**
	 * Returns the tree viewer for the Explorer window
	 * @see com.mentor.nucleus.bp.core.common.IModelViewerProvider#getTreeViewer()
	 */
	public TreeViewer getTreeViewer() {
		return treeViewer;
	}

	public static TreeViewer getExplorerTreeViewer() {
		return treeViewer;
	}
	/*
	 * @see IWorkbenchPart#createPartControl(Composite)
	 */
	public void createPartControl(Composite parent) {
		// Create the view's layout
		FillLayout layout = new FillLayout();
		parent.setLayout(layout);
		treeViewer = new ExplorerTreeViewer(parent);
		treeViewer.setContentProvider(new ModelContentProvider());
		labelProvider = new ModelLabelProvider();
		treeViewer.setLabelProvider(labelProvider);
		// This call must be disabled until eclipse bug 117534 is fixed
		// Otherwise there are problems when a component file is reloaded
		// TODO mfp issue 30 should add a unit test, and allow other unit tests
		// (specifically core) to execute with the following line commented out
		treeViewer.setUseHashlookup(true);
		treeViewer.setComparer(new IElementComparer() {

			public int hashCode(Object element) {
				return System.identityHashCode(element);
			}

			public boolean equals(Object a, Object b) {
				return a == b;
			}

		});
		// Create menu, toolbar and filters.
		createActions();
		createMenus();
		createToolbar();
		createFilters();
		hookListeners();
		initLabelProvider(treeViewer);
		treeViewer.setInput(Ooaofooa.getDefaultInstance());
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.DELETE.getId(), delete);
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.RENAME.getId(), rename);
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.COPY.getId(), copy);
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.CUT.getId(), cut);
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.UNDO.getId(), undo);
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.REDO.getId(), redo);
		getViewSite().getActionBars().setGlobalActionHandler(
				ActionFactory.PASTE.getId(), paste);
		// Set help for the view 
		PlatformUI
				.getWorkbench()
				.getHelpSystem()
				.setHelp(treeViewer.getControl(),
						IModelExplorerHelpContextIds.modelExplorerId);
	}
	/**
	 * Hook up all the listeners needed by Model Explorer
	 */
	protected void hookListeners() {
		m_partListener = new IPartListener() {

			public void partActivated(IWorkbenchPart part) {
				// update the system selection if the part
				// activated is an instance of this class
				if (part instanceof ExplorerView)
						  if(!getTreeViewer().getTree().isDisposed()) {
						// if link with editor is set the selection will
						// already by up to date, otherwise set the current
						// selection to that of this viewers
						if (!linkWithEditor.isChecked()) {
							selection.setSelection(treeViewer.getSelection());
							}
						}
					}

			public void partDeactivated(IWorkbenchPart part) {}

			public void partBroughtToTop(IWorkbenchPart part) {}

			public void partClosed(IWorkbenchPart part) {}

			public void partOpened(IWorkbenchPart part) {}

	};
    getSite().getPage().addPartListener(m_partListener);
    treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
      public void selectionChanged(SelectionChangedEvent event) {
        // Transfer the selection to the model
        selection.setSelection(event.getSelection());
      }
    });
    m_selChangedListener = new ISelectionChangedListener() {
      public void selectionChanged(SelectionChangedEvent event) {
	  	keyActionsActivation();
        if (!getTreeViewer().getTree().isDisposed()) {
		 if (getSite().getPage().getActivePart() != ExplorerView.this)
          if (linkWithEditor.isChecked()){
            // transfer the selection to the tree, but avoid having the tree 
            // viewer report its selection change to its listeners, as if what the 
            // model is reporting as selected is not contained in the tree
            // (such as when a connector is selected), we don't want the
            // tree's newly empty selection being propagated back to the model 
            // by the treeview-listener, above; see issue 453 for more context
            IStructuredSelection selection = (IStructuredSelection)event.getSelection();
            // adapt the selection if necessary
            selection = adaptSelection(selection);
            setTreeSelection(treeViewer, selection);
          }
        }
      }
    };
    selection.addSelectionChangedListener(m_selChangedListener);
    m_postSelectionChangedListener = new ISelectionChangedListener() {
    	
		@Override
		public void selectionChanged(SelectionChangedEvent event) {
			ISelection selection= event.getSelection();
			// If the selection is the same as the one that triggered the last
			// open event then do nothing. The editor already got revealed.
			if (linkWithEditor.isChecked()) {
				linkToEditor((IStructuredSelection)selection);
			}
		}
	};
    getTreeViewer().addPostSelectionChangedListener(m_postSelectionChangedListener);
    m_modelChangeListener = new ModelChangeAdapter() {
        public void modelChanged(ModelChangedEvent event) {
                performDefault(event, null);
        }
        public void modelElementAboutToBeDeleted(ModelChangedEvent event) {
                //we are not interested                
        }
        public void modelElementAboutToBeReloaded(ModelChangedEvent event) {
                //we are not interested                
        }
        public void modelElementReloaded(ModelChangedEvent event) {
            TreeViewer viewer = getTreeViewer();
            if (!viewer.getTree().isDisposed()) {
                Object modelElement = event.getModelElement();
                if (classInTree(modelElement)) {
                    // clear the selection to remove any references to 
                    // the old (pre-reloaded) model element
                    Selection.getInstance().clear();
                    UIUtil.refreshViewer(viewer);
                }
            }
        }
		public void modelElementLoaded(ModelChangedEvent event) {
				if (!getTreeViewer().getTree().isDisposed()) {
					Object modelElement = event.getModelElement();

					if(modelElement instanceof SystemModel_c){
						TreeViewer viewer = getTreeViewer();
						UIUtil.refreshViewer(viewer);
					}
				}
		}
		public void modelElementUnloaded(ModelChangedEvent event) {
			if (!getTreeViewer().getTree().isDisposed()) {
				Object modelElement = event.getModelElement();
	
				ExplorerTreeViewer viewer = (ExplorerTreeViewer) getTreeViewer();
                Object parent = getParent(modelElement);
                //when system model is unloaded perform a full refresh
				if (modelElement instanceof SystemModel_c)
						UIUtil.refreshViewer(viewer, null);
				else if (parent != null)
						UIUtil.refreshViewer(viewer, parent);
			}
		}
		protected Object getParent(Object modelElement){       
            ExplorerTreeViewer viewer = (ExplorerTreeViewer) getTreeViewer();
            Object parent=null;                
            TreeItem treeItem = viewer.findTreeItem(modelElement);

            if (treeItem != null) {
                TreeItem parentItem = treeItem.getParentItem();
                if (parentItem != null) {
                   parent = parentItem.getData();
                } else {
                   parent = treeItem.getData();
                }
            }
            return parent;
        }
            
        /* (non-Javadoc)
         * @see com.mentor.nucleus.bp.core.common.IModelChangeListener#modelElementRelationChanged(com.mentor.nucleus.bp.core.common.ModelChangedEvent, com.mentor.nucleus.bp.core.common.IModelDelta)
         */
        public void modelElementRelationChanged(ModelChangedEvent event,
            IModelDelta delta)
        {
            // there is nothing to do (including calling performDefault), since 
            // relationships aren't shown in this view 
        }
    };
	Ooaofooa.getDefaultInstance().addModelChangeListener(m_modelChangeListener);
	m_transactionListener = new ITransactionListener() {
			@Override
			public void transactionCancelled(Transaction transaction) {
				// Do Nothing
			}

			@Override
			public void transactionEnded(Transaction transaction) {
				PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
					
					@Override
					public void run() {
						getExplorerTreeViewer().refresh();	
					}
				});
			}

			@Override
			public void transactionStarted(Transaction transaction) {
				// Do nothing
			}
		};
	TransactionManager.getSingleton().addTransactionListener(m_transactionListener);
    treeViewer.addOpenListener(new IOpenListener() {
      public void open(OpenEvent event) {
        handleOpen();
      }
    });
  }
	/**
	 * Links to editor (if option enabled)
	 * @param selection the selection
	 */
	private void linkToEditor(IStructuredSelection selection) {
		if (!isActivePart())
			return;
		if (getSite().getPage().getActiveEditor() != null) {
			IEditorPart activeEditor = getSite().getPage().getActiveEditor();
			if (!Selection.getInstance().getSelection().isEmpty()) {
				// If there is a tree selection then 
				// sync the current core selection with the editor's
				activeEditor.getEditorSite().getSelectionProvider()
						.setSelection(Selection.getInstance().getSelection());
			} else {
				// If there is a editor selection then set the tree selection and
				// expend the tree to the selection
				if (activeEditor instanceof ILinkWithEditorListener) {
					NonRootModelElement nrme = ((ILinkWithEditorListener) activeEditor)
							.getFirstSelectedElement();
					if (nrme != null) {
						selection = adaptSelection(new StructuredSelection(nrme));
						setTreeSelection(treeViewer, selection);
					}
				}
			}
			// call client link selection handling
			if (activeEditor instanceof ILinkWithEditorListener) {
				((ILinkWithEditorListener) activeEditor).notifySelectionLink();
			}
		}
	}

	private boolean isActivePart() {
		return this == getSite().getPage().getActivePart();
	}

	protected IStructuredSelection adaptSelection(
			IStructuredSelection selection) {
		ArrayList<Object> adapted = new ArrayList<Object>();
		for(Object selected : selection.toList()) {
			Object adapter = Platform.getAdapterManager().getAdapter(selected, NonRootModelElement.class);
			if(adapter != null) {
				adapted.add(adapter);
			} else {
				adapted.add(selected);
			}
		}
		return new StructuredSelection(adapted);
	}
	private static void setTreeSelection(ExplorerTreeViewer tv,
			IStructuredSelection sel) {
		tv.setSelectionToWidget(sel, true);

		// scroll to reveal all elements of the new selection
		for (Iterator iterator = sel.iterator(); iterator.hasNext();) {
			Object element = iterator.next();
			if (element != null) {
				tv.reveal(element);
			}
		}
	}
	public static final boolean classInTree(Object o) {
		if (o instanceof SystemModel_c)
			return true;
		if (o instanceof Domain_c)
			return true;
		if (o instanceof Subsystem_c)
			return true;
		if (o instanceof ModelClass_c)
			return true;
		if (o instanceof Attribute_c)
			return true;
		if (o instanceof Operation_c)
			return true;
		if (o instanceof OperationParameter_c)
			return true;
		if (o instanceof InstanceStateMachine_c)
			return true;
		if (o instanceof StateMachineState_c)
			return true;
		if (o instanceof StateMachineEvent_c)
			return true;
		if (o instanceof NonLocalEvent_c)
			return true;
		if (o instanceof StateMachineEventDataItem_c)
			return true;
		if (o instanceof ClassStateMachine_c)
			return true;
		if (o instanceof FunctionPackage_c)
			return true;
		if (o instanceof Function_c)
			return true;
		if (o instanceof FunctionParameter_c)
			return true;
		if (o instanceof DataTypePackage_c)
			return true;
		if (o instanceof ExternalEntityPackage_c)
			return true;
		if (o instanceof UserDataType_c)
			return true;
		if (o instanceof ExternalEntity_c)
			return true;
		if (o instanceof Bridge_c)
			return true;
		if (o instanceof BridgeParameter_c)
			return true;
		if (o instanceof EnumerationDataType_c)
			return true;
		if (o instanceof Enumerator_c)
			return true;
		if (o instanceof CoreDataType_c)
			return true;
		if (o instanceof SupplementalDataItems_c)
			return true;
		if (o instanceof Sequence_c)
			return true;
		if (o instanceof ClassInstanceParticipant_c)
			return true;
		if (o instanceof InstanceAttributeValue_c)
			return true;
		if (o instanceof MessageArgument_c)
			return true;
		if (o instanceof ClassParticipant_c)
			return true;
		if (o instanceof ExternalEntityParticipant_c)
			return true;
		if (o instanceof FunctionPackageParticipant_c)
			return true;
		if (o instanceof PackageParticipant_c)
			return true;
		if (o instanceof ClassParticipantAttribute_c)
			return true;
		if (o instanceof ActorParticipant_c)
			return true;
		if (o instanceof SynchronousMessage_c)
			return true;
		if (o instanceof AsynchronousMessage_c)
			return true;
		if (o instanceof ReturnMessage_c)
			return true;
		if (o instanceof Communication_c)
			return true;
		if (o instanceof UseCaseDiagram_c)
			return true;
		if (o instanceof UseCaseParticipant_c)
			return true;
		if (o instanceof Activity_c)
			return true;
		if (o instanceof ActivityDiagramAction_c)
			return true;
		if (o instanceof ObjectNode_c)
			return true;
		if (o instanceof AcceptEventAction_c)
			return true;
		if (o instanceof SendSignal_c)
			return true;
		if (o instanceof AcceptTimeEventAction_c)
			return true;
		if (o instanceof InterfacePackage_c)
			return true;
		if (o instanceof Interface_c)
			return true;
		if (o instanceof InterfaceSignal_c)
			return true;
		if (o instanceof PropertyParameter_c)
			return true;
		if (o instanceof ComponentPackage_c)
			return true;
		if (o instanceof Component_c)
			return true;
		if (o instanceof Provision_c)
			return true;
		if (o instanceof Requirement_c)
			return true;
		if (o instanceof RequiredOperation_c)
			return true;
		if (o instanceof ProvidedOperation_c)
			return true;
		if (o instanceof RequiredSignal_c)
			return true;
		if (o instanceof ProvidedSignal_c)
			return true;
		if (o instanceof InterfaceOperation_c)
			return true;
		if (o instanceof ComponentReference_c)
			return true;
		if (o instanceof StructuredDataType_c)
			return true;
		if (o instanceof StructureMember_c)
			return true;
		if (o instanceof Port_c)
			return true;
		if (o instanceof ImportedProvision_c)
			return true;
		if (o instanceof ImportedRequirement_c)
			return true;
		if (o instanceof ComponentParticipant_c)
			return true;
		if (o instanceof Package_c)
			return true;
		if (o instanceof ConstantSpecification_c)
			return true;
		if (o instanceof LiteralSymbolicConstant_c)
			return true;
		if (o instanceof DataType_c)
			return true;
		if (o instanceof SymbolicConstant_c)
			return true;
		if (o instanceof LeafSymbolicConstant_c)
			return true;
		if (o instanceof PackageInPackage_c)
			return true;
		if (o instanceof SpecificationPackage_c)
			return true;
		if (o instanceof PackageableElement_c)
			return true;
		if (o instanceof InteractionParticipant_c)
			return true;
		if (o instanceof ActionNode_c)
			return true;
		if (o instanceof ActivityNode_c)
			return true;
		if (o instanceof AcceptEvent_c)
			return true;
		if (o instanceof DataTypePackageInPackage_c)
			return true;
		if (o instanceof ConstantInPackage_c)
			return true;
		if (o instanceof FunctionPackageInPackage_c)
			return true;
		if (o instanceof EePackageInPackage_c)
			return true;
		if (o instanceof SubsystemInSubsystem_c)
			return true;
		if (o instanceof Message_c)
			return true;
		if (o instanceof Lifespan_c)
			return true;
		if (o instanceof SequenceInSequence_c)
			return true;
		if (o instanceof InformalSynchronousMessage_c)
			return true;
		if (o instanceof InformalAsynchronousMessage_c)
			return true;
		if (o instanceof OperationMessage_c)
			return true;
		if (o instanceof FunctionMessage_c)
			return true;
		if (o instanceof BridgeMessage_c)
			return true;
		if (o instanceof EventMessage_c)
			return true;
		if (o instanceof InformalAttributeValue_c)
			return true;
		if (o instanceof FormalAttributeValue_c)
			return true;
		if (o instanceof InformalAttribute_c)
			return true;
		if (o instanceof StateMachine_c)
			return true;
		if (o instanceof SemEvent_c)
			return true;
		if (o instanceof LocalEvent_c)
			return true;
		if (o instanceof PolymorphicEvent_c)
			return true;
		if (o instanceof EventSupplementalData_c)
			return true;
		if (o instanceof CommunicationInCommunication_c)
			return true;
		if (o instanceof ParticipantInCommunication_c)
			return true;
		if (o instanceof MessageInCommunication_c)
			return true;
		if (o instanceof UseCaseInUseCase_c)
			return true;
		if (o instanceof ParticipantInUseCase_c)
			return true;
		if (o instanceof ActivityInActivity_c)
			return true;
		if (o instanceof InterfacePackageInInterfacePackage_c)
			return true;
		if (o instanceof ExecutableProperty_c)
			return true;
		if (o instanceof ComponentPackageInPackage_c)
			return true;
		if (o instanceof ComponentInComponent_c)
			return true;
		if (o instanceof ProvidedExecutableProperty_c)
			return true;
		if (o instanceof RequiredExecutableProperty_c)
			return true;
		if (o instanceof DomainAsComponent_c)
			return true;
		if (o instanceof SubsystemInDomain_c)
			return true;
		if (o instanceof SystemDatatypePackage_c)
			return true;
		if (o instanceof InterfaceReference_c)
			return true;
		if (o instanceof ImportedReference_c)
			return true;
		if (o instanceof ReferentialAttribute_c)
			return true;
		if (o instanceof AttributeReferenceInClass_c)
			return true;
		return false;
	}
	/**
	 * Create the Actions provided by Model Explorer
	 */
	protected void createActions() {
		frames = new FrameList(new TreeViewerFrameSource(getTreeViewer()));
		back = new BackAction(frames) {
			public void run() {
			}
		};
		fwd = new ForwardAction(frames) {
			public void run() {
			}
		};
		up = new UpAction(frames) {
			public void run() {
			}
		};
		collapseAll = new Action(COLLAPSE) {
			public void run() {
				getTreeViewer().collapseAll();
			}
		};
		collapseAll.setToolTipText(COLLAPSE);
		collapseAll.setImageDescriptor(CorePlugin
				.getImageDescriptor("collapseall.gif")); //$NON-NLS-1$
		PlatformUI
				.getWorkbench()
				.getHelpSystem()
				.setHelp(collapseAll,
						IModelExplorerHelpContextIds.COLLAPSE_ALL_ACTION);
		linkWithEditor = new Action(IWorkbenchActionConstants.SHOW_IN) {
			public void run() {
				IStructuredSelection selection = Selection.getInstance()
						.getStructuredSelection();
				getTreeViewer().setSelection(selection);
				for (Iterator iterator = selection.iterator(); iterator
						.hasNext();) {
					Object element = iterator.next();
					getTreeViewer().reveal(element);
				}
			}
		};
		linkWithEditor.setChecked(false);
		linkWithEditor.setText("Link With Editor");
		linkWithEditor.setToolTipText("Link with Editor");
		linkWithEditor.setImageDescriptor(CorePlugin
				.getImageDescriptor("synced.gif")); //$NON-NLS-1$
		// 'New' is provided as a sub-menu only. See 'createMenus'
		open = new Action(OPEN) {
			public void run() {
				handleOpen();
			}
		};
		open.setText("Open");
		open.setToolTipText("Open this model Element");
		// 'Open With' is provided as a sub-menu only. See 'createMenus'
		undo = TransactionManager.getSingleton().getUndoAction();
		redo = TransactionManager.getSingleton().getRedoAction();
		cut = new ExplorerCutAction(getTreeViewer());
		copy = new ExplorerCopyAction(getTreeViewer());
		paste = new ExplorerPasteAction();
		// Delete and Rename are retargetable actions defined by core.
		//
		delete = CorePlugin.getDeleteAction();
		rename = CorePlugin.getRenameAction(treeViewer);
		//
		fileImport = CorePlugin.getResourceImportAction();
		fileExport = CorePlugin.getResourceExportAction();
		hideStatics = new Action(HIDE_STATICS) {
			public void run() {
				updateFilter(hideStatics);
			}
		};
		treeRefresh = new Action(ActionFactory.REFRESH.getId()) {
			public void run() {
				RefreshAction ra = new RefreshAction(CorePlugin.getDefault()
						.getWorkbench().getActiveWorkbenchWindow().getShell());
				ra.run();
				getTreeViewer().refresh();
			}
		};
		treeRefresh.setText("Refresh");
		treeRefresh.setToolTipText("Refresh the tree");
		treeRefresh.setImageDescriptor(CorePlugin
				.getImageDescriptor("refresh.gif")); //$NON-NLS-1$
		treeRefresh.setAccelerator(SWT.F5);
		treeRefresh.setActionDefinitionId("org.eclipse.ui.file.refresh"); //$NON-NLS-1$
		getSite().getKeyBindingService().registerAction(treeRefresh);

		hideStatics.setChecked(false);
		hideStatics.setToolTipText(HIDE_STATICS);
		convertToMFP = new ConvertToMultifileAction();
		hideSystem = new Action(HIDE_SYSTEM) {
			public void run() {
				updateFilter(hideSystem);
			}
		};
		hideSystem.setChecked(false);
		hideSystem.setToolTipText(HIDE_SYSTEM);
		hideDomains = new Action(HIDE_DOMAINS) {
			public void run() {
				updateFilter(hideDomains);
			}
		};
		hideDomains.setChecked(false);
		hideDomains.setToolTipText(HIDE_DOMAINS);
		hideSubsystems = new Action(HIDE_SUBSYSTEMS) {
			public void run() {
				updateFilter(hideSubsystems);
			}
		};
		hideSubsystems.setChecked(false);
		hideSubsystems.setToolTipText(HIDE_SUBSYSTEMS);
		hideClasses = new Action(HIDE_CLASSES) {
			public void run() {
				updateFilter(hideClasses);
			}
		};
		hideClasses.setChecked(false);
		hideClasses.setToolTipText(HIDE_CLASSES);
		hideAttributes = new Action(HIDE_ATTRIBUTES) {
			public void run() {
				updateFilter(hideAttributes);
			}
		};
		hideAttributes.setChecked(false);
		hideAttributes.setToolTipText(HIDE_ATTRIBUTES);
		hideOperations = new Action(HIDE_OPERATIONS) {
			public void run() {
				updateFilter(hideOperations);
			}
		};
		hideOperations.setChecked(false);
		hideOperations.setToolTipText(HIDE_OPERATIONS);
		hideOperationParameters = new Action(HIDE_OPERATION_PARAMETERS) {
			public void run() {
				updateFilter(hideOperationParameters);
			}
		};
		hideOperationParameters.setChecked(false);
		hideOperationParameters.setToolTipText(HIDE_OPERATION_PARAMETERS);
		hideInstanceStateMachines = new Action(HIDE_INSTANCE_STATE_MACHINES) {
			public void run() {
				updateFilter(hideInstanceStateMachines);
			}
		};
		hideInstanceStateMachines.setChecked(false);
		hideInstanceStateMachines.setToolTipText(HIDE_INSTANCE_STATE_MACHINES);
		hideStates = new Action(HIDE_STATES) {
			public void run() {
				updateFilter(hideStates);
			}
		};
		hideStates.setChecked(false);
		hideStates.setToolTipText(HIDE_STATES);
		hideEvents = new Action(HIDE_EVENTS) {
			public void run() {
				updateFilter(hideEvents);
			}
		};
		hideEvents.setChecked(false);
		hideEvents.setToolTipText(HIDE_EVENTS);
		hideInheritedEvents = new Action(HIDE_INHERITED_EVENTS) {
			public void run() {
				updateFilter(hideInheritedEvents);
			}
		};
		hideInheritedEvents.setChecked(false);
		hideInheritedEvents.setToolTipText(HIDE_INHERITED_EVENTS);
		hideDeliveredEvents = new Action(HIDE_DELIVERED_EVENTS) {
			public void run() {
				updateFilter(hideDeliveredEvents);
			}
		};
		hideDeliveredEvents.setChecked(false);
		hideDeliveredEvents.setToolTipText(HIDE_DELIVERED_EVENTS);
		hideStateMachineEventDataItems = new Action(
				HIDE_STATE_MACHINE_EVENT_DATA_ITEMS) {
			public void run() {
				updateFilter(hideStateMachineEventDataItems);
			}
		};
		hideStateMachineEventDataItems.setChecked(false);
		hideStateMachineEventDataItems
				.setToolTipText(HIDE_STATE_MACHINE_EVENT_DATA_ITEMS);
		hideClassStateMachines = new Action(HIDE_CLASS_STATE_MACHINES) {
			public void run() {
				updateFilter(hideClassStateMachines);
			}
		};
		hideClassStateMachines.setChecked(false);
		hideClassStateMachines.setToolTipText(HIDE_CLASS_STATE_MACHINES);
		hideFunctionPackages = new Action(HIDE_FUNCTION_PACKAGES) {
			public void run() {
				updateFilter(hideFunctionPackages);
			}
		};
		hideFunctionPackages.setChecked(false);
		hideFunctionPackages.setToolTipText(HIDE_FUNCTION_PACKAGES);
		hideFunctions = new Action(HIDE_FUNCTIONS) {
			public void run() {
				updateFilter(hideFunctions);
			}
		};
		hideFunctions.setChecked(false);
		hideFunctions.setToolTipText(HIDE_FUNCTIONS);
		hideFunctionParameters = new Action(HIDE_FUNCTION_PARAMETERS) {
			public void run() {
				updateFilter(hideFunctionParameters);
			}
		};
		hideFunctionParameters.setChecked(false);
		hideFunctionParameters.setToolTipText(HIDE_FUNCTION_PARAMETERS);
		hideDataTypePackages = new Action(HIDE_DATA_TYPE_PACKAGES) {
			public void run() {
				updateFilter(hideDataTypePackages);
			}
		};
		hideDataTypePackages.setChecked(false);
		hideDataTypePackages.setToolTipText(HIDE_DATA_TYPE_PACKAGES);
		hideExternalEntityPackages = new Action(HIDE_EXTERNAL_ENTITY_PACKAGES) {
			public void run() {
				updateFilter(hideExternalEntityPackages);
			}
		};
		hideExternalEntityPackages.setChecked(false);
		hideExternalEntityPackages
				.setToolTipText(HIDE_EXTERNAL_ENTITY_PACKAGES);
		hideUserDefinedDataTypes = new Action(HIDE_USER_DEFINED_DATA_TYPES) {
			public void run() {
				updateFilter(hideUserDefinedDataTypes);
			}
		};
		hideUserDefinedDataTypes.setChecked(false);
		hideUserDefinedDataTypes.setToolTipText(HIDE_USER_DEFINED_DATA_TYPES);
		hideExternalEntities = new Action(HIDE_EXTERNAL_ENTITIES) {
			public void run() {
				updateFilter(hideExternalEntities);
			}
		};
		hideExternalEntities.setChecked(false);
		hideExternalEntities.setToolTipText(HIDE_EXTERNAL_ENTITIES);
		hideBridgeOperations = new Action(HIDE_BRIDGE_OPERATIONS) {
			public void run() {
				updateFilter(hideBridgeOperations);
			}
		};
		hideBridgeOperations.setChecked(false);
		hideBridgeOperations.setToolTipText(HIDE_BRIDGE_OPERATIONS);
		hideBridgeParameters = new Action(HIDE_BRIDGE_PARAMETERS) {
			public void run() {
				updateFilter(hideBridgeParameters);
			}
		};
		hideBridgeParameters.setChecked(false);
		hideBridgeParameters.setToolTipText(HIDE_BRIDGE_PARAMETERS);
		hideEnumerations = new Action(HIDE_ENUMERATIONS) {
			public void run() {
				updateFilter(hideEnumerations);
			}
		};
		hideEnumerations.setChecked(false);
		hideEnumerations.setToolTipText(HIDE_ENUMERATIONS);
		hideEnumerators = new Action(HIDE_ENUMERATORS) {
			public void run() {
				updateFilter(hideEnumerators);
			}
		};
		hideEnumerators.setChecked(false);
		hideEnumerators.setToolTipText(HIDE_ENUMERATORS);
		hideCoreDataTypes = new Action(HIDE_CORE_DATA_TYPES) {
			public void run() {
				updateFilter(hideCoreDataTypes);
			}
		};
		hideCoreDataTypes.setChecked(false);
		hideCoreDataTypes.setToolTipText(HIDE_CORE_DATA_TYPES);
		hideEventDataItems = new Action(HIDE_EVENT_DATA_ITEMS) {
			public void run() {
				updateFilter(hideEventDataItems);
			}
		};
		hideEventDataItems.setChecked(false);
		hideEventDataItems.setToolTipText(HIDE_EVENT_DATA_ITEMS);
		hideSequences = new Action(HIDE_SEQUENCES) {
			public void run() {
				updateFilter(hideSequences);
			}
		};
		hideSequences.setChecked(false);
		hideSequences.setToolTipText(HIDE_SEQUENCES);
		hideInstances = new Action(HIDE_INSTANCES) {
			public void run() {
				updateFilter(hideInstances);
			}
		};
		hideInstances.setChecked(false);
		hideInstances.setToolTipText(HIDE_INSTANCES);
		hideInformalInstanceAttributes = new Action(
				HIDE_INFORMAL_INSTANCE_ATTRIBUTES) {
			public void run() {
				updateFilter(hideInformalInstanceAttributes);
			}
		};
		hideInformalInstanceAttributes.setChecked(false);
		hideInformalInstanceAttributes
				.setToolTipText(HIDE_INFORMAL_INSTANCE_ATTRIBUTES);
		hideInformalMessageArguments = new Action(
				HIDE_INFORMAL_MESSAGE_ARGUMENTS) {
			public void run() {
				updateFilter(hideInformalMessageArguments);
			}
		};
		hideInformalMessageArguments.setChecked(false);
		hideInformalMessageArguments
				.setToolTipText(HIDE_INFORMAL_MESSAGE_ARGUMENTS);
		hideEventMessageArguments = new Action(HIDE_EVENT_MESSAGE_ARGUMENTS) {
			public void run() {
				updateFilter(hideEventMessageArguments);
			}
		};
		hideEventMessageArguments.setChecked(false);
		hideEventMessageArguments.setToolTipText(HIDE_EVENT_MESSAGE_ARGUMENTS);
		hideFunctionMessageArguments = new Action(
				HIDE_FUNCTION_MESSAGE_ARGUMENTS) {
			public void run() {
				updateFilter(hideFunctionMessageArguments);
			}
		};
		hideFunctionMessageArguments.setChecked(false);
		hideFunctionMessageArguments
				.setToolTipText(HIDE_FUNCTION_MESSAGE_ARGUMENTS);
		hideClassMessageArguments = new Action(HIDE_CLASS_MESSAGE_ARGUMENTS) {
			public void run() {
				updateFilter(hideClassMessageArguments);
			}
		};
		hideClassMessageArguments.setChecked(false);
		hideClassMessageArguments.setToolTipText(HIDE_CLASS_MESSAGE_ARGUMENTS);
		hideBridgeMessageArguments = new Action(HIDE_BRIDGE_MESSAGE_ARGUMENTS) {
			public void run() {
				updateFilter(hideBridgeMessageArguments);
			}
		};
		hideBridgeMessageArguments.setChecked(false);
		hideBridgeMessageArguments
				.setToolTipText(HIDE_BRIDGE_MESSAGE_ARGUMENTS);
		hideImportedClasses = new Action(HIDE_IMPORTED_CLASSES) {
			public void run() {
				updateFilter(hideImportedClasses);
			}
		};
		hideImportedClasses.setChecked(false);
		hideImportedClasses.setToolTipText(HIDE_IMPORTED_CLASSES);
		hideImportedExternalEntities = new Action(
				HIDE_IMPORTED_EXTERNAL_ENTITIES) {
			public void run() {
				updateFilter(hideImportedExternalEntities);
			}
		};
		hideImportedExternalEntities.setChecked(false);
		hideImportedExternalEntities
				.setToolTipText(HIDE_IMPORTED_EXTERNAL_ENTITIES);
		hideImportedFunctionPackages = new Action(
				HIDE_IMPORTED_FUNCTION_PACKAGES) {
			public void run() {
				updateFilter(hideImportedFunctionPackages);
			}
		};
		hideImportedFunctionPackages.setChecked(false);
		hideImportedFunctionPackages
				.setToolTipText(HIDE_IMPORTED_FUNCTION_PACKAGES);
		hideImportedPackages = new Action(HIDE_IMPORTED_PACKAGES) {
			public void run() {
				updateFilter(hideImportedPackages);
			}
		};
		hideImportedPackages.setChecked(false);
		hideImportedPackages.setToolTipText(HIDE_IMPORTED_PACKAGES);
		hideInformalClassAttributes = new Action(HIDE_INFORMAL_CLASS_ATTRIBUTES) {
			public void run() {
				updateFilter(hideInformalClassAttributes);
			}
		};
		hideInformalClassAttributes.setChecked(false);
		hideInformalClassAttributes
				.setToolTipText(HIDE_INFORMAL_CLASS_ATTRIBUTES);
		hideFormalInstanceAttributes = new Action(
				HIDE_FORMAL_INSTANCE_ATTRIBUTES) {
			public void run() {
				updateFilter(hideFormalInstanceAttributes);
			}
		};
		hideFormalInstanceAttributes.setChecked(false);
		hideFormalInstanceAttributes
				.setToolTipText(HIDE_FORMAL_INSTANCE_ATTRIBUTES);
		hideActors = new Action(HIDE_ACTORS) {
			public void run() {
				updateFilter(hideActors);
			}
		};
		hideActors.setChecked(false);
		hideActors.setToolTipText(HIDE_ACTORS);
		hideIncomingSynchronousMessages = new Action(
				HIDE_INCOMING_SYNCHRONOUS_MESSAGES) {
			public void run() {
				updateFilter(hideIncomingSynchronousMessages);
			}
		};
		hideIncomingSynchronousMessages.setChecked(false);
		hideIncomingSynchronousMessages
				.setToolTipText(HIDE_INCOMING_SYNCHRONOUS_MESSAGES);
		hideIncomingAsynchronousMessages = new Action(
				HIDE_INCOMING_ASYNCHRONOUS_MESSAGES) {
			public void run() {
				updateFilter(hideIncomingAsynchronousMessages);
			}
		};
		hideIncomingAsynchronousMessages.setChecked(false);
		hideIncomingAsynchronousMessages
				.setToolTipText(HIDE_INCOMING_ASYNCHRONOUS_MESSAGES);
		hideIncomingReturnMessages = new Action(HIDE_INCOMING_RETURN_MESSAGES) {
			public void run() {
				updateFilter(hideIncomingReturnMessages);
			}
		};
		hideIncomingReturnMessages.setChecked(false);
		hideIncomingReturnMessages
				.setToolTipText(HIDE_INCOMING_RETURN_MESSAGES);
		hideCommunications = new Action(HIDE_COMMUNICATIONS) {
			public void run() {
				updateFilter(hideCommunications);
			}
		};
		hideCommunications.setChecked(false);
		hideCommunications.setToolTipText(HIDE_COMMUNICATIONS);
		hideUseCaseDiagrams = new Action(HIDE_USE_CASE_DIAGRAMS) {
			public void run() {
				updateFilter(hideUseCaseDiagrams);
			}
		};
		hideUseCaseDiagrams.setChecked(false);
		hideUseCaseDiagrams.setToolTipText(HIDE_USE_CASE_DIAGRAMS);
		hideUseCases = new Action(HIDE_USE_CASES) {
			public void run() {
				updateFilter(hideUseCases);
			}
		};
		hideUseCases.setChecked(false);
		hideUseCases.setToolTipText(HIDE_USE_CASES);
		hideActivities = new Action(HIDE_ACTIVITIES) {
			public void run() {
				updateFilter(hideActivities);
			}
		};
		hideActivities.setChecked(false);
		hideActivities.setToolTipText(HIDE_ACTIVITIES);
		hideActions = new Action(HIDE_ACTIONS) {
			public void run() {
				updateFilter(hideActions);
			}
		};
		hideActions.setChecked(false);
		hideActions.setToolTipText(HIDE_ACTIONS);
		hideObjectNodes = new Action(HIDE_OBJECTNODES) {
			public void run() {
				updateFilter(hideObjectNodes);
			}
		};
		hideObjectNodes.setChecked(false);
		hideObjectNodes.setToolTipText(HIDE_OBJECTNODES);
		hideAcceptEventActions = new Action(HIDE_ACCEPT_EVENT_ACTIONS) {
			public void run() {
				updateFilter(hideAcceptEventActions);
			}
		};
		hideAcceptEventActions.setChecked(false);
		hideAcceptEventActions.setToolTipText(HIDE_ACCEPT_EVENT_ACTIONS);
		hideSendSignalActions = new Action(HIDE_SEND_SIGNAL_ACTIONS) {
			public void run() {
				updateFilter(hideSendSignalActions);
			}
		};
		hideSendSignalActions.setChecked(false);
		hideSendSignalActions.setToolTipText(HIDE_SEND_SIGNAL_ACTIONS);
		hideAcceptTimeEventActions = new Action(HIDE_ACCEPT_TIME_EVENT_ACTIONS) {
			public void run() {
				updateFilter(hideAcceptTimeEventActions);
			}
		};
		hideAcceptTimeEventActions.setChecked(false);
		hideAcceptTimeEventActions
				.setToolTipText(HIDE_ACCEPT_TIME_EVENT_ACTIONS);
		hideInterfacePackages = new Action(HIDE_INTERFACE_PACKAGES) {
			public void run() {
				updateFilter(hideInterfacePackages);
			}
		};
		hideInterfacePackages.setChecked(false);
		hideInterfacePackages.setToolTipText(HIDE_INTERFACE_PACKAGES);
		hideInterfaces = new Action(HIDE_INTERFACES) {
			public void run() {
				updateFilter(hideInterfaces);
			}
		};
		hideInterfaces.setChecked(false);
		hideInterfaces.setToolTipText(HIDE_INTERFACES);
		hideSignals = new Action(HIDE_SIGNALS) {
			public void run() {
				updateFilter(hideSignals);
			}
		};
		hideSignals.setChecked(false);
		hideSignals.setToolTipText(HIDE_SIGNALS);
		hideParameters = new Action(HIDE_PARAMETERS) {
			public void run() {
				updateFilter(hideParameters);
			}
		};
		hideParameters.setChecked(false);
		hideParameters.setToolTipText(HIDE_PARAMETERS);
		hideComponentPackages = new Action(HIDE_COMPONENT_PACKAGES) {
			public void run() {
				updateFilter(hideComponentPackages);
			}
		};
		hideComponentPackages.setChecked(false);
		hideComponentPackages.setToolTipText(HIDE_COMPONENT_PACKAGES);
		hideComponents = new Action(HIDE_COMPONENTS) {
			public void run() {
				updateFilter(hideComponents);
			}
		};
		hideComponents.setChecked(false);
		hideComponents.setToolTipText(HIDE_COMPONENTS);
		hideProvidedInterfaces = new Action(HIDE_PROVIDED_INTERFACES) {
			public void run() {
				updateFilter(hideProvidedInterfaces);
			}
		};
		hideProvidedInterfaces.setChecked(false);
		hideProvidedInterfaces.setToolTipText(HIDE_PROVIDED_INTERFACES);
		hideRequiredInterfaces = new Action(HIDE_REQUIRED_INTERFACES) {
			public void run() {
				updateFilter(hideRequiredInterfaces);
			}
		};
		hideRequiredInterfaces.setChecked(false);
		hideRequiredInterfaces.setToolTipText(HIDE_REQUIRED_INTERFACES);
		hideRequiredInterfaceOperations = new Action(
				HIDE_REQUIRED_INTERFACE_OPERATIONS) {
			public void run() {
				updateFilter(hideRequiredInterfaceOperations);
			}
		};
		hideRequiredInterfaceOperations.setChecked(false);
		hideRequiredInterfaceOperations
				.setToolTipText(HIDE_REQUIRED_INTERFACE_OPERATIONS);
		hideProvidedInterfaceOperations = new Action(
				HIDE_PROVIDED_INTERFACE_OPERATIONS) {
			public void run() {
				updateFilter(hideProvidedInterfaceOperations);
			}
		};
		hideProvidedInterfaceOperations.setChecked(false);
		hideProvidedInterfaceOperations
				.setToolTipText(HIDE_PROVIDED_INTERFACE_OPERATIONS);
		hideRequiredInterfaceSignals = new Action(
				HIDE_REQUIRED_INTERFACE_SIGNALS) {
			public void run() {
				updateFilter(hideRequiredInterfaceSignals);
			}
		};
		hideRequiredInterfaceSignals.setChecked(false);
		hideRequiredInterfaceSignals
				.setToolTipText(HIDE_REQUIRED_INTERFACE_SIGNALS);
		hideProvidedInterfaceSignals = new Action(
				HIDE_PROVIDED_INTERFACE_SIGNALS) {
			public void run() {
				updateFilter(hideProvidedInterfaceSignals);
			}
		};
		hideProvidedInterfaceSignals.setChecked(false);
		hideProvidedInterfaceSignals
				.setToolTipText(HIDE_PROVIDED_INTERFACE_SIGNALS);
		hideInterfaceOperations = new Action(HIDE_INTERFACE_OPERATIONS) {
			public void run() {
				updateFilter(hideInterfaceOperations);
			}
		};
		hideInterfaceOperations.setChecked(false);
		hideInterfaceOperations.setToolTipText(HIDE_INTERFACE_OPERATIONS);
		hideComponentReferences = new Action(HIDE_COMPONENT_REFERENCES) {
			public void run() {
				updateFilter(hideComponentReferences);
			}
		};
		hideComponentReferences.setChecked(false);
		hideComponentReferences.setToolTipText(HIDE_COMPONENT_REFERENCES);
		hideStructuredDataTypes = new Action(HIDE_STRUCTURED_DATA_TYPES) {
			public void run() {
				updateFilter(hideStructuredDataTypes);
			}
		};
		hideStructuredDataTypes.setChecked(false);
		hideStructuredDataTypes.setToolTipText(HIDE_STRUCTURED_DATA_TYPES);
		hideMembers = new Action(HIDE_MEMBERS) {
			public void run() {
				updateFilter(hideMembers);
			}
		};
		hideMembers.setChecked(false);
		hideMembers.setToolTipText(HIDE_MEMBERS);
		hidePorts = new Action(HIDE_PORTS) {
			public void run() {
				updateFilter(hidePorts);
			}
		};
		hidePorts.setChecked(false);
		hidePorts.setToolTipText(HIDE_PORTS);
		hideImportedProvidedInterfaces = new Action(
				HIDE_IMPORTED_PROVIDED_INTERFACES) {
			public void run() {
				updateFilter(hideImportedProvidedInterfaces);
			}
		};
		hideImportedProvidedInterfaces.setChecked(false);
		hideImportedProvidedInterfaces
				.setToolTipText(HIDE_IMPORTED_PROVIDED_INTERFACES);
		hideImportedRequiredInterfaces = new Action(
				HIDE_IMPORTED_REQUIRED_INTERFACES) {
			public void run() {
				updateFilter(hideImportedRequiredInterfaces);
			}
		};
		hideImportedRequiredInterfaces.setChecked(false);
		hideImportedRequiredInterfaces
				.setToolTipText(HIDE_IMPORTED_REQUIRED_INTERFACES);
		hideComponentParticipants = new Action(HIDE_COMPONENT_PARTICIPANTS) {
			public void run() {
				updateFilter(hideComponentParticipants);
			}
		};
		hideComponentParticipants.setChecked(false);
		hideComponentParticipants.setToolTipText(HIDE_COMPONENT_PARTICIPANTS);
		hidePackages = new Action(HIDE_PACKAGES) {
			public void run() {
				updateFilter(hidePackages);
			}
		};
		hidePackages.setChecked(false);
		hidePackages.setToolTipText(HIDE_PACKAGES);
		hideConstantSpecifications = new Action(HIDE_CONSTANT_SPECIFICATIONS) {
			public void run() {
				updateFilter(hideConstantSpecifications);
			}
		};
		hideConstantSpecifications.setChecked(false);
		hideConstantSpecifications.setToolTipText(HIDE_CONSTANT_SPECIFICATIONS);
		hideLiteralSymbolicConstants = new Action(
				HIDE_LITERAL_SYMBOLIC_CONSTANTS) {
			public void run() {
				updateFilter(hideLiteralSymbolicConstants);
			}
		};
		hideLiteralSymbolicConstants.setChecked(false);
		hideLiteralSymbolicConstants
				.setToolTipText(HIDE_LITERAL_SYMBOLIC_CONSTANTS);
		filters = new FilterSelectionAction(this, "Filters...");
		filters.setImageDescriptor(CorePlugin
				.getImageDescriptor("filter_ps.gif")); //$NON-NLS-1$
	}
	/**
	 * Create the menus for the Model Explorer
	 */
	protected void createMenus() {
		// Context Menu
		MenuManager menuManager = new MenuManager("#PopupMenu"); //$NON-NLS-1$
		menuManager.setRemoveAllWhenShown(true);
		final MenuManager createMenuManager = new MenuManager(
				"Ne&w", "com.mentor.nucleus.bp.ui.newroot"); //$NON-NLS-2$
		final MenuManager openMenuManager = new MenuManager(
				"Open Wit&h", "com.mentor.nucleus.bp.ui.openroot"); //$NON-NLS-2$
		final MenuManager classesMenu = new MenuManager(
				"Classes", "com.mentor.nucleus.bp.ui.classroot"); //$NON-NLS-2$
		final MenuManager componentsMenu = new MenuManager(
				"Components", "com.mentor.nucleus.bp.ui.componentroot"); //$NON-NLS-2$
		final MenuManager externalMenu = new MenuManager(
				"External", "com.mentor.nucleus.bp.ui.externalroot"); //$NON-NLS-2$
		final MenuManager interactionMenu = new MenuManager(
				"Interaction", "com.mentor.nucleus.bp.ui.interactionroot"); //$NON-NLS-2$
		final MenuManager activityMenu = new MenuManager(
				"Activity", "com.mentor.nucleus.bp.ui.activityroot");//$NON-NLS-2$
		final MenuManager typesMenu = new MenuManager(
				"Types", "com.mentor.nucleus.bp.ui.typeroot"); //$NON-NLS-2$
		final MenuManager useCaseMenu = new MenuManager(
				"Usecase", "com.mentor.nucleus.bp.ui.usecaseroot"); //$NON-NLS-2$

		menuManager.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager mgr) {
				mgr.add(createMenuManager);
				createMenuManager.removeAll();
				createMenuManager.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newmenu")); //$NON-NLS-1$

				createMenuManager.add(activityMenu);
				activityMenu.removeAll();
				activityMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newactivitymenu"));

				createMenuManager.add(classesMenu);
				classesMenu.removeAll();
				classesMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newclassmenu"));

				createMenuManager.add(componentsMenu);
				componentsMenu.removeAll();
				componentsMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newcomponentmenu"));

				createMenuManager.add(externalMenu);
				externalMenu.removeAll();
				externalMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newexternalmenu"));

				createMenuManager.add(interactionMenu);
				interactionMenu.removeAll();
				interactionMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newinteractionmenu"));

				createMenuManager.add(typesMenu);
				typesMenu.removeAll();
				typesMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newtypemenu"));

				createMenuManager.add(useCaseMenu);
				useCaseMenu.removeAll();
				useCaseMenu.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.newusecasemenu"));

				createMenuManager.add(new NewWizardMenu(getSite()
						.getWorkbenchWindow()));
				mgr.add(open);
				mgr.add(openMenuManager);
				openMenuManager.removeAll();
				openMenuManager.add(new GroupMarker(
						"com.mentor.nucleus.bp.ui.openmenu")); //$NON-NLS-1$
				mgr.add(new Separator(
						"com.mentor.nucleus.bp.ui.context-internal")); //$NON-NLS-1$
				mgr.add(new Separator(
						"com.mentor.nucleus.bp.ui.context-internal-end")); //$NON-NLS-1$
				mgr.add(new Separator());
				mgr.add(undo);
				mgr.add(redo);
				mgr.add(new Separator());
				mgr.add(cut);
				cut.setEnabled(cut.isEnabled());
				mgr.add(copy);
				copy.setEnabled(copy.isEnabled());
				mgr.add(paste);
				paste.setEnabled(paste.isEnabled());
				mgr.add(new Separator());
				mgr.add(delete);
				mgr.add(rename);
				mgr.add(new Separator());
				mgr.add(fileImport);
				mgr.add(fileExport);
				mgr.add(new Separator());
				mgr.add(treeRefresh);
				if (convertToMFP.canShow()) {
					mgr.add(new Separator());
					mgr.add(convertToMFP);
				}
				// If this is omitted, the platform complains because
				// it can't allow third party plug-ins to extend the menu
				// This is important for those who wish to use change
				// management plugins because Team menu items are added here.
				mgr.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
			}
		});
		Menu menu = menuManager.createContextMenu(treeViewer.getTree());
		treeViewer.getTree().setMenu(menu);
		getSite().setSelectionProvider(selection);
		getSite().registerContextMenu(menuManager, selection);
		// Titlebar Menu
		IMenuManager rootMenuManager = getViewSite().getActionBars()
				.getMenuManager();
		rootMenuManager.setRemoveAllWhenShown(true);
		rootMenuManager.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager mgr) {
				fillMenu(mgr);
			}
		});
		fillMenu(rootMenuManager);
	}
	/**
	 * Fill the Explorer's Titlebar dropdown menu 
	 */
	protected void fillMenu(IMenuManager rootMenuManager) {
		// These actions are being presented in the menu and so should have an icon
		hideStatics.setImageDescriptor(CorePlugin
				.getImageDescriptor("static_co.gif")); //$NON-NLS-1$
		rootMenuManager.add(hideStatics);
		hideOperations.setImageDescriptor(CorePlugin
				.getImageDescriptor("methpub_obj_co.gif")); //$NON-NLS-1$
		rootMenuManager.add(hideOperations);
		rootMenuManager.add(filters);
		rootMenuManager.add(new Separator(
				IWorkbenchActionConstants.MB_ADDITIONS));
		rootMenuManager.add(linkWithEditor);
	}
	/**
	 * Create the view filters for the Explorer window
	 */
	protected void createFilters() {
		filterStatics = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				if (element instanceof Operation_c) {
					return (((Operation_c) element).getInstance_based() == Scope_c.Instance);
				}
				if (element instanceof Function_c) {
					return false;
				}
				return true;
			}
		};
		filterSystem = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof SystemModel_c);
			}
		};
		filterDomains = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Domain_c);
			}
		};
		filterSubsystems = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Subsystem_c);
			}
		};
		filterClasses = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ModelClass_c);
			}
		};
		filterAttributes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Attribute_c);
			}
		};
		filterOperations = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Operation_c);
			}
		};
		filterOperationParameters = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof OperationParameter_c);
			}
		};
		filterInstanceStateMachines = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof InstanceStateMachine_c);
			}
		};
		filterStates = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof StateMachineState_c);
			}
		};
		filterEvents = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof StateMachineEvent_c);
			}
		};
		filterInheritedEvents = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof NonLocalEvent_c);
			}
		};
		filterDeliveredEvents = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof StateMachineEvent_c);
			}
		};
		filterStateMachineEventDataItems = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof StateMachineEventDataItem_c);
			}
		};
		filterClassStateMachines = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ClassStateMachine_c);
			}
		};
		filterFunctionPackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof FunctionPackage_c);
			}
		};
		filterFunctions = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Function_c);
			}
		};
		filterFunctionParameters = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof FunctionParameter_c);
			}
		};
		filterDataTypePackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof DataTypePackage_c);
			}
		};
		filterExternalEntityPackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ExternalEntityPackage_c);
			}
		};
		filterUserDefinedDataTypes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof UserDataType_c);
			}
		};
		filterExternalEntities = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ExternalEntity_c);
			}
		};
		filterBridgeOperations = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Bridge_c);
			}
		};
		filterBridgeParameters = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof BridgeParameter_c);
			}
		};
		filterEnumerations = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof EnumerationDataType_c);
			}
		};
		filterEnumerators = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Enumerator_c);
			}
		};
		filterCoreDataTypes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof CoreDataType_c);
			}
		};
		filterEventDataItems = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof SupplementalDataItems_c);
			}
		};
		filterSequences = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Sequence_c);
			}
		};
		filterInstances = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ClassInstanceParticipant_c);
			}
		};
		filterInformalInstanceAttributes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof InstanceAttributeValue_c);
			}
		};
		filterInformalMessageArguments = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof MessageArgument_c);
			}
		};
		filterEventMessageArguments = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof MessageArgument_c);
			}
		};
		filterFunctionMessageArguments = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof MessageArgument_c);
			}
		};
		filterClassMessageArguments = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof MessageArgument_c);
			}
		};
		filterBridgeMessageArguments = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof MessageArgument_c);
			}
		};
		filterImportedClasses = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ClassParticipant_c);
			}
		};
		filterImportedExternalEntities = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ExternalEntityParticipant_c);
			}
		};
		filterImportedFunctionPackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof FunctionPackageParticipant_c);
			}
		};
		filterImportedPackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof PackageParticipant_c);
			}
		};
		filterInformalClassAttributes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ClassParticipantAttribute_c);
			}
		};
		filterFormalInstanceAttributes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof InstanceAttributeValue_c);
			}
		};
		filterActors = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ActorParticipant_c);
			}
		};
		filterIncomingSynchronousMessages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof SynchronousMessage_c);
			}
		};
		filterIncomingAsynchronousMessages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof AsynchronousMessage_c);
			}
		};
		filterIncomingReturnMessages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ReturnMessage_c);
			}
		};
		filterCommunications = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Communication_c);
			}
		};
		filterUseCaseDiagrams = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof UseCaseDiagram_c);
			}
		};
		filterUseCases = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof UseCaseParticipant_c);
			}
		};
		filterActivities = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Activity_c);
			}
		};
		filterActions = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ActivityDiagramAction_c);
			}
		};
		filterObjectNodes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ObjectNode_c);
			}
		};
		filterAcceptEventActions = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof AcceptEventAction_c);
			}
		};
		filterSendSignalActions = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof SendSignal_c);
			}
		};
		filterAcceptTimeEventActions = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof AcceptTimeEventAction_c);
			}
		};
		filterInterfacePackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof InterfacePackage_c);
			}
		};
		filterInterfaces = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Interface_c);
			}
		};
		filterSignals = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof InterfaceSignal_c);
			}
		};
		filterParameters = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof PropertyParameter_c);
			}
		};
		filterComponentPackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ComponentPackage_c);
			}
		};
		filterComponents = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Component_c);
			}
		};
		filterProvidedInterfaces = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Provision_c);
			}
		};
		filterRequiredInterfaces = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Requirement_c);
			}
		};
		filterRequiredInterfaceOperations = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof RequiredOperation_c);
			}
		};
		filterProvidedInterfaceOperations = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ProvidedOperation_c);
			}
		};
		filterRequiredInterfaceSignals = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof RequiredSignal_c);
			}
		};
		filterProvidedInterfaceSignals = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ProvidedSignal_c);
			}
		};
		filterInterfaceOperations = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof InterfaceOperation_c);
			}
		};
		filterComponentReferences = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ComponentReference_c);
			}
		};
		filterStructuredDataTypes = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof StructuredDataType_c);
			}
		};
		filterMembers = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof StructureMember_c);
			}
		};
		filterPorts = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Port_c);
			}
		};
		filterImportedProvidedInterfaces = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ImportedProvision_c);
			}
		};
		filterImportedRequiredInterfaces = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ImportedRequirement_c);
			}
		};
		filterComponentParticipants = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ComponentParticipant_c);
			}
		};
		filterPackages = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof Package_c);
			}
		};
		filterConstantSpecifications = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof ConstantSpecification_c);
			}
		};
		filterLiteralSymbolicConstants = new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement,
					Object element) {
				return !(element instanceof LiteralSymbolicConstant_c);
			}
		};
		FiltersContentProvider contentProvider = new FiltersContentProvider();
		String[] selections = contentProvider.getInitialSelections();
		updateFilters(selections);
	}
	/**
	 * Update the Explorer's view filters 
	 */
	protected void updateFilters(String[] filters) {
		hideSystem.setChecked(false);
		updateFilter(hideSystem);
		hideDomains.setChecked(false);
		updateFilter(hideDomains);
		hideSubsystems.setChecked(false);
		updateFilter(hideSubsystems);
		hideClasses.setChecked(false);
		updateFilter(hideClasses);
		hideAttributes.setChecked(false);
		updateFilter(hideAttributes);
		hideOperations.setChecked(false);
		updateFilter(hideOperations);
		hideOperationParameters.setChecked(false);
		updateFilter(hideOperationParameters);
		hideInstanceStateMachines.setChecked(false);
		updateFilter(hideInstanceStateMachines);
		hideStates.setChecked(false);
		updateFilter(hideStates);
		hideEvents.setChecked(false);
		updateFilter(hideEvents);
		hideInheritedEvents.setChecked(false);
		updateFilter(hideInheritedEvents);
		hideDeliveredEvents.setChecked(false);
		updateFilter(hideDeliveredEvents);
		hideStateMachineEventDataItems.setChecked(false);
		updateFilter(hideStateMachineEventDataItems);
		hideClassStateMachines.setChecked(false);
		updateFilter(hideClassStateMachines);
		hideFunctionPackages.setChecked(false);
		updateFilter(hideFunctionPackages);
		hideFunctions.setChecked(false);
		updateFilter(hideFunctions);
		hideFunctionParameters.setChecked(false);
		updateFilter(hideFunctionParameters);
		hideDataTypePackages.setChecked(false);
		updateFilter(hideDataTypePackages);
		hideExternalEntityPackages.setChecked(false);
		updateFilter(hideExternalEntityPackages);
		hideUserDefinedDataTypes.setChecked(false);
		updateFilter(hideUserDefinedDataTypes);
		hideExternalEntities.setChecked(false);
		updateFilter(hideExternalEntities);
		hideBridgeOperations.setChecked(false);
		updateFilter(hideBridgeOperations);
		hideBridgeParameters.setChecked(false);
		updateFilter(hideBridgeParameters);
		hideEnumerations.setChecked(false);
		updateFilter(hideEnumerations);
		hideEnumerators.setChecked(false);
		updateFilter(hideEnumerators);
		hideCoreDataTypes.setChecked(false);
		updateFilter(hideCoreDataTypes);
		hideEventDataItems.setChecked(false);
		updateFilter(hideEventDataItems);
		hideSequences.setChecked(false);
		updateFilter(hideSequences);
		hideInstances.setChecked(false);
		updateFilter(hideInstances);
		hideInformalInstanceAttributes.setChecked(false);
		updateFilter(hideInformalInstanceAttributes);
		hideInformalMessageArguments.setChecked(false);
		updateFilter(hideInformalMessageArguments);
		hideEventMessageArguments.setChecked(false);
		updateFilter(hideEventMessageArguments);
		hideFunctionMessageArguments.setChecked(false);
		updateFilter(hideFunctionMessageArguments);
		hideClassMessageArguments.setChecked(false);
		updateFilter(hideClassMessageArguments);
		hideBridgeMessageArguments.setChecked(false);
		updateFilter(hideBridgeMessageArguments);
		hideImportedClasses.setChecked(false);
		updateFilter(hideImportedClasses);
		hideImportedExternalEntities.setChecked(false);
		updateFilter(hideImportedExternalEntities);
		hideImportedFunctionPackages.setChecked(false);
		updateFilter(hideImportedFunctionPackages);
		hideImportedPackages.setChecked(false);
		updateFilter(hideImportedPackages);
		hideInformalClassAttributes.setChecked(false);
		updateFilter(hideInformalClassAttributes);
		hideFormalInstanceAttributes.setChecked(false);
		updateFilter(hideFormalInstanceAttributes);
		hideActors.setChecked(false);
		updateFilter(hideActors);
		hideIncomingSynchronousMessages.setChecked(false);
		updateFilter(hideIncomingSynchronousMessages);
		hideIncomingAsynchronousMessages.setChecked(false);
		updateFilter(hideIncomingAsynchronousMessages);
		hideIncomingReturnMessages.setChecked(false);
		updateFilter(hideIncomingReturnMessages);
		hideCommunications.setChecked(false);
		updateFilter(hideCommunications);
		hideUseCaseDiagrams.setChecked(false);
		updateFilter(hideUseCaseDiagrams);
		hideUseCases.setChecked(false);
		updateFilter(hideUseCases);
		hideActivities.setChecked(false);
		updateFilter(hideActivities);
		hideActions.setChecked(false);
		updateFilter(hideActions);
		hideObjectNodes.setChecked(false);
		updateFilter(hideObjectNodes);
		hideAcceptEventActions.setChecked(false);
		updateFilter(hideAcceptEventActions);
		hideSendSignalActions.setChecked(false);
		updateFilter(hideSendSignalActions);
		hideAcceptTimeEventActions.setChecked(false);
		updateFilter(hideAcceptTimeEventActions);
		hideInterfacePackages.setChecked(false);
		updateFilter(hideInterfacePackages);
		hideInterfaces.setChecked(false);
		updateFilter(hideInterfaces);
		hideSignals.setChecked(false);
		updateFilter(hideSignals);
		hideParameters.setChecked(false);
		updateFilter(hideParameters);
		hideComponentPackages.setChecked(false);
		updateFilter(hideComponentPackages);
		hideComponents.setChecked(false);
		updateFilter(hideComponents);
		hideProvidedInterfaces.setChecked(false);
		updateFilter(hideProvidedInterfaces);
		hideRequiredInterfaces.setChecked(false);
		updateFilter(hideRequiredInterfaces);
		hideRequiredInterfaceOperations.setChecked(false);
		updateFilter(hideRequiredInterfaceOperations);
		hideProvidedInterfaceOperations.setChecked(false);
		updateFilter(hideProvidedInterfaceOperations);
		hideRequiredInterfaceSignals.setChecked(false);
		updateFilter(hideRequiredInterfaceSignals);
		hideProvidedInterfaceSignals.setChecked(false);
		updateFilter(hideProvidedInterfaceSignals);
		hideInterfaceOperations.setChecked(false);
		updateFilter(hideInterfaceOperations);
		hideComponentReferences.setChecked(false);
		updateFilter(hideComponentReferences);
		hideStructuredDataTypes.setChecked(false);
		updateFilter(hideStructuredDataTypes);
		hideMembers.setChecked(false);
		updateFilter(hideMembers);
		hidePorts.setChecked(false);
		updateFilter(hidePorts);
		hideImportedProvidedInterfaces.setChecked(false);
		updateFilter(hideImportedProvidedInterfaces);
		hideImportedRequiredInterfaces.setChecked(false);
		updateFilter(hideImportedRequiredInterfaces);
		hideComponentParticipants.setChecked(false);
		updateFilter(hideComponentParticipants);
		hidePackages.setChecked(false);
		updateFilter(hidePackages);
		hideConstantSpecifications.setChecked(false);
		updateFilter(hideConstantSpecifications);
		hideLiteralSymbolicConstants.setChecked(false);
		updateFilter(hideLiteralSymbolicConstants);
		for (int i = 0; i < filters.length; i++) {
			if (filters[i].equals("System")) {
				hideSystem.setChecked(true);
				updateFilter(hideSystem);
			}
			if (filters[i].equals("Domains")) {
				hideDomains.setChecked(true);
				updateFilter(hideDomains);
			}
			if (filters[i].equals("Subsystems")) {
				hideSubsystems.setChecked(true);
				updateFilter(hideSubsystems);
			}
			if (filters[i].equals("Classes")) {
				hideClasses.setChecked(true);
				updateFilter(hideClasses);
			}
			if (filters[i].equals("Attributes")) {
				hideAttributes.setChecked(true);
				updateFilter(hideAttributes);
			}
			if (filters[i].equals("Operations")) {
				hideOperations.setChecked(true);
				updateFilter(hideOperations);
			}
			if (filters[i].equals("Operation Parameters")) {
				hideOperationParameters.setChecked(true);
				updateFilter(hideOperationParameters);
			}
			if (filters[i].equals("Instance State Machines")) {
				hideInstanceStateMachines.setChecked(true);
				updateFilter(hideInstanceStateMachines);
			}
			if (filters[i].equals("States")) {
				hideStates.setChecked(true);
				updateFilter(hideStates);
			}
			if (filters[i].equals("Events")) {
				hideEvents.setChecked(true);
				updateFilter(hideEvents);
			}
			if (filters[i].equals("Inherited Events")) {
				hideInheritedEvents.setChecked(true);
				updateFilter(hideInheritedEvents);
			}
			if (filters[i].equals("Delivered Events")) {
				hideDeliveredEvents.setChecked(true);
				updateFilter(hideDeliveredEvents);
			}
			if (filters[i].equals("State Machine Event Data Items")) {
				hideStateMachineEventDataItems.setChecked(true);
				updateFilter(hideStateMachineEventDataItems);
			}
			if (filters[i].equals("Class State Machines")) {
				hideClassStateMachines.setChecked(true);
				updateFilter(hideClassStateMachines);
			}
			if (filters[i].equals("Function Packages")) {
				hideFunctionPackages.setChecked(true);
				updateFilter(hideFunctionPackages);
			}
			if (filters[i].equals("Functions")) {
				hideFunctions.setChecked(true);
				updateFilter(hideFunctions);
			}
			if (filters[i].equals("Function Parameters")) {
				hideFunctionParameters.setChecked(true);
				updateFilter(hideFunctionParameters);
			}
			if (filters[i].equals("Data Type Packages")) {
				hideDataTypePackages.setChecked(true);
				updateFilter(hideDataTypePackages);
			}
			if (filters[i].equals("External Entity Packages")) {
				hideExternalEntityPackages.setChecked(true);
				updateFilter(hideExternalEntityPackages);
			}
			if (filters[i].equals("User Defined Data Types")) {
				hideUserDefinedDataTypes.setChecked(true);
				updateFilter(hideUserDefinedDataTypes);
			}
			if (filters[i].equals("External Entities")) {
				hideExternalEntities.setChecked(true);
				updateFilter(hideExternalEntities);
			}
			if (filters[i].equals("Bridge Operations")) {
				hideBridgeOperations.setChecked(true);
				updateFilter(hideBridgeOperations);
			}
			if (filters[i].equals("Bridge Parameters")) {
				hideBridgeParameters.setChecked(true);
				updateFilter(hideBridgeParameters);
			}
			if (filters[i].equals("Enumerations")) {
				hideEnumerations.setChecked(true);
				updateFilter(hideEnumerations);
			}
			if (filters[i].equals("Enumerators")) {
				hideEnumerators.setChecked(true);
				updateFilter(hideEnumerators);
			}
			if (filters[i].equals("Core Data Types")) {
				hideCoreDataTypes.setChecked(true);
				updateFilter(hideCoreDataTypes);
			}
			if (filters[i].equals("Event Data Items")) {
				hideEventDataItems.setChecked(true);
				updateFilter(hideEventDataItems);
			}
			if (filters[i].equals("Sequences")) {
				hideSequences.setChecked(true);
				updateFilter(hideSequences);
			}
			if (filters[i].equals("Instances")) {
				hideInstances.setChecked(true);
				updateFilter(hideInstances);
			}
			if (filters[i].equals("Informal Instance Attributes")) {
				hideInformalInstanceAttributes.setChecked(true);
				updateFilter(hideInformalInstanceAttributes);
			}
			if (filters[i].equals("Informal Message Arguments")) {
				hideInformalMessageArguments.setChecked(true);
				updateFilter(hideInformalMessageArguments);
			}
			if (filters[i].equals("Event Message Arguments")) {
				hideEventMessageArguments.setChecked(true);
				updateFilter(hideEventMessageArguments);
			}
			if (filters[i].equals("Function Message Arguments")) {
				hideFunctionMessageArguments.setChecked(true);
				updateFilter(hideFunctionMessageArguments);
			}
			if (filters[i].equals("Class Message Arguments")) {
				hideClassMessageArguments.setChecked(true);
				updateFilter(hideClassMessageArguments);
			}
			if (filters[i].equals("Bridge Message Arguments")) {
				hideBridgeMessageArguments.setChecked(true);
				updateFilter(hideBridgeMessageArguments);
			}
			if (filters[i].equals("Imported Classes")) {
				hideImportedClasses.setChecked(true);
				updateFilter(hideImportedClasses);
			}
			if (filters[i].equals("Imported External Entities")) {
				hideImportedExternalEntities.setChecked(true);
				updateFilter(hideImportedExternalEntities);
			}
			if (filters[i].equals("Imported Function Packages")) {
				hideImportedFunctionPackages.setChecked(true);
				updateFilter(hideImportedFunctionPackages);
			}
			if (filters[i].equals("Imported Packages")) {
				hideImportedPackages.setChecked(true);
				updateFilter(hideImportedPackages);
			}
			if (filters[i].equals("Informal Class Attributes")) {
				hideInformalClassAttributes.setChecked(true);
				updateFilter(hideInformalClassAttributes);
			}
			if (filters[i].equals("Formal Instance Attributes")) {
				hideFormalInstanceAttributes.setChecked(true);
				updateFilter(hideFormalInstanceAttributes);
			}
			if (filters[i].equals("Actors")) {
				hideActors.setChecked(true);
				updateFilter(hideActors);
			}
			if (filters[i].equals("Incoming Synchronous Messages")) {
				hideIncomingSynchronousMessages.setChecked(true);
				updateFilter(hideIncomingSynchronousMessages);
			}
			if (filters[i].equals("Incoming Asynchronous Messages")) {
				hideIncomingAsynchronousMessages.setChecked(true);
				updateFilter(hideIncomingAsynchronousMessages);
			}
			if (filters[i].equals("Incoming Return Messages")) {
				hideIncomingReturnMessages.setChecked(true);
				updateFilter(hideIncomingReturnMessages);
			}
			if (filters[i].equals("Communications")) {
				hideCommunications.setChecked(true);
				updateFilter(hideCommunications);
			}
			if (filters[i].equals("Use Case Diagrams")) {
				hideUseCaseDiagrams.setChecked(true);
				updateFilter(hideUseCaseDiagrams);
			}
			if (filters[i].equals("Use Cases")) {
				hideUseCases.setChecked(true);
				updateFilter(hideUseCases);
			}
			if (filters[i].equals("Activities")) {
				hideActivities.setChecked(true);
				updateFilter(hideActivities);
			}
			if (filters[i].equals("Actions")) {
				hideActions.setChecked(true);
				updateFilter(hideActions);
			}
			if (filters[i].equals("ObjectNodes")) {
				hideObjectNodes.setChecked(true);
				updateFilter(hideObjectNodes);
			}
			if (filters[i].equals("Accept Event Actions")) {
				hideAcceptEventActions.setChecked(true);
				updateFilter(hideAcceptEventActions);
			}
			if (filters[i].equals("Send Signal Actions")) {
				hideSendSignalActions.setChecked(true);
				updateFilter(hideSendSignalActions);
			}
			if (filters[i].equals("Accept Time Event Actions")) {
				hideAcceptTimeEventActions.setChecked(true);
				updateFilter(hideAcceptTimeEventActions);
			}
			if (filters[i].equals("Interface Packages")) {
				hideInterfacePackages.setChecked(true);
				updateFilter(hideInterfacePackages);
			}
			if (filters[i].equals("Interfaces")) {
				hideInterfaces.setChecked(true);
				updateFilter(hideInterfaces);
			}
			if (filters[i].equals("Signals")) {
				hideSignals.setChecked(true);
				updateFilter(hideSignals);
			}
			if (filters[i].equals("Parameters")) {
				hideParameters.setChecked(true);
				updateFilter(hideParameters);
			}
			if (filters[i].equals("Component Packages")) {
				hideComponentPackages.setChecked(true);
				updateFilter(hideComponentPackages);
			}
			if (filters[i].equals("Components")) {
				hideComponents.setChecked(true);
				updateFilter(hideComponents);
			}
			if (filters[i].equals("Provided Interfaces")) {
				hideProvidedInterfaces.setChecked(true);
				updateFilter(hideProvidedInterfaces);
			}
			if (filters[i].equals("Required Interfaces")) {
				hideRequiredInterfaces.setChecked(true);
				updateFilter(hideRequiredInterfaces);
			}
			if (filters[i].equals("Required Interface Operations")) {
				hideRequiredInterfaceOperations.setChecked(true);
				updateFilter(hideRequiredInterfaceOperations);
			}
			if (filters[i].equals("Provided Interface Operations")) {
				hideProvidedInterfaceOperations.setChecked(true);
				updateFilter(hideProvidedInterfaceOperations);
			}
			if (filters[i].equals("Required Interface Signals")) {
				hideRequiredInterfaceSignals.setChecked(true);
				updateFilter(hideRequiredInterfaceSignals);
			}
			if (filters[i].equals("Provided Interface Signals")) {
				hideProvidedInterfaceSignals.setChecked(true);
				updateFilter(hideProvidedInterfaceSignals);
			}
			if (filters[i].equals("Interface Operations")) {
				hideInterfaceOperations.setChecked(true);
				updateFilter(hideInterfaceOperations);
			}
			if (filters[i].equals("Component References")) {
				hideComponentReferences.setChecked(true);
				updateFilter(hideComponentReferences);
			}
			if (filters[i].equals("Structured Data Types")) {
				hideStructuredDataTypes.setChecked(true);
				updateFilter(hideStructuredDataTypes);
			}
			if (filters[i].equals("Members")) {
				hideMembers.setChecked(true);
				updateFilter(hideMembers);
			}
			if (filters[i].equals("Ports")) {
				hidePorts.setChecked(true);
				updateFilter(hidePorts);
			}
			if (filters[i].equals("Imported Provided Interfaces")) {
				hideImportedProvidedInterfaces.setChecked(true);
				updateFilter(hideImportedProvidedInterfaces);
			}
			if (filters[i].equals("Imported Required Interfaces")) {
				hideImportedRequiredInterfaces.setChecked(true);
				updateFilter(hideImportedRequiredInterfaces);
			}
			if (filters[i].equals("Component Participants")) {
				hideComponentParticipants.setChecked(true);
				updateFilter(hideComponentParticipants);
			}
			if (filters[i].equals("Packages")) {
				hidePackages.setChecked(true);
				updateFilter(hidePackages);
			}
			if (filters[i].equals("Constant Specifications")) {
				hideConstantSpecifications.setChecked(true);
				updateFilter(hideConstantSpecifications);
			}
			if (filters[i].equals("Literal Symbolic Constants")) {
				hideLiteralSymbolicConstants.setChecked(true);
				updateFilter(hideLiteralSymbolicConstants);
			}
		}
	}
	/**
	 * Update a single filter
	 */
	/* Multiple filters can be enabled at a time. */
	protected void updateFilter(Action action) {
		if (action == hideStatics) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterStatics);
			} else {
				treeViewer.removeFilter(filterStatics);
			}
			return;
		}
		if (action == hideSystem) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterSystem);
			} else {
				treeViewer.removeFilter(filterSystem);
			}
			return;
		}
		if (action == hideDomains) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterDomains);
			} else {
				treeViewer.removeFilter(filterDomains);
			}
			return;
		}
		if (action == hideSubsystems) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterSubsystems);
			} else {
				treeViewer.removeFilter(filterSubsystems);
			}
			return;
		}
		if (action == hideClasses) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterClasses);
			} else {
				treeViewer.removeFilter(filterClasses);
			}
			return;
		}
		if (action == hideAttributes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterAttributes);
			} else {
				treeViewer.removeFilter(filterAttributes);
			}
			return;
		}
		if (action == hideOperations) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterOperations);
			} else {
				treeViewer.removeFilter(filterOperations);
			}
			return;
		}
		if (action == hideOperationParameters) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterOperationParameters);
			} else {
				treeViewer.removeFilter(filterOperationParameters);
			}
			return;
		}
		if (action == hideInstanceStateMachines) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInstanceStateMachines);
			} else {
				treeViewer.removeFilter(filterInstanceStateMachines);
			}
			return;
		}
		if (action == hideStates) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterStates);
			} else {
				treeViewer.removeFilter(filterStates);
			}
			return;
		}
		if (action == hideEvents) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterEvents);
			} else {
				treeViewer.removeFilter(filterEvents);
			}
			return;
		}
		if (action == hideInheritedEvents) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInheritedEvents);
			} else {
				treeViewer.removeFilter(filterInheritedEvents);
			}
			return;
		}
		if (action == hideDeliveredEvents) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterDeliveredEvents);
			} else {
				treeViewer.removeFilter(filterDeliveredEvents);
			}
			return;
		}
		if (action == hideStateMachineEventDataItems) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterStateMachineEventDataItems);
			} else {
				treeViewer.removeFilter(filterStateMachineEventDataItems);
			}
			return;
		}
		if (action == hideClassStateMachines) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterClassStateMachines);
			} else {
				treeViewer.removeFilter(filterClassStateMachines);
			}
			return;
		}
		if (action == hideFunctionPackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterFunctionPackages);
			} else {
				treeViewer.removeFilter(filterFunctionPackages);
			}
			return;
		}
		if (action == hideFunctions) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterFunctions);
			} else {
				treeViewer.removeFilter(filterFunctions);
			}
			return;
		}
		if (action == hideFunctionParameters) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterFunctionParameters);
			} else {
				treeViewer.removeFilter(filterFunctionParameters);
			}
			return;
		}
		if (action == hideDataTypePackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterDataTypePackages);
			} else {
				treeViewer.removeFilter(filterDataTypePackages);
			}
			return;
		}
		if (action == hideExternalEntityPackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterExternalEntityPackages);
			} else {
				treeViewer.removeFilter(filterExternalEntityPackages);
			}
			return;
		}
		if (action == hideUserDefinedDataTypes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterUserDefinedDataTypes);
			} else {
				treeViewer.removeFilter(filterUserDefinedDataTypes);
			}
			return;
		}
		if (action == hideExternalEntities) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterExternalEntities);
			} else {
				treeViewer.removeFilter(filterExternalEntities);
			}
			return;
		}
		if (action == hideBridgeOperations) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterBridgeOperations);
			} else {
				treeViewer.removeFilter(filterBridgeOperations);
			}
			return;
		}
		if (action == hideBridgeParameters) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterBridgeParameters);
			} else {
				treeViewer.removeFilter(filterBridgeParameters);
			}
			return;
		}
		if (action == hideEnumerations) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterEnumerations);
			} else {
				treeViewer.removeFilter(filterEnumerations);
			}
			return;
		}
		if (action == hideEnumerators) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterEnumerators);
			} else {
				treeViewer.removeFilter(filterEnumerators);
			}
			return;
		}
		if (action == hideCoreDataTypes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterCoreDataTypes);
			} else {
				treeViewer.removeFilter(filterCoreDataTypes);
			}
			return;
		}
		if (action == hideEventDataItems) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterEventDataItems);
			} else {
				treeViewer.removeFilter(filterEventDataItems);
			}
			return;
		}
		if (action == hideSequences) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterSequences);
			} else {
				treeViewer.removeFilter(filterSequences);
			}
			return;
		}
		if (action == hideInstances) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInstances);
			} else {
				treeViewer.removeFilter(filterInstances);
			}
			return;
		}
		if (action == hideInformalInstanceAttributes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInformalInstanceAttributes);
			} else {
				treeViewer.removeFilter(filterInformalInstanceAttributes);
			}
			return;
		}
		if (action == hideInformalMessageArguments) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInformalMessageArguments);
			} else {
				treeViewer.removeFilter(filterInformalMessageArguments);
			}
			return;
		}
		if (action == hideEventMessageArguments) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterEventMessageArguments);
			} else {
				treeViewer.removeFilter(filterEventMessageArguments);
			}
			return;
		}
		if (action == hideFunctionMessageArguments) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterFunctionMessageArguments);
			} else {
				treeViewer.removeFilter(filterFunctionMessageArguments);
			}
			return;
		}
		if (action == hideClassMessageArguments) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterClassMessageArguments);
			} else {
				treeViewer.removeFilter(filterClassMessageArguments);
			}
			return;
		}
		if (action == hideBridgeMessageArguments) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterBridgeMessageArguments);
			} else {
				treeViewer.removeFilter(filterBridgeMessageArguments);
			}
			return;
		}
		if (action == hideImportedClasses) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterImportedClasses);
			} else {
				treeViewer.removeFilter(filterImportedClasses);
			}
			return;
		}
		if (action == hideImportedExternalEntities) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterImportedExternalEntities);
			} else {
				treeViewer.removeFilter(filterImportedExternalEntities);
			}
			return;
		}
		if (action == hideImportedFunctionPackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterImportedFunctionPackages);
			} else {
				treeViewer.removeFilter(filterImportedFunctionPackages);
			}
			return;
		}
		if (action == hideImportedPackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterImportedPackages);
			} else {
				treeViewer.removeFilter(filterImportedPackages);
			}
			return;
		}
		if (action == hideInformalClassAttributes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInformalClassAttributes);
			} else {
				treeViewer.removeFilter(filterInformalClassAttributes);
			}
			return;
		}
		if (action == hideFormalInstanceAttributes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterFormalInstanceAttributes);
			} else {
				treeViewer.removeFilter(filterFormalInstanceAttributes);
			}
			return;
		}
		if (action == hideActors) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterActors);
			} else {
				treeViewer.removeFilter(filterActors);
			}
			return;
		}
		if (action == hideIncomingSynchronousMessages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterIncomingSynchronousMessages);
			} else {
				treeViewer.removeFilter(filterIncomingSynchronousMessages);
			}
			return;
		}
		if (action == hideIncomingAsynchronousMessages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterIncomingAsynchronousMessages);
			} else {
				treeViewer.removeFilter(filterIncomingAsynchronousMessages);
			}
			return;
		}
		if (action == hideIncomingReturnMessages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterIncomingReturnMessages);
			} else {
				treeViewer.removeFilter(filterIncomingReturnMessages);
			}
			return;
		}
		if (action == hideCommunications) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterCommunications);
			} else {
				treeViewer.removeFilter(filterCommunications);
			}
			return;
		}
		if (action == hideUseCaseDiagrams) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterUseCaseDiagrams);
			} else {
				treeViewer.removeFilter(filterUseCaseDiagrams);
			}
			return;
		}
		if (action == hideUseCases) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterUseCases);
			} else {
				treeViewer.removeFilter(filterUseCases);
			}
			return;
		}
		if (action == hideActivities) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterActivities);
			} else {
				treeViewer.removeFilter(filterActivities);
			}
			return;
		}
		if (action == hideActions) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterActions);
			} else {
				treeViewer.removeFilter(filterActions);
			}
			return;
		}
		if (action == hideObjectNodes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterObjectNodes);
			} else {
				treeViewer.removeFilter(filterObjectNodes);
			}
			return;
		}
		if (action == hideAcceptEventActions) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterAcceptEventActions);
			} else {
				treeViewer.removeFilter(filterAcceptEventActions);
			}
			return;
		}
		if (action == hideSendSignalActions) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterSendSignalActions);
			} else {
				treeViewer.removeFilter(filterSendSignalActions);
			}
			return;
		}
		if (action == hideAcceptTimeEventActions) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterAcceptTimeEventActions);
			} else {
				treeViewer.removeFilter(filterAcceptTimeEventActions);
			}
			return;
		}
		if (action == hideInterfacePackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInterfacePackages);
			} else {
				treeViewer.removeFilter(filterInterfacePackages);
			}
			return;
		}
		if (action == hideInterfaces) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInterfaces);
			} else {
				treeViewer.removeFilter(filterInterfaces);
			}
			return;
		}
		if (action == hideSignals) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterSignals);
			} else {
				treeViewer.removeFilter(filterSignals);
			}
			return;
		}
		if (action == hideParameters) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterParameters);
			} else {
				treeViewer.removeFilter(filterParameters);
			}
			return;
		}
		if (action == hideComponentPackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterComponentPackages);
			} else {
				treeViewer.removeFilter(filterComponentPackages);
			}
			return;
		}
		if (action == hideComponents) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterComponents);
			} else {
				treeViewer.removeFilter(filterComponents);
			}
			return;
		}
		if (action == hideProvidedInterfaces) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterProvidedInterfaces);
			} else {
				treeViewer.removeFilter(filterProvidedInterfaces);
			}
			return;
		}
		if (action == hideRequiredInterfaces) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterRequiredInterfaces);
			} else {
				treeViewer.removeFilter(filterRequiredInterfaces);
			}
			return;
		}
		if (action == hideRequiredInterfaceOperations) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterRequiredInterfaceOperations);
			} else {
				treeViewer.removeFilter(filterRequiredInterfaceOperations);
			}
			return;
		}
		if (action == hideProvidedInterfaceOperations) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterProvidedInterfaceOperations);
			} else {
				treeViewer.removeFilter(filterProvidedInterfaceOperations);
			}
			return;
		}
		if (action == hideRequiredInterfaceSignals) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterRequiredInterfaceSignals);
			} else {
				treeViewer.removeFilter(filterRequiredInterfaceSignals);
			}
			return;
		}
		if (action == hideProvidedInterfaceSignals) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterProvidedInterfaceSignals);
			} else {
				treeViewer.removeFilter(filterProvidedInterfaceSignals);
			}
			return;
		}
		if (action == hideInterfaceOperations) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterInterfaceOperations);
			} else {
				treeViewer.removeFilter(filterInterfaceOperations);
			}
			return;
		}
		if (action == hideComponentReferences) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterComponentReferences);
			} else {
				treeViewer.removeFilter(filterComponentReferences);
			}
			return;
		}
		if (action == hideStructuredDataTypes) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterStructuredDataTypes);
			} else {
				treeViewer.removeFilter(filterStructuredDataTypes);
			}
			return;
		}
		if (action == hideMembers) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterMembers);
			} else {
				treeViewer.removeFilter(filterMembers);
			}
			return;
		}
		if (action == hidePorts) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterPorts);
			} else {
				treeViewer.removeFilter(filterPorts);
			}
			return;
		}
		if (action == hideImportedProvidedInterfaces) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterImportedProvidedInterfaces);
			} else {
				treeViewer.removeFilter(filterImportedProvidedInterfaces);
			}
			return;
		}
		if (action == hideImportedRequiredInterfaces) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterImportedRequiredInterfaces);
			} else {
				treeViewer.removeFilter(filterImportedRequiredInterfaces);
			}
			return;
		}
		if (action == hideComponentParticipants) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterComponentParticipants);
			} else {
				treeViewer.removeFilter(filterComponentParticipants);
			}
			return;
		}
		if (action == hidePackages) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterPackages);
			} else {
				treeViewer.removeFilter(filterPackages);
			}
			return;
		}
		if (action == hideConstantSpecifications) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterConstantSpecifications);
			} else {
				treeViewer.removeFilter(filterConstantSpecifications);
			}
			return;
		}
		if (action == hideLiteralSymbolicConstants) {
			if (action.isChecked()) {
				treeViewer.addFilter(filterLiteralSymbolicConstants);
			} else {
				treeViewer.removeFilter(filterLiteralSymbolicConstants);
			}
			return;
		}
	}
	/**
	 * Create the tool bar for the Model Explorer 
	 */
	protected void createToolbar() {
		IActionBars actionBars = getViewSite().getActionBars();
		actionBars.setGlobalActionHandler(ActionFactory.BACK.getId(), back);
		actionBars.setGlobalActionHandler(ActionFactory.FORWARD.getId(), fwd);
		actionBars.setGlobalActionHandler(ActionFactory.UP.getId(), up);
		IToolBarManager toolBarManager = actionBars.getToolBarManager();
		toolBarManager.add(back);
		toolBarManager.add(fwd);
		toolBarManager.add(up);
		toolBarManager.add(new Separator());
		toolBarManager.add(collapseAll);
		toolBarManager.add(linkWithEditor);
	}
	/*
	 * @see IWorkbenchPart#setFocus()
	 */
	public void setFocus() {
		Viewer viewer = getTreeViewer();
		if (viewer != null) {
			Control c = viewer.getControl();
			if (!c.isFocusControl()) {
				c.setFocus();
				c.update();
				viewer.refresh();
			}
		}
	}
	/**
	 * Returns an adapter if available
	 * @see IAdaptable#getAdapter
	 */
	public Object getAdapter(Class adapter) {
		if (adapter.equals(IPropertySheetPage.class)) {
			return getPropertySheet();
		}
		return super.getAdapter(adapter);
	}
	/**
	 * return a property sheet if available
	 */
	protected IPropertySheetPage getPropertySheet() {
		PropertySheetPage pss = new BridgepointPropertySheetPage();
		pss.setPropertySourceProvider(new ModelPropertySourceProvider());
		return pss;
	}
	/**
	 * Fire up an editor
	 */
	private IEditorPart handleOpen() {

		IStructuredSelection sel = selection.getStructuredSelection();
		if (sel.isEmpty()) {
			return null;
		}
		Object current = sel.iterator().next();
		// see if the current element should open
		// something other than itself
		current = EditorUtil.getElementToEdit(current);

		String name = current.getClass().getName();
		//
		// Get the registry
		//
		IExtensionRegistry reg = Platform.getExtensionRegistry();
		//
		// Get all the plugins that have extended this point
		//
		IExtensionPoint extPt = reg
				.getExtensionPoint("com.mentor.nucleus.bp.core.editors"); //$NON-NLS-1$
		IExtension[] exts = extPt.getExtensions();
		// Repeat for each extension until we find a default editor
		for (int i = 0; i < exts.length; i++) {
			IConfigurationElement[] elems = exts[i].getConfigurationElements();
			for (int j = 0; j < elems.length; j++) {
				// Find the editor elements
				if (elems[j].getName().equals("editor")) { //$NON-NLS-1$
					IConfigurationElement[] edElems = elems[j].getChildren();
					for (int k = 0; k < edElems.length; k++) {
						//
						// Is this editor the default for the current model element ?
						//
						if (edElems[k].getName().equals("defaultFor") && //$NON-NLS-1$
								edElems[k].getAttribute("class").equals(name)) { //$NON-NLS-1$
							try {
								//
								// Get the class supplied for the input
								//
								Bundle bundle = Platform
										.getBundle(elems[j]
												.getDeclaringExtension()
												.getNamespace());
								Class inputClass = bundle.loadClass(elems[j]
										.getAttribute("input"));//$NON-NLS-1$
								Class[] type = new Class[1];
								type[0] = Object.class;
								//
								// Dynamically get the method createInstance, the supplied class must implement this
								//
								Method createInstanceMethod = inputClass
										.getMethod("createInstance", type); //$NON-NLS-1$
								Object[] args = new Object[1];
								args[0] = current;
								//
								// Invoke the method.
								// The method is static; no instance is needed, so first argument is null
								//
								IEditorInput input = (IEditorInput) createInstanceMethod
										.invoke(null, args);
								//
								// pass the input to the Eclipse editor, along with the class name supplied by
								// the extending plugin.
								//
								if (input != null) {
									return PlatformUI
											.getWorkbench()
											.getActiveWorkbenchWindow()
											.getActivePage()
											.openEditor(
													input,
													elems[j].getAttribute("class")); //$NON-NLS-1$
								}
								return null;
							} catch (ClassNotFoundException e) {
								ExplorerPlugin.logError(
										"Input Class not found", e);//$NON-NLS-1$
							} catch (NoSuchMethodException e) {
								ExplorerPlugin
										.logError(
												"Class does not implement static method createInstance", e);//$NON-NLS-1$
							} catch (InvocationTargetException e) {
								// In the situation where an attempt is made to open an activity editor on an Attribute,
								// we ignore the error.  The reason is that this model element has 2 different editors
								// associated with.  When it is a MDA we open the activity editor, when it is not an
								// MDA we still try to open the activity editor, but there is not one and this exception
								// gets thrown.  We ignore the exception in this situation, and the description editor is
								// then opened as it should be.
								boolean ignoreError = (elems[j].getAttribute(
										"input")
										.contains("ActivityEditorInput") && name
										.contains("Attribute_c"));
								if (!ignoreError) {
									ExplorerPlugin
											.logError(
													"Exception occured on invocation of static method createInstance of the Target", e.getTargetException());//$NON-NLS-1$
								}
							} catch (IllegalAccessException e) {
								ExplorerPlugin
										.logError(
												"Target does not support static method createInstance", e);//$NON-NLS-1$
							} catch (PartInitException e) {
								ExplorerPlugin.logError(
										"Could not activate Editor", e);//$NON-NLS-1$
							}
						}
					}
				}
			}
		}

		return null;
	}
	/**
	 * Dispose of the Explorer widget
	 */
	public void dispose() {
		super.dispose();
		Ooaofooa.removeModelChangeListenerFromAll(m_modelChangeListener);
		TransactionManager.getSingleton().removeTransactionListener(
				m_transactionListener);
		selection.removeSelectionChangedListener(m_selChangedListener);
		getSite().getPage().removePartListener(m_partListener);
		getTreeViewer().removePostSelectionChangedListener(
				m_postSelectionChangedListener);
	}
	/**
	 * Initialize the Label provider to link it into the chain 
	 * of platform label decorators.
	 */
	protected void initLabelProvider(TreeViewer viewer) {
		viewer.setLabelProvider(new DecoratingLabelProvider(
				(ILabelProvider) viewer.getLabelProvider(), CorePlugin
						.getDefault().getWorkbench().getDecoratorManager()
						.getLabelDecorator()));
	}

	/**
	 * Sets whether this explorer's selection is linked to that of the 
	 * whichever editor is currently open.  This method is used by
	 * automated test programs to simulate pressing/unpressing the 
	 * "Link with Editor" button of the explorer.
	 */
	public void setLinkWithEditor(boolean link) {
		linkWithEditor.setChecked(link);
	}
	/**
	 * Has this explorer-view behave as if its open-action was just
	 * invoked.  Returns the editor that was opened.  For automated test purposes.
	 */
	public IEditorPart doOpen() {
		return handleOpen();
	}

	/**
	 * Has this explorer-view behave as if its delete-action was just
	 * invoked.  For automated test purposes.
	 */
	public void doDelete() {
		delete.run();
	}
	/**
	 * To disable or Enable rename and delete actions
	 * 
	 */
	private void keyActionsActivation() {
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		Object context = structuredSelection.getFirstElement();
		if (context instanceof NonRootModelElement) {
			rename.setEnabled(RenameAction.canRenameAction());
		}
		boolean enableDel = false;
		IStructuredSelection selection = Selection.getInstance()
				.getStructuredSelection();
		if (!selection.isEmpty()) {
			enableDel = true;
			// Iterate through removing elements that are only graphical
			for (Iterator iter = selection.iterator(); iter.hasNext();) {
				Object current = iter.next();
				if (!(current instanceof NonRootModelElement)) {
					enableDel = false;
					break;
				}
			}

		}
		if (enableDel) {
			delete.setEnabled(DeleteAction.canDeleteAction());
		} else {
			delete.setEnabled(enableDel);
		}
	}
}
