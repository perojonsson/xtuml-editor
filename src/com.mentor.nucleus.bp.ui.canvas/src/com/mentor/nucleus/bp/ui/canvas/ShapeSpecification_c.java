      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ShapeSpecification_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SHAPE_SPECIFICATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ShapeSpecification_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ShapeSpecification_c(ModelRoot modelRoot,
       int  p_m_ooa_type)
  {
    super(modelRoot);
       m_ooa_type = p_m_ooa_type;
        
  }
  static public ShapeSpecification_c createProxy(ModelRoot modelRoot,
       int  p_m_ooa_type, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);
      ShapeSpecification_c new_inst = null;
      synchronized(instances) {
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_ooa_type = p_m_ooa_type;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ShapeSpecification_c(modelRoot,
p_m_ooa_type
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ShapeSpecification_c resolveInstance(ModelRoot modelRoot,
       int  p_m_ooa_type){
    InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);
    ShapeSpecification_c source = null;
    synchronized(instances) {
        Object [] key = {
        new UUID(0, new Long(p_m_ooa_type))
            };
        source = (ShapeSpecification_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_ooa_type = p_m_ooa_type;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ShapeSpecification_c new_inst = new ShapeSpecification_c(modelRoot,
p_m_ooa_type
);
    return new_inst;
  }
  public ShapeSpecification_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
  }




  public boolean equals (Object elem) {
     if (!(elem instanceof ShapeSpecification_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ShapeSpecification_c)) {
           return false;
       }
       
       ShapeSpecification_c me = (ShapeSpecification_c)elem;
      if (getOoa_type() != ((ShapeSpecification_c)elem).getOoa_type()) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ShapeSpecification_c)) {
           return false;
       }
       
       ShapeSpecification_c me = (ShapeSpecification_c)elem;
      if (getOoa_typeCachedValue() != ((ShapeSpecification_c)elem).getOoa_typeCachedValue()) return false;
      return true;
    }


  // Attributes
  private int  m_ooa_type ;
      
// declare association references from this class
  
  
    
// referring navigation

ElementSpecification_c IsSupertypeElementSpecification ;
public void relateAcrossR200To(ElementSpecification_c target)
{
	relateAcrossR200To(target, true);
}
public void relateAcrossR200To(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeElementSpecification) return;  // already related

    if ( IsSupertypeElementSpecification != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeElementSpecification != null) {
    
        IsSupertypeElementSpecification.clearBackPointerR200To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ShapeSpecification_c.relateAcrossR200To(ElementSpecification_c target)", 
			"Relate performed across R200 from Shape Specification to Element Specification without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeElementSpecification = target ;
        m_ooa_type = target.getOoa_type();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR200To(this);
        target.addRef();
    }
}
public void unrelateAcrossR200From(ElementSpecification_c target)
{
	unrelateAcrossR200From(target, true);
}
public void unrelateAcrossR200From(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeElementSpecification == null) return;  // already unrelated
	
	if (target != IsSupertypeElementSpecification) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R200", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR200To(this);
    }
    

      if(IsSupertypeElementSpecification != null) {
      
        m_ooa_type = IsSupertypeElementSpecification.getOoa_type();
        IsSupertypeElementSpecification = null ;
        target.removeRef();
    }
}

  
    
      
public static ShapeSpecification_c getOneTS_SSPOnR200(ElementSpecification_c [] targets)
{
    return getOneTS_SSPOnR200(targets, null);
}

public static ShapeSpecification_c getOneTS_SSPOnR200(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
    ShapeSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneTS_SSPOnR200(targets[i], test);
        }
    }

    return ret_val;
}

public static ShapeSpecification_c getOneTS_SSPOnR200(ElementSpecification_c target)
{
  return getOneTS_SSPOnR200(target, null);
}

public static ShapeSpecification_c getOneTS_SSPOnR200(ElementSpecification_c target, boolean loadComponent)
{
      return getOneTS_SSPOnR200(Ooaofgraphics.getDefaultInstance(), target, null, loadComponent);
}

public static ShapeSpecification_c getOneTS_SSPOnR200(ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneTS_SSPOnR200(Ooaofgraphics.getDefaultInstance(), target, test);
  }
  return null;
}

public static ShapeSpecification_c getOneTS_SSPOnR200(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
	return getOneTS_SSPOnR200(modelRoot, target, test, true);
}

public static ShapeSpecification_c getOneTS_SSPOnR200(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneTS_SSPOnR200(modelRoot,target,test);
}
private static ShapeSpecification_c find_getOneTS_SSPOnR200(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ShapeSpecification_c source = (ShapeSpecification_c)target.backPointer_IsSubtypeShapeSpecificationIsSubtype_R200;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR200(ElementSpecification_c [] targets)
{
  return getManyTS_SSPsOnR200(targets, null);
}
public static ShapeSpecification_c [] getManyTS_SSPsOnR200(ElementSpecification_c [] targets, boolean loadComponent)
{
  return getManyTS_SSPsOnR200(targets, null, loadComponent);
}
public static ShapeSpecification_c [] getManyTS_SSPsOnR200(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
	return getManyTS_SSPsOnR200(targets, test, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR200(ElementSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ShapeSpecification_c[0];

  ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();
 
   InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ShapeSpecification_c source = (ShapeSpecification_c)targets[i].backPointer_IsSubtypeShapeSpecificationIsSubtype_R200;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ShapeSpecification_c[] ret_set = new ShapeSpecification_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ShapeSpecification_c[0];
  }
  }

public static ShapeSpecification_c [] getManyTS_SSPsOnR200(ElementSpecification_c target)
{
  if (target != null) {
    ElementSpecification_c [] targetArray = new ElementSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_SSPsOnR200(targetArray);
  } else {
    ShapeSpecification_c [] result = new ShapeSpecification_c [0] ;
  return result ;
}
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR200(ElementSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    ElementSpecification_c [] targetArray = new ElementSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_SSPsOnR200(targetArray, loadComponent);
  } else {
    ShapeSpecification_c [] result = new ShapeSpecification_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ShapeTerminal_c> backPointer_ShapeTerminal_R204 = new ArrayList<ShapeTerminal_c>();

public void setShapeTerminalOrderInChildListR204(ShapeTerminal_c target, int index) {
	unrelateAcrossR204From(target);
	ShapeTerminal_c[] elements = ShapeTerminal_c.getManyTS_SHTsOnR204(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR204From((ShapeTerminal_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR204To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR204To((ShapeTerminal_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR204To(ShapeTerminal_c target)
{
  if (target != null) {
    target.relateAcrossR204To(this, true) ;
  }
}

public void relateAcrossR204To(ShapeTerminal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR204To(this, notifyChanges) ;
  }
}

public void setBackPointerR204To(ShapeTerminal_c target)
{
  	synchronized (backPointer_ShapeTerminal_R204) {
		backPointer_ShapeTerminal_R204.add(target);
	}
}

public void unrelateAcrossR204From(ShapeTerminal_c target)
{
  if (target != null) {
    target.unrelateAcrossR204From(this, true) ;
  }
}

public void unrelateAcrossR204From(ShapeTerminal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR204From(this, notifyChanges) ;
  }
}

public void clearBackPointerR204To(ShapeTerminal_c target)
{
  synchronized (backPointer_ShapeTerminal_R204) {
	    backPointer_ShapeTerminal_R204.remove(target);
	}
}

public static ShapeSpecification_c getOneTS_SSPOnR204(ShapeTerminal_c [] targets)
{
    return getOneTS_SSPOnR204(targets, null);
}

public static ShapeSpecification_c getOneTS_SSPOnR204(ShapeTerminal_c [] targets, ClassQueryInterface_c test)
{
    return getOneTS_SSPOnR204(targets, test, true);
}

public static ShapeSpecification_c getOneTS_SSPOnR204(ShapeTerminal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ShapeSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ShapeSpecification_c candidate_val = getOneTS_SSPOnR204(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneTS_SSPOnR204(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ShapeSpecification_c getOneTS_SSPOnR204(ShapeTerminal_c target)
{
	return getOneTS_SSPOnR204(target, true);
}
public static ShapeSpecification_c getOneTS_SSPOnR204(ShapeTerminal_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SpecifiesTerminationOnShapeSpecification ;
  } else {
    return null;
  }
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyTS_SSPsOnR204(targets, test, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ShapeSpecification_c[0];
  
  
  LinkedHashSet<ShapeSpecification_c> elementsSet = new LinkedHashSet<ShapeSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
    ShapeSpecification_c associate = targets[i].SpecifiesTerminationOnShapeSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ShapeSpecification_c[] result = new ShapeSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c [] targets)
{
  return getManyTS_SSPsOnR204(targets, null);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ShapeTerminal_c [] targetArray = new ShapeTerminal_c[1];
    targetArray[0] = target;
    return getManyTS_SSPsOnR204(targetArray, test, loadComponent);
  } else {
    ShapeSpecification_c [] result = new ShapeSpecification_c [0] ;
    return result ;
  }
  
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c target,
    ClassQueryInterface_c test)
{
    return getManyTS_SSPsOnR204(target, null, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c target)
{
    return getManyTS_SSPsOnR204(target, null, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR204(ShapeTerminal_c target, boolean loadComponent)
{
    return getManyTS_SSPsOnR204(target, null, loadComponent);
}


    
  
  
// referred to navigation

NoncontainingShapeSpecification_c backPointer_IsSubtypeNoncontainingShapeSpecificationIsSubtype_R208;

public void setNoncontainingShapeSpecificationOrderInChildListR208(NoncontainingShapeSpecification_c target, int index) {
	unrelateAcrossR208From(target);
	NoncontainingShapeSpecification_c[] elements = NoncontainingShapeSpecification_c.getManyTS_NCSsOnR208(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR208From((NoncontainingShapeSpecification_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR208To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR208To((NoncontainingShapeSpecification_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR208To(NoncontainingShapeSpecification_c target)
{
  if (target != null) {
    target.relateAcrossR208To(this, true) ;
  }
}

public void relateAcrossR208To(NoncontainingShapeSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR208To(this, notifyChanges) ;
  }
}

public void setBackPointerR208To(NoncontainingShapeSpecification_c target)
{
    backPointer_IsSubtypeNoncontainingShapeSpecificationIsSubtype_R208 = target;
}

public void unrelateAcrossR208From(NoncontainingShapeSpecification_c target)
{
  if (target != null) {
    target.unrelateAcrossR208From(this, true) ;
  }
}

public void unrelateAcrossR208From(NoncontainingShapeSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR208From(this, notifyChanges) ;
  }
}

public void clearBackPointerR208To(NoncontainingShapeSpecification_c target)
{
	if (target == backPointer_IsSubtypeNoncontainingShapeSpecificationIsSubtype_R208) {
		backPointer_IsSubtypeNoncontainingShapeSpecificationIsSubtype_R208 = null;
	}
}

public static ShapeSpecification_c getOneTS_SSPOnR208(NoncontainingShapeSpecification_c [] targets)
{
    return getOneTS_SSPOnR208(targets, null);
}

public static ShapeSpecification_c getOneTS_SSPOnR208(NoncontainingShapeSpecification_c [] targets, ClassQueryInterface_c test)
{
    return getOneTS_SSPOnR208(targets, test, true);
}

public static ShapeSpecification_c getOneTS_SSPOnR208(NoncontainingShapeSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ShapeSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ShapeSpecification_c candidate_val = getOneTS_SSPOnR208(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneTS_SSPOnR208(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ShapeSpecification_c getOneTS_SSPOnR208(NoncontainingShapeSpecification_c target)
{
	return getOneTS_SSPOnR208(target, true);
}
public static ShapeSpecification_c getOneTS_SSPOnR208(NoncontainingShapeSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeShapeSpecification ;
  } else {
    return null;
  }
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyTS_SSPsOnR208(targets, test, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ShapeSpecification_c[0];
  
  
  LinkedHashSet<ShapeSpecification_c> elementsSet = new LinkedHashSet<ShapeSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
    ShapeSpecification_c associate = targets[i].IsSupertypeShapeSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ShapeSpecification_c[] result = new ShapeSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c [] targets)
{
  return getManyTS_SSPsOnR208(targets, null);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    NoncontainingShapeSpecification_c [] targetArray = new NoncontainingShapeSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_SSPsOnR208(targetArray, test, loadComponent);
  } else {
    ShapeSpecification_c [] result = new ShapeSpecification_c [0] ;
    return result ;
  }
  
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c target,
    ClassQueryInterface_c test)
{
    return getManyTS_SSPsOnR208(target, null, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c target)
{
    return getManyTS_SSPsOnR208(target, null, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(NoncontainingShapeSpecification_c target, boolean loadComponent)
{
    return getManyTS_SSPsOnR208(target, null, loadComponent);
}

  
  
  
// referred to navigation

ContainingShapeSpecification_c backPointer_IsSubtypeContainingShapeSpecificationIsSubtype_R208;

public void setContainingShapeSpecificationOrderInChildListR208(ContainingShapeSpecification_c target, int index) {
	unrelateAcrossR208From(target);
	ContainingShapeSpecification_c[] elements = ContainingShapeSpecification_c.getManyTS_CTRsOnR208(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR208From((ContainingShapeSpecification_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR208To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR208To((ContainingShapeSpecification_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR208To(ContainingShapeSpecification_c target)
{
  if (target != null) {
    target.relateAcrossR208To(this, true) ;
  }
}

public void relateAcrossR208To(ContainingShapeSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR208To(this, notifyChanges) ;
  }
}

public void setBackPointerR208To(ContainingShapeSpecification_c target)
{
    backPointer_IsSubtypeContainingShapeSpecificationIsSubtype_R208 = target;
}

public void unrelateAcrossR208From(ContainingShapeSpecification_c target)
{
  if (target != null) {
    target.unrelateAcrossR208From(this, true) ;
  }
}

public void unrelateAcrossR208From(ContainingShapeSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR208From(this, notifyChanges) ;
  }
}

public void clearBackPointerR208To(ContainingShapeSpecification_c target)
{
	if (target == backPointer_IsSubtypeContainingShapeSpecificationIsSubtype_R208) {
		backPointer_IsSubtypeContainingShapeSpecificationIsSubtype_R208 = null;
	}
}

public static ShapeSpecification_c getOneTS_SSPOnR208(ContainingShapeSpecification_c [] targets)
{
    return getOneTS_SSPOnR208(targets, null);
}

public static ShapeSpecification_c getOneTS_SSPOnR208(ContainingShapeSpecification_c [] targets, ClassQueryInterface_c test)
{
    return getOneTS_SSPOnR208(targets, test, true);
}

public static ShapeSpecification_c getOneTS_SSPOnR208(ContainingShapeSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ShapeSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ShapeSpecification_c candidate_val = getOneTS_SSPOnR208(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneTS_SSPOnR208(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ShapeSpecification_c getOneTS_SSPOnR208(ContainingShapeSpecification_c target)
{
	return getOneTS_SSPOnR208(target, true);
}
public static ShapeSpecification_c getOneTS_SSPOnR208(ContainingShapeSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeShapeSpecification ;
  } else {
    return null;
  }
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyTS_SSPsOnR208(targets, test, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ShapeSpecification_c[0];
  
  
  LinkedHashSet<ShapeSpecification_c> elementsSet = new LinkedHashSet<ShapeSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
    ShapeSpecification_c associate = targets[i].IsSupertypeShapeSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ShapeSpecification_c[] result = new ShapeSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c [] targets)
{
  return getManyTS_SSPsOnR208(targets, null);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ContainingShapeSpecification_c [] targetArray = new ContainingShapeSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_SSPsOnR208(targetArray, test, loadComponent);
  } else {
    ShapeSpecification_c [] result = new ShapeSpecification_c [0] ;
    return result ;
  }
  
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c target,
    ClassQueryInterface_c test)
{
    return getManyTS_SSPsOnR208(target, null, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c target)
{
    return getManyTS_SSPsOnR208(target, null, true);
}

public static ShapeSpecification_c [] getManyTS_SSPsOnR208(ContainingShapeSpecification_c target, boolean loadComponent)
{
    return getManyTS_SSPsOnR208(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R200
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ElementSpecification_c.class);
      ElementSpecification_c relInst21987 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ElementSpecification_c source = (ElementSpecification_c)cursor.next() ;
           if (     source.getOoa_type() == m_ooa_type 		){
  		relInst21987 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst21987 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21987) && !isProxy())) {
	      relInst21987.relateAcrossR200To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R200
      // GD_ES
		  inst=IsSupertypeElementSpecification;
			unrelateAcrossR200From(IsSupertypeElementSpecification, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ShapeSpecification_c inst = (ShapeSpecification_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ShapeSpecification_c ShapeSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ShapeSpecification_c result=findShapeSpecificationInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static ShapeSpecification_c findShapeSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ShapeSpecification_c x = (ShapeSpecification_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static ShapeSpecification_c ShapeSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ShapeSpecificationInstance(modelRoot,test,true);
  }
  
  public static ShapeSpecification_c ShapeSpecificationInstance(ModelRoot modelRoot)
  {
	 return ShapeSpecificationInstance(modelRoot,null,true);
  }

  public static ShapeSpecification_c [] ShapeSpecificationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(ShapeSpecification_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ShapeSpecification_c x = (ShapeSpecification_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ShapeSpecification_c[] ret_set = new ShapeSpecification_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ShapeSpecification_c[0];
			}		
		} 
  }
  public static ShapeSpecification_c [] ShapeSpecificationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ShapeSpecificationInstances(modelRoot,test,true);
  }
  public static ShapeSpecification_c [] ShapeSpecificationInstances(ModelRoot modelRoot)
  {
	return ShapeSpecificationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Shape Specification.dispose call: ";
	ShapeTerminal_c testR204Inst = ShapeTerminal_c.getOneTS_SHTOnR204(this, false);

	if ( testR204Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "204 ";	
	}
	ElementSpecification_c testR200Inst1 = ElementSpecification_c.getOneGD_ESOnR200(this, false);

	if ( testR200Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "200 ";
	}
	NoncontainingShapeSpecification_c testR208Inst1 = NoncontainingShapeSpecification_c.getOneTS_NCSOnR208(this, false);

	if ( testR208Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "208 ";
	}
	ContainingShapeSpecification_c testR208Inst2 = ContainingShapeSpecification_c.getOneTS_CTROnR208(this, false);

	if ( testR208Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "208 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Shape Specification", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      return false;      
  }      
  // declare attribute accessors
  public int getOoa_type()
  {
    if ( IsSupertypeElementSpecification != null )
    {
      return IsSupertypeElementSpecification.getOoa_type();
    }
    return 0;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeElementSpecification != null );
 
 }                  

  public int getOoa_typeCachedValue()
  {
      return m_ooa_type;
  }
  
  public void setOoa_type(int newValue)
  {
   m_ooa_type = newValue ;
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Shape Specification", //$NON-NLS-1$
	  " Operation entered: Shape Specification::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ShapeSpecification_c [] objs = ShapeSpecification_c.ShapeSpecificationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Shape Specification", //$NON-NLS-1$
	  " Operation entered: Shape Specification::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ShapeSpecification_c_test21989_c implements ClassQueryInterface_c
    {
	  ShapeSpecification_c_test21989_c( int     p21990 ) {
	  m_p21990 = p21990;
	  }
	  private int      m_p21990; 
	  public boolean evaluate (Object candidate)
	  {
	      ShapeSpecification_c selected = (ShapeSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p21990));
	      return retval;
	  }
    }

    ShapeSpecification_c [] objs21988 = 
    ShapeSpecification_c.ShapeSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ShapeSpecification_c_test21989_c(getOoa_type())) ;

    if ( (  (objs21988.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Specification", //$NON-NLS-1$
           "Consistency: Object: Shape Specification: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21988.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Specification: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21988.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21988.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Specification", //$NON-NLS-1$
           "Consistency: Object: Shape Specification: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21988.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Specification: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21988.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Shape Specification is a subtype in association: rel.Numb = 200
          // The supertype class is: Element Specification
    class ElementSpecification_c_test21994_c implements ClassQueryInterface_c
    {
	  ElementSpecification_c_test21994_c( int     p21995 ) {
	  m_p21995 = p21995;
	  }
	  private int      m_p21995; 
	  public boolean evaluate (Object candidate)
	  {
	      ElementSpecification_c selected = (ElementSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p21995));
	      return retval;
	  }
    }

    ElementSpecification_c [] objs21993 = 
    ElementSpecification_c.ElementSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ElementSpecification_c_test21994_c(getOoa_type())) ;

    if ( (  (objs21993.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Specification", //$NON-NLS-1$
           "Consistency: Object: Shape Specification: Association: 200: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21993.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Specification: Association: 200: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21993.length )  , e); 
      }
      retval = false;

    }

          // Shape Specification is a participating class in association: rel.Numb = 204
             // Object: Shape Terminal
          // Supertype: rel.Numb = 208
    int objs21996 = 0;
            // Subtype Object: NonContaining Shape Specification
    class NoncontainingShapeSpecification_c_test21997_c implements ClassQueryInterface_c
    {
	  NoncontainingShapeSpecification_c_test21997_c( int     p21998 ) {
	  m_p21998 = p21998;
	  }
	  private int      m_p21998; 
	  public boolean evaluate (Object candidate)
	  {
	      NoncontainingShapeSpecification_c selected = (NoncontainingShapeSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p21998));
	      return retval;
	  }
    }

    NoncontainingShapeSpecification_c [] objs21999 = 
    NoncontainingShapeSpecification_c.NoncontainingShapeSpecificationInstances(modelRoot, new NoncontainingShapeSpecification_c_test21997_c(getOoa_type())) ;
 
    objs21996 = objs21996 + objs21999.length;
            // Subtype Object: Containing Shape Specification
    class ContainingShapeSpecification_c_test22000_c implements ClassQueryInterface_c
    {
	  ContainingShapeSpecification_c_test22000_c( int     p22001 ) {
	  m_p22001 = p22001;
	  }
	  private int      m_p22001; 
	  public boolean evaluate (Object candidate)
	  {
	      ContainingShapeSpecification_c selected = (ContainingShapeSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p22001));
	      return retval;
	  }
    }

    ContainingShapeSpecification_c [] objs22002 = 
    ContainingShapeSpecification_c.ContainingShapeSpecificationInstances(modelRoot, new ContainingShapeSpecification_c_test22000_c(getOoa_type())) ;
 
    objs21996 = objs21996 + objs22002.length;
    if ( objs21996 != 1 )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Specification", //$NON-NLS-1$
           "Consistency: Object: Shape Specification: Association: 208: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21996 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Specification: Association: 208: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21996 )  , e); 
      }
      retval = false;

    }

    return retval;
  }



  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Shape Specification
