      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ShapeTool_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SHAPE_TOOL extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}
  class EV_SHAPE_TOOL_ACTIVATED extends EV_SHAPE_TOOL
  {
    // supplemental event data
    static final int EVCD_SHAPE_TOOL_ACTIVATED = 5 ;
    public final int getEvtcode()
    {
      return EVCD_SHAPE_TOOL_ACTIVATED ;
    }
  }
  class EV_SHAPE_TOOL_DEACTIVATED extends EV_SHAPE_TOOL
  {
    // supplemental event data
    static final int EVCD_SHAPE_TOOL_DEACTIVATED = 6 ;
    public final int getEvtcode()
    {
      return EVCD_SHAPE_TOOL_DEACTIVATED ;
    }
  }
  class EV_SHAPE_TOOL_DONE extends EV_SHAPE_TOOL
  {
    // supplemental event data
    static final int EVCD_SHAPE_TOOL_DONE = 4 ;
    public final int getEvtcode()
    {
      return EVCD_SHAPE_TOOL_DONE ;
    }
  }
  class EV_SHAPE_TOOL_MOUSE_RELEASED extends EV_SHAPE_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_SHAPE_TOOL_MOUSE_RELEASED = 2 ;
    public final int getEvtcode()
    {
      return EVCD_SHAPE_TOOL_MOUSE_RELEASED ;
    }
  }
  class EV_SHAPE_TOOL_MOUSE_MOVED extends EV_SHAPE_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_SHAPE_TOOL_MOUSE_MOVED = 3 ;
    public final int getEvtcode()
    {
      return EVCD_SHAPE_TOOL_MOUSE_MOVED ;
    }
  }
  class EV_SHAPE_TOOL_MOUSE_PRESSED extends EV_SHAPE_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_SHAPE_TOOL_MOUSE_PRESSED = 1 ;
    public final int getEvtcode()
    {
      return EVCD_SHAPE_TOOL_MOUSE_PRESSED ;
    }
  }

public class ShapeTool_c extends NonRootModelElement implements timerClient_c, ActiveObject_c, IAdaptable, Cloneable
{
  // Public Constructors
  public ShapeTool_c(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       Transaction p_m_current_transaction)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       // default value for m_current_state
       m_current_transaction = p_m_current_transaction;
        
    // register with event queue poller
    Activepoller_c.register(this) ;
    Object [] key = {m_tool_id};
    addInstanceToMap(key);
  }
  static public ShapeTool_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       Transaction p_m_current_transaction, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);
      ShapeTool_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_tool_id};
          new_inst = (ShapeTool_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       // default value for m_current_state
       new_inst.m_current_transaction = p_m_current_transaction;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ShapeTool_c(modelRoot,
p_m_tool_id,
p_m_current_transaction
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ShapeTool_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       Transaction p_m_current_transaction){
    InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);
    ShapeTool_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_tool_id
            };
        source = (ShapeTool_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       // default value for m_current_state
       source.m_current_transaction = p_m_current_transaction;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ShapeTool_c new_inst = new ShapeTool_c(modelRoot,
p_m_tool_id,
p_m_current_transaction
);
    return new_inst;
  }
  public ShapeTool_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_tool_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_tool_id};
    addInstanceToMap(key);
    // register with event queue poller
    Activepoller_c.register(this) ;
  }

  public Object getInstanceKey() {
    Object [] key =  {m_tool_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_tool_id !=  p_newKey ){
	
		m_tool_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  


  // Run Entry Point
  public boolean poll()
  {
      if (!eventQueue.isEmpty() || !selfEventQueue.isEmpty())
      { // an event queue is not empty
        procEvent() ;
        return true;
      } else {
        return false;
      }
  }

  public boolean equals (Object elem) {
     if (!(elem instanceof ShapeTool_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ShapeTool_c)) {
           return false;
       }
       
       ShapeTool_c me = (ShapeTool_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getTool_id()) || IdAssigner.NULL_UUID.equals(((ShapeTool_c)elem).getTool_id())) && this != elem)) {
      	return false;
      }
      if (!getTool_id().equals(((ShapeTool_c)elem).getTool_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ShapeTool_c)) {
           return false;
       }
       
       ShapeTool_c me = (ShapeTool_c)elem;
      if (!getTool_idCachedValue().equals(((ShapeTool_c)elem).getTool_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_tool_id ;
  private Transaction m_current_transaction ;
      
// declare association references from this class
  
  
    
// referring navigation

ModelTool_c IsSupertypeModelTool ;
public void relateAcrossR102To(ModelTool_c target)
{
	relateAcrossR102To(target, true);
}
public void relateAcrossR102To(ModelTool_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeModelTool) return;  // already related

    if ( IsSupertypeModelTool != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeModelTool != null) {
    
        IsSupertypeModelTool.clearBackPointerR102To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ShapeTool_c.relateAcrossR102To(ModelTool_c target)", 
			"Relate performed across R102 from Shape Tool to Model Tool without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeModelTool = target ;
        m_tool_id = target.getTool_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR102To(this);
        target.addRef();
    }
}
public void unrelateAcrossR102From(ModelTool_c target)
{
	unrelateAcrossR102From(target, true);
}
public void unrelateAcrossR102From(ModelTool_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeModelTool == null) return;  // already unrelated
	
	if (target != IsSupertypeModelTool) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R102", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR102To(this);
    }
    

      if(IsSupertypeModelTool != null) {
      
        m_tool_id = IsSupertypeModelTool.getTool_id();
        IsSupertypeModelTool = null ;
        target.removeRef();
    }
}

  
    
      
public static ShapeTool_c getOneCT_STLOnR102(ModelTool_c [] targets)
{
    return getOneCT_STLOnR102(targets, null);
}

public static ShapeTool_c getOneCT_STLOnR102(ModelTool_c [] targets, ClassQueryInterface_c test)
{
    ShapeTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_STLOnR102(targets[i], test);
        }
    }

    return ret_val;
}

public static ShapeTool_c getOneCT_STLOnR102(ModelTool_c target)
{
  return getOneCT_STLOnR102(target, null);
}

public static ShapeTool_c getOneCT_STLOnR102(ModelTool_c target, boolean loadComponent)
{
    return getOneCT_STLOnR102(target.getModelRoot(), target, null, loadComponent);
}

public static ShapeTool_c getOneCT_STLOnR102(ModelTool_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_STLOnR102(target.getModelRoot(), target, test);
  }
  return null;
}

public static ShapeTool_c getOneCT_STLOnR102(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test)
{
	return getOneCT_STLOnR102(modelRoot, target, test, true);
}

public static ShapeTool_c getOneCT_STLOnR102(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_STLOnR102(modelRoot,target,test);
}
private static ShapeTool_c find_getOneCT_STLOnR102(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ShapeTool_c source = (ShapeTool_c)target.backPointer_IsSubtypeShapeToolIsSubtype_R102;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ShapeTool_c [] getManyCT_STLsOnR102(ModelTool_c [] targets)
{
  return getManyCT_STLsOnR102(targets, null);
}
public static ShapeTool_c [] getManyCT_STLsOnR102(ModelTool_c [] targets, boolean loadComponent)
{
  return getManyCT_STLsOnR102(targets, null, loadComponent);
}
public static ShapeTool_c [] getManyCT_STLsOnR102(ModelTool_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_STLsOnR102(targets, test, true);
}

public static ShapeTool_c [] getManyCT_STLsOnR102(ModelTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ShapeTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ShapeTool_c source = (ShapeTool_c)targets[i].backPointer_IsSubtypeShapeToolIsSubtype_R102;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ShapeTool_c[] ret_set = new ShapeTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ShapeTool_c[0];
  }
  }

public static ShapeTool_c [] getManyCT_STLsOnR102(ModelTool_c target)
{
  if (target != null) {
    ModelTool_c [] targetArray = new ModelTool_c[1];
    targetArray[0] = target;
    return getManyCT_STLsOnR102(targetArray);
  } else {
    ShapeTool_c [] result = new ShapeTool_c [0] ;
  return result ;
}
}

public static ShapeTool_c [] getManyCT_STLsOnR102(ModelTool_c target, boolean loadComponent)
{
  if (target != null) {
    ModelTool_c [] targetArray = new ModelTool_c[1];
    targetArray[0] = target;
    return getManyCT_STLsOnR102(targetArray, loadComponent);
  } else {
    ShapeTool_c [] result = new ShapeTool_c [0] ;
  return result ;
}
}



      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R102
      ModelTool_c relInst22435 = (ModelTool_c) baseRoot.getInstanceList(ModelTool_c.class).get(new Object[] {m_tool_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22435 == null) {
      			relInst22435 = (ModelTool_c) Ooaofooa.getDefaultInstance().getInstanceList(ModelTool_c.class).get(new Object[] {m_tool_id});
      		}
			//synchronized
      if ( relInst22435 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22435) && !isProxy())) {
	      relInst22435.relateAcrossR102To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R102
      // CT_MTL
		  inst=IsSupertypeModelTool;
			unrelateAcrossR102From(IsSupertypeModelTool, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ShapeTool_c inst = (ShapeTool_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ShapeTool_c ShapeToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ShapeTool_c result=findShapeToolInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static ShapeTool_c findShapeToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ShapeTool_c x = (ShapeTool_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static ShapeTool_c ShapeToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ShapeToolInstance(modelRoot,test,true);
  }
  
  public static ShapeTool_c ShapeToolInstance(ModelRoot modelRoot)
  {
	 return ShapeToolInstance(modelRoot,null,true);
  }

  public static ShapeTool_c [] ShapeToolInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(ShapeTool_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ShapeTool_c x = (ShapeTool_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ShapeTool_c[] ret_set = new ShapeTool_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ShapeTool_c[0];
			}		
		} 
  }
  public static ShapeTool_c [] ShapeToolInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ShapeToolInstances(modelRoot,test,true);
  }
  public static ShapeTool_c [] ShapeToolInstances(ModelRoot modelRoot)
  {
	return ShapeToolInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
    Activepoller_c.unRegister(this) ;
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Shape Tool.dispose call: ";
	ModelTool_c testR102Inst1 = ModelTool_c.getOneCT_MTLOnR102(this, false);

	if ( testR102Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "102 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Shape Tool", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("tool_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getTool_idLongBased()
  {
    if ( IsSupertypeModelTool != null )
    {
      return IsSupertypeModelTool.getTool_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTool_id()
  {
    if ( IsSupertypeModelTool != null )
    {
      return IsSupertypeModelTool.getTool_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeModelTool != null );
 
 }                  

  public java.util.UUID getTool_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_tool_id) )
      return m_tool_id;
    else
      return getTool_id();
  }
  
  public void setTool_id(java.util.UUID newValue)
  {
   m_tool_id = IdAssigner.preprocessUUID(newValue);
  }
  public Transaction getCurrent_transaction()
  {
    return m_current_transaction ;
  }


  public void setCurrent_transaction(Transaction newValue)
  {
   m_current_transaction = newValue ;
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Shape Tool", //$NON-NLS-1$
	  " Operation entered: Shape Tool::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ShapeTool_c [] objs = ShapeTool_c.ShapeToolInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Shape Tool", //$NON-NLS-1$
	  " Operation entered: Shape Tool::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ShapeTool_c_test22437_c implements ClassQueryInterface_c
    {
	  ShapeTool_c_test22437_c( java.util.UUID            p22438 ) {
	  m_p22438 = p22438;
	  }
	  private java.util.UUID             m_p22438; 
	  public boolean evaluate (Object candidate)
	  {
	      ShapeTool_c selected = (ShapeTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22438));
	      return retval;
	  }
    }

    ShapeTool_c [] objs22436 = 
    ShapeTool_c.ShapeToolInstances(modelRoot, new ShapeTool_c_test22437_c(getTool_id())) ;

    if ( (  (objs22436.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Tool", //$NON-NLS-1$
           "Consistency: Object: Shape Tool: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22436.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Tool: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22436.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22436.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Tool", //$NON-NLS-1$
           "Consistency: Object: Shape Tool: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22436.length )  + " Tool_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Tool: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22436.length )  + " Tool_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Shape Tool is a subtype in association: rel.Numb = 102
          // The supertype class is: Model Tool
    class ModelTool_c_test22442_c implements ClassQueryInterface_c
    {
	  ModelTool_c_test22442_c( java.util.UUID            p22443 ) {
	  m_p22443 = p22443;
	  }
	  private java.util.UUID             m_p22443; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelTool_c selected = (ModelTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22443));
	      return retval;
	  }
    }

    ModelTool_c [] objs22441 = 
    ModelTool_c.ModelToolInstances(modelRoot, new ModelTool_c_test22442_c(getTool_id())) ;

    if ( (  (objs22441.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape Tool", //$NON-NLS-1$
           "Consistency: Object: Shape Tool: Association: 102: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22441.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Shape Tool: Association: 102: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22441.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Shape Tool", " Operation entered: ShapeTool::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelTool_c v_mtl = ModelTool_c.getOneCT_MTLOnR102(this);


if ( (  (v_mtl != null)) )
{

this.unrelateAcrossR102From(v_mtl);



}

delete() ;



   } // End dispose
  public  boolean      Exceedsminimumsize()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Shape Tool", " Operation entered: ShapeTool::Exceedsminimumsize") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


int          v_width = v_canvas.getSelrectw() ;


if ( (v_width < 0) )
{

v_width =   - v_width ;



}

int          v_height = v_canvas.getSelrecth() ;


if ( (v_height < 0) )
{

v_height =   - v_height ;



}

if ( (v_width > (2 * Gr_c.Gethotspotsize()) && v_height > (2 * Gr_c.Gethotspotsize())) )
{

return true;



}

else
{

return false;



}


   } // End exceedsMinimumSize

  // end transform functions

  public static final int
    ST_SHAPE_TOOL_IDLE = 1, 
    ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION = 2, 
    ST_SHAPE_TOOL_INITIALIZING_SHAPE = 3, 
    ST_SHAPE_TOOL_DRAGGING_SHAPE = 4, 
    ST_SHAPE_TOOL_CREATING_ELEMENT = 5, 
    ST_SHAPE_TOOL_CLEARING_PARTIAL_SHAPE_ON_DEACTIVATE = 7;

   private int state = ST_SHAPE_TOOL_IDLE ;
   private Vector<genericEvent_c> eventQueue = new Vector<genericEvent_c>(10,10) ;
   private Vector<genericEvent_c> selfEventQueue = new Vector<genericEvent_c>(10,10) ;

  public int get_current_state() { return state; }
    
  static final int EVCD_SHAPE_TOOL_ACTIVATED = 5 ;
   public synchronized void Activated( boolean self_directed )
  {
    EV_SHAPE_TOOL_ACTIVATED incoming_event = new EV_SHAPE_TOOL_ACTIVATED() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_SHAPE_TOOL_DEACTIVATED = 6 ;
   public synchronized void Deactivated( boolean self_directed )
  {
    EV_SHAPE_TOOL_DEACTIVATED incoming_event = new EV_SHAPE_TOOL_DEACTIVATED() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_SHAPE_TOOL_DONE = 4 ;
   public synchronized void Done( boolean self_directed )
  {
    EV_SHAPE_TOOL_DONE incoming_event = new EV_SHAPE_TOOL_DONE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_SHAPE_TOOL_MOUSE_RELEASED = 2 ;
   public synchronized void MouseReleased( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_SHAPE_TOOL_MOUSE_RELEASED incoming_event = new EV_SHAPE_TOOL_MOUSE_RELEASED() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_SHAPE_TOOL_MOUSE_MOVED = 3 ;
   public synchronized void MouseMoved( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_SHAPE_TOOL_MOUSE_MOVED incoming_event = new EV_SHAPE_TOOL_MOUSE_MOVED() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_SHAPE_TOOL_MOUSE_PRESSED = 1 ;
   public synchronized void MousePressed( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_SHAPE_TOOL_MOUSE_PRESSED incoming_event = new EV_SHAPE_TOOL_MOUSE_PRESSED() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }

  public synchronized void takeEvent(genericEvent_c incoming_event)
  {
    eventQueue.addElement(incoming_event) ;
	notify() ;
  }

  public synchronized void procEvent()
  {
    ModelRoot modelRoot = getModelRoot();
    EV_SHAPE_TOOL currentEvent ;
	if (selfEventQueue.size() != 0) {
	  currentEvent = (EV_SHAPE_TOOL)selfEventQueue.firstElement() ;
	  selfEventQueue.removeElement(currentEvent) ;
	}
	else {
      currentEvent = (EV_SHAPE_TOOL)eventQueue.firstElement() ;
      if (currentEvent != null) {
        eventQueue.removeElement(currentEvent) ;
	  }
	}
	if (currentEvent != null) {
      switch (currentEvent.getEvtcode())
      {
        case EVCD_SHAPE_TOOL_ACTIVATED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Shape Tool", " Event dequeued: ShapeTool.Activated in " + state) ; 
          final EV_SHAPE_TOOL_ACTIVATED arch_event = (EV_SHAPE_TOOL_ACTIVATED)currentEvent ;
          switch (state)
          {
          case ST_SHAPE_TOOL_IDLE:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


if (v_canvas != null) {
v_canvas.Unselectall() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



            }
            state = ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Shape Tool state = " + state + " event = CT_STL5:Activated", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_SHAPE_TOOL_DEACTIVATED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Shape Tool", " Event dequeued: ShapeTool.Deactivated in " + state) ; 
          final EV_SHAPE_TOOL_DEACTIVATED arch_event = (EV_SHAPE_TOOL_DEACTIVATED)currentEvent ;
          switch (state)
          {
          case ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION:
            {

            }
            state = ST_SHAPE_TOOL_IDLE ;
            break ;
          case ST_SHAPE_TOOL_INITIALIZING_SHAPE:
            {

            }
            state = ST_SHAPE_TOOL_IDLE ;
            break ;
          case ST_SHAPE_TOOL_DRAGGING_SHAPE:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


if (v_canvas != null) {
  v_canvas.setSelrectw( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecth( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


// Generate event CT_STL4:Done to self
Done(true ) ;



            }
            state = ST_SHAPE_TOOL_CLEARING_PARTIAL_SHAPE_ON_DEACTIVATE ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Shape Tool state = " + state + " event = CT_STL6:Deactivated", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_SHAPE_TOOL_DONE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Shape Tool", " Event dequeued: ShapeTool.Done in " + state) ; 
          final EV_SHAPE_TOOL_DONE arch_event = (EV_SHAPE_TOOL_DONE)currentEvent ;
          switch (state)
          {
          case ST_SHAPE_TOOL_CLEARING_PARTIAL_SHAPE_ON_DEACTIVATE:
            {

            }
            state = ST_SHAPE_TOOL_IDLE ;
            break ;
          case ST_SHAPE_TOOL_CREATING_ELEMENT:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


if (v_canvas != null) {
v_canvas.Unselectall() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



            }
            state = ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION ;
            break ;
          case ST_SHAPE_TOOL_INITIALIZING_SHAPE:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


if (v_canvas != null) {
v_canvas.Unselectall() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



            }
            state = ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Shape Tool state = " + state + " event = CT_STL4:Done", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_SHAPE_TOOL_MOUSE_RELEASED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Shape Tool", " Event dequeued: ShapeTool.MouseReleased in " + state) ; 
          final EV_SHAPE_TOOL_MOUSE_RELEASED arch_event = (EV_SHAPE_TOOL_MOUSE_RELEASED)currentEvent ;
          switch (state)
          {
          case ST_SHAPE_TOOL_INITIALIZING_SHAPE:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


ElementSpecification_c v_elem_spec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


if ( (  (v_elem_spec != null)) )
{

GraphicalElement_c v_elem = new GraphicalElement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_elem));


Shape_c v_shape = new Shape_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_shape));


Graphnode_c v_graphNode = new Graphnode_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphNode));


if (v_graphNode != null) {
  v_graphNode.relateAcrossR19To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphelement_c v_graphEle = new Graphelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphEle));


if (v_graphEle != null) {
  v_graphEle.relateAcrossR301To(v_graphNode);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_graphEle != null) {
  v_graphEle.relateAcrossR23To(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Diagramelement_c v_diaEle = new Diagramelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_diaEle));


if (v_diaEle != null) {
  v_diaEle.relateAcrossR302To(v_graphEle);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (v_elem_spec.getSymboltype().equals("shape")) )
{

NoncontainingShape_c v_ncs = new NoncontainingShape_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ncs));


if (v_ncs != null) {
  v_ncs.relateAcrossR28To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

else
{

ContainingShape_c v_containerShp = new ContainingShape_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_containerShp));


if (v_containerShp != null) {
  v_containerShp.relateAcrossR28To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

boolean      v_autoResize = false ;


ContainingShape_c v_containerShape = (ContainingShape_c) modelRoot.getInstanceList(ContainingShape_c.class).getGlobal(null, Os_c.Null_unique_id());


if ( (v_canvas.Hascontainersymbol()) )
{

  class ElementSpecification_test21611_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ElementSpecification_c selected = (ElementSpecification_c)candidate;
		return (selected.getSymboltype().equals("container") && selected.getCreationrule().equals("on canvas creation")) ;
	}
  }
ElementSpecification_c v_containerSpec = ElementSpecification_c.getOneGD_ESOnR11(ElementInModelSpecification_c.getManyGD_EMSsOnR11(ModelSpecification_c.getManyGD_MSsOnR9(v_canvas)), new ElementSpecification_test21611_c());


if ( (  (v_containerSpec != null)) )
{

GraphicalElement_c v_container = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getManyGD_SHPsOnR28(ContainingShape_c.getManyGD_CTRsOnR28(Shape_c.getManyGD_SHPsOnR2(GraphicalElement_c.getManyGD_GEsOnR1(v_canvas)))));


if ( (  (v_container != null)) )
{

Graphelement_c v_containerDimGe = Graphelement_c.getOneDIM_GEOnR23(v_container);


if (v_diaEle != null) {
  v_diaEle.relateAcrossR307To(v_containerDimGe);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_containerShape = ContainingShape_c.getOneGD_CTROnR28(Shape_c.getOneGD_SHPOnR2(v_container));


v_autoResize = true ;



}


}


}

if ( (  !Exceedsminimumsize()) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw( v_elem_spec.Getdefaultwidth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecth( v_elem_spec.Getdefaultheight()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_canvas.getSelrectw() < 0) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw(   - v_canvas.getSelrectw()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectx( v_canvas.getSelrectx() - v_canvas.getSelrectw()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_canvas.getSelrecth() < 0) )
{

if (v_canvas != null) {
  v_canvas.setSelrecth(   - v_canvas.getSelrecth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecty( v_canvas.getSelrecty() - v_canvas.getSelrecth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if (v_graphEle != null) {
  v_graphEle.setPositionx( v_canvas.getSelrectx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphEle != null) {
  v_graphEle.setPositiony( v_canvas.getSelrecty()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphNode != null) {
  v_graphNode.setWidth( v_canvas.getSelrectw()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphNode != null) {
  v_graphNode.setHeight( v_canvas.getSelrecth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_elem != null) {
  v_elem.relateAcrossR2To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_elem != null) {
  v_elem.relateAcrossR1To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_elem_spec != null) {
  v_elem_spec.relateAcrossR10To(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_elem_spec != null) {
  v_elem_spec.relateAcrossR16To(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (v_elem_spec.getIsfixedsize()) )
{

if ( (v_elem_spec.getDefaultwidth() < Gr_c.Getminshapesize()) )
{

if (v_graphNode != null) {
  v_graphNode.setWidth( Gr_c.Getminshapesize()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else
{

if (v_graphNode != null) {
  v_graphNode.setWidth( v_elem_spec.getDefaultwidth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_elem_spec.getDefaultheight() < Gr_c.Getminshapesize()) )
{

if (v_graphNode != null) {
  v_graphNode.setHeight( Gr_c.Getminshapesize()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else
{

if (v_graphNode != null) {
  v_graphNode.setHeight( v_elem_spec.getDefaultheight()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}

if ( (v_elem_spec.getHasfloatingtext()) )
{

FloatingText_c v_text = new FloatingText_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_text));


if (v_text != null) {
  v_text.setEnd( End_c.Floating) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_shape != null) {
  v_shape.relateAcrossR27To(v_text);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_text != null) {
v_text.Createsupertypeinstances() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( (v_autoResize) )
{

if (v_containerShape != null) {
v_containerShape.Autoresize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Cl_c.Createnode(			    
v_canvas.getRepresents()			    
,v_elem_spec.getCreator() ) ;


if (v_elem_spec != null) {
v_elem_spec.unrelateAcrossR16From(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectx( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecty( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectw( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecth( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Cl_c.Endtransaction(			    
v_canvas.getRepresents()			    
,getCurrent_transaction() ) ;


Cl_c.Addtoselection(			    
v_elem.getRepresents() ) ;



}

else
{

Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrent_transaction() ) ;



}

// Generate event CT_STL4:Done to self
Done(true ) ;



            }
            state = ST_SHAPE_TOOL_CREATING_ELEMENT ;
            break ;
          case ST_SHAPE_TOOL_DRAGGING_SHAPE:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


ElementSpecification_c v_elem_spec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


if ( (  (v_elem_spec != null)) )
{

GraphicalElement_c v_elem = new GraphicalElement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_elem));


Shape_c v_shape = new Shape_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_shape));


Graphnode_c v_graphNode = new Graphnode_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphNode));


if (v_graphNode != null) {
  v_graphNode.relateAcrossR19To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphelement_c v_graphEle = new Graphelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphEle));


if (v_graphEle != null) {
  v_graphEle.relateAcrossR301To(v_graphNode);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_graphEle != null) {
  v_graphEle.relateAcrossR23To(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Diagramelement_c v_diaEle = new Diagramelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_diaEle));


if (v_diaEle != null) {
  v_diaEle.relateAcrossR302To(v_graphEle);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (v_elem_spec.getSymboltype().equals("shape")) )
{

NoncontainingShape_c v_ncs = new NoncontainingShape_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ncs));


if (v_ncs != null) {
  v_ncs.relateAcrossR28To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

else
{

ContainingShape_c v_containerShp = new ContainingShape_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_containerShp));


if (v_containerShp != null) {
  v_containerShp.relateAcrossR28To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

boolean      v_autoResize = false ;


ContainingShape_c v_containerShape = (ContainingShape_c) modelRoot.getInstanceList(ContainingShape_c.class).getGlobal(null, Os_c.Null_unique_id());


if ( (v_canvas.Hascontainersymbol()) )
{

  class ElementSpecification_test21611_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ElementSpecification_c selected = (ElementSpecification_c)candidate;
		return (selected.getSymboltype().equals("container") && selected.getCreationrule().equals("on canvas creation")) ;
	}
  }
ElementSpecification_c v_containerSpec = ElementSpecification_c.getOneGD_ESOnR11(ElementInModelSpecification_c.getManyGD_EMSsOnR11(ModelSpecification_c.getManyGD_MSsOnR9(v_canvas)), new ElementSpecification_test21611_c());


if ( (  (v_containerSpec != null)) )
{

GraphicalElement_c v_container = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getManyGD_SHPsOnR28(ContainingShape_c.getManyGD_CTRsOnR28(Shape_c.getManyGD_SHPsOnR2(GraphicalElement_c.getManyGD_GEsOnR1(v_canvas)))));


if ( (  (v_container != null)) )
{

Graphelement_c v_containerDimGe = Graphelement_c.getOneDIM_GEOnR23(v_container);


if (v_diaEle != null) {
  v_diaEle.relateAcrossR307To(v_containerDimGe);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_containerShape = ContainingShape_c.getOneGD_CTROnR28(Shape_c.getOneGD_SHPOnR2(v_container));


v_autoResize = true ;



}


}


}

if ( (  !Exceedsminimumsize()) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw( v_elem_spec.Getdefaultwidth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecth( v_elem_spec.Getdefaultheight()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_canvas.getSelrectw() < 0) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw(   - v_canvas.getSelrectw()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectx( v_canvas.getSelrectx() - v_canvas.getSelrectw()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_canvas.getSelrecth() < 0) )
{

if (v_canvas != null) {
  v_canvas.setSelrecth(   - v_canvas.getSelrecth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecty( v_canvas.getSelrecty() - v_canvas.getSelrecth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if (v_graphEle != null) {
  v_graphEle.setPositionx( v_canvas.getSelrectx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphEle != null) {
  v_graphEle.setPositiony( v_canvas.getSelrecty()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphNode != null) {
  v_graphNode.setWidth( v_canvas.getSelrectw()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphNode != null) {
  v_graphNode.setHeight( v_canvas.getSelrecth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_elem != null) {
  v_elem.relateAcrossR2To(v_shape);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_elem != null) {
  v_elem.relateAcrossR1To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_elem_spec != null) {
  v_elem_spec.relateAcrossR10To(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_elem_spec != null) {
  v_elem_spec.relateAcrossR16To(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (v_elem_spec.getIsfixedsize()) )
{

if ( (v_elem_spec.getDefaultwidth() < Gr_c.Getminshapesize()) )
{

if (v_graphNode != null) {
  v_graphNode.setWidth( Gr_c.Getminshapesize()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else
{

if (v_graphNode != null) {
  v_graphNode.setWidth( v_elem_spec.getDefaultwidth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_elem_spec.getDefaultheight() < Gr_c.Getminshapesize()) )
{

if (v_graphNode != null) {
  v_graphNode.setHeight( Gr_c.Getminshapesize()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else
{

if (v_graphNode != null) {
  v_graphNode.setHeight( v_elem_spec.getDefaultheight()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}

if ( (v_elem_spec.getHasfloatingtext()) )
{

FloatingText_c v_text = new FloatingText_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_text));


if (v_text != null) {
  v_text.setEnd( End_c.Floating) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_shape != null) {
  v_shape.relateAcrossR27To(v_text);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_text != null) {
v_text.Createsupertypeinstances() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( (v_autoResize) )
{

if (v_containerShape != null) {
v_containerShape.Autoresize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Cl_c.Createnode(			    
v_canvas.getRepresents()			    
,v_elem_spec.getCreator() ) ;


if (v_elem_spec != null) {
v_elem_spec.unrelateAcrossR16From(v_elem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectx( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecty( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectw( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecth( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Cl_c.Endtransaction(			    
v_canvas.getRepresents()			    
,getCurrent_transaction() ) ;


Cl_c.Addtoselection(			    
v_elem.getRepresents() ) ;



}

else
{

Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrent_transaction() ) ;



}

// Generate event CT_STL4:Done to self
Done(true ) ;



            }
            state = ST_SHAPE_TOOL_CREATING_ELEMENT ;
            break ;
               case ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Shape Tool state = " + state + " event = CT_STL2:Mouse Released", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_SHAPE_TOOL_MOUSE_MOVED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Shape Tool", " Event dequeued: ShapeTool.MouseMoved in " + state) ; 
          final EV_SHAPE_TOOL_MOUSE_MOVED arch_event = (EV_SHAPE_TOOL_MOUSE_MOVED)currentEvent ;
          switch (state)
          {
          case ST_SHAPE_TOOL_INITIALIZING_SHAPE:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


ElementSpecification_c v_spec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


if ( (  (v_spec != null)) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,false			    
,(Gr_c.Scale(			    
Gr_c.Getabsolutexposition()) + v_diagram.getViewportx())) - v_canvas.getSelrectx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


int          v_yToSnap = 0 ;


if ( (v_spec.getIsfixedsize()) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw( v_spec.getDefaultwidth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


v_yToSnap = v_canvas.getSelrecty() + v_spec.getDefaultheight() ;



}

else if ( (v_spec.getIsfixedaspectratio()) )
{

float        v_width = Os_c.Inttoreal(			    
v_spec.getDefaultwidth()) ;


float        v_height = Os_c.Inttoreal(			    
v_spec.getDefaultheight()) ;


v_yToSnap = (int)(v_canvas.getSelrecty() + v_canvas.getSelrectw() * (v_height / v_width)) ;



}

else
{

v_yToSnap = (int)(Gr_c.Scale(			    
Gr_c.Getabsoluteyposition()) + v_diagram.getViewporty()) ;



}

if (v_canvas != null) {
  v_canvas.setSelrecth( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,false			    
,v_yToSnap) - v_canvas.getSelrecty()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


            }
            state = ST_SHAPE_TOOL_DRAGGING_SHAPE ;
            break ;
          case ST_SHAPE_TOOL_DRAGGING_SHAPE:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


ElementSpecification_c v_spec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


if ( (  (v_spec != null)) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,false			    
,(Gr_c.Scale(			    
Gr_c.Getabsolutexposition()) + v_diagram.getViewportx())) - v_canvas.getSelrectx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


int          v_yToSnap = 0 ;


if ( (v_spec.getIsfixedsize()) )
{

if (v_canvas != null) {
  v_canvas.setSelrectw( v_spec.getDefaultwidth()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


v_yToSnap = v_canvas.getSelrecty() + v_spec.getDefaultheight() ;



}

else if ( (v_spec.getIsfixedaspectratio()) )
{

float        v_width = Os_c.Inttoreal(			    
v_spec.getDefaultwidth()) ;


float        v_height = Os_c.Inttoreal(			    
v_spec.getDefaultheight()) ;


v_yToSnap = (int)(v_canvas.getSelrecty() + v_canvas.getSelrectw() * (v_height / v_width)) ;



}

else
{

v_yToSnap = (int)(Gr_c.Scale(			    
Gr_c.Getabsoluteyposition()) + v_diagram.getViewporty()) ;



}

if (v_canvas != null) {
  v_canvas.setSelrecth( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,false			    
,v_yToSnap) - v_canvas.getSelrecty()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


            }
            state = ST_SHAPE_TOOL_DRAGGING_SHAPE ;
            break ;
               case ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Shape Tool state = " + state + " event = CT_STL3:Mouse Moved", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_SHAPE_TOOL_MOUSE_PRESSED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Shape Tool", " Event dequeued: ShapeTool.MousePressed in " + state) ; 
          final EV_SHAPE_TOOL_MOUSE_PRESSED arch_event = (EV_SHAPE_TOOL_MOUSE_PRESSED)currentEvent ;
          switch (state)
          {
          case ST_SHAPE_TOOL_WAITING_FOR_INITIAL_POSITION:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


boolean      v_allow_start_position = true ;


if ( (v_canvas.Hascontainersymbol()) )
{

  class ElementSpecification_test21610_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ElementSpecification_c selected = (ElementSpecification_c)candidate;
		return (selected.getSymboltype().equals("container") && selected.getCreationrule().equals("on canvas creation")) ;
	}
  }
ElementSpecification_c v_containerSpec = ElementSpecification_c.getOneGD_ESOnR11(ElementInModelSpecification_c.getManyGD_EMSsOnR11(ModelSpecification_c.getManyGD_MSsOnR9(v_canvas)), new ElementSpecification_test21610_c());


if ( (  (v_containerSpec != null)) )
{

ContainingShape_c v_element = ContainingShape_c.getOneGD_CTROnR28(Shape_c.getManyGD_SHPsOnR2(GraphicalElement_c.getManyGD_GEsOnR1(v_canvas)));


if ( (  (v_element != null)) )
{

if ( (  !v_element.Isoveranypartof(			    
arch_event.edi_x			    
,arch_event.edi_y)) )
{

// Generate event CT_STL4:Done to self
Done(true ) ;


v_allow_start_position = false ;



}


}


}


}

if ( (v_allow_start_position) )
{

setCurrent_transaction( Cl_c.Starttransaction(			    
v_canvas.getRepresents()			    
,"New shape")) ;


if (v_canvas != null) {
  v_canvas.setSelrectx( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,false			    
,(Gr_c.Scale(			    
arch_event.edi_x) + v_diagram.getViewportx()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecty( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,false			    
,(Gr_c.Scale(			    
arch_event.edi_y) + v_diagram.getViewporty()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrectw( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_canvas != null) {
  v_canvas.setSelrecth( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


            }
            state = ST_SHAPE_TOOL_INITIALIZING_SHAPE ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Shape Tool state = " + state + " event = CT_STL1:Mouse Pressed", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
      } // end currentEvent switch
	} // end if currentEvent valid
  } // end Shape Tool procEvent

  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Shape Tool
