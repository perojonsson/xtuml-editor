      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Graphelement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_GRAPHELEMENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Graphelement_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Graphelement_c(ModelRoot modelRoot,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_smb_id)
  {
    super(modelRoot);
       m_positionx = p_m_positionx;
       m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
        
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public Graphelement_c createProxy(ModelRoot modelRoot,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_smb_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);
      Graphelement_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (Graphelement_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_positionx = p_m_positionx;
       new_inst.m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Graphelement_c(modelRoot,
p_m_positionx,
p_m_positiony,
p_m_elementid,
p_m_smb_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Graphelement_c resolveInstance(ModelRoot modelRoot,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_smb_id){
    InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);
    Graphelement_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (Graphelement_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_positionx = p_m_positionx;
       source.m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Graphelement_c new_inst = new Graphelement_c(modelRoot,
p_m_positionx,
p_m_positiony,
p_m_elementid,
p_m_smb_id
);
    return new_inst;
  }
  public Graphelement_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_elementid = IdAssigner.NULL_UUID;   
     m_smb_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Graphelement_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Graphelement_c)) {
           return false;
       }
       
       Graphelement_c me = (Graphelement_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((Graphelement_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((Graphelement_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Graphelement_c)) {
           return false;
       }
       
       Graphelement_c me = (Graphelement_c)elem;
      if (!getElementidCachedValue().equals(((Graphelement_c)elem).getElementidCachedValue())) return false;
      return true;
    }


  // Attributes
  private float        m_positionx ;
  private float        m_positiony ;
  private java.util.UUID         m_elementid ;
  private java.util.UUID         m_smb_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Semanticmodelbridge_c SemanticModelSemanticmodelbridge ;
public void relateAcrossR312To(Semanticmodelbridge_c target)
{
	relateAcrossR312To(target, true);
}
public void relateAcrossR312To(Semanticmodelbridge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SemanticModelSemanticmodelbridge) return;  // already related

    if ( SemanticModelSemanticmodelbridge != target ) {
    
    Object oldKey = getInstanceKey();

    if (SemanticModelSemanticmodelbridge != null) {
    
        SemanticModelSemanticmodelbridge.clearBackPointerR312To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Graphelement_c.relateAcrossR312To(Semanticmodelbridge_c target)", 
			"Relate performed across R312 from GraphElement to SemanticModelBridge without unrelate of prior instance.");  
		}
    }
                
    	SemanticModelSemanticmodelbridge = target ;
        m_smb_id = target.getSmb_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR312To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "312", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR312From(Semanticmodelbridge_c target)
{
	unrelateAcrossR312From(target, true);
}
public void unrelateAcrossR312From(Semanticmodelbridge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SemanticModelSemanticmodelbridge == null) return;  // already unrelated
	
	if (target != SemanticModelSemanticmodelbridge) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R312", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR312To(this);
    }
    

      if(SemanticModelSemanticmodelbridge != null) {
      
        m_smb_id = SemanticModelSemanticmodelbridge.getSmb_id();
        SemanticModelSemanticmodelbridge = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "312", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Graphelement_c getOneDIM_GEOnR312(Semanticmodelbridge_c [] targets)
{
    return getOneDIM_GEOnR312(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR312(Semanticmodelbridge_c [] targets, ClassQueryInterface_c test)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_GEOnR312(targets[i], test);
        }
    }

    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR312(Semanticmodelbridge_c target)
{
  return getOneDIM_GEOnR312(target, null);
}

public static Graphelement_c getOneDIM_GEOnR312(Semanticmodelbridge_c target, boolean loadComponent)
{
    return getOneDIM_GEOnR312(target.getModelRoot(), target, null, loadComponent);
}

public static Graphelement_c getOneDIM_GEOnR312(Semanticmodelbridge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_GEOnR312(target.getModelRoot(), target, test);
  }
  return null;
}

public static Graphelement_c getOneDIM_GEOnR312(ModelRoot modelRoot, Semanticmodelbridge_c target, ClassQueryInterface_c test)
{
	return getOneDIM_GEOnR312(modelRoot, target, test, true);
}

public static Graphelement_c getOneDIM_GEOnR312(ModelRoot modelRoot, Semanticmodelbridge_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_GEOnR312(modelRoot,target,test);
}
private static Graphelement_c find_getOneDIM_GEOnR312(ModelRoot modelRoot, Semanticmodelbridge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Graphelement_c source = (Graphelement_c)target.backPointer_ElementGraphelementElement_R312;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Graphelement_c [] getManyDIM_GEsOnR312(Semanticmodelbridge_c [] targets)
{
  return getManyDIM_GEsOnR312(targets, null);
}
public static Graphelement_c [] getManyDIM_GEsOnR312(Semanticmodelbridge_c [] targets, boolean loadComponent)
{
  return getManyDIM_GEsOnR312(targets, null, loadComponent);
}
public static Graphelement_c [] getManyDIM_GEsOnR312(Semanticmodelbridge_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR312(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR312(Semanticmodelbridge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Graphelement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Graphelement_c source = (Graphelement_c)targets[i].backPointer_ElementGraphelementElement_R312;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Graphelement_c[] ret_set = new Graphelement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Graphelement_c[0];
  }
  }

public static Graphelement_c [] getManyDIM_GEsOnR312(Semanticmodelbridge_c target)
{
  if (target != null) {
    Semanticmodelbridge_c [] targetArray = new Semanticmodelbridge_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR312(targetArray);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
  return result ;
}
}

public static Graphelement_c [] getManyDIM_GEsOnR312(Semanticmodelbridge_c target, boolean loadComponent)
{
  if (target != null) {
    Semanticmodelbridge_c [] targetArray = new Semanticmodelbridge_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR312(targetArray, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Diagramelement_c IsSupertypeDiagramelement ;
public void relateAcrossR302To(Diagramelement_c target)
{
	relateAcrossR302To(target, true);
}
public void relateAcrossR302To(Diagramelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeDiagramelement) return;  // already related

    if ( IsSupertypeDiagramelement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeDiagramelement != null) {
    
        IsSupertypeDiagramelement.clearBackPointerR302To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Graphelement_c.relateAcrossR302To(Diagramelement_c target)", 
			"Relate performed across R302 from GraphElement to DiagramElement without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeDiagramelement = target ;
        m_elementid = target.getElementid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR302To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "302", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR302From(Diagramelement_c target)
{
	unrelateAcrossR302From(target, true);
}
public void unrelateAcrossR302From(Diagramelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeDiagramelement == null) return;  // already unrelated
	
	if (target != IsSupertypeDiagramelement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R302", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR302To(this);
    }
    

      if(IsSupertypeDiagramelement != null) {
      
        m_elementid = IsSupertypeDiagramelement.getElementid();
        IsSupertypeDiagramelement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "302", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Graphelement_c getOneDIM_GEOnR302(Diagramelement_c [] targets)
{
    return getOneDIM_GEOnR302(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR302(Diagramelement_c [] targets, ClassQueryInterface_c test)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_GEOnR302(targets[i], test);
        }
    }

    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR302(Diagramelement_c target)
{
  return getOneDIM_GEOnR302(target, null);
}

public static Graphelement_c getOneDIM_GEOnR302(Diagramelement_c target, boolean loadComponent)
{
    return getOneDIM_GEOnR302(target.getModelRoot(), target, null, loadComponent);
}

public static Graphelement_c getOneDIM_GEOnR302(Diagramelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_GEOnR302(target.getModelRoot(), target, test);
  }
  return null;
}

public static Graphelement_c getOneDIM_GEOnR302(ModelRoot modelRoot, Diagramelement_c target, ClassQueryInterface_c test)
{
	return getOneDIM_GEOnR302(modelRoot, target, test, true);
}

public static Graphelement_c getOneDIM_GEOnR302(ModelRoot modelRoot, Diagramelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_GEOnR302(modelRoot,target,test);
}
private static Graphelement_c find_getOneDIM_GEOnR302(ModelRoot modelRoot, Diagramelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Graphelement_c source = (Graphelement_c)target.backPointer_IsSubtypeGraphelementIsSubtype_R302;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Graphelement_c [] getManyDIM_GEsOnR302(Diagramelement_c [] targets)
{
  return getManyDIM_GEsOnR302(targets, null);
}
public static Graphelement_c [] getManyDIM_GEsOnR302(Diagramelement_c [] targets, boolean loadComponent)
{
  return getManyDIM_GEsOnR302(targets, null, loadComponent);
}
public static Graphelement_c [] getManyDIM_GEsOnR302(Diagramelement_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR302(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR302(Diagramelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Graphelement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Graphelement_c source = (Graphelement_c)targets[i].backPointer_IsSubtypeGraphelementIsSubtype_R302;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Graphelement_c[] ret_set = new Graphelement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Graphelement_c[0];
  }
  }

public static Graphelement_c [] getManyDIM_GEsOnR302(Diagramelement_c target)
{
  if (target != null) {
    Diagramelement_c [] targetArray = new Diagramelement_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR302(targetArray);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
  return result ;
}
}

public static Graphelement_c [] getManyDIM_GEsOnR302(Diagramelement_c target, boolean loadComponent)
{
  if (target != null) {
    Diagramelement_c [] targetArray = new Diagramelement_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR302(targetArray, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

Graphnode_c backPointer_IsSubtypeGraphnodeIsSubtype_R301;

public void setGraphnodeOrderInChildListR301(Graphnode_c target, int index) {
	unrelateAcrossR301From(target);
	Graphnode_c[] elements = Graphnode_c.getManyDIM_NDsOnR301(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR301From((Graphnode_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR301To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR301To((Graphnode_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR301To(Graphnode_c target)
{
  if (target != null) {
    target.relateAcrossR301To(this, true) ;
  }
}

public void relateAcrossR301To(Graphnode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR301To(this, notifyChanges) ;
  }
}

public void setBackPointerR301To(Graphnode_c target)
{
    backPointer_IsSubtypeGraphnodeIsSubtype_R301 = target;
}

public void unrelateAcrossR301From(Graphnode_c target)
{
  if (target != null) {
    target.unrelateAcrossR301From(this, true) ;
  }
}

public void unrelateAcrossR301From(Graphnode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR301From(this, notifyChanges) ;
  }
}

public void clearBackPointerR301To(Graphnode_c target)
{
	if (target == backPointer_IsSubtypeGraphnodeIsSubtype_R301) {
		backPointer_IsSubtypeGraphnodeIsSubtype_R301 = null;
	}
}

public static Graphelement_c getOneDIM_GEOnR301(Graphnode_c [] targets)
{
    return getOneDIM_GEOnR301(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR301(Graphnode_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_GEOnR301(targets, test, true);
}

public static Graphelement_c getOneDIM_GEOnR301(Graphnode_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphelement_c candidate_val = getOneDIM_GEOnR301(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_GEOnR301(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR301(Graphnode_c target)
{
	return getOneDIM_GEOnR301(target, true);
}
public static Graphelement_c getOneDIM_GEOnR301(Graphnode_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeGraphelement ;
  } else {
    return null;
  }
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR301(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphelement_c[0];
  
  
  LinkedHashSet<Graphelement_c> elementsSet = new LinkedHashSet<Graphelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphelement == null)
	  targets[i].loadProxy();
    Graphelement_c associate = targets[i].IsSupertypeGraphelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphelement_c[] result = new Graphelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c [] targets)
{
  return getManyDIM_GEsOnR301(targets, null);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphnode_c [] targetArray = new Graphnode_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR301(targetArray, test, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
    return result ;
  }
  
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_GEsOnR301(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c target)
{
    return getManyDIM_GEsOnR301(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphnode_c target, boolean loadComponent)
{
    return getManyDIM_GEsOnR301(target, null, loadComponent);
}

  
  
  
// referred to navigation

Graphedge_c backPointer_IsSubtypeGraphedgeIsSubtype_R301;

public void setGraphedgeOrderInChildListR301(Graphedge_c target, int index) {
	unrelateAcrossR301From(target);
	Graphedge_c[] elements = Graphedge_c.getManyDIM_EDsOnR301(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR301From((Graphedge_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR301To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR301To((Graphedge_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR301To(Graphedge_c target)
{
  if (target != null) {
    target.relateAcrossR301To(this, true) ;
  }
}

public void relateAcrossR301To(Graphedge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR301To(this, notifyChanges) ;
  }
}

public void setBackPointerR301To(Graphedge_c target)
{
    backPointer_IsSubtypeGraphedgeIsSubtype_R301 = target;
}

public void unrelateAcrossR301From(Graphedge_c target)
{
  if (target != null) {
    target.unrelateAcrossR301From(this, true) ;
  }
}

public void unrelateAcrossR301From(Graphedge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR301From(this, notifyChanges) ;
  }
}

public void clearBackPointerR301To(Graphedge_c target)
{
	if (target == backPointer_IsSubtypeGraphedgeIsSubtype_R301) {
		backPointer_IsSubtypeGraphedgeIsSubtype_R301 = null;
	}
}

public static Graphelement_c getOneDIM_GEOnR301(Graphedge_c [] targets)
{
    return getOneDIM_GEOnR301(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR301(Graphedge_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_GEOnR301(targets, test, true);
}

public static Graphelement_c getOneDIM_GEOnR301(Graphedge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphelement_c candidate_val = getOneDIM_GEOnR301(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_GEOnR301(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR301(Graphedge_c target)
{
	return getOneDIM_GEOnR301(target, true);
}
public static Graphelement_c getOneDIM_GEOnR301(Graphedge_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeGraphelement ;
  } else {
    return null;
  }
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR301(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphelement_c[0];
  
  
  LinkedHashSet<Graphelement_c> elementsSet = new LinkedHashSet<Graphelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphelement == null)
	  targets[i].loadProxy();
    Graphelement_c associate = targets[i].IsSupertypeGraphelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphelement_c[] result = new Graphelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c [] targets)
{
  return getManyDIM_GEsOnR301(targets, null);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphedge_c [] targetArray = new Graphedge_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR301(targetArray, test, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
    return result ;
  }
  
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_GEsOnR301(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c target)
{
    return getManyDIM_GEsOnR301(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR301(Graphedge_c target, boolean loadComponent)
{
    return getManyDIM_GEsOnR301(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Graphconnector_c> backPointer_AnchorageGraphconnectorAnchorage_R311 = new ArrayList<Graphconnector_c>();

public void setGraphconnectorOrderInChildListR311(Graphconnector_c target, int index) {
	unrelateAcrossR311From(target);
	Graphconnector_c[] elements = Graphconnector_c.getManyDIM_CONsOnR311(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR311From((Graphconnector_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR311To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR311To((Graphconnector_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR311To(Graphconnector_c target)
{
  if (target != null) {
    target.relateAcrossR311To(this, true) ;
  }
}

public void relateAcrossR311To(Graphconnector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR311To(this, notifyChanges) ;
  }
}

public void setBackPointerR311To(Graphconnector_c target)
{
  	synchronized (backPointer_AnchorageGraphconnectorAnchorage_R311) {
		backPointer_AnchorageGraphconnectorAnchorage_R311.add(target);
	}
}

public void unrelateAcrossR311From(Graphconnector_c target)
{
  if (target != null) {
    target.unrelateAcrossR311From(this, true) ;
  }
}

public void unrelateAcrossR311From(Graphconnector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR311From(this, notifyChanges) ;
  }
}

public void clearBackPointerR311To(Graphconnector_c target)
{
  synchronized (backPointer_AnchorageGraphconnectorAnchorage_R311) {
	    backPointer_AnchorageGraphconnectorAnchorage_R311.remove(target);
	}
}

public static Graphelement_c getOneDIM_GEOnR311(Graphconnector_c [] targets)
{
    return getOneDIM_GEOnR311(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR311(Graphconnector_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_GEOnR311(targets, test, true);
}

public static Graphelement_c getOneDIM_GEOnR311(Graphconnector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphelement_c candidate_val = getOneDIM_GEOnR311(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_GEOnR311(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR311(Graphconnector_c target)
{
	return getOneDIM_GEOnR311(target, true);
}
public static Graphelement_c getOneDIM_GEOnR311(Graphconnector_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ElementGraphelement ;
  } else {
    return null;
  }
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR311(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphelement_c[0];
  
  
  LinkedHashSet<Graphelement_c> elementsSet = new LinkedHashSet<Graphelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ElementGraphelement == null)
	  targets[i].loadProxy();
    Graphelement_c associate = targets[i].ElementGraphelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphelement_c[] result = new Graphelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c [] targets)
{
  return getManyDIM_GEsOnR311(targets, null);
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphconnector_c [] targetArray = new Graphconnector_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR311(targetArray, test, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
    return result ;
  }
  
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_GEsOnR311(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c target)
{
    return getManyDIM_GEsOnR311(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR311(Graphconnector_c target, boolean loadComponent)
{
    return getManyDIM_GEsOnR311(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Diagramelement_c> backPointer_ContainedDiagramelementContained_R307 = new ArrayList<Diagramelement_c>();

public void setDiagramelementOrderInChildListR307(Diagramelement_c target, int index) {
	unrelateAcrossR307From(target);
	Diagramelement_c[] elements = Diagramelement_c.getManyDIM_ELEsOnR307(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR307From((Diagramelement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR307To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR307To((Diagramelement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR307To(Diagramelement_c target)
{
  if (target != null) {
    target.relateAcrossR307To(this, true) ;
  }
}

public void relateAcrossR307To(Diagramelement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR307To(this, notifyChanges) ;
  }
}

public void setBackPointerR307To(Diagramelement_c target)
{
  	synchronized (backPointer_ContainedDiagramelementContained_R307) {
		backPointer_ContainedDiagramelementContained_R307.add(target);
	}
}

public void unrelateAcrossR307From(Diagramelement_c target)
{
  if (target != null) {
    target.unrelateAcrossR307From(this, true) ;
  }
}

public void unrelateAcrossR307From(Diagramelement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR307From(this, notifyChanges) ;
  }
}

public void clearBackPointerR307To(Diagramelement_c target)
{
  synchronized (backPointer_ContainedDiagramelementContained_R307) {
	    backPointer_ContainedDiagramelementContained_R307.remove(target);
	}
}

public static Graphelement_c getOneDIM_GEOnR307(Diagramelement_c [] targets)
{
    return getOneDIM_GEOnR307(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR307(Diagramelement_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_GEOnR307(targets, test, true);
}

public static Graphelement_c getOneDIM_GEOnR307(Diagramelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphelement_c candidate_val = getOneDIM_GEOnR307(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_GEOnR307(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR307(Diagramelement_c target)
{
	return getOneDIM_GEOnR307(target, true);
}
public static Graphelement_c getOneDIM_GEOnR307(Diagramelement_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainerGraphelement ;
  } else {
    return null;
  }
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR307(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphelement_c[0];
  
  
  LinkedHashSet<Graphelement_c> elementsSet = new LinkedHashSet<Graphelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainerGraphelement == null)
	  targets[i].loadProxy();
    Graphelement_c associate = targets[i].ContainerGraphelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphelement_c[] result = new Graphelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c [] targets)
{
  return getManyDIM_GEsOnR307(targets, null);
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Diagramelement_c [] targetArray = new Diagramelement_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR307(targetArray, test, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
    return result ;
  }
  
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_GEsOnR307(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c target)
{
    return getManyDIM_GEsOnR307(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR307(Diagramelement_c target, boolean loadComponent)
{
    return getManyDIM_GEsOnR307(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Diagramlink_c> backPointer_LinkDiagramlinkLink_R309 = new ArrayList<Diagramlink_c>();

public void setDiagramlinkOrderInChildListR309(Diagramlink_c target, int index) {
	unrelateAcrossR309From(target);
	Diagramlink_c[] elements = Diagramlink_c.getManyDIM_DLKsOnR309(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR309From((Diagramlink_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR309To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR309To((Diagramlink_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR309To(Diagramlink_c target)
{
  if (target != null) {
    target.relateAcrossR309To(this, true) ;
  }
}

public void relateAcrossR309To(Diagramlink_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR309To(this, notifyChanges) ;
  }
}

public void setBackPointerR309To(Diagramlink_c target)
{
  	synchronized (backPointer_LinkDiagramlinkLink_R309) {
		backPointer_LinkDiagramlinkLink_R309.add(target);
	}
}

public void unrelateAcrossR309From(Diagramlink_c target)
{
  if (target != null) {
    target.unrelateAcrossR309From(this, true) ;
  }
}

public void unrelateAcrossR309From(Diagramlink_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR309From(this, notifyChanges) ;
  }
}

public void clearBackPointerR309To(Diagramlink_c target)
{
  synchronized (backPointer_LinkDiagramlinkLink_R309) {
	    backPointer_LinkDiagramlinkLink_R309.remove(target);
	}
}

public static Graphelement_c getOneDIM_GEOnR309(Diagramlink_c [] targets)
{
    return getOneDIM_GEOnR309(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR309(Diagramlink_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_GEOnR309(targets, test, true);
}

public static Graphelement_c getOneDIM_GEOnR309(Diagramlink_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphelement_c candidate_val = getOneDIM_GEOnR309(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_GEOnR309(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR309(Diagramlink_c target)
{
	return getOneDIM_GEOnR309(target, true);
}
public static Graphelement_c getOneDIM_GEOnR309(Diagramlink_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainerGraphelement ;
  } else {
    return null;
  }
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR309(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphelement_c[0];
  
  
  LinkedHashSet<Graphelement_c> elementsSet = new LinkedHashSet<Graphelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainerGraphelement == null)
	  targets[i].loadProxy();
    Graphelement_c associate = targets[i].ContainerGraphelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphelement_c[] result = new Graphelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c [] targets)
{
  return getManyDIM_GEsOnR309(targets, null);
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Diagramlink_c [] targetArray = new Diagramlink_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR309(targetArray, test, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
    return result ;
  }
  
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_GEsOnR309(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c target)
{
    return getManyDIM_GEsOnR309(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR309(Diagramlink_c target, boolean loadComponent)
{
    return getManyDIM_GEsOnR309(target, null, loadComponent);
}


    
  
  
// referred to navigation

GraphicalElement_c backPointer_IsGraphicalDataAnalogOfGraphicalElementIsGraphicalDataAnalogOf_R23;

public void setGraphicalElementOrderInChildListR23(GraphicalElement_c target, int index) {
	unrelateAcrossR23From(target);
	GraphicalElement_c[] elements = GraphicalElement_c.getManyGD_GEsOnR23(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR23From((GraphicalElement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR23To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR23To((GraphicalElement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR23To(GraphicalElement_c target)
{
  if (target != null) {
    target.relateAcrossR23To(this, true) ;
  }
}

public void relateAcrossR23To(GraphicalElement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR23To(this, notifyChanges) ;
  }
}

public void setBackPointerR23To(GraphicalElement_c target)
{
    backPointer_IsGraphicalDataAnalogOfGraphicalElementIsGraphicalDataAnalogOf_R23 = target;
}

public void unrelateAcrossR23From(GraphicalElement_c target)
{
  if (target != null) {
    target.unrelateAcrossR23From(this, true) ;
  }
}

public void unrelateAcrossR23From(GraphicalElement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR23From(this, notifyChanges) ;
  }
}

public void clearBackPointerR23To(GraphicalElement_c target)
{
	if (target == backPointer_IsGraphicalDataAnalogOfGraphicalElementIsGraphicalDataAnalogOf_R23) {
		backPointer_IsGraphicalDataAnalogOfGraphicalElementIsGraphicalDataAnalogOf_R23 = null;
	}
}

public static Graphelement_c getOneDIM_GEOnR23(GraphicalElement_c [] targets)
{
    return getOneDIM_GEOnR23(targets, null);
}

public static Graphelement_c getOneDIM_GEOnR23(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_GEOnR23(targets, test, true);
}

public static Graphelement_c getOneDIM_GEOnR23(GraphicalElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphelement_c candidate_val = getOneDIM_GEOnR23(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_GEOnR23(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphelement_c getOneDIM_GEOnR23(GraphicalElement_c target)
{
	return getOneDIM_GEOnR23(target, true);
}
public static Graphelement_c getOneDIM_GEOnR23(GraphicalElement_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsDimAnalogOfGraphelement ;
  } else {
    return null;
  }
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_GEsOnR23(targets, test, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphelement_c[0];
  
  
  LinkedHashSet<Graphelement_c> elementsSet = new LinkedHashSet<Graphelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDimAnalogOfGraphelement == null)
	  targets[i].loadProxy();
    Graphelement_c associate = targets[i].IsDimAnalogOfGraphelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphelement_c[] result = new Graphelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c [] targets)
{
  return getManyDIM_GEsOnR23(targets, null);
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyDIM_GEsOnR23(targetArray, test, loadComponent);
  } else {
    Graphelement_c [] result = new Graphelement_c [0] ;
    return result ;
  }
  
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_GEsOnR23(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c target)
{
    return getManyDIM_GEsOnR23(target, null, true);
}

public static Graphelement_c [] getManyDIM_GEsOnR23(GraphicalElement_c target, boolean loadComponent)
{
    return getManyDIM_GEsOnR23(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (SemanticModelSemanticmodelbridge == null) {          
      // R312
      Semanticmodelbridge_c relInst21803 = (Semanticmodelbridge_c) baseRoot.getInstanceList(Semanticmodelbridge_c.class).get(new Object[] {m_smb_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21803 == null) {
      			relInst21803 = (Semanticmodelbridge_c) Ooaofooa.getDefaultInstance().getInstanceList(Semanticmodelbridge_c.class).get(new Object[] {m_smb_id});
      		}
			//synchronized
      if ( relInst21803 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21803) && !isProxy())) {
	      relInst21803.relateAcrossR312To(this, notifyChanges);
	  }
	  }
	}
	          

      // R302
      Diagramelement_c relInst21804 = (Diagramelement_c) baseRoot.getInstanceList(Diagramelement_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21804 == null) {
      			relInst21804 = (Diagramelement_c) Ooaofooa.getDefaultInstance().getInstanceList(Diagramelement_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst21804 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21804) && !isProxy())) {
	      relInst21804.relateAcrossR302To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R312
      // DIM_SMB
		  inst=SemanticModelSemanticmodelbridge;
			unrelateAcrossR312From(SemanticModelSemanticmodelbridge, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R302
      // DIM_ELE
		  inst=IsSupertypeDiagramelement;
			unrelateAcrossR302From(IsSupertypeDiagramelement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Graphelement_c inst = (Graphelement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Graphelement_c GraphelementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Graphelement_c result=findGraphelementInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Graphelement_c findGraphelementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Graphelement_c x = (Graphelement_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Graphelement_c GraphelementInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return GraphelementInstance(modelRoot,test,true);
  }
  
  public static Graphelement_c GraphelementInstance(ModelRoot modelRoot)
  {
	 return GraphelementInstance(modelRoot,null,true);
  }

  public static Graphelement_c [] GraphelementInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Graphelement_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Graphelement_c x = (Graphelement_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Graphelement_c[] ret_set = new Graphelement_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Graphelement_c[0];
			}		
		} 
  }
  public static Graphelement_c [] GraphelementInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  GraphelementInstances(modelRoot,test,true);
  }
  public static Graphelement_c [] GraphelementInstances(ModelRoot modelRoot)
  {
	return GraphelementInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the GraphElement.dispose call: ";
	Semanticmodelbridge_c testR312Inst = Semanticmodelbridge_c.getOneDIM_SMBOnR312(this, false);

	if ( testR312Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "312 ";
	}
	Diagramelement_c testR302Inst2 = Diagramelement_c.getOneDIM_ELEOnR302(this, false);

	if ( testR302Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "302 ";
	}
	Graphnode_c testR301Inst1 = Graphnode_c.getOneDIM_NDOnR301(this, false);

	if ( testR301Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "301 ";
	}
	Graphedge_c testR301Inst2 = Graphedge_c.getOneDIM_EDOnR301(this, false);

	if ( testR301Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "301 ";
	}
	Graphconnector_c testR311Inst = Graphconnector_c.getOneDIM_CONOnR311(this, false);

	if ( testR311Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "311 ";	
	}
	Diagramelement_c testR307Inst = Diagramelement_c.getOneDIM_ELEOnR307(this, false);

	if ( testR307Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "307 ";	
	}
	Diagramlink_c testR309Inst = Diagramlink_c.getOneDIM_DLKOnR309(this, false);

	if ( testR309Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "309 ";	
	}
	GraphicalElement_c testR23Inst = GraphicalElement_c.getOneGD_GEOnR23(this, false);

	if ( testR23Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "23 ";	
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "GraphElement", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("elementid")){
         return true;
      }
      if(attributeName.equals("smb_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public float getPositionx()
  {
    return m_positionx ;
  }


  public void setPositionx(float newValue)
  {
    if(m_positionx == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Positionx", new Float(m_positionx), new Float(newValue),true);

   m_positionx = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public float getPositiony()
  {
    return m_positiony ;
  }


  public void setPositiony(float newValue)
  {
    if(m_positiony == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Positiony", new Float(m_positiony), new Float(newValue),true);

   m_positiony = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if ( IsSupertypeDiagramelement != null )
    {
      return IsSupertypeDiagramelement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( IsSupertypeDiagramelement != null )
    {
      return IsSupertypeDiagramelement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeDiagramelement != null );
 
 }                  

  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public void setElementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_elementid)){
	        return;
	    }
	}else if(m_elementid != null){
	    if(m_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Elementid", m_elementid, newValue,true); 
   m_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSmb_idLongBased()
  {
    if ( SemanticModelSemanticmodelbridge != null )
    {
      return SemanticModelSemanticmodelbridge.getSmb_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSmb_id()
  {
    if ( SemanticModelSemanticmodelbridge != null )
    {
      return SemanticModelSemanticmodelbridge.getSmb_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSmb_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_smb_id) )
      return m_smb_id;
    else
      return getSmb_id();
  }
  
  public void setSmb_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_smb_id)){
	        return;
	    }
	}else if(m_smb_id != null){
	    if(m_smb_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Smb_id", m_smb_id, newValue,true); 
   m_smb_id = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "GraphElement", //$NON-NLS-1$
	  " Operation entered: GraphElement::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Graphelement_c [] objs = Graphelement_c.GraphelementInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "GraphElement", //$NON-NLS-1$
	  " Operation entered: GraphElement::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Graphelement_c_test21806_c implements ClassQueryInterface_c
    {
	  Graphelement_c_test21806_c( java.util.UUID            p21807 ) {
	  m_p21807 = p21807;
	  }
	  private java.util.UUID             m_p21807; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphelement_c selected = (Graphelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21807));
	      return retval;
	  }
    }

    Graphelement_c [] objs21805 = 
    Graphelement_c.GraphelementInstances(modelRoot, new Graphelement_c_test21806_c(getElementid())) ;

    if ( (  (objs21805.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphElement", //$NON-NLS-1$
           "Consistency: Object: GraphElement: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21805.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphElement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21805.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21805.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphElement", //$NON-NLS-1$
           "Consistency: Object: GraphElement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21805.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphElement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21805.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // GraphElement is a subtype in association: rel.Numb = 302
          // The supertype class is: DiagramElement
    class Diagramelement_c_test21811_c implements ClassQueryInterface_c
    {
	  Diagramelement_c_test21811_c( java.util.UUID            p21812 ) {
	  m_p21812 = p21812;
	  }
	  private java.util.UUID             m_p21812; 
	  public boolean evaluate (Object candidate)
	  {
	      Diagramelement_c selected = (Diagramelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21812));
	      return retval;
	  }
    }

    Diagramelement_c [] objs21810 = 
    Diagramelement_c.DiagramelementInstances(modelRoot, new Diagramelement_c_test21811_c(getElementid())) ;

    if ( (  (objs21810.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphElement", //$NON-NLS-1$
           "Consistency: Object: GraphElement: Association: 302: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21810.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphElement: Association: 302: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21810.length )  , e); 
      }
      retval = false;

    }

          // GraphElement is a referring class in association: rel.Numb = 312
          // The participating class is: SemanticModelBridge
    class Semanticmodelbridge_c_test21814_c implements ClassQueryInterface_c
    {
	  Semanticmodelbridge_c_test21814_c( java.util.UUID            p21815 ) {
	  m_p21815 = p21815;
	  }
	  private java.util.UUID             m_p21815; 
	  public boolean evaluate (Object candidate)
	  {
	      Semanticmodelbridge_c selected = (Semanticmodelbridge_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSmb_id().equals(m_p21815));
	      return retval;
	  }
    }

    Semanticmodelbridge_c [] objs21813 = 
    Semanticmodelbridge_c.SemanticmodelbridgeInstances(modelRoot, new Semanticmodelbridge_c_test21814_c(getSmb_id())) ;

    if ( (  (objs21813.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphElement", //$NON-NLS-1$
           "Consistency: Object: GraphElement: Association: 312: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21813.length )  + " Smb_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphElement: Association: 312: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21813.length )  + " Smb_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Supertype: rel.Numb = 301
    int objs21816 = 0;
            // Subtype Object: GraphNode
    class Graphnode_c_test21817_c implements ClassQueryInterface_c
    {
	  Graphnode_c_test21817_c( java.util.UUID            p21818 ) {
	  m_p21818 = p21818;
	  }
	  private java.util.UUID             m_p21818; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphnode_c selected = (Graphnode_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21818));
	      return retval;
	  }
    }

    Graphnode_c [] objs21819 = 
    Graphnode_c.GraphnodeInstances(modelRoot, new Graphnode_c_test21817_c(getElementid())) ;
 
    objs21816 = objs21816 + objs21819.length;
            // Subtype Object: GraphEdge
    class Graphedge_c_test21820_c implements ClassQueryInterface_c
    {
	  Graphedge_c_test21820_c( java.util.UUID            p21821 ) {
	  m_p21821 = p21821;
	  }
	  private java.util.UUID             m_p21821; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphedge_c selected = (Graphedge_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21821));
	      return retval;
	  }
    }

    Graphedge_c [] objs21822 = 
    Graphedge_c.GraphedgeInstances(modelRoot, new Graphedge_c_test21820_c(getElementid())) ;
 
    objs21816 = objs21816 + objs21822.length;
    if ( objs21816 != 1 )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphElement", //$NON-NLS-1$
           "Consistency: Object: GraphElement: Association: 301: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21816 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphElement: Association: 301: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21816 )  , e); 
      }
      retval = false;

    }

          // GraphElement is a participating class in association: rel.Numb = 311
             // Object: GraphConnector
          // GraphElement is a participating class in association: rel.Numb = 307
             // Object: DiagramElement
          // GraphElement is a participating class in association: rel.Numb = 309
             // Object: DiagramLink
          // GraphElement is a participating class in association: rel.Numb = 23
             // Object: Graphical Element
    class GraphicalElement_c_test21824_c implements ClassQueryInterface_c
    {
	  GraphicalElement_c_test21824_c( java.util.UUID            p21825 ) {
	  m_p21825 = p21825;
	  }
	  private java.util.UUID             m_p21825; 
	  public boolean evaluate (Object candidate)
	  {
	      GraphicalElement_c selected = (GraphicalElement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21825));
	      return retval;
	  }
    }

    GraphicalElement_c [] objs21823 = 
    GraphicalElement_c.GraphicalElementInstances(modelRoot, new GraphicalElement_c_test21824_c(getElementid())) ;

    if ( (  (objs21823.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphElement", //$NON-NLS-1$
           "Consistency: Object: GraphElement: Association: 23: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21823.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphElement: Association: 23: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21823.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "GraphElement", " Operation entered: Graphelement::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Diagramelement_c v_de = Diagramelement_c.getOneDIM_ELEOnR302(this);


if ( (  (v_de != null)) )
{

if (v_de != null) {
v_de.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Diagramlink_c [] v_link_set = Diagramlink_c.getManyDIM_DLKsOnR309(this);


Diagramlink_c  v_link = null;
for ( int i21300 = 0; i21300 < v_link_set.length; i21300++)
{
  v_link = v_link_set[i21300] ;

this.unrelateAcrossR309From(v_link);


if (v_link != null) {
v_link.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Diagramelement_c [] v_contained_ele_set = Diagramelement_c.getManyDIM_ELEsOnR307(this);


Diagramelement_c  v_contained_ele = null;
for ( int i21301 = 0; i21301 < v_contained_ele_set.length; i21301++)
{
  v_contained_ele = v_contained_ele_set[i21301] ;

this.unrelateAcrossR307From(v_contained_ele);


if (v_contained_ele != null) {
v_contained_ele.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Graphedge_c v_edge = Graphedge_c.getOneDIM_EDOnR301(this);


if ( (  (v_edge != null)) )
{

this.unrelateAcrossR301From(v_edge);


if (v_edge != null) {
v_edge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR301(this);


if ( (  (v_node != null)) )
{

this.unrelateAcrossR301From(v_node);


if (v_node != null) {
v_node.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR23(this);


if ( (  (v_ge != null)) )
{

this.unrelateAcrossR23From(v_ge);


if (v_ge != null) {
v_ge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Graphconnector_c [] v_con_set = Graphconnector_c.getManyDIM_CONsOnR311(this);


Graphconnector_c  v_con = null;
for ( int i21302 = 0; i21302 < v_con_set.length; i21302++)
{
  v_con = v_con_set[i21302] ;

this.unrelateAcrossR311From(v_con);


if (v_con != null) {
v_con.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



}


   } // End dispose
  public  String       Get_name()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "GraphElement", " Operation entered: Graphelement::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "Positional Data";



   } // End get_name

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end GraphElement
