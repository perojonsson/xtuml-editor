//========================================================================
//
// File: src/com/mentor/nucleus/bp/ui/canvas/cells/CellModifierProvider.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.core/arc/generate_cell_modifiers.arc
// Version:      $Revision: 1.2 $
//
// Copyright 2005-2014 Mentor Graphics Corporation.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
//  Optional Comments about the generated java file
//
package com.mentor.nucleus.bp.ui.canvas.cells;

import java.util.HashMap;

import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.swt.widgets.Composite;

import com.mentor.nucleus.bp.core.ui.cells.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.inspector.ObjectElement;
import com.mentor.nucleus.bp.ui.canvas.cells.providers.*;

public class CellModifierProvider {

	private static HashMap<Class<?>, ICellProvider> cellProviders = new HashMap<Class<?>, ICellProvider>();
	
	static {
      cellProviders.put(Model_c.class, new ModelCellProvider());
      cellProviders.put(Fillcolorstyle_c.class, new FillColorStyleCellProvider());
      cellProviders.put(Linecolorstyle_c.class, new LineColorStyleCellProvider());
      cellProviders.put(GraphicalElement_c.class, new GraphicalElementCellProvider());
      cellProviders.put(Shape_c.class, new ShapeCellProvider());
      cellProviders.put(Connector_c.class, new ConnectorCellProvider());
      cellProviders.put(Graphelement_c.class, new GraphElementCellProvider());
      cellProviders.put(Graphnode_c.class, new GraphNodeCellProvider());
      cellProviders.put(Waypoint_c.class, new WaypointCellProvider());
      cellProviders.put(FloatingText_c.class, new FloatingTextCellProvider());
      cellProviders.put(Graphconnector_c.class, new GraphConnectorCellProvider());
      cellProviders.put(Layer_c.class, new LayerCellProvider());
      cellProviders.put(Graphicalelementinlayer_c.class, new GraphicalElementInLayerCellProvider());
	}
	
	public static CellEditor getCellEditor(NonRootModelElement element, Composite parent, ObjectElement data) {
		ICellProvider cellProvider = cellProviders .get(element.getClass());
		if(cellProvider != null) {
			return cellProvider.getCellEditor(element, parent, data);
		}
		return null;
	}

	public static boolean supportsEdit(NonRootModelElement element,
			ObjectElement data, Composite parent) {
		ICellProvider cellProvider = cellProviders.get(element.getClass());
		if(cellProvider != null) {
			return cellProvider.supportsEdit(element, data, parent);
		}
		return false;
	}
	
	public static String getValue(NonRootModelElement element, ObjectElement data) {
		ICellProvider cellProvider = cellProviders.get(element.getClass());
		if(cellProvider != null) {
			return cellProvider.getValue(element, data);
		}
		return null;
	}
	
	public static void setValue(NonRootModelElement element, ObjectElement data, Object value, NonRootModelElement attributeOwner) {
		ICellProvider cellProvider = cellProviders.get(element.getClass());
		if(cellProvider != null) {
		    if(attributeOwner != null) {
		    	element = attributeOwner;
		    }
			cellProvider.setValue(element, data, value);
		}
	}

}
