      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Polyline_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_POLYLINE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Polyline_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Polyline_c(ModelRoot modelRoot,
       boolean      p_m_closed,
       java.util.UUID         p_m_elementid)
  {
    super(modelRoot);
       m_closed = p_m_closed;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public Polyline_c createProxy(ModelRoot modelRoot,
       boolean      p_m_closed,
       java.util.UUID         p_m_elementid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);
      Polyline_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (Polyline_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_closed = p_m_closed;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Polyline_c(modelRoot,
p_m_closed,
p_m_elementid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Polyline_c resolveInstance(ModelRoot modelRoot,
       boolean      p_m_closed,
       java.util.UUID         p_m_elementid){
    InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);
    Polyline_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (Polyline_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_closed = p_m_closed;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Polyline_c new_inst = new Polyline_c(modelRoot,
p_m_closed,
p_m_elementid
);
    return new_inst;
  }
  public Polyline_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_elementid = IdAssigner.NULL_UUID;   
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Polyline_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Polyline_c)) {
           return false;
       }
       
       Polyline_c me = (Polyline_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((Polyline_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((Polyline_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Polyline_c)) {
           return false;
       }
       
       Polyline_c me = (Polyline_c)elem;
      if (!getElementidCachedValue().equals(((Polyline_c)elem).getElementidCachedValue())) return false;
      return true;
    }


  // Attributes
  private boolean      m_closed ;
  private java.util.UUID         m_elementid ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphicprimitive_c IsSupertypeGraphicprimitive ;
public void relateAcrossR306To(Graphicprimitive_c target)
{
	relateAcrossR306To(target, true);
}
public void relateAcrossR306To(Graphicprimitive_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeGraphicprimitive) return;  // already related

    if ( IsSupertypeGraphicprimitive != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeGraphicprimitive != null) {
    
        IsSupertypeGraphicprimitive.clearBackPointerR306To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Polyline_c.relateAcrossR306To(Graphicprimitive_c target)", 
			"Relate performed across R306 from PolyLine to GraphicPrimitive without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeGraphicprimitive = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR306To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "306", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR306From(Graphicprimitive_c target)
{
	unrelateAcrossR306From(target, true);
}
public void unrelateAcrossR306From(Graphicprimitive_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeGraphicprimitive == null) return;  // already unrelated
	
	if (target != IsSupertypeGraphicprimitive) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R306", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR306To(this);
    }
    

      if(IsSupertypeGraphicprimitive != null) {
      
        m_elementid = IsSupertypeGraphicprimitive.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = IsSupertypeGraphicprimitive.getElementidCachedValue();
        }       
        IsSupertypeGraphicprimitive = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "306", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Polyline_c getOneDIM_PLNOnR306(Graphicprimitive_c [] targets)
{
    return getOneDIM_PLNOnR306(targets, null);
}

public static Polyline_c getOneDIM_PLNOnR306(Graphicprimitive_c [] targets, ClassQueryInterface_c test)
{
    Polyline_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_PLNOnR306(targets[i], test);
        }
    }

    return ret_val;
}

public static Polyline_c getOneDIM_PLNOnR306(Graphicprimitive_c target)
{
  return getOneDIM_PLNOnR306(target, null);
}

public static Polyline_c getOneDIM_PLNOnR306(Graphicprimitive_c target, boolean loadComponent)
{
    return getOneDIM_PLNOnR306(target.getModelRoot(), target, null, loadComponent);
}

public static Polyline_c getOneDIM_PLNOnR306(Graphicprimitive_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_PLNOnR306(target.getModelRoot(), target, test);
  }
  return null;
}

public static Polyline_c getOneDIM_PLNOnR306(ModelRoot modelRoot, Graphicprimitive_c target, ClassQueryInterface_c test)
{
	return getOneDIM_PLNOnR306(modelRoot, target, test, true);
}

public static Polyline_c getOneDIM_PLNOnR306(ModelRoot modelRoot, Graphicprimitive_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_PLNOnR306(modelRoot,target,test);
}
private static Polyline_c find_getOneDIM_PLNOnR306(ModelRoot modelRoot, Graphicprimitive_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Polyline_c source = (Polyline_c)target.backPointer_IsSubtypePolylineIsSubtype_R306;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Polyline_c [] getManyDIM_PLNsOnR306(Graphicprimitive_c [] targets)
{
  return getManyDIM_PLNsOnR306(targets, null);
}
public static Polyline_c [] getManyDIM_PLNsOnR306(Graphicprimitive_c [] targets, boolean loadComponent)
{
  return getManyDIM_PLNsOnR306(targets, null, loadComponent);
}
public static Polyline_c [] getManyDIM_PLNsOnR306(Graphicprimitive_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_PLNsOnR306(targets, test, true);
}

public static Polyline_c [] getManyDIM_PLNsOnR306(Graphicprimitive_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Polyline_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Polyline_c source = (Polyline_c)targets[i].backPointer_IsSubtypePolylineIsSubtype_R306;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Polyline_c[] ret_set = new Polyline_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Polyline_c[0];
  }
  }

public static Polyline_c [] getManyDIM_PLNsOnR306(Graphicprimitive_c target)
{
  if (target != null) {
    Graphicprimitive_c [] targetArray = new Graphicprimitive_c[1];
    targetArray[0] = target;
    return getManyDIM_PLNsOnR306(targetArray);
  } else {
    Polyline_c [] result = new Polyline_c [0] ;
  return result ;
}
}

public static Polyline_c [] getManyDIM_PLNsOnR306(Graphicprimitive_c target, boolean loadComponent)
{
  if (target != null) {
    Graphicprimitive_c [] targetArray = new Graphicprimitive_c[1];
    targetArray[0] = target;
    return getManyDIM_PLNsOnR306(targetArray, loadComponent);
  } else {
    Polyline_c [] result = new Polyline_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Waypoint_c> backPointer_WaypointWaypointWaypoint_R323 = new ArrayList<Waypoint_c>();

public void setWaypointOrderInChildListR323(Waypoint_c target, int index) {
	unrelateAcrossR323From(target);
	Waypoint_c[] elements = Waypoint_c.getManyDIM_WAYsOnR323(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR323From((Waypoint_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR323To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR323To((Waypoint_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR323To(Waypoint_c target)
{
  if (target != null) {
    target.relateAcrossR323To(this, true) ;
  }
}

public void relateAcrossR323To(Waypoint_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR323To(this, notifyChanges) ;
  }
}

public void setBackPointerR323To(Waypoint_c target)
{
  	synchronized (backPointer_WaypointWaypointWaypoint_R323) {
		backPointer_WaypointWaypointWaypoint_R323.add(target);
	}
}

public void unrelateAcrossR323From(Waypoint_c target)
{
  if (target != null) {
    target.unrelateAcrossR323From(this, true) ;
  }
}

public void unrelateAcrossR323From(Waypoint_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR323From(this, notifyChanges) ;
  }
}

public void clearBackPointerR323To(Waypoint_c target)
{
  synchronized (backPointer_WaypointWaypointWaypoint_R323) {
	    backPointer_WaypointWaypointWaypoint_R323.remove(target);
	}
}

public static Polyline_c getOneDIM_PLNOnR323(Waypoint_c [] targets)
{
    return getOneDIM_PLNOnR323(targets, null);
}

public static Polyline_c getOneDIM_PLNOnR323(Waypoint_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_PLNOnR323(targets, test, true);
}

public static Polyline_c getOneDIM_PLNOnR323(Waypoint_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Polyline_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Polyline_c candidate_val = getOneDIM_PLNOnR323(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_PLNOnR323(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Polyline_c getOneDIM_PLNOnR323(Waypoint_c target)
{
	return getOneDIM_PLNOnR323(target, true);
}
public static Polyline_c getOneDIM_PLNOnR323(Waypoint_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.PolylinePolyline ;
  } else {
    return null;
  }
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_PLNsOnR323(targets, test, true);
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Polyline_c[0];
  
  
  LinkedHashSet<Polyline_c> elementsSet = new LinkedHashSet<Polyline_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].PolylinePolyline == null)
	  targets[i].loadProxy();
    Polyline_c associate = targets[i].PolylinePolyline;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Polyline_c[] result = new Polyline_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c [] targets)
{
  return getManyDIM_PLNsOnR323(targets, null);
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyDIM_PLNsOnR323(targetArray, test, loadComponent);
  } else {
    Polyline_c [] result = new Polyline_c [0] ;
    return result ;
  }
  
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_PLNsOnR323(target, null, true);
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c target)
{
    return getManyDIM_PLNsOnR323(target, null, true);
}

public static Polyline_c [] getManyDIM_PLNsOnR323(Waypoint_c target, boolean loadComponent)
{
    return getManyDIM_PLNsOnR323(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R306
      Graphicprimitive_c relInst21726 = (Graphicprimitive_c) baseRoot.getInstanceList(Graphicprimitive_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21726 == null) {
      			relInst21726 = (Graphicprimitive_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphicprimitive_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst21726 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21726) && !isProxy())) {
	      relInst21726.relateAcrossR306To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R306
      // DIM_GRP
		  inst=IsSupertypeGraphicprimitive;
			unrelateAcrossR306From(IsSupertypeGraphicprimitive, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Polyline_c inst = (Polyline_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Polyline_c PolylineInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Polyline_c result=findPolylineInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Polyline_c findPolylineInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Polyline_c x = (Polyline_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Polyline_c PolylineInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return PolylineInstance(modelRoot,test,true);
  }
  
  public static Polyline_c PolylineInstance(ModelRoot modelRoot)
  {
	 return PolylineInstance(modelRoot,null,true);
  }

  public static Polyline_c [] PolylineInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Polyline_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Polyline_c x = (Polyline_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Polyline_c[] ret_set = new Polyline_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Polyline_c[0];
			}		
		} 
  }
  public static Polyline_c [] PolylineInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  PolylineInstances(modelRoot,test,true);
  }
  public static Polyline_c [] PolylineInstances(ModelRoot modelRoot)
  {
	return PolylineInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the PolyLine.dispose call: ";
	Waypoint_c testR323Inst = Waypoint_c.getOneDIM_WAYOnR323(this, false);

	if ( testR323Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "323 ";	
	}
	Graphicprimitive_c testR306Inst1 = Graphicprimitive_c.getOneDIM_GRPOnR306(this, false);

	if ( testR306Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "306 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "PolyLine", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public boolean getClosed()
  {
    return m_closed ;
  }


  public void setClosed(boolean newValue)
  {
    if(m_closed == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Closed", new Boolean(m_closed), new Boolean(newValue),true);

   m_closed = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if ( IsSupertypeGraphicprimitive != null )
    {
      return IsSupertypeGraphicprimitive.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( IsSupertypeGraphicprimitive != null )
    {
      return IsSupertypeGraphicprimitive.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeGraphicprimitive != null );
 
 }                  

  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public void setElementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_elementid)){
	        return;
	    }
	}else if(m_elementid != null){
	    if(m_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Elementid", m_elementid, newValue,true); 
   m_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "PolyLine", //$NON-NLS-1$
	  " Operation entered: PolyLine::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Polyline_c [] objs = Polyline_c.PolylineInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "PolyLine", //$NON-NLS-1$
	  " Operation entered: PolyLine::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Polyline_c_test21728_c implements ClassQueryInterface_c
    {
	  Polyline_c_test21728_c( java.util.UUID            p21729 ) {
	  m_p21729 = p21729;
	  }
	  private java.util.UUID             m_p21729; 
	  public boolean evaluate (Object candidate)
	  {
	      Polyline_c selected = (Polyline_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21729));
	      return retval;
	  }
    }

    Polyline_c [] objs21727 = 
    Polyline_c.PolylineInstances(modelRoot, new Polyline_c_test21728_c(getElementid())) ;

    if ( (  (objs21727.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "PolyLine", //$NON-NLS-1$
           "Consistency: Object: PolyLine: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21727.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: PolyLine: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21727.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21727.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "PolyLine", //$NON-NLS-1$
           "Consistency: Object: PolyLine: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21727.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: PolyLine: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21727.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // PolyLine is a subtype in association: rel.Numb = 306
          // The supertype class is: GraphicPrimitive
    class Graphicprimitive_c_test21733_c implements ClassQueryInterface_c
    {
	  Graphicprimitive_c_test21733_c( java.util.UUID            p21734 ) {
	  m_p21734 = p21734;
	  }
	  private java.util.UUID             m_p21734; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphicprimitive_c selected = (Graphicprimitive_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21734));
	      return retval;
	  }
    }

    Graphicprimitive_c [] objs21732 = 
    Graphicprimitive_c.GraphicprimitiveInstances(modelRoot, new Graphicprimitive_c_test21733_c(getElementid())) ;

    if ( (  (objs21732.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "PolyLine", //$NON-NLS-1$
           "Consistency: Object: PolyLine: Association: 306: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21732.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: PolyLine: Association: 306: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21732.length )  , e); 
      }
      retval = false;

    }

          // PolyLine is a participating class in association: rel.Numb = 323
             // Object: Waypoint
    class Waypoint_c_test21736_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test21736_c( java.util.UUID            p21737 ) {
	  m_p21737 = p21737;
	  }
	  private java.util.UUID             m_p21737; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPolyline_elementid().equals(m_p21737));
	      return retval;
	  }
    }

    Waypoint_c [] objs21735 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test21736_c(getElementid())) ;

    if ( (  (objs21735.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "PolyLine", //$NON-NLS-1$
           "Consistency: Object: PolyLine: Association: 323: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21735.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: PolyLine: Association: 323: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21735.length )  , e); 
      }
      retval = false;

    }
                
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "PolyLine", " Operation entered: Polyline::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphicprimitive_c v_gp = Graphicprimitive_c.getOneDIM_GRPOnR306(this);


if ( (  (v_gp != null)) )
{

if (v_gp != null) {
v_gp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Waypoint_c [] v_way_set = Waypoint_c.getManyDIM_WAYsOnR323(this);


Waypoint_c  v_way = null;
for ( int i21299 = 0; i21299 < v_way_set.length; i21299++)
{
  v_way = v_way_set[i21299] ;

this.unrelateAcrossR323From(v_way);


if (v_way != null) {
v_way.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



}


   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end PolyLine
