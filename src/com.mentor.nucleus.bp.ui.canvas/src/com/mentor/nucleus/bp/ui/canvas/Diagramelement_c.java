      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Diagramelement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_DIAGRAMELEMENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Diagramelement_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Diagramelement_c(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       boolean      p_m_isvisible,
       java.util.UUID         p_m_container_elementid)
  {
    super(modelRoot);
       m_isvisible = p_m_isvisible;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //extract 28 bit value only            
       m_elementidLongBased = 0xfffffff & p_m_elementid.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_container_elementid = IdAssigner.preprocessUUID(p_m_container_elementid);
        
    setUniqueId(m_elementid);
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public Diagramelement_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       boolean      p_m_isvisible,
       java.util.UUID         p_m_container_elementid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);
      Diagramelement_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (Diagramelement_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_isvisible = p_m_isvisible;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //extract 28 bit value only            
       new_inst.m_elementidLongBased = 0xfffffff & p_m_elementid.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_container_elementid = IdAssigner.preprocessUUID(p_m_container_elementid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Diagramelement_c(modelRoot,
p_m_elementid,
p_m_isvisible,
p_m_container_elementid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Diagramelement_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       boolean      p_m_isvisible,
       java.util.UUID         p_m_container_elementid){
    InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);
    Diagramelement_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (Diagramelement_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_isvisible = p_m_isvisible;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //extract 28 bit value only            
       source.m_elementidLongBased = 0xfffffff & p_m_elementid.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_container_elementid = IdAssigner.preprocessUUID(p_m_container_elementid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Diagramelement_c new_inst = new Diagramelement_c(modelRoot,
p_m_elementid,
p_m_isvisible,
p_m_container_elementid
);
    return new_inst;
  }
  public Diagramelement_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_elementid = idAssigner.createUUID();
     m_container_elementid = IdAssigner.NULL_UUID;   
    setUniqueId(m_elementid);
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Diagramelement_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Diagramelement_c)) {
           return false;
       }
       
       Diagramelement_c me = (Diagramelement_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((Diagramelement_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((Diagramelement_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Diagramelement_c)) {
           return false;
       }
       
       Diagramelement_c me = (Diagramelement_c)elem;
      if (!getElementid().equals(((Diagramelement_c)elem).getElementid())) return false;
      return true;
    }


  // Attributes
  private boolean      m_isvisible ;
  private java.util.UUID         m_elementid ;
  private long m_elementidLongBased ;
  private java.util.UUID         m_container_elementid ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphelement_c ContainerGraphelement ;
public void relateAcrossR307To(Graphelement_c target)
{
	relateAcrossR307To(target, true);
}
public void relateAcrossR307To(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ContainerGraphelement) return;  // already related

    if ( ContainerGraphelement != target ) {
    
    Object oldKey = getInstanceKey();

    if (ContainerGraphelement != null) {
    
        ContainerGraphelement.clearBackPointerR307To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Diagramelement_c.relateAcrossR307To(Graphelement_c target)", 
			"Relate performed across R307 from DiagramElement to GraphElement without unrelate of prior instance.");  
		}
    }
                
    	ContainerGraphelement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_container_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR307To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "307", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR307From(Graphelement_c target)
{
	unrelateAcrossR307From(target, true);
}
public void unrelateAcrossR307From(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ContainerGraphelement == null) return;  // already unrelated
	
	if (target != ContainerGraphelement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R307", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR307To(this);
    }
    

      if(ContainerGraphelement != null) {
      
        m_container_elementid = ContainerGraphelement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_container_elementid))
        {
          m_container_elementid = ContainerGraphelement.getElementidCachedValue();
        }       
        ContainerGraphelement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "307", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Diagramelement_c getOneDIM_ELEOnR307(Graphelement_c [] targets)
{
    return getOneDIM_ELEOnR307(targets, null);
}

public static Diagramelement_c getOneDIM_ELEOnR307(Graphelement_c [] targets, ClassQueryInterface_c test)
{
    Diagramelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_ELEOnR307(targets[i], test);
        }
    }

    return ret_val;
}

public static Diagramelement_c getOneDIM_ELEOnR307(Graphelement_c target)
{
  return getOneDIM_ELEOnR307(target, null);
}

public static Diagramelement_c getOneDIM_ELEOnR307(Graphelement_c target, boolean loadComponent)
{
    return getOneDIM_ELEOnR307(target.getModelRoot(), target, null, loadComponent);
}

public static Diagramelement_c getOneDIM_ELEOnR307(Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_ELEOnR307(target.getModelRoot(), target, test);
  }
  return null;
}

public static Diagramelement_c getOneDIM_ELEOnR307(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
	return getOneDIM_ELEOnR307(modelRoot, target, test, true);
}

public static Diagramelement_c getOneDIM_ELEOnR307(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_ELEOnR307(modelRoot,target,test);
}
private static Diagramelement_c find_getOneDIM_ELEOnR307(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ContainedDiagramelementContained_R307) {
	    for ( int i = 0; i < target.backPointer_ContainedDiagramelementContained_R307.size(); ++i ) {
	      Diagramelement_c source = (Diagramelement_c)target.backPointer_ContainedDiagramelementContained_R307.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c [] targets)
{
  return getManyDIM_ELEsOnR307(targets, null);
}
public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c [] targets, boolean loadComponent)
{
  return getManyDIM_ELEsOnR307(targets, null, loadComponent);
}
public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR307(targets, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Diagramelement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ContainedDiagramelementContained_R307) {
	    for (int j = 0; j < targets[i].backPointer_ContainedDiagramelementContained_R307.size(); ++j) {
	      Diagramelement_c source = (Diagramelement_c)targets[i].backPointer_ContainedDiagramelementContained_R307.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Diagramelement_c[] ret_set = new Diagramelement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Diagramelement_c[0];
  }
  }

public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c target)
{
  return getManyDIM_ELEsOnR307(target, null);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c target, boolean loadComponent)
{
  return getManyDIM_ELEsOnR307(target, null, loadComponent);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c target, ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR307(target, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR307(Graphelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Diagramelement_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_ContainedDiagramelementContained_R307) {
    for (int i = 0; i < target.backPointer_ContainedDiagramelementContained_R307.size(); ++i) {
      Diagramelement_c source = (Diagramelement_c)target.backPointer_ContainedDiagramelementContained_R307.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Diagramelement_c[] ret_set = new Diagramelement_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Diagramelement_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Reference_c> backPointer_ReferenceReferenceReference_R308 = new ArrayList<Reference_c>();

public void setReferenceOrderInChildListR308(Reference_c target, int index) {
	unrelateAcrossR308From(target);
	Reference_c[] elements = Reference_c.getManyDIM_REFsOnR308(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR308From((Reference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR308To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR308To((Reference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR308To(Reference_c target)
{
  if (target != null) {
    target.relateAcrossR308To(this, true) ;
  }
}

public void relateAcrossR308To(Reference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR308To(this, notifyChanges) ;
  }
}

public void setBackPointerR308To(Reference_c target)
{
  	synchronized (backPointer_ReferenceReferenceReference_R308) {
		backPointer_ReferenceReferenceReference_R308.add(target);
	}
}

public void unrelateAcrossR308From(Reference_c target)
{
  if (target != null) {
    target.unrelateAcrossR308From(this, true) ;
  }
}

public void unrelateAcrossR308From(Reference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR308From(this, notifyChanges) ;
  }
}

public void clearBackPointerR308To(Reference_c target)
{
  synchronized (backPointer_ReferenceReferenceReference_R308) {
	    backPointer_ReferenceReferenceReference_R308.remove(target);
	}
}

public static Diagramelement_c getOneDIM_ELEOnR308(Reference_c [] targets)
{
    return getOneDIM_ELEOnR308(targets, null);
}

public static Diagramelement_c getOneDIM_ELEOnR308(Reference_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_ELEOnR308(targets, test, true);
}

public static Diagramelement_c getOneDIM_ELEOnR308(Reference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Diagramelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Diagramelement_c candidate_val = getOneDIM_ELEOnR308(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_ELEOnR308(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Diagramelement_c getOneDIM_ELEOnR308(Reference_c target)
{
	return getOneDIM_ELEOnR308(target, true);
}
public static Diagramelement_c getOneDIM_ELEOnR308(Reference_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ReferencedDiagramelement ;
  } else {
    return null;
  }
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR308(targets, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Diagramelement_c[0];
  
  
  LinkedHashSet<Diagramelement_c> elementsSet = new LinkedHashSet<Diagramelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ReferencedDiagramelement == null)
	  targets[i].loadProxy();
    Diagramelement_c associate = targets[i].ReferencedDiagramelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Diagramelement_c[] result = new Diagramelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c [] targets)
{
  return getManyDIM_ELEsOnR308(targets, null);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Reference_c [] targetArray = new Reference_c[1];
    targetArray[0] = target;
    return getManyDIM_ELEsOnR308(targetArray, test, loadComponent);
  } else {
    Diagramelement_c [] result = new Diagramelement_c [0] ;
    return result ;
  }
  
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_ELEsOnR308(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c target)
{
    return getManyDIM_ELEsOnR308(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR308(Reference_c target, boolean loadComponent)
{
    return getManyDIM_ELEsOnR308(target, null, loadComponent);
}


    
  
  
// referred to navigation

Reference_c backPointer_IsSubtypeReferenceIsSubtype_R302;

public void setReferenceOrderInChildListR302(Reference_c target, int index) {
	unrelateAcrossR302From(target);
	Reference_c[] elements = Reference_c.getManyDIM_REFsOnR302(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR302From((Reference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR302To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR302To((Reference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR302To(Reference_c target)
{
  if (target != null) {
    target.relateAcrossR302To(this, true) ;
  }
}

public void relateAcrossR302To(Reference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR302To(this, notifyChanges) ;
  }
}

public void setBackPointerR302To(Reference_c target)
{
    backPointer_IsSubtypeReferenceIsSubtype_R302 = target;
}

public void unrelateAcrossR302From(Reference_c target)
{
  if (target != null) {
    target.unrelateAcrossR302From(this, true) ;
  }
}

public void unrelateAcrossR302From(Reference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR302From(this, notifyChanges) ;
  }
}

public void clearBackPointerR302To(Reference_c target)
{
	if (target == backPointer_IsSubtypeReferenceIsSubtype_R302) {
		backPointer_IsSubtypeReferenceIsSubtype_R302 = null;
	}
}

public static Diagramelement_c getOneDIM_ELEOnR302(Reference_c [] targets)
{
    return getOneDIM_ELEOnR302(targets, null);
}

public static Diagramelement_c getOneDIM_ELEOnR302(Reference_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_ELEOnR302(targets, test, true);
}

public static Diagramelement_c getOneDIM_ELEOnR302(Reference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Diagramelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Diagramelement_c candidate_val = getOneDIM_ELEOnR302(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_ELEOnR302(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Diagramelement_c getOneDIM_ELEOnR302(Reference_c target)
{
	return getOneDIM_ELEOnR302(target, true);
}
public static Diagramelement_c getOneDIM_ELEOnR302(Reference_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDiagramelement ;
  } else {
    return null;
  }
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR302(targets, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Diagramelement_c[0];
  
  
  LinkedHashSet<Diagramelement_c> elementsSet = new LinkedHashSet<Diagramelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDiagramelement == null)
	  targets[i].loadProxy();
    Diagramelement_c associate = targets[i].IsSupertypeDiagramelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Diagramelement_c[] result = new Diagramelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c [] targets)
{
  return getManyDIM_ELEsOnR302(targets, null);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Reference_c [] targetArray = new Reference_c[1];
    targetArray[0] = target;
    return getManyDIM_ELEsOnR302(targetArray, test, loadComponent);
  } else {
    Diagramelement_c [] result = new Diagramelement_c [0] ;
    return result ;
  }
  
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_ELEsOnR302(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c target)
{
    return getManyDIM_ELEsOnR302(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Reference_c target, boolean loadComponent)
{
    return getManyDIM_ELEsOnR302(target, null, loadComponent);
}

  
  
  
// referred to navigation

Graphelement_c backPointer_IsSubtypeGraphelementIsSubtype_R302;

public void setGraphelementOrderInChildListR302(Graphelement_c target, int index) {
	unrelateAcrossR302From(target);
	Graphelement_c[] elements = Graphelement_c.getManyDIM_GEsOnR302(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR302From((Graphelement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR302To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR302To((Graphelement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR302To(Graphelement_c target)
{
  if (target != null) {
    target.relateAcrossR302To(this, true) ;
  }
}

public void relateAcrossR302To(Graphelement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR302To(this, notifyChanges) ;
  }
}

public void setBackPointerR302To(Graphelement_c target)
{
    backPointer_IsSubtypeGraphelementIsSubtype_R302 = target;
}

public void unrelateAcrossR302From(Graphelement_c target)
{
  if (target != null) {
    target.unrelateAcrossR302From(this, true) ;
  }
}

public void unrelateAcrossR302From(Graphelement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR302From(this, notifyChanges) ;
  }
}

public void clearBackPointerR302To(Graphelement_c target)
{
	if (target == backPointer_IsSubtypeGraphelementIsSubtype_R302) {
		backPointer_IsSubtypeGraphelementIsSubtype_R302 = null;
	}
}

public static Diagramelement_c getOneDIM_ELEOnR302(Graphelement_c [] targets)
{
    return getOneDIM_ELEOnR302(targets, null);
}

public static Diagramelement_c getOneDIM_ELEOnR302(Graphelement_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_ELEOnR302(targets, test, true);
}

public static Diagramelement_c getOneDIM_ELEOnR302(Graphelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Diagramelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Diagramelement_c candidate_val = getOneDIM_ELEOnR302(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_ELEOnR302(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Diagramelement_c getOneDIM_ELEOnR302(Graphelement_c target)
{
	return getOneDIM_ELEOnR302(target, true);
}
public static Diagramelement_c getOneDIM_ELEOnR302(Graphelement_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDiagramelement ;
  } else {
    return null;
  }
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR302(targets, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Diagramelement_c[0];
  
  
  LinkedHashSet<Diagramelement_c> elementsSet = new LinkedHashSet<Diagramelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDiagramelement == null)
	  targets[i].loadProxy();
    Diagramelement_c associate = targets[i].IsSupertypeDiagramelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Diagramelement_c[] result = new Diagramelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c [] targets)
{
  return getManyDIM_ELEsOnR302(targets, null);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphelement_c [] targetArray = new Graphelement_c[1];
    targetArray[0] = target;
    return getManyDIM_ELEsOnR302(targetArray, test, loadComponent);
  } else {
    Diagramelement_c [] result = new Diagramelement_c [0] ;
    return result ;
  }
  
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_ELEsOnR302(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c target)
{
    return getManyDIM_ELEsOnR302(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Graphelement_c target, boolean loadComponent)
{
    return getManyDIM_ELEsOnR302(target, null, loadComponent);
}

  
  
  
// referred to navigation

Leafelement_c backPointer_IsSubtypeLeafelementIsSubtype_R302;

public void setLeafelementOrderInChildListR302(Leafelement_c target, int index) {
	unrelateAcrossR302From(target);
	Leafelement_c[] elements = Leafelement_c.getManyDIM_LELsOnR302(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR302From((Leafelement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR302To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR302To((Leafelement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR302To(Leafelement_c target)
{
  if (target != null) {
    target.relateAcrossR302To(this, true) ;
  }
}

public void relateAcrossR302To(Leafelement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR302To(this, notifyChanges) ;
  }
}

public void setBackPointerR302To(Leafelement_c target)
{
    backPointer_IsSubtypeLeafelementIsSubtype_R302 = target;
}

public void unrelateAcrossR302From(Leafelement_c target)
{
  if (target != null) {
    target.unrelateAcrossR302From(this, true) ;
  }
}

public void unrelateAcrossR302From(Leafelement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR302From(this, notifyChanges) ;
  }
}

public void clearBackPointerR302To(Leafelement_c target)
{
	if (target == backPointer_IsSubtypeLeafelementIsSubtype_R302) {
		backPointer_IsSubtypeLeafelementIsSubtype_R302 = null;
	}
}

public static Diagramelement_c getOneDIM_ELEOnR302(Leafelement_c [] targets)
{
    return getOneDIM_ELEOnR302(targets, null);
}

public static Diagramelement_c getOneDIM_ELEOnR302(Leafelement_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_ELEOnR302(targets, test, true);
}

public static Diagramelement_c getOneDIM_ELEOnR302(Leafelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Diagramelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Diagramelement_c candidate_val = getOneDIM_ELEOnR302(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_ELEOnR302(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Diagramelement_c getOneDIM_ELEOnR302(Leafelement_c target)
{
	return getOneDIM_ELEOnR302(target, true);
}
public static Diagramelement_c getOneDIM_ELEOnR302(Leafelement_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDiagramelement ;
  } else {
    return null;
  }
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR302(targets, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Diagramelement_c[0];
  
  
  LinkedHashSet<Diagramelement_c> elementsSet = new LinkedHashSet<Diagramelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDiagramelement == null)
	  targets[i].loadProxy();
    Diagramelement_c associate = targets[i].IsSupertypeDiagramelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Diagramelement_c[] result = new Diagramelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c [] targets)
{
  return getManyDIM_ELEsOnR302(targets, null);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Leafelement_c [] targetArray = new Leafelement_c[1];
    targetArray[0] = target;
    return getManyDIM_ELEsOnR302(targetArray, test, loadComponent);
  } else {
    Diagramelement_c [] result = new Diagramelement_c [0] ;
    return result ;
  }
  
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_ELEsOnR302(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c target)
{
    return getManyDIM_ELEsOnR302(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR302(Leafelement_c target, boolean loadComponent)
{
    return getManyDIM_ELEsOnR302(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Property_c> backPointer_PropertyPropertyProperty_R310 = new ArrayList<Property_c>();

public void setPropertyOrderInChildListR310(Property_c target, int index) {
	unrelateAcrossR310From(target);
	Property_c[] elements = Property_c.getManyDIM_PRPsOnR310(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR310From((Property_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR310To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR310To((Property_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR310To(Property_c target)
{
  if (target != null) {
    target.relateAcrossR310To(this, true) ;
  }
}

public void relateAcrossR310To(Property_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR310To(this, notifyChanges) ;
  }
}

public void setBackPointerR310To(Property_c target)
{
  	synchronized (backPointer_PropertyPropertyProperty_R310) {
		backPointer_PropertyPropertyProperty_R310.add(target);
	}
}

public void unrelateAcrossR310From(Property_c target)
{
  if (target != null) {
    target.unrelateAcrossR310From(this, true) ;
  }
}

public void unrelateAcrossR310From(Property_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR310From(this, notifyChanges) ;
  }
}

public void clearBackPointerR310To(Property_c target)
{
  synchronized (backPointer_PropertyPropertyProperty_R310) {
	    backPointer_PropertyPropertyProperty_R310.remove(target);
	}
}

public static Diagramelement_c getOneDIM_ELEOnR310(Property_c [] targets)
{
    return getOneDIM_ELEOnR310(targets, null);
}

public static Diagramelement_c getOneDIM_ELEOnR310(Property_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_ELEOnR310(targets, test, true);
}

public static Diagramelement_c getOneDIM_ELEOnR310(Property_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Diagramelement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Diagramelement_c candidate_val = getOneDIM_ELEOnR310(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_ELEOnR310(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Diagramelement_c getOneDIM_ELEOnR310(Property_c target)
{
	return getOneDIM_ELEOnR310(target, true);
}
public static Diagramelement_c getOneDIM_ELEOnR310(Property_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainerDiagramelement ;
  } else {
    return null;
  }
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_ELEsOnR310(targets, test, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Diagramelement_c[0];
  
  
  LinkedHashSet<Diagramelement_c> elementsSet = new LinkedHashSet<Diagramelement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainerDiagramelement == null)
	  targets[i].loadProxy();
    Diagramelement_c associate = targets[i].ContainerDiagramelement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Diagramelement_c[] result = new Diagramelement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c [] targets)
{
  return getManyDIM_ELEsOnR310(targets, null);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Property_c [] targetArray = new Property_c[1];
    targetArray[0] = target;
    return getManyDIM_ELEsOnR310(targetArray, test, loadComponent);
  } else {
    Diagramelement_c [] result = new Diagramelement_c [0] ;
    return result ;
  }
  
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_ELEsOnR310(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c target)
{
    return getManyDIM_ELEsOnR310(target, null, true);
}

public static Diagramelement_c [] getManyDIM_ELEsOnR310(Property_c target, boolean loadComponent)
{
    return getManyDIM_ELEsOnR310(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ContainerGraphelement == null) {          
      // R307
      Graphelement_c relInst21886 = (Graphelement_c) baseRoot.getInstanceList(Graphelement_c.class).get(new Object[] {m_container_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21886 == null) {
      			relInst21886 = (Graphelement_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphelement_c.class).get(new Object[] {m_container_elementid});
      		}
			//synchronized
      if ( relInst21886 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21886) && !isProxy())) {
	      relInst21886.relateAcrossR307To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R307
      // DIM_GE
		  inst=ContainerGraphelement;
			unrelateAcrossR307From(ContainerGraphelement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Diagramelement_c inst = (Diagramelement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Diagramelement_c DiagramelementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Diagramelement_c result=findDiagramelementInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Diagramelement_c findDiagramelementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Diagramelement_c x = (Diagramelement_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Diagramelement_c DiagramelementInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return DiagramelementInstance(modelRoot,test,true);
  }
  
  public static Diagramelement_c DiagramelementInstance(ModelRoot modelRoot)
  {
	 return DiagramelementInstance(modelRoot,null,true);
  }

  public static Diagramelement_c [] DiagramelementInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Diagramelement_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Diagramelement_c x = (Diagramelement_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Diagramelement_c[] ret_set = new Diagramelement_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Diagramelement_c[0];
			}		
		} 
  }
  public static Diagramelement_c [] DiagramelementInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  DiagramelementInstances(modelRoot,test,true);
  }
  public static Diagramelement_c [] DiagramelementInstances(ModelRoot modelRoot)
  {
	return DiagramelementInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the DiagramElement.dispose call: ";
	Reference_c testR308Inst = Reference_c.getOneDIM_REFOnR308(this, false);

	if ( testR308Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "308 ";	
	}
	Reference_c testR302Inst1 = Reference_c.getOneDIM_REFOnR302(this, false);

	if ( testR302Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "302 ";
	}
	Graphelement_c testR302Inst2 = Graphelement_c.getOneDIM_GEOnR302(this, false);

	if ( testR302Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "302 ";
	}
	Leafelement_c testR302Inst3 = Leafelement_c.getOneDIM_LELOnR302(this, false);

	if ( testR302Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "302 ";
	}
	Property_c testR310Inst = Property_c.getOneDIM_PRPOnR310(this, false);

	if ( testR310Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "310 ";	
	}
	Graphelement_c testR307Inst = Graphelement_c.getOneDIM_GEOnR307(this, false);

	if ( testR307Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "307 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "DiagramElement", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("elementid")){
         return true;
      }
      if(attributeName.equals("container_elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public boolean getIsvisible()
  {
    return m_isvisible ;
  }


  public void setIsvisible(boolean newValue)
  {
    if(m_isvisible == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Isvisible", new Boolean(m_isvisible), new Boolean(newValue),true);

   m_isvisible = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if(m_elementidLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_elementid)){
    	return 0xfffffff & m_elementid.getLeastSignificantBits();
    }
    return m_elementidLongBased ;
  }
  public java.util.UUID getElementid()
  {
    return m_elementid ;
  }


  public void setElementid(java.util.UUID newValue)
  {
   m_elementid = IdAssigner.preprocessUUID(newValue);
  }
  public long getContainer_elementidLongBased()
  {
    if ( ContainerGraphelement != null )
    {
      return ContainerGraphelement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getContainer_elementid()
  {
    if ( ContainerGraphelement != null )
    {
      return ContainerGraphelement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getContainer_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_container_elementid) )
      return m_container_elementid;
    else
      return getContainer_elementid();
  }
  
  public void setContainer_elementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_container_elementid)){
	        return;
	    }
	}else if(m_container_elementid != null){
	    if(m_container_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Container_elementid", m_container_elementid, newValue,true); 
   m_container_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "DiagramElement", //$NON-NLS-1$
	  " Operation entered: DiagramElement::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Diagramelement_c [] objs = Diagramelement_c.DiagramelementInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "DiagramElement", //$NON-NLS-1$
	  " Operation entered: DiagramElement::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Diagramelement_c_test21888_c implements ClassQueryInterface_c
    {
	  Diagramelement_c_test21888_c( java.util.UUID            p21889 ) {
	  m_p21889 = p21889;
	  }
	  private java.util.UUID             m_p21889; 
	  public boolean evaluate (Object candidate)
	  {
	      Diagramelement_c selected = (Diagramelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21889));
	      return retval;
	  }
    }

    Diagramelement_c [] objs21887 = 
    Diagramelement_c.DiagramelementInstances(modelRoot, new Diagramelement_c_test21888_c(getElementid())) ;

    if ( (  (objs21887.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "DiagramElement", //$NON-NLS-1$
           "Consistency: Object: DiagramElement: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21887.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: DiagramElement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21887.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21887.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "DiagramElement", //$NON-NLS-1$
           "Consistency: Object: DiagramElement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21887.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: DiagramElement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21887.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // DiagramElement is a referring class in association: rel.Numb = 307
          // The participating class is: GraphElement
    class Graphelement_c_test21893_c implements ClassQueryInterface_c
    {
	  Graphelement_c_test21893_c( java.util.UUID            p21894 ) {
	  m_p21894 = p21894;
	  }
	  private java.util.UUID             m_p21894; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphelement_c selected = (Graphelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21894));
	      return retval;
	  }
    }

    Graphelement_c [] objs21892 = 
    Graphelement_c.GraphelementInstances(modelRoot, new Graphelement_c_test21893_c(getContainer_elementid())) ;

    if ( (  (objs21892.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "DiagramElement", //$NON-NLS-1$
           "Consistency: Object: DiagramElement: Association: 307: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21892.length )  + " container_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: DiagramElement: Association: 307: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21892.length )  + " container_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // DiagramElement is a participating class in association: rel.Numb = 308
             // Object: Reference
          // Supertype: rel.Numb = 302
    int objs21895 = 0;
            // Subtype Object: Reference
    class Reference_c_test21896_c implements ClassQueryInterface_c
    {
	  Reference_c_test21896_c( java.util.UUID            p21897 ) {
	  m_p21897 = p21897;
	  }
	  private java.util.UUID             m_p21897; 
	  public boolean evaluate (Object candidate)
	  {
	      Reference_c selected = (Reference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21897));
	      return retval;
	  }
    }

    Reference_c [] objs21898 = 
    Reference_c.ReferenceInstances(modelRoot, new Reference_c_test21896_c(getElementid())) ;
 
    objs21895 = objs21895 + objs21898.length;
            // Subtype Object: GraphElement
    class Graphelement_c_test21899_c implements ClassQueryInterface_c
    {
	  Graphelement_c_test21899_c( java.util.UUID            p21900 ) {
	  m_p21900 = p21900;
	  }
	  private java.util.UUID             m_p21900; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphelement_c selected = (Graphelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21900));
	      return retval;
	  }
    }

    Graphelement_c [] objs21901 = 
    Graphelement_c.GraphelementInstances(modelRoot, new Graphelement_c_test21899_c(getElementid())) ;
 
    objs21895 = objs21895 + objs21901.length;
            // Subtype Object: LeafElement
    class Leafelement_c_test21902_c implements ClassQueryInterface_c
    {
	  Leafelement_c_test21902_c( java.util.UUID            p21903 ) {
	  m_p21903 = p21903;
	  }
	  private java.util.UUID             m_p21903; 
	  public boolean evaluate (Object candidate)
	  {
	      Leafelement_c selected = (Leafelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21903));
	      return retval;
	  }
    }

    Leafelement_c [] objs21904 = 
    Leafelement_c.LeafelementInstances(modelRoot, new Leafelement_c_test21902_c(getElementid())) ;
 
    objs21895 = objs21895 + objs21904.length;
    if ( objs21895 != 1 )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "DiagramElement", //$NON-NLS-1$
           "Consistency: Object: DiagramElement: Association: 302: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21895 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: DiagramElement: Association: 302: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21895 )  , e); 
      }
      retval = false;

    }

          // DiagramElement is a participating class in association: rel.Numb = 310
             // Object: Property
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "DiagramElement", " Operation entered: Diagramelement::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphelement_c v_ge = Graphelement_c.getOneDIM_GEOnR302(this);


if ( (  (v_ge != null)) )
{

this.unrelateAcrossR302From(v_ge);


if (v_ge != null) {
v_ge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Leafelement_c v_leaf = Leafelement_c.getOneDIM_LELOnR302(this);


if ( (  (v_leaf != null)) )
{

this.unrelateAcrossR302From(v_leaf);


if (v_leaf != null) {
v_leaf.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

Property_c [] v_prop_set = Property_c.getManyDIM_PRPsOnR310(this);


Property_c  v_prop = null;
for ( int i21306 = 0; i21306 < v_prop_set.length; i21306++)
{
  v_prop = v_prop_set[i21306] ;

this.unrelateAcrossR310From(v_prop);


if (v_prop != null) {
v_prop.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

v_ge = Graphelement_c.getOneDIM_GEOnR307(this);


if ( (  (v_ge != null)) )
{

this.unrelateAcrossR307From(v_ge);



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end DiagramElement
