package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ConnectorTerminal_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CONNECTOR_TERMINAL extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ConnectorTerminal_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ConnectorTerminal_c(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, int p_m_terminatesat,
			int p_m_ooa_type) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_term_spec_id = IdAssigner.preprocessUUID(p_m_term_spec_id);
		m_terminatesat = p_m_terminatesat;
		m_ooa_type = p_m_ooa_type;

		Object[] key = {m_term_spec_id};
		addInstanceToMap(key);
	}
	static public ConnectorTerminal_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, int p_m_terminatesat,
			int p_m_ooa_type, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);
		ConnectorTerminal_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_term_spec_id};
			new_inst = (ConnectorTerminal_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_term_spec_id = IdAssigner
						.preprocessUUID(p_m_term_spec_id);
				new_inst.m_terminatesat = p_m_terminatesat;
				new_inst.m_ooa_type = p_m_ooa_type;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ConnectorTerminal_c(modelRoot, p_m_term_spec_id,
					p_m_terminatesat, p_m_ooa_type);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ConnectorTerminal_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, int p_m_terminatesat,
			int p_m_ooa_type) {
		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);
		ConnectorTerminal_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_term_spec_id};
			source = (ConnectorTerminal_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_term_spec_id = IdAssigner
						.preprocessUUID(p_m_term_spec_id);
				source.m_terminatesat = p_m_terminatesat;
				source.m_ooa_type = p_m_ooa_type;

				return source;
			}
		}
		// there is no instance matching the id
		ConnectorTerminal_c new_inst = new ConnectorTerminal_c(modelRoot,
				p_m_term_spec_id, p_m_terminatesat, p_m_ooa_type);
		return new_inst;
	}
	public ConnectorTerminal_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_term_spec_id = IdAssigner.NULL_UUID;
		m_terminatesat = End_c.OOA_UNINITIALIZED_ENUM;
		m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
		Object[] key = {m_term_spec_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_term_spec_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_term_spec_id != p_newKey) {

			m_term_spec_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ConnectorTerminal_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ConnectorTerminal_c)) {
			return false;
		}

		ConnectorTerminal_c me = (ConnectorTerminal_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getTerm_spec_id()) || IdAssigner.NULL_UUID
						.equals(((ConnectorTerminal_c) elem).getTerm_spec_id())) && this != elem)) {
			return false;
		}
		if (!getTerm_spec_id().equals(
				((ConnectorTerminal_c) elem).getTerm_spec_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ConnectorTerminal_c)) {
			return false;
		}

		ConnectorTerminal_c me = (ConnectorTerminal_c) elem;
		if (!getTerm_spec_idCachedValue().equals(
				((ConnectorTerminal_c) elem).getTerm_spec_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_term_spec_id;
	private int m_terminatesat;
	private int m_ooa_type;

	// declare association references from this class

	// referring navigation

	TerminalSpecification_c IsSupertypeTerminalSpecification;
	public void relateAcrossR201To(TerminalSpecification_c target) {
		relateAcrossR201To(target, true);
	}
	public void relateAcrossR201To(TerminalSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeTerminalSpecification)
			return; // already related

		if (IsSupertypeTerminalSpecification != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeTerminalSpecification != null) {

				IsSupertypeTerminalSpecification.clearBackPointerR201To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ConnectorTerminal_c.relateAcrossR201To(TerminalSpecification_c target)",
									"Relate performed across R201 from Connector Terminal to Terminal Specification without unrelate of prior instance.");
				}
			}

			IsSupertypeTerminalSpecification = target;
			m_term_spec_id = target.getTerm_spec_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR201To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR201From(TerminalSpecification_c target) {
		unrelateAcrossR201From(target, true);
	}
	public void unrelateAcrossR201From(TerminalSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeTerminalSpecification == null)
			return; // already unrelated

		if (target != IsSupertypeTerminalSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R201",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR201To(this);
		}

		if (IsSupertypeTerminalSpecification != null) {

			m_term_spec_id = IsSupertypeTerminalSpecification.getTerm_spec_id();
			IsSupertypeTerminalSpecification = null;
			target.removeRef();
		}
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(
			TerminalSpecification_c[] targets) {
		return getOneTS_CNTOnR201(targets, null);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test) {
		ConnectorTerminal_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneTS_CNTOnR201(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(
			TerminalSpecification_c target) {
		return getOneTS_CNTOnR201(target, null);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(
			TerminalSpecification_c target, boolean loadComponent) {
		return getOneTS_CNTOnR201(Ooaofgraphics.getDefaultInstance(), target,
				null, loadComponent);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneTS_CNTOnR201(Ooaofgraphics.getDefaultInstance(),
					target, test);
		}
		return null;
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		return getOneTS_CNTOnR201(modelRoot, target, test, true);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneTS_CNTOnR201(modelRoot, target, test);
	}
	private static ConnectorTerminal_c find_getOneTS_CNTOnR201(
			ModelRoot modelRoot, TerminalSpecification_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ConnectorTerminal_c source = (ConnectorTerminal_c) target.backPointer_IsSubtypeConnectorTerminalIsSubtype_R201;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR201(
			TerminalSpecification_c[] targets) {
		return getManyTS_CNTsOnR201(targets, null);
	}
	public static ConnectorTerminal_c[] getManyTS_CNTsOnR201(
			TerminalSpecification_c[] targets, boolean loadComponent) {
		return getManyTS_CNTsOnR201(targets, null, loadComponent);
	}
	public static ConnectorTerminal_c[] getManyTS_CNTsOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManyTS_CNTsOnR201(targets, test, true);
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ConnectorTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();

		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ConnectorTerminal_c source = (ConnectorTerminal_c) targets[i].backPointer_IsSubtypeConnectorTerminalIsSubtype_R201;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ConnectorTerminal_c[] ret_set = new ConnectorTerminal_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ConnectorTerminal_c[0];
		}
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR201(
			TerminalSpecification_c target) {
		if (target != null) {
			TerminalSpecification_c[] targetArray = new TerminalSpecification_c[1];
			targetArray[0] = target;
			return getManyTS_CNTsOnR201(targetArray);
		} else {
			ConnectorTerminal_c[] result = new ConnectorTerminal_c[0];
			return result;
		}
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR201(
			TerminalSpecification_c target, boolean loadComponent) {
		if (target != null) {
			TerminalSpecification_c[] targetArray = new TerminalSpecification_c[1];
			targetArray[0] = target;
			return getManyTS_CNTsOnR201(targetArray, loadComponent);
		} else {
			ConnectorTerminal_c[] result = new ConnectorTerminal_c[0];
			return result;
		}
	}

	// referring navigation

	ConnectorSpecification_c SpecifiesTerminationOnConnectorSpecification;
	public void relateAcrossR205To(ConnectorSpecification_c target) {
		relateAcrossR205To(target, true);
	}
	public void relateAcrossR205To(ConnectorSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesTerminationOnConnectorSpecification)
			return; // already related

		if (SpecifiesTerminationOnConnectorSpecification != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesTerminationOnConnectorSpecification != null) {

				SpecifiesTerminationOnConnectorSpecification
						.clearBackPointerR205To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ConnectorTerminal_c.relateAcrossR205To(ConnectorSpecification_c target)",
									"Relate performed across R205 from Connector Terminal to Connector Specification without unrelate of prior instance.");
				}
			}

			SpecifiesTerminationOnConnectorSpecification = target;
			if (target.getOoa_type() == 0) {
				// do not update cached value
			} else {
				// update cached value
				m_ooa_type = target.getOoa_typeCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR205To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR205From(ConnectorSpecification_c target) {
		unrelateAcrossR205From(target, true);
	}
	public void unrelateAcrossR205From(ConnectorSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesTerminationOnConnectorSpecification == null)
			return; // already unrelated

		if (target != SpecifiesTerminationOnConnectorSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R205",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR205To(this);
		}

		if (SpecifiesTerminationOnConnectorSpecification != null) {

			m_ooa_type = SpecifiesTerminationOnConnectorSpecification
					.getOoa_type();
			if (m_ooa_type == 0) {
				m_ooa_type = SpecifiesTerminationOnConnectorSpecification
						.getOoa_typeCachedValue();
			}
			SpecifiesTerminationOnConnectorSpecification = null;
			target.removeRef();
		}
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(
			ConnectorSpecification_c[] targets) {
		return getOneTS_CNTOnR205(targets, null);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(
			ConnectorSpecification_c[] targets, ClassQueryInterface_c test) {
		ConnectorTerminal_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneTS_CNTOnR205(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(
			ConnectorSpecification_c target) {
		return getOneTS_CNTOnR205(target, null);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(
			ConnectorSpecification_c target, boolean loadComponent) {
		return getOneTS_CNTOnR205(Ooaofgraphics.getDefaultInstance(), target,
				null, loadComponent);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(
			ConnectorSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneTS_CNTOnR205(Ooaofgraphics.getDefaultInstance(),
					target, test);
		}
		return null;
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(ModelRoot modelRoot,
			ConnectorSpecification_c target, ClassQueryInterface_c test) {
		return getOneTS_CNTOnR205(modelRoot, target, test, true);
	}

	public static ConnectorTerminal_c getOneTS_CNTOnR205(ModelRoot modelRoot,
			ConnectorSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneTS_CNTOnR205(modelRoot, target, test);
	}
	private static ConnectorTerminal_c find_getOneTS_CNTOnR205(
			ModelRoot modelRoot, ConnectorSpecification_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ConnectorTerminal_R205) {
				for (int i = 0; i < target.backPointer_ConnectorTerminal_R205
						.size(); ++i) {
					ConnectorTerminal_c source = (ConnectorTerminal_c) target.backPointer_ConnectorTerminal_R205
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c[] targets) {
		return getManyTS_CNTsOnR205(targets, null);
	}
	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c[] targets, boolean loadComponent) {
		return getManyTS_CNTsOnR205(targets, null, loadComponent);
	}
	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManyTS_CNTsOnR205(targets, test, true);
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ConnectorTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();

		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ConnectorTerminal_R205) {
				for (int j = 0; j < targets[i].backPointer_ConnectorTerminal_R205
						.size(); ++j) {
					ConnectorTerminal_c source = (ConnectorTerminal_c) targets[i].backPointer_ConnectorTerminal_R205
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ConnectorTerminal_c[] ret_set = new ConnectorTerminal_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ConnectorTerminal_c[0];
		}
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c target) {
		return getManyTS_CNTsOnR205(target, null);
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c target, boolean loadComponent) {
		return getManyTS_CNTsOnR205(target, null, loadComponent);
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c target, ClassQueryInterface_c test) {
		return getManyTS_CNTsOnR205(target, test, true);
	}

	public static ConnectorTerminal_c[] getManyTS_CNTsOnR205(
			ConnectorSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ConnectorTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();
		Vector matches = new Vector();
		synchronized (target.backPointer_ConnectorTerminal_R205) {
			for (int i = 0; i < target.backPointer_ConnectorTerminal_R205
					.size(); ++i) {
				ConnectorTerminal_c source = (ConnectorTerminal_c) target.backPointer_ConnectorTerminal_R205
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ConnectorTerminal_c[] ret_set = new ConnectorTerminal_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ConnectorTerminal_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R201
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
      TerminalSpecification_c relInst22021 = (TerminalSpecification_c) baseRoot.getInstanceList(TerminalSpecification_c.class).get(new Object[] {m_term_spec_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22021 == null) {
      			relInst22021 = (TerminalSpecification_c) Ooaofooa.getDefaultInstance().getInstanceList(TerminalSpecification_c.class).get(new Object[] {m_term_spec_id});
      		}
			//synchronized
      if ( relInst22021 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22021) && !isProxy())) {
	      relInst22021.relateAcrossR201To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	          

	if (SpecifiesTerminationOnConnectorSpecification == null) {          
      // R205
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ConnectorSpecification_c.class);
      ConnectorSpecification_c relInst22022 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ConnectorSpecification_c source = (ConnectorSpecification_c)cursor.next() ;
           if (     source.getOoa_typeCachedValue() == m_ooa_type 		){
  		relInst22022 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst22022 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22022) && !isProxy())) {
	      relInst22022.relateAcrossR205To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R201
		// TS_TSP
		inst = IsSupertypeTerminalSpecification;
		unrelateAcrossR201From(IsSupertypeTerminalSpecification, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R205
		// TS_CSP
		inst = SpecifiesTerminationOnConnectorSpecification;
		unrelateAcrossR205From(SpecifiesTerminationOnConnectorSpecification,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ConnectorTerminal_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ConnectorTerminal_c inst = (ConnectorTerminal_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ConnectorTerminal_c ConnectorTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ConnectorTerminal_c result = findConnectorTerminalInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static ConnectorTerminal_c findConnectorTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ConnectorTerminal_c x = (ConnectorTerminal_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ConnectorTerminal_c ConnectorTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ConnectorTerminalInstance(modelRoot, test, true);
	}

	public static ConnectorTerminal_c ConnectorTerminalInstance(
			ModelRoot modelRoot) {
		return ConnectorTerminalInstance(modelRoot, null, true);
	}

	public static ConnectorTerminal_c[] ConnectorTerminalInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ConnectorTerminal_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ConnectorTerminal_c x = (ConnectorTerminal_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ConnectorTerminal_c[] ret_set = new ConnectorTerminal_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ConnectorTerminal_c[0];
			}
		}
	}
	public static ConnectorTerminal_c[] ConnectorTerminalInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ConnectorTerminalInstances(modelRoot, test, true);
	}
	public static ConnectorTerminal_c[] ConnectorTerminalInstances(
			ModelRoot modelRoot) {
		return ConnectorTerminalInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Connector Terminal.dispose call: ";
		TerminalSpecification_c testR201Inst3 = TerminalSpecification_c
				.getOneTS_TSPOnR201(this, false);

		if (testR201Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "201 ";
		}
		ConnectorSpecification_c testR205Inst = ConnectorSpecification_c
				.getOneTS_CSPOnR205(this, false);

		if (testR205Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "205 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Connector Terminal",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("term_spec_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getTerm_spec_idLongBased() {
		if (IsSupertypeTerminalSpecification != null) {
			return IsSupertypeTerminalSpecification.getTerm_spec_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTerm_spec_id() {
		if (IsSupertypeTerminalSpecification != null) {
			return IsSupertypeTerminalSpecification.getTerm_spec_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeTerminalSpecification != null);

	}

	public java.util.UUID getTerm_spec_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_term_spec_id))
			return m_term_spec_id;
		else
			return getTerm_spec_id();
	}

	public void setTerm_spec_id(java.util.UUID newValue) {
		m_term_spec_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getTerminatesat() {
		return m_terminatesat;
	}

	public void setTerminatesat(int newValue) {
		m_terminatesat = newValue;
	}
	public int getOoa_type() {
		if (SpecifiesTerminationOnConnectorSpecification != null) {
			return SpecifiesTerminationOnConnectorSpecification.getOoa_type();
		}
		return 0;
	}

	public int getOoa_typeCachedValue() {
		return m_ooa_type;
	}

	public void setOoa_type(int newValue) {
		m_ooa_type = newValue;
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Connector Terminal", //$NON-NLS-1$
						" Operation entered: Connector Terminal::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ConnectorTerminal_c[] objs = ConnectorTerminal_c
				.ConnectorTerminalInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Connector Terminal", //$NON-NLS-1$
				" Operation entered: Connector Terminal::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ConnectorTerminal_c_test22024_c implements ClassQueryInterface_c {
			ConnectorTerminal_c_test22024_c(java.util.UUID p22025) {
				m_p22025 = p22025;
			}
			private java.util.UUID m_p22025;
			public boolean evaluate(Object candidate) {
				ConnectorTerminal_c selected = (ConnectorTerminal_c) candidate;
				boolean retval = false;
				retval = (selected.getTerm_spec_id().equals(m_p22025));
				return retval;
			}
		}

		ConnectorTerminal_c[] objs22023 = ConnectorTerminal_c
				.ConnectorTerminalInstances(Ooaofgraphics.getDefaultInstance(),
						new ConnectorTerminal_c_test22024_c(getTerm_spec_id()));

		if (((objs22023.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Connector Terminal", //$NON-NLS-1$
								"Consistency: Object: Connector Terminal: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22023.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Connector Terminal: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22023.length), e);
			}
			retval = false;

		}

		if (((objs22023.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Connector Terminal", //$NON-NLS-1$
								"Consistency: Object: Connector Terminal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22023.length)
										+ " Term_Spec_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Connector Terminal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22023.length)
										+ " Term_Spec_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Connector Terminal is a subtype in association: rel.Numb = 201
		// The supertype class is: Terminal Specification
		class TerminalSpecification_c_test22029_c
				implements
					ClassQueryInterface_c {
			TerminalSpecification_c_test22029_c(java.util.UUID p22030) {
				m_p22030 = p22030;
			}
			private java.util.UUID m_p22030;
			public boolean evaluate(Object candidate) {
				TerminalSpecification_c selected = (TerminalSpecification_c) candidate;
				boolean retval = false;
				retval = (selected.getTerm_spec_id().equals(m_p22030));
				return retval;
			}
		}

		TerminalSpecification_c[] objs22028 = TerminalSpecification_c
				.TerminalSpecificationInstances(Ooaofgraphics
						.getDefaultInstance(),
						new TerminalSpecification_c_test22029_c(
								getTerm_spec_id()));

		if (((objs22028.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Connector Terminal", //$NON-NLS-1$
								"Consistency: Object: Connector Terminal: Association: 201: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22028.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Connector Terminal: Association: 201: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22028.length), e);
			}
			retval = false;

		}

		// Connector Terminal is a referring class in association: rel.Numb = 205
		// The participating class is: Connector Specification
		class ConnectorSpecification_c_test22032_c
				implements
					ClassQueryInterface_c {
			ConnectorSpecification_c_test22032_c(int p22033) {
				m_p22033 = p22033;
			}
			private int m_p22033;
			public boolean evaluate(Object candidate) {
				ConnectorSpecification_c selected = (ConnectorSpecification_c) candidate;
				boolean retval = false;
				retval = (selected.getOoa_type() == (m_p22033));
				return retval;
			}
		}

		ConnectorSpecification_c[] objs22031 = ConnectorSpecification_c
				.ConnectorSpecificationInstances(
						Ooaofgraphics.getDefaultInstance(),
						new ConnectorSpecification_c_test22032_c(getOoa_type()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs22031.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Connector Terminal", //$NON-NLS-1$
								"Consistency: Object: Connector Terminal: Association: 205: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22031.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Connector Terminal: Association: 205: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22031.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public boolean Criteriamet(final int p_X1, final int p_X2, final int p_Y1,
			final int p_Y2) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Terminal",
				" Operation entered: ConnectorTerminal::Criteriamet");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_elem = GraphicalElement_c
				.GraphicalElementInstance(modelRoot);

		Model_c v_model = Model_c.getOneGD_MDOnR207(TerminalSpecification_c
				.getOneTS_TSPOnR201(this));

		if (((v_model != null))) {

			boolean v_criteriaMet = false;

			Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);

			int v_unScaledX = Gr_c.Unscale((int) (p_X1 - v_diagram
					.getViewportx()));

			int v_unScaledY = Gr_c.Unscale((int) (p_Y1 - v_diagram
					.getViewporty()));

			int v_unScaledX2 = Gr_c.Unscale((int) (p_X2 - v_diagram
					.getViewportx()));

			int v_unScaledY2 = Gr_c.Unscale((int) (p_Y2 - v_diagram
					.getViewporty()));

			GraphicalElement_c[] v_conElems = GraphicalElement_c
					.getManyGD_GEsOnR2(Connector_c
							.getManyGD_CONsOnR2(GraphicalElement_c
									.getManyGD_GEsOnR1(v_model)));

			ElementSpecification_c v_esTarget = ElementSpecification_c
					.getOneGD_ESOnR200(ConnectorSpecification_c
							.getOneTS_CSPOnR205(this));

			int v_closestDistance = -1;

			for (int i21309 = 0; i21309 < v_conElems.length; i21309++) {
				v_elem = v_conElems[i21309];

				ElementSpecification_c v_es = ElementSpecification_c
						.getOneGD_ESOnR10(v_elem);

				if ((v_es == v_esTarget)) {

					Connector_c v_conElem = Connector_c
							.getOneGD_CONOnR2(v_elem);

					if ((p_X2 != 0 && p_Y2 != 0)) {

						TerminalSpecification_c v_tsp = TerminalSpecification_c
								.getOneTS_TSPOnR201(this);

						if ((v_conElem.Isover(v_unScaledX, v_unScaledY))) {

							if (v_tsp != null) {
								v_tsp.relateAcrossR206To(v_elem);
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Relate attempted on null left hand instance.",
												t);
							}

							v_criteriaMet = true;

							break;

						}

						else {

							if ((!v_conElem.Isover(v_unScaledX2, v_unScaledY2))) {

								int v_xIntersect = v_conElem
										.Getintersect(Axis_c.X, false, p_X2,
												p_X1, p_Y2, p_Y1);

								int v_yIntersect = v_conElem
										.Getintersect(Axis_c.Y, false, p_X2,
												p_X1, p_Y2, p_Y1);

								float v_distance = Ooaofgraphics.Getdistance(
										modelRoot, p_X1, v_xIntersect, p_Y1,
										v_yIntersect);

								if ((v_distance < v_closestDistance)
										|| (v_closestDistance == -1)) {

									if ((v_xIntersect != 0 && v_yIntersect != 0)) {

										if (v_tsp != null) {
											v_tsp.relateAcrossR206To(v_elem);
										} else {
											Throwable t = new Throwable();
											t.fillInStackTrace();
											CorePlugin
													.logError(
															"Relate attempted on null left hand instance.",
															t);
										}

										v_criteriaMet = true;

										v_closestDistance = (int) (v_distance);

									}

								}

							}

						}

					}

					else {

						if ((v_conElem.Isover(v_unScaledX, v_unScaledY))) {

							TerminalSpecification_c v_tsp = TerminalSpecification_c
									.getOneTS_TSPOnR201(this);

							if (v_tsp != null) {
								v_tsp.relateAcrossR206To(v_elem);
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Relate attempted on null left hand instance.",
												t);
							}

							v_criteriaMet = true;

							break;

						}

					}

				}

			}

			if ((v_criteriaMet)) {

				TerminalSpecification_c v_tsp = TerminalSpecification_c
						.getOneTS_TSPOnR201(this);

				if (v_tsp != null) {
					v_tsp.setSatisfied(true);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

				return true;

			}

		}

		return false;

	} // End criteriaMet

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Connector Terminal
