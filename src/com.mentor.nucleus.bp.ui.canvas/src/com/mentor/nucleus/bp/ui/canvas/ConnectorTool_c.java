      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ConnectorTool_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_CONNECTOR_TOOL extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}
  class EV_CONNECTOR_TOOL_SUITABLE_LOCATION extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_CONNECTOR_TOOL_SUITABLE_LOCATION = 5 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_SUITABLE_LOCATION ;
    }
  }
  class EV_CONNECTOR_TOOL_UNSUITABLE_LOCATION extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    static final int EVCD_CONNECTOR_TOOL_UNSUITABLE_LOCATION = 4 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_UNSUITABLE_LOCATION ;
    }
  }
  class EV_CONNECTOR_TOOL_MOUSE_UP extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_CONNECTOR_TOOL_MOUSE_UP = 6 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_MOUSE_UP ;
    }
  }
  class EV_CONNECTOR_TOOL_DONE extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    static final int EVCD_CONNECTOR_TOOL_DONE = 10 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_DONE ;
    }
  }
  class EV_CONNECTOR_TOOL_COMPLETE extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    static final int EVCD_CONNECTOR_TOOL_COMPLETE = 8 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_COMPLETE ;
    }
  }
  class EV_CONNECTOR_TOOL_MOUSE_MOVE extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_CONNECTOR_TOOL_MOUSE_MOVE = 7 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_MOUSE_MOVE ;
    }
  }
  class EV_CONNECTOR_TOOL_MOUSE_DOWN extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_CONNECTOR_TOOL_MOUSE_DOWN = 3 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_MOUSE_DOWN ;
    }
  }
  class EV_CONNECTOR_TOOL_DEACTIVATED extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    static final int EVCD_CONNECTOR_TOOL_DEACTIVATED = 2 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_DEACTIVATED ;
    }
  }
  class EV_CONNECTOR_TOOL_ACTIVATED extends EV_CONNECTOR_TOOL
  {
    // supplemental event data
    static final int EVCD_CONNECTOR_TOOL_ACTIVATED = 1 ;
    public final int getEvtcode()
    {
      return EVCD_CONNECTOR_TOOL_ACTIVATED ;
    }
  }

public class ConnectorTool_c extends NonRootModelElement implements timerClient_c, ActiveObject_c, IAdaptable, Cloneable
{
  // Public Constructors
  public ConnectorTool_c(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       java.util.UUID         p_m_current_seg_elementid,
       java.util.UUID         p_m_start_elementid,
       java.util.UUID         p_m_end_elementid,
       Transaction p_m_currenttransaction)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_current_seg_elementid = IdAssigner.preprocessUUID(p_m_current_seg_elementid);
       // default value for m_current_state
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_start_elementid = IdAssigner.preprocessUUID(p_m_start_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_end_elementid = IdAssigner.preprocessUUID(p_m_end_elementid);
       m_currenttransaction = p_m_currenttransaction;
        
    // register with event queue poller
    Activepoller_c.register(this) ;
    Object [] key = {m_tool_id};
    addInstanceToMap(key);
  }
  static public ConnectorTool_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       java.util.UUID         p_m_current_seg_elementid,
       java.util.UUID         p_m_start_elementid,
       java.util.UUID         p_m_end_elementid,
       Transaction p_m_currenttransaction, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);
      ConnectorTool_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_tool_id};
          new_inst = (ConnectorTool_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_current_seg_elementid = IdAssigner.preprocessUUID(p_m_current_seg_elementid);
       // default value for m_current_state
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_start_elementid = IdAssigner.preprocessUUID(p_m_start_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_end_elementid = IdAssigner.preprocessUUID(p_m_end_elementid);
       new_inst.m_currenttransaction = p_m_currenttransaction;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ConnectorTool_c(modelRoot,
p_m_tool_id,
p_m_current_seg_elementid,
p_m_start_elementid,
p_m_end_elementid,
p_m_currenttransaction
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ConnectorTool_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       java.util.UUID         p_m_current_seg_elementid,
       java.util.UUID         p_m_start_elementid,
       java.util.UUID         p_m_end_elementid,
       Transaction p_m_currenttransaction){
    InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);
    ConnectorTool_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_tool_id
            };
        source = (ConnectorTool_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_current_seg_elementid = IdAssigner.preprocessUUID(p_m_current_seg_elementid);
       // default value for m_current_state
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_start_elementid = IdAssigner.preprocessUUID(p_m_start_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_end_elementid = IdAssigner.preprocessUUID(p_m_end_elementid);
       source.m_currenttransaction = p_m_currenttransaction;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ConnectorTool_c new_inst = new ConnectorTool_c(modelRoot,
p_m_tool_id,
p_m_current_seg_elementid,
p_m_start_elementid,
p_m_end_elementid,
p_m_currenttransaction
);
    return new_inst;
  }
  public ConnectorTool_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_tool_id = IdAssigner.NULL_UUID;   
     m_current_seg_elementid = IdAssigner.NULL_UUID;   
     m_start_elementid = IdAssigner.NULL_UUID;   
     m_end_elementid = IdAssigner.NULL_UUID;   
    Object [] key = {m_tool_id};
    addInstanceToMap(key);
    // register with event queue poller
    Activepoller_c.register(this) ;
  }

  public Object getInstanceKey() {
    Object [] key =  {m_tool_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_tool_id !=  p_newKey ){
	
		m_tool_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  


  // Run Entry Point
  public boolean poll()
  {
      if (!eventQueue.isEmpty() || !selfEventQueue.isEmpty())
      { // an event queue is not empty
        procEvent() ;
        return true;
      } else {
        return false;
      }
  }

  public boolean equals (Object elem) {
     if (!(elem instanceof ConnectorTool_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ConnectorTool_c)) {
           return false;
       }
       
       ConnectorTool_c me = (ConnectorTool_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getTool_id()) || IdAssigner.NULL_UUID.equals(((ConnectorTool_c)elem).getTool_id())) && this != elem)) {
      	return false;
      }
      if (!getTool_id().equals(((ConnectorTool_c)elem).getTool_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ConnectorTool_c)) {
           return false;
       }
       
       ConnectorTool_c me = (ConnectorTool_c)elem;
      if (!getTool_idCachedValue().equals(((ConnectorTool_c)elem).getTool_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_tool_id ;
  private java.util.UUID         m_current_seg_elementid ;
  private java.util.UUID         m_start_elementid ;
  private java.util.UUID         m_end_elementid ;
  private Transaction m_currenttransaction ;
      
// declare association references from this class
  
  
    
// referring navigation

LineSegment_c IsDrawingLineSegment ;
public void relateAcrossR106To(LineSegment_c target)
{
	relateAcrossR106To(target, true);
}
public void relateAcrossR106To(LineSegment_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDrawingLineSegment) return;  // already related

    if ( IsDrawingLineSegment != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDrawingLineSegment != null) {
    
        IsDrawingLineSegment.clearBackPointerR106To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ConnectorTool_c.relateAcrossR106To(LineSegment_c target)", 
			"Relate performed across R106 from Connector Tool to Line Segment without unrelate of prior instance.");  
		}
    }
                
    	IsDrawingLineSegment = target ;
        m_current_seg_elementid = target.getElementid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR106To(this);
        target.addRef();
    }
}
public void unrelateAcrossR106From(LineSegment_c target)
{
	unrelateAcrossR106From(target, true);
}
public void unrelateAcrossR106From(LineSegment_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDrawingLineSegment == null) return;  // already unrelated
	
	if (target != IsDrawingLineSegment) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R106", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR106To(this);
    }
    

      if(IsDrawingLineSegment != null) {
      
        m_current_seg_elementid = IsDrawingLineSegment.getElementid();
        IsDrawingLineSegment = null ;
        target.removeRef();
    }
}

  
    
      
public static ConnectorTool_c getOneCT_CTLOnR106(LineSegment_c [] targets)
{
    return getOneCT_CTLOnR106(targets, null);
}

public static ConnectorTool_c getOneCT_CTLOnR106(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    ConnectorTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_CTLOnR106(targets[i], test);
        }
    }

    return ret_val;
}

public static ConnectorTool_c getOneCT_CTLOnR106(LineSegment_c target)
{
  return getOneCT_CTLOnR106(target, null);
}

public static ConnectorTool_c getOneCT_CTLOnR106(LineSegment_c target, boolean loadComponent)
{
    return getOneCT_CTLOnR106(target.getModelRoot(), target, null, loadComponent);
}

public static ConnectorTool_c getOneCT_CTLOnR106(LineSegment_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_CTLOnR106(target.getModelRoot(), target, test);
  }
  return null;
}

public static ConnectorTool_c getOneCT_CTLOnR106(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test)
{
	return getOneCT_CTLOnR106(modelRoot, target, test, true);
}

public static ConnectorTool_c getOneCT_CTLOnR106(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_CTLOnR106(modelRoot,target,test);
}
private static ConnectorTool_c find_getOneCT_CTLOnR106(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ConnectorTool_c source = (ConnectorTool_c)target.backPointer_IsBeingDrawnByConnectorToolIsBeingDrawnBy_R106;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ConnectorTool_c [] getManyCT_CTLsOnR106(LineSegment_c [] targets)
{
  return getManyCT_CTLsOnR106(targets, null);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR106(LineSegment_c [] targets, boolean loadComponent)
{
  return getManyCT_CTLsOnR106(targets, null, loadComponent);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR106(LineSegment_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_CTLsOnR106(targets, test, true);
}

public static ConnectorTool_c [] getManyCT_CTLsOnR106(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ConnectorTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ConnectorTool_c source = (ConnectorTool_c)targets[i].backPointer_IsBeingDrawnByConnectorToolIsBeingDrawnBy_R106;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ConnectorTool_c[] ret_set = new ConnectorTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ConnectorTool_c[0];
  }
  }

public static ConnectorTool_c [] getManyCT_CTLsOnR106(LineSegment_c target)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR106(targetArray);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}

public static ConnectorTool_c [] getManyCT_CTLsOnR106(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR106(targetArray, loadComponent);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}



  
    
// referring navigation

GraphicalElement_c IsStartingAtGraphicalElement ;
public void relateAcrossR104To(GraphicalElement_c target)
{
	relateAcrossR104To(target, true);
}
public void relateAcrossR104To(GraphicalElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsStartingAtGraphicalElement) return;  // already related

    if ( IsStartingAtGraphicalElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsStartingAtGraphicalElement != null) {
    
        IsStartingAtGraphicalElement.clearBackPointerR104To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ConnectorTool_c.relateAcrossR104To(GraphicalElement_c target)", 
			"Relate performed across R104 from Connector Tool to Graphical Element without unrelate of prior instance.");  
		}
    }
                
    	IsStartingAtGraphicalElement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_start_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR104To(this);
        target.addRef();
    }
}
public void unrelateAcrossR104From(GraphicalElement_c target)
{
	unrelateAcrossR104From(target, true);
}
public void unrelateAcrossR104From(GraphicalElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsStartingAtGraphicalElement == null) return;  // already unrelated
	
	if (target != IsStartingAtGraphicalElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R104", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR104To(this);
    }
    

      if(IsStartingAtGraphicalElement != null) {
      
        m_start_elementid = IsStartingAtGraphicalElement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_start_elementid))
        {
          m_start_elementid = IsStartingAtGraphicalElement.getElementidCachedValue();
        }       
        IsStartingAtGraphicalElement = null ;
        target.removeRef();
    }
}

  
    
      
public static ConnectorTool_c getOneCT_CTLOnR104(GraphicalElement_c [] targets)
{
    return getOneCT_CTLOnR104(targets, null);
}

public static ConnectorTool_c getOneCT_CTLOnR104(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
    ConnectorTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_CTLOnR104(targets[i], test);
        }
    }

    return ret_val;
}

public static ConnectorTool_c getOneCT_CTLOnR104(GraphicalElement_c target)
{
  return getOneCT_CTLOnR104(target, null);
}

public static ConnectorTool_c getOneCT_CTLOnR104(GraphicalElement_c target, boolean loadComponent)
{
    return getOneCT_CTLOnR104(target.getModelRoot(), target, null, loadComponent);
}

public static ConnectorTool_c getOneCT_CTLOnR104(GraphicalElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_CTLOnR104(target.getModelRoot(), target, test);
  }
  return null;
}

public static ConnectorTool_c getOneCT_CTLOnR104(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test)
{
	return getOneCT_CTLOnR104(modelRoot, target, test, true);
}

public static ConnectorTool_c getOneCT_CTLOnR104(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_CTLOnR104(modelRoot,target,test);
}
private static ConnectorTool_c find_getOneCT_CTLOnR104(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ConnectorTool_c source = (ConnectorTool_c)target.backPointer_StartConnectorToolStart_R104;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ConnectorTool_c [] getManyCT_CTLsOnR104(GraphicalElement_c [] targets)
{
  return getManyCT_CTLsOnR104(targets, null);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR104(GraphicalElement_c [] targets, boolean loadComponent)
{
  return getManyCT_CTLsOnR104(targets, null, loadComponent);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR104(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_CTLsOnR104(targets, test, true);
}

public static ConnectorTool_c [] getManyCT_CTLsOnR104(GraphicalElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ConnectorTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ConnectorTool_c source = (ConnectorTool_c)targets[i].backPointer_StartConnectorToolStart_R104;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ConnectorTool_c[] ret_set = new ConnectorTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ConnectorTool_c[0];
  }
  }

public static ConnectorTool_c [] getManyCT_CTLsOnR104(GraphicalElement_c target)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR104(targetArray);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}

public static ConnectorTool_c [] getManyCT_CTLsOnR104(GraphicalElement_c target, boolean loadComponent)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR104(targetArray, loadComponent);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}



  
    
// referring navigation

GraphicalElement_c IsEndingAtGraphicalElement ;
public void relateAcrossR105To(GraphicalElement_c target)
{
	relateAcrossR105To(target, true);
}
public void relateAcrossR105To(GraphicalElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsEndingAtGraphicalElement) return;  // already related

    if ( IsEndingAtGraphicalElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsEndingAtGraphicalElement != null) {
    
        IsEndingAtGraphicalElement.clearBackPointerR105To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ConnectorTool_c.relateAcrossR105To(GraphicalElement_c target)", 
			"Relate performed across R105 from Connector Tool to Graphical Element without unrelate of prior instance.");  
		}
    }
                
    	IsEndingAtGraphicalElement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_end_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR105To(this);
        target.addRef();
    }
}
public void unrelateAcrossR105From(GraphicalElement_c target)
{
	unrelateAcrossR105From(target, true);
}
public void unrelateAcrossR105From(GraphicalElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsEndingAtGraphicalElement == null) return;  // already unrelated
	
	if (target != IsEndingAtGraphicalElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R105", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR105To(this);
    }
    

      if(IsEndingAtGraphicalElement != null) {
      
        m_end_elementid = IsEndingAtGraphicalElement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_end_elementid))
        {
          m_end_elementid = IsEndingAtGraphicalElement.getElementidCachedValue();
        }       
        IsEndingAtGraphicalElement = null ;
        target.removeRef();
    }
}

  
    
      
public static ConnectorTool_c getOneCT_CTLOnR105(GraphicalElement_c [] targets)
{
    return getOneCT_CTLOnR105(targets, null);
}

public static ConnectorTool_c getOneCT_CTLOnR105(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
    ConnectorTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_CTLOnR105(targets[i], test);
        }
    }

    return ret_val;
}

public static ConnectorTool_c getOneCT_CTLOnR105(GraphicalElement_c target)
{
  return getOneCT_CTLOnR105(target, null);
}

public static ConnectorTool_c getOneCT_CTLOnR105(GraphicalElement_c target, boolean loadComponent)
{
    return getOneCT_CTLOnR105(target.getModelRoot(), target, null, loadComponent);
}

public static ConnectorTool_c getOneCT_CTLOnR105(GraphicalElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_CTLOnR105(target.getModelRoot(), target, test);
  }
  return null;
}

public static ConnectorTool_c getOneCT_CTLOnR105(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test)
{
	return getOneCT_CTLOnR105(modelRoot, target, test, true);
}

public static ConnectorTool_c getOneCT_CTLOnR105(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_CTLOnR105(modelRoot,target,test);
}
private static ConnectorTool_c find_getOneCT_CTLOnR105(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ConnectorTool_c source = (ConnectorTool_c)target.backPointer_EndConnectorToolEnd_R105;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ConnectorTool_c [] getManyCT_CTLsOnR105(GraphicalElement_c [] targets)
{
  return getManyCT_CTLsOnR105(targets, null);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR105(GraphicalElement_c [] targets, boolean loadComponent)
{
  return getManyCT_CTLsOnR105(targets, null, loadComponent);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR105(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_CTLsOnR105(targets, test, true);
}

public static ConnectorTool_c [] getManyCT_CTLsOnR105(GraphicalElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ConnectorTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ConnectorTool_c source = (ConnectorTool_c)targets[i].backPointer_EndConnectorToolEnd_R105;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ConnectorTool_c[] ret_set = new ConnectorTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ConnectorTool_c[0];
  }
  }

public static ConnectorTool_c [] getManyCT_CTLsOnR105(GraphicalElement_c target)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR105(targetArray);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}

public static ConnectorTool_c [] getManyCT_CTLsOnR105(GraphicalElement_c target, boolean loadComponent)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR105(targetArray, loadComponent);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ModelTool_c IsSupertypeModelTool ;
public void relateAcrossR102To(ModelTool_c target)
{
	relateAcrossR102To(target, true);
}
public void relateAcrossR102To(ModelTool_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeModelTool) return;  // already related

    if ( IsSupertypeModelTool != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeModelTool != null) {
    
        IsSupertypeModelTool.clearBackPointerR102To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ConnectorTool_c.relateAcrossR102To(ModelTool_c target)", 
			"Relate performed across R102 from Connector Tool to Model Tool without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeModelTool = target ;
        m_tool_id = target.getTool_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR102To(this);
        target.addRef();
    }
}
public void unrelateAcrossR102From(ModelTool_c target)
{
	unrelateAcrossR102From(target, true);
}
public void unrelateAcrossR102From(ModelTool_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeModelTool == null) return;  // already unrelated
	
	if (target != IsSupertypeModelTool) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R102", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR102To(this);
    }
    

      if(IsSupertypeModelTool != null) {
      
        m_tool_id = IsSupertypeModelTool.getTool_id();
        IsSupertypeModelTool = null ;
        target.removeRef();
    }
}

  
    
      
public static ConnectorTool_c getOneCT_CTLOnR102(ModelTool_c [] targets)
{
    return getOneCT_CTLOnR102(targets, null);
}

public static ConnectorTool_c getOneCT_CTLOnR102(ModelTool_c [] targets, ClassQueryInterface_c test)
{
    ConnectorTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_CTLOnR102(targets[i], test);
        }
    }

    return ret_val;
}

public static ConnectorTool_c getOneCT_CTLOnR102(ModelTool_c target)
{
  return getOneCT_CTLOnR102(target, null);
}

public static ConnectorTool_c getOneCT_CTLOnR102(ModelTool_c target, boolean loadComponent)
{
    return getOneCT_CTLOnR102(target.getModelRoot(), target, null, loadComponent);
}

public static ConnectorTool_c getOneCT_CTLOnR102(ModelTool_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_CTLOnR102(target.getModelRoot(), target, test);
  }
  return null;
}

public static ConnectorTool_c getOneCT_CTLOnR102(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test)
{
	return getOneCT_CTLOnR102(modelRoot, target, test, true);
}

public static ConnectorTool_c getOneCT_CTLOnR102(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_CTLOnR102(modelRoot,target,test);
}
private static ConnectorTool_c find_getOneCT_CTLOnR102(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ConnectorTool_c source = (ConnectorTool_c)target.backPointer_IsSubtypeConnectorToolIsSubtype_R102;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ConnectorTool_c [] getManyCT_CTLsOnR102(ModelTool_c [] targets)
{
  return getManyCT_CTLsOnR102(targets, null);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR102(ModelTool_c [] targets, boolean loadComponent)
{
  return getManyCT_CTLsOnR102(targets, null, loadComponent);
}
public static ConnectorTool_c [] getManyCT_CTLsOnR102(ModelTool_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_CTLsOnR102(targets, test, true);
}

public static ConnectorTool_c [] getManyCT_CTLsOnR102(ModelTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ConnectorTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ConnectorTool_c source = (ConnectorTool_c)targets[i].backPointer_IsSubtypeConnectorToolIsSubtype_R102;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ConnectorTool_c[] ret_set = new ConnectorTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ConnectorTool_c[0];
  }
  }

public static ConnectorTool_c [] getManyCT_CTLsOnR102(ModelTool_c target)
{
  if (target != null) {
    ModelTool_c [] targetArray = new ModelTool_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR102(targetArray);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}

public static ConnectorTool_c [] getManyCT_CTLsOnR102(ModelTool_c target, boolean loadComponent)
{
  if (target != null) {
    ModelTool_c [] targetArray = new ModelTool_c[1];
    targetArray[0] = target;
    return getManyCT_CTLsOnR102(targetArray, loadComponent);
  } else {
    ConnectorTool_c [] result = new ConnectorTool_c [0] ;
  return result ;
}
}



      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsDrawingLineSegment == null) {          
      // R106
      LineSegment_c relInst22491 = (LineSegment_c) baseRoot.getInstanceList(LineSegment_c.class).get(new Object[] {m_current_seg_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22491 == null) {
      			relInst22491 = (LineSegment_c) Ooaofooa.getDefaultInstance().getInstanceList(LineSegment_c.class).get(new Object[] {m_current_seg_elementid});
      		}
			//synchronized
      if ( relInst22491 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22491) && !isProxy())) {
	      relInst22491.relateAcrossR106To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsStartingAtGraphicalElement == null) {          
      // R104
      GraphicalElement_c relInst22492 = (GraphicalElement_c) baseRoot.getInstanceList(GraphicalElement_c.class).get(new Object[] {m_start_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22492 == null) {
      			relInst22492 = (GraphicalElement_c) Ooaofooa.getDefaultInstance().getInstanceList(GraphicalElement_c.class).get(new Object[] {m_start_elementid});
      		}
			//synchronized
      if ( relInst22492 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22492) && !isProxy())) {
	      relInst22492.relateAcrossR104To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsEndingAtGraphicalElement == null) {          
      // R105
      GraphicalElement_c relInst22493 = (GraphicalElement_c) baseRoot.getInstanceList(GraphicalElement_c.class).get(new Object[] {m_end_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22493 == null) {
      			relInst22493 = (GraphicalElement_c) Ooaofooa.getDefaultInstance().getInstanceList(GraphicalElement_c.class).get(new Object[] {m_end_elementid});
      		}
			//synchronized
      if ( relInst22493 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22493) && !isProxy())) {
	      relInst22493.relateAcrossR105To(this, notifyChanges);
	  }
	  }
	}
	          

      // R102
      ModelTool_c relInst22494 = (ModelTool_c) baseRoot.getInstanceList(ModelTool_c.class).get(new Object[] {m_tool_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22494 == null) {
      			relInst22494 = (ModelTool_c) Ooaofooa.getDefaultInstance().getInstanceList(ModelTool_c.class).get(new Object[] {m_tool_id});
      		}
			//synchronized
      if ( relInst22494 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22494) && !isProxy())) {
	      relInst22494.relateAcrossR102To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R106
      // GD_LS
		  inst=IsDrawingLineSegment;
			unrelateAcrossR106From(IsDrawingLineSegment, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R104
      // GD_GE
		  inst=IsStartingAtGraphicalElement;
			unrelateAcrossR104From(IsStartingAtGraphicalElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R105
      // GD_GE
		  inst=IsEndingAtGraphicalElement;
			unrelateAcrossR105From(IsEndingAtGraphicalElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R102
      // CT_MTL
		  inst=IsSupertypeModelTool;
			unrelateAcrossR102From(IsSupertypeModelTool, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ConnectorTool_c inst = (ConnectorTool_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ConnectorTool_c ConnectorToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ConnectorTool_c result=findConnectorToolInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static ConnectorTool_c findConnectorToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ConnectorTool_c x = (ConnectorTool_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static ConnectorTool_c ConnectorToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ConnectorToolInstance(modelRoot,test,true);
  }
  
  public static ConnectorTool_c ConnectorToolInstance(ModelRoot modelRoot)
  {
	 return ConnectorToolInstance(modelRoot,null,true);
  }

  public static ConnectorTool_c [] ConnectorToolInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(ConnectorTool_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ConnectorTool_c x = (ConnectorTool_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ConnectorTool_c[] ret_set = new ConnectorTool_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ConnectorTool_c[0];
			}		
		} 
  }
  public static ConnectorTool_c [] ConnectorToolInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ConnectorToolInstances(modelRoot,test,true);
  }
  public static ConnectorTool_c [] ConnectorToolInstances(ModelRoot modelRoot)
  {
	return ConnectorToolInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
    Activepoller_c.unRegister(this) ;
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Connector Tool.dispose call: ";
	LineSegment_c testR106Inst = LineSegment_c.getOneGD_LSOnR106(this, false);

	if ( testR106Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "106 ";
	}
	GraphicalElement_c testR104Inst = GraphicalElement_c.getOneGD_GEOnR104(this, false);

	if ( testR104Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "104 ";
	}
	GraphicalElement_c testR105Inst = GraphicalElement_c.getOneGD_GEOnR105(this, false);

	if ( testR105Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "105 ";
	}
	ModelTool_c testR102Inst3 = ModelTool_c.getOneCT_MTLOnR102(this, false);

	if ( testR102Inst3 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "102 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Connector Tool", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("tool_id")){
         return true;
      }
      if(attributeName.equals("current_seg_elementid")){
         return true;
      }
      if(attributeName.equals("start_elementid")){
         return true;
      }
      if(attributeName.equals("end_elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getTool_idLongBased()
  {
    if ( IsSupertypeModelTool != null )
    {
      return IsSupertypeModelTool.getTool_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTool_id()
  {
    if ( IsSupertypeModelTool != null )
    {
      return IsSupertypeModelTool.getTool_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeModelTool != null );
 
 }                  

  public java.util.UUID getTool_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_tool_id) )
      return m_tool_id;
    else
      return getTool_id();
  }
  
  public void setTool_id(java.util.UUID newValue)
  {
   m_tool_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getCurrent_seg_elementidLongBased()
  {
    if ( IsDrawingLineSegment != null )
    {
      return IsDrawingLineSegment.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getCurrent_seg_elementid()
  {
    if ( IsDrawingLineSegment != null )
    {
      return IsDrawingLineSegment.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getCurrent_seg_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_current_seg_elementid) )
      return m_current_seg_elementid;
    else
      return getCurrent_seg_elementid();
  }
  
  public void setCurrent_seg_elementid(java.util.UUID newValue)
  {
   m_current_seg_elementid = IdAssigner.preprocessUUID(newValue);
  }
  public long getStart_elementidLongBased()
  {
    if ( IsStartingAtGraphicalElement != null )
    {
      return IsStartingAtGraphicalElement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getStart_elementid()
  {
    if ( IsStartingAtGraphicalElement != null )
    {
      return IsStartingAtGraphicalElement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getStart_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_start_elementid) )
      return m_start_elementid;
    else
      return getStart_elementid();
  }
  
  public void setStart_elementid(java.util.UUID newValue)
  {
   m_start_elementid = IdAssigner.preprocessUUID(newValue);
  }
  public long getEnd_elementidLongBased()
  {
    if ( IsEndingAtGraphicalElement != null )
    {
      return IsEndingAtGraphicalElement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEnd_elementid()
  {
    if ( IsEndingAtGraphicalElement != null )
    {
      return IsEndingAtGraphicalElement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEnd_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_end_elementid) )
      return m_end_elementid;
    else
      return getEnd_elementid();
  }
  
  public void setEnd_elementid(java.util.UUID newValue)
  {
   m_end_elementid = IdAssigner.preprocessUUID(newValue);
  }
  public Transaction getCurrenttransaction()
  {
    return m_currenttransaction ;
  }


  public void setCurrenttransaction(Transaction newValue)
  {
   m_currenttransaction = newValue ;
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Connector Tool", //$NON-NLS-1$
	  " Operation entered: Connector Tool::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ConnectorTool_c [] objs = ConnectorTool_c.ConnectorToolInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Connector Tool", //$NON-NLS-1$
	  " Operation entered: Connector Tool::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ConnectorTool_c_test22496_c implements ClassQueryInterface_c
    {
	  ConnectorTool_c_test22496_c( java.util.UUID            p22497 ) {
	  m_p22497 = p22497;
	  }
	  private java.util.UUID             m_p22497; 
	  public boolean evaluate (Object candidate)
	  {
	      ConnectorTool_c selected = (ConnectorTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22497));
	      return retval;
	  }
    }

    ConnectorTool_c [] objs22495 = 
    ConnectorTool_c.ConnectorToolInstances(modelRoot, new ConnectorTool_c_test22496_c(getTool_id())) ;

    if ( (  (objs22495.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Tool", //$NON-NLS-1$
           "Consistency: Object: Connector Tool: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22495.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Tool: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22495.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22495.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Tool", //$NON-NLS-1$
           "Consistency: Object: Connector Tool: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22495.length )  + " Tool_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Tool: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22495.length )  + " Tool_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Connector Tool is a subtype in association: rel.Numb = 102
          // The supertype class is: Model Tool
    class ModelTool_c_test22501_c implements ClassQueryInterface_c
    {
	  ModelTool_c_test22501_c( java.util.UUID            p22502 ) {
	  m_p22502 = p22502;
	  }
	  private java.util.UUID             m_p22502; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelTool_c selected = (ModelTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22502));
	      return retval;
	  }
    }

    ModelTool_c [] objs22500 = 
    ModelTool_c.ModelToolInstances(modelRoot, new ModelTool_c_test22501_c(getTool_id())) ;

    if ( (  (objs22500.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Tool", //$NON-NLS-1$
           "Consistency: Object: Connector Tool: Association: 102: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22500.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Tool: Association: 102: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22500.length )  , e); 
      }
      retval = false;

    }

          // Connector Tool is a referring class in association: rel.Numb = 106
          // The participating class is: Line Segment
    class LineSegment_c_test22504_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test22504_c( java.util.UUID            p22505 ) {
	  m_p22505 = p22505;
	  }
	  private java.util.UUID             m_p22505; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22505));
	      return retval;
	  }
    }

    LineSegment_c [] objs22503 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test22504_c(getCurrent_seg_elementid())) ;

    if ( (  (objs22503.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Tool", //$NON-NLS-1$
           "Consistency: Object: Connector Tool: Association: 106: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22503.length )  + " Current_Seg_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Tool: Association: 106: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22503.length )  + " Current_Seg_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Connector Tool is a referring class in association: rel.Numb = 104
          // The participating class is: Graphical Element
    class GraphicalElement_c_test22507_c implements ClassQueryInterface_c
    {
	  GraphicalElement_c_test22507_c( java.util.UUID            p22508 ) {
	  m_p22508 = p22508;
	  }
	  private java.util.UUID             m_p22508; 
	  public boolean evaluate (Object candidate)
	  {
	      GraphicalElement_c selected = (GraphicalElement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22508));
	      return retval;
	  }
    }

    GraphicalElement_c [] objs22506 = 
    GraphicalElement_c.GraphicalElementInstances(modelRoot, new GraphicalElement_c_test22507_c(getStart_elementid())) ;

    if ( (  (objs22506.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Tool", //$NON-NLS-1$
           "Consistency: Object: Connector Tool: Association: 104: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22506.length )  + " start_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Tool: Association: 104: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22506.length )  + " start_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Connector Tool is a referring class in association: rel.Numb = 105
          // The participating class is: Graphical Element
    class GraphicalElement_c_test22510_c implements ClassQueryInterface_c
    {
	  GraphicalElement_c_test22510_c( java.util.UUID            p22511 ) {
	  m_p22511 = p22511;
	  }
	  private java.util.UUID             m_p22511; 
	  public boolean evaluate (Object candidate)
	  {
	      GraphicalElement_c selected = (GraphicalElement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22511));
	      return retval;
	  }
    }

    GraphicalElement_c [] objs22509 = 
    GraphicalElement_c.GraphicalElementInstances(modelRoot, new GraphicalElement_c_test22510_c(getEnd_elementid())) ;

    if ( (  (objs22509.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Tool", //$NON-NLS-1$
           "Consistency: Object: Connector Tool: Association: 105: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22509.length )  + " end_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Tool: Association: 105: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22509.length )  + " end_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
    return retval;
  }


  // declare transform functions
  public  void Finalize()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Tool", " Operation entered: ConnectorTool::Finalize") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelTool_c v_mdlTool = ModelTool_c.getOneCT_MTLOnR102(this);


if (v_mdlTool != null) {
v_mdlTool.Finalizeconnector(			    
Os_c.Null_unique_id()			    
,Os_c.Null_unique_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End finalize
  public  void Determinemouseupvalidity(final boolean      p_Allowsameshape,final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Tool", " Operation entered: ConnectorTool::Determinemouseupvalidity") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_criteriaMet = false ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR106(this);


Connector_c v_con = Connector_c.getOneGD_CONOnR6(v_seg);


if (v_seg != null) {
v_seg.Updateend(			    
p_X			    
,p_Y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


ConnectorSpecification_c v_csp = ConnectorSpecification_c.getOneTS_CSPOnR200(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


TerminalSpecification_c [] v_startTerms = TerminalSpecification_c.getManyTS_TSPsOnR202(v_csp);


Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


boolean      v_completed = false ;


if ( (  !v_csp.Startcriteriamet()) )
{

TerminalSpecification_c  v_startTerm = null;
for ( int i21441 = 0; i21441 < v_startTerms.length; i21441++)
{
  v_startTerm = v_startTerms[i21441] ;

if ( (v_startTerm.Criteriamet(			    
(int)(v_segmentEnd.getPositionx())			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositiony())			    
,(int)(v_segmentStart.getPositiony()))) )
{

v_criteriaMet = true ;


GraphicalElement_c v_startElem = GraphicalElement_c.getOneGD_GEOnR206(v_startTerm);


GraphicalElement_c v_endElem = GraphicalElement_c.getOneGD_GEOnR105(this);


if ( (  (v_startElem != null) ||   (v_endElem != null)) )
{

if ( (  !p_Allowsameshape && v_startElem == v_endElem) )
{

// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;


v_completed = true ;



}

else
{

boolean      v_reverseSense = true ;


Graphelement_c v_containerElem = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR23(GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(v_seg)))));


if ( (  (v_containerElem != null) &&   (v_startElem != null)) )
{

Graphelement_c v_endContainer = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR23(v_startElem)));


if ( (  (v_endContainer == null)) )
{

if (v_con != null) {
v_con.Reversesense() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


this.unrelateAcrossR104From(v_startElem);


this.unrelateAcrossR105From(v_endElem);


  this.relateAcrossR104To(v_endElem);


  this.relateAcrossR105To(v_startElem);


v_reverseSense = false ;



}


}

if ( (v_reverseSense) )
{

if (v_con != null) {
v_con.Reversesense() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if ( (  (v_startElem != null)) )
{

  this.relateAcrossR104To(v_startElem);



}


}

// Generate event CT_CTL8:Complete to self
Complete(true ) ;


v_completed = true ;



}


}

break;



}


}


}

if ( (  !v_criteriaMet &&   !v_csp.Endcriteriamet()) )
{

TerminalSpecification_c [] v_endTerms = TerminalSpecification_c.getManyTS_TSPsOnR203(v_csp);


TerminalSpecification_c  v_endTerm = null;
for ( int i21442 = 0; i21442 < v_endTerms.length; i21442++)
{
  v_endTerm = v_endTerms[i21442] ;

if ( (v_endTerm.Criteriamet(			    
(int)(v_segmentEnd.getPositionx())			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositiony())			    
,(int)(v_segmentStart.getPositiony()))) )
{

v_criteriaMet = true ;


GraphicalElement_c v_startElem = GraphicalElement_c.getOneGD_GEOnR104(this);


GraphicalElement_c v_endElem = GraphicalElement_c.getOneGD_GEOnR206(v_endTerm);


if ( (  (v_startElem != null) ||   (v_endElem != null)) )
{

if ( (  !p_Allowsameshape && v_startElem == v_endElem && (  (v_startElem != null) &&   (v_endElem != null))) )
{

// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;


v_completed = true ;



}

else
{

if ( (  (v_endElem != null)) )
{

  this.relateAcrossR105To(v_endElem);



}

Graphelement_c v_containerElem = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR23(GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(v_seg)))));


if ( (  (v_containerElem != null)) )
{

Graphelement_c v_startContainer = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR23(v_startElem)));


if ( (  (v_startContainer == null)) )
{

if (v_con != null) {
v_con.Reversesense() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


this.unrelateAcrossR104From(v_startElem);


this.unrelateAcrossR105From(v_endElem);


  this.relateAcrossR104To(v_endElem);


  this.relateAcrossR105To(v_startElem);



}


}

// Generate event CT_CTL8:Complete to self
Complete(true ) ;


v_completed = true ;



}


}

break;



}


}


}

if ( (  !v_criteriaMet && (v_csp.Startcriteriamet() || v_csp.Endcriteriamet())) )
{

boolean      v_overWhitespace = true ;


GraphicalElement_c v_conElem = GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(v_seg));


GraphicalElement_c [] v_elems = GraphicalElement_c.getManyGD_GEsOnR1(Model_c.getManyGD_MDsOnR100(ModelTool_c.getManyCT_MTLsOnR102(this)));


GraphicalElement_c  v_elem = null;
for ( int i21443 = 0; i21443 < v_elems.length; i21443++)
{
  v_elem = v_elems[i21443] ;

if ( (v_elem != v_conElem && v_elem.Isover(			    
p_X			    
,p_Y)) )
{

v_overWhitespace = false ;



}


}

if ( (v_overWhitespace) )
{

// Generate event CT_CTL5:SuitableLocation to self
SuitableLocation(true , p_X,p_Y ) ;



}

else
{

// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;



}


}

else
{

if ( (  !v_completed) )
{

// Generate event CT_CTL8:Complete to self
Complete(true ) ;



}


}


   } // End determineMouseUpValidity
  public  void Trackmousewithsegmentend(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Tool", " Operation entered: ConnectorTool::Trackmousewithsegmentend") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR106(this);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_segmentEnd != null) {
  v_segmentEnd.setPositionx( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,true			    
,(Gr_c.Scale(			    
Gr_c.Getabsolutexposition()) + v_diagram.getViewportx()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.setPositiony( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,true			    
,(Gr_c.Scale(			    
Gr_c.Getabsoluteyposition()) + v_diagram.getViewporty()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Graphelement_c v_container = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR301(Graphedge_c.getOneDIM_EDOnR20(Connector_c.getOneGD_CONOnR6(v_segment)))));


if ( (  (v_container != null)) )
{

ContainingShape_c v_containerShape = ContainingShape_c.getOneGD_CTROnR28(Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(v_container)));


if ( (  (v_containerShape != null)) )
{

ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


if (v_containerShape != null) {
v_containerShape.Autoresize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End trackMouseWithSegmentEnd
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Tool", " Operation entered: ConnectorTool::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelTool_c v_mtl = ModelTool_c.getOneCT_MTLOnR102(this);


if ( (  (v_mtl != null)) )
{

this.unrelateAcrossR102From(v_mtl);



}

LineSegment_c v_ls = LineSegment_c.getOneGD_LSOnR106(this);


if ( (  (v_ls != null)) )
{

this.unrelateAcrossR106From(v_ls);



}

GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR104(this);


if ( (  (v_ge != null)) )
{

this.unrelateAcrossR104From(v_ge);



}

v_ge = GraphicalElement_c.getOneGD_GEOnR105(this);


if ( (  (v_ge != null)) )
{

this.unrelateAcrossR105From(v_ge);



}


   } // End dispose
  public  void Clearpartialconnector()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Tool", " Operation entered: ConnectorTool::Clearpartialconnector") ; 
               final ModelRoot modelRoot = getModelRoot();
GraphicalElement_c v_startElement = GraphicalElement_c.getOneGD_GEOnR105(this);


if ( (  (v_startElement != null)) )
{

this.unrelateAcrossR105From(v_startElement);



}

GraphicalElement_c v_endElement = GraphicalElement_c.getOneGD_GEOnR104(this);


if ( (  (v_endElement != null)) )
{

this.unrelateAcrossR104From(v_endElement);



}

GraphicalElement_c v_element = GraphicalElement_c.getOneGD_GEOnR16(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


if ( (  (v_element != null)) )
{

if (v_element != null) {
v_element.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End clearPartialConnector

  // end transform functions

  public static final int
    ST_CONNECTOR_TOOL_IDLE = 1, 
    ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL = 2, 
    ST_CONNECTOR_TOOL_DETERMINING_MOUSE_DOWN_LOCATION_SUITABILITY = 3, 
    ST_CONNECTOR_TOOL_CREATING_FIRST_SEGMENT = 4, 
    ST_CONNECTOR_TOOL_DRAGGING_FIRST_SEGMENT = 5, 
    ST_CONNECTOR_TOOL_DETERMINING_MOUSE_UP_LOCATION = 6, 
    ST_CONNECTOR_TOOL_CREATING_ELEMENT = 13, 
    ST_CONNECTOR_TOOL_PREPARING_TO_DRAG_SUBSEQUENT_SEGMENT = 9, 
    ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS = 11, 
    ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING = 8, 
    ST_CONNECTOR_TOOL_DETERMINING_SUBSEQUENT_MOUSE_UP_LOCATION_SUITABILITY = 12, 
    ST_CONNECTOR_TOOL_MOUSE_UP_AT_BEGINNING_OF_SEGMENT = 10, 
    ST_CONNECTOR_TOOL_CREATING_SUBSEQUENT_SEGMENT = 7, 
    ST_CONNECTOR_TOOL_MOUSE_DOWN_TRACKING_END_SEGMENT_WITHOUT_DRAWING = 14, 
    ST_CONNECTOR_TOOL_CLEARING_PARTLY_DRAWN_CONNECTOR = 16, 
    ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE = 17, 
    ST_CONNECTOR_TOOL_CREATING_SEGMENT_WITHOUT_MOUSE_MOVE = 15;

   private int state = ST_CONNECTOR_TOOL_IDLE ;
   private Vector<genericEvent_c> eventQueue = new Vector<genericEvent_c>(10,10) ;
   private Vector<genericEvent_c> selfEventQueue = new Vector<genericEvent_c>(10,10) ;

  public int get_current_state() { return state; }
    
  static final int EVCD_CONNECTOR_TOOL_SUITABLE_LOCATION = 5 ;
   public synchronized void SuitableLocation( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_CONNECTOR_TOOL_SUITABLE_LOCATION incoming_event = new EV_CONNECTOR_TOOL_SUITABLE_LOCATION() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_UNSUITABLE_LOCATION = 4 ;
   public synchronized void UnsuitableLocation( boolean self_directed )
  {
    EV_CONNECTOR_TOOL_UNSUITABLE_LOCATION incoming_event = new EV_CONNECTOR_TOOL_UNSUITABLE_LOCATION() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_MOUSE_UP = 6 ;
   public synchronized void MouseUp( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_CONNECTOR_TOOL_MOUSE_UP incoming_event = new EV_CONNECTOR_TOOL_MOUSE_UP() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_DONE = 10 ;
   public synchronized void Done( boolean self_directed )
  {
    EV_CONNECTOR_TOOL_DONE incoming_event = new EV_CONNECTOR_TOOL_DONE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_COMPLETE = 8 ;
   public synchronized void Complete( boolean self_directed )
  {
    EV_CONNECTOR_TOOL_COMPLETE incoming_event = new EV_CONNECTOR_TOOL_COMPLETE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_MOUSE_MOVE = 7 ;
   public synchronized void MouseMove( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_CONNECTOR_TOOL_MOUSE_MOVE incoming_event = new EV_CONNECTOR_TOOL_MOUSE_MOVE() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_MOUSE_DOWN = 3 ;
   public synchronized void MouseDown( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_CONNECTOR_TOOL_MOUSE_DOWN incoming_event = new EV_CONNECTOR_TOOL_MOUSE_DOWN() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_DEACTIVATED = 2 ;
   public synchronized void Deactivated( boolean self_directed )
  {
    EV_CONNECTOR_TOOL_DEACTIVATED incoming_event = new EV_CONNECTOR_TOOL_DEACTIVATED() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_CONNECTOR_TOOL_ACTIVATED = 1 ;
   public synchronized void Activated( boolean self_directed )
  {
    EV_CONNECTOR_TOOL_ACTIVATED incoming_event = new EV_CONNECTOR_TOOL_ACTIVATED() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }

  public synchronized void takeEvent(genericEvent_c incoming_event)
  {
    eventQueue.addElement(incoming_event) ;
	notify() ;
  }

  public synchronized void procEvent()
  {
    ModelRoot modelRoot = getModelRoot();
    EV_CONNECTOR_TOOL currentEvent ;
	if (selfEventQueue.size() != 0) {
	  currentEvent = (EV_CONNECTOR_TOOL)selfEventQueue.firstElement() ;
	  selfEventQueue.removeElement(currentEvent) ;
	}
	else {
      currentEvent = (EV_CONNECTOR_TOOL)eventQueue.firstElement() ;
      if (currentEvent != null) {
        eventQueue.removeElement(currentEvent) ;
	  }
	}
	if (currentEvent != null) {
      switch (currentEvent.getEvtcode())
      {
        case EVCD_CONNECTOR_TOOL_SUITABLE_LOCATION:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.SuitableLocation in " + state) ; 
          final EV_CONNECTOR_TOOL_SUITABLE_LOCATION arch_event = (EV_CONNECTOR_TOOL_SUITABLE_LOCATION)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_DETERMINING_MOUSE_DOWN_LOCATION_SUITABILITY:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


setCurrenttransaction( Cl_c.Starttransaction(			    
v_canvas.getRepresents()			    
,"Segment creation")) ;


GraphicalElement_c v_conElem = new GraphicalElement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_conElem));


ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


if (v_conElem != null) {
  v_conElem.relateAcrossR10To(v_elemSpec);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_conElem != null) {
  v_conElem.relateAcrossR16To(v_elemSpec);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_conElem != null) {
  v_conElem.relateAcrossR1To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Connector_c v_connector = new Connector_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_connector));


if (v_conElem != null) {
  v_conElem.relateAcrossR2To(v_connector);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphedge_c v_graphEdge = new Graphedge_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphEdge));


if (v_graphEdge != null) {
  v_graphEdge.relateAcrossR20To(v_connector);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphelement_c v_graphEle = new Graphelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphEle));


if (v_graphEle != null) {
  v_graphEle.relateAcrossR301To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_graphEle != null) {
  v_graphEle.relateAcrossR23To(v_conElem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Diagramelement_c v_diaEle = new Diagramelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_diaEle));


if (v_diaEle != null) {
  v_diaEle.relateAcrossR302To(v_graphEle);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


LineSegment_c v_segment = new LineSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_segment));


Waypoint_c v_startPoint = new Waypoint_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_startPoint));


if (v_startPoint != null) {
  v_startPoint.relateAcrossR21To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_startPoint != null) {
  v_startPoint.relateAcrossR319To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Waypoint_c v_endPoint = new Waypoint_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_endPoint));


if (v_endPoint != null) {
  v_endPoint.relateAcrossR22To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_endPoint != null) {
  v_endPoint.relateAcrossR319To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_endPoint != null) {
  v_endPoint.relateAcrossR324ToFollows(v_startPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_connector != null) {
  v_connector.relateAcrossR6To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (v_canvas.Hascontainersymbol()) )
{

  class ElementSpecification_test21631_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ElementSpecification_c selected = (ElementSpecification_c)candidate;
		return (selected.getSymboltype().equals("container") && selected.getCreationrule().equals("on canvas creation")) ;
	}
  }
ElementSpecification_c v_containerSpec = ElementSpecification_c.getOneGD_ESOnR11(ElementInModelSpecification_c.getManyGD_EMSsOnR11(ModelSpecification_c.getManyGD_MSsOnR9(v_canvas)), new ElementSpecification_test21631_c());


if ( (  (v_containerSpec != null)) )
{

GraphicalElement_c v_containerShp = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getManyGD_SHPsOnR28(ContainingShape_c.getManyGD_CTRsOnR28(Shape_c.getManyGD_SHPsOnR2(GraphicalElement_c.getManyGD_GEsOnR1(v_canvas)))));


if ( (  (v_containerShp != null)) )
{

ContainingShape_c v_container = ContainingShape_c.getOneGD_CTROnR28(Shape_c.getOneGD_SHPOnR2(v_containerShp));


if ( (v_container.Isoveranypartof(			    
arch_event.edi_x			    
,arch_event.edi_y) ||   !v_elemSpec.getCauseautoresize()) )
{

if ( (  !v_containerShp.Isover(			    
arch_event.edi_x			    
,arch_event.edi_y) ||   !v_elemSpec.getCauseautoresize()) )
{

Graphelement_c v_containerDimGe = Graphelement_c.getOneDIM_GEOnR23(v_containerShp);


if (v_diaEle != null) {
  v_diaEle.relateAcrossR307To(v_containerDimGe);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}


}


}

FloatingText_c v_text = new FloatingText_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_text));


if (v_text != null) {
  v_text.setEnd( End_c.Start) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_connector != null) {
  v_connector.relateAcrossR8To(v_text);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_text != null) {
v_text.Createsupertypeinstances() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


v_text = new FloatingText_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_text));


if (v_text != null) {
  v_text.setEnd( End_c.Middle) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_connector != null) {
  v_connector.relateAcrossR8To(v_text);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_text != null) {
v_text.Createsupertypeinstances() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


v_text = new FloatingText_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_text));


if (v_text != null) {
  v_text.setEnd( End_c.End) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_connector != null) {
  v_connector.relateAcrossR8To(v_text);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_text != null) {
v_text.Createsupertypeinstances() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


  this.relateAcrossR106To(v_segment);


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


if (v_startPoint != null) {
  v_startPoint.setPositionx( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,true			    
,(Gr_c.Scale(			    
arch_event.edi_x) + v_diagram.getViewportx()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_startPoint != null) {
  v_startPoint.setPositiony( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,true			    
,(Gr_c.Scale(			    
arch_event.edi_y) + v_diagram.getViewporty()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_endPoint != null) {
  v_endPoint.setPositionx( v_startPoint.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_endPoint != null) {
  v_endPoint.setPositiony( v_startPoint.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



            }
            state = ST_CONNECTOR_TOOL_CREATING_FIRST_SEGMENT ;
            break ;
          case ST_CONNECTOR_TOOL_DETERMINING_MOUSE_UP_LOCATION:
            {
GraphicalElement_c v_conElem = GraphicalElement_c.getOneGD_GEOnR16(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


Connector_c v_connector = Connector_c.getOneGD_CONOnR2(v_conElem);


LineSegment_c v_segment = new LineSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_segment));


LineSegment_c v_lastSegment = LineSegment_c.getOneGD_LSOnR106(this);


Waypoint_c v_lastSegmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_lastSegment);


Graphedge_c v_graphEdge = Graphedge_c.getOneDIM_EDOnR20(v_connector);


Waypoint_c v_segmentStart = v_lastSegmentEnd ;


Waypoint_c v_segmentEnd = new Waypoint_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_segmentEnd));


if (v_segmentStart != null) {
  v_segmentStart.relateAcrossR21To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.relateAcrossR22To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.relateAcrossR319To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.relateAcrossR324ToFollows(v_segmentStart);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_connector != null) {
  v_connector.relateAcrossR6To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_lastSegment != null) {
v_lastSegment.Updateend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_segment != null) {
  v_segment.relateAcrossR7ToFollows(v_lastSegment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


this.unrelateAcrossR106From(v_lastSegment);


  this.relateAcrossR106To(v_segment);


if (v_segmentEnd != null) {
  v_segmentEnd.setPositionx( v_segmentStart.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.setPositiony( v_segmentStart.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



            }
            state = ST_CONNECTOR_TOOL_CREATING_SUBSEQUENT_SEGMENT ;
            break ;
          case ST_CONNECTOR_TOOL_DETERMINING_SUBSEQUENT_MOUSE_UP_LOCATION_SUITABILITY:
            {
GraphicalElement_c v_conElem = GraphicalElement_c.getOneGD_GEOnR16(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


Connector_c v_connector = Connector_c.getOneGD_CONOnR2(v_conElem);


LineSegment_c v_segment = new LineSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_segment));


LineSegment_c v_lastSegment = LineSegment_c.getOneGD_LSOnR106(this);


Waypoint_c v_lastSegmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_lastSegment);


Graphedge_c v_graphEdge = Graphedge_c.getOneDIM_EDOnR20(v_connector);


Waypoint_c v_segmentStart = v_lastSegmentEnd ;


Waypoint_c v_segmentEnd = new Waypoint_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_segmentEnd));


if (v_segmentStart != null) {
  v_segmentStart.relateAcrossR21To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.relateAcrossR22To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.relateAcrossR319To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.relateAcrossR324ToFollows(v_segmentStart);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_connector != null) {
  v_connector.relateAcrossR6To(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_lastSegment != null) {
v_lastSegment.Updateend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_segment != null) {
  v_segment.relateAcrossR7ToFollows(v_lastSegment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


this.unrelateAcrossR106From(v_lastSegment);


  this.relateAcrossR106To(v_segment);


if (v_segmentEnd != null) {
  v_segmentEnd.setPositionx( v_segmentStart.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_segmentEnd != null) {
  v_segmentEnd.setPositiony( v_segmentStart.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



            }
            state = ST_CONNECTOR_TOOL_CREATING_SUBSEQUENT_SEGMENT ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL5:Suitable Location", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_UNSUITABLE_LOCATION:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.UnsuitableLocation in " + state) ; 
          final EV_CONNECTOR_TOOL_UNSUITABLE_LOCATION arch_event = (EV_CONNECTOR_TOOL_UNSUITABLE_LOCATION)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_DETERMINING_MOUSE_DOWN_LOCATION_SUITABILITY:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


ConnectorSpecification_c v_csp = ConnectorSpecification_c.getOneTS_CSPOnR200(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


TerminalSpecification_c [] v_existingTerms = TerminalSpecification_c.getManyTS_TSPsOnR207(v_canvas);


TerminalSpecification_c  v_existingTerm = null;
for ( int i21436 = 0; i21436 < v_existingTerms.length; i21436++)
{
  v_existingTerm = v_existingTerms[i21436] ;

if (v_canvas != null) {
v_canvas.unrelateAcrossR207From(v_existingTerm);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

TerminalSpecification_c [] v_startTerms = TerminalSpecification_c.getManyTS_TSPsOnR202(v_csp);


TerminalSpecification_c  v_startTerm = null;
for ( int i21437 = 0; i21437 < v_startTerms.length; i21437++)
{
  v_startTerm = v_startTerms[i21437] ;

if (v_startTerm != null) {
  v_startTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_startTerm != null) {
v_startTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

TerminalSpecification_c [] v_endTerms = TerminalSpecification_c.getManyTS_TSPsOnR203(v_csp);


TerminalSpecification_c  v_endTerm = null;
for ( int i21438 = 0; i21438 < v_endTerms.length; i21438++)
{
  v_endTerm = v_endTerms[i21438] ;

if (v_endTerm != null) {
  v_endTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_endTerm != null) {
v_endTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


            }
            state = ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL ;
            break ;
          case ST_CONNECTOR_TOOL_DETERMINING_MOUSE_UP_LOCATION:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTLY_DRAWN_CONNECTOR ;
            break ;
          case ST_CONNECTOR_TOOL_DETERMINING_SUBSEQUENT_MOUSE_UP_LOCATION_SUITABILITY:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTLY_DRAWN_CONNECTOR ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_ELEMENT:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTLY_DRAWN_CONNECTOR ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_SEGMENT_WITHOUT_MOUSE_MOVE:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTLY_DRAWN_CONNECTOR ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL4:Unsuitable Location", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_MOUSE_UP:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.MouseUp in " + state) ; 
          final EV_CONNECTOR_TOOL_MOUSE_UP arch_event = (EV_CONNECTOR_TOOL_MOUSE_UP)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_CREATING_FIRST_SEGMENT:
            {
// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CREATING_SEGMENT_WITHOUT_MOUSE_MOVE ;
            break ;
          case ST_CONNECTOR_TOOL_DRAGGING_FIRST_SEGMENT:
            {
Determinemouseupvalidity(			    
false			    
,arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DETERMINING_MOUSE_UP_LOCATION ;
            break ;
          case ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS:
            {
Determinemouseupvalidity(			    
true			    
,arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DETERMINING_SUBSEQUENT_MOUSE_UP_LOCATION_SUITABILITY ;
            break ;
          case ST_CONNECTOR_TOOL_MOUSE_DOWN_TRACKING_END_SEGMENT_WITHOUT_DRAWING:
            {
Determinemouseupvalidity(			    
true			    
,arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DETERMINING_SUBSEQUENT_MOUSE_UP_LOCATION_SUITABILITY ;
            break ;
          case ST_CONNECTOR_TOOL_PREPARING_TO_DRAG_SUBSEQUENT_SEGMENT:
            {

            }
            state = ST_CONNECTOR_TOOL_MOUSE_UP_AT_BEGINNING_OF_SEGMENT ;
            break ;
               case ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL6:Mouse Up", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_DONE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.Done in " + state) ; 
          final EV_CONNECTOR_TOOL_DONE arch_event = (EV_CONNECTOR_TOOL_DONE)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE:
            {
GraphicalElement_c v_element = GraphicalElement_c.getOneGD_GEOnR16(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


if ( (  (v_element != null)) )
{

if (v_element != null) {
v_element.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


            }
            state = ST_CONNECTOR_TOOL_IDLE ;
            break ;
          case ST_CONNECTOR_TOOL_CLEARING_PARTLY_DRAWN_CONNECTOR:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


ConnectorSpecification_c v_csp = ConnectorSpecification_c.getOneTS_CSPOnR200(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


TerminalSpecification_c [] v_existingTerms = TerminalSpecification_c.getManyTS_TSPsOnR207(v_canvas);


TerminalSpecification_c  v_existingTerm = null;
for ( int i21436 = 0; i21436 < v_existingTerms.length; i21436++)
{
  v_existingTerm = v_existingTerms[i21436] ;

if (v_canvas != null) {
v_canvas.unrelateAcrossR207From(v_existingTerm);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

TerminalSpecification_c [] v_startTerms = TerminalSpecification_c.getManyTS_TSPsOnR202(v_csp);


TerminalSpecification_c  v_startTerm = null;
for ( int i21437 = 0; i21437 < v_startTerms.length; i21437++)
{
  v_startTerm = v_startTerms[i21437] ;

if (v_startTerm != null) {
  v_startTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_startTerm != null) {
v_startTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

TerminalSpecification_c [] v_endTerms = TerminalSpecification_c.getManyTS_TSPsOnR203(v_csp);


TerminalSpecification_c  v_endTerm = null;
for ( int i21438 = 0; i21438 < v_endTerms.length; i21438++)
{
  v_endTerm = v_endTerms[i21438] ;

if (v_endTerm != null) {
  v_endTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_endTerm != null) {
v_endTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


            }
            state = ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_ELEMENT:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


ConnectorSpecification_c v_csp = ConnectorSpecification_c.getOneTS_CSPOnR200(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


TerminalSpecification_c [] v_existingTerms = TerminalSpecification_c.getManyTS_TSPsOnR207(v_canvas);


TerminalSpecification_c  v_existingTerm = null;
for ( int i21436 = 0; i21436 < v_existingTerms.length; i21436++)
{
  v_existingTerm = v_existingTerms[i21436] ;

if (v_canvas != null) {
v_canvas.unrelateAcrossR207From(v_existingTerm);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

TerminalSpecification_c [] v_startTerms = TerminalSpecification_c.getManyTS_TSPsOnR202(v_csp);


TerminalSpecification_c  v_startTerm = null;
for ( int i21437 = 0; i21437 < v_startTerms.length; i21437++)
{
  v_startTerm = v_startTerms[i21437] ;

if (v_startTerm != null) {
  v_startTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_startTerm != null) {
v_startTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

TerminalSpecification_c [] v_endTerms = TerminalSpecification_c.getManyTS_TSPsOnR203(v_csp);


TerminalSpecification_c  v_endTerm = null;
for ( int i21438 = 0; i21438 < v_endTerms.length; i21438++)
{
  v_endTerm = v_endTerms[i21438] ;

if (v_endTerm != null) {
  v_endTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_endTerm != null) {
v_endTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


            }
            state = ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL10:Done", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_COMPLETE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.Complete in " + state) ; 
          final EV_CONNECTOR_TOOL_COMPLETE arch_event = (EV_CONNECTOR_TOOL_COMPLETE)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_DETERMINING_MOUSE_UP_LOCATION:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


GraphicalElement_c v_conElem = GraphicalElement_c.getOneGD_GEOnR16(v_elemSpec);


LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR106(this);


if ( (  (v_segment != null)) )
{

this.unrelateAcrossR106From(v_segment);



}

java.util.UUID         v_startOOA_ID = Os_c.Null_unique_id() ;


int  v_startOOA_Type = Ooatype_c.None ;


java.util.UUID         v_endOOA_ID = Os_c.Null_unique_id() ;


int  v_endOOA_Type = Ooatype_c.None ;


GraphicalElement_c v_startElement = GraphicalElement_c.getOneGD_GEOnR104(this);


if ( (  (v_startElement != null)) )
{

v_startOOA_ID = Cl_c.Getooaid(			    
v_startElement.getRepresents()) ;


v_startOOA_Type = v_startElement.getOoa_type() ;



}

GraphicalElement_c v_endElement = GraphicalElement_c.getOneGD_GEOnR105(this);


if ( (  (v_endElement != null)) )
{

v_endOOA_ID = Cl_c.Getooaid(			    
v_endElement.getRepresents()) ;


v_endOOA_Type = v_endElement.getOoa_type() ;



}

boolean      v_success = Cl_c.Createconnector(			    
v_startOOA_ID			    
,v_startOOA_Type == Ooatype_c.ImportedClass			    
,v_canvas.getRepresents()			    
,v_endOOA_ID			    
,v_endOOA_Type == Ooatype_c.ImportedClass			    
,v_elemSpec.getCreator()) ;


if ( (v_success) )
{

Finalize() ;


if (v_elemSpec != null) {
v_elemSpec.unrelateAcrossR16From(v_conElem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


Cl_c.Endtransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



}

else
{

// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;



}


            }
            state = ST_CONNECTOR_TOOL_CREATING_ELEMENT ;
            break ;
          case ST_CONNECTOR_TOOL_DETERMINING_SUBSEQUENT_MOUSE_UP_LOCATION_SUITABILITY:
            {
Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this));


GraphicalElement_c v_conElem = GraphicalElement_c.getOneGD_GEOnR16(v_elemSpec);


LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR106(this);


if ( (  (v_segment != null)) )
{

this.unrelateAcrossR106From(v_segment);



}

java.util.UUID         v_startOOA_ID = Os_c.Null_unique_id() ;


int  v_startOOA_Type = Ooatype_c.None ;


java.util.UUID         v_endOOA_ID = Os_c.Null_unique_id() ;


int  v_endOOA_Type = Ooatype_c.None ;


GraphicalElement_c v_startElement = GraphicalElement_c.getOneGD_GEOnR104(this);


if ( (  (v_startElement != null)) )
{

v_startOOA_ID = Cl_c.Getooaid(			    
v_startElement.getRepresents()) ;


v_startOOA_Type = v_startElement.getOoa_type() ;



}

GraphicalElement_c v_endElement = GraphicalElement_c.getOneGD_GEOnR105(this);


if ( (  (v_endElement != null)) )
{

v_endOOA_ID = Cl_c.Getooaid(			    
v_endElement.getRepresents()) ;


v_endOOA_Type = v_endElement.getOoa_type() ;



}

boolean      v_success = Cl_c.Createconnector(			    
v_startOOA_ID			    
,v_startOOA_Type == Ooatype_c.ImportedClass			    
,v_canvas.getRepresents()			    
,v_endOOA_ID			    
,v_endOOA_Type == Ooatype_c.ImportedClass			    
,v_elemSpec.getCreator()) ;


if ( (v_success) )
{

Finalize() ;


if (v_elemSpec != null) {
v_elemSpec.unrelateAcrossR16From(v_conElem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


Cl_c.Endtransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



}

else
{

// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;



}


            }
            state = ST_CONNECTOR_TOOL_CREATING_ELEMENT ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL8:Complete", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_MOUSE_MOVE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.MouseMove in " + state) ; 
          final EV_CONNECTOR_TOOL_MOUSE_MOVE arch_event = (EV_CONNECTOR_TOOL_MOUSE_MOVE)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_CREATING_FIRST_SEGMENT:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DRAGGING_FIRST_SEGMENT ;
            break ;
          case ST_CONNECTOR_TOOL_DRAGGING_FIRST_SEGMENT:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DRAGGING_FIRST_SEGMENT ;
            break ;
          case ST_CONNECTOR_TOOL_MOUSE_DOWN_TRACKING_END_SEGMENT_WITHOUT_DRAWING:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS ;
            break ;
          case ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS ;
            break ;
          case ST_CONNECTOR_TOOL_PREPARING_TO_DRAG_SUBSEQUENT_SEGMENT:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS ;
            break ;
          case ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_SUBSEQUENT_SEGMENT:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING ;
            break ;
          case ST_CONNECTOR_TOOL_MOUSE_UP_AT_BEGINNING_OF_SEGMENT:
            {
Trackmousewithsegmentend(			    
arch_event.edi_x			    
,arch_event.edi_y ) ;



            }
            state = ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING ;
            break ;
               case ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL7:Mouse Move", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_MOUSE_DOWN:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.MouseDown in " + state) ; 
          final EV_CONNECTOR_TOOL_MOUSE_DOWN arch_event = (EV_CONNECTOR_TOOL_MOUSE_DOWN)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL:
            {
boolean      v_criteriaMet = false ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


float        v_scaledX = Gr_c.Scale(			    
arch_event.edi_x) + v_diagram.getViewportx() ;


float        v_scaledY = Gr_c.Scale(			    
arch_event.edi_y) + v_diagram.getViewporty() ;


ConnectorSpecification_c v_csp = ConnectorSpecification_c.getOneTS_CSPOnR200(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


TerminalSpecification_c [] v_startTerms = TerminalSpecification_c.getManyTS_TSPsOnR202(v_csp);


TerminalSpecification_c  v_startTerm = null;
for ( int i21439 = 0; i21439 < v_startTerms.length; i21439++)
{
  v_startTerm = v_startTerms[i21439] ;

if ( (v_startTerm.Criteriamet(			    
(int)(v_scaledX)			    
,0			    
,(int)(v_scaledY)			    
,0)) )
{

v_criteriaMet = true ;


GraphicalElement_c v_elem = GraphicalElement_c.getOneGD_GEOnR206(v_startTerm);


if ( (  (v_elem != null)) )
{

  this.relateAcrossR104To(v_elem);



}

break;



}


}

if ( (  !v_criteriaMet) )
{

TerminalSpecification_c [] v_endTerms = TerminalSpecification_c.getManyTS_TSPsOnR203(v_csp);


TerminalSpecification_c  v_endTerm = null;
for ( int i21440 = 0; i21440 < v_endTerms.length; i21440++)
{
  v_endTerm = v_endTerms[i21440] ;

if ( (v_endTerm.Criteriamet(			    
(int)(v_scaledX)			    
,0			    
,(int)(v_scaledY)			    
,0)) )
{

v_criteriaMet = true ;


GraphicalElement_c v_elem = GraphicalElement_c.getOneGD_GEOnR206(v_endTerm);


if ( (  (v_elem != null)) )
{

  this.relateAcrossR105To(v_elem);



}

break;



}


}


}

if ( (v_criteriaMet) )
{

// Generate event CT_CTL5:SuitableLocation to self
SuitableLocation(true , arch_event.edi_x,arch_event.edi_y ) ;



}

else
{

// Generate event CT_CTL4:UnsuitableLocation to self
UnsuitableLocation(true ) ;



}


            }
            state = ST_CONNECTOR_TOOL_DETERMINING_MOUSE_DOWN_LOCATION_SUITABILITY ;
            break ;
          case ST_CONNECTOR_TOOL_MOUSE_UP_AT_BEGINNING_OF_SEGMENT:
            {

            }
            state = ST_CONNECTOR_TOOL_PREPARING_TO_DRAG_SUBSEQUENT_SEGMENT ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_SUBSEQUENT_SEGMENT:
            {

            }
            state = ST_CONNECTOR_TOOL_PREPARING_TO_DRAG_SUBSEQUENT_SEGMENT ;
            break ;
          case ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING:
            {

            }
            state = ST_CONNECTOR_TOOL_MOUSE_DOWN_TRACKING_END_SEGMENT_WITHOUT_DRAWING ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL3:Mouse Down", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_DEACTIVATED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.Deactivated in " + state) ; 
          final EV_CONNECTOR_TOOL_DEACTIVATED arch_event = (EV_CONNECTOR_TOOL_DEACTIVATED)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL:
            {
GraphicalElement_c v_element = GraphicalElement_c.getOneGD_GEOnR16(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


if ( (  (v_element != null)) )
{

if (v_element != null) {
v_element.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


            }
            state = ST_CONNECTOR_TOOL_IDLE ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_FIRST_SEGMENT:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_DRAGGING_FIRST_SEGMENT:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_DRAGGING_SUBSEQUENT_SEGMENTS:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_TRACKING_END_SEGMENT_WITHOUT_DRAWING:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_CREATING_SUBSEQUENT_SEGMENT:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_MOUSE_DOWN_TRACKING_END_SEGMENT_WITHOUT_DRAWING:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_MOUSE_UP_AT_BEGINNING_OF_SEGMENT:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
          case ST_CONNECTOR_TOOL_PREPARING_TO_DRAG_SUBSEQUENT_SEGMENT:
            {
Clearpartialconnector() ;


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


Cl_c.Canceltransaction(			    
v_canvas.getRepresents()			    
,getCurrenttransaction() ) ;


// Generate event CT_CTL10:Done to self
Done(true ) ;



            }
            state = ST_CONNECTOR_TOOL_CLEARING_PARTIAL_CONNECTOR_ON_DEACTIVATE ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL2:Deactivated", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_CONNECTOR_TOOL_ACTIVATED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Connector Tool", " Event dequeued: ConnectorTool.Activated in " + state) ; 
          final EV_CONNECTOR_TOOL_ACTIVATED arch_event = (EV_CONNECTOR_TOOL_ACTIVATED)currentEvent ;
          switch (state)
          {
          case ST_CONNECTOR_TOOL_IDLE:
            {
Gr_c.Setmousecursor(			    
"pencil" ) ;


ConnectorSpecification_c v_csp = ConnectorSpecification_c.getOneTS_CSPOnR200(ElementSpecification_c.getOneGD_ESOnR103(ModelTool_c.getOneCT_MTLOnR102(this)));


Model_c v_canvas = Model_c.getOneGD_MDOnR100(ModelTool_c.getOneCT_MTLOnR102(this));


TerminalSpecification_c [] v_existingTerms = TerminalSpecification_c.getManyTS_TSPsOnR207(v_canvas);


TerminalSpecification_c  v_existingTerm = null;
for ( int i21436 = 0; i21436 < v_existingTerms.length; i21436++)
{
  v_existingTerm = v_existingTerms[i21436] ;

if (v_canvas != null) {
v_canvas.unrelateAcrossR207From(v_existingTerm);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

TerminalSpecification_c [] v_startTerms = TerminalSpecification_c.getManyTS_TSPsOnR202(v_csp);


TerminalSpecification_c  v_startTerm = null;
for ( int i21437 = 0; i21437 < v_startTerms.length; i21437++)
{
  v_startTerm = v_startTerms[i21437] ;

if (v_startTerm != null) {
  v_startTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_startTerm != null) {
v_startTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

TerminalSpecification_c [] v_endTerms = TerminalSpecification_c.getManyTS_TSPsOnR203(v_csp);


TerminalSpecification_c  v_endTerm = null;
for ( int i21438 = 0; i21438 < v_endTerms.length; i21438++)
{
  v_endTerm = v_endTerms[i21438] ;

if (v_endTerm != null) {
  v_endTerm.relateAcrossR207To(v_canvas);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_endTerm != null) {
v_endTerm.Reset() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


            }
            state = ST_CONNECTOR_TOOL_WAITING_FOR_START_SYMBOL ;
            break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Connector Tool state = " + state + " event = CT_CTL1:Activated", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
      } // end currentEvent switch
	} // end if currentEvent valid
  } // end Connector Tool procEvent

  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Connector Tool
