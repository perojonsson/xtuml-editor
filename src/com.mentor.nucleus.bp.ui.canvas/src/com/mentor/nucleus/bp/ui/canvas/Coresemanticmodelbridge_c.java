package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Coresemanticmodelbridge_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CORESEMANTICMODELBRIDGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Coresemanticmodelbridge_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Coresemanticmodelbridge_c(ModelRoot modelRoot,
			java.util.UUID p_m_smb_id, Object p_m_represents) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
		m_represents = p_m_represents;

		Object[] key = {m_smb_id};
		addInstanceToMap(key);
	}
	static public Coresemanticmodelbridge_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smb_id, Object p_m_represents,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);
		Coresemanticmodelbridge_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smb_id};
			new_inst = (Coresemanticmodelbridge_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
				new_inst.m_represents = p_m_represents;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Coresemanticmodelbridge_c(modelRoot, p_m_smb_id,
					p_m_represents);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Coresemanticmodelbridge_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_smb_id,
			Object p_m_represents) {
		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);
		Coresemanticmodelbridge_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smb_id};
			source = (Coresemanticmodelbridge_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
				source.m_represents = p_m_represents;

				return source;
			}
		}
		// there is no instance matching the id
		Coresemanticmodelbridge_c new_inst = new Coresemanticmodelbridge_c(
				modelRoot, p_m_smb_id, p_m_represents);
		return new_inst;
	}
	public Coresemanticmodelbridge_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smb_id = IdAssigner.NULL_UUID;
		m_represents = null;
		Object[] key = {m_smb_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smb_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smb_id != p_newKey) {

			m_smb_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Coresemanticmodelbridge_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Coresemanticmodelbridge_c)) {
			return false;
		}

		Coresemanticmodelbridge_c me = (Coresemanticmodelbridge_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmb_id()) || IdAssigner.NULL_UUID
						.equals(((Coresemanticmodelbridge_c) elem).getSmb_id())) && this != elem)) {
			return false;
		}
		if (!getSmb_id().equals(((Coresemanticmodelbridge_c) elem).getSmb_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Coresemanticmodelbridge_c)) {
			return false;
		}

		Coresemanticmodelbridge_c me = (Coresemanticmodelbridge_c) elem;
		if (!getSmb_idCachedValue().equals(
				((Coresemanticmodelbridge_c) elem).getSmb_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smb_id;
	private Object m_represents;

	// declare association references from this class

	// referring navigation

	Semanticmodelbridge_c IsSupertypeSemanticmodelbridge;
	public void relateAcrossR313To(Semanticmodelbridge_c target) {
		relateAcrossR313To(target, true);
	}
	public void relateAcrossR313To(Semanticmodelbridge_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeSemanticmodelbridge)
			return; // already related

		if (IsSupertypeSemanticmodelbridge != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeSemanticmodelbridge != null) {

				IsSupertypeSemanticmodelbridge.clearBackPointerR313To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Coresemanticmodelbridge_c.relateAcrossR313To(Semanticmodelbridge_c target)",
									"Relate performed across R313 from CoreSemanticModelBridge to SemanticModelBridge without unrelate of prior instance.");
				}
			}

			IsSupertypeSemanticmodelbridge = target;
			m_smb_id = target.getSmb_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR313To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "313", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR313From(Semanticmodelbridge_c target) {
		unrelateAcrossR313From(target, true);
	}
	public void unrelateAcrossR313From(Semanticmodelbridge_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeSemanticmodelbridge == null)
			return; // already unrelated

		if (target != IsSupertypeSemanticmodelbridge) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R313",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR313To(this);
		}

		if (IsSupertypeSemanticmodelbridge != null) {

			m_smb_id = IsSupertypeSemanticmodelbridge.getSmb_id();
			IsSupertypeSemanticmodelbridge = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "313", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			Semanticmodelbridge_c[] targets) {
		return getOneDIM_CSMBOnR313(targets, null);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			Semanticmodelbridge_c[] targets, ClassQueryInterface_c test) {
		Coresemanticmodelbridge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_CSMBOnR313(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			Semanticmodelbridge_c target) {
		return getOneDIM_CSMBOnR313(target, null);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			Semanticmodelbridge_c target, boolean loadComponent) {
		return getOneDIM_CSMBOnR313(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			Semanticmodelbridge_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_CSMBOnR313(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			ModelRoot modelRoot, Semanticmodelbridge_c target,
			ClassQueryInterface_c test) {
		return getOneDIM_CSMBOnR313(modelRoot, target, test, true);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR313(
			ModelRoot modelRoot, Semanticmodelbridge_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneDIM_CSMBOnR313(modelRoot, target, test);
	}
	private static Coresemanticmodelbridge_c find_getOneDIM_CSMBOnR313(
			ModelRoot modelRoot, Semanticmodelbridge_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			Coresemanticmodelbridge_c source = (Coresemanticmodelbridge_c) target.backPointer_IsSubtypeCoresemanticmodelbridgeIsSubtype_R313;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR313(
			Semanticmodelbridge_c[] targets) {
		return getManyDIM_CSMBsOnR313(targets, null);
	}
	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR313(
			Semanticmodelbridge_c[] targets, boolean loadComponent) {
		return getManyDIM_CSMBsOnR313(targets, null, loadComponent);
	}
	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR313(
			Semanticmodelbridge_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_CSMBsOnR313(targets, test, true);
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR313(
			Semanticmodelbridge_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Coresemanticmodelbridge_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Coresemanticmodelbridge_c source = (Coresemanticmodelbridge_c) targets[i].backPointer_IsSubtypeCoresemanticmodelbridgeIsSubtype_R313;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Coresemanticmodelbridge_c[] ret_set = new Coresemanticmodelbridge_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Coresemanticmodelbridge_c[0];
		}
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR313(
			Semanticmodelbridge_c target) {
		if (target != null) {
			Semanticmodelbridge_c[] targetArray = new Semanticmodelbridge_c[1];
			targetArray[0] = target;
			return getManyDIM_CSMBsOnR313(targetArray);
		} else {
			Coresemanticmodelbridge_c[] result = new Coresemanticmodelbridge_c[0];
			return result;
		}
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR313(
			Semanticmodelbridge_c target, boolean loadComponent) {
		if (target != null) {
			Semanticmodelbridge_c[] targetArray = new Semanticmodelbridge_c[1];
			targetArray[0] = target;
			return getManyDIM_CSMBsOnR313(targetArray, loadComponent);
		} else {
			Coresemanticmodelbridge_c[] result = new Coresemanticmodelbridge_c[0];
			return result;
		}
	}

	// referring navigation

	Element_c Element;
	public void relateAcrossR315To(Element_c target) {
		relateAcrossR315To(target, true);
	}
	public void relateAcrossR315To(Element_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Element)
			return; // already related

		if (Element != target) {

			Object oldKey = getInstanceKey();

			if (Element != null) {

				Element.clearBackPointerR315To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Coresemanticmodelbridge_c.relateAcrossR315To(Element_c target)",
									"Relate performed across R315 from CoreSemanticModelBridge to Element without unrelate of prior instance.");
				}
			}

			Element = target;
			m_represents = target.getRepresents();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR315To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "315", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR315From(Element_c target) {
		unrelateAcrossR315From(target, true);
	}
	public void unrelateAcrossR315From(Element_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (Element == null)
			return; // already unrelated

		if (target != Element) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R315",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR315To(this);
		}

		if (Element != null) {

			m_represents = Element.getRepresents();
			Element = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "315", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			Element_c[] targets) {
		return getOneDIM_CSMBOnR315(targets, null);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			Element_c[] targets, ClassQueryInterface_c test) {
		Coresemanticmodelbridge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_CSMBOnR315(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			Element_c target) {
		return getOneDIM_CSMBOnR315(target, null);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			Element_c target, boolean loadComponent) {
		return getOneDIM_CSMBOnR315(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			Element_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_CSMBOnR315(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			ModelRoot modelRoot, Element_c target, ClassQueryInterface_c test) {
		return getOneDIM_CSMBOnR315(modelRoot, target, test, true);
	}

	public static Coresemanticmodelbridge_c getOneDIM_CSMBOnR315(
			ModelRoot modelRoot, Element_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneDIM_CSMBOnR315(modelRoot, target, test);
	}
	private static Coresemanticmodelbridge_c find_getOneDIM_CSMBOnR315(
			ModelRoot modelRoot, Element_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_Coresemanticmodelbridge_R315) {
				for (int i = 0; i < target.backPointer_Coresemanticmodelbridge_R315
						.size(); ++i) {
					Coresemanticmodelbridge_c source = (Coresemanticmodelbridge_c) target.backPointer_Coresemanticmodelbridge_R315
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c[] targets) {
		return getManyDIM_CSMBsOnR315(targets, null);
	}
	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c[] targets, boolean loadComponent) {
		return getManyDIM_CSMBsOnR315(targets, null, loadComponent);
	}
	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_CSMBsOnR315(targets, test, true);
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Coresemanticmodelbridge_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_Coresemanticmodelbridge_R315) {
				for (int j = 0; j < targets[i].backPointer_Coresemanticmodelbridge_R315
						.size(); ++j) {
					Coresemanticmodelbridge_c source = (Coresemanticmodelbridge_c) targets[i].backPointer_Coresemanticmodelbridge_R315
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Coresemanticmodelbridge_c[] ret_set = new Coresemanticmodelbridge_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Coresemanticmodelbridge_c[0];
		}
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c target) {
		return getManyDIM_CSMBsOnR315(target, null);
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c target, boolean loadComponent) {
		return getManyDIM_CSMBsOnR315(target, null, loadComponent);
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c target, ClassQueryInterface_c test) {
		return getManyDIM_CSMBsOnR315(target, test, true);
	}

	public static Coresemanticmodelbridge_c[] getManyDIM_CSMBsOnR315(
			Element_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Coresemanticmodelbridge_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_Coresemanticmodelbridge_R315) {
			for (int i = 0; i < target.backPointer_Coresemanticmodelbridge_R315
					.size(); ++i) {
				Coresemanticmodelbridge_c source = (Coresemanticmodelbridge_c) target.backPointer_Coresemanticmodelbridge_R315
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Coresemanticmodelbridge_c[] ret_set = new Coresemanticmodelbridge_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Coresemanticmodelbridge_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R313
      Semanticmodelbridge_c relInst21918 = (Semanticmodelbridge_c) baseRoot.getInstanceList(Semanticmodelbridge_c.class).get(new Object[] {m_smb_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21918 == null) {
      			relInst21918 = (Semanticmodelbridge_c) Ooaofooa.getDefaultInstance().getInstanceList(Semanticmodelbridge_c.class).get(new Object[] {m_smb_id});
      		}
			//synchronized
      if ( relInst21918 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21918) && !isProxy())) {
	      relInst21918.relateAcrossR313To(this, notifyChanges);
	  }
	  }
	          

	if (Element == null) {          
      // R315
	  instances = baseRoot.getInstanceList(Element_c.class);
      Element_c relInst21919 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           Element_c source = (Element_c)cursor.next() ;
           if (     source.getRepresents() == m_represents 		){
  		relInst21919 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst21919 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21919) && !isProxy())) {
	      relInst21919.relateAcrossR315To(this, notifyChanges);
	  }
	  }
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R313
		// DIM_SMB
		inst = IsSupertypeSemanticmodelbridge;
		unrelateAcrossR313From(IsSupertypeSemanticmodelbridge, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R315
		// DIM_ELM
		inst = Element;
		unrelateAcrossR315From(Element, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Coresemanticmodelbridge_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Coresemanticmodelbridge_c inst = (Coresemanticmodelbridge_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Coresemanticmodelbridge_c CoresemanticmodelbridgeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		Coresemanticmodelbridge_c result = findCoresemanticmodelbridgeInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static Coresemanticmodelbridge_c findCoresemanticmodelbridgeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Coresemanticmodelbridge_c x = (Coresemanticmodelbridge_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Coresemanticmodelbridge_c CoresemanticmodelbridgeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CoresemanticmodelbridgeInstance(modelRoot, test, true);
	}

	public static Coresemanticmodelbridge_c CoresemanticmodelbridgeInstance(
			ModelRoot modelRoot) {
		return CoresemanticmodelbridgeInstance(modelRoot, null, true);
	}

	public static Coresemanticmodelbridge_c[] CoresemanticmodelbridgeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Coresemanticmodelbridge_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Coresemanticmodelbridge_c x = (Coresemanticmodelbridge_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Coresemanticmodelbridge_c[] ret_set = new Coresemanticmodelbridge_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Coresemanticmodelbridge_c[0];
			}
		}
	}
	public static Coresemanticmodelbridge_c[] CoresemanticmodelbridgeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CoresemanticmodelbridgeInstances(modelRoot, test, true);
	}
	public static Coresemanticmodelbridge_c[] CoresemanticmodelbridgeInstances(
			ModelRoot modelRoot) {
		return CoresemanticmodelbridgeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the CoreSemanticModelBridge.dispose call: ";
		Semanticmodelbridge_c testR313Inst2 = Semanticmodelbridge_c
				.getOneDIM_SMBOnR313(this, false);

		if (testR313Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "313 ";
		}
		Element_c testR315Inst = Element_c.getOneDIM_ELMOnR315(this, false);

		if (testR315Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "315 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE,
						"CoreSemanticModelBridge", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smb_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getSmb_idLongBased() {
		if (IsSupertypeSemanticmodelbridge != null) {
			return IsSupertypeSemanticmodelbridge.getSmb_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmb_id() {
		if (IsSupertypeSemanticmodelbridge != null) {
			return IsSupertypeSemanticmodelbridge.getSmb_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeSemanticmodelbridge != null);

	}

	public java.util.UUID getSmb_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smb_id))
			return m_smb_id;
		else
			return getSmb_id();
	}

	public void setSmb_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smb_id)) {
				return;
			}
		} else if (m_smb_id != null) {
			if (m_smb_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smb_id", m_smb_id, newValue, true);
		m_smb_id = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public Object getRepresents() {
		if (Element != null) {
			return Element.getRepresents();
		}
		return null;
	}

	public Object getRepresentsCachedValue() {
		if (m_represents != null)
			return m_represents;
		else
			return getRepresents();
	}

	public void setRepresents(Object newValue) {
		if (newValue != null) {
			if (newValue.equals(m_represents)) {
				return;
			}
		} else if (m_represents != null) {
			if (m_represents.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Represents", m_represents, newValue, true);
		m_represents = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "CoreSemanticModelBridge", //$NON-NLS-1$
						" Operation entered: CoreSemanticModelBridge::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Coresemanticmodelbridge_c[] objs = Coresemanticmodelbridge_c
				.CoresemanticmodelbridgeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "CoreSemanticModelBridge", //$NON-NLS-1$
						" Operation entered: CoreSemanticModelBridge::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Coresemanticmodelbridge_c_test21921_c
				implements
					ClassQueryInterface_c {
			Coresemanticmodelbridge_c_test21921_c(java.util.UUID p21922) {
				m_p21922 = p21922;
			}
			private java.util.UUID m_p21922;
			public boolean evaluate(Object candidate) {
				Coresemanticmodelbridge_c selected = (Coresemanticmodelbridge_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21922));
				return retval;
			}
		}

		Coresemanticmodelbridge_c[] objs21920 = Coresemanticmodelbridge_c
				.CoresemanticmodelbridgeInstances(modelRoot,
						new Coresemanticmodelbridge_c_test21921_c(getSmb_id()));

		if (((objs21920.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"CoreSemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: CoreSemanticModelBridge: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21920.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: CoreSemanticModelBridge: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21920.length), e);
			}
			retval = false;

		}

		if (((objs21920.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"CoreSemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: CoreSemanticModelBridge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21920.length)
										+ " Smb_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: CoreSemanticModelBridge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21920.length)
										+ " Smb_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// CoreSemanticModelBridge is a subtype in association: rel.Numb = 313
		// The supertype class is: SemanticModelBridge
		class Semanticmodelbridge_c_test21926_c
				implements
					ClassQueryInterface_c {
			Semanticmodelbridge_c_test21926_c(java.util.UUID p21927) {
				m_p21927 = p21927;
			}
			private java.util.UUID m_p21927;
			public boolean evaluate(Object candidate) {
				Semanticmodelbridge_c selected = (Semanticmodelbridge_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21927));
				return retval;
			}
		}

		Semanticmodelbridge_c[] objs21925 = Semanticmodelbridge_c
				.SemanticmodelbridgeInstances(modelRoot,
						new Semanticmodelbridge_c_test21926_c(getSmb_id()));

		if (((objs21925.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"CoreSemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: CoreSemanticModelBridge: Association: 313: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21925.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: CoreSemanticModelBridge: Association: 313: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21925.length), e);
			}
			retval = false;

		}

		// CoreSemanticModelBridge is a referring class in association: rel.Numb = 315
		// The participating class is: Element
		class Element_c_test21929_c implements ClassQueryInterface_c {
			Element_c_test21929_c(Object p21930) {
				m_p21930 = p21930;
			}
			private Object m_p21930;
			public boolean evaluate(Object candidate) {
				Element_c selected = (Element_c) candidate;
				boolean retval = false;
				retval = (selected.getRepresents() == (m_p21930));
				return retval;
			}
		}

		Element_c[] objs21928 = Element_c.ElementInstances(modelRoot,
				new Element_c_test21929_c(getRepresents()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs21928.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"CoreSemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: CoreSemanticModelBridge: Association: 315: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21928.length)
										+ " represents: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: CoreSemanticModelBridge: Association: 315: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21928.length)
										+ " represents: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end CoreSemanticModelBridge
