package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ClientClassDependency_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLIENT_CLASS_DEPENDENCY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClientClassDependency_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClientClassDependency_c(ModelRoot modelRoot, int p_m_ooa_type,
			Class p_m_represents) {
		super(modelRoot);
		m_ooa_type = p_m_ooa_type;
		m_represents = p_m_represents;

	}
	static public ClientClassDependency_c createProxy(ModelRoot modelRoot,
			int p_m_ooa_type, Class p_m_represents, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClientClassDependency_c.class);
		ClientClassDependency_c new_inst = null;
		synchronized (instances) {
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_ooa_type = p_m_ooa_type;
				new_inst.m_represents = p_m_represents;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClientClassDependency_c(modelRoot, p_m_ooa_type,
					p_m_represents);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ClientClassDependency_c resolveInstance(ModelRoot modelRoot,
			int p_m_ooa_type, Class p_m_represents) {
		InstanceList instances = modelRoot
				.getInstanceList(ClientClassDependency_c.class);
		ClientClassDependency_c source = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_ooa_type)), p_m_represents};
			source = (ClientClassDependency_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_ooa_type = p_m_ooa_type;
				source.m_represents = p_m_represents;

				return source;
			}
		}
		// there is no instance matching the id
		ClientClassDependency_c new_inst = new ClientClassDependency_c(
				modelRoot, p_m_ooa_type, p_m_represents);
		return new_inst;
	}
	public ClientClassDependency_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClientClassDependency_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClientClassDependency_c)) {
			return false;
		}

		ClientClassDependency_c me = (ClientClassDependency_c) elem;
		if (getOoa_type() != ((ClientClassDependency_c) elem).getOoa_type())
			return false;
		if (getRepresents() != ((ClientClassDependency_c) elem).getRepresents())
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClientClassDependency_c)) {
			return false;
		}

		ClientClassDependency_c me = (ClientClassDependency_c) elem;
		if (getOoa_typeCachedValue() != ((ClientClassDependency_c) elem)
				.getOoa_typeCachedValue())
			return false;
		if (getRepresents() != ((ClientClassDependency_c) elem).getRepresents())
			return false;
		return true;
	}

	// Attributes
	private int m_ooa_type;
	private Class m_represents;

	// declare association references from this class

	// referring navigation

	ElementSpecification_c IsForElementSpecification;
	public void relateAcrossR17To(ElementSpecification_c target) {
		relateAcrossR17To(target, true);
	}
	public void relateAcrossR17To(ElementSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsForElementSpecification)
			return; // already related

		if (IsForElementSpecification != target) {

			Object oldKey = getInstanceKey();

			if (IsForElementSpecification != null) {

				IsForElementSpecification.clearBackPointerR17To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ClientClassDependency_c.relateAcrossR17To(ElementSpecification_c target)",
									"Relate performed across R17 from Client Class Dependency to Element Specification without unrelate of prior instance.");
				}
			}

			IsForElementSpecification = target;
			m_ooa_type = target.getOoa_type();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR17To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "17", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR17From(ElementSpecification_c target) {
		unrelateAcrossR17From(target, true);
	}
	public void unrelateAcrossR17From(ElementSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsForElementSpecification == null)
			return; // already unrelated

		if (target != IsForElementSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R17",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR17To(this);
		}

		if (IsForElementSpecification != null) {

			m_ooa_type = IsForElementSpecification.getOoa_type();
			IsForElementSpecification = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "17", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ElementSpecification_c[] targets) {
		return getOneGD_CCDOnR17(targets, null);
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ElementSpecification_c[] targets, ClassQueryInterface_c test) {
		ClientClassDependency_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_CCDOnR17(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ElementSpecification_c target) {
		return getOneGD_CCDOnR17(target, null);
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ElementSpecification_c target, boolean loadComponent) {
		return getOneGD_CCDOnR17(Ooaofgraphics.getDefaultInstance(), target,
				null, loadComponent);
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ElementSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_CCDOnR17(Ooaofgraphics.getDefaultInstance(),
					target, test);
		}
		return null;
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ModelRoot modelRoot, ElementSpecification_c target,
			ClassQueryInterface_c test) {
		return getOneGD_CCDOnR17(modelRoot, target, test, true);
	}

	public static ClientClassDependency_c getOneGD_CCDOnR17(
			ModelRoot modelRoot, ElementSpecification_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneGD_CCDOnR17(modelRoot, target, test);
	}
	private static ClientClassDependency_c find_getOneGD_CCDOnR17(
			ModelRoot modelRoot, ElementSpecification_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasClientClassDependencyHas_R17) {
				for (int i = 0; i < target.backPointer_HasClientClassDependencyHas_R17
						.size(); ++i) {
					ClientClassDependency_c source = (ClientClassDependency_c) target.backPointer_HasClientClassDependencyHas_R17
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c[] targets) {
		return getManyGD_CCDsOnR17(targets, null);
	}
	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c[] targets, boolean loadComponent) {
		return getManyGD_CCDsOnR17(targets, null, loadComponent);
	}
	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManyGD_CCDsOnR17(targets, test, true);
	}

	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClientClassDependency_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();

		InstanceList instances = modelRoot
				.getInstanceList(ClientClassDependency_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasClientClassDependencyHas_R17) {
				for (int j = 0; j < targets[i].backPointer_HasClientClassDependencyHas_R17
						.size(); ++j) {
					ClientClassDependency_c source = (ClientClassDependency_c) targets[i].backPointer_HasClientClassDependencyHas_R17
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ClientClassDependency_c[] ret_set = new ClientClassDependency_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClientClassDependency_c[0];
		}
	}

	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c target) {
		return getManyGD_CCDsOnR17(target, null);
	}

	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c target, boolean loadComponent) {
		return getManyGD_CCDsOnR17(target, null, loadComponent);
	}

	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c target, ClassQueryInterface_c test) {
		return getManyGD_CCDsOnR17(target, test, true);
	}

	public static ClientClassDependency_c[] getManyGD_CCDsOnR17(
			ElementSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ClientClassDependency_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasClientClassDependencyHas_R17) {
			for (int i = 0; i < target.backPointer_HasClientClassDependencyHas_R17
					.size(); ++i) {
				ClientClassDependency_c source = (ClientClassDependency_c) target.backPointer_HasClientClassDependencyHas_R17
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ClientClassDependency_c[] ret_set = new ClientClassDependency_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClientClassDependency_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsForElementSpecification == null) {          
      // R17
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ElementSpecification_c.class);
      ElementSpecification_c relInst22379 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ElementSpecification_c source = (ElementSpecification_c)cursor.next() ;
           if (     source.getOoa_type() == m_ooa_type 		){
  		relInst22379 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst22379 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22379) && !isProxy())) {
	      relInst22379.relateAcrossR17To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R17
		// GD_ES
		inst = IsForElementSpecification;
		unrelateAcrossR17From(IsForElementSpecification, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClientClassDependency_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClientClassDependency_c inst = (ClientClassDependency_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClientClassDependency_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClientClassDependency_c ClientClassDependencyInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClientClassDependency_c result = findClientClassDependencyInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static ClientClassDependency_c findClientClassDependencyInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClientClassDependency_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClientClassDependency_c x = (ClientClassDependency_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ClientClassDependency_c ClientClassDependencyInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClientClassDependencyInstance(modelRoot, test, true);
	}

	public static ClientClassDependency_c ClientClassDependencyInstance(
			ModelRoot modelRoot) {
		return ClientClassDependencyInstance(modelRoot, null, true);
	}

	public static ClientClassDependency_c[] ClientClassDependencyInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClientClassDependency_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClientClassDependency_c x = (ClientClassDependency_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClientClassDependency_c[] ret_set = new ClientClassDependency_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClientClassDependency_c[0];
			}
		}
	}
	public static ClientClassDependency_c[] ClientClassDependencyInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClientClassDependencyInstances(modelRoot, test, true);
	}
	public static ClientClassDependency_c[] ClientClassDependencyInstances(
			ModelRoot modelRoot) {
		return ClientClassDependencyInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Client Class Dependency.dispose call: ";
		ElementSpecification_c testR17Inst = ElementSpecification_c
				.getOneGD_ESOnR17(this, false);

		if (testR17Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "17 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE,
						"Client Class Dependency", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		return false;
	}
	// declare attribute accessors
	public int getOoa_type() {
		if (IsForElementSpecification != null) {
			return IsForElementSpecification.getOoa_type();
		}
		return 0;
	}

	public int getOoa_typeCachedValue() {
		return m_ooa_type;
	}

	public void setOoa_type(int newValue) {
		if (m_ooa_type == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Ooa_type", new Integer(m_ooa_type), new Integer(newValue),
				false);

		m_ooa_type = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public Class getRepresents() {
		return m_represents;
	}

	public void setRepresents(Class newValue) {
		if (newValue != null) {
			if (newValue.equals(m_represents)) {
				return;
			}
		} else if (m_represents != null) {
			if (m_represents.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Represents", m_represents, newValue, false);
		m_represents = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Client Class Dependency", //$NON-NLS-1$
						" Operation entered: Client Class Dependency::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClientClassDependency_c[] objs = ClientClassDependency_c
				.ClientClassDependencyInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Client Class Dependency", //$NON-NLS-1$
						" Operation entered: Client Class Dependency::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClientClassDependency_c_test22381_c
				implements
					ClassQueryInterface_c {
			ClientClassDependency_c_test22381_c(int p22382, Class p22383) {
				m_p22382 = p22382;
				m_p22383 = p22383;
			}
			private int m_p22382;
			private Class m_p22383;
			public boolean evaluate(Object candidate) {
				ClientClassDependency_c selected = (ClientClassDependency_c) candidate;
				boolean retval = false;
				retval = (selected.getOoa_type() == (m_p22382))
						& (selected.getRepresents() == (m_p22383));
				return retval;
			}
		}

		ClientClassDependency_c[] objs22380 = ClientClassDependency_c
				.ClientClassDependencyInstances(Ooaofgraphics
						.getDefaultInstance(),
						new ClientClassDependency_c_test22381_c(getOoa_type(),
								getRepresents()));

		if (((objs22380.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"Client Class Dependency", //$NON-NLS-1$
								"Consistency: Object: Client Class Dependency: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22380.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Client Class Dependency: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22380.length), e);
			}
			retval = false;

		}

		if (((objs22380.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"Client Class Dependency", //$NON-NLS-1$
								"Consistency: Object: Client Class Dependency: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22380.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type()) + " represents: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Client Class Dependency: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22380.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type()) + " represents: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Client Class Dependency is a referring class in association: rel.Numb = 17
		// The participating class is: Element Specification
		class ElementSpecification_c_test22387_c
				implements
					ClassQueryInterface_c {
			ElementSpecification_c_test22387_c(int p22388) {
				m_p22388 = p22388;
			}
			private int m_p22388;
			public boolean evaluate(Object candidate) {
				ElementSpecification_c selected = (ElementSpecification_c) candidate;
				boolean retval = false;
				retval = (selected.getOoa_type() == (m_p22388));
				return retval;
			}
		}

		ElementSpecification_c[] objs22386 = ElementSpecification_c
				.ElementSpecificationInstances(
						Ooaofgraphics.getDefaultInstance(),
						new ElementSpecification_c_test22387_c(getOoa_type()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs22386.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(
								ILogger.CONSISTENCY,
								"Client Class Dependency", //$NON-NLS-1$
								"Consistency: Object: Client Class Dependency: Association: 17: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22386.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Client Class Dependency: Association: 17: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22386.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Client Class Dependency
