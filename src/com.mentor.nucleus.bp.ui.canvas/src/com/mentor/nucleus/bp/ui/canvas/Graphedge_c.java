      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Graphedge_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_GRAPHEDGE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Graphedge_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Graphedge_c(ModelRoot modelRoot,
       java.util.UUID         p_m_first_conid,
       java.util.UUID         p_m_last_conid,
       java.util.UUID         p_m_elementid)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_first_conid = IdAssigner.preprocessUUID(p_m_first_conid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_last_conid = IdAssigner.preprocessUUID(p_m_last_conid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public Graphedge_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_first_conid,
       java.util.UUID         p_m_last_conid,
       java.util.UUID         p_m_elementid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);
      Graphedge_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (Graphedge_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_first_conid = IdAssigner.preprocessUUID(p_m_first_conid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_last_conid = IdAssigner.preprocessUUID(p_m_last_conid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Graphedge_c(modelRoot,
p_m_first_conid,
p_m_last_conid,
p_m_elementid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Graphedge_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_first_conid,
       java.util.UUID         p_m_last_conid,
       java.util.UUID         p_m_elementid){
    InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);
    Graphedge_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (Graphedge_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_first_conid = IdAssigner.preprocessUUID(p_m_first_conid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_last_conid = IdAssigner.preprocessUUID(p_m_last_conid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Graphedge_c new_inst = new Graphedge_c(modelRoot,
p_m_first_conid,
p_m_last_conid,
p_m_elementid
);
    return new_inst;
  }
  public Graphedge_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_first_conid = IdAssigner.NULL_UUID;   
     m_last_conid = IdAssigner.NULL_UUID;   
     m_elementid = IdAssigner.NULL_UUID;   
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Graphedge_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Graphedge_c)) {
           return false;
       }
       
       Graphedge_c me = (Graphedge_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((Graphedge_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((Graphedge_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Graphedge_c)) {
           return false;
       }
       
       Graphedge_c me = (Graphedge_c)elem;
      if (!getElementidCachedValue().equals(((Graphedge_c)elem).getElementidCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_first_conid ;
  private java.util.UUID         m_last_conid ;
  private java.util.UUID         m_elementid ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphelement_c IsSupertypeGraphelement ;
public void relateAcrossR301To(Graphelement_c target)
{
	relateAcrossR301To(target, true);
}
public void relateAcrossR301To(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeGraphelement) return;  // already related

    if ( IsSupertypeGraphelement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeGraphelement != null) {
    
        IsSupertypeGraphelement.clearBackPointerR301To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Graphedge_c.relateAcrossR301To(Graphelement_c target)", 
			"Relate performed across R301 from GraphEdge to GraphElement without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeGraphelement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR301To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "301", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR301From(Graphelement_c target)
{
	unrelateAcrossR301From(target, true);
}
public void unrelateAcrossR301From(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeGraphelement == null) return;  // already unrelated
	
	if (target != IsSupertypeGraphelement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R301", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR301To(this);
    }
    

      if(IsSupertypeGraphelement != null) {
      
        m_elementid = IsSupertypeGraphelement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = IsSupertypeGraphelement.getElementidCachedValue();
        }       
        IsSupertypeGraphelement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "301", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Graphedge_c getOneDIM_EDOnR301(Graphelement_c [] targets)
{
    return getOneDIM_EDOnR301(targets, null);
}

public static Graphedge_c getOneDIM_EDOnR301(Graphelement_c [] targets, ClassQueryInterface_c test)
{
    Graphedge_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_EDOnR301(targets[i], test);
        }
    }

    return ret_val;
}

public static Graphedge_c getOneDIM_EDOnR301(Graphelement_c target)
{
  return getOneDIM_EDOnR301(target, null);
}

public static Graphedge_c getOneDIM_EDOnR301(Graphelement_c target, boolean loadComponent)
{
    return getOneDIM_EDOnR301(target.getModelRoot(), target, null, loadComponent);
}

public static Graphedge_c getOneDIM_EDOnR301(Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_EDOnR301(target.getModelRoot(), target, test);
  }
  return null;
}

public static Graphedge_c getOneDIM_EDOnR301(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
	return getOneDIM_EDOnR301(modelRoot, target, test, true);
}

public static Graphedge_c getOneDIM_EDOnR301(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_EDOnR301(modelRoot,target,test);
}
private static Graphedge_c find_getOneDIM_EDOnR301(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Graphedge_c source = (Graphedge_c)target.backPointer_IsSubtypeGraphedgeIsSubtype_R301;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Graphedge_c [] getManyDIM_EDsOnR301(Graphelement_c [] targets)
{
  return getManyDIM_EDsOnR301(targets, null);
}
public static Graphedge_c [] getManyDIM_EDsOnR301(Graphelement_c [] targets, boolean loadComponent)
{
  return getManyDIM_EDsOnR301(targets, null, loadComponent);
}
public static Graphedge_c [] getManyDIM_EDsOnR301(Graphelement_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR301(targets, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR301(Graphelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Graphedge_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Graphedge_c source = (Graphedge_c)targets[i].backPointer_IsSubtypeGraphedgeIsSubtype_R301;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Graphedge_c[] ret_set = new Graphedge_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Graphedge_c[0];
  }
  }

public static Graphedge_c [] getManyDIM_EDsOnR301(Graphelement_c target)
{
  if (target != null) {
    Graphelement_c [] targetArray = new Graphelement_c[1];
    targetArray[0] = target;
    return getManyDIM_EDsOnR301(targetArray);
  } else {
    Graphedge_c [] result = new Graphedge_c [0] ;
  return result ;
}
}

public static Graphedge_c [] getManyDIM_EDsOnR301(Graphelement_c target, boolean loadComponent)
{
  if (target != null) {
    Graphelement_c [] targetArray = new Graphelement_c[1];
    targetArray[0] = target;
    return getManyDIM_EDsOnR301(targetArray, loadComponent);
  } else {
    Graphedge_c [] result = new Graphedge_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Graphconnector_c AnchorForFirstWaypointGraphconnector ;
public void relateAcrossR320To(Graphconnector_c target)
{
	relateAcrossR320To(target, true);
}
public void relateAcrossR320To(Graphconnector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == AnchorForFirstWaypointGraphconnector) return;  // already related

    if ( AnchorForFirstWaypointGraphconnector != target ) {
    
    Object oldKey = getInstanceKey();

    if (AnchorForFirstWaypointGraphconnector != null) {
    
        AnchorForFirstWaypointGraphconnector.clearBackPointerR320To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Graphedge_c.relateAcrossR320To(Graphconnector_c target)", 
			"Relate performed across R320 from GraphEdge to GraphConnector without unrelate of prior instance.");  
		}
    }
                
    	AnchorForFirstWaypointGraphconnector = target ;
        m_first_conid = target.getConid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR320To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "320", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR320From(Graphconnector_c target)
{
	unrelateAcrossR320From(target, true);
}
public void unrelateAcrossR320From(Graphconnector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (AnchorForFirstWaypointGraphconnector == null) return;  // already unrelated
	
	if (target != AnchorForFirstWaypointGraphconnector) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R320", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR320To(this);
    }
    

      if(AnchorForFirstWaypointGraphconnector != null) {
      
        m_first_conid = AnchorForFirstWaypointGraphconnector.getConid();
        AnchorForFirstWaypointGraphconnector = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "320", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Graphedge_c getOneDIM_EDOnR320(Graphconnector_c [] targets)
{
    return getOneDIM_EDOnR320(targets, null);
}

public static Graphedge_c getOneDIM_EDOnR320(Graphconnector_c [] targets, ClassQueryInterface_c test)
{
    Graphedge_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_EDOnR320(targets[i], test);
        }
    }

    return ret_val;
}

public static Graphedge_c getOneDIM_EDOnR320(Graphconnector_c target)
{
  return getOneDIM_EDOnR320(target, null);
}

public static Graphedge_c getOneDIM_EDOnR320(Graphconnector_c target, boolean loadComponent)
{
    return getOneDIM_EDOnR320(target.getModelRoot(), target, null, loadComponent);
}

public static Graphedge_c getOneDIM_EDOnR320(Graphconnector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_EDOnR320(target.getModelRoot(), target, test);
  }
  return null;
}

public static Graphedge_c getOneDIM_EDOnR320(ModelRoot modelRoot, Graphconnector_c target, ClassQueryInterface_c test)
{
	return getOneDIM_EDOnR320(modelRoot, target, test, true);
}

public static Graphedge_c getOneDIM_EDOnR320(ModelRoot modelRoot, Graphconnector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_EDOnR320(modelRoot,target,test);
}
private static Graphedge_c find_getOneDIM_EDOnR320(ModelRoot modelRoot, Graphconnector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_EdgeGraphedgeEdge_R320) {
	    for ( int i = 0; i < target.backPointer_EdgeGraphedgeEdge_R320.size(); ++i ) {
	      Graphedge_c source = (Graphedge_c)target.backPointer_EdgeGraphedgeEdge_R320.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c [] targets)
{
  return getManyDIM_EDsOnR320(targets, null);
}
public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c [] targets, boolean loadComponent)
{
  return getManyDIM_EDsOnR320(targets, null, loadComponent);
}
public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR320(targets, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Graphedge_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_EdgeGraphedgeEdge_R320) {
	    for (int j = 0; j < targets[i].backPointer_EdgeGraphedgeEdge_R320.size(); ++j) {
	      Graphedge_c source = (Graphedge_c)targets[i].backPointer_EdgeGraphedgeEdge_R320.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Graphedge_c[] ret_set = new Graphedge_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Graphedge_c[0];
  }
  }

public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c target)
{
  return getManyDIM_EDsOnR320(target, null);
}

public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c target, boolean loadComponent)
{
  return getManyDIM_EDsOnR320(target, null, loadComponent);
}

public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c target, ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR320(target, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR320(Graphconnector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Graphedge_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_EdgeGraphedgeEdge_R320) {
    for (int i = 0; i < target.backPointer_EdgeGraphedgeEdge_R320.size(); ++i) {
      Graphedge_c source = (Graphedge_c)target.backPointer_EdgeGraphedgeEdge_R320.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Graphedge_c[] ret_set = new Graphedge_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Graphedge_c[0];
	}
  }


  
    
// referring navigation

Graphconnector_c AnchorForLastWaypointGraphconnector ;
public void relateAcrossR321To(Graphconnector_c target)
{
	relateAcrossR321To(target, true);
}
public void relateAcrossR321To(Graphconnector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == AnchorForLastWaypointGraphconnector) return;  // already related

    if ( AnchorForLastWaypointGraphconnector != target ) {
    
    Object oldKey = getInstanceKey();

    if (AnchorForLastWaypointGraphconnector != null) {
    
        AnchorForLastWaypointGraphconnector.clearBackPointerR321To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Graphedge_c.relateAcrossR321To(Graphconnector_c target)", 
			"Relate performed across R321 from GraphEdge to GraphConnector without unrelate of prior instance.");  
		}
    }
                
    	AnchorForLastWaypointGraphconnector = target ;
        m_last_conid = target.getConid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR321To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "321", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR321From(Graphconnector_c target)
{
	unrelateAcrossR321From(target, true);
}
public void unrelateAcrossR321From(Graphconnector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (AnchorForLastWaypointGraphconnector == null) return;  // already unrelated
	
	if (target != AnchorForLastWaypointGraphconnector) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R321", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR321To(this);
    }
    

      if(AnchorForLastWaypointGraphconnector != null) {
      
        m_last_conid = AnchorForLastWaypointGraphconnector.getConid();
        AnchorForLastWaypointGraphconnector = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "321", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Graphedge_c getOneDIM_EDOnR321(Graphconnector_c [] targets)
{
    return getOneDIM_EDOnR321(targets, null);
}

public static Graphedge_c getOneDIM_EDOnR321(Graphconnector_c [] targets, ClassQueryInterface_c test)
{
    Graphedge_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_EDOnR321(targets[i], test);
        }
    }

    return ret_val;
}

public static Graphedge_c getOneDIM_EDOnR321(Graphconnector_c target)
{
  return getOneDIM_EDOnR321(target, null);
}

public static Graphedge_c getOneDIM_EDOnR321(Graphconnector_c target, boolean loadComponent)
{
    return getOneDIM_EDOnR321(target.getModelRoot(), target, null, loadComponent);
}

public static Graphedge_c getOneDIM_EDOnR321(Graphconnector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_EDOnR321(target.getModelRoot(), target, test);
  }
  return null;
}

public static Graphedge_c getOneDIM_EDOnR321(ModelRoot modelRoot, Graphconnector_c target, ClassQueryInterface_c test)
{
	return getOneDIM_EDOnR321(modelRoot, target, test, true);
}

public static Graphedge_c getOneDIM_EDOnR321(ModelRoot modelRoot, Graphconnector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_EDOnR321(modelRoot,target,test);
}
private static Graphedge_c find_getOneDIM_EDOnR321(ModelRoot modelRoot, Graphconnector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_EdgeGraphedgeEdge_R321) {
	    for ( int i = 0; i < target.backPointer_EdgeGraphedgeEdge_R321.size(); ++i ) {
	      Graphedge_c source = (Graphedge_c)target.backPointer_EdgeGraphedgeEdge_R321.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c [] targets)
{
  return getManyDIM_EDsOnR321(targets, null);
}
public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c [] targets, boolean loadComponent)
{
  return getManyDIM_EDsOnR321(targets, null, loadComponent);
}
public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR321(targets, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Graphedge_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_EdgeGraphedgeEdge_R321) {
	    for (int j = 0; j < targets[i].backPointer_EdgeGraphedgeEdge_R321.size(); ++j) {
	      Graphedge_c source = (Graphedge_c)targets[i].backPointer_EdgeGraphedgeEdge_R321.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Graphedge_c[] ret_set = new Graphedge_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Graphedge_c[0];
  }
  }

public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c target)
{
  return getManyDIM_EDsOnR321(target, null);
}

public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c target, boolean loadComponent)
{
  return getManyDIM_EDsOnR321(target, null, loadComponent);
}

public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c target, ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR321(target, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR321(Graphconnector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Graphedge_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_EdgeGraphedgeEdge_R321) {
    for (int i = 0; i < target.backPointer_EdgeGraphedgeEdge_R321.size(); ++i) {
      Graphedge_c source = (Graphedge_c)target.backPointer_EdgeGraphedgeEdge_R321.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Graphedge_c[] ret_set = new Graphedge_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Graphedge_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Waypoint_c> backPointer_WaypointWaypointWaypoint_R319 = new ArrayList<Waypoint_c>();

public void setWaypointOrderInChildListR319(Waypoint_c target, int index) {
	unrelateAcrossR319From(target);
	Waypoint_c[] elements = Waypoint_c.getManyDIM_WAYsOnR319(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR319From((Waypoint_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR319To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR319To((Waypoint_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR319To(Waypoint_c target)
{
  if (target != null) {
    target.relateAcrossR319To(this, true) ;
  }
}

public void relateAcrossR319To(Waypoint_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR319To(this, notifyChanges) ;
  }
}

public void setBackPointerR319To(Waypoint_c target)
{
  	synchronized (backPointer_WaypointWaypointWaypoint_R319) {
		backPointer_WaypointWaypointWaypoint_R319.add(target);
	}
}

public void unrelateAcrossR319From(Waypoint_c target)
{
  if (target != null) {
    target.unrelateAcrossR319From(this, true) ;
  }
}

public void unrelateAcrossR319From(Waypoint_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR319From(this, notifyChanges) ;
  }
}

public void clearBackPointerR319To(Waypoint_c target)
{
  synchronized (backPointer_WaypointWaypointWaypoint_R319) {
	    backPointer_WaypointWaypointWaypoint_R319.remove(target);
	}
}

public static Graphedge_c getOneDIM_EDOnR319(Waypoint_c [] targets)
{
    return getOneDIM_EDOnR319(targets, null);
}

public static Graphedge_c getOneDIM_EDOnR319(Waypoint_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_EDOnR319(targets, test, true);
}

public static Graphedge_c getOneDIM_EDOnR319(Waypoint_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphedge_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphedge_c candidate_val = getOneDIM_EDOnR319(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_EDOnR319(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphedge_c getOneDIM_EDOnR319(Waypoint_c target)
{
	return getOneDIM_EDOnR319(target, true);
}
public static Graphedge_c getOneDIM_EDOnR319(Waypoint_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.EdgeGraphedge ;
  } else {
    return null;
  }
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR319(targets, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphedge_c[0];
  
  
  LinkedHashSet<Graphedge_c> elementsSet = new LinkedHashSet<Graphedge_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].EdgeGraphedge == null)
	  targets[i].loadProxy();
    Graphedge_c associate = targets[i].EdgeGraphedge;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphedge_c[] result = new Graphedge_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c [] targets)
{
  return getManyDIM_EDsOnR319(targets, null);
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyDIM_EDsOnR319(targetArray, test, loadComponent);
  } else {
    Graphedge_c [] result = new Graphedge_c [0] ;
    return result ;
  }
  
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_EDsOnR319(target, null, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c target)
{
    return getManyDIM_EDsOnR319(target, null, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR319(Waypoint_c target, boolean loadComponent)
{
    return getManyDIM_EDsOnR319(target, null, loadComponent);
}


    
  
  
// referred to navigation

Connector_c backPointer_IsSubtypeConnectorIsSubtype_R20;

public void setConnectorOrderInChildListR20(Connector_c target, int index) {
	unrelateAcrossR20From(target);
	Connector_c[] elements = Connector_c.getManyGD_CONsOnR20(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR20From((Connector_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR20To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR20To((Connector_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR20To(Connector_c target)
{
  if (target != null) {
    target.relateAcrossR20To(this, true) ;
  }
}

public void relateAcrossR20To(Connector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR20To(this, notifyChanges) ;
  }
}

public void setBackPointerR20To(Connector_c target)
{
    backPointer_IsSubtypeConnectorIsSubtype_R20 = target;
}

public void unrelateAcrossR20From(Connector_c target)
{
  if (target != null) {
    target.unrelateAcrossR20From(this, true) ;
  }
}

public void unrelateAcrossR20From(Connector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR20From(this, notifyChanges) ;
  }
}

public void clearBackPointerR20To(Connector_c target)
{
	if (target == backPointer_IsSubtypeConnectorIsSubtype_R20) {
		backPointer_IsSubtypeConnectorIsSubtype_R20 = null;
	}
}

public static Graphedge_c getOneDIM_EDOnR20(Connector_c [] targets)
{
    return getOneDIM_EDOnR20(targets, null);
}

public static Graphedge_c getOneDIM_EDOnR20(Connector_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_EDOnR20(targets, test, true);
}

public static Graphedge_c getOneDIM_EDOnR20(Connector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphedge_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphedge_c candidate_val = getOneDIM_EDOnR20(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_EDOnR20(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphedge_c getOneDIM_EDOnR20(Connector_c target)
{
	return getOneDIM_EDOnR20(target, true);
}
public static Graphedge_c getOneDIM_EDOnR20(Connector_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeGraphedge ;
  } else {
    return null;
  }
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_EDsOnR20(targets, test, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphedge_c[0];
  
  
  LinkedHashSet<Graphedge_c> elementsSet = new LinkedHashSet<Graphedge_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphedge == null)
	  targets[i].loadProxy();
    Graphedge_c associate = targets[i].IsSupertypeGraphedge;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphedge_c[] result = new Graphedge_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c [] targets)
{
  return getManyDIM_EDsOnR20(targets, null);
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Connector_c [] targetArray = new Connector_c[1];
    targetArray[0] = target;
    return getManyDIM_EDsOnR20(targetArray, test, loadComponent);
  } else {
    Graphedge_c [] result = new Graphedge_c [0] ;
    return result ;
  }
  
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_EDsOnR20(target, null, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c target)
{
    return getManyDIM_EDsOnR20(target, null, true);
}

public static Graphedge_c [] getManyDIM_EDsOnR20(Connector_c target, boolean loadComponent)
{
    return getManyDIM_EDsOnR20(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R301
      Graphelement_c relInst21826 = (Graphelement_c) baseRoot.getInstanceList(Graphelement_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21826 == null) {
      			relInst21826 = (Graphelement_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphelement_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst21826 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21826) && !isProxy())) {
	      relInst21826.relateAcrossR301To(this, notifyChanges);
	  }
	  }
	          

	if (AnchorForFirstWaypointGraphconnector == null) {          
      // R320
      Graphconnector_c relInst21827 = (Graphconnector_c) baseRoot.getInstanceList(Graphconnector_c.class).get(new Object[] {m_first_conid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21827 == null) {
      			relInst21827 = (Graphconnector_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphconnector_c.class).get(new Object[] {m_first_conid});
      		}
			//synchronized
      if ( relInst21827 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21827) && !isProxy())) {
	      relInst21827.relateAcrossR320To(this, notifyChanges);
	  }
	  }
	}
	          

	if (AnchorForLastWaypointGraphconnector == null) {          
      // R321
      Graphconnector_c relInst21828 = (Graphconnector_c) baseRoot.getInstanceList(Graphconnector_c.class).get(new Object[] {m_last_conid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21828 == null) {
      			relInst21828 = (Graphconnector_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphconnector_c.class).get(new Object[] {m_last_conid});
      		}
			//synchronized
      if ( relInst21828 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21828) && !isProxy())) {
	      relInst21828.relateAcrossR321To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R301
      // DIM_GE
		  inst=IsSupertypeGraphelement;
			unrelateAcrossR301From(IsSupertypeGraphelement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R320
      // DIM_CON
		  inst=AnchorForFirstWaypointGraphconnector;
			unrelateAcrossR320From(AnchorForFirstWaypointGraphconnector, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R321
      // DIM_CON
		  inst=AnchorForLastWaypointGraphconnector;
			unrelateAcrossR321From(AnchorForLastWaypointGraphconnector, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Graphedge_c inst = (Graphedge_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Graphedge_c GraphedgeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Graphedge_c result=findGraphedgeInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Graphedge_c findGraphedgeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Graphedge_c x = (Graphedge_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Graphedge_c GraphedgeInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return GraphedgeInstance(modelRoot,test,true);
  }
  
  public static Graphedge_c GraphedgeInstance(ModelRoot modelRoot)
  {
	 return GraphedgeInstance(modelRoot,null,true);
  }

  public static Graphedge_c [] GraphedgeInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Graphedge_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Graphedge_c x = (Graphedge_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Graphedge_c[] ret_set = new Graphedge_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Graphedge_c[0];
			}		
		} 
  }
  public static Graphedge_c [] GraphedgeInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  GraphedgeInstances(modelRoot,test,true);
  }
  public static Graphedge_c [] GraphedgeInstances(ModelRoot modelRoot)
  {
	return GraphedgeInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the GraphEdge.dispose call: ";
	Waypoint_c testR319Inst = Waypoint_c.getOneDIM_WAYOnR319(this, false);

	if ( testR319Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "319 ";	
	}
	Graphelement_c testR301Inst2 = Graphelement_c.getOneDIM_GEOnR301(this, false);

	if ( testR301Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "301 ";
	}
	Graphconnector_c testR320Inst = Graphconnector_c.getOneDIM_CONOnR320(this, false);

	if ( testR320Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "320 ";
	}
	Graphconnector_c testR321Inst = Graphconnector_c.getOneDIM_CONOnR321(this, false);

	if ( testR321Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "321 ";
	}
	Connector_c testR20Inst1 = Connector_c.getOneGD_CONOnR20(this, false);

	if ( testR20Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "20 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "GraphEdge", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("first_conid")){
         return true;
      }
      if(attributeName.equals("last_conid")){
         return true;
      }
      if(attributeName.equals("elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getFirst_conidLongBased()
  {
    if ( AnchorForFirstWaypointGraphconnector != null )
    {
      return AnchorForFirstWaypointGraphconnector.getConidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getFirst_conid()
  {
    if ( AnchorForFirstWaypointGraphconnector != null )
    {
      return AnchorForFirstWaypointGraphconnector.getConid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getFirst_conidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_first_conid) )
      return m_first_conid;
    else
      return getFirst_conid();
  }
  
  public void setFirst_conid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_first_conid)){
	        return;
	    }
	}else if(m_first_conid != null){
	    if(m_first_conid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "First_conid", m_first_conid, newValue,true); 
   m_first_conid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getLast_conidLongBased()
  {
    if ( AnchorForLastWaypointGraphconnector != null )
    {
      return AnchorForLastWaypointGraphconnector.getConidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getLast_conid()
  {
    if ( AnchorForLastWaypointGraphconnector != null )
    {
      return AnchorForLastWaypointGraphconnector.getConid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getLast_conidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_last_conid) )
      return m_last_conid;
    else
      return getLast_conid();
  }
  
  public void setLast_conid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_last_conid)){
	        return;
	    }
	}else if(m_last_conid != null){
	    if(m_last_conid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Last_conid", m_last_conid, newValue,true); 
   m_last_conid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if ( IsSupertypeGraphelement != null )
    {
      return IsSupertypeGraphelement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( IsSupertypeGraphelement != null )
    {
      return IsSupertypeGraphelement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeGraphelement != null );
 
 }                  

  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public void setElementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_elementid)){
	        return;
	    }
	}else if(m_elementid != null){
	    if(m_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Elementid", m_elementid, newValue,true); 
   m_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "GraphEdge", //$NON-NLS-1$
	  " Operation entered: GraphEdge::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Graphedge_c [] objs = Graphedge_c.GraphedgeInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "GraphEdge", //$NON-NLS-1$
	  " Operation entered: GraphEdge::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Graphedge_c_test21830_c implements ClassQueryInterface_c
    {
	  Graphedge_c_test21830_c( java.util.UUID            p21831 ) {
	  m_p21831 = p21831;
	  }
	  private java.util.UUID             m_p21831; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphedge_c selected = (Graphedge_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21831));
	      return retval;
	  }
    }

    Graphedge_c [] objs21829 = 
    Graphedge_c.GraphedgeInstances(modelRoot, new Graphedge_c_test21830_c(getElementid())) ;

    if ( (  (objs21829.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21829.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21829.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21829.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21829.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21829.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // GraphEdge is a referring class in association: rel.Numb = 320
          // The participating class is: GraphConnector
    class Graphconnector_c_test21835_c implements ClassQueryInterface_c
    {
	  Graphconnector_c_test21835_c( java.util.UUID            p21836 ) {
	  m_p21836 = p21836;
	  }
	  private java.util.UUID             m_p21836; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphconnector_c selected = (Graphconnector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConid().equals(m_p21836));
	      return retval;
	  }
    }

    Graphconnector_c [] objs21834 = 
    Graphconnector_c.GraphconnectorInstances(modelRoot, new Graphconnector_c_test21835_c(getFirst_conid())) ;

    if ( (  (objs21834.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Association: 320: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21834.length )  + " first_conId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Association: 320: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21834.length )  + " first_conId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // GraphEdge is a referring class in association: rel.Numb = 321
          // The participating class is: GraphConnector
    class Graphconnector_c_test21838_c implements ClassQueryInterface_c
    {
	  Graphconnector_c_test21838_c( java.util.UUID            p21839 ) {
	  m_p21839 = p21839;
	  }
	  private java.util.UUID             m_p21839; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphconnector_c selected = (Graphconnector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConid().equals(m_p21839));
	      return retval;
	  }
    }

    Graphconnector_c [] objs21837 = 
    Graphconnector_c.GraphconnectorInstances(modelRoot, new Graphconnector_c_test21838_c(getLast_conid())) ;

    if ( (  (objs21837.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Association: 321: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21837.length )  + " last_conId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Association: 321: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21837.length )  + " last_conId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // GraphEdge is a subtype in association: rel.Numb = 301
          // The supertype class is: GraphElement
    class Graphelement_c_test21841_c implements ClassQueryInterface_c
    {
	  Graphelement_c_test21841_c( java.util.UUID            p21842 ) {
	  m_p21842 = p21842;
	  }
	  private java.util.UUID             m_p21842; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphelement_c selected = (Graphelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21842));
	      return retval;
	  }
    }

    Graphelement_c [] objs21840 = 
    Graphelement_c.GraphelementInstances(modelRoot, new Graphelement_c_test21841_c(getElementid())) ;

    if ( (  (objs21840.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Association: 301: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21840.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Association: 301: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21840.length )  , e); 
      }
      retval = false;

    }

          // GraphEdge is a participating class in association: rel.Numb = 319
             // Object: Waypoint
    class Waypoint_c_test21844_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test21844_c( java.util.UUID            p21845 ) {
	  m_p21845 = p21845;
	  }
	  private java.util.UUID             m_p21845; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEdge_elementid().equals(m_p21845));
	      return retval;
	  }
    }

    Waypoint_c [] objs21843 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test21844_c(getElementid())) ;

    if ( (  (objs21843.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Association: 319: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21843.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Association: 319: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21843.length )  , e); 
      }
      retval = false;

    }
                
          // Supertype: rel.Numb = 20
    int objs21846 = 0;
            // Subtype Object: Connector
    class Connector_c_test21847_c implements ClassQueryInterface_c
    {
	  Connector_c_test21847_c( java.util.UUID            p21848 ) {
	  m_p21848 = p21848;
	  }
	  private java.util.UUID             m_p21848; 
	  public boolean evaluate (Object candidate)
	  {
	      Connector_c selected = (Connector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21848));
	      return retval;
	  }
    }

    Connector_c [] objs21849 = 
    Connector_c.ConnectorInstances(modelRoot, new Connector_c_test21847_c(getElementid())) ;
 
    objs21846 = objs21846 + objs21849.length;
    if ( objs21846 != 1 )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphEdge", //$NON-NLS-1$
           "Consistency: Object: GraphEdge: Association: 20: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21846 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphEdge: Association: 20: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21846 )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "GraphEdge", " Operation entered: Graphedge::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphelement_c v_parent = Graphelement_c.getOneDIM_GEOnR301(this);


if ( (  (v_parent != null)) )
{

if (v_parent != null) {
v_parent.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Graphconnector_c v_connector1 = Graphconnector_c.getOneDIM_CONOnR320(this);


this.unrelateAcrossR320From(v_connector1);


Graphconnector_c v_connector2 = Graphconnector_c.getOneDIM_CONOnR321(this);


this.unrelateAcrossR321From(v_connector2);


Waypoint_c [] v_way_set = Waypoint_c.getManyDIM_WAYsOnR319(this);


Waypoint_c  v_way = null;
for ( int i21303 = 0; i21303 < v_way_set.length; i21303++)
{
  v_way = v_way_set[i21303] ;

this.unrelateAcrossR319From(v_way);


if (v_way != null) {
v_way.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Connector_c v_gd_con = Connector_c.getOneGD_CONOnR20(this);


if ( (  (v_gd_con != null)) )
{

this.unrelateAcrossR20From(v_gd_con);


GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(v_gd_con);


if ( (  (v_ge != null)) )
{

if (v_ge != null) {
v_ge.unrelateAcrossR2From(v_gd_con);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_ge != null) {
v_ge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if (v_gd_con != null) {
v_gd_con.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Setconnectorposition(final java.util.UUID         p_Endingwaypointid,final float        p_Percentofedgelength,final int  p_Shapeedge,final java.util.UUID         p_Shapeid,final boolean      p_Start,final java.util.UUID         p_Startingwaypointid)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "GraphEdge", " Operation entered: Graphedge::Setconnectorposition") ; 
               final ModelRoot modelRoot = getModelRoot();
  class Waypoint_test21522_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Waypoint_c selected = (Waypoint_c)candidate;
		return (selected.getWay_id().equals(p_Startingwaypointid)) ;
	}
  }
Waypoint_c v_startWaypoint = Waypoint_c.getOneDIM_WAYOnR319(this, new Waypoint_test21522_c());


  class Waypoint_test21523_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Waypoint_c selected = (Waypoint_c)candidate;
		return (selected.getWay_id().equals(p_Endingwaypointid)) ;
	}
  }
Waypoint_c v_endWaypoint = Waypoint_c.getOneDIM_WAYOnR319(this, new Waypoint_test21523_c());


Diagramelement_c v_diaEle = (Diagramelement_c) modelRoot.getInstanceList(Diagramelement_c.class).getGlobal(null, p_Shapeid);


Graphelement_c v_shapeGraphEle = Graphelement_c.getOneDIM_GEOnR302(v_diaEle);


Graphnode_c v_shapeNode = Graphnode_c.getOneDIM_NDOnR301(v_shapeGraphEle);


int          v_startPointX = 0 ;


int          v_startPointY = 0 ;


int          v_endPointX = 0 ;


int          v_endPointY = 0 ;


boolean      v_start = p_Start ;


if ( (p_Shapeedge == Direction_c.North) )
{

if ( (v_start) )
{

v_startPointX = (int)(v_shapeGraphEle.getPositionx() + (v_shapeNode.getWidth() * p_Percentofedgelength)) ;


v_startPointY = (int)(v_shapeGraphEle.getPositiony()) ;


v_endPointX = v_startPointX ;


v_endPointY = v_startPointY - 75 ;



}

else
{

v_endPointX = (int)(v_shapeGraphEle.getPositionx() + (v_shapeNode.getWidth() * p_Percentofedgelength)) ;


v_endPointY = (int)(v_shapeGraphEle.getPositiony()) ;


v_startPointX = v_endPointX ;


v_startPointY = v_endPointY - 75 ;



}


}

else if ( (p_Shapeedge == Direction_c.South) )
{

if ( (v_start) )
{

v_startPointX = (int)(v_shapeGraphEle.getPositionx() + (v_shapeNode.getWidth() * p_Percentofedgelength)) ;


v_startPointY = (int)(v_shapeGraphEle.getPositiony() + v_shapeNode.getHeight()) ;


v_endPointX = v_startPointX ;


v_endPointY = v_startPointY + 75 ;



}

else
{

v_endPointX = (int)(v_shapeGraphEle.getPositionx() + (v_shapeNode.getWidth() * p_Percentofedgelength)) ;


v_endPointY = (int)(v_shapeGraphEle.getPositiony() + v_shapeNode.getHeight()) ;


v_startPointX = v_endPointX ;


v_startPointY = v_endPointY + 75 ;



}


}

else if ( (p_Shapeedge == Direction_c.West) )
{

if ( (v_start) )
{

v_startPointX = (int)(v_shapeGraphEle.getPositionx()) ;


v_startPointY = (int)(v_shapeGraphEle.getPositiony() + (v_shapeNode.getHeight() * p_Percentofedgelength)) ;


v_endPointX = v_startPointX - 75 ;


v_endPointY = v_startPointY ;



}

else
{

v_endPointX = (int)(v_shapeGraphEle.getPositionx()) ;


v_endPointY = (int)(v_shapeGraphEle.getPositiony() + (v_shapeNode.getHeight() * p_Percentofedgelength)) ;


v_startPointX = v_endPointX - 75 ;


v_startPointY = v_endPointY ;



}


}

else if ( (p_Shapeedge == Direction_c.East) )
{

if ( (v_start) )
{

v_startPointX = (int)(v_shapeGraphEle.getPositionx() + v_shapeNode.getWidth()) ;


v_startPointY = (int)(v_shapeGraphEle.getPositiony() + (v_shapeNode.getHeight() * p_Percentofedgelength)) ;


v_endPointX = v_startPointX + 75 ;


v_endPointY = v_startPointY ;



}

else
{

v_endPointX = (int)(v_shapeGraphEle.getPositionx() + v_shapeNode.getWidth()) ;


v_endPointY = (int)(v_shapeGraphEle.getPositiony() + (v_shapeNode.getHeight() * p_Percentofedgelength)) ;


v_startPointX = v_endPointX + 75 ;


v_startPointY = v_endPointY ;



}


}

if ( (p_Shapeedge != Direction_c.None) )
{

Shape_c v_shape = Shape_c.getOneGD_SHPOnR19(v_shapeNode);


java.util.UUID         v_startSnapPointId = v_shape.Getnearestgridsnappointonedge(			    
v_startPointX			    
,v_startPointY) ;


java.util.UUID         v_endSnapPointId = v_shape.Getnearestgridsnappointonedge(			    
v_endPointX			    
,v_endPointY) ;


Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(Point_c.class).getGlobal(null, v_startSnapPointId);


v_startPointX = (int)(v_snapPoint.getX()) ;


v_startPointY = (int)(v_snapPoint.getY()) ;


v_snapPoint = (Point_c) modelRoot.getInstanceList(Point_c.class).getGlobal(null, v_endSnapPointId);


v_endPointX = (int)(v_snapPoint.getX()) ;


v_endPointY = (int)(v_snapPoint.getY()) ;


Graphconnector_c v_anchor = new Graphconnector_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_anchor));


if (v_anchor != null) {
  v_anchor.relateAcrossR311To(v_shapeGraphEle);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphelement_c v_containerGE = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(v_shapeGraphEle));


if ( (  (v_containerGE != null)) )
{

if (v_diaEle != null) {
  v_diaEle.relateAcrossR307To(v_containerGE);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( (v_start) )
{

if (v_startWaypoint != null) {
  v_startWaypoint.setPositionx( v_startPointX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_startWaypoint != null) {
  v_startWaypoint.setPositiony( v_startPointY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_endWaypoint != null) {
  v_endWaypoint.setPositionx( v_endPointX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_endWaypoint != null) {
  v_endWaypoint.setPositiony( v_endPointY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else
{

if (v_endWaypoint != null) {
  v_endWaypoint.setPositionx( v_startPointX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_endWaypoint != null) {
  v_endWaypoint.setPositiony( v_startPointY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_startWaypoint != null) {
  v_startWaypoint.setPositionx( v_endPointX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_startWaypoint != null) {
  v_startWaypoint.setPositiony( v_endPointY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if (v_anchor != null) {
  v_anchor.setPositionx( v_startWaypoint.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_anchor != null) {
  v_anchor.setPositiony( v_startWaypoint.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


  this.relateAcrossR320To(v_anchor);



}


   } // End setConnectorPosition

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end GraphEdge
