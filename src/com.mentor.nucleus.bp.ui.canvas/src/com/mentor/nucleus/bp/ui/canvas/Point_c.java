package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Point_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_POINT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Point_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Point_c(ModelRoot modelRoot, java.util.UUID p_m_pointid,
			float p_m_x, float p_m_y) {
		super(modelRoot);
		m_x = p_m_x;
		m_y = p_m_y;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_pointid = IdAssigner.preprocessUUID(p_m_pointid);
		//extract 28 bit value only            
		m_pointidLongBased = 0xfffffff & p_m_pointid.getLeastSignificantBits();

		setUniqueId(m_pointid);
		Object[] key = {m_pointid};
		addInstanceToMap(key);
	}
	static public Point_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_pointid, float p_m_x, float p_m_y,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Point_c.class);
		Point_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_pointid};
			new_inst = (Point_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_x = p_m_x;
				new_inst.m_y = p_m_y;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_pointid = IdAssigner.preprocessUUID(p_m_pointid);
				//extract 28 bit value only            
				new_inst.m_pointidLongBased = 0xfffffff & p_m_pointid
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Point_c(modelRoot, p_m_pointid, p_m_x, p_m_y);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Point_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_pointid, float p_m_x, float p_m_y) {
		InstanceList instances = modelRoot.getInstanceList(Point_c.class);
		Point_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_pointid};
			source = (Point_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_x = p_m_x;
				source.m_y = p_m_y;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_pointid = IdAssigner.preprocessUUID(p_m_pointid);
				//extract 28 bit value only            
				source.m_pointidLongBased = 0xfffffff & p_m_pointid
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		Point_c new_inst = new Point_c(modelRoot, p_m_pointid, p_m_x, p_m_y);
		return new_inst;
	}
	public Point_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_pointid = idAssigner.createUUID();
		setUniqueId(m_pointid);
		Object[] key = {m_pointid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_pointid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_pointid != p_newKey) {

			m_pointid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Point_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Point_c)) {
			return false;
		}

		Point_c me = (Point_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getPointid()) || IdAssigner.NULL_UUID
						.equals(((Point_c) elem).getPointid())) && this != elem)) {
			return false;
		}
		if (!getPointid().equals(((Point_c) elem).getPointid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Point_c)) {
			return false;
		}

		Point_c me = (Point_c) elem;
		if (!getPointid().equals(((Point_c) elem).getPointid()))
			return false;
		return true;
	}

	// Attributes
	private float m_x;
	private float m_y;
	private java.util.UUID m_pointid;
	private long m_pointidLongBased;

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
	}
	public void batchUnrelate(boolean notifyChanges) {
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots, boolean relateProxies) {

		// class has no referential attributes

	}

	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Point_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Point_c PointInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Point_c result = findPointInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Point_c findPointInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Point_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Point_c x = (Point_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Point_c PointInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return PointInstance(modelRoot, test, true);
	}

	public static Point_c PointInstance(ModelRoot modelRoot) {
		return PointInstance(modelRoot, null, true);
	}

	public static Point_c[] PointInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Point_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Point_c x = (Point_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Point_c[] ret_set = new Point_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Point_c[0];
			}
		}
	}
	public static Point_c[] PointInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return PointInstances(modelRoot, test, true);
	}
	public static Point_c[] PointInstances(ModelRoot modelRoot) {
		return PointInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Point.dispose call: ";
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Point", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("pointid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public float getX() {
		return m_x;
	}

	public void setX(float newValue) {
		if (m_x == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "X",
				new Float(m_x), new Float(newValue), false);

		m_x = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getY() {
		return m_y;
	}

	public void setY(float newValue) {
		if (m_y == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Y",
				new Float(m_y), new Float(newValue), false);

		m_y = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getPointidLongBased() {
		if (m_pointidLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_pointid)) {
			return 0xfffffff & m_pointid.getLeastSignificantBits();
		}
		return m_pointidLongBased;
	}
	public java.util.UUID getPointid() {
		return m_pointid;
	}

	public void setPointid(java.util.UUID newValue) {
		m_pointid = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Point", //$NON-NLS-1$
				" Operation entered: Point::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Point_c[] objs = Point_c.PointInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Point", //$NON-NLS-1$
				" Operation entered: Point::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Point_c_test21739_c implements ClassQueryInterface_c {
			Point_c_test21739_c(java.util.UUID p21740) {
				m_p21740 = p21740;
			}
			private java.util.UUID m_p21740;
			public boolean evaluate(Object candidate) {
				Point_c selected = (Point_c) candidate;
				boolean retval = false;
				retval = (selected.getPointid().equals(m_p21740));
				return retval;
			}
		}

		Point_c[] objs21738 = Point_c.PointInstances(modelRoot,
				new Point_c_test21739_c(getPointid()));

		if (((objs21738.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Point", //$NON-NLS-1$
								"Consistency: Object: Point: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21738.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Point: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21738.length), e);
			}
			retval = false;

		}

		if (((objs21738.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Point", //$NON-NLS-1$
						"Consistency: Object: Point: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs21738.length)
								+ " pointId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Point: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21738.length)
								+ " pointId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Point
