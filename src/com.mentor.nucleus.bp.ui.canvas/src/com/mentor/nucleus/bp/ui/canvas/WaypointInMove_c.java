package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.WaypointInMove_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_WAYPOINT_IN_MOVE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class WaypointInMove_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public WaypointInMove_c(ModelRoot modelRoot, java.util.UUID p_m_way_id,
			java.util.UUID p_m_diagramid, int p_m_originx, int p_m_originy) {
		super(modelRoot);
		m_originx = p_m_originx;
		m_originy = p_m_originy;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_way_id = IdAssigner.preprocessUUID(p_m_way_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

		Object[] key = {m_way_id, m_diagramid};
		addInstanceToMap(key);
	}
	static public WaypointInMove_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_way_id, java.util.UUID p_m_diagramid,
			int p_m_originx, int p_m_originy, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);
		WaypointInMove_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_way_id, p_m_diagramid};
			new_inst = (WaypointInMove_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_originx = p_m_originx;
				new_inst.m_originy = p_m_originy;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_way_id = IdAssigner.preprocessUUID(p_m_way_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new WaypointInMove_c(modelRoot, p_m_way_id,
					p_m_diagramid, p_m_originx, p_m_originy);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public WaypointInMove_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_way_id, java.util.UUID p_m_diagramid,
			int p_m_originx, int p_m_originy) {
		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);
		WaypointInMove_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_way_id, p_m_diagramid};
			source = (WaypointInMove_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_originx = p_m_originx;
				source.m_originy = p_m_originy;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_way_id = IdAssigner.preprocessUUID(p_m_way_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

				return source;
			}
		}
		// there is no instance matching the id
		WaypointInMove_c new_inst = new WaypointInMove_c(modelRoot, p_m_way_id,
				p_m_diagramid, p_m_originx, p_m_originy);
		return new_inst;
	}
	public WaypointInMove_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_way_id = IdAssigner.NULL_UUID;
		m_diagramid = IdAssigner.NULL_UUID;
		Object[] key = {m_way_id, m_diagramid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_way_id, m_diagramid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_way_id != p_newKey) {

			m_way_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof WaypointInMove_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof WaypointInMove_c)) {
			return false;
		}

		WaypointInMove_c me = (WaypointInMove_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getWay_id()) || IdAssigner.NULL_UUID
						.equals(((WaypointInMove_c) elem).getWay_id())) && this != elem)) {
			return false;
		}
		if (!getWay_id().equals(((WaypointInMove_c) elem).getWay_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDiagramid()) || IdAssigner.NULL_UUID
						.equals(((WaypointInMove_c) elem).getDiagramid())) && this != elem)) {
			return false;
		}
		if (!getDiagramid().equals(((WaypointInMove_c) elem).getDiagramid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof WaypointInMove_c)) {
			return false;
		}

		WaypointInMove_c me = (WaypointInMove_c) elem;
		if (!getWay_idCachedValue().equals(
				((WaypointInMove_c) elem).getWay_idCachedValue()))
			return false;
		if (!getDiagramidCachedValue().equals(
				((WaypointInMove_c) elem).getDiagramidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private int m_originx;
	private int m_originy;
	private java.util.UUID m_way_id;
	private java.util.UUID m_diagramid;

	// declare association references from this class

	// referring navigation

	Model_c IsMovedByModel;
	public void relateAcrossR24To(Model_c target) {
		relateAcrossR24To(target, true);
	}
	public void relateAcrossR24To(Model_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsMovedByModel)
			return; // already related

		if (IsMovedByModel != target) {

			Object oldKey = getInstanceKey();

			if (IsMovedByModel != null) {

				IsMovedByModel.clearBackPointerR24To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"WaypointInMove_c.relateAcrossR24To(Model_c target)",
									"Relate performed across R24 from Waypoint In Move to Model without unrelate of prior instance.");
				}
			}

			IsMovedByModel = target;
			if (IdAssigner.NULL_UUID.equals(target.getDiagramid())) {
				// do not update cached value
			} else {
				// update cached value
				m_diagramid = target.getDiagramidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR24To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "24", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR24From(Model_c target) {
		unrelateAcrossR24From(target, true);
	}
	public void unrelateAcrossR24From(Model_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsMovedByModel == null)
			return; // already unrelated

		if (target != IsMovedByModel) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R24",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR24To(this);
		}

		if (IsMovedByModel != null) {

			m_diagramid = IsMovedByModel.getDiagramid();
			if (IdAssigner.NULL_UUID.equals(m_diagramid)) {
				m_diagramid = IsMovedByModel.getDiagramidCachedValue();
			}
			IsMovedByModel = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "24", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	// referring navigation

	Waypoint_c IsMovingWaypoint;
	public void relateAcrossR24To(Waypoint_c target) {
		relateAcrossR24To(target, true);
	}
	public void relateAcrossR24To(Waypoint_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsMovingWaypoint)
			return; // already related

		if (IsMovingWaypoint != target) {

			Object oldKey = getInstanceKey();

			if (IsMovingWaypoint != null) {

				IsMovingWaypoint.clearBackPointerR24To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"WaypointInMove_c.relateAcrossR24To(Waypoint_c target)",
									"Relate performed across R24 from Waypoint In Move to Waypoint without unrelate of prior instance.");
				}
			}

			IsMovingWaypoint = target;
			m_way_id = target.getWay_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR24To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "24", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR24From(Waypoint_c target) {
		unrelateAcrossR24From(target, true);
	}
	public void unrelateAcrossR24From(Waypoint_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsMovingWaypoint == null)
			return; // already unrelated

		if (target != IsMovingWaypoint) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R24",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR24To(this);
		}

		if (IsMovingWaypoint != null) {

			m_way_id = IsMovingWaypoint.getWay_id();
			IsMovingWaypoint = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "24", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Model_c[] targets) {
		return getOneGD_WIMOnR24(targets, null);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Model_c[] targets,
			ClassQueryInterface_c test) {
		WaypointInMove_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_WIMOnR24(targets[i], test);
			}
		}

		return ret_val;
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Model_c target) {
		return getOneGD_WIMOnR24(target, null);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Model_c target,
			boolean loadComponent) {
		return getOneGD_WIMOnR24(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Model_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_WIMOnR24(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test) {
		return getOneGD_WIMOnR24(modelRoot, target, test, true);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneGD_WIMOnR24(modelRoot, target, test);
	}
	private static WaypointInMove_c find_getOneGD_WIMOnR24(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsMovingWaypointInMoveIsMoving_R24) {
				for (int i = 0; i < target.backPointer_IsMovingWaypointInMoveIsMoving_R24
						.size(); ++i) {
					WaypointInMove_c source = (WaypointInMove_c) target.backPointer_IsMovingWaypointInMoveIsMoving_R24
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c[] targets) {
		return getManyGD_WIMsOnR24(targets, null);
	}
	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c[] targets,
			boolean loadComponent) {
		return getManyGD_WIMsOnR24(targets, null, loadComponent);
	}
	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_WIMsOnR24(targets, test, true);
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new WaypointInMove_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsMovingWaypointInMoveIsMoving_R24) {
				for (int j = 0; j < targets[i].backPointer_IsMovingWaypointInMoveIsMoving_R24
						.size(); ++j) {
					WaypointInMove_c source = (WaypointInMove_c) targets[i].backPointer_IsMovingWaypointInMoveIsMoving_R24
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			WaypointInMove_c[] ret_set = new WaypointInMove_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new WaypointInMove_c[0];
		}
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c target) {
		return getManyGD_WIMsOnR24(target, null);
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c target,
			boolean loadComponent) {
		return getManyGD_WIMsOnR24(target, null, loadComponent);
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c target,
			ClassQueryInterface_c test) {
		return getManyGD_WIMsOnR24(target, test, true);
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Model_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new WaypointInMove_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsMovingWaypointInMoveIsMoving_R24) {
			for (int i = 0; i < target.backPointer_IsMovingWaypointInMoveIsMoving_R24
					.size(); ++i) {
				WaypointInMove_c source = (WaypointInMove_c) target.backPointer_IsMovingWaypointInMoveIsMoving_R24
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			WaypointInMove_c[] ret_set = new WaypointInMove_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new WaypointInMove_c[0];
		}
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Waypoint_c[] targets) {
		return getOneGD_WIMOnR24(targets, null);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Waypoint_c[] targets,
			ClassQueryInterface_c test) {
		WaypointInMove_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_WIMOnR24(targets[i], test);
			}
		}

		return ret_val;
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Waypoint_c target) {
		return getOneGD_WIMOnR24(target, null);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Waypoint_c target,
			boolean loadComponent) {
		return getOneGD_WIMOnR24(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(Waypoint_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_WIMOnR24(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(ModelRoot modelRoot,
			Waypoint_c target, ClassQueryInterface_c test) {
		return getOneGD_WIMOnR24(modelRoot, target, test, true);
	}

	public static WaypointInMove_c getOneGD_WIMOnR24(ModelRoot modelRoot,
			Waypoint_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneGD_WIMOnR24(modelRoot, target, test);
	}
	private static WaypointInMove_c find_getOneGD_WIMOnR24(ModelRoot modelRoot,
			Waypoint_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsMovedByWaypointInMoveIsMovedBy_R24) {
				for (int i = 0; i < target.backPointer_IsMovedByWaypointInMoveIsMovedBy_R24
						.size(); ++i) {
					WaypointInMove_c source = (WaypointInMove_c) target.backPointer_IsMovedByWaypointInMoveIsMovedBy_R24
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Waypoint_c[] targets) {
		return getManyGD_WIMsOnR24(targets, null);
	}
	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Waypoint_c[] targets,
			boolean loadComponent) {
		return getManyGD_WIMsOnR24(targets, null, loadComponent);
	}
	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Waypoint_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_WIMsOnR24(targets, test, true);
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Waypoint_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new WaypointInMove_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsMovedByWaypointInMoveIsMovedBy_R24) {
				for (int j = 0; j < targets[i].backPointer_IsMovedByWaypointInMoveIsMovedBy_R24
						.size(); ++j) {
					WaypointInMove_c source = (WaypointInMove_c) targets[i].backPointer_IsMovedByWaypointInMoveIsMovedBy_R24
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			WaypointInMove_c[] ret_set = new WaypointInMove_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new WaypointInMove_c[0];
		}
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Waypoint_c target) {
		if (target != null) {
			Waypoint_c[] targetArray = new Waypoint_c[1];
			targetArray[0] = target;
			return getManyGD_WIMsOnR24(targetArray);
		} else {
			WaypointInMove_c[] result = new WaypointInMove_c[0];
			return result;
		}
	}

	public static WaypointInMove_c[] getManyGD_WIMsOnR24(Waypoint_c target,
			boolean loadComponent) {
		if (target != null) {
			Waypoint_c[] targetArray = new Waypoint_c[1];
			targetArray[0] = target;
			return getManyGD_WIMsOnR24(targetArray, loadComponent);
		} else {
			WaypointInMove_c[] result = new WaypointInMove_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R24
		Waypoint_c relInst22099 = (Waypoint_c) baseRoot.getInstanceList(
				Waypoint_c.class).get(new Object[]{m_way_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22099 == null) {
			relInst22099 = (Waypoint_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Waypoint_c.class)
					.get(new Object[]{m_way_id});
		}
		//synchronized
		if (relInst22099 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22099) && !isProxy())) {
				relInst22099.relateAcrossR24To(this, notifyChanges);
			}
		}

		Model_c relInst22100 = (Model_c) baseRoot
				.getInstanceList(Model_c.class).get(new Object[]{m_diagramid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22100 == null) {
			relInst22100 = (Model_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Model_c.class)
					.get(new Object[]{m_diagramid});
		}
		//synchronized
		if (relInst22100 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22100) && !isProxy())) {
				relInst22100.relateAcrossR24To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R24
		// DIM_WAY
		inst = IsMovingWaypoint;
		unrelateAcrossR24From(IsMovingWaypoint, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// GD_MD
		inst = IsMovedByModel;
		unrelateAcrossR24From(IsMovedByModel, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(WaypointInMove_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final WaypointInMove_c inst = (WaypointInMove_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static WaypointInMove_c WaypointInMoveInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		WaypointInMove_c result = findWaypointInMoveInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static WaypointInMove_c findWaypointInMoveInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				WaypointInMove_c x = (WaypointInMove_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static WaypointInMove_c WaypointInMoveInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return WaypointInMoveInstance(modelRoot, test, true);
	}

	public static WaypointInMove_c WaypointInMoveInstance(ModelRoot modelRoot) {
		return WaypointInMoveInstance(modelRoot, null, true);
	}

	public static WaypointInMove_c[] WaypointInMoveInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(WaypointInMove_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				WaypointInMove_c x = (WaypointInMove_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				WaypointInMove_c[] ret_set = new WaypointInMove_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new WaypointInMove_c[0];
			}
		}
	}
	public static WaypointInMove_c[] WaypointInMoveInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return WaypointInMoveInstances(modelRoot, test, true);
	}
	public static WaypointInMove_c[] WaypointInMoveInstances(ModelRoot modelRoot) {
		return WaypointInMoveInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Waypoint In Move.dispose call: ";
		Waypoint_c testR24Inst = Waypoint_c.getOneDIM_WAYOnR24(this, false);

		if (testR24Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "24 ";
		}

		Model_c testR24InstOth = Model_c.getOneGD_MDOnR24(this, false);

		if (testR24InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "24 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Waypoint In Move",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("way_id")) {
			return true;
		}
		if (attributeName.equals("diagramid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public int getOriginx() {
		return m_originx;
	}

	public void setOriginx(int newValue) {
		if (m_originx == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Originx", new Integer(m_originx), new Integer(newValue), false);

		m_originx = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getOriginy() {
		return m_originy;
	}

	public void setOriginy(int newValue) {
		if (m_originy == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Originy", new Integer(m_originy), new Integer(newValue), false);

		m_originy = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getWay_idLongBased() {
		if (IsMovingWaypoint != null) {
			return IsMovingWaypoint.getWay_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getWay_id() {
		if (IsMovingWaypoint != null) {
			return IsMovingWaypoint.getWay_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getWay_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_way_id))
			return m_way_id;
		else
			return getWay_id();
	}

	public void setWay_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_way_id)) {
				return;
			}
		} else if (m_way_id != null) {
			if (m_way_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Way_id", m_way_id, newValue, false);
		m_way_id = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getDiagramidLongBased() {
		if (IsMovedByModel != null) {
			return IsMovedByModel.getDiagramidLongBased();
		}
		return 0;
	}
	public java.util.UUID getDiagramid() {
		if (IsMovedByModel != null) {
			return IsMovedByModel.getDiagramid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDiagramidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_diagramid))
			return m_diagramid;
		else
			return getDiagramid();
	}

	public void setDiagramid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_diagramid)) {
				return;
			}
		} else if (m_diagramid != null) {
			if (m_diagramid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Diagramid", m_diagramid, newValue, false);
		m_diagramid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Waypoint In Move", //$NON-NLS-1$
				" Operation entered: Waypoint In Move::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		WaypointInMove_c[] objs = WaypointInMove_c.WaypointInMoveInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Waypoint In Move", //$NON-NLS-1$
				" Operation entered: Waypoint In Move::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class WaypointInMove_c_test22102_c implements ClassQueryInterface_c {
			WaypointInMove_c_test22102_c(java.util.UUID p22103,
					java.util.UUID p22104) {
				m_p22103 = p22103;
				m_p22104 = p22104;
			}
			private java.util.UUID m_p22103;
			private java.util.UUID m_p22104;
			public boolean evaluate(Object candidate) {
				WaypointInMove_c selected = (WaypointInMove_c) candidate;
				boolean retval = false;
				retval = (selected.getWay_id().equals(m_p22103))
						& (selected.getDiagramid().equals(m_p22104));
				return retval;
			}
		}

		WaypointInMove_c[] objs22101 = WaypointInMove_c
				.WaypointInMoveInstances(modelRoot,
						new WaypointInMove_c_test22102_c(getWay_id(),
								getDiagramid()));

		if (((objs22101.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Waypoint In Move", //$NON-NLS-1$
								"Consistency: Object: Waypoint In Move: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22101.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Waypoint In Move: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs22101.length), e);
			}
			retval = false;

		}

		if (((objs22101.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Waypoint In Move", //$NON-NLS-1$
								"Consistency: Object: Waypoint In Move: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22101.length)
										+ " Way_ID: " + "Not Printable" + " diagramId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Waypoint In Move: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22101.length)
										+ " Way_ID: " + "Not Printable" + " diagramId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Waypoint In Move is a link class in association: rel.Numb = 24
		// Other side
		// The other side class in the association is: Model
		class Model_c_test22108_c implements ClassQueryInterface_c {
			Model_c_test22108_c(java.util.UUID p22109) {
				m_p22109 = p22109;
			}
			private java.util.UUID m_p22109;
			public boolean evaluate(Object candidate) {
				Model_c selected = (Model_c) candidate;
				boolean retval = false;
				retval = (selected.getDiagramid().equals(m_p22109));
				return retval;
			}
		}

		Model_c[] objs22107 = Model_c.ModelInstances(modelRoot,
				new Model_c_test22108_c(getDiagramid()));

		if (((objs22107.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Waypoint In Move", //$NON-NLS-1$
								"Consistency: Object: Waypoint In Move: Association: 24: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22107.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Waypoint In Move: Association: 24: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22107.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Initialize() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint In Move",
				" Operation entered: WaypointInMove::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR24(this);

		int v_x = Gr_c.Getabsolutexposition();

		int v_y = Gr_c.Getabsoluteyposition();

		setOriginx((int) (v_waypoint.getPositionx()));

		setOriginy((int) (v_waypoint.getPositiony()));

		LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR22(v_waypoint);

		boolean v_overEnd = false;

		if (((v_seg != null))) {

			v_overEnd = v_seg.Isoverend(v_x, v_y);

		}

		if ((v_overEnd)) {

			Connector_c[] v_attachedCons = Connector_c
					.getManyGD_CONsOnR20(Graphedge_c.getManyDIM_EDsOnR321(Graphconnector_c.getManyDIM_CONsOnR311(Graphelement_c
							.getManyDIM_GEsOnR23(GraphicalElement_c
									.getManyGD_GEsOnR2(Connector_c
											.getManyGD_CONsOnR6(v_seg))))));

			Connector_c v_attachedToCon = Connector_c
					.getOneGD_CONOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(Connector_c
													.getOneGD_CONOnR6(v_seg))))));

			LineSegment_c v_nextSeg = LineSegment_c
					.getOneGD_LSOnR7Precedes(v_seg);

			if (((v_nextSeg == null))) {

				Connector_c v_attachedCon = null;
				for (int i21312 = 0; i21312 < v_attachedCons.length; i21312++) {
					v_attachedCon = v_attachedCons[i21312];

					ConnectorTerminal_c v_endTermSpec = ConnectorTerminal_c
							.getOneTS_CNTOnR201(TerminalSpecification_c
									.getManyTS_TSPsOnR203(ConnectorSpecification_c
											.getManyTS_CSPsOnR200(ElementSpecification_c
													.getManyGD_ESsOnR10(GraphicalElement_c
															.getManyGD_GEsOnR2(v_attachedCon)))));

					if (((v_endTermSpec != null) && v_endTermSpec
							.getTerminatesat() == End_c.End)) {

						GraphicalElement_c v_attachedConElem = GraphicalElement_c
								.getOneGD_GEOnR2(v_attachedCon);

						if ((!v_attachedConElem.Isselected())) {

							if (v_attachedCon != null) {
								v_attachedCon
										.Initializeendwaypointinmove(End_c.End);
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Attempted to call an operation on a null instance.",
												t);
							}

						}

					}

				}

				if (((v_attachedToCon != null))) {

					ElementSpecification_c v_attachedToConSpec = ElementSpecification_c
							.getOneGD_ESOnR10(GraphicalElement_c
									.getOneGD_GEOnR2(v_attachedToCon));

					class ConnectorTerminal_test21526_c
							implements
								ClassQueryInterface_c {
						ConnectorTerminal_test21526_c(int p21527) {
							m_p21527 = p21527;
						}
						private int m_p21527;
						public boolean evaluate(Object candidate) {
							ConnectorTerminal_c selected = (ConnectorTerminal_c) candidate;
							return (selected.getOoa_type() == m_p21527);
						}
					}
					ConnectorTerminal_c v_endTermSpec = ConnectorTerminal_c
							.getOneTS_CNTOnR201(
									TerminalSpecification_c
											.getManyTS_TSPsOnR203(ConnectorSpecification_c
													.getManyTS_CSPsOnR200(ElementSpecification_c
															.getManyGD_ESsOnR10(GraphicalElement_c
																	.getManyGD_GEsOnR2(Connector_c
																			.getManyGD_CONsOnR6(v_seg))))),
									new ConnectorTerminal_test21526_c(
											v_attachedToConSpec.getOoa_type()));

					if (((v_endTermSpec != null) && (v_endTermSpec
							.getTerminatesat() != End_c.Middle))) {

						GraphicalElement_c v_attachedToConElem = GraphicalElement_c
								.getOneGD_GEOnR2(v_attachedToCon);

						if ((!v_attachedToConElem.Isselected())) {

							if (v_attachedToCon != null) {
								v_attachedToCon
										.Initializeendwaypointinmove(v_endTermSpec
												.getTerminatesat());
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Attempted to call an operation on a null instance.",
												t);
							}

						}

					}

				}

			}

		}

		v_seg = LineSegment_c.getOneGD_LSOnR21(v_waypoint);

		boolean v_overStart = false;

		if (((v_seg != null))) {

			v_overStart = v_seg.Isoverstart(v_x, v_y);

		}

		if ((v_overStart)) {

			Connector_c[] v_attachedCons = Connector_c
					.getManyGD_CONsOnR20(Graphedge_c.getManyDIM_EDsOnR320(Graphconnector_c.getManyDIM_CONsOnR311(Graphelement_c
							.getManyDIM_GEsOnR23(GraphicalElement_c
									.getManyGD_GEsOnR2(Connector_c
											.getManyGD_CONsOnR6(v_seg))))));

			Connector_c v_attachedToCon = Connector_c
					.getOneGD_CONOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR320(Graphedge_c
											.getOneDIM_EDOnR20(Connector_c
													.getOneGD_CONOnR6(v_seg))))));

			Connector_c v_con = Connector_c.getOneGD_CONOnR6(v_seg);

			java.util.UUID v_id = v_con.Getstartingsegmentid();

			if ((v_seg.getElementid().equals(v_id))) {

				Connector_c v_attachedCon = null;
				for (int i21313 = 0; i21313 < v_attachedCons.length; i21313++) {
					v_attachedCon = v_attachedCons[i21313];

					ConnectorTerminal_c v_startTermSpec = ConnectorTerminal_c
							.getOneTS_CNTOnR201(TerminalSpecification_c
									.getManyTS_TSPsOnR202(ConnectorSpecification_c
											.getManyTS_CSPsOnR200(ElementSpecification_c
													.getManyGD_ESsOnR10(GraphicalElement_c
															.getManyGD_GEsOnR2(v_attachedCon)))));

					if (((v_startTermSpec != null) && v_startTermSpec
							.getTerminatesat() == End_c.Start)) {

						GraphicalElement_c v_attachedConElem = GraphicalElement_c
								.getOneGD_GEOnR2(v_attachedCon);

						if ((!v_attachedConElem.Isselected())) {

							if (v_attachedCon != null) {
								v_attachedCon
										.Initializeendwaypointinmove(End_c.Start);
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Attempted to call an operation on a null instance.",
												t);
							}

						}

					}

				}

				if (((v_attachedToCon != null))) {

					ElementSpecification_c v_attachedToConSpec = ElementSpecification_c
							.getOneGD_ESOnR10(GraphicalElement_c
									.getOneGD_GEOnR2(v_attachedToCon));

					class ConnectorTerminal_test21528_c
							implements
								ClassQueryInterface_c {
						ConnectorTerminal_test21528_c(int p21529) {
							m_p21529 = p21529;
						}
						private int m_p21529;
						public boolean evaluate(Object candidate) {
							ConnectorTerminal_c selected = (ConnectorTerminal_c) candidate;
							return (selected.getOoa_type() == m_p21529);
						}
					}
					ConnectorTerminal_c v_startTermSpec = ConnectorTerminal_c
							.getOneTS_CNTOnR201(
									TerminalSpecification_c
											.getManyTS_TSPsOnR202(ConnectorSpecification_c
													.getManyTS_CSPsOnR200(ElementSpecification_c
															.getManyGD_ESsOnR10(GraphicalElement_c
																	.getManyGD_GEsOnR2(Connector_c
																			.getManyGD_CONsOnR6(v_seg))))),
									new ConnectorTerminal_test21528_c(
											v_attachedToConSpec.getOoa_type()));

					if (((v_startTermSpec != null) && (v_startTermSpec
							.getTerminatesat() != End_c.Middle))) {

						GraphicalElement_c v_attachedToConElem = GraphicalElement_c
								.getOneGD_GEOnR2(v_attachedToCon);

						if ((!v_attachedToConElem.Isselected())) {

							if (v_attachedToCon != null) {
								v_attachedToCon
										.Initializeendwaypointinmove(v_startTermSpec
												.getTerminatesat());
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Attempted to call an operation on a null instance.",
												t);
							}

						}

					}

				}

			}

		}

	} // End initialize
	public void Finalize() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint In Move",
				" Operation entered: WaypointInMove::Finalize");
		final ModelRoot modelRoot = getModelRoot();
		Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR24(this);

		LineSegment_c v_beforeSegment = LineSegment_c
				.getOneGD_LSOnR22(v_waypoint);

		LineSegment_c v_afterSegment = LineSegment_c
				.getOneGD_LSOnR21(v_waypoint);

		if (((v_beforeSegment == null))) {

			LineSegment_c v_segment = v_afterSegment;

			Waypoint_c v_segmentStart = Waypoint_c
					.getOneDIM_WAYOnR21(v_segment);

			Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);

			boolean v_appropriate_start_point = false;

			GraphicalElement_c v_start_elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c
							.getOneDIM_CONOnR320(Graphedge_c
									.getOneDIM_EDOnR20(Connector_c
											.getOneGD_CONOnR6(v_segment)))));

			if (((v_start_elem != null))) {

				Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(v_start_elem);

				if (((v_shp != null))) {

					v_appropriate_start_point = Finalizeonshape();

				}

				Connector_c v_con = Connector_c.getOneGD_CONOnR2(v_start_elem);

				if (((v_con != null))) {

					v_appropriate_start_point = Finalizestartonconnector();

				}

				if ((!v_appropriate_start_point)) {

					if (v_segment != null) {
						v_segment.Movestart(false,
								(int) (getOriginx() - v_segmentStart
										.getPositionx()),
								(int) (getOriginy() - v_segmentStart
										.getPositiony()));
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Attempted to call an operation on a null instance.",
										t);
					}

				}

			}

		}

		else if (((v_afterSegment == null))) {

			boolean v_appropriate_end_point = false;

			LineSegment_c v_segment = v_beforeSegment;

			GraphicalElement_c v_end_elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c
							.getOneDIM_CONOnR321(Graphedge_c
									.getOneDIM_EDOnR20(Connector_c
											.getOneGD_CONOnR6(v_segment)))));

			if (((v_end_elem != null))) {

				Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(v_end_elem);

				if (((v_shp != null))) {

					v_appropriate_end_point = Finalizeonshape();

				}

				Connector_c v_con = Connector_c.getOneGD_CONOnR2(v_end_elem);

				if (((v_con != null))) {

					v_appropriate_end_point = Finalizeendonconnector();

				}

			}

			else {

				v_appropriate_end_point = true;

			}

			if ((!v_appropriate_end_point)) {

				Waypoint_c v_segmentEnd = Waypoint_c
						.getOneDIM_WAYOnR22(v_segment);

				if (v_segment != null) {
					v_segment.Moveend(false,
							(int) (getOriginx() - v_segmentEnd.getPositionx()),
							(int) (getOriginy() - v_segmentEnd.getPositiony()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

		else {

			LineSegment_c v_segment = v_beforeSegment;

			Waypoint_c v_segmentStart = Waypoint_c
					.getOneDIM_WAYOnR21(v_segment);

			LineSegment_c v_afterAfterSegment = LineSegment_c
					.getOneGD_LSOnR7Precedes(v_afterSegment);

			Waypoint_c v_nextWaypoint = Waypoint_c
					.getOneDIM_WAYOnR22(v_afterSegment);

			WaypointInMove_c v_nextInMove = WaypointInMove_c
					.getOneGD_WIMOnR24(v_nextWaypoint);

			Model_c v_model = Model_c.getOneGD_MDOnR24(this);

			if ((Gr_c.Isover(Gr_c.Gethotspotsize(),
					(int) (v_waypoint.getPositionx()),
					(int) (v_segmentStart.getPositionx()),
					(int) (v_nextWaypoint.getPositionx()),
					(int) (v_waypoint.getPositiony()),
					(int) (v_segmentStart.getPositiony()),
					(int) (v_nextWaypoint.getPositiony())))) {

				AnchorOnSegment_c[] v_anchors = AnchorOnSegment_c
						.getManyGD_AOSsOnR26(v_afterSegment);

				AnchorOnSegment_c v_anchor = null;
				for (int i21314 = 0; i21314 < v_anchors.length; i21314++) {
					v_anchor = v_anchors[i21314];

					Graphconnector_c v_con = Graphconnector_c
							.getOneDIM_CONOnR26(v_anchor);

					if (v_anchor != null) {
						v_anchor.unrelateAcrossR26From(v_con);
						v_anchor.unrelateAcrossR26From(v_afterSegment);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Unrelate using attempted on null link class instance.",
										t);
					}

					if (v_anchor != null) {
						v_anchor.relateAcrossR26To(v_con);
						v_anchor.relateAcrossR26To(v_segment);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Relate using attempted on null link class instance.",
										t);
					}

				}

				if (v_afterSegment != null) {
					v_afterSegment.unrelateAcrossR7FromFollows(v_segment);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Unrelate attempted on null left hand instance.",
									t);
				}

				if (((v_afterAfterSegment != null))) {

					if (v_afterSegment != null) {
						v_afterSegment
								.unrelateAcrossR7FromPrecedes(v_afterAfterSegment);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Unrelate attempted on null left hand instance.",
										t);
					}

					if (v_segment != null) {
						v_segment.relateAcrossR7ToPrecedes(v_afterAfterSegment);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Relate attempted on null left hand instance.",
								t);
					}

					Waypoint_c v_prevWaypoint = Waypoint_c
							.getOneDIM_WAYOnR21(v_afterAfterSegment);

					if (v_afterAfterSegment != null) {
						v_afterAfterSegment
								.unrelateAcrossR21From(v_prevWaypoint);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Unrelate attempted on null left hand instance.",
										t);
					}

					if (v_waypoint != null) {
						v_waypoint.relateAcrossR21To(v_afterAfterSegment);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Relate attempted on null left hand instance.",
								t);
					}

				}

				if (((v_nextInMove != null))) {

					if (v_nextInMove != null) {
						v_nextInMove.unrelateAcrossR24From(v_nextWaypoint);
						v_nextInMove.unrelateAcrossR24From(v_model);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Unrelate using attempted on null link class instance.",
										t);
					}

				}

				if (v_waypoint != null) {
					v_waypoint.setPositionx(v_nextWaypoint.getPositionx());
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

				if (v_waypoint != null) {
					v_waypoint.setPositiony(v_nextWaypoint.getPositiony());
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

				if (v_afterSegment != null) {
					v_afterSegment.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				if (v_nextWaypoint != null) {
					v_nextWaypoint.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

	} // End finalize
	public boolean Finalizeonshape() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint In Move",
				" Operation entered: WaypointInMove::Finalizeonshape");
		final ModelRoot modelRoot = getModelRoot();
		boolean v_appropriate_point = false;

		Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR24(this);

		boolean v_waypointStartsConnector = true;

		LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR21(v_waypoint);

		if (((v_segment == null))) {

			v_waypointStartsConnector = false;

			v_segment = LineSegment_c.getOneGD_LSOnR22(v_waypoint);

		}

		Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);

		Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);

		Model_c v_model = Model_c.getOneGD_MDOnR24(this);

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);

		if ((v_waypointStartsConnector)) {

			Shape_c v_start_elem = Shape_c
					.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c
							.getOneDIM_CONOnR320(Graphedge_c
									.getOneDIM_EDOnR20(Connector_c
											.getOneGD_CONOnR6(v_segment))))));

			ContainingShape_c v_ctrShape = ContainingShape_c
					.getOneGD_CTROnR28(v_start_elem);

			boolean v_isOver = false;

			if (((v_ctrShape != null))) {

				v_isOver = v_ctrShape
						.Isoveranypartof(Gr_c.Unscale((int) (v_segmentStart
								.getPositionx() - v_diagram.getViewportx())),
								Gr_c.Unscale((int) (v_segmentStart
										.getPositiony() - v_diagram
										.getViewporty())));

			}

			else {

				v_isOver = v_start_elem
						.Isover(Gr_c.Unscale((int) (v_segmentStart
								.getPositionx() - v_diagram.getViewportx())),
								Gr_c.Unscale((int) (v_segmentStart
										.getPositiony() - v_diagram
										.getViewporty())));

			}

			if ((v_isOver)) {

				int v_intersectX = v_start_elem.Getxintersect(false,
						(int) (v_segmentStart.getPositionx()),
						(int) (v_segmentEnd.getPositionx()),
						(int) (v_segmentStart.getPositiony()),
						(int) (v_segmentEnd.getPositiony()));

				int v_intersectY = v_start_elem.Getyintersect(false,
						(int) (v_segmentStart.getPositionx()),
						(int) (v_segmentEnd.getPositionx()),
						(int) (v_segmentStart.getPositiony()),
						(int) (v_segmentEnd.getPositiony()));

				if ((v_intersectX != 0 && v_intersectY != 0)) {

					v_appropriate_point = true;

					java.util.UUID v_snapPointId = v_start_elem
							.Getnearestgridsnappointonedge(v_intersectX,
									v_intersectY);

					Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(
							Point_c.class).getGlobal(null, v_snapPointId);

					if (v_segment != null) {
						v_segment.Movestart(false,
								(int) (v_snapPoint.getX() - v_segmentStart
										.getPositionx()),
								(int) (v_snapPoint.getY() - v_segmentStart
										.getPositiony()));
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Attempted to call an operation on a null instance.",
										t);
					}

					if (v_snapPoint != null) {
						// get the location of this element in the instance list
						// before deleting
						if (v_snapPoint.delete()) {
							Ooaofgraphics
									.getDefaultInstance()
									.fireModelElementDeleted(
											new BaseModelDelta(
													Modeleventnotification_c.DELTA_DELETE,
													v_snapPoint));
						}
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Delete attempted on null instance.", t);
					}

				}

			}

		}

		else {

			Shape_c v_end_elem = Shape_c
					.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c
							.getOneDIM_CONOnR321(Graphedge_c
									.getOneDIM_EDOnR20(Connector_c
											.getOneGD_CONOnR6(v_segment))))));

			ContainingShape_c v_ctrShape = ContainingShape_c
					.getOneGD_CTROnR28(v_end_elem);

			boolean v_isOver = false;

			if (((v_ctrShape != null))) {

				v_isOver = v_ctrShape.Isoveranypartof(Gr_c
						.Unscale((int) (v_segmentEnd.getPositionx() - v_diagram
								.getViewportx())), Gr_c
						.Unscale((int) (v_segmentEnd.getPositiony() - v_diagram
								.getViewporty())));

			}

			else {

				v_isOver = v_end_elem.Isover(Gr_c.Unscale((int) (v_segmentEnd
						.getPositionx() - v_diagram.getViewportx())), Gr_c
						.Unscale((int) (v_segmentEnd.getPositiony() - v_diagram
								.getViewporty())));

			}

			if ((v_isOver)) {

				int v_intersectX = v_end_elem.Getxintersect(false,
						(int) (v_segmentEnd.getPositionx()),
						(int) (v_segmentStart.getPositionx()),
						(int) (v_segmentEnd.getPositiony()),
						(int) (v_segmentStart.getPositiony()));

				int v_intersectY = v_end_elem.Getyintersect(false,
						(int) (v_segmentEnd.getPositionx()),
						(int) (v_segmentStart.getPositionx()),
						(int) (v_segmentEnd.getPositiony()),
						(int) (v_segmentStart.getPositiony()));

				if ((v_intersectX != 0 && v_intersectY != 0)) {

					v_appropriate_point = true;

					java.util.UUID v_snapPointId = v_end_elem
							.Getnearestgridsnappointonedge(v_intersectX,
									v_intersectY);

					Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(
							Point_c.class).getGlobal(null, v_snapPointId);

					if (v_segment != null) {
						v_segment.Moveend(false,
								(int) (v_snapPoint.getX() - v_segmentEnd
										.getPositionx()), (int) (v_snapPoint
										.getY() - v_segmentEnd.getPositiony()));
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Attempted to call an operation on a null instance.",
										t);
					}

					if (v_snapPoint != null) {
						// get the location of this element in the instance list
						// before deleting
						if (v_snapPoint.delete()) {
							Ooaofgraphics
									.getDefaultInstance()
									.fireModelElementDeleted(
											new BaseModelDelta(
													Modeleventnotification_c.DELTA_DELETE,
													v_snapPoint));
						}
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Delete attempted on null instance.", t);
					}

				}

			}

		}

		return v_appropriate_point;

	} // End finalizeOnShape
	public boolean Finalizeendonconnector() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint In Move",
				" Operation entered: WaypointInMove::Finalizeendonconnector");
		final ModelRoot modelRoot = getModelRoot();
		boolean v_appropriate_point = false;

		LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR22(Waypoint_c
				.getOneDIM_WAYOnR24(this));

		Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);

		Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);

		GraphicalElement_c v_end_elem = GraphicalElement_c
				.getOneGD_GEOnR23(Graphelement_c
						.getOneDIM_GEOnR311(Graphconnector_c
								.getOneDIM_CONOnR321(Graphedge_c
										.getOneDIM_EDOnR20(Connector_c
												.getOneGD_CONOnR6(v_segment)))));

		Connector_c v_con = Connector_c.getOneGD_CONOnR2(v_end_elem);

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(Model_c
				.getOneGD_MDOnR1(v_end_elem));

		ConnectorTerminal_c v_endTermSpec = ConnectorTerminal_c
				.getOneTS_CNTOnR201(TerminalSpecification_c.getManyTS_TSPsOnR203(ConnectorSpecification_c.getManyTS_CSPsOnR200(ElementSpecification_c
						.getManyGD_ESsOnR10(GraphicalElement_c
								.getManyGD_GEsOnR2(Connector_c
										.getManyGD_CONsOnR6(v_segment))))));

		if ((v_endTermSpec.getTerminatesat() == End_c.Start)) {

			v_appropriate_point = true;

			if (v_segment != null) {
				v_segment
						.Moveend(false, (int) (v_con.Getstartx() - v_segmentEnd
								.getPositionx()),
								(int) (v_con.Getstarty() - v_segmentEnd
										.getPositiony()));
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if ((v_endTermSpec.getTerminatesat() == End_c.End)) {

			v_appropriate_point = true;

			if (v_segment != null) {
				v_segment.Moveend(false,
						(int) (v_con.Getendx() - v_segmentEnd.getPositionx()),
						(int) (v_con.Getendy() - v_segmentEnd.getPositiony()));
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if ((v_endTermSpec.getTerminatesat() == End_c.Middle)) {

			int v_intersectX = v_con.Getintersect(Axis_c.X, false,
					(int) (v_segmentStart.getPositionx()),
					(int) (v_segmentEnd.getPositionx()),
					(int) (v_segmentStart.getPositiony()),
					(int) (v_segmentEnd.getPositiony()));

			int v_intersectY = v_con.Getintersect(Axis_c.Y, false,
					(int) (v_segmentStart.getPositionx()),
					(int) (v_segmentEnd.getPositionx()),
					(int) (v_segmentStart.getPositiony()),
					(int) (v_segmentEnd.getPositiony()));

			if ((v_intersectX != 0 && v_intersectY != 0)) {

				v_appropriate_point = true;

				if (v_segment != null) {
					v_segment.Moveend(false,
							(int) (v_intersectX - v_segmentEnd.getPositionx()),
							(int) (v_intersectY - v_segmentEnd.getPositiony()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				class LineSegment_test21530_c implements ClassQueryInterface_c {
					LineSegment_test21530_c(java.util.UUID p21531) {
						m_p21531 = p21531;
					}
					private java.util.UUID m_p21531;
					public boolean evaluate(Object candidate) {
						LineSegment_c selected = (LineSegment_c) candidate;
						return (selected.getElementid().equals(m_p21531));
					}
				}
				LineSegment_c v_intersectSegment = LineSegment_c
						.getOneGD_LSOnR6(
								v_con,
								new LineSegment_test21530_c(v_con
										.Getintersectsegmentid(v_intersectX,
												v_intersectY)));

				LineSegment_c v_existingAnchorSegment = LineSegment_c
						.getOneGD_LSOnR26(AnchorOnSegment_c.getOneGD_AOSOnR26(Graphconnector_c
								.getOneDIM_CONOnR321(Graphedge_c
										.getOneDIM_EDOnR20(Connector_c
												.getOneGD_CONOnR6(v_segment)))));

				if ((v_existingAnchorSegment != v_intersectSegment)) {

					AnchorOnSegment_c v_aos = AnchorOnSegment_c
							.getOneGD_AOSOnR26(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c
									.getOneDIM_EDOnR20(Connector_c
											.getOneGD_CONOnR6(v_segment))));

					Graphconnector_c v_gcon = Graphconnector_c
							.getOneDIM_CONOnR26(v_aos);

					if (v_aos != null) {
						v_aos.unrelateAcrossR26From(v_existingAnchorSegment);
						v_aos.unrelateAcrossR26From(v_gcon);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Unrelate using attempted on null link class instance.",
										t);
					}

					if (v_aos != null) {
						v_aos.relateAcrossR26To(v_intersectSegment);
						v_aos.relateAcrossR26To(v_gcon);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Relate using attempted on null link class instance.",
										t);
					}

				}

			}

		}

		return v_appropriate_point;

	} // End finalizeEndOnConnector
	public boolean Finalizeonwhitespace() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint In Move",
				" Operation entered: WaypointInMove::Finalizeonwhitespace");
		final ModelRoot modelRoot = getModelRoot();
		boolean v_appropriate_point = true;

		Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR24(this);

		Model_c v_model = Model_c.getOneGD_MDOnR24(this);

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);

		Shape_c[] v_shps = Shape_c.getManyGD_SHPsOnR2(GraphicalElement_c
				.getManyGD_GEsOnR1(v_model));

		Shape_c v_shp = null;
		for (int i21315 = 0; i21315 < v_shps.length; i21315++) {
			v_shp = v_shps[i21315];

			if ((v_shp.Isover(
					Gr_c.Unscale((int) (v_waypoint.getPositionx() - v_diagram
							.getViewportx())), Gr_c.Unscale((int) (v_waypoint
							.getPositiony() - v_diagram.getViewporty()))))) {

				v_appropriate_point = false;

			}

		}

		return v_appropriate_point;

	} // End finalizeOnWhitespace
	public boolean Finalizestartonconnector() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint In Move",
				" Operation entered: WaypointInMove::Finalizestartonconnector");
		final ModelRoot modelRoot = getModelRoot();
		boolean v_appropriate_point = false;

		LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR21(Waypoint_c
				.getOneDIM_WAYOnR24(this));

		Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);

		Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);

		GraphicalElement_c v_start_elem = GraphicalElement_c
				.getOneGD_GEOnR23(Graphelement_c
						.getOneDIM_GEOnR311(Graphconnector_c
								.getOneDIM_CONOnR320(Graphedge_c
										.getOneDIM_EDOnR20(Connector_c
												.getOneGD_CONOnR6(v_segment)))));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(Model_c
				.getOneGD_MDOnR1(v_start_elem));

		Connector_c v_con = Connector_c.getOneGD_CONOnR2(v_start_elem);

		ConnectorTerminal_c v_startTermSpec = ConnectorTerminal_c
				.getOneTS_CNTOnR201(TerminalSpecification_c.getManyTS_TSPsOnR202(ConnectorSpecification_c.getManyTS_CSPsOnR200(ElementSpecification_c
						.getManyGD_ESsOnR10(GraphicalElement_c
								.getManyGD_GEsOnR2(Connector_c
										.getManyGD_CONsOnR6(v_segment))))));

		if ((v_startTermSpec.getTerminatesat() == End_c.Start)) {

			v_appropriate_point = true;

			if (v_segment != null) {
				v_segment.Movestart(false,
						(int) (v_con.Getstartx() - v_segmentStart
								.getPositionx()),
						(int) (v_con.Getstarty() - v_segmentStart
								.getPositiony()));
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if ((v_startTermSpec.getTerminatesat() == End_c.End)) {

			v_appropriate_point = true;

			if (v_segment != null) {
				v_segment
						.Movestart(false,
								(int) (v_con.Getendx() - v_segmentStart
										.getPositionx()), (int) (v_con
										.Getendy() - v_segmentStart
										.getPositiony()));
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if ((v_startTermSpec.getTerminatesat() == End_c.Middle)) {

			int v_intersectX = v_con.Getintersect(Axis_c.X, false,
					(int) (v_segmentStart.getPositionx()),
					(int) (v_segmentEnd.getPositionx()),
					(int) (v_segmentStart.getPositiony()),
					(int) (v_segmentEnd.getPositiony()));

			int v_intersectY = v_con.Getintersect(Axis_c.Y, false,
					(int) (v_segmentStart.getPositionx()),
					(int) (v_segmentEnd.getPositionx()),
					(int) (v_segmentStart.getPositiony()),
					(int) (v_segmentEnd.getPositiony()));

			if ((v_intersectX != 0 && v_intersectY != 0)) {

				v_appropriate_point = true;

				if (v_segment != null) {
					v_segment
							.Movestart(false,
									(int) (v_intersectX - v_segmentStart
											.getPositionx()),
									(int) (v_intersectY - v_segmentStart
											.getPositiony()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				class LineSegment_test21532_c implements ClassQueryInterface_c {
					LineSegment_test21532_c(java.util.UUID p21533) {
						m_p21533 = p21533;
					}
					private java.util.UUID m_p21533;
					public boolean evaluate(Object candidate) {
						LineSegment_c selected = (LineSegment_c) candidate;
						return (selected.getElementid().equals(m_p21533));
					}
				}
				LineSegment_c v_intersectSegment = LineSegment_c
						.getOneGD_LSOnR6(
								v_con,
								new LineSegment_test21532_c(v_con
										.Getintersectsegmentid(v_intersectX,
												v_intersectY)));

				LineSegment_c v_existingAnchorSegment = LineSegment_c
						.getOneGD_LSOnR26(AnchorOnSegment_c.getOneGD_AOSOnR26(Graphconnector_c
								.getOneDIM_CONOnR320(Graphedge_c
										.getOneDIM_EDOnR20(Connector_c
												.getOneGD_CONOnR6(v_segment)))));

				if ((v_existingAnchorSegment != v_intersectSegment)) {

					AnchorOnSegment_c v_aos = AnchorOnSegment_c
							.getOneGD_AOSOnR26(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c
									.getOneDIM_EDOnR20(Connector_c
											.getOneGD_CONOnR6(v_segment))));

					Graphconnector_c v_gcon = Graphconnector_c
							.getOneDIM_CONOnR26(v_aos);

					if (v_aos != null) {
						v_aos.unrelateAcrossR26From(v_existingAnchorSegment);
						v_aos.unrelateAcrossR26From(v_gcon);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Unrelate using attempted on null link class instance.",
										t);
					}

					if (v_aos != null) {
						v_aos.relateAcrossR26To(v_intersectSegment);
						v_aos.relateAcrossR26To(v_gcon);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Relate using attempted on null link class instance.",
										t);
					}

				}

			}

		}

		return v_appropriate_point;

	} // End finalizeStartOnConnector

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Waypoint In Move
