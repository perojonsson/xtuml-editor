package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Image_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_IMAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Image_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Image_c(ModelRoot modelRoot, String p_m_uri, String p_m_mimetype,
			java.util.UUID p_m_elementid) {
		super(modelRoot);
		m_uri = p_m_uri;
		m_mimetype = p_m_mimetype;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}
	static public Image_c createProxy(ModelRoot modelRoot, String p_m_uri,
			String p_m_mimetype, java.util.UUID p_m_elementid,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Image_c.class);
		Image_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			new_inst = (Image_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_uri = p_m_uri;
				new_inst.m_mimetype = p_m_mimetype;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Image_c(modelRoot, p_m_uri, p_m_mimetype,
					p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Image_c resolveInstance(ModelRoot modelRoot, String p_m_uri,
			String p_m_mimetype, java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot.getInstanceList(Image_c.class);
		Image_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			source = (Image_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_uri = p_m_uri;
				source.m_mimetype = p_m_mimetype;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

				return source;
			}
		}
		// there is no instance matching the id
		Image_c new_inst = new Image_c(modelRoot, p_m_uri, p_m_mimetype,
				p_m_elementid);
		return new_inst;
	}
	public Image_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_uri = "";
		m_mimetype = "";
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_elementid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_elementid != p_newKey) {

			m_elementid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Image_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Image_c)) {
			return false;
		}

		Image_c me = (Image_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
						.equals(((Image_c) elem).getElementid())) && this != elem)) {
			return false;
		}
		if (!getElementid().equals(((Image_c) elem).getElementid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Image_c)) {
			return false;
		}

		Image_c me = (Image_c) elem;
		if (!getElementidCachedValue().equals(
				((Image_c) elem).getElementidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_uri;
	private String m_mimetype;
	private java.util.UUID m_elementid;

	// declare association references from this class

	// referring navigation

	Leafelement_c IsSupertypeLeafelement;
	public void relateAcrossR305To(Leafelement_c target) {
		relateAcrossR305To(target, true);
	}
	public void relateAcrossR305To(Leafelement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeLeafelement)
			return; // already related

		if (IsSupertypeLeafelement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeLeafelement != null) {

				IsSupertypeLeafelement.clearBackPointerR305To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Image_c.relateAcrossR305To(Leafelement_c target)",
									"Relate performed across R305 from Image to LeafElement without unrelate of prior instance.");
				}
			}

			IsSupertypeLeafelement = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR305To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "305", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR305From(Leafelement_c target) {
		unrelateAcrossR305From(target, true);
	}
	public void unrelateAcrossR305From(Leafelement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeLeafelement == null)
			return; // already unrelated

		if (target != IsSupertypeLeafelement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R305",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR305To(this);
		}

		if (IsSupertypeLeafelement != null) {

			m_elementid = IsSupertypeLeafelement.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsSupertypeLeafelement.getElementidCachedValue();
			}
			IsSupertypeLeafelement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "305", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Image_c getOneDIM_IMGOnR305(Leafelement_c[] targets) {
		return getOneDIM_IMGOnR305(targets, null);
	}

	public static Image_c getOneDIM_IMGOnR305(Leafelement_c[] targets,
			ClassQueryInterface_c test) {
		Image_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_IMGOnR305(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Image_c getOneDIM_IMGOnR305(Leafelement_c target) {
		return getOneDIM_IMGOnR305(target, null);
	}

	public static Image_c getOneDIM_IMGOnR305(Leafelement_c target,
			boolean loadComponent) {
		return getOneDIM_IMGOnR305(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Image_c getOneDIM_IMGOnR305(Leafelement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_IMGOnR305(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Image_c getOneDIM_IMGOnR305(ModelRoot modelRoot,
			Leafelement_c target, ClassQueryInterface_c test) {
		return getOneDIM_IMGOnR305(modelRoot, target, test, true);
	}

	public static Image_c getOneDIM_IMGOnR305(ModelRoot modelRoot,
			Leafelement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneDIM_IMGOnR305(modelRoot, target, test);
	}
	private static Image_c find_getOneDIM_IMGOnR305(ModelRoot modelRoot,
			Leafelement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Image_c source = (Image_c) target.backPointer_IsSubtypeImageIsSubtype_R305;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Image_c[] getManyDIM_IMGsOnR305(Leafelement_c[] targets) {
		return getManyDIM_IMGsOnR305(targets, null);
	}
	public static Image_c[] getManyDIM_IMGsOnR305(Leafelement_c[] targets,
			boolean loadComponent) {
		return getManyDIM_IMGsOnR305(targets, null, loadComponent);
	}
	public static Image_c[] getManyDIM_IMGsOnR305(Leafelement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyDIM_IMGsOnR305(targets, test, true);
	}

	public static Image_c[] getManyDIM_IMGsOnR305(Leafelement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Image_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Image_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Image_c source = (Image_c) targets[i].backPointer_IsSubtypeImageIsSubtype_R305;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Image_c[] ret_set = new Image_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Image_c[0];
		}
	}

	public static Image_c[] getManyDIM_IMGsOnR305(Leafelement_c target) {
		if (target != null) {
			Leafelement_c[] targetArray = new Leafelement_c[1];
			targetArray[0] = target;
			return getManyDIM_IMGsOnR305(targetArray);
		} else {
			Image_c[] result = new Image_c[0];
			return result;
		}
	}

	public static Image_c[] getManyDIM_IMGsOnR305(Leafelement_c target,
			boolean loadComponent) {
		if (target != null) {
			Leafelement_c[] targetArray = new Leafelement_c[1];
			targetArray[0] = target;
			return getManyDIM_IMGsOnR305(targetArray, loadComponent);
		} else {
			Image_c[] result = new Image_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R305
		Leafelement_c relInst21762 = (Leafelement_c) baseRoot.getInstanceList(
				Leafelement_c.class).get(new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst21762 == null) {
			relInst21762 = (Leafelement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Leafelement_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst21762 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst21762) && !isProxy())) {
				relInst21762.relateAcrossR305To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R305
		// DIM_LEL
		inst = IsSupertypeLeafelement;
		unrelateAcrossR305From(IsSupertypeLeafelement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Image_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Image_c inst = (Image_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Image_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Image_c ImageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Image_c result = findImageInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Image_c findImageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Image_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Image_c x = (Image_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Image_c ImageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ImageInstance(modelRoot, test, true);
	}

	public static Image_c ImageInstance(ModelRoot modelRoot) {
		return ImageInstance(modelRoot, null, true);
	}

	public static Image_c[] ImageInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Image_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Image_c x = (Image_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Image_c[] ret_set = new Image_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Image_c[0];
			}
		}
	}
	public static Image_c[] ImageInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ImageInstances(modelRoot, test, true);
	}
	public static Image_c[] ImageInstances(ModelRoot modelRoot) {
		return ImageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Image.dispose call: ";
		Leafelement_c testR305Inst2 = Leafelement_c.getOneDIM_LELOnR305(this,
				false);

		if (testR305Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "305 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Image", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public String getUri() {
		return m_uri;
	}

	public void setUri(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_uri)) {
				return;
			}
		} else if (m_uri != null) {
			if (m_uri.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Uri",
				m_uri, newValue, true);
		m_uri = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public String getMimetype() {
		return m_mimetype;
	}

	public void setMimetype(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_mimetype)) {
				return;
			}
		} else if (m_mimetype != null) {
			if (m_mimetype.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Mimetype", m_mimetype, newValue, true);
		m_mimetype = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getElementidLongBased() {
		if (IsSupertypeLeafelement != null) {
			return IsSupertypeLeafelement.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (IsSupertypeLeafelement != null) {
			return IsSupertypeLeafelement.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeLeafelement != null);

	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Image", //$NON-NLS-1$
				" Operation entered: Image::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Image_c[] objs = Image_c.ImageInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Image", //$NON-NLS-1$
				" Operation entered: Image::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Image_c_test21764_c implements ClassQueryInterface_c {
			Image_c_test21764_c(java.util.UUID p21765) {
				m_p21765 = p21765;
			}
			private java.util.UUID m_p21765;
			public boolean evaluate(Object candidate) {
				Image_c selected = (Image_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21765));
				return retval;
			}
		}

		Image_c[] objs21763 = Image_c.ImageInstances(modelRoot,
				new Image_c_test21764_c(getElementid()));

		if (((objs21763.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Image", //$NON-NLS-1$
								"Consistency: Object: Image: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21763.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Image: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21763.length), e);
			}
			retval = false;

		}

		if (((objs21763.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Image", //$NON-NLS-1$
						"Consistency: Object: Image: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs21763.length)
								+ " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Image: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21763.length)
								+ " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Image is a subtype in association: rel.Numb = 305
		// The supertype class is: LeafElement
		class Leafelement_c_test21769_c implements ClassQueryInterface_c {
			Leafelement_c_test21769_c(java.util.UUID p21770) {
				m_p21770 = p21770;
			}
			private java.util.UUID m_p21770;
			public boolean evaluate(Object candidate) {
				Leafelement_c selected = (Leafelement_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21770));
				return retval;
			}
		}

		Leafelement_c[] objs21768 = Leafelement_c.LeafelementInstances(
				modelRoot, new Leafelement_c_test21769_c(getElementid()));

		if (((objs21768.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Image", //$NON-NLS-1$
								"Consistency: Object: Image: Association: 305: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21768.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Image: Association: 305: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21768.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Image",
				" Operation entered: Image::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		if (delete()) {
			Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Image
