	
package com.mentor.nucleus.bp.ui.canvas.inspector;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/canvas/inspector/GraphicalModelInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.core/arc/create_model_inspector.arc
// Version:      $Revision$
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
import java.util.HashMap;

import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.ClassStateMachine_c;
import com.mentor.nucleus.bp.core.InstanceStateMachine_c;
import com.mentor.nucleus.bp.core.StateMachine_c;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.core.inspector.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;

public class GraphicalModelInspector implements IModelClassInspector, IModelInspectorRegistry {

	private HashMap adaptersMap;
	private MetadataSortingManager sortingManager;
	
	public GraphicalModelInspector(){
	    this(null);
	}
	
	public GraphicalModelInspector(MetadataSortingManager aSortingManager){
		adaptersMap = new HashMap();
		sortingManager = aSortingManager;
		initializeMap();
	}

	/* 
	* @see IModelInspectorRegistry#getInspector(Class)
	*/	
	public IModelClassInspector getInspector(Class modelClass) {
		return ((IModelClassInspector)adaptersMap.get(modelClass.getName()));
	}
	
	public MetadataSortingManager getSortingManager() {
		return sortingManager;
	}
	
	/*
	*  This function is required to be called every before using the inspectors.
	*  It adds an adapter object for each object in the meta model
	*/
	private void initializeMap(){
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Model_c", new ModelInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Fillcolorstyle_c", new FillcolorstyleInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Linecolorstyle_c", new LinecolorstyleInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.GraphicalElement_c", new GraphicalElementInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Shape_c", new ShapeInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Connector_c", new ConnectorInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Graphelement_c", new GraphelementInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Graphnode_c", new GraphnodeInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Waypoint_c", new WaypointInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.FloatingText_c", new FloatingTextInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Graphconnector_c", new GraphconnectorInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Layer_c", new LayerInspector(sortingManager) );
		adaptersMap.put("com.mentor.nucleus.bp.ui.canvas.Graphicalelementinlayer_c", new GraphicalelementinlayerInspector(sortingManager) );
	}
	
	
	/* 
	 * @see IModelClassInspector#getParent(Object)
	 */
	public Object getParent(Object arg) {
		if(arg instanceof ObjectElement) {
			return ((ObjectElement) arg).getParent();
		}
		if(arg instanceof StateMachine_c) {
			InstanceStateMachine_c ism = InstanceStateMachine_c.getOneSM_ISMOnR517((StateMachine_c) arg);
			if(ism != null) {
				arg = ism;
				return getInspector(arg.getClass()).getParent(arg);
			}
			ClassStateMachine_c csm = ClassStateMachine_c.getOneSM_ASMOnR517((StateMachine_c) arg);
			if(csm != null) {
				arg = csm;
				return getInspector(arg.getClass()).getParent(arg);
			}
		}
		if(getInspector(arg.getClass()) == null) {
		     return null;
		}
		return getInspector(arg.getClass()).getParent(arg);
		
	}
	
	/* 
	 * @see IModelClassInspector#getChildRelations(Object)
	 */
	public ObjectElement[] getChildRelations(Object arg) {
		return getInspector(arg.getClass()).getChildRelations(arg);		
	}

	/* 
	 * @see IModelClassInspector#hasChildRelations(Object)
	 */
	public boolean hasChildRelations(Object arg) {
		return getInspector(arg.getClass()).hasChildRelations(arg);
	}
	
	/*
	* @see IModelClassInspector#getReferentials(Object)
	*/
	public ObjectElement[] getReferentials(Object arg) {
		return getInspector(arg.getClass()).getReferentials(arg);
	}
	
	/*
	* @see IModelClassInspector#getAttributes(Object)
	*/	
	public ObjectElement[] getAttributes(Object arg) {
		return getInspector(arg.getClass()).getAttributes(arg);
	}
	
	/*
	 * @see IMOdelClassInspector#getReferentialDetails(Class<?> referentialClass, Object arg)
	 */
	public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
		return getInspector(arg.getClass()).getReferentialDetails(referentialClass, arg);
	}
	
	/*
	 * @see IMOdelClassInspector#getImage(Object)
	 */
	public Image getImage(Object arg) {
		return getInspector(arg.getClass()).getImage(arg);
	}
	
	@Override
	public int getTreeDifferenceSlot(Object element) {
        if (element instanceof NonRootModelElement) {
            // use the parent to determine the slot
            // location for the given child          
            Object parent = getInspector(element.getClass()).getParent(element);
            if (parent != null) {
	            return getInspector(parent.getClass()).getTreeDifferenceSlot(element);
	        }
        }
		return 0;
	}	
}

