      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.FloatingText_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_FLOATING_TEXT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class FloatingText_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public FloatingText_c(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_conn_elementid,
       int  p_m_end,
       float        p_m_deltax,
       float        p_m_deltay)
  {
    super(modelRoot);
       m_deltax = p_m_deltax;
       m_deltay = p_m_deltay;
       m_end = p_m_end;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_conn_elementid = IdAssigner.preprocessUUID(p_m_conn_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public FloatingText_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_conn_elementid,
       int  p_m_end,
       float        p_m_deltax,
       float        p_m_deltay, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);
      FloatingText_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (FloatingText_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_deltax = p_m_deltax;
       new_inst.m_deltay = p_m_deltay;
       new_inst.m_end = p_m_end;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_conn_elementid = IdAssigner.preprocessUUID(p_m_conn_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new FloatingText_c(modelRoot,
p_m_elementid,
p_m_conn_elementid,
p_m_end,
p_m_deltax,
p_m_deltay
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public FloatingText_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_conn_elementid,
       int  p_m_end,
       float        p_m_deltax,
       float        p_m_deltay){
    InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);
    FloatingText_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (FloatingText_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_deltax = p_m_deltax;
       source.m_deltay = p_m_deltay;
       source.m_end = p_m_end;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_conn_elementid = IdAssigner.preprocessUUID(p_m_conn_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    FloatingText_c new_inst = new FloatingText_c(modelRoot,
p_m_elementid,
p_m_conn_elementid,
p_m_end,
p_m_deltax,
p_m_deltay
);
    return new_inst;
  }
  public FloatingText_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_end = End_c.OOA_UNINITIALIZED_ENUM;
     m_conn_elementid = IdAssigner.NULL_UUID;   
     m_elementid = IdAssigner.NULL_UUID;   
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof FloatingText_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof FloatingText_c)) {
           return false;
       }
       
       FloatingText_c me = (FloatingText_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((FloatingText_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((FloatingText_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof FloatingText_c)) {
           return false;
       }
       
       FloatingText_c me = (FloatingText_c)elem;
      if (!getElementidCachedValue().equals(((FloatingText_c)elem).getElementidCachedValue())) return false;
      return true;
    }


  // Attributes
  private float        m_deltax ;
  private float        m_deltay ;
  private int  m_end ;
  private java.util.UUID         m_conn_elementid ;
  private java.util.UUID         m_elementid ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphnode_c IsSupertypeGraphnode ;
public void relateAcrossR19To(Graphnode_c target)
{
	relateAcrossR19To(target, true);
}
public void relateAcrossR19To(Graphnode_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeGraphnode) return;  // already related

    if ( IsSupertypeGraphnode != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeGraphnode != null) {
    
        IsSupertypeGraphnode.clearBackPointerR19To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"FloatingText_c.relateAcrossR19To(Graphnode_c target)", 
			"Relate performed across R19 from Floating Text to GraphNode without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeGraphnode = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR19To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "19", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR19From(Graphnode_c target)
{
	unrelateAcrossR19From(target, true);
}
public void unrelateAcrossR19From(Graphnode_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeGraphnode == null) return;  // already unrelated
	
	if (target != IsSupertypeGraphnode) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R19", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR19To(this);
    }
    

      if(IsSupertypeGraphnode != null) {
      
        m_elementid = IsSupertypeGraphnode.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = IsSupertypeGraphnode.getElementidCachedValue();
        }       
        IsSupertypeGraphnode = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "19", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static FloatingText_c getOneGD_CTXTOnR19(Graphnode_c [] targets)
{
    return getOneGD_CTXTOnR19(targets, null);
}

public static FloatingText_c getOneGD_CTXTOnR19(Graphnode_c [] targets, ClassQueryInterface_c test)
{
    FloatingText_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_CTXTOnR19(targets[i], test);
        }
    }

    return ret_val;
}

public static FloatingText_c getOneGD_CTXTOnR19(Graphnode_c target)
{
  return getOneGD_CTXTOnR19(target, null);
}

public static FloatingText_c getOneGD_CTXTOnR19(Graphnode_c target, boolean loadComponent)
{
    return getOneGD_CTXTOnR19(target.getModelRoot(), target, null, loadComponent);
}

public static FloatingText_c getOneGD_CTXTOnR19(Graphnode_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_CTXTOnR19(target.getModelRoot(), target, test);
  }
  return null;
}

public static FloatingText_c getOneGD_CTXTOnR19(ModelRoot modelRoot, Graphnode_c target, ClassQueryInterface_c test)
{
	return getOneGD_CTXTOnR19(modelRoot, target, test, true);
}

public static FloatingText_c getOneGD_CTXTOnR19(ModelRoot modelRoot, Graphnode_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_CTXTOnR19(modelRoot,target,test);
}
private static FloatingText_c find_getOneGD_CTXTOnR19(ModelRoot modelRoot, Graphnode_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    FloatingText_c source = (FloatingText_c)target.backPointer_IsSubtypeFloatingTextIsSubtype_R19;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static FloatingText_c [] getManyGD_CTXTsOnR19(Graphnode_c [] targets)
{
  return getManyGD_CTXTsOnR19(targets, null);
}
public static FloatingText_c [] getManyGD_CTXTsOnR19(Graphnode_c [] targets, boolean loadComponent)
{
  return getManyGD_CTXTsOnR19(targets, null, loadComponent);
}
public static FloatingText_c [] getManyGD_CTXTsOnR19(Graphnode_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_CTXTsOnR19(targets, test, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR19(Graphnode_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new FloatingText_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      FloatingText_c source = (FloatingText_c)targets[i].backPointer_IsSubtypeFloatingTextIsSubtype_R19;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	FloatingText_c[] ret_set = new FloatingText_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new FloatingText_c[0];
  }
  }

public static FloatingText_c [] getManyGD_CTXTsOnR19(Graphnode_c target)
{
  if (target != null) {
    Graphnode_c [] targetArray = new Graphnode_c[1];
    targetArray[0] = target;
    return getManyGD_CTXTsOnR19(targetArray);
  } else {
    FloatingText_c [] result = new FloatingText_c [0] ;
  return result ;
}
}

public static FloatingText_c [] getManyGD_CTXTsOnR19(Graphnode_c target, boolean loadComponent)
{
  if (target != null) {
    Graphnode_c [] targetArray = new Graphnode_c[1];
    targetArray[0] = target;
    return getManyGD_CTXTsOnR19(targetArray, loadComponent);
  } else {
    FloatingText_c [] result = new FloatingText_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Shape_c IsTextForShape ;
public void relateAcrossR27To(Shape_c target)
{
	relateAcrossR27To(target, true);
}
public void relateAcrossR27To(Shape_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsTextForShape) return;  // already related

    if ( IsTextForShape != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsTextForShape != null) {
    
        IsTextForShape.clearBackPointerR27To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"FloatingText_c.relateAcrossR27To(Shape_c target)", 
			"Relate performed across R27 from Floating Text to Shape without unrelate of prior instance.");  
		}
    }
                
    	IsTextForShape = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_conn_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR27To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "27", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR27From(Shape_c target)
{
	unrelateAcrossR27From(target, true);
}
public void unrelateAcrossR27From(Shape_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsTextForShape == null) return;  // already unrelated
	
	if (target != IsTextForShape) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R27", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR27To(this);
    }
    

      if(IsTextForShape != null) {
      
        m_conn_elementid = IsTextForShape.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_conn_elementid))
        {
          m_conn_elementid = IsTextForShape.getElementidCachedValue();
        }       
        IsTextForShape = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "27", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static FloatingText_c getOneGD_CTXTOnR27(Shape_c [] targets)
{
    return getOneGD_CTXTOnR27(targets, null);
}

public static FloatingText_c getOneGD_CTXTOnR27(Shape_c [] targets, ClassQueryInterface_c test)
{
    FloatingText_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_CTXTOnR27(targets[i], test);
        }
    }

    return ret_val;
}

public static FloatingText_c getOneGD_CTXTOnR27(Shape_c target)
{
  return getOneGD_CTXTOnR27(target, null);
}

public static FloatingText_c getOneGD_CTXTOnR27(Shape_c target, boolean loadComponent)
{
    return getOneGD_CTXTOnR27(target.getModelRoot(), target, null, loadComponent);
}

public static FloatingText_c getOneGD_CTXTOnR27(Shape_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_CTXTOnR27(target.getModelRoot(), target, test);
  }
  return null;
}

public static FloatingText_c getOneGD_CTXTOnR27(ModelRoot modelRoot, Shape_c target, ClassQueryInterface_c test)
{
	return getOneGD_CTXTOnR27(modelRoot, target, test, true);
}

public static FloatingText_c getOneGD_CTXTOnR27(ModelRoot modelRoot, Shape_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_CTXTOnR27(modelRoot,target,test);
}
private static FloatingText_c find_getOneGD_CTXTOnR27(ModelRoot modelRoot, Shape_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    FloatingText_c source = (FloatingText_c)target.backPointer_HasTextFloatingTextHasText_R27;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static FloatingText_c [] getManyGD_CTXTsOnR27(Shape_c [] targets)
{
  return getManyGD_CTXTsOnR27(targets, null);
}
public static FloatingText_c [] getManyGD_CTXTsOnR27(Shape_c [] targets, boolean loadComponent)
{
  return getManyGD_CTXTsOnR27(targets, null, loadComponent);
}
public static FloatingText_c [] getManyGD_CTXTsOnR27(Shape_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_CTXTsOnR27(targets, test, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR27(Shape_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new FloatingText_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      FloatingText_c source = (FloatingText_c)targets[i].backPointer_HasTextFloatingTextHasText_R27;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	FloatingText_c[] ret_set = new FloatingText_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new FloatingText_c[0];
  }
  }

public static FloatingText_c [] getManyGD_CTXTsOnR27(Shape_c target)
{
  if (target != null) {
    Shape_c [] targetArray = new Shape_c[1];
    targetArray[0] = target;
    return getManyGD_CTXTsOnR27(targetArray);
  } else {
    FloatingText_c [] result = new FloatingText_c [0] ;
  return result ;
}
}

public static FloatingText_c [] getManyGD_CTXTsOnR27(Shape_c target, boolean loadComponent)
{
  if (target != null) {
    Shape_c [] targetArray = new Shape_c[1];
    targetArray[0] = target;
    return getManyGD_CTXTsOnR27(targetArray, loadComponent);
  } else {
    FloatingText_c [] result = new FloatingText_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Connector_c IsTextForConnector ;
public void relateAcrossR8To(Connector_c target)
{
	relateAcrossR8To(target, true);
}
public void relateAcrossR8To(Connector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsTextForConnector) return;  // already related

    if ( IsTextForConnector != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsTextForConnector != null) {
    
        IsTextForConnector.clearBackPointerR8To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"FloatingText_c.relateAcrossR8To(Connector_c target)", 
			"Relate performed across R8 from Floating Text to Connector without unrelate of prior instance.");  
		}
    }
                
    	IsTextForConnector = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_conn_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8From(Connector_c target)
{
	unrelateAcrossR8From(target, true);
}
public void unrelateAcrossR8From(Connector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsTextForConnector == null) return;  // already unrelated
	
	if (target != IsTextForConnector) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R8", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8To(this);
    }
    

      if(IsTextForConnector != null) {
      
        m_conn_elementid = IsTextForConnector.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_conn_elementid))
        {
          m_conn_elementid = IsTextForConnector.getElementidCachedValue();
        }       
        IsTextForConnector = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static FloatingText_c getOneGD_CTXTOnR8(Connector_c [] targets)
{
    return getOneGD_CTXTOnR8(targets, null);
}

public static FloatingText_c getOneGD_CTXTOnR8(Connector_c [] targets, ClassQueryInterface_c test)
{
    FloatingText_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_CTXTOnR8(targets[i], test);
        }
    }

    return ret_val;
}

public static FloatingText_c getOneGD_CTXTOnR8(Connector_c target)
{
  return getOneGD_CTXTOnR8(target, null);
}

public static FloatingText_c getOneGD_CTXTOnR8(Connector_c target, boolean loadComponent)
{
    return getOneGD_CTXTOnR8(target.getModelRoot(), target, null, loadComponent);
}

public static FloatingText_c getOneGD_CTXTOnR8(Connector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_CTXTOnR8(target.getModelRoot(), target, test);
  }
  return null;
}

public static FloatingText_c getOneGD_CTXTOnR8(ModelRoot modelRoot, Connector_c target, ClassQueryInterface_c test)
{
	return getOneGD_CTXTOnR8(modelRoot, target, test, true);
}

public static FloatingText_c getOneGD_CTXTOnR8(ModelRoot modelRoot, Connector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_CTXTOnR8(modelRoot,target,test);
}
private static FloatingText_c find_getOneGD_CTXTOnR8(ModelRoot modelRoot, Connector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasAsATextFloatingTextHasAsAText_R8) {
	    for ( int i = 0; i < target.backPointer_HasAsATextFloatingTextHasAsAText_R8.size(); ++i ) {
	      FloatingText_c source = (FloatingText_c)target.backPointer_HasAsATextFloatingTextHasAsAText_R8.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c [] targets)
{
  return getManyGD_CTXTsOnR8(targets, null);
}
public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c [] targets, boolean loadComponent)
{
  return getManyGD_CTXTsOnR8(targets, null, loadComponent);
}
public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_CTXTsOnR8(targets, test, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new FloatingText_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasAsATextFloatingTextHasAsAText_R8) {
	    for (int j = 0; j < targets[i].backPointer_HasAsATextFloatingTextHasAsAText_R8.size(); ++j) {
	      FloatingText_c source = (FloatingText_c)targets[i].backPointer_HasAsATextFloatingTextHasAsAText_R8.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	FloatingText_c[] ret_set = new FloatingText_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new FloatingText_c[0];
  }
  }

public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c target)
{
  return getManyGD_CTXTsOnR8(target, null);
}

public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c target, boolean loadComponent)
{
  return getManyGD_CTXTsOnR8(target, null, loadComponent);
}

public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c target, ClassQueryInterface_c test)
{
	return getManyGD_CTXTsOnR8(target, test, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR8(Connector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new FloatingText_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasAsATextFloatingTextHasAsAText_R8) {
    for (int i = 0; i < target.backPointer_HasAsATextFloatingTextHasAsAText_R8.size(); ++i) {
      FloatingText_c source = (FloatingText_c)target.backPointer_HasAsATextFloatingTextHasAsAText_R8.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		FloatingText_c[] ret_set = new FloatingText_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new FloatingText_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<TextInMove_c> backPointer_TextInMove_R14 = new ArrayList<TextInMove_c>();

public void setTextInMoveOrderInChildListR14(TextInMove_c target, int index) {
	unrelateAcrossR14From(target);
	TextInMove_c[] elements = TextInMove_c.getManyGD_TIMsOnR14(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR14From((TextInMove_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR14To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR14To((TextInMove_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR14To(TextInMove_c target)
{
  if (target != null) {
    target.relateAcrossR14To(this, true) ;
  }
}

public void relateAcrossR14To(TextInMove_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR14To(this, notifyChanges) ;
  }
}

public void setBackPointerR14To(TextInMove_c target)
{
  	synchronized (backPointer_TextInMove_R14) {
		backPointer_TextInMove_R14.add(target);
	}
}

public void unrelateAcrossR14From(TextInMove_c target)
{
  if (target != null) {
    target.unrelateAcrossR14From(this, true) ;
  }
}

public void unrelateAcrossR14From(TextInMove_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR14From(this, notifyChanges) ;
  }
}

public void clearBackPointerR14To(TextInMove_c target)
{
  synchronized (backPointer_TextInMove_R14) {
	    backPointer_TextInMove_R14.remove(target);
	}
}

public static FloatingText_c getOneGD_CTXTOnR14(TextInMove_c [] targets)
{
    return getOneGD_CTXTOnR14(targets, null);
}

public static FloatingText_c getOneGD_CTXTOnR14(TextInMove_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_CTXTOnR14(targets, test, true);
}

public static FloatingText_c getOneGD_CTXTOnR14(TextInMove_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    FloatingText_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             FloatingText_c candidate_val = getOneGD_CTXTOnR14(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_CTXTOnR14(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static FloatingText_c getOneGD_CTXTOnR14(TextInMove_c target)
{
	return getOneGD_CTXTOnR14(target, true);
}
public static FloatingText_c getOneGD_CTXTOnR14(TextInMove_c target, boolean loadComponent)
{
  if (target != null) {
    return target.FloatingText ;
  } else {
    return null;
  }
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_CTXTsOnR14(targets, test, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new FloatingText_c[0];
  
  
  LinkedHashSet<FloatingText_c> elementsSet = new LinkedHashSet<FloatingText_c>();
  for (int i = 0; i < targets.length; i++) {
    FloatingText_c associate = targets[i].FloatingText;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  FloatingText_c[] result = new FloatingText_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c [] targets)
{
  return getManyGD_CTXTsOnR14(targets, null);
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TextInMove_c [] targetArray = new TextInMove_c[1];
    targetArray[0] = target;
    return getManyGD_CTXTsOnR14(targetArray, test, loadComponent);
  } else {
    FloatingText_c [] result = new FloatingText_c [0] ;
    return result ;
  }
  
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_CTXTsOnR14(target, null, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c target)
{
    return getManyGD_CTXTsOnR14(target, null, true);
}

public static FloatingText_c [] getManyGD_CTXTsOnR14(TextInMove_c target, boolean loadComponent)
{
    return getManyGD_CTXTsOnR14(target, null, loadComponent);
}

public static FloatingText_c getOneGD_CTXTOnR14(Model_c target)
{
  return FloatingText_c.getOneGD_CTXTOnR14(TextInMove_c.getOneGD_TIMOnR14(target)) ;
}

public static FloatingText_c getOneGD_CTXTOnR14(Model_c target,
    ClassQueryInterface_c test)
{
  return FloatingText_c.getOneGD_CTXTOnR14(TextInMove_c.getManyGD_TIMsOnR14(target), test) ;
}



      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R19
      Graphnode_c relInst22265 = (Graphnode_c) baseRoot.getInstanceList(Graphnode_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22265 == null) {
      			relInst22265 = (Graphnode_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphnode_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst22265 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22265) && !isProxy())) {
	      relInst22265.relateAcrossR19To(this, notifyChanges);
	  }
	  }
	          

	if (IsTextForShape == null) {          
      // R27
      Shape_c relInst22266 = (Shape_c) baseRoot.getInstanceList(Shape_c.class).get(new Object[] {m_conn_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22266 == null) {
      			relInst22266 = (Shape_c) Ooaofooa.getDefaultInstance().getInstanceList(Shape_c.class).get(new Object[] {m_conn_elementid});
      		}
			//synchronized
      if ( relInst22266 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22266) && !isProxy())) {
	      relInst22266.relateAcrossR27To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsTextForConnector == null) {          
      // R8
      Connector_c relInst22267 = (Connector_c) baseRoot.getInstanceList(Connector_c.class).get(new Object[] {m_conn_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22267 == null) {
      			relInst22267 = (Connector_c) Ooaofooa.getDefaultInstance().getInstanceList(Connector_c.class).get(new Object[] {m_conn_elementid});
      		}
			//synchronized
      if ( relInst22267 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22267) && !isProxy())) {
	      relInst22267.relateAcrossR8To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R19
      // DIM_ND
		  inst=IsSupertypeGraphnode;
			unrelateAcrossR19From(IsSupertypeGraphnode, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R27
      // GD_SHP
		  inst=IsTextForShape;
			unrelateAcrossR27From(IsTextForShape, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R8
      // GD_CON
		  inst=IsTextForConnector;
			unrelateAcrossR8From(IsTextForConnector, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final FloatingText_c inst = (FloatingText_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static FloatingText_c FloatingTextInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		FloatingText_c result=findFloatingTextInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static FloatingText_c findFloatingTextInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				FloatingText_c x = (FloatingText_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static FloatingText_c FloatingTextInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return FloatingTextInstance(modelRoot,test,true);
  }
  
  public static FloatingText_c FloatingTextInstance(ModelRoot modelRoot)
  {
	 return FloatingTextInstance(modelRoot,null,true);
  }

  public static FloatingText_c [] FloatingTextInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(FloatingText_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					FloatingText_c x = (FloatingText_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				FloatingText_c[] ret_set = new FloatingText_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new FloatingText_c[0];
			}		
		} 
  }
  public static FloatingText_c [] FloatingTextInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  FloatingTextInstances(modelRoot,test,true);
  }
  public static FloatingText_c [] FloatingTextInstances(ModelRoot modelRoot)
  {
	return FloatingTextInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Floating Text.dispose call: ";
	Graphnode_c testR19Inst2 = Graphnode_c.getOneDIM_NDOnR19(this, false);

	if ( testR19Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "19 ";
	}
 	TextInMove_c testR14Inst = TextInMove_c.getOneGD_TIMOnR14(this, false);

 	if ( testR14Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "14 ";
 	}
	Shape_c testR27Inst = Shape_c.getOneGD_SHPOnR27(this, false);

	if ( testR27Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "27 ";
	}
	Connector_c testR8Inst = Connector_c.getOneGD_CONOnR8(this, false);

	if ( testR8Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "8 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Floating Text", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("conn_elementid")){
         return true;
      }
      if(attributeName.equals("elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public float getDeltax()
  {
    return m_deltax ;
  }


  public void setDeltax(float newValue)
  {
    if(m_deltax == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Deltax", new Float(m_deltax), new Float(newValue),true);

   m_deltax = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public float getDeltay()
  {
    return m_deltay ;
  }


  public void setDeltay(float newValue)
  {
    if(m_deltay == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Deltay", new Float(m_deltay), new Float(newValue),true);

   m_deltay = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getEnd()
  {
    return m_end ;
  }


  public void setEnd(int newValue)
  {
    if(m_end == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "End", new Integer(m_end), new Integer(newValue),true);

   m_end = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getConn_elementidLongBased()
  {
    if ( IsTextForShape != null )
    {
      return IsTextForShape.getElementidLongBased();
    }
    if ( IsTextForConnector != null )
    {
      return IsTextForConnector.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getConn_elementid()
  {
    if ( IsTextForShape != null )
    {
      return IsTextForShape.getElementid();
    }
    if ( IsTextForConnector != null )
    {
      return IsTextForConnector.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getConn_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_conn_elementid) )
      return m_conn_elementid;
    else
      return getConn_elementid();
  }
  
  public long getElementidLongBased()
  {
    if ( IsSupertypeGraphnode != null )
    {
      return IsSupertypeGraphnode.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( IsSupertypeGraphnode != null )
    {
      return IsSupertypeGraphnode.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeGraphnode != null );
 
 }                  

  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public void setElementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_elementid)){
	        return;
	    }
	}else if(m_elementid != null){
	    if(m_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Elementid", m_elementid, newValue,true); 
   m_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Floating Text", //$NON-NLS-1$
	  " Operation entered: Floating Text::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     FloatingText_c [] objs = FloatingText_c.FloatingTextInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Floating Text", //$NON-NLS-1$
	  " Operation entered: Floating Text::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class FloatingText_c_test22269_c implements ClassQueryInterface_c
    {
	  FloatingText_c_test22269_c( java.util.UUID            p22270 ) {
	  m_p22270 = p22270;
	  }
	  private java.util.UUID             m_p22270; 
	  public boolean evaluate (Object candidate)
	  {
	      FloatingText_c selected = (FloatingText_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22270));
	      return retval;
	  }
    }

    FloatingText_c [] objs22268 = 
    FloatingText_c.FloatingTextInstances(modelRoot, new FloatingText_c_test22269_c(getElementid())) ;

    if ( (  (objs22268.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Floating Text", //$NON-NLS-1$
           "Consistency: Object: Floating Text: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22268.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Floating Text: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22268.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22268.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Floating Text", //$NON-NLS-1$
           "Consistency: Object: Floating Text: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22268.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Floating Text: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22268.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Floating Text is a referring class in association: rel.Numb = 27
          // The participating class is: Shape
    class Shape_c_test22274_c implements ClassQueryInterface_c
    {
	  Shape_c_test22274_c( java.util.UUID            p22275 ) {
	  m_p22275 = p22275;
	  }
	  private java.util.UUID             m_p22275; 
	  public boolean evaluate (Object candidate)
	  {
	      Shape_c selected = (Shape_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22275));
	      return retval;
	  }
    }

    Shape_c [] objs22273 = 
    Shape_c.ShapeInstances(modelRoot, new Shape_c_test22274_c(getConn_elementid())) ;

    if ( (  (objs22273.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Floating Text", //$NON-NLS-1$
           "Consistency: Object: Floating Text: Association: 27: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22273.length )  + " conn_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Floating Text: Association: 27: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22273.length )  + " conn_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Floating Text is a referring class in association: rel.Numb = 8
          // The participating class is: Connector
    class Connector_c_test22277_c implements ClassQueryInterface_c
    {
	  Connector_c_test22277_c( java.util.UUID            p22278 ) {
	  m_p22278 = p22278;
	  }
	  private java.util.UUID             m_p22278; 
	  public boolean evaluate (Object candidate)
	  {
	      Connector_c selected = (Connector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22278));
	      return retval;
	  }
    }

    Connector_c [] objs22276 = 
    Connector_c.ConnectorInstances(modelRoot, new Connector_c_test22277_c(getConn_elementid())) ;

    if ( (  (objs22276.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Floating Text", //$NON-NLS-1$
           "Consistency: Object: Floating Text: Association: 8: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22276.length )  + " conn_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Floating Text: Association: 8: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22276.length )  + " conn_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Floating Text is a subtype in association: rel.Numb = 19
          // The supertype class is: GraphNode
    class Graphnode_c_test22280_c implements ClassQueryInterface_c
    {
	  Graphnode_c_test22280_c( java.util.UUID            p22281 ) {
	  m_p22281 = p22281;
	  }
	  private java.util.UUID             m_p22281; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphnode_c selected = (Graphnode_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22281));
	      return retval;
	  }
    }

    Graphnode_c [] objs22279 = 
    Graphnode_c.GraphnodeInstances(modelRoot, new Graphnode_c_test22280_c(getElementid())) ;

    if ( (  (objs22279.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Floating Text", //$NON-NLS-1$
           "Consistency: Object: Floating Text: Association: 19: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22279.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Floating Text: Association: 19: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22279.length )  , e); 
      }
      retval = false;

    }

          // Associated Other Side: rel.Numb = 14
            // Link Object: Text In Move
    return retval;
  }


  // declare transform functions
  public  void Move(final float        p_Xdelta,final float        p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Move") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);


Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(v_node);


if ( (v_element.getPositionx() != 0 && v_element.getPositiony() != 0) )
{

if (v_element != null) {
  v_element.setPositionx( v_element.getPositionx() + p_Xdelta) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_element != null) {
  v_element.setPositiony( v_element.getPositiony() + p_Ydelta) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


   } // End move
  public  boolean      Isover(final int          p_Scaled_x,final int          p_Scaled_y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Isover") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);


Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(v_node);


if ( (p_Scaled_x > v_element.getPositionx() && p_Scaled_x < v_element.getPositionx() + v_node.getWidth()) )
{

if ( (p_Scaled_y > v_element.getPositiony() && p_Scaled_y < v_element.getPositiony() + v_node.getHeight()) )
{

return true;



}


}

return false;



   } // End isOver
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);


if ( (  (v_node != null)) )
{

if (v_node != null) {
v_node.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Model_c v_mdl = Model_c.getOneGD_MDOnR14(this);


if ( (  (v_mdl != null)) )
{

TextInMove_c v_tim = TextInMove_c.getOneGD_TIMOnR14(this);


if (v_tim != null) {
v_tim.unrelateAcrossR14From( this ) ; v_tim.unrelateAcrossR14From( v_mdl ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_tim != null) {
// get the location of this element in the instance list
// before deleting
if ( v_tim.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_tim));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

Connector_c v_conn = Connector_c.getOneGD_CONOnR8(this);


if ( (  (v_conn != null)) )
{

this.unrelateAcrossR8From(v_conn);



}

Shape_c v_shape = Shape_c.getOneGD_SHPOnR27(this);


if ( (  (v_shape != null)) )
{

this.unrelateAcrossR27From(v_shape);



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



}


   } // End dispose
  public  void Createsupertypeinstances()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Createsupertypeinstances") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphnode_c v_node = new Graphnode_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_node));


if (v_node != null) {
  v_node.relateAcrossR19To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphelement_c v_graphElem = new Graphelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_graphElem));


if (v_graphElem != null) {
  v_graphElem.relateAcrossR301To(v_node);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Diagramelement_c v_diaElem = new Diagramelement_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_diaElem));


if (v_diaElem != null) {
  v_diaElem.relateAcrossR302To(v_graphElem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End createSupertypeInstances
  public  int  Isoververtex(final int          p_Scaled_x,final int          p_Scaled_y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Isoververtex") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);


Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(v_node);


if ( (Gr_c.Iswithinhotspot(			    
p_Scaled_x			    
,(int)(v_element.getPositionx())			    
,p_Scaled_y			    
,(int)(v_element.getPositiony()))) )
{

return Vertex_c.NW;



}

if ( (Gr_c.Iswithinhotspot(			    
p_Scaled_x			    
,(int)(v_element.getPositionx())			    
,p_Scaled_y			    
,(int)(v_element.getPositiony() + v_node.getHeight()))) )
{

return Vertex_c.SW;



}

if ( (Gr_c.Iswithinhotspot(			    
p_Scaled_x			    
,(int)(v_element.getPositionx() + v_node.getWidth())			    
,p_Scaled_y			    
,(int)(v_element.getPositiony() + v_node.getHeight()))) )
{

return Vertex_c.SE;



}

if ( (Gr_c.Iswithinhotspot(			    
p_Scaled_x			    
,(int)(v_element.getPositionx() + v_node.getWidth())			    
,p_Scaled_y			    
,(int)(v_element.getPositiony()))) )
{

return Vertex_c.NE;



}

return Vertex_c.None;



   } // End isOverVertex
  public  void Movevertex(final int  p_Vertex,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Movevertex") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);


Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(v_node);


float        v_nw_x = v_element.getPositionx() ;


float        v_nw_y = v_element.getPositiony() ;


float        v_se_x = v_element.getPositionx() + v_node.getWidth() ;


float        v_se_y = v_element.getPositiony() + v_node.getHeight() ;


if ( (p_Vertex == Vertex_c.NW) )
{

v_nw_x = v_nw_x + p_Xdelta ;


v_nw_y = v_nw_y + p_Xdelta ;



}

if ( (p_Vertex == Vertex_c.SE) )
{

v_se_x = v_se_x + p_Xdelta ;


v_se_y = v_se_y + p_Ydelta ;



}

if ( (p_Vertex == Vertex_c.NE) )
{

v_se_x = v_se_x + p_Xdelta ;


v_nw_y = v_nw_y + p_Ydelta ;



}

if ( (p_Vertex == Vertex_c.SW) )
{

v_nw_x = v_nw_x + p_Xdelta ;


v_se_y = v_se_y + p_Ydelta ;



}

if ( ((v_se_x - v_nw_x > Gr_c.Getminshapesize()) && (v_se_y - v_nw_y > Gr_c.Getminshapesize())) )
{

if (v_element != null) {
  v_element.setPositionx( v_nw_x) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_element != null) {
  v_element.setPositiony( v_nw_y) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_node != null) {
  v_node.setWidth( v_se_x - v_nw_x) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_node != null) {
  v_node.setHeight( v_se_y - v_nw_y) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


   } // End moveVertex
  public  void Drawtext(final int  p_At,final GCDelegate p_Context,final boolean      p_Disable_selection,final String       p_Text,final int          p_X1,final int          p_X2,final int          p_Y1,final int          p_Y2)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Drawtext") ; 
               final ModelRoot modelRoot = getModelRoot();
Connector_c v_conn = Connector_c.getOneGD_CONOnR8(this);


Shape_c v_shp = Shape_c.getOneGD_SHPOnR27(this);


Diagram_c v_diagram = Diagram_c.DiagramInstance(modelRoot) ;


boolean      v_elem_selected = false ;


if ( (  (v_conn != null)) )
{

GraphicalElement_c v_elem = GraphicalElement_c.getOneGD_GEOnR2(v_conn);


Model_c v_canvas = Model_c.getOneGD_MDOnR1(v_elem);


v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


v_elem_selected = Cl_c.Isselected(			    
v_elem.getRepresents()) ;



}

else
{

GraphicalElement_c v_elem = GraphicalElement_c.getOneGD_GEOnR2(v_shp);


Model_c v_canvas = Model_c.getOneGD_MDOnR1(v_elem);


v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


v_elem_selected = Cl_c.Isselected(			    
v_elem.getRepresents()) ;



}

Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);


Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(v_node);


float        v_text_x = v_element.getPositionx() - v_diagram.getViewportx() ;


float        v_text_y = v_element.getPositiony() - v_diagram.getViewporty() ;


float        v_text_w = v_node.getWidth() ;


float        v_text_h = v_node.getHeight() ;


if ( (v_text_w == 0 && v_text_h == 0) )
{

v_text_w = Gr_c.Getdefaulttextwidth() ;



}

String       v_textToDraw = Gr_c.Wraptextto(			    
p_Context			    
,p_Text			    
,(int)(v_text_w)) ;


if ( (v_text_x ==   - v_diagram.getViewportx() && v_text_y ==   - v_diagram.getViewporty()) )
{

float        v_angle = 0.0f ;


if ( (p_At == End_c.Start) )
{

v_angle = Gr_c.Getangle(			    
p_X1			    
,p_X2			    
,p_Y1			    
,p_Y2) ;


v_text_x = p_X1 + getDeltax() ;


v_text_y = p_Y1 + getDeltay() ;



}

else if ( (p_At == End_c.End) )
{

v_angle = Gr_c.Getangle(			    
p_X2			    
,p_X1			    
,p_Y2			    
,p_Y1) ;


v_text_x = p_X2 + getDeltax() ;


v_text_y = p_Y2 + getDeltay() ;



}

else
{

v_angle = Gr_c.Getangle(			    
p_X1			    
,p_X2			    
,p_Y1			    
,p_Y2) ;


v_text_x = p_X1 + ((p_X2 - p_X1) / 2) + getDeltax() ;


v_text_y = p_Y1 + ((p_Y2 - p_Y1) / 2) + getDeltay() ;



}

int  v_dir = Gr_c.Getdirection(			    
v_angle) ;


if ( (p_At == End_c.Middle) )
{

if ( (v_dir == Direction_c.North || v_dir == Direction_c.South) )
{

v_text_x = v_text_x - 10 - Gr_c.Gettextextent(			    
Axis_c.X			    
,p_Context			    
,v_textToDraw) ;


v_text_y = v_text_y - (Gr_c.Gettextextent(			    
Axis_c.Y			    
,p_Context			    
,v_textToDraw) / 2) ;



}

else
{

v_text_x = v_text_x - (Gr_c.Gettextextent(			    
Axis_c.X			    
,p_Context			    
,v_textToDraw) / 2) ;


v_text_y = v_text_y - 10 - Gr_c.Gettextextent(			    
Axis_c.Y			    
,p_Context			    
,v_textToDraw) ;



}


}

else
{

if ( (v_dir == Direction_c.North) )
{

v_text_x = v_text_x + 10 ;


v_text_y = v_text_y - 10 - Gr_c.Gettextextent(			    
Axis_c.Y			    
,p_Context			    
,v_textToDraw) ;



}

else if ( (v_dir == Direction_c.West) )
{

v_text_x = v_text_x - 10 - Gr_c.Gettextextent(			    
Axis_c.X			    
,p_Context			    
,v_textToDraw) ;


v_text_y = v_text_y + 20 ;



}

else
{

v_text_x = v_text_x + 10 ;


v_text_y = v_text_y + 10 ;



}


}

v_text_w = Gr_c.Gettextextent(			    
Axis_c.X			    
,p_Context			    
,v_textToDraw) ;


v_text_h = Gr_c.Gettextextent(			    
Axis_c.Y			    
,p_Context			    
,v_textToDraw) ;


if ( (v_text_w < Gr_c.Getminshapesize()) )
{

v_text_w = Gr_c.Getminshapesize() ;



}

if ( (v_text_h < Gr_c.Getminshapesize()) )
{

v_text_h = Gr_c.Getminshapesize() ;



}

if (v_element != null) {
  v_element.setPositionx( v_text_x + v_diagram.getViewportx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_element != null) {
  v_element.setPositiony( v_text_y + v_diagram.getViewporty()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_node != null) {
  v_node.setWidth( v_text_w) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_node != null) {
  v_node.setHeight( v_text_h) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

Gr_c.Drawtext(			    
p_Context			    
,Justification_c.Left			    
,v_textToDraw			    
,Style_c.None			    
,(int)(v_text_x)			    
,(int)(v_text_y) ) ;


if ( (v_elem_selected &&   !p_Disable_selection) )
{

Gr_c.Drawresizehandles(			    
p_Context			    
,(int)(v_text_h)			    
,(int)(v_text_w)			    
,(int)(v_text_x)			    
,(int)(v_text_y) ) ;



}


   } // End drawText
  public  void Setdefaultlocation(final int          p_Height,final int          p_Width)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Setdefaultlocation") ; 
               final ModelRoot modelRoot = getModelRoot();
float        v_angle = 0.0f ;


int          v_text_x = 0 ;


int          v_text_y = 0 ;


int          v_x1 = 0 ;


int          v_x2 = 0 ;


int          v_y1 = 0 ;


int          v_y2 = 0 ;


Connector_c v_connector = Connector_c.getOneGD_CONOnR8(this);


if ( (  (v_connector != null)) )
{

if ( (getEnd() == End_c.Start) )
{

java.util.UUID         v_startId = v_connector.Getstartingsegmentid() ;


  class LineSegment_test21573_c implements ClassQueryInterface_c
  {
	LineSegment_test21573_c( java.util.UUID         p21574 ) {
		m_p21574 = p21574;
	}
	private java.util.UUID         m_p21574;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21574)) ;
	}
  }
LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(v_connector, new LineSegment_test21573_c(v_startId));


Waypoint_c v_startWay = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_endWay = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


v_x1 = (int)(v_startWay.getPositionx()) ;


v_y1 = (int)(v_startWay.getPositiony()) ;


v_x2 = (int)(v_endWay.getPositionx()) ;


v_y2 = (int)(v_endWay.getPositiony()) ;



}

else if ( (getEnd() == End_c.End) )
{

java.util.UUID         v_endId = v_connector.Getendingsegmentid() ;


  class LineSegment_test21575_c implements ClassQueryInterface_c
  {
	LineSegment_test21575_c( java.util.UUID         p21576 ) {
		m_p21576 = p21576;
	}
	private java.util.UUID         m_p21576;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21576)) ;
	}
  }
LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(v_connector, new LineSegment_test21575_c(v_endId));


Waypoint_c v_startWay = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_endWay = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


v_x1 = (int)(v_startWay.getPositionx()) ;


v_y1 = (int)(v_startWay.getPositiony()) ;


v_x2 = (int)(v_endWay.getPositionx()) ;


v_y2 = (int)(v_endWay.getPositiony()) ;



}

else if ( (getEnd() == End_c.Middle) )
{

LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(v_connector);


LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR6(v_connector);


int          v_segCount =   (v_segments.length) ;


v_segCount = v_segCount / 2 ;


while ( (v_segCount > 1) )
{

v_seg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


v_segCount = v_segCount - 1 ;



}

if ( (  (v_segments.length) == 3) )
{

v_seg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);



}

Waypoint_c v_startWay = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


Waypoint_c v_endWay = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


v_x1 = (int)(v_startWay.getPositionx()) ;


v_y1 = (int)(v_startWay.getPositiony()) ;


v_x2 = (int)(v_endWay.getPositionx()) ;


v_y2 = (int)(v_endWay.getPositiony()) ;



}


}

Shape_c v_shape = Shape_c.getOneGD_SHPOnR27(this);


if ( (  (v_shape != null)) )
{

Graphelement_c v_shapeElem = Graphelement_c.getOneDIM_GEOnR23(GraphicalElement_c.getOneGD_GEOnR2(v_shape));


Graphnode_c v_shapeNode = Graphnode_c.getOneDIM_NDOnR19(v_shape);


int          v_yOffset = Gr_c.Getminshapesize() ;


v_x1 = (int)(v_shapeElem.getPositionx()) ;


v_x2 = (int)(v_shapeElem.getPositionx() + v_shapeNode.getWidth()) ;


v_y1 = (int)(v_shapeElem.getPositiony() + v_yOffset) ;


v_y2 = (int)(v_shapeElem.getPositiony() + v_yOffset) ;



}

if ( (getEnd() == End_c.Start) )
{

v_angle = Gr_c.Getangle(			    
v_x1			    
,v_x2			    
,v_y1			    
,v_y2) ;


v_text_x = (int)(v_x1 + getDeltax()) ;


v_text_y = (int)(v_y1 + getDeltay()) ;



}

else if ( (getEnd() == End_c.End) )
{

v_angle = Gr_c.Getangle(			    
v_x2			    
,v_x1			    
,v_y2			    
,v_y1) ;


v_text_x = (int)(v_x2 + getDeltax()) ;


v_text_y = (int)(v_y2 + getDeltay()) ;



}

else
{

v_angle = Gr_c.Getangle(			    
v_x1			    
,v_x2			    
,v_y1			    
,v_y2) ;


v_text_x = (int)(v_x1 + ((v_x2 - v_x1) / 2) + getDeltax()) ;


v_text_y = (int)(v_y1 + ((v_y2 - v_y1) / 2) + getDeltay()) ;



}

int  v_dir = Gr_c.Getdirection(			    
v_angle) ;


if ( (getEnd() == End_c.Middle) )
{

if ( (v_dir == Direction_c.North || v_dir == Direction_c.South) )
{

v_text_x = v_text_x - 25 - p_Width ;


v_text_y = v_text_y - (p_Height / 2) ;



}

else
{

v_text_x = v_text_x - (p_Width / 2) ;


v_text_y = v_text_y - 25 - p_Height ;



}


}

else
{

if ( (v_dir == Direction_c.North) )
{

v_text_x = v_text_x + 10 ;


v_text_y = v_text_y - 10 - p_Height ;



}

else if ( (v_dir == Direction_c.West) )
{

v_text_x = v_text_x - 10 - p_Width ;


v_text_y = v_text_y + 20 ;



}

else
{

v_text_x = v_text_x + 10 ;


v_text_y = v_text_y + 10 ;



}


}

Graphelement_c v_graphElem = Graphelement_c.getOneDIM_GEOnR301(Graphnode_c.getOneDIM_NDOnR19(this));


if (v_graphElem != null) {
  v_graphElem.setPositionx( v_text_x) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_graphElem != null) {
  v_graphElem.setPositiony( v_text_y) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



   } // End setDefaultLocation
  public  String       Get_name()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Floating Text", " Operation entered: FloatingText::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "Floating Text";



   } // End get_name

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Floating Text
