      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.GraphicalElement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_GRAPHICAL_ELEMENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class GraphicalElement_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public GraphicalElement_c(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_diagramid,
       java.util.UUID         p_m_ooa_id,
       int  p_m_ooa_type,
       Object p_m_represents,
       String       p_m_represents_path)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ooa_id = IdAssigner.preprocessUUID(p_m_ooa_id);
       //extract 28 bit value only            
       m_ooa_idLongBased = 0xfffffff & p_m_ooa_id.getLeastSignificantBits();
       m_represents = p_m_represents;
       m_ooa_type = p_m_ooa_type;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
       m_represents_path = p_m_represents_path;
        
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public GraphicalElement_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_diagramid,
       java.util.UUID         p_m_ooa_id,
       int  p_m_ooa_type,
       Object p_m_represents,
       String       p_m_represents_path, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);
      GraphicalElement_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (GraphicalElement_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ooa_id = IdAssigner.preprocessUUID(p_m_ooa_id);
       //extract 28 bit value only            
       new_inst.m_ooa_idLongBased = 0xfffffff & p_m_ooa_id.getLeastSignificantBits();
       new_inst.m_represents = p_m_represents;
       new_inst.m_ooa_type = p_m_ooa_type;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
       new_inst.m_represents_path = p_m_represents_path;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new GraphicalElement_c(modelRoot,
p_m_elementid,
p_m_diagramid,
p_m_ooa_id,
p_m_ooa_type,
p_m_represents,
p_m_represents_path
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public GraphicalElement_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_diagramid,
       java.util.UUID         p_m_ooa_id,
       int  p_m_ooa_type,
       Object p_m_represents,
       String       p_m_represents_path){
    InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);
    GraphicalElement_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (GraphicalElement_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ooa_id = IdAssigner.preprocessUUID(p_m_ooa_id);
       //extract 28 bit value only            
       source.m_ooa_idLongBased = 0xfffffff & p_m_ooa_id.getLeastSignificantBits();
       source.m_represents = p_m_represents;
       source.m_ooa_type = p_m_ooa_type;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
       source.m_represents_path = p_m_represents_path;
        
           return source ;
        }
      }
      // there is no instance matching the id
    GraphicalElement_c new_inst = new GraphicalElement_c(modelRoot,
p_m_elementid,
p_m_diagramid,
p_m_ooa_id,
p_m_ooa_type,
p_m_represents,
p_m_represents_path
);
    return new_inst;
  }
  public GraphicalElement_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_ooa_id = IdAssigner.NULL_UUID;   
     m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
     m_elementid = IdAssigner.NULL_UUID;   
     m_diagramid = IdAssigner.NULL_UUID;   
     m_represents_path = "";   
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof GraphicalElement_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof GraphicalElement_c)) {
           return false;
       }
       
       GraphicalElement_c me = (GraphicalElement_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((GraphicalElement_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((GraphicalElement_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof GraphicalElement_c)) {
           return false;
       }
       
       GraphicalElement_c me = (GraphicalElement_c)elem;
      if (!getElementidCachedValue().equals(((GraphicalElement_c)elem).getElementidCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_ooa_id ;
  private long m_ooa_idLongBased ;
  private Object m_represents ;
  private int  m_ooa_type ;
  private java.util.UUID         m_elementid ;
  private java.util.UUID         m_diagramid ;
  private String       m_represents_path ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphelement_c IsDimAnalogOfGraphelement ;
public void relateAcrossR23To(Graphelement_c target)
{
	relateAcrossR23To(target, true);
}
public void relateAcrossR23To(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDimAnalogOfGraphelement) return;  // already related

    if ( IsDimAnalogOfGraphelement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDimAnalogOfGraphelement != null) {
    
        IsDimAnalogOfGraphelement.clearBackPointerR23To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"GraphicalElement_c.relateAcrossR23To(Graphelement_c target)", 
			"Relate performed across R23 from Graphical Element to GraphElement without unrelate of prior instance.");  
		}
    }
                
    	IsDimAnalogOfGraphelement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR23To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "23", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR23From(Graphelement_c target)
{
	unrelateAcrossR23From(target, true);
}
public void unrelateAcrossR23From(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDimAnalogOfGraphelement == null) return;  // already unrelated
	
	if (target != IsDimAnalogOfGraphelement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R23", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR23To(this);
    }
    

      if(IsDimAnalogOfGraphelement != null) {
      
        m_elementid = IsDimAnalogOfGraphelement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = IsDimAnalogOfGraphelement.getElementidCachedValue();
        }       
        IsDimAnalogOfGraphelement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "23", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static GraphicalElement_c getOneGD_GEOnR23(Graphelement_c [] targets)
{
    return getOneGD_GEOnR23(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR23(Graphelement_c [] targets, ClassQueryInterface_c test)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_GEOnR23(targets[i], test);
        }
    }

    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR23(Graphelement_c target)
{
  return getOneGD_GEOnR23(target, null);
}

public static GraphicalElement_c getOneGD_GEOnR23(Graphelement_c target, boolean loadComponent)
{
    return getOneGD_GEOnR23(target.getModelRoot(), target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR23(Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_GEOnR23(target.getModelRoot(), target, test);
  }
  return null;
}

public static GraphicalElement_c getOneGD_GEOnR23(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
	return getOneGD_GEOnR23(modelRoot, target, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR23(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_GEOnR23(modelRoot,target,test);
}
private static GraphicalElement_c find_getOneGD_GEOnR23(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    GraphicalElement_c source = (GraphicalElement_c)target.backPointer_IsGraphicalDataAnalogOfGraphicalElementIsGraphicalDataAnalogOf_R23;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static GraphicalElement_c [] getManyGD_GEsOnR23(Graphelement_c [] targets)
{
  return getManyGD_GEsOnR23(targets, null);
}
public static GraphicalElement_c [] getManyGD_GEsOnR23(Graphelement_c [] targets, boolean loadComponent)
{
  return getManyGD_GEsOnR23(targets, null, loadComponent);
}
public static GraphicalElement_c [] getManyGD_GEsOnR23(Graphelement_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR23(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR23(Graphelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new GraphicalElement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      GraphicalElement_c source = (GraphicalElement_c)targets[i].backPointer_IsGraphicalDataAnalogOfGraphicalElementIsGraphicalDataAnalogOf_R23;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	GraphicalElement_c[] ret_set = new GraphicalElement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new GraphicalElement_c[0];
  }
  }

public static GraphicalElement_c [] getManyGD_GEsOnR23(Graphelement_c target)
{
  if (target != null) {
    Graphelement_c [] targetArray = new Graphelement_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR23(targetArray);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
  return result ;
}
}

public static GraphicalElement_c [] getManyGD_GEsOnR23(Graphelement_c target, boolean loadComponent)
{
  if (target != null) {
    Graphelement_c [] targetArray = new Graphelement_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR23(targetArray, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Model_c IsPartOfModel ;
public void relateAcrossR1To(Model_c target)
{
	relateAcrossR1To(target, true);
}
public void relateAcrossR1To(Model_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsPartOfModel) return;  // already related

    if ( IsPartOfModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsPartOfModel != null) {
    
        IsPartOfModel.clearBackPointerR1To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"GraphicalElement_c.relateAcrossR1To(Model_c target)", 
			"Relate performed across R1 from Graphical Element to Model without unrelate of prior instance.");  
		}
    }
                
    	IsPartOfModel = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDiagramid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_diagramid = target.getDiagramidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1From(Model_c target)
{
	unrelateAcrossR1From(target, true);
}
public void unrelateAcrossR1From(Model_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsPartOfModel == null) return;  // already unrelated
	
	if (target != IsPartOfModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R1", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1To(this);
    }
    

      if(IsPartOfModel != null) {
      
        m_diagramid = IsPartOfModel.getDiagramid();
        if(IdAssigner.NULL_UUID.equals(m_diagramid))
        {
          m_diagramid = IsPartOfModel.getDiagramidCachedValue();
        }       
        IsPartOfModel = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static GraphicalElement_c getOneGD_GEOnR1(Model_c [] targets)
{
    return getOneGD_GEOnR1(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR1(Model_c [] targets, ClassQueryInterface_c test)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_GEOnR1(targets[i], test);
        }
    }

    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR1(Model_c target)
{
  return getOneGD_GEOnR1(target, null);
}

public static GraphicalElement_c getOneGD_GEOnR1(Model_c target, boolean loadComponent)
{
    return getOneGD_GEOnR1(target.getModelRoot(), target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR1(Model_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_GEOnR1(target.getModelRoot(), target, test);
  }
  return null;
}

public static GraphicalElement_c getOneGD_GEOnR1(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test)
{
	return getOneGD_GEOnR1(modelRoot, target, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR1(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_GEOnR1(modelRoot,target,test);
}
private static GraphicalElement_c find_getOneGD_GEOnR1(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ContainsGraphicalElementContains_R1) {
	    for ( int i = 0; i < target.backPointer_ContainsGraphicalElementContains_R1.size(); ++i ) {
	      GraphicalElement_c source = (GraphicalElement_c)target.backPointer_ContainsGraphicalElementContains_R1.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c [] targets)
{
  return getManyGD_GEsOnR1(targets, null);
}
public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c [] targets, boolean loadComponent)
{
  return getManyGD_GEsOnR1(targets, null, loadComponent);
}
public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR1(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new GraphicalElement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ContainsGraphicalElementContains_R1) {
	    for (int j = 0; j < targets[i].backPointer_ContainsGraphicalElementContains_R1.size(); ++j) {
	      GraphicalElement_c source = (GraphicalElement_c)targets[i].backPointer_ContainsGraphicalElementContains_R1.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	GraphicalElement_c[] ret_set = new GraphicalElement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new GraphicalElement_c[0];
  }
  }

public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c target)
{
  return getManyGD_GEsOnR1(target, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c target, boolean loadComponent)
{
  return getManyGD_GEsOnR1(target, null, loadComponent);
}

public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c target, ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR1(target, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR1(Model_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new GraphicalElement_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_ContainsGraphicalElementContains_R1) {
    for (int i = 0; i < target.backPointer_ContainsGraphicalElementContains_R1.size(); ++i) {
      GraphicalElement_c source = (GraphicalElement_c)target.backPointer_ContainsGraphicalElementContains_R1.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		GraphicalElement_c[] ret_set = new GraphicalElement_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new GraphicalElement_c[0];
	}
  }


  
    
// referring navigation

ElementSpecification_c IsInstanceOfElementSpecification ;
public void relateAcrossR10To(ElementSpecification_c target)
{
	relateAcrossR10To(target, true);
}
public void relateAcrossR10To(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsInstanceOfElementSpecification) return;  // already related

    if ( IsInstanceOfElementSpecification != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsInstanceOfElementSpecification != null) {
    
        IsInstanceOfElementSpecification.clearBackPointerR10To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"GraphicalElement_c.relateAcrossR10To(ElementSpecification_c target)", 
			"Relate performed across R10 from Graphical Element to Element Specification without unrelate of prior instance.");  
		}
    }
                
    	IsInstanceOfElementSpecification = target ;
        m_ooa_type = target.getOoa_type();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR10To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "10", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR10From(ElementSpecification_c target)
{
	unrelateAcrossR10From(target, true);
}
public void unrelateAcrossR10From(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsInstanceOfElementSpecification == null) return;  // already unrelated
	
	if (target != IsInstanceOfElementSpecification) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R10", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR10To(this);
    }
    

      if(IsInstanceOfElementSpecification != null) {
      
        m_ooa_type = IsInstanceOfElementSpecification.getOoa_type();
        IsInstanceOfElementSpecification = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "10", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static GraphicalElement_c getOneGD_GEOnR10(ElementSpecification_c [] targets)
{
    return getOneGD_GEOnR10(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR10(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_GEOnR10(targets[i], test);
        }
    }

    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR10(ElementSpecification_c target)
{
  return getOneGD_GEOnR10(target, null);
}

public static GraphicalElement_c getOneGD_GEOnR10(ElementSpecification_c target, boolean loadComponent)
{
    return getOneGD_GEOnR10(target.getModelRoot(), target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR10(ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_GEOnR10(target.getModelRoot(), target, test);
  }
  return null;
}

public static GraphicalElement_c getOneGD_GEOnR10(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
	return getOneGD_GEOnR10(modelRoot, target, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR10(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_GEOnR10(modelRoot,target,test);
}
private static GraphicalElement_c find_getOneGD_GEOnR10(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasInstanceGraphicalElementHasInstance_R10) {
	    for ( int i = 0; i < target.backPointer_HasInstanceGraphicalElementHasInstance_R10.size(); ++i ) {
	      GraphicalElement_c source = (GraphicalElement_c)target.backPointer_HasInstanceGraphicalElementHasInstance_R10.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c [] targets)
{
  return getManyGD_GEsOnR10(targets, null);
}
public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c [] targets, boolean loadComponent)
{
  return getManyGD_GEsOnR10(targets, null, loadComponent);
}
public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR10(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new GraphicalElement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasInstanceGraphicalElementHasInstance_R10) {
	    for (int j = 0; j < targets[i].backPointer_HasInstanceGraphicalElementHasInstance_R10.size(); ++j) {
	      GraphicalElement_c source = (GraphicalElement_c)targets[i].backPointer_HasInstanceGraphicalElementHasInstance_R10.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	GraphicalElement_c[] ret_set = new GraphicalElement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new GraphicalElement_c[0];
  }
  }

public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c target)
{
  return getManyGD_GEsOnR10(target, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c target, boolean loadComponent)
{
  return getManyGD_GEsOnR10(target, null, loadComponent);
}

public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c target, ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR10(target, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR10(ElementSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new GraphicalElement_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasInstanceGraphicalElementHasInstance_R10) {
    for (int i = 0; i < target.backPointer_HasInstanceGraphicalElementHasInstance_R10.size(); ++i) {
      GraphicalElement_c source = (GraphicalElement_c)target.backPointer_HasInstanceGraphicalElementHasInstance_R10.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		GraphicalElement_c[] ret_set = new GraphicalElement_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new GraphicalElement_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<TerminalSpecification_c> backPointer_MeetsCriteriaOfTerminalSpecificationMeetsCriteriaOf_R206 = new ArrayList<TerminalSpecification_c>();

public void setTerminalSpecificationOrderInChildListR206(TerminalSpecification_c target, int index) {
	unrelateAcrossR206From(target);
	TerminalSpecification_c[] elements = TerminalSpecification_c.getManyTS_TSPsOnR206(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR206From((TerminalSpecification_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR206To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR206To((TerminalSpecification_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR206To(TerminalSpecification_c target)
{
  if (target != null) {
    target.relateAcrossR206To(this, true) ;
  }
}

public void relateAcrossR206To(TerminalSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR206To(this, notifyChanges) ;
  }
}

public void setBackPointerR206To(TerminalSpecification_c target)
{
  	synchronized (backPointer_MeetsCriteriaOfTerminalSpecificationMeetsCriteriaOf_R206) {
		backPointer_MeetsCriteriaOfTerminalSpecificationMeetsCriteriaOf_R206.add(target);
	}
}

public void unrelateAcrossR206From(TerminalSpecification_c target)
{
  if (target != null) {
    target.unrelateAcrossR206From(this, true) ;
  }
}

public void unrelateAcrossR206From(TerminalSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR206From(this, notifyChanges) ;
  }
}

public void clearBackPointerR206To(TerminalSpecification_c target)
{
  synchronized (backPointer_MeetsCriteriaOfTerminalSpecificationMeetsCriteriaOf_R206) {
	    backPointer_MeetsCriteriaOfTerminalSpecificationMeetsCriteriaOf_R206.remove(target);
	}
}

public static GraphicalElement_c getOneGD_GEOnR206(TerminalSpecification_c [] targets)
{
    return getOneGD_GEOnR206(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR206(TerminalSpecification_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR206(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR206(TerminalSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR206(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR206(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR206(TerminalSpecification_c target)
{
	return getOneGD_GEOnR206(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR206(TerminalSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    return target.CriteriaLastMetByGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR206(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
    GraphicalElement_c associate = targets[i].CriteriaLastMetByGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c [] targets)
{
  return getManyGD_GEsOnR206(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TerminalSpecification_c [] targetArray = new TerminalSpecification_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR206(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR206(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c target)
{
    return getManyGD_GEsOnR206(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR206(TerminalSpecification_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR206(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Elementstyle_c> backPointer_ConfiguredByElementstyleConfiguredBy_R401 = new ArrayList<Elementstyle_c>();

public void setElementstyleOrderInChildListR401(Elementstyle_c target, int index) {
	unrelateAcrossR401From(target);
	Elementstyle_c[] elements = Elementstyle_c.getManySTY_SsOnR401(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR401From((Elementstyle_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR401To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR401To((Elementstyle_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR401To(Elementstyle_c target)
{
  if (target != null) {
    target.relateAcrossR401To(this, true) ;
  }
}

public void relateAcrossR401To(Elementstyle_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR401To(this, notifyChanges) ;
  }
}

public void setBackPointerR401To(Elementstyle_c target)
{
  	synchronized (backPointer_ConfiguredByElementstyleConfiguredBy_R401) {
		backPointer_ConfiguredByElementstyleConfiguredBy_R401.add(target);
	}
}

public void unrelateAcrossR401From(Elementstyle_c target)
{
  if (target != null) {
    target.unrelateAcrossR401From(this, true) ;
  }
}

public void unrelateAcrossR401From(Elementstyle_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR401From(this, notifyChanges) ;
  }
}

public void clearBackPointerR401To(Elementstyle_c target)
{
  synchronized (backPointer_ConfiguredByElementstyleConfiguredBy_R401) {
	    backPointer_ConfiguredByElementstyleConfiguredBy_R401.remove(target);
	}
}

public static GraphicalElement_c getOneGD_GEOnR401(Elementstyle_c [] targets)
{
    return getOneGD_GEOnR401(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR401(Elementstyle_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR401(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR401(Elementstyle_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR401(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR401(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR401(Elementstyle_c target)
{
	return getOneGD_GEOnR401(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR401(Elementstyle_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ConfiguresGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR401(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ConfiguresGraphicalElement == null)
	  targets[i].loadProxy();
    GraphicalElement_c associate = targets[i].ConfiguresGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c [] targets)
{
  return getManyGD_GEsOnR401(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Elementstyle_c [] targetArray = new Elementstyle_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR401(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR401(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c target)
{
    return getManyGD_GEsOnR401(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR401(Elementstyle_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR401(target, null, loadComponent);
}


    
  
  
// referred to navigation

Shape_c backPointer_IsSubtypeShapeIsSubtype_R2;

public void setShapeOrderInChildListR2(Shape_c target, int index) {
	unrelateAcrossR2From(target);
	Shape_c[] elements = Shape_c.getManyGD_SHPsOnR2(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2From((Shape_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2To((Shape_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2To(Shape_c target)
{
  if (target != null) {
    target.relateAcrossR2To(this, true) ;
  }
}

public void relateAcrossR2To(Shape_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2To(this, notifyChanges) ;
  }
}

public void setBackPointerR2To(Shape_c target)
{
    backPointer_IsSubtypeShapeIsSubtype_R2 = target;
}

public void unrelateAcrossR2From(Shape_c target)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, true) ;
  }
}

public void unrelateAcrossR2From(Shape_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2To(Shape_c target)
{
	if (target == backPointer_IsSubtypeShapeIsSubtype_R2) {
		backPointer_IsSubtypeShapeIsSubtype_R2 = null;
	}
}

public static GraphicalElement_c getOneGD_GEOnR2(Shape_c [] targets)
{
    return getOneGD_GEOnR2(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR2(Shape_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR2(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR2(Shape_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR2(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR2(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR2(Shape_c target)
{
	return getOneGD_GEOnR2(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR2(Shape_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR2(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphicalElement == null)
	  targets[i].loadProxy();
    GraphicalElement_c associate = targets[i].IsSupertypeGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c [] targets)
{
  return getManyGD_GEsOnR2(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Shape_c [] targetArray = new Shape_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR2(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR2(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c target)
{
    return getManyGD_GEsOnR2(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Shape_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR2(target, null, loadComponent);
}

  
  
  
// referred to navigation

Connector_c backPointer_IsSubtypeConnectorIsSubtype_R2;

public void setConnectorOrderInChildListR2(Connector_c target, int index) {
	unrelateAcrossR2From(target);
	Connector_c[] elements = Connector_c.getManyGD_CONsOnR2(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2From((Connector_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2To((Connector_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2To(Connector_c target)
{
  if (target != null) {
    target.relateAcrossR2To(this, true) ;
  }
}

public void relateAcrossR2To(Connector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2To(this, notifyChanges) ;
  }
}

public void setBackPointerR2To(Connector_c target)
{
    backPointer_IsSubtypeConnectorIsSubtype_R2 = target;
}

public void unrelateAcrossR2From(Connector_c target)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, true) ;
  }
}

public void unrelateAcrossR2From(Connector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2To(Connector_c target)
{
	if (target == backPointer_IsSubtypeConnectorIsSubtype_R2) {
		backPointer_IsSubtypeConnectorIsSubtype_R2 = null;
	}
}

public static GraphicalElement_c getOneGD_GEOnR2(Connector_c [] targets)
{
    return getOneGD_GEOnR2(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR2(Connector_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR2(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR2(Connector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR2(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR2(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR2(Connector_c target)
{
	return getOneGD_GEOnR2(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR2(Connector_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR2(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphicalElement == null)
	  targets[i].loadProxy();
    GraphicalElement_c associate = targets[i].IsSupertypeGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c [] targets)
{
  return getManyGD_GEsOnR2(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Connector_c [] targetArray = new Connector_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR2(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR2(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c target)
{
    return getManyGD_GEsOnR2(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR2(Connector_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR2(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ElementInResize_c> backPointer_IsResizedInElementInResizeIsResizedIn_R12 = new ArrayList<ElementInResize_c>();

public void setElementInResizeOrderInChildListR12(ElementInResize_c target, int index) {
	unrelateAcrossR12From(target);
	ElementInResize_c[] elements = ElementInResize_c.getManyGD_EIRsOnR12(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR12From((ElementInResize_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR12To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR12To((ElementInResize_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR12To(ElementInResize_c target)
{
  if (target != null) {
    target.relateAcrossR12To(this, true) ;
  }
}

public void relateAcrossR12To(ElementInResize_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR12To(this, notifyChanges) ;
  }
}

public void setBackPointerR12To(ElementInResize_c target)
{
  	synchronized (backPointer_IsResizedInElementInResizeIsResizedIn_R12) {
		backPointer_IsResizedInElementInResizeIsResizedIn_R12.add(target);
	}
}

public void unrelateAcrossR12From(ElementInResize_c target)
{
  if (target != null) {
    target.unrelateAcrossR12From(this, true) ;
  }
}

public void unrelateAcrossR12From(ElementInResize_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR12From(this, notifyChanges) ;
  }
}

public void clearBackPointerR12To(ElementInResize_c target)
{
  synchronized (backPointer_IsResizedInElementInResizeIsResizedIn_R12) {
	    backPointer_IsResizedInElementInResizeIsResizedIn_R12.remove(target);
	}
}

public static GraphicalElement_c getOneGD_GEOnR12(ElementInResize_c [] targets)
{
    return getOneGD_GEOnR12(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR12(ElementInResize_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR12(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR12(ElementInResize_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR12(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR12(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR12(ElementInResize_c target)
{
	return getOneGD_GEOnR12(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR12(ElementInResize_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsResizingGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR12(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
    GraphicalElement_c associate = targets[i].IsResizingGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c [] targets)
{
  return getManyGD_GEsOnR12(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElementInResize_c [] targetArray = new ElementInResize_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR12(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR12(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c target)
{
    return getManyGD_GEsOnR12(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR12(ElementInResize_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR12(target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR12(Model_c target)
{
  return GraphicalElement_c.getOneGD_GEOnR12(ElementInResize_c.getOneGD_EIROnR12(target)) ;
}

public static GraphicalElement_c getOneGD_GEOnR12(Model_c target,
    ClassQueryInterface_c test)
{
  return GraphicalElement_c.getOneGD_GEOnR12(ElementInResize_c.getManyGD_EIRsOnR12(target), test) ;
}



    
  
  
// referred to navigation

ArrayList<ElementInMove_c> backPointer_IsMovingInElementInMoveIsMovingIn_R25 = new ArrayList<ElementInMove_c>();

public void setElementInMoveOrderInChildListR25(ElementInMove_c target, int index) {
	unrelateAcrossR25From(target);
	ElementInMove_c[] elements = ElementInMove_c.getManyGD_EIMsOnR25(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR25From((ElementInMove_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR25To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR25To((ElementInMove_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR25To(ElementInMove_c target)
{
  if (target != null) {
    target.relateAcrossR25To(this, true) ;
  }
}

public void relateAcrossR25To(ElementInMove_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR25To(this, notifyChanges) ;
  }
}

public void setBackPointerR25To(ElementInMove_c target)
{
  	synchronized (backPointer_IsMovingInElementInMoveIsMovingIn_R25) {
		backPointer_IsMovingInElementInMoveIsMovingIn_R25.add(target);
	}
}

public void unrelateAcrossR25From(ElementInMove_c target)
{
  if (target != null) {
    target.unrelateAcrossR25From(this, true) ;
  }
}

public void unrelateAcrossR25From(ElementInMove_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR25From(this, notifyChanges) ;
  }
}

public void clearBackPointerR25To(ElementInMove_c target)
{
  synchronized (backPointer_IsMovingInElementInMoveIsMovingIn_R25) {
	    backPointer_IsMovingInElementInMoveIsMovingIn_R25.remove(target);
	}
}

public static GraphicalElement_c getOneGD_GEOnR25(ElementInMove_c [] targets)
{
    return getOneGD_GEOnR25(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR25(ElementInMove_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR25(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR25(ElementInMove_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR25(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR25(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR25(ElementInMove_c target)
{
	return getOneGD_GEOnR25(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR25(ElementInMove_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsMovingGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR25(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
    GraphicalElement_c associate = targets[i].IsMovingGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c [] targets)
{
  return getManyGD_GEsOnR25(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElementInMove_c [] targetArray = new ElementInMove_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR25(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR25(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c target)
{
    return getManyGD_GEsOnR25(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(ElementInMove_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR25(target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR25(Model_c target)
{
  return GraphicalElement_c.getOneGD_GEOnR25(ElementInMove_c.getOneGD_EIMOnR25(target)) ;
}

public static GraphicalElement_c getOneGD_GEOnR25(Model_c target,
    ClassQueryInterface_c test)
{
  return GraphicalElement_c.getOneGD_GEOnR25(ElementInMove_c.getManyGD_EIMsOnR25(target), test) ;
}

public static GraphicalElement_c [] getManyGD_GEsOnR25(Model_c target,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR25(target, test, true);
}
public static GraphicalElement_c [] getManyGD_GEsOnR25(Model_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ElementInMove_c [] associators = ElementInMove_c.getManyGD_EIMsOnR25(target, loadComponent) ;
    return GraphicalElement_c.getManyGD_GEsOnR25(associators, test, loadComponent) ;
}
public static GraphicalElement_c [] getManyGD_GEsOnR25(Model_c target)
{
    return getManyGD_GEsOnR25(target, null, true);
}
public static GraphicalElement_c [] getManyGD_GEsOnR25(Model_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR25(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ElementInSuppression_c> backPointer_ElementInSuppression_R32 = new ArrayList<ElementInSuppression_c>();

public void setElementInSuppressionOrderInChildListR32(ElementInSuppression_c target, int index) {
	unrelateAcrossR32From(target);
	ElementInSuppression_c[] elements = ElementInSuppression_c.getManyGD_EISsOnR32(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR32From((ElementInSuppression_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR32To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR32To((ElementInSuppression_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR32To(ElementInSuppression_c target)
{
  if (target != null) {
    target.relateAcrossR32To(this, true) ;
  }
}

public void relateAcrossR32To(ElementInSuppression_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR32To(this, notifyChanges) ;
  }
}

public void setBackPointerR32To(ElementInSuppression_c target)
{
  	synchronized (backPointer_ElementInSuppression_R32) {
		backPointer_ElementInSuppression_R32.add(target);
	}
}

public void unrelateAcrossR32From(ElementInSuppression_c target)
{
  if (target != null) {
    target.unrelateAcrossR32From(this, true) ;
  }
}

public void unrelateAcrossR32From(ElementInSuppression_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR32From(this, notifyChanges) ;
  }
}

public void clearBackPointerR32To(ElementInSuppression_c target)
{
  synchronized (backPointer_ElementInSuppression_R32) {
	    backPointer_ElementInSuppression_R32.remove(target);
	}
}

public static GraphicalElement_c getOneGD_GEOnR32(ElementInSuppression_c [] targets)
{
    return getOneGD_GEOnR32(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR32(ElementInSuppression_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR32(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR32(ElementInSuppression_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR32(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR32(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR32(ElementInSuppression_c target)
{
	return getOneGD_GEOnR32(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR32(ElementInSuppression_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.GraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR32(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].GraphicalElement == null)
	  targets[i].loadProxy();
    GraphicalElement_c associate = targets[i].GraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c [] targets)
{
  return getManyGD_GEsOnR32(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElementInSuppression_c [] targetArray = new ElementInSuppression_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR32(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR32(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c target)
{
    return getManyGD_GEsOnR32(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(ElementInSuppression_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR32(target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR32(Model_c target)
{
  return GraphicalElement_c.getOneGD_GEOnR32(ElementInSuppression_c.getOneGD_EISOnR32(target)) ;
}

public static GraphicalElement_c getOneGD_GEOnR32(Model_c target,
    ClassQueryInterface_c test)
{
  return GraphicalElement_c.getOneGD_GEOnR32(ElementInSuppression_c.getManyGD_EISsOnR32(target), test) ;
}

public static GraphicalElement_c [] getManyGD_GEsOnR32(Model_c target,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR32(target, test, true);
}
public static GraphicalElement_c [] getManyGD_GEsOnR32(Model_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ElementInSuppression_c [] associators = ElementInSuppression_c.getManyGD_EISsOnR32(target, loadComponent) ;
    return GraphicalElement_c.getManyGD_GEsOnR32(associators, test, loadComponent) ;
}
public static GraphicalElement_c [] getManyGD_GEsOnR32(Model_c target)
{
    return getManyGD_GEsOnR32(target, null, true);
}
public static GraphicalElement_c [] getManyGD_GEsOnR32(Model_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR32(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Graphicalelementinlayer_c> backPointer_ContainedInGraphicalelementinlayerContainedIn_R35 = new ArrayList<Graphicalelementinlayer_c>();

public void setGraphicalelementinlayerOrderInChildListR35(Graphicalelementinlayer_c target, int index) {
	unrelateAcrossR35From(target);
	Graphicalelementinlayer_c[] elements = Graphicalelementinlayer_c.getManyGD_GLAYsOnR35(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR35From((Graphicalelementinlayer_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR35To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR35To((Graphicalelementinlayer_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR35To(Graphicalelementinlayer_c target)
{
  if (target != null) {
    target.relateAcrossR35To(this, true) ;
  }
}

public void relateAcrossR35To(Graphicalelementinlayer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR35To(this, notifyChanges) ;
  }
}

public void setBackPointerR35To(Graphicalelementinlayer_c target)
{
  	synchronized (backPointer_ContainedInGraphicalelementinlayerContainedIn_R35) {
		backPointer_ContainedInGraphicalelementinlayerContainedIn_R35.add(target);
	}
}

public void unrelateAcrossR35From(Graphicalelementinlayer_c target)
{
  if (target != null) {
    target.unrelateAcrossR35From(this, true) ;
  }
}

public void unrelateAcrossR35From(Graphicalelementinlayer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR35From(this, notifyChanges) ;
  }
}

public void clearBackPointerR35To(Graphicalelementinlayer_c target)
{
  synchronized (backPointer_ContainedInGraphicalelementinlayerContainedIn_R35) {
	    backPointer_ContainedInGraphicalelementinlayerContainedIn_R35.remove(target);
	}
}

public static GraphicalElement_c getOneGD_GEOnR35(Graphicalelementinlayer_c [] targets)
{
    return getOneGD_GEOnR35(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR35(Graphicalelementinlayer_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR35(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR35(Graphicalelementinlayer_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR35(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR35(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR35(Graphicalelementinlayer_c target)
{
	return getOneGD_GEOnR35(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR35(Graphicalelementinlayer_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainsGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR35(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainsGraphicalElement == null)
	  targets[i].loadProxy();
    GraphicalElement_c associate = targets[i].ContainsGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c [] targets)
{
  return getManyGD_GEsOnR35(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphicalelementinlayer_c [] targetArray = new Graphicalelementinlayer_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR35(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR35(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c target)
{
    return getManyGD_GEsOnR35(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Graphicalelementinlayer_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR35(target, null, loadComponent);
}

public static GraphicalElement_c getOneGD_GEOnR35(Layer_c target)
{
  return GraphicalElement_c.getOneGD_GEOnR35(Graphicalelementinlayer_c.getOneGD_GLAYOnR35(target)) ;
}

public static GraphicalElement_c getOneGD_GEOnR35(Layer_c target,
    ClassQueryInterface_c test)
{
  return GraphicalElement_c.getOneGD_GEOnR35(Graphicalelementinlayer_c.getManyGD_GLAYsOnR35(target), test) ;
}

public static GraphicalElement_c [] getManyGD_GEsOnR35(Layer_c target,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR35(target, test, true);
}
public static GraphicalElement_c [] getManyGD_GEsOnR35(Layer_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  Graphicalelementinlayer_c [] associators = Graphicalelementinlayer_c.getManyGD_GLAYsOnR35(target, loadComponent) ;
    return GraphicalElement_c.getManyGD_GEsOnR35(associators, test, loadComponent) ;
}
public static GraphicalElement_c [] getManyGD_GEsOnR35(Layer_c target)
{
    return getManyGD_GEsOnR35(target, null, true);
}
public static GraphicalElement_c [] getManyGD_GEsOnR35(Layer_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR35(target, null, loadComponent);
}


    
  
  
// referred to navigation

ElementSpecification_c backPointer_IsBeingCreatedByElementSpecificationIsBeingCreatedBy_R16;

public void setElementSpecificationOrderInChildListR16(ElementSpecification_c target, int index) {
	unrelateAcrossR16From(target);
	ElementSpecification_c[] elements = ElementSpecification_c.getManyGD_ESsOnR16(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR16From((ElementSpecification_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR16To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR16To((ElementSpecification_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR16To(ElementSpecification_c target)
{
  if (target != null) {
    target.relateAcrossR16To(this, true) ;
  }
}

public void relateAcrossR16To(ElementSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR16To(this, notifyChanges) ;
  }
}

public void setBackPointerR16To(ElementSpecification_c target)
{
    backPointer_IsBeingCreatedByElementSpecificationIsBeingCreatedBy_R16 = target;
}

public void unrelateAcrossR16From(ElementSpecification_c target)
{
  if (target != null) {
    target.unrelateAcrossR16From(this, true) ;
  }
}

public void unrelateAcrossR16From(ElementSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR16From(this, notifyChanges) ;
  }
}

public void clearBackPointerR16To(ElementSpecification_c target)
{
	if (target == backPointer_IsBeingCreatedByElementSpecificationIsBeingCreatedBy_R16) {
		backPointer_IsBeingCreatedByElementSpecificationIsBeingCreatedBy_R16 = null;
	}
}

public static GraphicalElement_c getOneGD_GEOnR16(ElementSpecification_c [] targets)
{
    return getOneGD_GEOnR16(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR16(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR16(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR16(ElementSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR16(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR16(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR16(ElementSpecification_c target)
{
	return getOneGD_GEOnR16(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR16(ElementSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsCreatingGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR16(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
    GraphicalElement_c associate = targets[i].IsCreatingGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c [] targets)
{
  return getManyGD_GEsOnR16(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElementSpecification_c [] targetArray = new ElementSpecification_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR16(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR16(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c target)
{
    return getManyGD_GEsOnR16(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR16(ElementSpecification_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR16(target, null, loadComponent);
}


    
  
  
// referred to navigation

ConnectorTool_c backPointer_StartConnectorToolStart_R104;

public void setConnectorToolOrderInChildListR104(ConnectorTool_c target, int index) {
	unrelateAcrossR104From(target);
	ConnectorTool_c[] elements = ConnectorTool_c.getManyCT_CTLsOnR104(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR104From((ConnectorTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR104To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR104To((ConnectorTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR104To(ConnectorTool_c target)
{
  if (target != null) {
    target.relateAcrossR104To(this, true) ;
  }
}

public void relateAcrossR104To(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR104To(this, notifyChanges) ;
  }
}

public void setBackPointerR104To(ConnectorTool_c target)
{
    backPointer_StartConnectorToolStart_R104 = target;
}

public void unrelateAcrossR104From(ConnectorTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR104From(this, true) ;
  }
}

public void unrelateAcrossR104From(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR104From(this, notifyChanges) ;
  }
}

public void clearBackPointerR104To(ConnectorTool_c target)
{
	if (target == backPointer_StartConnectorToolStart_R104) {
		backPointer_StartConnectorToolStart_R104 = null;
	}
}

public static GraphicalElement_c getOneGD_GEOnR104(ConnectorTool_c [] targets)
{
    return getOneGD_GEOnR104(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR104(ConnectorTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR104(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR104(ConnectorTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR104(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR104(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR104(ConnectorTool_c target)
{
	return getOneGD_GEOnR104(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR104(ConnectorTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsStartingAtGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR104(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
    GraphicalElement_c associate = targets[i].IsStartingAtGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c [] targets)
{
  return getManyGD_GEsOnR104(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ConnectorTool_c [] targetArray = new ConnectorTool_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR104(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR104(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c target)
{
    return getManyGD_GEsOnR104(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR104(ConnectorTool_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR104(target, null, loadComponent);
}


    
  
  
// referred to navigation

ConnectorTool_c backPointer_EndConnectorToolEnd_R105;

public void setConnectorToolOrderInChildListR105(ConnectorTool_c target, int index) {
	unrelateAcrossR105From(target);
	ConnectorTool_c[] elements = ConnectorTool_c.getManyCT_CTLsOnR105(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR105From((ConnectorTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR105To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR105To((ConnectorTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR105To(ConnectorTool_c target)
{
  if (target != null) {
    target.relateAcrossR105To(this, true) ;
  }
}

public void relateAcrossR105To(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR105To(this, notifyChanges) ;
  }
}

public void setBackPointerR105To(ConnectorTool_c target)
{
    backPointer_EndConnectorToolEnd_R105 = target;
}

public void unrelateAcrossR105From(ConnectorTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR105From(this, true) ;
  }
}

public void unrelateAcrossR105From(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR105From(this, notifyChanges) ;
  }
}

public void clearBackPointerR105To(ConnectorTool_c target)
{
	if (target == backPointer_EndConnectorToolEnd_R105) {
		backPointer_EndConnectorToolEnd_R105 = null;
	}
}

public static GraphicalElement_c getOneGD_GEOnR105(ConnectorTool_c [] targets)
{
    return getOneGD_GEOnR105(targets, null);
}

public static GraphicalElement_c getOneGD_GEOnR105(ConnectorTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_GEOnR105(targets, test, true);
}

public static GraphicalElement_c getOneGD_GEOnR105(ConnectorTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    GraphicalElement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             GraphicalElement_c candidate_val = getOneGD_GEOnR105(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_GEOnR105(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static GraphicalElement_c getOneGD_GEOnR105(ConnectorTool_c target)
{
	return getOneGD_GEOnR105(target, true);
}
public static GraphicalElement_c getOneGD_GEOnR105(ConnectorTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsEndingAtGraphicalElement ;
  } else {
    return null;
  }
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_GEsOnR105(targets, test, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GraphicalElement_c[0];
  
  
  LinkedHashSet<GraphicalElement_c> elementsSet = new LinkedHashSet<GraphicalElement_c>();
  for (int i = 0; i < targets.length; i++) {
    GraphicalElement_c associate = targets[i].IsEndingAtGraphicalElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GraphicalElement_c[] result = new GraphicalElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c [] targets)
{
  return getManyGD_GEsOnR105(targets, null);
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ConnectorTool_c [] targetArray = new ConnectorTool_c[1];
    targetArray[0] = target;
    return getManyGD_GEsOnR105(targetArray, test, loadComponent);
  } else {
    GraphicalElement_c [] result = new GraphicalElement_c [0] ;
    return result ;
  }
  
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_GEsOnR105(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c target)
{
    return getManyGD_GEsOnR105(target, null, true);
}

public static GraphicalElement_c [] getManyGD_GEsOnR105(ConnectorTool_c target, boolean loadComponent)
{
    return getManyGD_GEsOnR105(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsDimAnalogOfGraphelement == null) {          
      // R23
      Graphelement_c relInst22229 = (Graphelement_c) baseRoot.getInstanceList(Graphelement_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22229 == null) {
      			relInst22229 = (Graphelement_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphelement_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst22229 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22229) && !isProxy())) {
	      relInst22229.relateAcrossR23To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsPartOfModel == null) {          
      // R1
      Model_c relInst22230 = (Model_c) baseRoot.getInstanceList(Model_c.class).get(new Object[] {m_diagramid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22230 == null) {
      			relInst22230 = (Model_c) Ooaofooa.getDefaultInstance().getInstanceList(Model_c.class).get(new Object[] {m_diagramid});
      		}
			//synchronized
      if ( relInst22230 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22230) && !isProxy())) {
	      relInst22230.relateAcrossR1To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsInstanceOfElementSpecification == null) {          
      // R10
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ElementSpecification_c.class);
      ElementSpecification_c relInst22231 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ElementSpecification_c source = (ElementSpecification_c)cursor.next() ;
           if (     source.getOoa_type() == m_ooa_type 		){
  		relInst22231 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst22231 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22231) && !isProxy())) {
	      relInst22231.relateAcrossR10To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R23
      // DIM_GE
		  inst=IsDimAnalogOfGraphelement;
			unrelateAcrossR23From(IsDimAnalogOfGraphelement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1
      // GD_MD
		  inst=IsPartOfModel;
			unrelateAcrossR1From(IsPartOfModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R10
      // GD_ES
		  inst=IsInstanceOfElementSpecification;
			unrelateAcrossR10From(IsInstanceOfElementSpecification, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final GraphicalElement_c inst = (GraphicalElement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static GraphicalElement_c GraphicalElementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		GraphicalElement_c result=findGraphicalElementInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static GraphicalElement_c findGraphicalElementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				GraphicalElement_c x = (GraphicalElement_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static GraphicalElement_c GraphicalElementInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return GraphicalElementInstance(modelRoot,test,true);
  }
  
  public static GraphicalElement_c GraphicalElementInstance(ModelRoot modelRoot)
  {
	 return GraphicalElementInstance(modelRoot,null,true);
  }

  public static GraphicalElement_c [] GraphicalElementInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(GraphicalElement_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					GraphicalElement_c x = (GraphicalElement_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				GraphicalElement_c[] ret_set = new GraphicalElement_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new GraphicalElement_c[0];
			}		
		} 
  }
  public static GraphicalElement_c [] GraphicalElementInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  GraphicalElementInstances(modelRoot,test,true);
  }
  public static GraphicalElement_c [] GraphicalElementInstances(ModelRoot modelRoot)
  {
	return GraphicalElementInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Graphical Element.dispose call: ";
	Graphelement_c testR23Inst = Graphelement_c.getOneDIM_GEOnR23(this, false);

	if ( testR23Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "23 ";
	}
	TerminalSpecification_c testR206Inst = TerminalSpecification_c.getOneTS_TSPOnR206(this, false);

	if ( testR206Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "206 ";	
	}
	Elementstyle_c testR401Inst = Elementstyle_c.getOneSTY_SOnR401(this, false);

	if ( testR401Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "401 ";	
	}
	Shape_c testR2Inst1 = Shape_c.getOneGD_SHPOnR2(this, false);

	if ( testR2Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2 ";
	}
	Connector_c testR2Inst2 = Connector_c.getOneGD_CONOnR2(this, false);

	if ( testR2Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2 ";
	}
	Model_c testR1Inst = Model_c.getOneGD_MDOnR1(this, false);

	if ( testR1Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1 ";
	}
	ElementInResize_c testR12Inst = ElementInResize_c.getOneGD_EIROnR12(this, false);

	if ( testR12Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "12 ";
	}
	ElementInMove_c testR25Inst = ElementInMove_c.getOneGD_EIMOnR25(this, false);

	if ( testR25Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "25 ";
	}
 	ElementInSuppression_c testR32Inst = ElementInSuppression_c.getOneGD_EISOnR32(this, false);

 	if ( testR32Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "32 ";
 	}
 	Graphicalelementinlayer_c testR35Inst = Graphicalelementinlayer_c.getOneGD_GLAYOnR35(this, false);

 	if ( testR35Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "35 ";
 	}
	ElementSpecification_c testR10Inst = ElementSpecification_c.getOneGD_ESOnR10(this, false);

	if ( testR10Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "10 ";
	}
	ElementSpecification_c testR16Inst = ElementSpecification_c.getOneGD_ESOnR16(this, false);

	if ( testR16Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "16 ";	
	}
	ConnectorTool_c testR104Inst = ConnectorTool_c.getOneCT_CTLOnR104(this, false);

	if ( testR104Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "104 ";	
	}
	ConnectorTool_c testR105Inst = ConnectorTool_c.getOneCT_CTLOnR105(this, false);

	if ( testR105Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "105 ";	
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Graphical Element", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("ooa_id")){
         return true;
      }
      if(attributeName.equals("elementid")){
         return true;
      }
      if(attributeName.equals("diagramid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getOoa_idLongBased()
  {
    if(m_ooa_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_ooa_id)){
    	return 0xfffffff & m_ooa_id.getLeastSignificantBits();
    }
    return m_ooa_idLongBased ;
  }
  public java.util.UUID getOoa_id()
  {
    return m_ooa_id ;
  }


  public void setOoa_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_ooa_id)){
	        return;
	    }
	}else if(m_ooa_id != null){
	    if(m_ooa_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ooa_id", m_ooa_id, newValue,true); 
   m_ooa_id = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public Object getRepresents()
  {
    return m_represents ;
  }


  public void setRepresents(Object newValue)
  {
    if(m_represents == newValue){
        return;
    }
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Represents", m_represents, newValue,true); 
   m_represents = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getOoa_type()
  {
    if ( IsInstanceOfElementSpecification != null )
    {
      return IsInstanceOfElementSpecification.getOoa_type();
    }
    return 0;
  }


  public int getOoa_typeCachedValue()
  {
      return m_ooa_type;
  }
  
  public void setOoa_type(int newValue)
  {
    if(m_ooa_type == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ooa_type", new Integer(m_ooa_type), new Integer(newValue),true);

   m_ooa_type = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if ( IsDimAnalogOfGraphelement != null )
    {
      return IsDimAnalogOfGraphelement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( IsDimAnalogOfGraphelement != null )
    {
      return IsDimAnalogOfGraphelement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public void setElementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_elementid)){
	        return;
	    }
	}else if(m_elementid != null){
	    if(m_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Elementid", m_elementid, newValue,true); 
   m_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDiagramidLongBased()
  {
    if ( IsPartOfModel != null )
    {
      return IsPartOfModel.getDiagramidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDiagramid()
  {
    if ( IsPartOfModel != null )
    {
      return IsPartOfModel.getDiagramid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDiagramidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_diagramid) )
      return m_diagramid;
    else
      return getDiagramid();
  }
  
  public void setDiagramid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_diagramid)){
	        return;
	    }
	}else if(m_diagramid != null){
	    if(m_diagramid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Diagramid", m_diagramid, newValue,true); 
   m_diagramid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getRepresents_path()
  {
ModelRoot modelRoot = getModelRoot();
if ( (  !Cl_c.Isempty(			    
getRepresents())) )
{

String       v_path = Cl_c.Getpath(			    
getRepresents()) ;


if ( (v_path.equals("")) )
{

return Getcachedrepresentspath();



}

else
{

Setcachedrepresentspath(			    
v_path ) ;


return v_path;



}


}

else
{

return Getcachedrepresentspath();



}


  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Graphical Element", //$NON-NLS-1$
	  " Operation entered: Graphical Element::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     GraphicalElement_c [] objs = GraphicalElement_c.GraphicalElementInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Graphical Element", //$NON-NLS-1$
	  " Operation entered: Graphical Element::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
      // Check for GD <-> OOA metamodel consistency
    if ( getRepresents() == null){

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: GD_GE.represents attribute is empty" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: GD_GE.represents attribute is empty" , e); //$NON-NLS-1$
      }
      retval = false;

	}
    class GraphicalElement_c_test22233_c implements ClassQueryInterface_c
    {
	  GraphicalElement_c_test22233_c( java.util.UUID            p22234 ) {
	  m_p22234 = p22234;
	  }
	  private java.util.UUID             m_p22234; 
	  public boolean evaluate (Object candidate)
	  {
	      GraphicalElement_c selected = (GraphicalElement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22234));
	      return retval;
	  }
    }

    GraphicalElement_c [] objs22232 = 
    GraphicalElement_c.GraphicalElementInstances(modelRoot, new GraphicalElement_c_test22233_c(getElementid())) ;

    if ( (  (objs22232.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22232.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22232.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22232.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22232.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22232.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Graphical Element is a referring class in association: rel.Numb = 10
          // The participating class is: Element Specification
    class ElementSpecification_c_test22238_c implements ClassQueryInterface_c
    {
	  ElementSpecification_c_test22238_c( int     p22239 ) {
	  m_p22239 = p22239;
	  }
	  private int      m_p22239; 
	  public boolean evaluate (Object candidate)
	  {
	      ElementSpecification_c selected = (ElementSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p22239));
	      return retval;
	  }
    }

    ElementSpecification_c [] objs22237 = 
    ElementSpecification_c.ElementSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ElementSpecification_c_test22238_c(getOoa_type())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22237.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 10: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22237.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 10: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22237.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Graphical Element is a referring class in association: rel.Numb = 23
          // The participating class is: GraphElement
    class Graphelement_c_test22241_c implements ClassQueryInterface_c
    {
	  Graphelement_c_test22241_c( java.util.UUID            p22242 ) {
	  m_p22242 = p22242;
	  }
	  private java.util.UUID             m_p22242; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphelement_c selected = (Graphelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22242));
	      return retval;
	  }
    }

    Graphelement_c [] objs22240 = 
    Graphelement_c.GraphelementInstances(modelRoot, new Graphelement_c_test22241_c(getElementid())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22240.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 23: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22240.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 23: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22240.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Graphical Element is a referring class in association: rel.Numb = 1
          // The participating class is: Model
    class Model_c_test22244_c implements ClassQueryInterface_c
    {
	  Model_c_test22244_c( java.util.UUID            p22245 ) {
	  m_p22245 = p22245;
	  }
	  private java.util.UUID             m_p22245; 
	  public boolean evaluate (Object candidate)
	  {
	      Model_c selected = (Model_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDiagramid().equals(m_p22245));
	      return retval;
	  }
    }

    Model_c [] objs22243 = 
    Model_c.ModelInstances(modelRoot, new Model_c_test22244_c(getDiagramid())) ;

    if ( (  (objs22243.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 1: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22243.length )  + " diagramId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 1: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22243.length )  + " diagramId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Graphical Element is a participating class in association: rel.Numb = 206
             // Object: Terminal Specification
          // Graphical Element is a participating class in association: rel.Numb = 401
             // Object: ElementStyle
          // Supertype: rel.Numb = 2
    int objs22246 = 0;
            // Subtype Object: Shape
    class Shape_c_test22247_c implements ClassQueryInterface_c
    {
	  Shape_c_test22247_c( java.util.UUID            p22248 ) {
	  m_p22248 = p22248;
	  }
	  private java.util.UUID             m_p22248; 
	  public boolean evaluate (Object candidate)
	  {
	      Shape_c selected = (Shape_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22248));
	      return retval;
	  }
    }

    Shape_c [] objs22249 = 
    Shape_c.ShapeInstances(modelRoot, new Shape_c_test22247_c(getElementid())) ;
 
    objs22246 = objs22246 + objs22249.length;
            // Subtype Object: Connector
    class Connector_c_test22250_c implements ClassQueryInterface_c
    {
	  Connector_c_test22250_c( java.util.UUID            p22251 ) {
	  m_p22251 = p22251;
	  }
	  private java.util.UUID             m_p22251; 
	  public boolean evaluate (Object candidate)
	  {
	      Connector_c selected = (Connector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22251));
	      return retval;
	  }
    }

    Connector_c [] objs22252 = 
    Connector_c.ConnectorInstances(modelRoot, new Connector_c_test22250_c(getElementid())) ;
 
    objs22246 = objs22246 + objs22252.length;
    if ( objs22246 != 1 )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 2: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22246 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 2: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22246 )  , e); 
      }
      retval = false;

    }

          // Associated Other Side: rel.Numb = 32
            // Link Object: Element In Suppression
          // Associated Other Side: rel.Numb = 35
            // Link Object: GraphicalElementInLayer
    class Graphicalelementinlayer_c_test22253_c implements ClassQueryInterface_c
    {
	  Graphicalelementinlayer_c_test22253_c( java.util.UUID            p22254 ) {
	  m_p22254 = p22254;
	  }
	  private java.util.UUID             m_p22254; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphicalelementinlayer_c selected = (Graphicalelementinlayer_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22254));
	      return retval;
	  }
    }

    Graphicalelementinlayer_c [] objs22255 = 
    Graphicalelementinlayer_c.GraphicalelementinlayerInstances(modelRoot, new Graphicalelementinlayer_c_test22253_c(getElementid())) ;

    if ( (  (objs22255.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 35: Cardinality of a link is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22255.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 35: Cardinality of a link is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22255.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 12
            // Link Object: Element In Resize
            // Other Side Class: Model
          // Graphical Element is a participating class in association: rel.Numb = 16
             // Object: Element Specification
    class ElementSpecification_c_test22257_c implements ClassQueryInterface_c
    {
	  ElementSpecification_c_test22257_c( java.util.UUID            p22258 ) {
	  m_p22258 = p22258;
	  }
	  private java.util.UUID             m_p22258; 
	  public boolean evaluate (Object candidate)
	  {
	      ElementSpecification_c selected = (ElementSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22258));
	      return retval;
	  }
    }

    ElementSpecification_c [] objs22256 = 
    ElementSpecification_c.ElementSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ElementSpecification_c_test22257_c(getElementid())) ;

    if ( (  (objs22256.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 16: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22256.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 16: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22256.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 25
            // Link Object: Element In Move
            // Other Side Class: Model
          // Graphical Element is a participating class in association: rel.Numb = 104
             // Object: Connector Tool
    class ConnectorTool_c_test22260_c implements ClassQueryInterface_c
    {
	  ConnectorTool_c_test22260_c( java.util.UUID            p22261 ) {
	  m_p22261 = p22261;
	  }
	  private java.util.UUID             m_p22261; 
	  public boolean evaluate (Object candidate)
	  {
	      ConnectorTool_c selected = (ConnectorTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStart_elementid().equals(m_p22261));
	      return retval;
	  }
    }

    ConnectorTool_c [] objs22259 = 
    ConnectorTool_c.ConnectorToolInstances(modelRoot, new ConnectorTool_c_test22260_c(getElementid())) ;

    if ( (  (objs22259.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 104: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22259.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 104: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22259.length )  , e); 
      }
      retval = false;

    }

          // Graphical Element is a participating class in association: rel.Numb = 105
             // Object: Connector Tool
    class ConnectorTool_c_test22263_c implements ClassQueryInterface_c
    {
	  ConnectorTool_c_test22263_c( java.util.UUID            p22264 ) {
	  m_p22264 = p22264;
	  }
	  private java.util.UUID             m_p22264; 
	  public boolean evaluate (Object candidate)
	  {
	      ConnectorTool_c selected = (ConnectorTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEnd_elementid().equals(m_p22264));
	      return retval;
	  }
    }

    ConnectorTool_c [] objs22262 = 
    ConnectorTool_c.ConnectorToolInstances(modelRoot, new ConnectorTool_c_test22263_c(getElementid())) ;

    if ( (  (objs22262.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Graphical Element", //$NON-NLS-1$
           "Consistency: Object: Graphical Element: Association: 105: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22262.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Graphical Element: Association: 105: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22262.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Draw(final GCDelegate p_Context,final boolean      p_Disable_selection)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Draw") ; 
               final ModelRoot modelRoot = getModelRoot();
Gr_c.Setlinestyle(			    
p_Context			    
,Style_c.Solid ) ;


ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR10(this);


if ( (  (v_elemSpec == null)) )
{

  class ElementSpecification_test21570_c implements ClassQueryInterface_c
  {
	ElementSpecification_test21570_c( int  p21571 ) {
		m_p21571 = p21571;
	}
	private int  m_p21571;
	public boolean evaluate (Object candidate)
	{
		ElementSpecification_c selected = (ElementSpecification_c)candidate;
		return (selected.getOoa_type() == m_p21571) ;
	}
  }
ElementSpecification_c v_matchingElemSpec = ElementSpecification_c.getOneGD_ESOnR11(ElementInModelSpecification_c.getManyGD_EMSsOnR11(ModelSpecification_c.getManyGD_MSsOnR9(Model_c.getManyGD_MDsOnR1(this))), new ElementSpecification_test21570_c(getOoa_type()));


if ( (  (v_matchingElemSpec != null)) )
{

v_elemSpec = v_matchingElemSpec ;


if (v_elemSpec != null) {
  v_elemSpec.relateAcrossR10To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

if ( (  (v_elemSpec != null)) )
{

if ( (Cl_c.Ishighlighted(			    
getRepresents())) )
{

ModelSpecification_c v_model = ModelSpecification_c.getOneGD_MSOnR9(Model_c.getOneGD_MDOnR1(this));


Gr_c.Sethighlightfill(			    
p_Context			    
,v_model.getBackground() ) ;



}

else
{

Gr_c.Setfillto(			    
p_Context			    
,v_elemSpec.getInternal() ) ;



}


}

else
{

Gr_c.Setdefaultfill(			    
p_Context ) ;



}

int          v_width = 1 ;


Connector_c v_connector = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_connector != null)) )
{

v_width = v_connector.Getwidth() ;



}

if ( (Isselected() == true &&   !p_Disable_selection) )
{

Gr_c.Setlinewidth(			    
p_Context			    
,v_width * 2 ) ;



}

else if ( (Cl_c.Ishighlighted(			    
getRepresents())) )
{

Gr_c.Setlinewidth(			    
p_Context			    
,v_width * 2 ) ;



}

else
{

Gr_c.Setlinewidth(			    
p_Context			    
,v_width ) ;



}

if ( (  !p_Disable_selection) && (v_elemSpec.getAntialiased()) )
{

Gr_c.Setantialias(			    
p_Context			    
,true ) ;



}

else
{

Gr_c.Setadvancedgraphics(			    
p_Context			    
,false ) ;



}

v_connector = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_connector != null)) )
{

if (v_connector != null) {
v_connector.Draw(			    
p_Context			    
,p_Disable_selection ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return ;



}

Shape_c v_shape = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shape != null)) )
{

if (v_shape != null) {
v_shape.Draw(			    
p_Context			    
,p_Disable_selection ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return ;



}


   } // End draw
  public  boolean      Isselected()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Isselected") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Cl_c.Isempty(			    
getRepresents())) )
{

return Cl_c.Isselected(			    
Converttoinstance());



}

else
{

return Cl_c.Isselected(			    
getRepresents());



}


   } // End isSelected
  public  boolean      Isover(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Isover") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shape = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shape != null)) )
{

return v_shape.Isover(			    
p_X			    
,p_Y);



}

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

return v_con.Isover(			    
p_X			    
,p_Y);



}

return false;



   } // End isOver
  public  void Toggleselect()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Toggleselect") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Isselected()) )
{

Cl_c.Removefromselection(			    
Converttoinstance() ) ;



}

else
{

Cl_c.Addtoselection(			    
Converttoinstance() ) ;



}


   } // End toggleSelect
  public  void Move(final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Move") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shape = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shape != null)) )
{

if (v_shape != null) {
v_shape.Move(			    
p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

if (v_con != null) {
v_con.Move(			    
p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End move
  public  boolean      Isinside(final int          p_H,final int          p_W,final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Isinside") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shape = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shape != null)) )
{

return v_shape.Isinside(			    
p_H			    
,p_W			    
,p_X			    
,p_Y);



}

else
{

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

return v_con.Isinside(			    
p_H			    
,p_W			    
,p_X			    
,p_Y);



}


}

return false;



   } // End isInside
  public  boolean      Isoververtex(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Isoververtex") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shp != null)) )
{

return v_shp.Isoververtex(			    
p_X			    
,p_Y);



}

else
{

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

return v_con.Isoververtex(			    
p_X			    
,p_Y);



}


}

return false;



   } // End isOverVertex
  public  void Movevertex(final int  p_End,final int  p_Vertex,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Movevertex") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shp != null)) )
{

if (v_shp != null) {
v_shp.Movevertex(			    
p_End			    
,p_Vertex			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

if (v_con != null) {
v_con.Movevertex(			    
p_End			    
,p_Vertex			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End moveVertex
  public  int  Getvertexunder(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Getvertexunder") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shp != null)) )
{

if ( (v_shp.Isovernw(			    
p_X			    
,p_Y)) )
{

return Vertex_c.NW;



}

if ( (v_shp.Isoverse(			    
p_X			    
,p_Y)) )
{

return Vertex_c.SE;



}

if ( (v_shp.Isoverne(			    
p_X			    
,p_Y)) )
{

return Vertex_c.NE;



}

if ( (v_shp.Isoversw(			    
p_X			    
,p_Y)) )
{

return Vertex_c.SW;



}


}

else
{

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

return v_con.Getvertexunder(			    
p_X			    
,p_Y);



}


}

return Vertex_c.None;



   } // End getVertexUnder
  public  int  Getendunder(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Getendunder") ; 
               final ModelRoot modelRoot = getModelRoot();
Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

return v_con.Getendunder(			    
p_X			    
,p_Y);



}

FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(Shape_c.getOneGD_SHPOnR2(this));


if ( (  (v_text != null)) )
{

Model_c v_canvas = Model_c.getOneGD_MDOnR1(this);


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


float        v_scaled_x = Gr_c.Scale(			    
p_X) + v_diagram.getViewportx() ;


float        v_scaled_y = Gr_c.Scale(			    
p_Y) + v_diagram.getViewporty() ;


if ( (v_text.Isover(			    
(int)(v_scaled_x)			    
,(int)(v_scaled_y))) )
{

return End_c.Floating;



}


}

return End_c.None;



   } // End getEndUnder
  public  boolean      Isovernwse(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Isovernwse") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(this);


if ( (  (v_shp != null)) )
{

if ( (v_shp.Isovernw(			    
p_X			    
,p_Y)) )
{

return true;



}

if ( (v_shp.Isoverse(			    
p_X			    
,p_Y)) )
{

return true;



}


}

else
{

Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_con != null)) )
{

int  v_vertex = Getvertexunder(			    
p_X			    
,p_Y) ;


return (v_vertex == Vertex_c.NW || v_vertex == Vertex_c.SE);



}


}

return false;



   } // End isOverNWSE
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(this);


Connector_c v_con = Connector_c.getOneGD_CONOnR2(this);


if ( (  (v_shp != null)) )
{

this.unrelateAcrossR2From(v_shp);



}

else if ( (  (v_con != null)) )
{

this.unrelateAcrossR2From(v_con);



}

Graphelement_c v_dim = Graphelement_c.getOneDIM_GEOnR23(this);


if ( (  (v_dim != null)) )
{

this.unrelateAcrossR23From(v_dim);


if (v_dim != null) {
v_dim.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if ( (  (v_shp != null)) )
{

if (v_shp != null) {
v_shp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_con != null)) )
{

if (v_con != null) {
v_con.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

ElementSpecification_c v_es = ElementSpecification_c.getOneGD_ESOnR16(this);


if ( (  (v_es != null)) )
{

this.unrelateAcrossR16From(v_es);



}

ElementInMove_c v_inMove = ElementInMove_c.getOneGD_EIMOnR25(this);


if ( (  (v_inMove != null)) )
{

if (v_inMove != null) {
v_inMove.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

v_es = ElementSpecification_c.getOneGD_ESOnR10(this);


this.unrelateAcrossR10From(v_es);


ElementInResize_c v_eir = ElementInResize_c.getOneGD_EIROnR12(this);


if ( (  (v_eir != null)) )
{

if (v_eir != null) {
v_eir.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ConnectorTool_c v_ctl = ConnectorTool_c.getOneCT_CTLOnR104(this);


if ( (  (v_ctl != null)) )
{

this.unrelateAcrossR104From(v_ctl);



}

v_ctl = ConnectorTool_c.getOneCT_CTLOnR105(this);


if ( (  (v_ctl != null)) )
{

this.unrelateAcrossR105From(v_ctl);



}

TerminalSpecification_c [] v_tsp_set = TerminalSpecification_c.getManyTS_TSPsOnR206(this);


TerminalSpecification_c  v_tsp = null;
for ( int i21362 = 0; i21362 < v_tsp_set.length; i21362++)
{
  v_tsp = v_tsp_set[i21362] ;

this.unrelateAcrossR206From(v_tsp);



}

Model_c v_model = Model_c.getOneGD_MDOnR1(this);


this.unrelateAcrossR1From(v_model);


Elementstyle_c [] v_styles = Elementstyle_c.getManySTY_SsOnR401(this);


Elementstyle_c  v_style = null;
for ( int i21363 = 0; i21363 < v_styles.length; i21363++)
{
  v_style = v_styles[i21363] ;

this.unrelateAcrossR401From(v_style);


if (v_style != null) {
v_style.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Graphicalelementinlayer_c [] v_glays = Graphicalelementinlayer_c.getManyGD_GLAYsOnR35(this);


Graphicalelementinlayer_c  v_glay = null;
for ( int i21364 = 0; i21364 < v_glays.length; i21364++)
{
  v_glay = v_glays[i21364] ;

Layer_c v_layer = Layer_c.getOneGD_LAYOnR35(v_glay);


if (v_glay != null) {
v_glay.unrelateAcrossR35From( this ) ; v_glay.unrelateAcrossR35From( v_layer ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_glay != null) {
// get the location of this element in the instance list
// before deleting
if ( v_glay.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_glay));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  int          Getlayer()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Getlayer") ; 
               final ModelRoot modelRoot = getModelRoot();
ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR10(this);


if ( (  (v_elemSpec == null)) )
{

return ElementSpecification_c.Defaultlayer(modelRoot);



}

else
{

return v_elemSpec.getLayer();



}


   } // End getLayer
  public  Object Converttoinstance()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  void Addattachedelementstolayer(final String       p_Layername)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Addattachedelementstolayer") ; 
               final ModelRoot modelRoot = getModelRoot();
  class Layer_test21572_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Layer_c selected = (Layer_c)candidate;
		return (selected.getLayer_name().equals(p_Layername)) ;
	}
  }
Layer_c v_layer = Layer_c.getOneGD_LAYOnR35(Graphicalelementinlayer_c.getManyGD_GLAYsOnR35(this), new Layer_test21572_c());


Graphconnector_c [] v_anchoredElements = Graphconnector_c.getManyDIM_CONsOnR311(Graphelement_c.getManyDIM_GEsOnR23(this));


Graphconnector_c  v_anchoredElement = null;
for ( int i21365 = 0; i21365 < v_anchoredElements.length; i21365++)
{
  v_anchoredElement = v_anchoredElements[i21365] ;

GraphicalElement_c [] v_startElements = GraphicalElement_c.getManyGD_GEsOnR2(Connector_c.getManyGD_CONsOnR20(Graphedge_c.getManyDIM_EDsOnR320(v_anchoredElement)));


GraphicalElement_c  v_startElement = null;
for ( int i21366 = 0; i21366 < v_startElements.length; i21366++)
{
  v_startElement = v_startElements[i21366] ;

Graphicalelementinlayer_c v_glay = new Graphicalelementinlayer_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_glay));


if (v_glay != null) {
  v_glay.relateAcrossR35To( v_startElement ) ;   v_glay.relateAcrossR35To( v_layer ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_startElement != null) {
v_startElement.Addattachedelementstolayer(			    
p_Layername ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

GraphicalElement_c [] v_endElements = GraphicalElement_c.getManyGD_GEsOnR2(Connector_c.getManyGD_CONsOnR20(Graphedge_c.getManyDIM_EDsOnR321(v_anchoredElement)));


GraphicalElement_c  v_endElement = null;
for ( int i21367 = 0; i21367 < v_endElements.length; i21367++)
{
  v_endElement = v_endElements[i21367] ;

Graphicalelementinlayer_c v_glay = new Graphicalelementinlayer_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_glay));


if (v_glay != null) {
  v_glay.relateAcrossR35To( v_endElement ) ;   v_glay.relateAcrossR35To( v_layer ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_endElement != null) {
v_endElement.Addattachedelementstolayer(			    
p_Layername ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

GraphicalElement_c [] v_containedElements = GraphicalElement_c.getManyGD_GEsOnR23(Graphelement_c.getManyDIM_GEsOnR302(Diagramelement_c.getManyDIM_ELEsOnR307(Graphelement_c.getManyDIM_GEsOnR23(this))));


GraphicalElement_c  v_containedElement = null;
for ( int i21368 = 0; i21368 < v_containedElements.length; i21368++)
{
  v_containedElement = v_containedElements[i21368] ;

Graphicalelementinlayer_c v_glay = new Graphicalelementinlayer_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_glay));


if (v_glay != null) {
  v_glay.relateAcrossR35To( v_containedElement ) ;   v_glay.relateAcrossR35To( v_layer ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_containedElement != null) {
v_containedElement.Addattachedelementstolayer(			    
p_Layername ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End addAttachedElementsToLayer
  public  String       Get_name()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "Graphical Element";



   } // End get_name
  public  void Setcachedrepresentspath(final String       p_Value)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Setcachedrepresentspath") ; 
	m_represents_path = p_Value;
   } // End setCachedRepresentsPath
  public  String       Getcachedrepresentspath()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Graphical Element", " Operation entered: GraphicalElement::Getcachedrepresentspath") ; 
	return m_represents_path;
   } // End getCachedRepresentsPath

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Graphical Element
