package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Graphnode_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_GRAPHNODE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Graphnode_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Graphnode_c(ModelRoot modelRoot, float p_m_width, float p_m_height,
			java.util.UUID p_m_elementid) {
		super(modelRoot);
		m_width = p_m_width;
		m_height = p_m_height;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}
	static public Graphnode_c createProxy(ModelRoot modelRoot, float p_m_width,
			float p_m_height, java.util.UUID p_m_elementid,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);
		Graphnode_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			new_inst = (Graphnode_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_width = p_m_width;
				new_inst.m_height = p_m_height;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Graphnode_c(modelRoot, p_m_width, p_m_height,
					p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Graphnode_c resolveInstance(ModelRoot modelRoot,
			float p_m_width, float p_m_height, java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);
		Graphnode_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			source = (Graphnode_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_width = p_m_width;
				source.m_height = p_m_height;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

				return source;
			}
		}
		// there is no instance matching the id
		Graphnode_c new_inst = new Graphnode_c(modelRoot, p_m_width,
				p_m_height, p_m_elementid);
		return new_inst;
	}
	public Graphnode_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_elementid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_elementid != p_newKey) {

			m_elementid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Graphnode_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Graphnode_c)) {
			return false;
		}

		Graphnode_c me = (Graphnode_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
						.equals(((Graphnode_c) elem).getElementid())) && this != elem)) {
			return false;
		}
		if (!getElementid().equals(((Graphnode_c) elem).getElementid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Graphnode_c)) {
			return false;
		}

		Graphnode_c me = (Graphnode_c) elem;
		if (!getElementidCachedValue().equals(
				((Graphnode_c) elem).getElementidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private float m_width;
	private float m_height;
	private java.util.UUID m_elementid;

	// declare association references from this class

	// referring navigation

	Graphelement_c IsSupertypeGraphelement;
	public void relateAcrossR301To(Graphelement_c target) {
		relateAcrossR301To(target, true);
	}
	public void relateAcrossR301To(Graphelement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeGraphelement)
			return; // already related

		if (IsSupertypeGraphelement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeGraphelement != null) {

				IsSupertypeGraphelement.clearBackPointerR301To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Graphnode_c.relateAcrossR301To(Graphelement_c target)",
									"Relate performed across R301 from GraphNode to GraphElement without unrelate of prior instance.");
				}
			}

			IsSupertypeGraphelement = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR301To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "301", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR301From(Graphelement_c target) {
		unrelateAcrossR301From(target, true);
	}
	public void unrelateAcrossR301From(Graphelement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeGraphelement == null)
			return; // already unrelated

		if (target != IsSupertypeGraphelement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R301",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR301To(this);
		}

		if (IsSupertypeGraphelement != null) {

			m_elementid = IsSupertypeGraphelement.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsSupertypeGraphelement.getElementidCachedValue();
			}
			IsSupertypeGraphelement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "301", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Graphnode_c getOneDIM_NDOnR301(Graphelement_c[] targets) {
		return getOneDIM_NDOnR301(targets, null);
	}

	public static Graphnode_c getOneDIM_NDOnR301(Graphelement_c[] targets,
			ClassQueryInterface_c test) {
		Graphnode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_NDOnR301(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Graphnode_c getOneDIM_NDOnR301(Graphelement_c target) {
		return getOneDIM_NDOnR301(target, null);
	}

	public static Graphnode_c getOneDIM_NDOnR301(Graphelement_c target,
			boolean loadComponent) {
		return getOneDIM_NDOnR301(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Graphnode_c getOneDIM_NDOnR301(Graphelement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_NDOnR301(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Graphnode_c getOneDIM_NDOnR301(ModelRoot modelRoot,
			Graphelement_c target, ClassQueryInterface_c test) {
		return getOneDIM_NDOnR301(modelRoot, target, test, true);
	}

	public static Graphnode_c getOneDIM_NDOnR301(ModelRoot modelRoot,
			Graphelement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneDIM_NDOnR301(modelRoot, target, test);
	}
	private static Graphnode_c find_getOneDIM_NDOnR301(ModelRoot modelRoot,
			Graphelement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Graphnode_c source = (Graphnode_c) target.backPointer_IsSubtypeGraphnodeIsSubtype_R301;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Graphnode_c[] getManyDIM_NDsOnR301(Graphelement_c[] targets) {
		return getManyDIM_NDsOnR301(targets, null);
	}
	public static Graphnode_c[] getManyDIM_NDsOnR301(Graphelement_c[] targets,
			boolean loadComponent) {
		return getManyDIM_NDsOnR301(targets, null, loadComponent);
	}
	public static Graphnode_c[] getManyDIM_NDsOnR301(Graphelement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyDIM_NDsOnR301(targets, test, true);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR301(Graphelement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Graphnode_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Graphnode_c source = (Graphnode_c) targets[i].backPointer_IsSubtypeGraphnodeIsSubtype_R301;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Graphnode_c[] ret_set = new Graphnode_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Graphnode_c[0];
		}
	}

	public static Graphnode_c[] getManyDIM_NDsOnR301(Graphelement_c target) {
		if (target != null) {
			Graphelement_c[] targetArray = new Graphelement_c[1];
			targetArray[0] = target;
			return getManyDIM_NDsOnR301(targetArray);
		} else {
			Graphnode_c[] result = new Graphnode_c[0];
			return result;
		}
	}

	public static Graphnode_c[] getManyDIM_NDsOnR301(Graphelement_c target,
			boolean loadComponent) {
		if (target != null) {
			Graphelement_c[] targetArray = new Graphelement_c[1];
			targetArray[0] = target;
			return getManyDIM_NDsOnR301(targetArray, loadComponent);
		} else {
			Graphnode_c[] result = new Graphnode_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	Shape_c backPointer_IsSubtypeShapeIsSubtype_R19;

	public void setShapeOrderInChildListR19(Shape_c target, int index) {
		unrelateAcrossR19From(target);
		Shape_c[] elements = Shape_c.getManyGD_SHPsOnR19(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR19From((Shape_c) elements[i]);
			}
			count++;
		}
		relateAcrossR19To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR19To((Shape_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR19To(Shape_c target) {
		if (target != null) {
			target.relateAcrossR19To(this, true);
		}
	}

	public void relateAcrossR19To(Shape_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR19To(this, notifyChanges);
		}
	}

	public void setBackPointerR19To(Shape_c target) {
		backPointer_IsSubtypeShapeIsSubtype_R19 = target;
	}

	public void unrelateAcrossR19From(Shape_c target) {
		if (target != null) {
			target.unrelateAcrossR19From(this, true);
		}
	}

	public void unrelateAcrossR19From(Shape_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR19From(this, notifyChanges);
		}
	}

	public void clearBackPointerR19To(Shape_c target) {
		if (target == backPointer_IsSubtypeShapeIsSubtype_R19) {
			backPointer_IsSubtypeShapeIsSubtype_R19 = null;
		}
	}

	public static Graphnode_c getOneDIM_NDOnR19(Shape_c[] targets) {
		return getOneDIM_NDOnR19(targets, null);
	}

	public static Graphnode_c getOneDIM_NDOnR19(Shape_c[] targets,
			ClassQueryInterface_c test) {
		return getOneDIM_NDOnR19(targets, test, true);
	}

	public static Graphnode_c getOneDIM_NDOnR19(Shape_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Graphnode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Graphnode_c candidate_val = getOneDIM_NDOnR19(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneDIM_NDOnR19(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Graphnode_c getOneDIM_NDOnR19(Shape_c target) {
		return getOneDIM_NDOnR19(target, true);
	}
	public static Graphnode_c getOneDIM_NDOnR19(Shape_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeGraphnode;
		} else {
			return null;
		}
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(Shape_c[] targets,
			ClassQueryInterface_c test) {
		return getManyDIM_NDsOnR19(targets, test, true);
	}

	public static Graphnode_c [] getManyDIM_NDsOnR19(Shape_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphnode_c[0];
  
  
  LinkedHashSet<Graphnode_c> elementsSet = new LinkedHashSet<Graphnode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphnode == null)
	  targets[i].loadProxy();
    Graphnode_c associate = targets[i].IsSupertypeGraphnode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphnode_c[] result = new Graphnode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Graphnode_c[] getManyDIM_NDsOnR19(Shape_c[] targets) {
		return getManyDIM_NDsOnR19(targets, null);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(Shape_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Shape_c[] targetArray = new Shape_c[1];
			targetArray[0] = target;
			return getManyDIM_NDsOnR19(targetArray, test, loadComponent);
		} else {
			Graphnode_c[] result = new Graphnode_c[0];
			return result;
		}

	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(Shape_c target,
			ClassQueryInterface_c test) {
		return getManyDIM_NDsOnR19(target, null, true);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(Shape_c target) {
		return getManyDIM_NDsOnR19(target, null, true);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(Shape_c target,
			boolean loadComponent) {
		return getManyDIM_NDsOnR19(target, null, loadComponent);
	}

	// referred to navigation

	FloatingText_c backPointer_IsSubtypeFloatingTextIsSubtype_R19;

	public void setFloatingTextOrderInChildListR19(FloatingText_c target,
			int index) {
		unrelateAcrossR19From(target);
		FloatingText_c[] elements = FloatingText_c.getManyGD_CTXTsOnR19(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR19From((FloatingText_c) elements[i]);
			}
			count++;
		}
		relateAcrossR19To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR19To((FloatingText_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR19To(FloatingText_c target) {
		if (target != null) {
			target.relateAcrossR19To(this, true);
		}
	}

	public void relateAcrossR19To(FloatingText_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR19To(this, notifyChanges);
		}
	}

	public void setBackPointerR19To(FloatingText_c target) {
		backPointer_IsSubtypeFloatingTextIsSubtype_R19 = target;
	}

	public void unrelateAcrossR19From(FloatingText_c target) {
		if (target != null) {
			target.unrelateAcrossR19From(this, true);
		}
	}

	public void unrelateAcrossR19From(FloatingText_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR19From(this, notifyChanges);
		}
	}

	public void clearBackPointerR19To(FloatingText_c target) {
		if (target == backPointer_IsSubtypeFloatingTextIsSubtype_R19) {
			backPointer_IsSubtypeFloatingTextIsSubtype_R19 = null;
		}
	}

	public static Graphnode_c getOneDIM_NDOnR19(FloatingText_c[] targets) {
		return getOneDIM_NDOnR19(targets, null);
	}

	public static Graphnode_c getOneDIM_NDOnR19(FloatingText_c[] targets,
			ClassQueryInterface_c test) {
		return getOneDIM_NDOnR19(targets, test, true);
	}

	public static Graphnode_c getOneDIM_NDOnR19(FloatingText_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Graphnode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Graphnode_c candidate_val = getOneDIM_NDOnR19(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneDIM_NDOnR19(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Graphnode_c getOneDIM_NDOnR19(FloatingText_c target) {
		return getOneDIM_NDOnR19(target, true);
	}
	public static Graphnode_c getOneDIM_NDOnR19(FloatingText_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeGraphnode;
		} else {
			return null;
		}
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(FloatingText_c[] targets,
			ClassQueryInterface_c test) {
		return getManyDIM_NDsOnR19(targets, test, true);
	}

	public static Graphnode_c [] getManyDIM_NDsOnR19(FloatingText_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphnode_c[0];
  
  
  LinkedHashSet<Graphnode_c> elementsSet = new LinkedHashSet<Graphnode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeGraphnode == null)
	  targets[i].loadProxy();
    Graphnode_c associate = targets[i].IsSupertypeGraphnode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphnode_c[] result = new Graphnode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Graphnode_c[] getManyDIM_NDsOnR19(FloatingText_c[] targets) {
		return getManyDIM_NDsOnR19(targets, null);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(FloatingText_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			FloatingText_c[] targetArray = new FloatingText_c[1];
			targetArray[0] = target;
			return getManyDIM_NDsOnR19(targetArray, test, loadComponent);
		} else {
			Graphnode_c[] result = new Graphnode_c[0];
			return result;
		}

	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(FloatingText_c target,
			ClassQueryInterface_c test) {
		return getManyDIM_NDsOnR19(target, null, true);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(FloatingText_c target) {
		return getManyDIM_NDsOnR19(target, null, true);
	}

	public static Graphnode_c[] getManyDIM_NDsOnR19(FloatingText_c target,
			boolean loadComponent) {
		return getManyDIM_NDsOnR19(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R301
		Graphelement_c relInst21771 = (Graphelement_c) baseRoot
				.getInstanceList(Graphelement_c.class).get(
						new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst21771 == null) {
			relInst21771 = (Graphelement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Graphelement_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst21771 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst21771) && !isProxy())) {
				relInst21771.relateAcrossR301To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R301
		// DIM_GE
		inst = IsSupertypeGraphelement;
		unrelateAcrossR301From(IsSupertypeGraphelement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Graphnode_c inst = (Graphnode_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Graphnode_c GraphnodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Graphnode_c result = findGraphnodeInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static Graphnode_c findGraphnodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Graphnode_c x = (Graphnode_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Graphnode_c GraphnodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return GraphnodeInstance(modelRoot, test, true);
	}

	public static Graphnode_c GraphnodeInstance(ModelRoot modelRoot) {
		return GraphnodeInstance(modelRoot, null, true);
	}

	public static Graphnode_c[] GraphnodeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Graphnode_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Graphnode_c x = (Graphnode_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Graphnode_c[] ret_set = new Graphnode_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Graphnode_c[0];
			}
		}
	}
	public static Graphnode_c[] GraphnodeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return GraphnodeInstances(modelRoot, test, true);
	}
	public static Graphnode_c[] GraphnodeInstances(ModelRoot modelRoot) {
		return GraphnodeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the GraphNode.dispose call: ";
		Graphelement_c testR301Inst1 = Graphelement_c.getOneDIM_GEOnR301(this,
				false);

		if (testR301Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "301 ";
		}
		Shape_c testR19Inst1 = Shape_c.getOneGD_SHPOnR19(this, false);

		if (testR19Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "19 ";
		}
		FloatingText_c testR19Inst2 = FloatingText_c.getOneGD_CTXTOnR19(this,
				false);

		if (testR19Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "19 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.DELETE, "GraphNode", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public float getWidth() {
		return m_width;
	}

	public void setWidth(float newValue) {
		if (m_width == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Width",
				new Float(m_width), new Float(newValue), true);

		m_width = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getHeight() {
		return m_height;
	}

	public void setHeight(float newValue) {
		if (m_height == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Height", new Float(m_height), new Float(newValue), true);

		m_height = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getElementidLongBased() {
		if (IsSupertypeGraphelement != null) {
			return IsSupertypeGraphelement.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (IsSupertypeGraphelement != null) {
			return IsSupertypeGraphelement.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeGraphelement != null);

	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "GraphNode", //$NON-NLS-1$
				" Operation entered: GraphNode::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Graphnode_c[] objs = Graphnode_c.GraphnodeInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "GraphNode", //$NON-NLS-1$
				" Operation entered: GraphNode::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Graphnode_c_test21773_c implements ClassQueryInterface_c {
			Graphnode_c_test21773_c(java.util.UUID p21774) {
				m_p21774 = p21774;
			}
			private java.util.UUID m_p21774;
			public boolean evaluate(Object candidate) {
				Graphnode_c selected = (Graphnode_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21774));
				return retval;
			}
		}

		Graphnode_c[] objs21772 = Graphnode_c.GraphnodeInstances(modelRoot,
				new Graphnode_c_test21773_c(getElementid()));

		if (((objs21772.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"GraphNode", //$NON-NLS-1$
								"Consistency: Object: GraphNode: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21772.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: GraphNode: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21772.length), e);
			}
			retval = false;

		}

		if (((objs21772.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"GraphNode", //$NON-NLS-1$
								"Consistency: Object: GraphNode: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21772.length)
										+ " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: GraphNode: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21772.length)
										+ " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// GraphNode is a subtype in association: rel.Numb = 301
		// The supertype class is: GraphElement
		class Graphelement_c_test21778_c implements ClassQueryInterface_c {
			Graphelement_c_test21778_c(java.util.UUID p21779) {
				m_p21779 = p21779;
			}
			private java.util.UUID m_p21779;
			public boolean evaluate(Object candidate) {
				Graphelement_c selected = (Graphelement_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21779));
				return retval;
			}
		}

		Graphelement_c[] objs21777 = Graphelement_c.GraphelementInstances(
				modelRoot, new Graphelement_c_test21778_c(getElementid()));

		if (((objs21777.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"GraphNode", //$NON-NLS-1$
								"Consistency: Object: GraphNode: Association: 301: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21777.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: GraphNode: Association: 301: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21777.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 19
		int objs21780 = 0;
		// Subtype Object: Shape
		class Shape_c_test21781_c implements ClassQueryInterface_c {
			Shape_c_test21781_c(java.util.UUID p21782) {
				m_p21782 = p21782;
			}
			private java.util.UUID m_p21782;
			public boolean evaluate(Object candidate) {
				Shape_c selected = (Shape_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21782));
				return retval;
			}
		}

		Shape_c[] objs21783 = Shape_c.ShapeInstances(modelRoot,
				new Shape_c_test21781_c(getElementid()));

		objs21780 = objs21780 + objs21783.length;
		// Subtype Object: Floating Text
		class FloatingText_c_test21784_c implements ClassQueryInterface_c {
			FloatingText_c_test21784_c(java.util.UUID p21785) {
				m_p21785 = p21785;
			}
			private java.util.UUID m_p21785;
			public boolean evaluate(Object candidate) {
				FloatingText_c selected = (FloatingText_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21785));
				return retval;
			}
		}

		FloatingText_c[] objs21786 = FloatingText_c.FloatingTextInstances(
				modelRoot, new FloatingText_c_test21784_c(getElementid()));

		objs21780 = objs21780 + objs21786.length;
		if (objs21780 != 1) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"GraphNode", //$NON-NLS-1$
								"Consistency: Object: GraphNode: Association: 19: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21780)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: GraphNode: Association: 19: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21780), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "GraphNode",
				" Operation entered: Graphnode::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(this);

		if (((v_element != null))) {

			if (v_element != null) {
				v_element.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			Shape_c v_shape = Shape_c.getOneGD_SHPOnR19(this);

			if (((v_shape != null))) {

				this.unrelateAcrossR19From(v_shape);

				if (v_shape != null) {
					v_shape.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			FloatingText_c v_ctxt = FloatingText_c.getOneGD_CTXTOnR19(this);

			if (((v_ctxt != null))) {

				this.unrelateAcrossR19From(v_ctxt);

				if (v_ctxt != null) {
					v_ctxt.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			if (delete()) {
				Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose
	public String Get_name() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "GraphNode",
				" Operation entered: Graphnode::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return "Size Data";

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end GraphNode
