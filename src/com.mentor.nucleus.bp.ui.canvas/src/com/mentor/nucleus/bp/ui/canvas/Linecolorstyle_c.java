package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Linecolorstyle_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LINECOLORSTYLE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Linecolorstyle_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Linecolorstyle_c(ModelRoot modelRoot, java.util.UUID p_m_style_id,
			int p_m_red, int p_m_green, int p_m_blue) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_style_id = IdAssigner.preprocessUUID(p_m_style_id);
		m_red = p_m_red;
		m_green = p_m_green;
		m_blue = p_m_blue;

		Object[] key = {m_style_id};
		addInstanceToMap(key);
	}
	static public Linecolorstyle_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_style_id, int p_m_red, int p_m_green,
			int p_m_blue, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Linecolorstyle_c.class);
		Linecolorstyle_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_style_id};
			new_inst = (Linecolorstyle_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_style_id = IdAssigner.preprocessUUID(p_m_style_id);
				new_inst.m_red = p_m_red;
				new_inst.m_green = p_m_green;
				new_inst.m_blue = p_m_blue;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Linecolorstyle_c(modelRoot, p_m_style_id, p_m_red,
					p_m_green, p_m_blue);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Linecolorstyle_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_style_id, int p_m_red, int p_m_green,
			int p_m_blue) {
		InstanceList instances = modelRoot
				.getInstanceList(Linecolorstyle_c.class);
		Linecolorstyle_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_style_id};
			source = (Linecolorstyle_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_style_id = IdAssigner.preprocessUUID(p_m_style_id);
				source.m_red = p_m_red;
				source.m_green = p_m_green;
				source.m_blue = p_m_blue;

				return source;
			}
		}
		// there is no instance matching the id
		Linecolorstyle_c new_inst = new Linecolorstyle_c(modelRoot,
				p_m_style_id, p_m_red, p_m_green, p_m_blue);
		return new_inst;
	}
	public Linecolorstyle_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_style_id = IdAssigner.NULL_UUID;
		Object[] key = {m_style_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_style_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_style_id != p_newKey) {

			m_style_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Linecolorstyle_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Linecolorstyle_c)) {
			return false;
		}

		Linecolorstyle_c me = (Linecolorstyle_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStyle_id()) || IdAssigner.NULL_UUID
						.equals(((Linecolorstyle_c) elem).getStyle_id())) && this != elem)) {
			return false;
		}
		if (!getStyle_id().equals(((Linecolorstyle_c) elem).getStyle_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Linecolorstyle_c)) {
			return false;
		}

		Linecolorstyle_c me = (Linecolorstyle_c) elem;
		if (!getStyle_idCachedValue().equals(
				((Linecolorstyle_c) elem).getStyle_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_style_id;
	private int m_red;
	private int m_green;
	private int m_blue;

	// declare association references from this class

	// referring navigation

	Elementstyle_c IsSupertypeElementstyle;
	public void relateAcrossR400To(Elementstyle_c target) {
		relateAcrossR400To(target, true);
	}
	public void relateAcrossR400To(Elementstyle_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeElementstyle)
			return; // already related

		if (IsSupertypeElementstyle != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeElementstyle != null) {

				IsSupertypeElementstyle.clearBackPointerR400To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Linecolorstyle_c.relateAcrossR400To(Elementstyle_c target)",
									"Relate performed across R400 from LineColorStyle to ElementStyle without unrelate of prior instance.");
				}
			}

			IsSupertypeElementstyle = target;
			m_style_id = target.getStyle_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR400To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "400", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR400From(Elementstyle_c target) {
		unrelateAcrossR400From(target, true);
	}
	public void unrelateAcrossR400From(Elementstyle_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeElementstyle == null)
			return; // already unrelated

		if (target != IsSupertypeElementstyle) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R400",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR400To(this);
		}

		if (IsSupertypeElementstyle != null) {

			m_style_id = IsSupertypeElementstyle.getStyle_id();
			IsSupertypeElementstyle = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "400", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(Elementstyle_c[] targets) {
		return getOneSTY_LCSOnR400(targets, null);
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(
			Elementstyle_c[] targets, ClassQueryInterface_c test) {
		Linecolorstyle_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSTY_LCSOnR400(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(Elementstyle_c target) {
		return getOneSTY_LCSOnR400(target, null);
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(Elementstyle_c target,
			boolean loadComponent) {
		return getOneSTY_LCSOnR400(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(Elementstyle_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSTY_LCSOnR400(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(ModelRoot modelRoot,
			Elementstyle_c target, ClassQueryInterface_c test) {
		return getOneSTY_LCSOnR400(modelRoot, target, test, true);
	}

	public static Linecolorstyle_c getOneSTY_LCSOnR400(ModelRoot modelRoot,
			Elementstyle_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSTY_LCSOnR400(modelRoot, target, test);
	}
	private static Linecolorstyle_c find_getOneSTY_LCSOnR400(
			ModelRoot modelRoot, Elementstyle_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			Linecolorstyle_c source = (Linecolorstyle_c) target.backPointer_IsSubtypeLinecolorstyleIsSubtype_R400;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Linecolorstyle_c[] getManySTY_LCSsOnR400(
			Elementstyle_c[] targets) {
		return getManySTY_LCSsOnR400(targets, null);
	}
	public static Linecolorstyle_c[] getManySTY_LCSsOnR400(
			Elementstyle_c[] targets, boolean loadComponent) {
		return getManySTY_LCSsOnR400(targets, null, loadComponent);
	}
	public static Linecolorstyle_c[] getManySTY_LCSsOnR400(
			Elementstyle_c[] targets, ClassQueryInterface_c test) {
		return getManySTY_LCSsOnR400(targets, test, true);
	}

	public static Linecolorstyle_c[] getManySTY_LCSsOnR400(
			Elementstyle_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Linecolorstyle_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Linecolorstyle_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Linecolorstyle_c source = (Linecolorstyle_c) targets[i].backPointer_IsSubtypeLinecolorstyleIsSubtype_R400;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Linecolorstyle_c[] ret_set = new Linecolorstyle_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Linecolorstyle_c[0];
		}
	}

	public static Linecolorstyle_c[] getManySTY_LCSsOnR400(Elementstyle_c target) {
		if (target != null) {
			Elementstyle_c[] targetArray = new Elementstyle_c[1];
			targetArray[0] = target;
			return getManySTY_LCSsOnR400(targetArray);
		} else {
			Linecolorstyle_c[] result = new Linecolorstyle_c[0];
			return result;
		}
	}

	public static Linecolorstyle_c[] getManySTY_LCSsOnR400(
			Elementstyle_c target, boolean loadComponent) {
		if (target != null) {
			Elementstyle_c[] targetArray = new Elementstyle_c[1];
			targetArray[0] = target;
			return getManySTY_LCSsOnR400(targetArray, loadComponent);
		} else {
			Linecolorstyle_c[] result = new Linecolorstyle_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R400
		Elementstyle_c relInst22049 = (Elementstyle_c) baseRoot
				.getInstanceList(Elementstyle_c.class).get(
						new Object[]{m_style_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22049 == null) {
			relInst22049 = (Elementstyle_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Elementstyle_c.class)
					.get(new Object[]{m_style_id});
		}
		//synchronized
		if (relInst22049 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22049) && !isProxy())) {
				relInst22049.relateAcrossR400To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R400
		// STY_S
		inst = IsSupertypeElementstyle;
		unrelateAcrossR400From(IsSupertypeElementstyle, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Linecolorstyle_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Linecolorstyle_c inst = (Linecolorstyle_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Linecolorstyle_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Linecolorstyle_c LinecolorstyleInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Linecolorstyle_c result = findLinecolorstyleInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static Linecolorstyle_c findLinecolorstyleInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Linecolorstyle_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Linecolorstyle_c x = (Linecolorstyle_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Linecolorstyle_c LinecolorstyleInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return LinecolorstyleInstance(modelRoot, test, true);
	}

	public static Linecolorstyle_c LinecolorstyleInstance(ModelRoot modelRoot) {
		return LinecolorstyleInstance(modelRoot, null, true);
	}

	public static Linecolorstyle_c[] LinecolorstyleInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Linecolorstyle_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Linecolorstyle_c x = (Linecolorstyle_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Linecolorstyle_c[] ret_set = new Linecolorstyle_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Linecolorstyle_c[0];
			}
		}
	}
	public static Linecolorstyle_c[] LinecolorstyleInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LinecolorstyleInstances(modelRoot, test, true);
	}
	public static Linecolorstyle_c[] LinecolorstyleInstances(ModelRoot modelRoot) {
		return LinecolorstyleInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the LineColorStyle.dispose call: ";
		Elementstyle_c testR400Inst1 = Elementstyle_c.getOneSTY_SOnR400(this,
				false);

		if (testR400Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "400 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "LineColorStyle",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("style_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStyle_idLongBased() {
		if (IsSupertypeElementstyle != null) {
			return IsSupertypeElementstyle.getStyle_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStyle_id() {
		if (IsSupertypeElementstyle != null) {
			return IsSupertypeElementstyle.getStyle_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeElementstyle != null);

	}

	public java.util.UUID getStyle_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_style_id))
			return m_style_id;
		else
			return getStyle_id();
	}

	public void setStyle_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_style_id)) {
				return;
			}
		} else if (m_style_id != null) {
			if (m_style_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Style_id", m_style_id, newValue, true);
		m_style_id = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getRed() {
		return m_red;
	}

	public void setRed(int newValue) {
		if (m_red == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Red",
				new Integer(m_red), new Integer(newValue), true);

		m_red = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getGreen() {
		return m_green;
	}

	public void setGreen(int newValue) {
		if (m_green == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Green",
				new Integer(m_green), new Integer(newValue), true);

		m_green = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getBlue() {
		return m_blue;
	}

	public void setBlue(int newValue) {
		if (m_blue == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Blue",
				new Integer(m_blue), new Integer(newValue), true);

		m_blue = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "LineColorStyle", //$NON-NLS-1$
				" Operation entered: LineColorStyle::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Linecolorstyle_c[] objs = Linecolorstyle_c.LinecolorstyleInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "LineColorStyle", //$NON-NLS-1$
				" Operation entered: LineColorStyle::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Linecolorstyle_c_test22051_c implements ClassQueryInterface_c {
			Linecolorstyle_c_test22051_c(java.util.UUID p22052) {
				m_p22052 = p22052;
			}
			private java.util.UUID m_p22052;
			public boolean evaluate(Object candidate) {
				Linecolorstyle_c selected = (Linecolorstyle_c) candidate;
				boolean retval = false;
				retval = (selected.getStyle_id().equals(m_p22052));
				return retval;
			}
		}

		Linecolorstyle_c[] objs22050 = Linecolorstyle_c
				.LinecolorstyleInstances(modelRoot,
						new Linecolorstyle_c_test22051_c(getStyle_id()));

		if (((objs22050.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"LineColorStyle", //$NON-NLS-1$
								"Consistency: Object: LineColorStyle: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22050.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: LineColorStyle: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs22050.length), e);
			}
			retval = false;

		}

		if (((objs22050.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"LineColorStyle", //$NON-NLS-1$
								"Consistency: Object: LineColorStyle: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22050.length)
										+ " Style_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: LineColorStyle: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22050.length)
										+ " Style_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// LineColorStyle is a subtype in association: rel.Numb = 400
		// The supertype class is: ElementStyle
		class Elementstyle_c_test22056_c implements ClassQueryInterface_c {
			Elementstyle_c_test22056_c(java.util.UUID p22057) {
				m_p22057 = p22057;
			}
			private java.util.UUID m_p22057;
			public boolean evaluate(Object candidate) {
				Elementstyle_c selected = (Elementstyle_c) candidate;
				boolean retval = false;
				retval = (selected.getStyle_id().equals(m_p22057));
				return retval;
			}
		}

		Elementstyle_c[] objs22055 = Elementstyle_c.ElementstyleInstances(
				modelRoot, new Elementstyle_c_test22056_c(getStyle_id()));

		if (((objs22055.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"LineColorStyle", //$NON-NLS-1$
								"Consistency: Object: LineColorStyle: Association: 400: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22055.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: LineColorStyle: Association: 400: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22055.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_name() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "LineColorStyle",
				" Operation entered: Linecolorstyle::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return "Line Color";

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end LineColorStyle
