package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Elementstyle_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ELEMENTSTYLE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Elementstyle_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Elementstyle_c(ModelRoot modelRoot, java.util.UUID p_m_style_id,
			java.util.UUID p_m_elementid, java.util.UUID p_m_diagramid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_style_id = IdAssigner.preprocessUUID(p_m_style_id);
		//extract 28 bit value only            
		m_style_idLongBased = 0xfffffff & p_m_style_id
				.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

		setUniqueId(m_style_id);
		Object[] key = {m_style_id};
		addInstanceToMap(key);
	}
	static public Elementstyle_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_style_id, java.util.UUID p_m_elementid,
			java.util.UUID p_m_diagramid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);
		Elementstyle_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_style_id};
			new_inst = (Elementstyle_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_style_id = IdAssigner.preprocessUUID(p_m_style_id);
				//extract 28 bit value only            
				new_inst.m_style_idLongBased = 0xfffffff & p_m_style_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Elementstyle_c(modelRoot, p_m_style_id,
					p_m_elementid, p_m_diagramid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Elementstyle_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_style_id, java.util.UUID p_m_elementid,
			java.util.UUID p_m_diagramid) {
		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);
		Elementstyle_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_style_id};
			source = (Elementstyle_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_style_id = IdAssigner.preprocessUUID(p_m_style_id);
				//extract 28 bit value only            
				source.m_style_idLongBased = 0xfffffff & p_m_style_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

				return source;
			}
		}
		// there is no instance matching the id
		Elementstyle_c new_inst = new Elementstyle_c(modelRoot, p_m_style_id,
				p_m_elementid, p_m_diagramid);
		return new_inst;
	}
	public Elementstyle_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_style_id = idAssigner.createUUID();
		m_elementid = IdAssigner.NULL_UUID;
		m_diagramid = IdAssigner.NULL_UUID;
		setUniqueId(m_style_id);
		Object[] key = {m_style_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_style_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_style_id != p_newKey) {

			m_style_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Elementstyle_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Elementstyle_c)) {
			return false;
		}

		Elementstyle_c me = (Elementstyle_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStyle_id()) || IdAssigner.NULL_UUID
						.equals(((Elementstyle_c) elem).getStyle_id())) && this != elem)) {
			return false;
		}
		if (!getStyle_id().equals(((Elementstyle_c) elem).getStyle_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Elementstyle_c)) {
			return false;
		}

		Elementstyle_c me = (Elementstyle_c) elem;
		if (!getStyle_id().equals(((Elementstyle_c) elem).getStyle_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_style_id;
	private long m_style_idLongBased;
	private java.util.UUID m_elementid;
	private java.util.UUID m_diagramid;

	// declare association references from this class

	// referring navigation

	GraphicalElement_c ConfiguresGraphicalElement;
	public void relateAcrossR401To(GraphicalElement_c target) {
		relateAcrossR401To(target, true);
	}
	public void relateAcrossR401To(GraphicalElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ConfiguresGraphicalElement)
			return; // already related

		if (ConfiguresGraphicalElement != target) {

			Object oldKey = getInstanceKey();

			if (ConfiguresGraphicalElement != null) {

				ConfiguresGraphicalElement.clearBackPointerR401To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Elementstyle_c.relateAcrossR401To(GraphicalElement_c target)",
									"Relate performed across R401 from ElementStyle to Graphical Element without unrelate of prior instance.");
				}
			}

			ConfiguresGraphicalElement = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR401To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "401", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR401From(GraphicalElement_c target) {
		unrelateAcrossR401From(target, true);
	}
	public void unrelateAcrossR401From(GraphicalElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ConfiguresGraphicalElement == null)
			return; // already unrelated

		if (target != ConfiguresGraphicalElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R401",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR401To(this);
		}

		if (ConfiguresGraphicalElement != null) {

			m_elementid = ConfiguresGraphicalElement.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = ConfiguresGraphicalElement
						.getElementidCachedValue();
			}
			ConfiguresGraphicalElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "401", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Elementstyle_c getOneSTY_SOnR401(GraphicalElement_c[] targets) {
		return getOneSTY_SOnR401(targets, null);
	}

	public static Elementstyle_c getOneSTY_SOnR401(
			GraphicalElement_c[] targets, ClassQueryInterface_c test) {
		Elementstyle_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSTY_SOnR401(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Elementstyle_c getOneSTY_SOnR401(GraphicalElement_c target) {
		return getOneSTY_SOnR401(target, null);
	}

	public static Elementstyle_c getOneSTY_SOnR401(GraphicalElement_c target,
			boolean loadComponent) {
		return getOneSTY_SOnR401(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Elementstyle_c getOneSTY_SOnR401(GraphicalElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSTY_SOnR401(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Elementstyle_c getOneSTY_SOnR401(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test) {
		return getOneSTY_SOnR401(modelRoot, target, test, true);
	}

	public static Elementstyle_c getOneSTY_SOnR401(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSTY_SOnR401(modelRoot, target, test);
	}
	private static Elementstyle_c find_getOneSTY_SOnR401(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ConfiguredByElementstyleConfiguredBy_R401) {
				for (int i = 0; i < target.backPointer_ConfiguredByElementstyleConfiguredBy_R401
						.size(); ++i) {
					Elementstyle_c source = (Elementstyle_c) target.backPointer_ConfiguredByElementstyleConfiguredBy_R401
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c[] targets) {
		return getManySTY_SsOnR401(targets, null);
	}
	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c[] targets, boolean loadComponent) {
		return getManySTY_SsOnR401(targets, null, loadComponent);
	}
	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c[] targets, ClassQueryInterface_c test) {
		return getManySTY_SsOnR401(targets, test, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Elementstyle_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ConfiguredByElementstyleConfiguredBy_R401) {
				for (int j = 0; j < targets[i].backPointer_ConfiguredByElementstyleConfiguredBy_R401
						.size(); ++j) {
					Elementstyle_c source = (Elementstyle_c) targets[i].backPointer_ConfiguredByElementstyleConfiguredBy_R401
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Elementstyle_c[] ret_set = new Elementstyle_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Elementstyle_c[0];
		}
	}

	public static Elementstyle_c[] getManySTY_SsOnR401(GraphicalElement_c target) {
		return getManySTY_SsOnR401(target, null);
	}

	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c target, boolean loadComponent) {
		return getManySTY_SsOnR401(target, null, loadComponent);
	}

	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c target, ClassQueryInterface_c test) {
		return getManySTY_SsOnR401(target, test, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR401(
			GraphicalElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new Elementstyle_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ConfiguredByElementstyleConfiguredBy_R401) {
			for (int i = 0; i < target.backPointer_ConfiguredByElementstyleConfiguredBy_R401
					.size(); ++i) {
				Elementstyle_c source = (Elementstyle_c) target.backPointer_ConfiguredByElementstyleConfiguredBy_R401
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Elementstyle_c[] ret_set = new Elementstyle_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Elementstyle_c[0];
		}
	}

	// referring navigation

	Model_c ConfiguresModel;
	public void relateAcrossR402To(Model_c target) {
		relateAcrossR402To(target, true);
	}
	public void relateAcrossR402To(Model_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ConfiguresModel)
			return; // already related

		if (ConfiguresModel != target) {

			Object oldKey = getInstanceKey();

			if (ConfiguresModel != null) {

				ConfiguresModel.clearBackPointerR402To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Elementstyle_c.relateAcrossR402To(Model_c target)",
									"Relate performed across R402 from ElementStyle to Model without unrelate of prior instance.");
				}
			}

			ConfiguresModel = target;
			if (IdAssigner.NULL_UUID.equals(target.getDiagramid())) {
				// do not update cached value
			} else {
				// update cached value
				m_diagramid = target.getDiagramidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR402To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "402", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR402From(Model_c target) {
		unrelateAcrossR402From(target, true);
	}
	public void unrelateAcrossR402From(Model_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ConfiguresModel == null)
			return; // already unrelated

		if (target != ConfiguresModel) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R402",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR402To(this);
		}

		if (ConfiguresModel != null) {

			m_diagramid = ConfiguresModel.getDiagramid();
			if (IdAssigner.NULL_UUID.equals(m_diagramid)) {
				m_diagramid = ConfiguresModel.getDiagramidCachedValue();
			}
			ConfiguresModel = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "402", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Elementstyle_c getOneSTY_SOnR402(Model_c[] targets) {
		return getOneSTY_SOnR402(targets, null);
	}

	public static Elementstyle_c getOneSTY_SOnR402(Model_c[] targets,
			ClassQueryInterface_c test) {
		Elementstyle_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSTY_SOnR402(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Elementstyle_c getOneSTY_SOnR402(Model_c target) {
		return getOneSTY_SOnR402(target, null);
	}

	public static Elementstyle_c getOneSTY_SOnR402(Model_c target,
			boolean loadComponent) {
		return getOneSTY_SOnR402(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Elementstyle_c getOneSTY_SOnR402(Model_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSTY_SOnR402(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Elementstyle_c getOneSTY_SOnR402(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test) {
		return getOneSTY_SOnR402(modelRoot, target, test, true);
	}

	public static Elementstyle_c getOneSTY_SOnR402(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSTY_SOnR402(modelRoot, target, test);
	}
	private static Elementstyle_c find_getOneSTY_SOnR402(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ConfiguredByElementstyleConfiguredBy_R402) {
				for (int i = 0; i < target.backPointer_ConfiguredByElementstyleConfiguredBy_R402
						.size(); ++i) {
					Elementstyle_c source = (Elementstyle_c) target.backPointer_ConfiguredByElementstyleConfiguredBy_R402
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c[] targets) {
		return getManySTY_SsOnR402(targets, null);
	}
	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c[] targets,
			boolean loadComponent) {
		return getManySTY_SsOnR402(targets, null, loadComponent);
	}
	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c[] targets,
			ClassQueryInterface_c test) {
		return getManySTY_SsOnR402(targets, test, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Elementstyle_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ConfiguredByElementstyleConfiguredBy_R402) {
				for (int j = 0; j < targets[i].backPointer_ConfiguredByElementstyleConfiguredBy_R402
						.size(); ++j) {
					Elementstyle_c source = (Elementstyle_c) targets[i].backPointer_ConfiguredByElementstyleConfiguredBy_R402
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Elementstyle_c[] ret_set = new Elementstyle_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Elementstyle_c[0];
		}
	}

	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c target) {
		return getManySTY_SsOnR402(target, null);
	}

	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c target,
			boolean loadComponent) {
		return getManySTY_SsOnR402(target, null, loadComponent);
	}

	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c target,
			ClassQueryInterface_c test) {
		return getManySTY_SsOnR402(target, test, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR402(Model_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Elementstyle_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ConfiguredByElementstyleConfiguredBy_R402) {
			for (int i = 0; i < target.backPointer_ConfiguredByElementstyleConfiguredBy_R402
					.size(); ++i) {
				Elementstyle_c source = (Elementstyle_c) target.backPointer_ConfiguredByElementstyleConfiguredBy_R402
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Elementstyle_c[] ret_set = new Elementstyle_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Elementstyle_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	Linecolorstyle_c backPointer_IsSubtypeLinecolorstyleIsSubtype_R400;

	public void setLinecolorstyleOrderInChildListR400(Linecolorstyle_c target,
			int index) {
		unrelateAcrossR400From(target);
		Linecolorstyle_c[] elements = Linecolorstyle_c
				.getManySTY_LCSsOnR400(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR400From((Linecolorstyle_c) elements[i]);
			}
			count++;
		}
		relateAcrossR400To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR400To((Linecolorstyle_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR400To(Linecolorstyle_c target) {
		if (target != null) {
			target.relateAcrossR400To(this, true);
		}
	}

	public void relateAcrossR400To(Linecolorstyle_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR400To(this, notifyChanges);
		}
	}

	public void setBackPointerR400To(Linecolorstyle_c target) {
		backPointer_IsSubtypeLinecolorstyleIsSubtype_R400 = target;
	}

	public void unrelateAcrossR400From(Linecolorstyle_c target) {
		if (target != null) {
			target.unrelateAcrossR400From(this, true);
		}
	}

	public void unrelateAcrossR400From(Linecolorstyle_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR400From(this, notifyChanges);
		}
	}

	public void clearBackPointerR400To(Linecolorstyle_c target) {
		if (target == backPointer_IsSubtypeLinecolorstyleIsSubtype_R400) {
			backPointer_IsSubtypeLinecolorstyleIsSubtype_R400 = null;
		}
	}

	public static Elementstyle_c getOneSTY_SOnR400(Linecolorstyle_c[] targets) {
		return getOneSTY_SOnR400(targets, null);
	}

	public static Elementstyle_c getOneSTY_SOnR400(Linecolorstyle_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSTY_SOnR400(targets, test, true);
	}

	public static Elementstyle_c getOneSTY_SOnR400(Linecolorstyle_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Elementstyle_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Elementstyle_c candidate_val = getOneSTY_SOnR400(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSTY_SOnR400(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Elementstyle_c getOneSTY_SOnR400(Linecolorstyle_c target) {
		return getOneSTY_SOnR400(target, true);
	}
	public static Elementstyle_c getOneSTY_SOnR400(Linecolorstyle_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeElementstyle;
		} else {
			return null;
		}
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(
			Linecolorstyle_c[] targets, ClassQueryInterface_c test) {
		return getManySTY_SsOnR400(targets, test, true);
	}

	public static Elementstyle_c [] getManySTY_SsOnR400(Linecolorstyle_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Elementstyle_c[0];
  
  
  LinkedHashSet<Elementstyle_c> elementsSet = new LinkedHashSet<Elementstyle_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeElementstyle == null)
	  targets[i].loadProxy();
    Elementstyle_c associate = targets[i].IsSupertypeElementstyle;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Elementstyle_c[] result = new Elementstyle_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Elementstyle_c[] getManySTY_SsOnR400(
			Linecolorstyle_c[] targets) {
		return getManySTY_SsOnR400(targets, null);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Linecolorstyle_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Linecolorstyle_c[] targetArray = new Linecolorstyle_c[1];
			targetArray[0] = target;
			return getManySTY_SsOnR400(targetArray, test, loadComponent);
		} else {
			Elementstyle_c[] result = new Elementstyle_c[0];
			return result;
		}

	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Linecolorstyle_c target,
			ClassQueryInterface_c test) {
		return getManySTY_SsOnR400(target, null, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Linecolorstyle_c target) {
		return getManySTY_SsOnR400(target, null, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Linecolorstyle_c target,
			boolean loadComponent) {
		return getManySTY_SsOnR400(target, null, loadComponent);
	}

	// referred to navigation

	Fillcolorstyle_c backPointer_IsSubtypeFillcolorstyleIsSubtype_R400;

	public void setFillcolorstyleOrderInChildListR400(Fillcolorstyle_c target,
			int index) {
		unrelateAcrossR400From(target);
		Fillcolorstyle_c[] elements = Fillcolorstyle_c
				.getManySTY_FCSsOnR400(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR400From((Fillcolorstyle_c) elements[i]);
			}
			count++;
		}
		relateAcrossR400To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR400To((Fillcolorstyle_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR400To(Fillcolorstyle_c target) {
		if (target != null) {
			target.relateAcrossR400To(this, true);
		}
	}

	public void relateAcrossR400To(Fillcolorstyle_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR400To(this, notifyChanges);
		}
	}

	public void setBackPointerR400To(Fillcolorstyle_c target) {
		backPointer_IsSubtypeFillcolorstyleIsSubtype_R400 = target;
	}

	public void unrelateAcrossR400From(Fillcolorstyle_c target) {
		if (target != null) {
			target.unrelateAcrossR400From(this, true);
		}
	}

	public void unrelateAcrossR400From(Fillcolorstyle_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR400From(this, notifyChanges);
		}
	}

	public void clearBackPointerR400To(Fillcolorstyle_c target) {
		if (target == backPointer_IsSubtypeFillcolorstyleIsSubtype_R400) {
			backPointer_IsSubtypeFillcolorstyleIsSubtype_R400 = null;
		}
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fillcolorstyle_c[] targets) {
		return getOneSTY_SOnR400(targets, null);
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fillcolorstyle_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSTY_SOnR400(targets, test, true);
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fillcolorstyle_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Elementstyle_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Elementstyle_c candidate_val = getOneSTY_SOnR400(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSTY_SOnR400(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fillcolorstyle_c target) {
		return getOneSTY_SOnR400(target, true);
	}
	public static Elementstyle_c getOneSTY_SOnR400(Fillcolorstyle_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeElementstyle;
		} else {
			return null;
		}
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(
			Fillcolorstyle_c[] targets, ClassQueryInterface_c test) {
		return getManySTY_SsOnR400(targets, test, true);
	}

	public static Elementstyle_c [] getManySTY_SsOnR400(Fillcolorstyle_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Elementstyle_c[0];
  
  
  LinkedHashSet<Elementstyle_c> elementsSet = new LinkedHashSet<Elementstyle_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeElementstyle == null)
	  targets[i].loadProxy();
    Elementstyle_c associate = targets[i].IsSupertypeElementstyle;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Elementstyle_c[] result = new Elementstyle_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Elementstyle_c[] getManySTY_SsOnR400(
			Fillcolorstyle_c[] targets) {
		return getManySTY_SsOnR400(targets, null);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fillcolorstyle_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Fillcolorstyle_c[] targetArray = new Fillcolorstyle_c[1];
			targetArray[0] = target;
			return getManySTY_SsOnR400(targetArray, test, loadComponent);
		} else {
			Elementstyle_c[] result = new Elementstyle_c[0];
			return result;
		}

	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fillcolorstyle_c target,
			ClassQueryInterface_c test) {
		return getManySTY_SsOnR400(target, null, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fillcolorstyle_c target) {
		return getManySTY_SsOnR400(target, null, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fillcolorstyle_c target,
			boolean loadComponent) {
		return getManySTY_SsOnR400(target, null, loadComponent);
	}

	// referred to navigation

	Fontstyle_c backPointer_IsSubtypeFontstyleIsSubtype_R400;

	public void setFontstyleOrderInChildListR400(Fontstyle_c target, int index) {
		unrelateAcrossR400From(target);
		Fontstyle_c[] elements = Fontstyle_c.getManySTY_FSsOnR400(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR400From((Fontstyle_c) elements[i]);
			}
			count++;
		}
		relateAcrossR400To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR400To((Fontstyle_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR400To(Fontstyle_c target) {
		if (target != null) {
			target.relateAcrossR400To(this, true);
		}
	}

	public void relateAcrossR400To(Fontstyle_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR400To(this, notifyChanges);
		}
	}

	public void setBackPointerR400To(Fontstyle_c target) {
		backPointer_IsSubtypeFontstyleIsSubtype_R400 = target;
	}

	public void unrelateAcrossR400From(Fontstyle_c target) {
		if (target != null) {
			target.unrelateAcrossR400From(this, true);
		}
	}

	public void unrelateAcrossR400From(Fontstyle_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR400From(this, notifyChanges);
		}
	}

	public void clearBackPointerR400To(Fontstyle_c target) {
		if (target == backPointer_IsSubtypeFontstyleIsSubtype_R400) {
			backPointer_IsSubtypeFontstyleIsSubtype_R400 = null;
		}
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fontstyle_c[] targets) {
		return getOneSTY_SOnR400(targets, null);
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fontstyle_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSTY_SOnR400(targets, test, true);
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fontstyle_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Elementstyle_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Elementstyle_c candidate_val = getOneSTY_SOnR400(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSTY_SOnR400(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Elementstyle_c getOneSTY_SOnR400(Fontstyle_c target) {
		return getOneSTY_SOnR400(target, true);
	}
	public static Elementstyle_c getOneSTY_SOnR400(Fontstyle_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeElementstyle;
		} else {
			return null;
		}
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fontstyle_c[] targets,
			ClassQueryInterface_c test) {
		return getManySTY_SsOnR400(targets, test, true);
	}

	public static Elementstyle_c [] getManySTY_SsOnR400(Fontstyle_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Elementstyle_c[0];
  
  
  LinkedHashSet<Elementstyle_c> elementsSet = new LinkedHashSet<Elementstyle_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeElementstyle == null)
	  targets[i].loadProxy();
    Elementstyle_c associate = targets[i].IsSupertypeElementstyle;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Elementstyle_c[] result = new Elementstyle_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Elementstyle_c[] getManySTY_SsOnR400(Fontstyle_c[] targets) {
		return getManySTY_SsOnR400(targets, null);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fontstyle_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Fontstyle_c[] targetArray = new Fontstyle_c[1];
			targetArray[0] = target;
			return getManySTY_SsOnR400(targetArray, test, loadComponent);
		} else {
			Elementstyle_c[] result = new Elementstyle_c[0];
			return result;
		}

	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fontstyle_c target,
			ClassQueryInterface_c test) {
		return getManySTY_SsOnR400(target, null, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fontstyle_c target) {
		return getManySTY_SsOnR400(target, null, true);
	}

	public static Elementstyle_c[] getManySTY_SsOnR400(Fontstyle_c target,
			boolean loadComponent) {
		return getManySTY_SsOnR400(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ConfiguresGraphicalElement == null) {
			// R401
			GraphicalElement_c relInst22076 = (GraphicalElement_c) baseRoot
					.getInstanceList(GraphicalElement_c.class).get(
							new Object[]{m_elementid});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst22076 == null) {
				relInst22076 = (GraphicalElement_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(GraphicalElement_c.class)
						.get(new Object[]{m_elementid});
			}
			//synchronized
			if (relInst22076 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst22076) && !isProxy())) {
					relInst22076.relateAcrossR401To(this, notifyChanges);
				}
			}
		}

		if (ConfiguresModel == null) {
			// R402
			Model_c relInst22077 = (Model_c) baseRoot.getInstanceList(
					Model_c.class).get(new Object[]{m_diagramid});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst22077 == null) {
				relInst22077 = (Model_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Model_c.class)
						.get(new Object[]{m_diagramid});
			}
			//synchronized
			if (relInst22077 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst22077) && !isProxy())) {
					relInst22077.relateAcrossR402To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R401
		// GD_GE
		inst = ConfiguresGraphicalElement;
		unrelateAcrossR401From(ConfiguresGraphicalElement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R402
		// GD_MD
		inst = ConfiguresModel;
		unrelateAcrossR402From(ConfiguresModel, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Elementstyle_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Elementstyle_c inst = (Elementstyle_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Elementstyle_c ElementstyleInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Elementstyle_c result = findElementstyleInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static Elementstyle_c findElementstyleInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Elementstyle_c x = (Elementstyle_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Elementstyle_c ElementstyleInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ElementstyleInstance(modelRoot, test, true);
	}

	public static Elementstyle_c ElementstyleInstance(ModelRoot modelRoot) {
		return ElementstyleInstance(modelRoot, null, true);
	}

	public static Elementstyle_c[] ElementstyleInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Elementstyle_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Elementstyle_c x = (Elementstyle_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Elementstyle_c[] ret_set = new Elementstyle_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Elementstyle_c[0];
			}
		}
	}
	public static Elementstyle_c[] ElementstyleInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ElementstyleInstances(modelRoot, test, true);
	}
	public static Elementstyle_c[] ElementstyleInstances(ModelRoot modelRoot) {
		return ElementstyleInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the ElementStyle.dispose call: ";
		Linecolorstyle_c testR400Inst1 = Linecolorstyle_c.getOneSTY_LCSOnR400(
				this, false);

		if (testR400Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "400 ";
		}
		Fillcolorstyle_c testR400Inst2 = Fillcolorstyle_c.getOneSTY_FCSOnR400(
				this, false);

		if (testR400Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "400 ";
		}
		Fontstyle_c testR400Inst3 = Fontstyle_c.getOneSTY_FSOnR400(this, false);

		if (testR400Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "400 ";
		}
		GraphicalElement_c testR401Inst = GraphicalElement_c.getOneGD_GEOnR401(
				this, false);

		if (testR401Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "401 ";
		}
		Model_c testR402Inst = Model_c.getOneGD_MDOnR402(this, false);

		if (testR402Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "402 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "ElementStyle",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("style_id")) {
			return true;
		}
		if (attributeName.equals("elementid")) {
			return true;
		}
		if (attributeName.equals("diagramid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStyle_idLongBased() {
		if (m_style_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_style_id)) {
			return 0xfffffff & m_style_id.getLeastSignificantBits();
		}
		return m_style_idLongBased;
	}
	public java.util.UUID getStyle_id() {
		return m_style_id;
	}

	public void setStyle_id(java.util.UUID newValue) {
		m_style_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getElementidLongBased() {
		if (ConfiguresGraphicalElement != null) {
			return ConfiguresGraphicalElement.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (ConfiguresGraphicalElement != null) {
			return ConfiguresGraphicalElement.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getDiagramidLongBased() {
		if (ConfiguresModel != null) {
			return ConfiguresModel.getDiagramidLongBased();
		}
		return 0;
	}
	public java.util.UUID getDiagramid() {
		if (ConfiguresModel != null) {
			return ConfiguresModel.getDiagramid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDiagramidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_diagramid))
			return m_diagramid;
		else
			return getDiagramid();
	}

	public void setDiagramid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_diagramid)) {
				return;
			}
		} else if (m_diagramid != null) {
			if (m_diagramid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Diagramid", m_diagramid, newValue, true);
		m_diagramid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "ElementStyle", //$NON-NLS-1$
				" Operation entered: ElementStyle::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Elementstyle_c[] objs = Elementstyle_c.ElementstyleInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "ElementStyle", //$NON-NLS-1$
				" Operation entered: ElementStyle::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Elementstyle_c_test22079_c implements ClassQueryInterface_c {
			Elementstyle_c_test22079_c(java.util.UUID p22080) {
				m_p22080 = p22080;
			}
			private java.util.UUID m_p22080;
			public boolean evaluate(Object candidate) {
				Elementstyle_c selected = (Elementstyle_c) candidate;
				boolean retval = false;
				retval = (selected.getStyle_id().equals(m_p22080));
				return retval;
			}
		}

		Elementstyle_c[] objs22078 = Elementstyle_c.ElementstyleInstances(
				modelRoot, new Elementstyle_c_test22079_c(getStyle_id()));

		if (((objs22078.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"ElementStyle", //$NON-NLS-1$
								"Consistency: Object: ElementStyle: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22078.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: ElementStyle: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs22078.length), e);
			}
			retval = false;

		}

		if (((objs22078.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"ElementStyle", //$NON-NLS-1$
								"Consistency: Object: ElementStyle: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22078.length)
										+ " Style_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: ElementStyle: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22078.length)
										+ " Style_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// ElementStyle is a referring class in association: rel.Numb = 401
		// The participating class is: Graphical Element
		class GraphicalElement_c_test22084_c implements ClassQueryInterface_c {
			GraphicalElement_c_test22084_c(java.util.UUID p22085) {
				m_p22085 = p22085;
			}
			private java.util.UUID m_p22085;
			public boolean evaluate(Object candidate) {
				GraphicalElement_c selected = (GraphicalElement_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22085));
				return retval;
			}
		}

		GraphicalElement_c[] objs22083 = GraphicalElement_c
				.GraphicalElementInstances(modelRoot,
						new GraphicalElement_c_test22084_c(getElementid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs22083.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"ElementStyle", //$NON-NLS-1$
								"Consistency: Object: ElementStyle: Association: 401: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22083.length)
										+ " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: ElementStyle: Association: 401: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22083.length)
										+ " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// ElementStyle is a referring class in association: rel.Numb = 402
		// The participating class is: Model
		class Model_c_test22087_c implements ClassQueryInterface_c {
			Model_c_test22087_c(java.util.UUID p22088) {
				m_p22088 = p22088;
			}
			private java.util.UUID m_p22088;
			public boolean evaluate(Object candidate) {
				Model_c selected = (Model_c) candidate;
				boolean retval = false;
				retval = (selected.getDiagramid().equals(m_p22088));
				return retval;
			}
		}

		Model_c[] objs22086 = Model_c.ModelInstances(modelRoot,
				new Model_c_test22087_c(getDiagramid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs22086.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"ElementStyle", //$NON-NLS-1$
								"Consistency: Object: ElementStyle: Association: 402: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22086.length)
										+ " diagramId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: ElementStyle: Association: 402: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22086.length)
										+ " diagramId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 400
		int objs22089 = 0;
		// Subtype Object: LineColorStyle
		class Linecolorstyle_c_test22090_c implements ClassQueryInterface_c {
			Linecolorstyle_c_test22090_c(java.util.UUID p22091) {
				m_p22091 = p22091;
			}
			private java.util.UUID m_p22091;
			public boolean evaluate(Object candidate) {
				Linecolorstyle_c selected = (Linecolorstyle_c) candidate;
				boolean retval = false;
				retval = (selected.getStyle_id().equals(m_p22091));
				return retval;
			}
		}

		Linecolorstyle_c[] objs22092 = Linecolorstyle_c
				.LinecolorstyleInstances(modelRoot,
						new Linecolorstyle_c_test22090_c(getStyle_id()));

		objs22089 = objs22089 + objs22092.length;
		// Subtype Object: FillColorStyle
		class Fillcolorstyle_c_test22093_c implements ClassQueryInterface_c {
			Fillcolorstyle_c_test22093_c(java.util.UUID p22094) {
				m_p22094 = p22094;
			}
			private java.util.UUID m_p22094;
			public boolean evaluate(Object candidate) {
				Fillcolorstyle_c selected = (Fillcolorstyle_c) candidate;
				boolean retval = false;
				retval = (selected.getStyle_id().equals(m_p22094));
				return retval;
			}
		}

		Fillcolorstyle_c[] objs22095 = Fillcolorstyle_c
				.FillcolorstyleInstances(modelRoot,
						new Fillcolorstyle_c_test22093_c(getStyle_id()));

		objs22089 = objs22089 + objs22095.length;
		// Subtype Object: FontStyle
		class Fontstyle_c_test22096_c implements ClassQueryInterface_c {
			Fontstyle_c_test22096_c(java.util.UUID p22097) {
				m_p22097 = p22097;
			}
			private java.util.UUID m_p22097;
			public boolean evaluate(Object candidate) {
				Fontstyle_c selected = (Fontstyle_c) candidate;
				boolean retval = false;
				retval = (selected.getStyle_id().equals(m_p22097));
				return retval;
			}
		}

		Fontstyle_c[] objs22098 = Fontstyle_c.FontstyleInstances(modelRoot,
				new Fontstyle_c_test22096_c(getStyle_id()));

		objs22089 = objs22089 + objs22098.length;
		if (objs22089 != 1) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"ElementStyle", //$NON-NLS-1$
								"Consistency: Object: ElementStyle: Association: 400: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22089)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: ElementStyle: Association: 400: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22089), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "ElementStyle",
				" Operation entered: Elementstyle::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR401(this);

		Model_c v_model = Model_c.getOneGD_MDOnR402(this);

		Fillcolorstyle_c v_fillColorStyle = Fillcolorstyle_c
				.getOneSTY_FCSOnR400(this);

		Linecolorstyle_c v_lineColorStyle = Linecolorstyle_c
				.getOneSTY_LCSOnR400(this);

		if (((v_ge != null))) {

			this.unrelateAcrossR401From(v_ge);

		}

		if (((v_model != null))) {

			this.unrelateAcrossR402From(v_model);

		}

		if (((v_fillColorStyle != null))) {

			this.unrelateAcrossR400From(v_fillColorStyle);

			if (v_fillColorStyle != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_fillColorStyle.delete()) {
					Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_fillColorStyle));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (((v_lineColorStyle != null))) {

			this.unrelateAcrossR400From(v_lineColorStyle);

			if (v_lineColorStyle != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_lineColorStyle.delete()) {
					Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_lineColorStyle));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (delete()) {
			Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end ElementStyle
