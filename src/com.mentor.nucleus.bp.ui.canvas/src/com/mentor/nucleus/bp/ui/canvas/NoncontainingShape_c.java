package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.NoncontainingShape_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_NONCONTAINING_SHAPE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class NoncontainingShape_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public NoncontainingShape_c(ModelRoot modelRoot,
			java.util.UUID p_m_elementid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}
	static public NoncontainingShape_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_elementid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(NoncontainingShape_c.class);
		NoncontainingShape_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			new_inst = (NoncontainingShape_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new NoncontainingShape_c(modelRoot, p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public NoncontainingShape_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot
				.getInstanceList(NoncontainingShape_c.class);
		NoncontainingShape_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			source = (NoncontainingShape_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

				return source;
			}
		}
		// there is no instance matching the id
		NoncontainingShape_c new_inst = new NoncontainingShape_c(modelRoot,
				p_m_elementid);
		return new_inst;
	}
	public NoncontainingShape_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_elementid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_elementid != p_newKey) {

			m_elementid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof NoncontainingShape_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof NoncontainingShape_c)) {
			return false;
		}

		NoncontainingShape_c me = (NoncontainingShape_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
						.equals(((NoncontainingShape_c) elem).getElementid())) && this != elem)) {
			return false;
		}
		if (!getElementid()
				.equals(((NoncontainingShape_c) elem).getElementid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof NoncontainingShape_c)) {
			return false;
		}

		NoncontainingShape_c me = (NoncontainingShape_c) elem;
		if (!getElementidCachedValue().equals(
				((NoncontainingShape_c) elem).getElementidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_elementid;

	// declare association references from this class

	// referring navigation

	Shape_c IsSupertypeShape;
	public void relateAcrossR28To(Shape_c target) {
		relateAcrossR28To(target, true);
	}
	public void relateAcrossR28To(Shape_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeShape)
			return; // already related

		if (IsSupertypeShape != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeShape != null) {

				IsSupertypeShape.clearBackPointerR28To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"NoncontainingShape_c.relateAcrossR28To(Shape_c target)",
									"Relate performed across R28 from NonContaining Shape to Shape without unrelate of prior instance.");
				}
			}

			IsSupertypeShape = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR28To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "28", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR28From(Shape_c target) {
		unrelateAcrossR28From(target, true);
	}
	public void unrelateAcrossR28From(Shape_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeShape == null)
			return; // already unrelated

		if (target != IsSupertypeShape) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R28",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR28To(this);
		}

		if (IsSupertypeShape != null) {

			m_elementid = IsSupertypeShape.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsSupertypeShape.getElementidCachedValue();
			}
			IsSupertypeShape = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "28", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(Shape_c[] targets) {
		return getOneGD_NCSOnR28(targets, null);
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(Shape_c[] targets,
			ClassQueryInterface_c test) {
		NoncontainingShape_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_NCSOnR28(targets[i], test);
			}
		}

		return ret_val;
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(Shape_c target) {
		return getOneGD_NCSOnR28(target, null);
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(Shape_c target,
			boolean loadComponent) {
		return getOneGD_NCSOnR28(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(Shape_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_NCSOnR28(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(ModelRoot modelRoot,
			Shape_c target, ClassQueryInterface_c test) {
		return getOneGD_NCSOnR28(modelRoot, target, test, true);
	}

	public static NoncontainingShape_c getOneGD_NCSOnR28(ModelRoot modelRoot,
			Shape_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneGD_NCSOnR28(modelRoot, target, test);
	}
	private static NoncontainingShape_c find_getOneGD_NCSOnR28(
			ModelRoot modelRoot, Shape_c target, ClassQueryInterface_c test) {
		if (target != null) {
			NoncontainingShape_c source = (NoncontainingShape_c) target.backPointer_IsSubtypeNoncontainingShapeIsSubtype_R28;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static NoncontainingShape_c[] getManyGD_NCSsOnR28(Shape_c[] targets) {
		return getManyGD_NCSsOnR28(targets, null);
	}
	public static NoncontainingShape_c[] getManyGD_NCSsOnR28(Shape_c[] targets,
			boolean loadComponent) {
		return getManyGD_NCSsOnR28(targets, null, loadComponent);
	}
	public static NoncontainingShape_c[] getManyGD_NCSsOnR28(Shape_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_NCSsOnR28(targets, test, true);
	}

	public static NoncontainingShape_c[] getManyGD_NCSsOnR28(Shape_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new NoncontainingShape_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(NoncontainingShape_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			NoncontainingShape_c source = (NoncontainingShape_c) targets[i].backPointer_IsSubtypeNoncontainingShapeIsSubtype_R28;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			NoncontainingShape_c[] ret_set = new NoncontainingShape_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new NoncontainingShape_c[0];
		}
	}

	public static NoncontainingShape_c[] getManyGD_NCSsOnR28(Shape_c target) {
		if (target != null) {
			Shape_c[] targetArray = new Shape_c[1];
			targetArray[0] = target;
			return getManyGD_NCSsOnR28(targetArray);
		} else {
			NoncontainingShape_c[] result = new NoncontainingShape_c[0];
			return result;
		}
	}

	public static NoncontainingShape_c[] getManyGD_NCSsOnR28(Shape_c target,
			boolean loadComponent) {
		if (target != null) {
			Shape_c[] targetArray = new Shape_c[1];
			targetArray[0] = target;
			return getManyGD_NCSsOnR28(targetArray, loadComponent);
		} else {
			NoncontainingShape_c[] result = new NoncontainingShape_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R28
		Shape_c relInst22147 = (Shape_c) baseRoot
				.getInstanceList(Shape_c.class).get(new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22147 == null) {
			relInst22147 = (Shape_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Shape_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst22147 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22147) && !isProxy())) {
				relInst22147.relateAcrossR28To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R28
		// GD_SHP
		inst = IsSupertypeShape;
		unrelateAcrossR28From(IsSupertypeShape, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(NoncontainingShape_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final NoncontainingShape_c inst = (NoncontainingShape_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(NoncontainingShape_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static NoncontainingShape_c NoncontainingShapeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		NoncontainingShape_c result = findNoncontainingShapeInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static NoncontainingShape_c findNoncontainingShapeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(NoncontainingShape_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				NoncontainingShape_c x = (NoncontainingShape_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static NoncontainingShape_c NoncontainingShapeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return NoncontainingShapeInstance(modelRoot, test, true);
	}

	public static NoncontainingShape_c NoncontainingShapeInstance(
			ModelRoot modelRoot) {
		return NoncontainingShapeInstance(modelRoot, null, true);
	}

	public static NoncontainingShape_c[] NoncontainingShapeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(NoncontainingShape_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				NoncontainingShape_c x = (NoncontainingShape_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				NoncontainingShape_c[] ret_set = new NoncontainingShape_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new NoncontainingShape_c[0];
			}
		}
	}
	public static NoncontainingShape_c[] NoncontainingShapeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return NoncontainingShapeInstances(modelRoot, test, true);
	}
	public static NoncontainingShape_c[] NoncontainingShapeInstances(
			ModelRoot modelRoot) {
		return NoncontainingShapeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the NonContaining Shape.dispose call: ";
		Shape_c testR28Inst1 = Shape_c.getOneGD_SHPOnR28(this, false);

		if (testR28Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "28 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE,
						"NonContaining Shape", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getElementidLongBased() {
		if (IsSupertypeShape != null) {
			return IsSupertypeShape.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (IsSupertypeShape != null) {
			return IsSupertypeShape.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeShape != null);

	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "NonContaining Shape", //$NON-NLS-1$
						" Operation entered: NonContaining Shape::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		NoncontainingShape_c[] objs = NoncontainingShape_c
				.NoncontainingShapeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "NonContaining Shape", //$NON-NLS-1$
				" Operation entered: NonContaining Shape::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class NoncontainingShape_c_test22149_c implements ClassQueryInterface_c {
			NoncontainingShape_c_test22149_c(java.util.UUID p22150) {
				m_p22150 = p22150;
			}
			private java.util.UUID m_p22150;
			public boolean evaluate(Object candidate) {
				NoncontainingShape_c selected = (NoncontainingShape_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22150));
				return retval;
			}
		}

		NoncontainingShape_c[] objs22148 = NoncontainingShape_c
				.NoncontainingShapeInstances(modelRoot,
						new NoncontainingShape_c_test22149_c(getElementid()));

		if (((objs22148.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"NonContaining Shape", //$NON-NLS-1$
								"Consistency: Object: NonContaining Shape: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22148.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: NonContaining Shape: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22148.length), e);
			}
			retval = false;

		}

		if (((objs22148.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"NonContaining Shape", //$NON-NLS-1$
								"Consistency: Object: NonContaining Shape: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22148.length)
										+ " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: NonContaining Shape: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22148.length)
										+ " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// NonContaining Shape is a subtype in association: rel.Numb = 28
		// The supertype class is: Shape
		class Shape_c_test22154_c implements ClassQueryInterface_c {
			Shape_c_test22154_c(java.util.UUID p22155) {
				m_p22155 = p22155;
			}
			private java.util.UUID m_p22155;
			public boolean evaluate(Object candidate) {
				Shape_c selected = (Shape_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22155));
				return retval;
			}
		}

		Shape_c[] objs22153 = Shape_c.ShapeInstances(modelRoot,
				new Shape_c_test22154_c(getElementid()));

		if (((objs22153.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"NonContaining Shape", //$NON-NLS-1$
								"Consistency: Object: NonContaining Shape: Association: 28: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22153.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: NonContaining Shape: Association: 28: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22153.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end NonContaining Shape
