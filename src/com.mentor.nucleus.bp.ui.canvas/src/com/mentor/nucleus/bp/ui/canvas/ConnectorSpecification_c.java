      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ConnectorSpecification_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_CONNECTOR_SPECIFICATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ConnectorSpecification_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ConnectorSpecification_c(ModelRoot modelRoot,
       int  p_m_ooa_type)
  {
    super(modelRoot);
       m_ooa_type = p_m_ooa_type;
        
  }
  static public ConnectorSpecification_c createProxy(ModelRoot modelRoot,
       int  p_m_ooa_type, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);
      ConnectorSpecification_c new_inst = null;
      synchronized(instances) {
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_ooa_type = p_m_ooa_type;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ConnectorSpecification_c(modelRoot,
p_m_ooa_type
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ConnectorSpecification_c resolveInstance(ModelRoot modelRoot,
       int  p_m_ooa_type){
    InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);
    ConnectorSpecification_c source = null;
    synchronized(instances) {
        Object [] key = {
        new UUID(0, new Long(p_m_ooa_type))
            };
        source = (ConnectorSpecification_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_ooa_type = p_m_ooa_type;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ConnectorSpecification_c new_inst = new ConnectorSpecification_c(modelRoot,
p_m_ooa_type
);
    return new_inst;
  }
  public ConnectorSpecification_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
  }




  public boolean equals (Object elem) {
     if (!(elem instanceof ConnectorSpecification_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ConnectorSpecification_c)) {
           return false;
       }
       
       ConnectorSpecification_c me = (ConnectorSpecification_c)elem;
      if (getOoa_type() != ((ConnectorSpecification_c)elem).getOoa_type()) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ConnectorSpecification_c)) {
           return false;
       }
       
       ConnectorSpecification_c me = (ConnectorSpecification_c)elem;
      if (getOoa_typeCachedValue() != ((ConnectorSpecification_c)elem).getOoa_typeCachedValue()) return false;
      return true;
    }


  // Attributes
  private int  m_ooa_type ;
      
// declare association references from this class
  
  
    
// referring navigation

ElementSpecification_c IsSupertypeElementSpecification ;
public void relateAcrossR200To(ElementSpecification_c target)
{
	relateAcrossR200To(target, true);
}
public void relateAcrossR200To(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeElementSpecification) return;  // already related

    if ( IsSupertypeElementSpecification != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeElementSpecification != null) {
    
        IsSupertypeElementSpecification.clearBackPointerR200To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ConnectorSpecification_c.relateAcrossR200To(ElementSpecification_c target)", 
			"Relate performed across R200 from Connector Specification to Element Specification without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeElementSpecification = target ;
        m_ooa_type = target.getOoa_type();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR200To(this);
        target.addRef();
    }
}
public void unrelateAcrossR200From(ElementSpecification_c target)
{
	unrelateAcrossR200From(target, true);
}
public void unrelateAcrossR200From(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeElementSpecification == null) return;  // already unrelated
	
	if (target != IsSupertypeElementSpecification) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R200", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR200To(this);
    }
    

      if(IsSupertypeElementSpecification != null) {
      
        m_ooa_type = IsSupertypeElementSpecification.getOoa_type();
        IsSupertypeElementSpecification = null ;
        target.removeRef();
    }
}

  
    
      
public static ConnectorSpecification_c getOneTS_CSPOnR200(ElementSpecification_c [] targets)
{
    return getOneTS_CSPOnR200(targets, null);
}

public static ConnectorSpecification_c getOneTS_CSPOnR200(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
    ConnectorSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneTS_CSPOnR200(targets[i], test);
        }
    }

    return ret_val;
}

public static ConnectorSpecification_c getOneTS_CSPOnR200(ElementSpecification_c target)
{
  return getOneTS_CSPOnR200(target, null);
}

public static ConnectorSpecification_c getOneTS_CSPOnR200(ElementSpecification_c target, boolean loadComponent)
{
      return getOneTS_CSPOnR200(Ooaofgraphics.getDefaultInstance(), target, null, loadComponent);
}

public static ConnectorSpecification_c getOneTS_CSPOnR200(ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneTS_CSPOnR200(Ooaofgraphics.getDefaultInstance(), target, test);
  }
  return null;
}

public static ConnectorSpecification_c getOneTS_CSPOnR200(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
	return getOneTS_CSPOnR200(modelRoot, target, test, true);
}

public static ConnectorSpecification_c getOneTS_CSPOnR200(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneTS_CSPOnR200(modelRoot,target,test);
}
private static ConnectorSpecification_c find_getOneTS_CSPOnR200(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ConnectorSpecification_c source = (ConnectorSpecification_c)target.backPointer_IsSubtypeConnectorSpecificationIsSubtype_R200;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR200(ElementSpecification_c [] targets)
{
  return getManyTS_CSPsOnR200(targets, null);
}
public static ConnectorSpecification_c [] getManyTS_CSPsOnR200(ElementSpecification_c [] targets, boolean loadComponent)
{
  return getManyTS_CSPsOnR200(targets, null, loadComponent);
}
public static ConnectorSpecification_c [] getManyTS_CSPsOnR200(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
	return getManyTS_CSPsOnR200(targets, test, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR200(ElementSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ConnectorSpecification_c[0];

  ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();
 
   InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ConnectorSpecification_c source = (ConnectorSpecification_c)targets[i].backPointer_IsSubtypeConnectorSpecificationIsSubtype_R200;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ConnectorSpecification_c[] ret_set = new ConnectorSpecification_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ConnectorSpecification_c[0];
  }
  }

public static ConnectorSpecification_c [] getManyTS_CSPsOnR200(ElementSpecification_c target)
{
  if (target != null) {
    ElementSpecification_c [] targetArray = new ElementSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_CSPsOnR200(targetArray);
  } else {
    ConnectorSpecification_c [] result = new ConnectorSpecification_c [0] ;
  return result ;
}
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR200(ElementSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    ElementSpecification_c [] targetArray = new ElementSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_CSPsOnR200(targetArray, loadComponent);
  } else {
    ConnectorSpecification_c [] result = new ConnectorSpecification_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<TerminalSpecification_c> backPointer_StartsWithTerminalSpecificationStartsWith_R202 = new ArrayList<TerminalSpecification_c>();

public void setTerminalSpecificationOrderInChildListR202(TerminalSpecification_c target, int index) {
	unrelateAcrossR202From(target);
	TerminalSpecification_c[] elements = TerminalSpecification_c.getManyTS_TSPsOnR202(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR202From((TerminalSpecification_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR202To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR202To((TerminalSpecification_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR202To(TerminalSpecification_c target)
{
  if (target != null) {
    target.relateAcrossR202To(this, true) ;
  }
}

public void relateAcrossR202To(TerminalSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR202To(this, notifyChanges) ;
  }
}

public void setBackPointerR202To(TerminalSpecification_c target)
{
  	synchronized (backPointer_StartsWithTerminalSpecificationStartsWith_R202) {
		backPointer_StartsWithTerminalSpecificationStartsWith_R202.add(target);
	}
}

public void unrelateAcrossR202From(TerminalSpecification_c target)
{
  if (target != null) {
    target.unrelateAcrossR202From(this, true) ;
  }
}

public void unrelateAcrossR202From(TerminalSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR202From(this, notifyChanges) ;
  }
}

public void clearBackPointerR202To(TerminalSpecification_c target)
{
  synchronized (backPointer_StartsWithTerminalSpecificationStartsWith_R202) {
	    backPointer_StartsWithTerminalSpecificationStartsWith_R202.remove(target);
	}
}

public static ConnectorSpecification_c getOneTS_CSPOnR202(TerminalSpecification_c [] targets)
{
    return getOneTS_CSPOnR202(targets, null);
}

public static ConnectorSpecification_c getOneTS_CSPOnR202(TerminalSpecification_c [] targets, ClassQueryInterface_c test)
{
    return getOneTS_CSPOnR202(targets, test, true);
}

public static ConnectorSpecification_c getOneTS_CSPOnR202(TerminalSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ConnectorSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ConnectorSpecification_c candidate_val = getOneTS_CSPOnR202(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneTS_CSPOnR202(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ConnectorSpecification_c getOneTS_CSPOnR202(TerminalSpecification_c target)
{
	return getOneTS_CSPOnR202(target, true);
}
public static ConnectorSpecification_c getOneTS_CSPOnR202(TerminalSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    return target.DefinesValidStartPointForConnectorSpecification ;
  } else {
    return null;
  }
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyTS_CSPsOnR202(targets, test, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ConnectorSpecification_c[0];
  
  
  LinkedHashSet<ConnectorSpecification_c> elementsSet = new LinkedHashSet<ConnectorSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
    ConnectorSpecification_c associate = targets[i].DefinesValidStartPointForConnectorSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ConnectorSpecification_c[] result = new ConnectorSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c [] targets)
{
  return getManyTS_CSPsOnR202(targets, null);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TerminalSpecification_c [] targetArray = new TerminalSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_CSPsOnR202(targetArray, test, loadComponent);
  } else {
    ConnectorSpecification_c [] result = new ConnectorSpecification_c [0] ;
    return result ;
  }
  
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c target,
    ClassQueryInterface_c test)
{
    return getManyTS_CSPsOnR202(target, null, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c target)
{
    return getManyTS_CSPsOnR202(target, null, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR202(TerminalSpecification_c target, boolean loadComponent)
{
    return getManyTS_CSPsOnR202(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<TerminalSpecification_c> backPointer_EndsWithTerminalSpecificationEndsWith_R203 = new ArrayList<TerminalSpecification_c>();

public void setTerminalSpecificationOrderInChildListR203(TerminalSpecification_c target, int index) {
	unrelateAcrossR203From(target);
	TerminalSpecification_c[] elements = TerminalSpecification_c.getManyTS_TSPsOnR203(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR203From((TerminalSpecification_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR203To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR203To((TerminalSpecification_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR203To(TerminalSpecification_c target)
{
  if (target != null) {
    target.relateAcrossR203To(this, true) ;
  }
}

public void relateAcrossR203To(TerminalSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR203To(this, notifyChanges) ;
  }
}

public void setBackPointerR203To(TerminalSpecification_c target)
{
  	synchronized (backPointer_EndsWithTerminalSpecificationEndsWith_R203) {
		backPointer_EndsWithTerminalSpecificationEndsWith_R203.add(target);
	}
}

public void unrelateAcrossR203From(TerminalSpecification_c target)
{
  if (target != null) {
    target.unrelateAcrossR203From(this, true) ;
  }
}

public void unrelateAcrossR203From(TerminalSpecification_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR203From(this, notifyChanges) ;
  }
}

public void clearBackPointerR203To(TerminalSpecification_c target)
{
  synchronized (backPointer_EndsWithTerminalSpecificationEndsWith_R203) {
	    backPointer_EndsWithTerminalSpecificationEndsWith_R203.remove(target);
	}
}

public static ConnectorSpecification_c getOneTS_CSPOnR203(TerminalSpecification_c [] targets)
{
    return getOneTS_CSPOnR203(targets, null);
}

public static ConnectorSpecification_c getOneTS_CSPOnR203(TerminalSpecification_c [] targets, ClassQueryInterface_c test)
{
    return getOneTS_CSPOnR203(targets, test, true);
}

public static ConnectorSpecification_c getOneTS_CSPOnR203(TerminalSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ConnectorSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ConnectorSpecification_c candidate_val = getOneTS_CSPOnR203(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneTS_CSPOnR203(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ConnectorSpecification_c getOneTS_CSPOnR203(TerminalSpecification_c target)
{
	return getOneTS_CSPOnR203(target, true);
}
public static ConnectorSpecification_c getOneTS_CSPOnR203(TerminalSpecification_c target, boolean loadComponent)
{
  if (target != null) {
    return target.DefinesValidEndPointForConnectorSpecification ;
  } else {
    return null;
  }
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyTS_CSPsOnR203(targets, test, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ConnectorSpecification_c[0];
  
  
  LinkedHashSet<ConnectorSpecification_c> elementsSet = new LinkedHashSet<ConnectorSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
    ConnectorSpecification_c associate = targets[i].DefinesValidEndPointForConnectorSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ConnectorSpecification_c[] result = new ConnectorSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c [] targets)
{
  return getManyTS_CSPsOnR203(targets, null);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TerminalSpecification_c [] targetArray = new TerminalSpecification_c[1];
    targetArray[0] = target;
    return getManyTS_CSPsOnR203(targetArray, test, loadComponent);
  } else {
    ConnectorSpecification_c [] result = new ConnectorSpecification_c [0] ;
    return result ;
  }
  
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c target,
    ClassQueryInterface_c test)
{
    return getManyTS_CSPsOnR203(target, null, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c target)
{
    return getManyTS_CSPsOnR203(target, null, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR203(TerminalSpecification_c target, boolean loadComponent)
{
    return getManyTS_CSPsOnR203(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ConnectorTerminal_c> backPointer_ConnectorTerminal_R205 = new ArrayList<ConnectorTerminal_c>();

public void setConnectorTerminalOrderInChildListR205(ConnectorTerminal_c target, int index) {
	unrelateAcrossR205From(target);
	ConnectorTerminal_c[] elements = ConnectorTerminal_c.getManyTS_CNTsOnR205(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR205From((ConnectorTerminal_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR205To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR205To((ConnectorTerminal_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR205To(ConnectorTerminal_c target)
{
  if (target != null) {
    target.relateAcrossR205To(this, true) ;
  }
}

public void relateAcrossR205To(ConnectorTerminal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR205To(this, notifyChanges) ;
  }
}

public void setBackPointerR205To(ConnectorTerminal_c target)
{
  	synchronized (backPointer_ConnectorTerminal_R205) {
		backPointer_ConnectorTerminal_R205.add(target);
	}
}

public void unrelateAcrossR205From(ConnectorTerminal_c target)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, true) ;
  }
}

public void unrelateAcrossR205From(ConnectorTerminal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, notifyChanges) ;
  }
}

public void clearBackPointerR205To(ConnectorTerminal_c target)
{
  synchronized (backPointer_ConnectorTerminal_R205) {
	    backPointer_ConnectorTerminal_R205.remove(target);
	}
}

public static ConnectorSpecification_c getOneTS_CSPOnR205(ConnectorTerminal_c [] targets)
{
    return getOneTS_CSPOnR205(targets, null);
}

public static ConnectorSpecification_c getOneTS_CSPOnR205(ConnectorTerminal_c [] targets, ClassQueryInterface_c test)
{
    return getOneTS_CSPOnR205(targets, test, true);
}

public static ConnectorSpecification_c getOneTS_CSPOnR205(ConnectorTerminal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ConnectorSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ConnectorSpecification_c candidate_val = getOneTS_CSPOnR205(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneTS_CSPOnR205(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ConnectorSpecification_c getOneTS_CSPOnR205(ConnectorTerminal_c target)
{
	return getOneTS_CSPOnR205(target, true);
}
public static ConnectorSpecification_c getOneTS_CSPOnR205(ConnectorTerminal_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SpecifiesTerminationOnConnectorSpecification ;
  } else {
    return null;
  }
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyTS_CSPsOnR205(targets, test, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ConnectorSpecification_c[0];
  
  
  LinkedHashSet<ConnectorSpecification_c> elementsSet = new LinkedHashSet<ConnectorSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
    ConnectorSpecification_c associate = targets[i].SpecifiesTerminationOnConnectorSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ConnectorSpecification_c[] result = new ConnectorSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c [] targets)
{
  return getManyTS_CSPsOnR205(targets, null);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ConnectorTerminal_c [] targetArray = new ConnectorTerminal_c[1];
    targetArray[0] = target;
    return getManyTS_CSPsOnR205(targetArray, test, loadComponent);
  } else {
    ConnectorSpecification_c [] result = new ConnectorSpecification_c [0] ;
    return result ;
  }
  
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c target,
    ClassQueryInterface_c test)
{
    return getManyTS_CSPsOnR205(target, null, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c target)
{
    return getManyTS_CSPsOnR205(target, null, true);
}

public static ConnectorSpecification_c [] getManyTS_CSPsOnR205(ConnectorTerminal_c target, boolean loadComponent)
{
    return getManyTS_CSPsOnR205(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R200
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ElementSpecification_c.class);
      ElementSpecification_c relInst22034 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ElementSpecification_c source = (ElementSpecification_c)cursor.next() ;
           if (     source.getOoa_type() == m_ooa_type 		){
  		relInst22034 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst22034 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22034) && !isProxy())) {
	      relInst22034.relateAcrossR200To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R200
      // GD_ES
		  inst=IsSupertypeElementSpecification;
			unrelateAcrossR200From(IsSupertypeElementSpecification, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ConnectorSpecification_c inst = (ConnectorSpecification_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ConnectorSpecification_c ConnectorSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ConnectorSpecification_c result=findConnectorSpecificationInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static ConnectorSpecification_c findConnectorSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ConnectorSpecification_c x = (ConnectorSpecification_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static ConnectorSpecification_c ConnectorSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ConnectorSpecificationInstance(modelRoot,test,true);
  }
  
  public static ConnectorSpecification_c ConnectorSpecificationInstance(ModelRoot modelRoot)
  {
	 return ConnectorSpecificationInstance(modelRoot,null,true);
  }

  public static ConnectorSpecification_c [] ConnectorSpecificationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(ConnectorSpecification_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ConnectorSpecification_c x = (ConnectorSpecification_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ConnectorSpecification_c[] ret_set = new ConnectorSpecification_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ConnectorSpecification_c[0];
			}		
		} 
  }
  public static ConnectorSpecification_c [] ConnectorSpecificationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ConnectorSpecificationInstances(modelRoot,test,true);
  }
  public static ConnectorSpecification_c [] ConnectorSpecificationInstances(ModelRoot modelRoot)
  {
	return ConnectorSpecificationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Connector Specification.dispose call: ";
	TerminalSpecification_c testR202Inst = TerminalSpecification_c.getOneTS_TSPOnR202(this, false);

	if ( testR202Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "202 ";	
	}
	TerminalSpecification_c testR203Inst = TerminalSpecification_c.getOneTS_TSPOnR203(this, false);

	if ( testR203Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "203 ";	
	}
	ElementSpecification_c testR200Inst2 = ElementSpecification_c.getOneGD_ESOnR200(this, false);

	if ( testR200Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "200 ";
	}
	ConnectorTerminal_c testR205Inst = ConnectorTerminal_c.getOneTS_CNTOnR205(this, false);

	if ( testR205Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "205 ";	
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Connector Specification", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      return false;      
  }      
  // declare attribute accessors
  public int getOoa_type()
  {
    if ( IsSupertypeElementSpecification != null )
    {
      return IsSupertypeElementSpecification.getOoa_type();
    }
    return 0;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeElementSpecification != null );
 
 }                  

  public int getOoa_typeCachedValue()
  {
      return m_ooa_type;
  }
  
  public void setOoa_type(int newValue)
  {
   m_ooa_type = newValue ;
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Connector Specification", //$NON-NLS-1$
	  " Operation entered: Connector Specification::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ConnectorSpecification_c [] objs = ConnectorSpecification_c.ConnectorSpecificationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Connector Specification", //$NON-NLS-1$
	  " Operation entered: Connector Specification::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ConnectorSpecification_c_test22036_c implements ClassQueryInterface_c
    {
	  ConnectorSpecification_c_test22036_c( int     p22037 ) {
	  m_p22037 = p22037;
	  }
	  private int      m_p22037; 
	  public boolean evaluate (Object candidate)
	  {
	      ConnectorSpecification_c selected = (ConnectorSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p22037));
	      return retval;
	  }
    }

    ConnectorSpecification_c [] objs22035 = 
    ConnectorSpecification_c.ConnectorSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ConnectorSpecification_c_test22036_c(getOoa_type())) ;

    if ( (  (objs22035.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Specification", //$NON-NLS-1$
           "Consistency: Object: Connector Specification: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22035.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Specification: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22035.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22035.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Specification", //$NON-NLS-1$
           "Consistency: Object: Connector Specification: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22035.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Specification: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22035.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Connector Specification is a subtype in association: rel.Numb = 200
          // The supertype class is: Element Specification
    class ElementSpecification_c_test22041_c implements ClassQueryInterface_c
    {
	  ElementSpecification_c_test22041_c( int     p22042 ) {
	  m_p22042 = p22042;
	  }
	  private int      m_p22042; 
	  public boolean evaluate (Object candidate)
	  {
	      ElementSpecification_c selected = (ElementSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p22042));
	      return retval;
	  }
    }

    ElementSpecification_c [] objs22040 = 
    ElementSpecification_c.ElementSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ElementSpecification_c_test22041_c(getOoa_type())) ;

    if ( (  (objs22040.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Specification", //$NON-NLS-1$
           "Consistency: Object: Connector Specification: Association: 200: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22040.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Specification: Association: 200: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22040.length )  , e); 
      }
      retval = false;

    }

          // Connector Specification is a participating class in association: rel.Numb = 202
             // Object: Terminal Specification
    class TerminalSpecification_c_test22044_c implements ClassQueryInterface_c
    {
	  TerminalSpecification_c_test22044_c( int     p22045 ) {
	  m_p22045 = p22045;
	  }
	  private int      m_p22045; 
	  public boolean evaluate (Object candidate)
	  {
	      TerminalSpecification_c selected = (TerminalSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStarting_ooa_type() == (m_p22045));
	      return retval;
	  }
    }

    TerminalSpecification_c [] objs22043 = 
    TerminalSpecification_c.TerminalSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new TerminalSpecification_c_test22044_c(getOoa_type())) ;

    if ( (  (objs22043.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Specification", //$NON-NLS-1$
           "Consistency: Object: Connector Specification: Association: 202: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22043.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Specification: Association: 202: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22043.length )  , e); 
      }
      retval = false;

    }
                
          // Connector Specification is a participating class in association: rel.Numb = 203
             // Object: Terminal Specification
    class TerminalSpecification_c_test22047_c implements ClassQueryInterface_c
    {
	  TerminalSpecification_c_test22047_c( int     p22048 ) {
	  m_p22048 = p22048;
	  }
	  private int      m_p22048; 
	  public boolean evaluate (Object candidate)
	  {
	      TerminalSpecification_c selected = (TerminalSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEnding_ooa_type() == (m_p22048));
	      return retval;
	  }
    }

    TerminalSpecification_c [] objs22046 = 
    TerminalSpecification_c.TerminalSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new TerminalSpecification_c_test22047_c(getOoa_type())) ;

    if ( (  (objs22046.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector Specification", //$NON-NLS-1$
           "Consistency: Object: Connector Specification: Association: 203: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22046.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector Specification: Association: 203: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22046.length )  , e); 
      }
      retval = false;

    }
                
          // Connector Specification is a participating class in association: rel.Numb = 205
             // Object: Connector Terminal
    return retval;
  }


  // declare transform functions
  public  boolean      Startcriteriamet()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Specification", " Operation entered: ConnectorSpecification::Startcriteriamet") ; 
               final ModelRoot modelRoot = getModelRoot();
TerminalSpecification_c [] v_termSpecs = TerminalSpecification_c.getManyTS_TSPsOnR202(this);


TerminalSpecification_c  v_termSpec = null;
for ( int i21310 = 0; i21310 < v_termSpecs.length; i21310++)
{
  v_termSpec = v_termSpecs[i21310] ;

if ( (v_termSpec.getSatisfied()) )
{

return true;



}


}

return false;



   } // End startCriteriaMet
  public  boolean      Endcriteriamet()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector Specification", " Operation entered: ConnectorSpecification::Endcriteriamet") ; 
               final ModelRoot modelRoot = getModelRoot();
TerminalSpecification_c [] v_termSpecs = TerminalSpecification_c.getManyTS_TSPsOnR203(this);


TerminalSpecification_c  v_termSpec = null;
for ( int i21311 = 0; i21311 < v_termSpecs.length; i21311++)
{
  v_termSpec = v_termSpecs[i21311] ;

if ( (v_termSpec.getSatisfied()) )
{

return true;



}


}

return false;



   } // End endCriteriaMet

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Connector Specification
