      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Waypoint_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_WAYPOINT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Waypoint_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Waypoint_c(ModelRoot modelRoot,
       java.util.UUID         p_m_way_id,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_edge_elementid,
       java.util.UUID         p_m_polyline_elementid,
       java.util.UUID         p_m_previous_way_id)
  {
    super(modelRoot);
       m_positionx = p_m_positionx;
       m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_way_id = IdAssigner.preprocessUUID(p_m_way_id);
       //extract 28 bit value only            
       m_way_idLongBased = 0xfffffff & p_m_way_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_edge_elementid = IdAssigner.preprocessUUID(p_m_edge_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_polyline_elementid = IdAssigner.preprocessUUID(p_m_polyline_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_way_id = IdAssigner.preprocessUUID(p_m_previous_way_id);
        
    setUniqueId(m_way_id);
    Object [] key = {m_way_id};
    addInstanceToMap(key);
  }
  static public Waypoint_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_way_id,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_edge_elementid,
       java.util.UUID         p_m_polyline_elementid,
       java.util.UUID         p_m_previous_way_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);
      Waypoint_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_way_id};
          new_inst = (Waypoint_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_positionx = p_m_positionx;
       new_inst.m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_way_id = IdAssigner.preprocessUUID(p_m_way_id);
       //extract 28 bit value only            
       new_inst.m_way_idLongBased = 0xfffffff & p_m_way_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_edge_elementid = IdAssigner.preprocessUUID(p_m_edge_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_polyline_elementid = IdAssigner.preprocessUUID(p_m_polyline_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_way_id = IdAssigner.preprocessUUID(p_m_previous_way_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Waypoint_c(modelRoot,
p_m_way_id,
p_m_positionx,
p_m_positiony,
p_m_edge_elementid,
p_m_polyline_elementid,
p_m_previous_way_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Waypoint_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_way_id,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_edge_elementid,
       java.util.UUID         p_m_polyline_elementid,
       java.util.UUID         p_m_previous_way_id){
    InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);
    Waypoint_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_way_id
            };
        source = (Waypoint_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_positionx = p_m_positionx;
       source.m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_way_id = IdAssigner.preprocessUUID(p_m_way_id);
       //extract 28 bit value only            
       source.m_way_idLongBased = 0xfffffff & p_m_way_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_edge_elementid = IdAssigner.preprocessUUID(p_m_edge_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_polyline_elementid = IdAssigner.preprocessUUID(p_m_polyline_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_way_id = IdAssigner.preprocessUUID(p_m_previous_way_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Waypoint_c new_inst = new Waypoint_c(modelRoot,
p_m_way_id,
p_m_positionx,
p_m_positiony,
p_m_edge_elementid,
p_m_polyline_elementid,
p_m_previous_way_id
);
    return new_inst;
  }
  public Waypoint_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_way_id = idAssigner.createUUID();
     m_edge_elementid = IdAssigner.NULL_UUID;   
     m_polyline_elementid = IdAssigner.NULL_UUID;   
     m_previous_way_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_way_id);
    Object [] key = {m_way_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_way_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_way_id !=  p_newKey ){
	
		m_way_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Waypoint_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Waypoint_c)) {
           return false;
       }
       
       Waypoint_c me = (Waypoint_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getWay_id()) || IdAssigner.NULL_UUID.equals(((Waypoint_c)elem).getWay_id())) && this != elem)) {
      	return false;
      }
      if (!getWay_id().equals(((Waypoint_c)elem).getWay_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Waypoint_c)) {
           return false;
       }
       
       Waypoint_c me = (Waypoint_c)elem;
      if (!getWay_id().equals(((Waypoint_c)elem).getWay_id())) return false;
      return true;
    }


  // Attributes
  private float        m_positionx ;
  private float        m_positiony ;
  private java.util.UUID         m_way_id ;
  private long m_way_idLongBased ;
  private java.util.UUID         m_edge_elementid ;
  private java.util.UUID         m_polyline_elementid ;
  private java.util.UUID         m_previous_way_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphedge_c EdgeGraphedge ;
public void relateAcrossR319To(Graphedge_c target)
{
	relateAcrossR319To(target, true);
}
public void relateAcrossR319To(Graphedge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == EdgeGraphedge) return;  // already related

    if ( EdgeGraphedge != target ) {
    
    Object oldKey = getInstanceKey();

    if (EdgeGraphedge != null) {
    
        EdgeGraphedge.clearBackPointerR319To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Waypoint_c.relateAcrossR319To(Graphedge_c target)", 
			"Relate performed across R319 from Waypoint to GraphEdge without unrelate of prior instance.");  
		}
    }
                
    	EdgeGraphedge = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_edge_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR319To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "319", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR319From(Graphedge_c target)
{
	unrelateAcrossR319From(target, true);
}
public void unrelateAcrossR319From(Graphedge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (EdgeGraphedge == null) return;  // already unrelated
	
	if (target != EdgeGraphedge) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R319", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR319To(this);
    }
    

      if(EdgeGraphedge != null) {
      
        m_edge_elementid = EdgeGraphedge.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_edge_elementid))
        {
          m_edge_elementid = EdgeGraphedge.getElementidCachedValue();
        }       
        EdgeGraphedge = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "319", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Waypoint_c getOneDIM_WAYOnR319(Graphedge_c [] targets)
{
    return getOneDIM_WAYOnR319(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR319(Graphedge_c [] targets, ClassQueryInterface_c test)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_WAYOnR319(targets[i], test);
        }
    }

    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR319(Graphedge_c target)
{
  return getOneDIM_WAYOnR319(target, null);
}

public static Waypoint_c getOneDIM_WAYOnR319(Graphedge_c target, boolean loadComponent)
{
    return getOneDIM_WAYOnR319(target.getModelRoot(), target, null, loadComponent);
}

public static Waypoint_c getOneDIM_WAYOnR319(Graphedge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_WAYOnR319(target.getModelRoot(), target, test);
  }
  return null;
}

public static Waypoint_c getOneDIM_WAYOnR319(ModelRoot modelRoot, Graphedge_c target, ClassQueryInterface_c test)
{
	return getOneDIM_WAYOnR319(modelRoot, target, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR319(ModelRoot modelRoot, Graphedge_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_WAYOnR319(modelRoot,target,test);
}
private static Waypoint_c find_getOneDIM_WAYOnR319(ModelRoot modelRoot, Graphedge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_WaypointWaypointWaypoint_R319) {
	    for ( int i = 0; i < target.backPointer_WaypointWaypointWaypoint_R319.size(); ++i ) {
	      Waypoint_c source = (Waypoint_c)target.backPointer_WaypointWaypointWaypoint_R319.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c [] targets)
{
  return getManyDIM_WAYsOnR319(targets, null);
}
public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c [] targets, boolean loadComponent)
{
  return getManyDIM_WAYsOnR319(targets, null, loadComponent);
}
public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR319(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Waypoint_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_WaypointWaypointWaypoint_R319) {
	    for (int j = 0; j < targets[i].backPointer_WaypointWaypointWaypoint_R319.size(); ++j) {
	      Waypoint_c source = (Waypoint_c)targets[i].backPointer_WaypointWaypointWaypoint_R319.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Waypoint_c[] ret_set = new Waypoint_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Waypoint_c[0];
  }
  }

public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c target)
{
  return getManyDIM_WAYsOnR319(target, null);
}

public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c target, boolean loadComponent)
{
  return getManyDIM_WAYsOnR319(target, null, loadComponent);
}

public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c target, ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR319(target, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR319(Graphedge_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Waypoint_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_WaypointWaypointWaypoint_R319) {
    for (int i = 0; i < target.backPointer_WaypointWaypointWaypoint_R319.size(); ++i) {
      Waypoint_c source = (Waypoint_c)target.backPointer_WaypointWaypointWaypoint_R319.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Waypoint_c[] ret_set = new Waypoint_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Waypoint_c[0];
	}
  }


  
    
// referring navigation

Polyline_c PolylinePolyline ;
public void relateAcrossR323To(Polyline_c target)
{
	relateAcrossR323To(target, true);
}
public void relateAcrossR323To(Polyline_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == PolylinePolyline) return;  // already related

    if ( PolylinePolyline != target ) {
    
    Object oldKey = getInstanceKey();

    if (PolylinePolyline != null) {
    
        PolylinePolyline.clearBackPointerR323To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Waypoint_c.relateAcrossR323To(Polyline_c target)", 
			"Relate performed across R323 from Waypoint to PolyLine without unrelate of prior instance.");  
		}
    }
                
    	PolylinePolyline = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_polyline_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR323To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "323", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR323From(Polyline_c target)
{
	unrelateAcrossR323From(target, true);
}
public void unrelateAcrossR323From(Polyline_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (PolylinePolyline == null) return;  // already unrelated
	
	if (target != PolylinePolyline) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R323", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR323To(this);
    }
    

      if(PolylinePolyline != null) {
      
        m_polyline_elementid = PolylinePolyline.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_polyline_elementid))
        {
          m_polyline_elementid = PolylinePolyline.getElementidCachedValue();
        }       
        PolylinePolyline = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "323", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Waypoint_c getOneDIM_WAYOnR323(Polyline_c [] targets)
{
    return getOneDIM_WAYOnR323(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR323(Polyline_c [] targets, ClassQueryInterface_c test)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_WAYOnR323(targets[i], test);
        }
    }

    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR323(Polyline_c target)
{
  return getOneDIM_WAYOnR323(target, null);
}

public static Waypoint_c getOneDIM_WAYOnR323(Polyline_c target, boolean loadComponent)
{
    return getOneDIM_WAYOnR323(target.getModelRoot(), target, null, loadComponent);
}

public static Waypoint_c getOneDIM_WAYOnR323(Polyline_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_WAYOnR323(target.getModelRoot(), target, test);
  }
  return null;
}

public static Waypoint_c getOneDIM_WAYOnR323(ModelRoot modelRoot, Polyline_c target, ClassQueryInterface_c test)
{
	return getOneDIM_WAYOnR323(modelRoot, target, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR323(ModelRoot modelRoot, Polyline_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_WAYOnR323(modelRoot,target,test);
}
private static Waypoint_c find_getOneDIM_WAYOnR323(ModelRoot modelRoot, Polyline_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_WaypointWaypointWaypoint_R323) {
	    for ( int i = 0; i < target.backPointer_WaypointWaypointWaypoint_R323.size(); ++i ) {
	      Waypoint_c source = (Waypoint_c)target.backPointer_WaypointWaypointWaypoint_R323.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c [] targets)
{
  return getManyDIM_WAYsOnR323(targets, null);
}
public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c [] targets, boolean loadComponent)
{
  return getManyDIM_WAYsOnR323(targets, null, loadComponent);
}
public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR323(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Waypoint_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_WaypointWaypointWaypoint_R323) {
	    for (int j = 0; j < targets[i].backPointer_WaypointWaypointWaypoint_R323.size(); ++j) {
	      Waypoint_c source = (Waypoint_c)targets[i].backPointer_WaypointWaypointWaypoint_R323.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Waypoint_c[] ret_set = new Waypoint_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Waypoint_c[0];
  }
  }

public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c target)
{
  return getManyDIM_WAYsOnR323(target, null);
}

public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c target, boolean loadComponent)
{
  return getManyDIM_WAYsOnR323(target, null, loadComponent);
}

public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c target, ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR323(target, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR323(Polyline_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Waypoint_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_WaypointWaypointWaypoint_R323) {
    for (int i = 0; i < target.backPointer_WaypointWaypointWaypoint_R323.size(); ++i) {
      Waypoint_c source = (Waypoint_c)target.backPointer_WaypointWaypointWaypoint_R323.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Waypoint_c[] ret_set = new Waypoint_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Waypoint_c[0];
	}
  }


  
    
// referring navigation

Waypoint_c FollowsWaypoint ;
public void relateAcrossR324ToFollows(Waypoint_c target)
{
	relateAcrossR324ToFollows(target, true);
}
public void relateAcrossR324ToFollows(Waypoint_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == FollowsWaypoint) return;  // already related

    if ( FollowsWaypoint != target ) {
    
    Object oldKey = getInstanceKey();

    if (FollowsWaypoint != null) {
    
        FollowsWaypoint.clearBackPointerR324ToPrecedes(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Waypoint_c.relateAcrossR324ToFollows(Waypoint_c target)", 
			"Relate performed across R324 from Waypoint to Waypoint without unrelate of prior instance.");  
		}
    }
                
    	FollowsWaypoint = target ;
        m_previous_way_id = target.getWay_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR324ToPrecedes(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "324", "Follows");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR324FromFollows(Waypoint_c target)
{
	unrelateAcrossR324FromFollows(target, true);
}
public void unrelateAcrossR324FromFollows(Waypoint_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (FollowsWaypoint == null) return;  // already unrelated
	
	if (target != FollowsWaypoint) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R324", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR324ToPrecedes(this);
    }
    

      if(FollowsWaypoint != null) {
      
        m_previous_way_id = FollowsWaypoint.getWay_id();
        FollowsWaypoint = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "324", "Follows");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Waypoint_c getOneDIM_WAYOnR324Precedes(Waypoint_c [] targets)
{
    return getOneDIM_WAYOnR324Precedes(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR324Precedes(Waypoint_c [] targets, ClassQueryInterface_c test)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_WAYOnR324Precedes(targets[i], test);
        }
    }

    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR324Precedes(Waypoint_c target)
{
  return getOneDIM_WAYOnR324Precedes(target, null);
}

public static Waypoint_c getOneDIM_WAYOnR324Precedes(Waypoint_c target, boolean loadComponent)
{
    return getOneDIM_WAYOnR324Precedes(target.getModelRoot(), target, null, loadComponent);
}

public static Waypoint_c getOneDIM_WAYOnR324Precedes(Waypoint_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_WAYOnR324Precedes(target.getModelRoot(), target, test);
  }
  return null;
}

public static Waypoint_c getOneDIM_WAYOnR324Precedes(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test)
{
	return getOneDIM_WAYOnR324Precedes(modelRoot, target, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR324Precedes(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_WAYOnR324Precedes(modelRoot,target,test);
}
private static Waypoint_c find_getOneDIM_WAYOnR324Precedes(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Waypoint_c source = (Waypoint_c)target.backPointer_PrecedesWaypointPrecedes_R324;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Precedes(Waypoint_c [] targets)
{
  return getManyDIM_WAYsOnR324Precedes(targets, null);
}
public static Waypoint_c [] getManyDIM_WAYsOnR324Precedes(Waypoint_c [] targets, boolean loadComponent)
{
  return getManyDIM_WAYsOnR324Precedes(targets, null, loadComponent);
}
public static Waypoint_c [] getManyDIM_WAYsOnR324Precedes(Waypoint_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR324Precedes(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Precedes(Waypoint_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Waypoint_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Waypoint_c source = (Waypoint_c)targets[i].backPointer_PrecedesWaypointPrecedes_R324;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Waypoint_c[] ret_set = new Waypoint_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Waypoint_c[0];
  }
  }

public static Waypoint_c [] getManyDIM_WAYsOnR324Precedes(Waypoint_c target)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyDIM_WAYsOnR324Precedes(targetArray);
  } else {
    Waypoint_c [] result = new Waypoint_c [0] ;
  return result ;
}
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Precedes(Waypoint_c target, boolean loadComponent)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyDIM_WAYsOnR324Precedes(targetArray, loadComponent);
  } else {
    Waypoint_c [] result = new Waypoint_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

Waypoint_c backPointer_PrecedesWaypointPrecedes_R324;

public void setWaypointOrderInChildListR324(Waypoint_c target, int index) {
	unrelateAcrossR324FromPrecedes(target);
	Waypoint_c[] elements = Waypoint_c.getManyDIM_WAYsOnR324Precedes(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR324FromPrecedes((Waypoint_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR324ToPrecedes(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR324ToPrecedes((Waypoint_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR324ToPrecedes(Waypoint_c target)
{
  if (target != null) {
    target.relateAcrossR324ToFollows(this, true) ;
  }
}

public void relateAcrossR324ToPrecedes(Waypoint_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR324ToFollows(this, notifyChanges) ;
  }
}

public void setBackPointerR324ToPrecedes(Waypoint_c target)
{
    backPointer_PrecedesWaypointPrecedes_R324 = target;
}

public void unrelateAcrossR324FromPrecedes(Waypoint_c target)
{
  if (target != null) {
    target.unrelateAcrossR324FromFollows(this, true) ;
  }
}

public void unrelateAcrossR324FromPrecedes(Waypoint_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR324FromFollows(this, notifyChanges) ;
  }
}

public void clearBackPointerR324ToPrecedes(Waypoint_c target)
{
	if (target == backPointer_PrecedesWaypointPrecedes_R324) {
		backPointer_PrecedesWaypointPrecedes_R324 = null;
	}
}

public static Waypoint_c getOneDIM_WAYOnR324Follows(Waypoint_c [] targets)
{
    return getOneDIM_WAYOnR324Follows(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR324Follows(Waypoint_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_WAYOnR324Follows(targets, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR324Follows(Waypoint_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Waypoint_c candidate_val = getOneDIM_WAYOnR324Follows(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_WAYOnR324Follows(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR324Follows(Waypoint_c target)
{
	return getOneDIM_WAYOnR324Follows(target, true);
}
public static Waypoint_c getOneDIM_WAYOnR324Follows(Waypoint_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.FollowsWaypoint ;
  } else {
    return null;
  }
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR324Follows(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Waypoint_c[0];
  
  
  LinkedHashSet<Waypoint_c> elementsSet = new LinkedHashSet<Waypoint_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].FollowsWaypoint == null)
	  targets[i].loadProxy();
    Waypoint_c associate = targets[i].FollowsWaypoint;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Waypoint_c[] result = new Waypoint_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c [] targets)
{
  return getManyDIM_WAYsOnR324Follows(targets, null);
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyDIM_WAYsOnR324Follows(targetArray, test, loadComponent);
  } else {
    Waypoint_c [] result = new Waypoint_c [0] ;
    return result ;
  }
  
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_WAYsOnR324Follows(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c target)
{
    return getManyDIM_WAYsOnR324Follows(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR324Follows(Waypoint_c target, boolean loadComponent)
{
    return getManyDIM_WAYsOnR324Follows(target, null, loadComponent);
}


    
  
  
// referred to navigation

LineSegment_c backPointer_LineSegment_R21;

public void setLineSegmentOrderInChildListR21(LineSegment_c target, int index) {
	unrelateAcrossR21From(target);
	LineSegment_c[] elements = LineSegment_c.getManyGD_LSsOnR21(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR21From((LineSegment_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR21To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR21To((LineSegment_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR21To(LineSegment_c target)
{
  if (target != null) {
    target.relateAcrossR21To(this, true) ;
  }
}

public void relateAcrossR21To(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR21To(this, notifyChanges) ;
  }
}

public void setBackPointerR21To(LineSegment_c target)
{
    backPointer_LineSegment_R21 = target;
}

public void unrelateAcrossR21From(LineSegment_c target)
{
  if (target != null) {
    target.unrelateAcrossR21From(this, true) ;
  }
}

public void unrelateAcrossR21From(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR21From(this, notifyChanges) ;
  }
}

public void clearBackPointerR21To(LineSegment_c target)
{
	if (target == backPointer_LineSegment_R21) {
		backPointer_LineSegment_R21 = null;
	}
}

public static Waypoint_c getOneDIM_WAYOnR21(LineSegment_c [] targets)
{
    return getOneDIM_WAYOnR21(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR21(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_WAYOnR21(targets, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR21(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Waypoint_c candidate_val = getOneDIM_WAYOnR21(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_WAYOnR21(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR21(LineSegment_c target)
{
	return getOneDIM_WAYOnR21(target, true);
}
public static Waypoint_c getOneDIM_WAYOnR21(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.StartingEndpointWaypoint ;
  } else {
    return null;
  }
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR21(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Waypoint_c[0];
  
  
  LinkedHashSet<Waypoint_c> elementsSet = new LinkedHashSet<Waypoint_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].StartingEndpointWaypoint == null)
	  targets[i].loadProxy();
    Waypoint_c associate = targets[i].StartingEndpointWaypoint;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Waypoint_c[] result = new Waypoint_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c [] targets)
{
  return getManyDIM_WAYsOnR21(targets, null);
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyDIM_WAYsOnR21(targetArray, test, loadComponent);
  } else {
    Waypoint_c [] result = new Waypoint_c [0] ;
    return result ;
  }
  
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_WAYsOnR21(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c target)
{
    return getManyDIM_WAYsOnR21(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR21(LineSegment_c target, boolean loadComponent)
{
    return getManyDIM_WAYsOnR21(target, null, loadComponent);
}


    
  
  
// referred to navigation

LineSegment_c backPointer_LineSegment_R22;

public void setLineSegmentOrderInChildListR22(LineSegment_c target, int index) {
	unrelateAcrossR22From(target);
	LineSegment_c[] elements = LineSegment_c.getManyGD_LSsOnR22(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR22From((LineSegment_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR22To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR22To((LineSegment_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR22To(LineSegment_c target)
{
  if (target != null) {
    target.relateAcrossR22To(this, true) ;
  }
}

public void relateAcrossR22To(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR22To(this, notifyChanges) ;
  }
}

public void setBackPointerR22To(LineSegment_c target)
{
    backPointer_LineSegment_R22 = target;
}

public void unrelateAcrossR22From(LineSegment_c target)
{
  if (target != null) {
    target.unrelateAcrossR22From(this, true) ;
  }
}

public void unrelateAcrossR22From(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR22From(this, notifyChanges) ;
  }
}

public void clearBackPointerR22To(LineSegment_c target)
{
	if (target == backPointer_LineSegment_R22) {
		backPointer_LineSegment_R22 = null;
	}
}

public static Waypoint_c getOneDIM_WAYOnR22(LineSegment_c [] targets)
{
    return getOneDIM_WAYOnR22(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR22(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_WAYOnR22(targets, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR22(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Waypoint_c candidate_val = getOneDIM_WAYOnR22(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_WAYOnR22(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR22(LineSegment_c target)
{
	return getOneDIM_WAYOnR22(target, true);
}
public static Waypoint_c getOneDIM_WAYOnR22(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.EndingEndpointWaypoint ;
  } else {
    return null;
  }
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR22(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Waypoint_c[0];
  
  
  LinkedHashSet<Waypoint_c> elementsSet = new LinkedHashSet<Waypoint_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].EndingEndpointWaypoint == null)
	  targets[i].loadProxy();
    Waypoint_c associate = targets[i].EndingEndpointWaypoint;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Waypoint_c[] result = new Waypoint_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c [] targets)
{
  return getManyDIM_WAYsOnR22(targets, null);
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyDIM_WAYsOnR22(targetArray, test, loadComponent);
  } else {
    Waypoint_c [] result = new Waypoint_c [0] ;
    return result ;
  }
  
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_WAYsOnR22(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c target)
{
    return getManyDIM_WAYsOnR22(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR22(LineSegment_c target, boolean loadComponent)
{
    return getManyDIM_WAYsOnR22(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<WaypointInMove_c> backPointer_IsMovedByWaypointInMoveIsMovedBy_R24 = new ArrayList<WaypointInMove_c>();

public void setWaypointInMoveOrderInChildListR24(WaypointInMove_c target, int index) {
	unrelateAcrossR24From(target);
	WaypointInMove_c[] elements = WaypointInMove_c.getManyGD_WIMsOnR24(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR24From((WaypointInMove_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR24To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR24To((WaypointInMove_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR24To(WaypointInMove_c target)
{
  if (target != null) {
    target.relateAcrossR24To(this, true) ;
  }
}

public void relateAcrossR24To(WaypointInMove_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR24To(this, notifyChanges) ;
  }
}

public void setBackPointerR24To(WaypointInMove_c target)
{
  	synchronized (backPointer_IsMovedByWaypointInMoveIsMovedBy_R24) {
		backPointer_IsMovedByWaypointInMoveIsMovedBy_R24.add(target);
	}
}

public void unrelateAcrossR24From(WaypointInMove_c target)
{
  if (target != null) {
    target.unrelateAcrossR24From(this, true) ;
  }
}

public void unrelateAcrossR24From(WaypointInMove_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR24From(this, notifyChanges) ;
  }
}

public void clearBackPointerR24To(WaypointInMove_c target)
{
  synchronized (backPointer_IsMovedByWaypointInMoveIsMovedBy_R24) {
	    backPointer_IsMovedByWaypointInMoveIsMovedBy_R24.remove(target);
	}
}

public static Waypoint_c getOneDIM_WAYOnR24(WaypointInMove_c [] targets)
{
    return getOneDIM_WAYOnR24(targets, null);
}

public static Waypoint_c getOneDIM_WAYOnR24(WaypointInMove_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_WAYOnR24(targets, test, true);
}

public static Waypoint_c getOneDIM_WAYOnR24(WaypointInMove_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Waypoint_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Waypoint_c candidate_val = getOneDIM_WAYOnR24(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_WAYOnR24(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Waypoint_c getOneDIM_WAYOnR24(WaypointInMove_c target)
{
	return getOneDIM_WAYOnR24(target, true);
}
public static Waypoint_c getOneDIM_WAYOnR24(WaypointInMove_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsMovingWaypoint ;
  } else {
    return null;
  }
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR24(targets, test, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Waypoint_c[0];
  
  
  LinkedHashSet<Waypoint_c> elementsSet = new LinkedHashSet<Waypoint_c>();
  for (int i = 0; i < targets.length; i++) {
    Waypoint_c associate = targets[i].IsMovingWaypoint;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Waypoint_c[] result = new Waypoint_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c [] targets)
{
  return getManyDIM_WAYsOnR24(targets, null);
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    WaypointInMove_c [] targetArray = new WaypointInMove_c[1];
    targetArray[0] = target;
    return getManyDIM_WAYsOnR24(targetArray, test, loadComponent);
  } else {
    Waypoint_c [] result = new Waypoint_c [0] ;
    return result ;
  }
  
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_WAYsOnR24(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c target)
{
    return getManyDIM_WAYsOnR24(target, null, true);
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(WaypointInMove_c target, boolean loadComponent)
{
    return getManyDIM_WAYsOnR24(target, null, loadComponent);
}

public static Waypoint_c getOneDIM_WAYOnR24(Model_c target)
{
  return Waypoint_c.getOneDIM_WAYOnR24(WaypointInMove_c.getOneGD_WIMOnR24(target)) ;
}

public static Waypoint_c getOneDIM_WAYOnR24(Model_c target,
    ClassQueryInterface_c test)
{
  return Waypoint_c.getOneDIM_WAYOnR24(WaypointInMove_c.getManyGD_WIMsOnR24(target), test) ;
}

public static Waypoint_c [] getManyDIM_WAYsOnR24(Model_c target,
    ClassQueryInterface_c test)
{
	return getManyDIM_WAYsOnR24(target, test, true);
}
public static Waypoint_c [] getManyDIM_WAYsOnR24(Model_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  WaypointInMove_c [] associators = WaypointInMove_c.getManyGD_WIMsOnR24(target, loadComponent) ;
    return Waypoint_c.getManyDIM_WAYsOnR24(associators, test, loadComponent) ;
}
public static Waypoint_c [] getManyDIM_WAYsOnR24(Model_c target)
{
    return getManyDIM_WAYsOnR24(target, null, true);
}
public static Waypoint_c [] getManyDIM_WAYsOnR24(Model_c target, boolean loadComponent)
{
    return getManyDIM_WAYsOnR24(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (EdgeGraphedge == null) {          
      // R319
      Graphedge_c relInst21640 = (Graphedge_c) baseRoot.getInstanceList(Graphedge_c.class).get(new Object[] {m_edge_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21640 == null) {
      			relInst21640 = (Graphedge_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphedge_c.class).get(new Object[] {m_edge_elementid});
      		}
			//synchronized
      if ( relInst21640 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21640) && !isProxy())) {
	      relInst21640.relateAcrossR319To(this, notifyChanges);
	  }
	  }
	}
	          

	if (PolylinePolyline == null) {          
      // R323
      Polyline_c relInst21641 = (Polyline_c) baseRoot.getInstanceList(Polyline_c.class).get(new Object[] {m_polyline_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21641 == null) {
      			relInst21641 = (Polyline_c) Ooaofooa.getDefaultInstance().getInstanceList(Polyline_c.class).get(new Object[] {m_polyline_elementid});
      		}
			//synchronized
      if ( relInst21641 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21641) && !isProxy())) {
	      relInst21641.relateAcrossR323To(this, notifyChanges);
	  }
	  }
	}
	          

	if (FollowsWaypoint == null) {          
      // R324
      Waypoint_c relInst21642 = (Waypoint_c) baseRoot.getInstanceList(Waypoint_c.class).get(new Object[] {m_previous_way_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21642 == null) {
      			relInst21642 = (Waypoint_c) Ooaofooa.getDefaultInstance().getInstanceList(Waypoint_c.class).get(new Object[] {m_previous_way_id});
      		}
			//synchronized
      if ( relInst21642 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21642) && !isProxy())) {
	      relInst21642.relateAcrossR324ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R319
      // DIM_ED
		  inst=EdgeGraphedge;
			unrelateAcrossR319From(EdgeGraphedge, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R323
      // DIM_PLN
		  inst=PolylinePolyline;
			unrelateAcrossR323From(PolylinePolyline, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R324
      // DIM_WAY
		  inst=FollowsWaypoint;
			unrelateAcrossR324FromFollows(FollowsWaypoint, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Waypoint_c inst = (Waypoint_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Waypoint_c WaypointInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Waypoint_c result=findWaypointInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Waypoint_c findWaypointInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Waypoint_c x = (Waypoint_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Waypoint_c WaypointInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return WaypointInstance(modelRoot,test,true);
  }
  
  public static Waypoint_c WaypointInstance(ModelRoot modelRoot)
  {
	 return WaypointInstance(modelRoot,null,true);
  }

  public static Waypoint_c [] WaypointInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Waypoint_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Waypoint_c x = (Waypoint_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Waypoint_c[] ret_set = new Waypoint_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Waypoint_c[0];
			}		
		} 
  }
  public static Waypoint_c [] WaypointInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  WaypointInstances(modelRoot,test,true);
  }
  public static Waypoint_c [] WaypointInstances(ModelRoot modelRoot)
  {
	return WaypointInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Waypoint.dispose call: ";
	Graphedge_c testR319Inst = Graphedge_c.getOneDIM_EDOnR319(this, false);

	if ( testR319Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "319 ";
	}
	Polyline_c testR323Inst = Polyline_c.getOneDIM_PLNOnR323(this, false);

	if ( testR323Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "323 ";
	}
	Waypoint_c testR324Inst = Waypoint_c.getOneDIM_WAYOnR324Precedes(this, false);

	if ( testR324Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "324 ";	
	}
	 testR324Inst = Waypoint_c.getOneDIM_WAYOnR324Follows(this, false);

	if ( testR324Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "324 ";
	}
	LineSegment_c testR21Inst = LineSegment_c.getOneGD_LSOnR21(this, false);

	if ( testR21Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "21 ";	
	}
	LineSegment_c testR22Inst = LineSegment_c.getOneGD_LSOnR22(this, false);

	if ( testR22Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "22 ";	
	}
	WaypointInMove_c testR24Inst = WaypointInMove_c.getOneGD_WIMOnR24(this, false);

	if ( testR24Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "24 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Waypoint", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("way_id")){
         return true;
      }
      if(attributeName.equals("edge_elementid")){
         return true;
      }
      if(attributeName.equals("polyline_elementid")){
         return true;
      }
      if(attributeName.equals("previous_way_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public float getPositionx()
  {
    return m_positionx ;
  }


  public void setPositionx(float newValue)
  {
    if(m_positionx == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Positionx", new Float(m_positionx), new Float(newValue),true);

   m_positionx = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public float getPositiony()
  {
    return m_positiony ;
  }


  public void setPositiony(float newValue)
  {
    if(m_positiony == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Positiony", new Float(m_positiony), new Float(newValue),true);

   m_positiony = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getWay_idLongBased()
  {
    if(m_way_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_way_id)){
    	return 0xfffffff & m_way_id.getLeastSignificantBits();
    }
    return m_way_idLongBased ;
  }
  public java.util.UUID getWay_id()
  {
    return m_way_id ;
  }


  public void setWay_id(java.util.UUID newValue)
  {
   m_way_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getEdge_elementidLongBased()
  {
    if ( EdgeGraphedge != null )
    {
      return EdgeGraphedge.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEdge_elementid()
  {
    if ( EdgeGraphedge != null )
    {
      return EdgeGraphedge.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEdge_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_edge_elementid) )
      return m_edge_elementid;
    else
      return getEdge_elementid();
  }
  
  public void setEdge_elementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_edge_elementid)){
	        return;
	    }
	}else if(m_edge_elementid != null){
	    if(m_edge_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Edge_elementid", m_edge_elementid, newValue,true); 
   m_edge_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPolyline_elementidLongBased()
  {
    if ( PolylinePolyline != null )
    {
      return PolylinePolyline.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPolyline_elementid()
  {
    if ( PolylinePolyline != null )
    {
      return PolylinePolyline.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPolyline_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_polyline_elementid) )
      return m_polyline_elementid;
    else
      return getPolyline_elementid();
  }
  
  public void setPolyline_elementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_polyline_elementid)){
	        return;
	    }
	}else if(m_polyline_elementid != null){
	    if(m_polyline_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Polyline_elementid", m_polyline_elementid, newValue,true); 
   m_polyline_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPrevious_way_idLongBased()
  {
    if ( FollowsWaypoint != null )
    {
      return FollowsWaypoint.getWay_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_way_id()
  {
    if ( FollowsWaypoint != null )
    {
      return FollowsWaypoint.getWay_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_way_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_way_id) )
      return m_previous_way_id;
    else
      return getPrevious_way_id();
  }
  
  public void setPrevious_way_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_way_id)){
	        return;
	    }
	}else if(m_previous_way_id != null){
	    if(m_previous_way_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_way_id", m_previous_way_id, newValue,true); 
   m_previous_way_id = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Waypoint", //$NON-NLS-1$
	  " Operation entered: Waypoint::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Waypoint_c [] objs = Waypoint_c.WaypointInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Waypoint", //$NON-NLS-1$
	  " Operation entered: Waypoint::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Waypoint_c_test21644_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test21644_c( java.util.UUID            p21645 ) {
	  m_p21645 = p21645;
	  }
	  private java.util.UUID             m_p21645; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getWay_id().equals(m_p21645));
	      return retval;
	  }
    }

    Waypoint_c [] objs21643 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test21644_c(getWay_id())) ;

    if ( (  (objs21643.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21643.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21643.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21643.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21643.length )  + " Way_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21643.length )  + " Way_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Waypoint is a referring class in association: rel.Numb = 319
          // The participating class is: GraphEdge
    class Graphedge_c_test21649_c implements ClassQueryInterface_c
    {
	  Graphedge_c_test21649_c( java.util.UUID            p21650 ) {
	  m_p21650 = p21650;
	  }
	  private java.util.UUID             m_p21650; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphedge_c selected = (Graphedge_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21650));
	      return retval;
	  }
    }

    Graphedge_c [] objs21648 = 
    Graphedge_c.GraphedgeInstances(modelRoot, new Graphedge_c_test21649_c(getEdge_elementid())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs21648.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Association: 319: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21648.length )  + " edge_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Association: 319: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21648.length )  + " edge_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Waypoint is a referring class in association: rel.Numb = 323
          // The participating class is: PolyLine
    class Polyline_c_test21652_c implements ClassQueryInterface_c
    {
	  Polyline_c_test21652_c( java.util.UUID            p21653 ) {
	  m_p21653 = p21653;
	  }
	  private java.util.UUID             m_p21653; 
	  public boolean evaluate (Object candidate)
	  {
	      Polyline_c selected = (Polyline_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21653));
	      return retval;
	  }
    }

    Polyline_c [] objs21651 = 
    Polyline_c.PolylineInstances(modelRoot, new Polyline_c_test21652_c(getPolyline_elementid())) ;

    if ( (  (objs21651.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Association: 323: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21651.length )  + " polyLine_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Association: 323: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21651.length )  + " polyLine_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Waypoint is a referring class in association: rel.Numb = 324
          // The participating class is: Waypoint
    class Waypoint_c_test21655_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test21655_c( java.util.UUID            p21656 ) {
	  m_p21656 = p21656;
	  }
	  private java.util.UUID             m_p21656; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getWay_id().equals(m_p21656));
	      return retval;
	  }
    }

    Waypoint_c [] objs21654 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test21655_c(getPrevious_way_id())) ;

    if ( (  (objs21654.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Association: 324: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21654.length )  + " previous_Way_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Association: 324: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21654.length )  + " previous_Way_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Waypoint is a participating class in association: rel.Numb = 324
             // Object: Waypoint
    class Waypoint_c_test21658_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test21658_c( java.util.UUID            p21659 ) {
	  m_p21659 = p21659;
	  }
	  private java.util.UUID             m_p21659; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPrevious_way_id().equals(m_p21659));
	      return retval;
	  }
    }

    Waypoint_c [] objs21657 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test21658_c(getWay_id())) ;

    if ( (  (objs21657.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Association: 324: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21657.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Association: 324: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21657.length )  , e); 
      }
      retval = false;

    }

          // Waypoint is a participating class in association: rel.Numb = 21
             // Object: Line Segment
    class LineSegment_c_test21661_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test21661_c( java.util.UUID            p21662 ) {
	  m_p21662 = p21662;
	  }
	  private java.util.UUID             m_p21662; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStart_way_id().equals(m_p21662));
	      return retval;
	  }
    }

    LineSegment_c [] objs21660 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test21661_c(getWay_id())) ;

    if ( (  (objs21660.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Association: 21: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21660.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Association: 21: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21660.length )  , e); 
      }
      retval = false;

    }

          // Waypoint is a participating class in association: rel.Numb = 22
             // Object: Line Segment
    class LineSegment_c_test21664_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test21664_c( java.util.UUID            p21665 ) {
	  m_p21665 = p21665;
	  }
	  private java.util.UUID             m_p21665; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEnd_way_id().equals(m_p21665));
	      return retval;
	  }
    }

    LineSegment_c [] objs21663 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test21664_c(getWay_id())) ;

    if ( (  (objs21663.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Waypoint", //$NON-NLS-1$
           "Consistency: Object: Waypoint: Association: 22: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21663.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Waypoint: Association: 22: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21663.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 24
            // Link Object: Waypoint In Move
            // Other Side Class: Model
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint", " Operation entered: Waypoint::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_mdl = Model_c.getOneGD_MDOnR24(this);


if ( (  (v_mdl != null)) )
{

WaypointInMove_c v_inMove = WaypointInMove_c.getOneGD_WIMOnR24(this);


if (v_inMove != null) {
v_inMove.unrelateAcrossR24From( this ) ; v_inMove.unrelateAcrossR24From( v_mdl ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_inMove != null) {
// get the location of this element in the instance list
// before deleting
if ( v_inMove.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_inMove));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR21(this);


if ( (  (v_seg != null)) )
{

this.unrelateAcrossR21From(v_seg);



}

v_seg = LineSegment_c.getOneGD_LSOnR22(this);


if ( (  (v_seg != null)) )
{

this.unrelateAcrossR22From(v_seg);



}

Graphedge_c v_edge = Graphedge_c.getOneDIM_EDOnR319(this);


if ( (  (v_edge != null)) )
{

this.unrelateAcrossR319From(v_edge);



}

Waypoint_c v_next_seg = Waypoint_c.getOneDIM_WAYOnR324Precedes(this);


Waypoint_c v_prior_seg = Waypoint_c.getOneDIM_WAYOnR324Follows(this);


if ( (  (v_next_seg != null) &&   (v_prior_seg != null)) )
{

this.unrelateAcrossR324FromPrecedes(v_next_seg);


if (v_prior_seg != null) {
v_prior_seg.unrelateAcrossR324FromPrecedes(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_prior_seg != null) {
  v_prior_seg.relateAcrossR324ToPrecedes(v_next_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

else
{

if ( (  (v_prior_seg != null) &&   (v_next_seg == null)) )
{

if (v_prior_seg != null) {
v_prior_seg.unrelateAcrossR324FromPrecedes(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

else
{

if ( (  (v_next_seg != null)) )
{

this.unrelateAcrossR324FromPrecedes(v_next_seg);



}


}


}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  String       Get_name()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Waypoint", " Operation entered: Waypoint::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "Bendpoint";



   } // End get_name

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Waypoint
