      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Connector_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_CONNECTOR extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Connector_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Connector_c(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_assoc_elementid)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_assoc_elementid = IdAssigner.preprocessUUID(p_m_assoc_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       // default value for m_routingtype
        
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public Connector_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_assoc_elementid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Connector_c.class);
      Connector_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (Connector_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_assoc_elementid = IdAssigner.preprocessUUID(p_m_assoc_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       // default value for m_routingtype
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Connector_c(modelRoot,
p_m_elementid,
p_m_assoc_elementid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Connector_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_assoc_elementid){
    InstanceList instances = modelRoot.getInstanceList(Connector_c.class);
    Connector_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (Connector_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_assoc_elementid = IdAssigner.preprocessUUID(p_m_assoc_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       // default value for m_routingtype
        
           return source ;
        }
      }
      // there is no instance matching the id
    Connector_c new_inst = new Connector_c(modelRoot,
p_m_elementid,
p_m_assoc_elementid
);
    return new_inst;
  }
  public Connector_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_assoc_elementid = IdAssigner.NULL_UUID;   
     m_elementid = IdAssigner.NULL_UUID;   
     m_routingtype = Routingtype_c.OOA_UNINITIALIZED_ENUM;
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Connector_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Connector_c)) {
           return false;
       }
       
       Connector_c me = (Connector_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((Connector_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((Connector_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Connector_c)) {
           return false;
       }
       
       Connector_c me = (Connector_c)elem;
      if (!getElementidCachedValue().equals(((Connector_c)elem).getElementidCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_assoc_elementid ;
  private java.util.UUID         m_elementid ;
  private int  m_routingtype ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphedge_c IsSupertypeGraphedge ;
public void relateAcrossR20To(Graphedge_c target)
{
	relateAcrossR20To(target, true);
}
public void relateAcrossR20To(Graphedge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeGraphedge) return;  // already related

    if ( IsSupertypeGraphedge != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeGraphedge != null) {
    
        IsSupertypeGraphedge.clearBackPointerR20To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Connector_c.relateAcrossR20To(Graphedge_c target)", 
			"Relate performed across R20 from Connector to GraphEdge without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeGraphedge = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR20To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "20", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR20From(Graphedge_c target)
{
	unrelateAcrossR20From(target, true);
}
public void unrelateAcrossR20From(Graphedge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeGraphedge == null) return;  // already unrelated
	
	if (target != IsSupertypeGraphedge) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R20", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR20To(this);
    }
    

      if(IsSupertypeGraphedge != null) {
      
        m_elementid = IsSupertypeGraphedge.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = IsSupertypeGraphedge.getElementidCachedValue();
        }       
        IsSupertypeGraphedge = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "20", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Connector_c getOneGD_CONOnR20(Graphedge_c [] targets)
{
    return getOneGD_CONOnR20(targets, null);
}

public static Connector_c getOneGD_CONOnR20(Graphedge_c [] targets, ClassQueryInterface_c test)
{
    Connector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_CONOnR20(targets[i], test);
        }
    }

    return ret_val;
}

public static Connector_c getOneGD_CONOnR20(Graphedge_c target)
{
  return getOneGD_CONOnR20(target, null);
}

public static Connector_c getOneGD_CONOnR20(Graphedge_c target, boolean loadComponent)
{
    return getOneGD_CONOnR20(target.getModelRoot(), target, null, loadComponent);
}

public static Connector_c getOneGD_CONOnR20(Graphedge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_CONOnR20(target.getModelRoot(), target, test);
  }
  return null;
}

public static Connector_c getOneGD_CONOnR20(ModelRoot modelRoot, Graphedge_c target, ClassQueryInterface_c test)
{
	return getOneGD_CONOnR20(modelRoot, target, test, true);
}

public static Connector_c getOneGD_CONOnR20(ModelRoot modelRoot, Graphedge_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_CONOnR20(modelRoot,target,test);
}
private static Connector_c find_getOneGD_CONOnR20(ModelRoot modelRoot, Graphedge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Connector_c source = (Connector_c)target.backPointer_IsSubtypeConnectorIsSubtype_R20;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Connector_c [] getManyGD_CONsOnR20(Graphedge_c [] targets)
{
  return getManyGD_CONsOnR20(targets, null);
}
public static Connector_c [] getManyGD_CONsOnR20(Graphedge_c [] targets, boolean loadComponent)
{
  return getManyGD_CONsOnR20(targets, null, loadComponent);
}
public static Connector_c [] getManyGD_CONsOnR20(Graphedge_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_CONsOnR20(targets, test, true);
}

public static Connector_c [] getManyGD_CONsOnR20(Graphedge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Connector_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Connector_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Connector_c source = (Connector_c)targets[i].backPointer_IsSubtypeConnectorIsSubtype_R20;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Connector_c[] ret_set = new Connector_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Connector_c[0];
  }
  }

public static Connector_c [] getManyGD_CONsOnR20(Graphedge_c target)
{
  if (target != null) {
    Graphedge_c [] targetArray = new Graphedge_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR20(targetArray);
  } else {
    Connector_c [] result = new Connector_c [0] ;
  return result ;
}
}

public static Connector_c [] getManyGD_CONsOnR20(Graphedge_c target, boolean loadComponent)
{
  if (target != null) {
    Graphedge_c [] targetArray = new Graphedge_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR20(targetArray, loadComponent);
  } else {
    Connector_c [] result = new Connector_c [0] ;
  return result ;
}
}



  
    
// referring navigation

GraphicalElement_c IsSupertypeGraphicalElement ;
public void relateAcrossR2To(GraphicalElement_c target)
{
	relateAcrossR2To(target, true);
}
public void relateAcrossR2To(GraphicalElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeGraphicalElement) return;  // already related

    if ( IsSupertypeGraphicalElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeGraphicalElement != null) {
    
        IsSupertypeGraphicalElement.clearBackPointerR2To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Connector_c.relateAcrossR2To(GraphicalElement_c target)", 
			"Relate performed across R2 from Connector to Graphical Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeGraphicalElement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2From(GraphicalElement_c target)
{
	unrelateAcrossR2From(target, true);
}
public void unrelateAcrossR2From(GraphicalElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeGraphicalElement == null) return;  // already unrelated
	
	if (target != IsSupertypeGraphicalElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R2", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2To(this);
    }
    

      if(IsSupertypeGraphicalElement != null) {
      
        m_elementid = IsSupertypeGraphicalElement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = IsSupertypeGraphicalElement.getElementidCachedValue();
        }       
        IsSupertypeGraphicalElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Connector_c getOneGD_CONOnR2(GraphicalElement_c [] targets)
{
    return getOneGD_CONOnR2(targets, null);
}

public static Connector_c getOneGD_CONOnR2(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
    Connector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_CONOnR2(targets[i], test);
        }
    }

    return ret_val;
}

public static Connector_c getOneGD_CONOnR2(GraphicalElement_c target)
{
  return getOneGD_CONOnR2(target, null);
}

public static Connector_c getOneGD_CONOnR2(GraphicalElement_c target, boolean loadComponent)
{
    return getOneGD_CONOnR2(target.getModelRoot(), target, null, loadComponent);
}

public static Connector_c getOneGD_CONOnR2(GraphicalElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_CONOnR2(target.getModelRoot(), target, test);
  }
  return null;
}

public static Connector_c getOneGD_CONOnR2(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test)
{
	return getOneGD_CONOnR2(modelRoot, target, test, true);
}

public static Connector_c getOneGD_CONOnR2(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_CONOnR2(modelRoot,target,test);
}
private static Connector_c find_getOneGD_CONOnR2(ModelRoot modelRoot, GraphicalElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Connector_c source = (Connector_c)target.backPointer_IsSubtypeConnectorIsSubtype_R2;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Connector_c [] getManyGD_CONsOnR2(GraphicalElement_c [] targets)
{
  return getManyGD_CONsOnR2(targets, null);
}
public static Connector_c [] getManyGD_CONsOnR2(GraphicalElement_c [] targets, boolean loadComponent)
{
  return getManyGD_CONsOnR2(targets, null, loadComponent);
}
public static Connector_c [] getManyGD_CONsOnR2(GraphicalElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_CONsOnR2(targets, test, true);
}

public static Connector_c [] getManyGD_CONsOnR2(GraphicalElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Connector_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Connector_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Connector_c source = (Connector_c)targets[i].backPointer_IsSubtypeConnectorIsSubtype_R2;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Connector_c[] ret_set = new Connector_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Connector_c[0];
  }
  }

public static Connector_c [] getManyGD_CONsOnR2(GraphicalElement_c target)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR2(targetArray);
  } else {
    Connector_c [] result = new Connector_c [0] ;
  return result ;
}
}

public static Connector_c [] getManyGD_CONsOnR2(GraphicalElement_c target, boolean loadComponent)
{
  if (target != null) {
    GraphicalElement_c [] targetArray = new GraphicalElement_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR2(targetArray, loadComponent);
  } else {
    Connector_c [] result = new Connector_c [0] ;
  return result ;
}
}



  
    
// referring navigation

LineSegment_c HasConnectorWhichEndsAtLineSegment ;
public void relateAcrossR5To(LineSegment_c target)
{
	relateAcrossR5To(target, true);
}
public void relateAcrossR5To(LineSegment_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasConnectorWhichEndsAtLineSegment) return;  // already related

    if ( HasConnectorWhichEndsAtLineSegment != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasConnectorWhichEndsAtLineSegment != null) {
    
        HasConnectorWhichEndsAtLineSegment.clearBackPointerR5To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Connector_c.relateAcrossR5To(LineSegment_c target)", 
			"Relate performed across R5 from Connector to Line Segment without unrelate of prior instance.");  
		}
    }
                
    	HasConnectorWhichEndsAtLineSegment = target ;
        m_assoc_elementid = target.getElementid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR5To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "5", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR5From(LineSegment_c target)
{
	unrelateAcrossR5From(target, true);
}
public void unrelateAcrossR5From(LineSegment_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasConnectorWhichEndsAtLineSegment == null) return;  // already unrelated
	
	if (target != HasConnectorWhichEndsAtLineSegment) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R5", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR5To(this);
    }
    

      if(HasConnectorWhichEndsAtLineSegment != null) {
      
        m_assoc_elementid = HasConnectorWhichEndsAtLineSegment.getElementid();
        HasConnectorWhichEndsAtLineSegment = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "5", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Connector_c getOneGD_CONOnR5(LineSegment_c [] targets)
{
    return getOneGD_CONOnR5(targets, null);
}

public static Connector_c getOneGD_CONOnR5(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    Connector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_CONOnR5(targets[i], test);
        }
    }

    return ret_val;
}

public static Connector_c getOneGD_CONOnR5(LineSegment_c target)
{
  return getOneGD_CONOnR5(target, null);
}

public static Connector_c getOneGD_CONOnR5(LineSegment_c target, boolean loadComponent)
{
    return getOneGD_CONOnR5(target.getModelRoot(), target, null, loadComponent);
}

public static Connector_c getOneGD_CONOnR5(LineSegment_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_CONOnR5(target.getModelRoot(), target, test);
  }
  return null;
}

public static Connector_c getOneGD_CONOnR5(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test)
{
	return getOneGD_CONOnR5(modelRoot, target, test, true);
}

public static Connector_c getOneGD_CONOnR5(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_CONOnR5(modelRoot,target,test);
}
private static Connector_c find_getOneGD_CONOnR5(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Connector_c source = (Connector_c)target.backPointer_IsTheDestinationOfConnectorEndingAtConnectorIsTheDestinationOfConnectorEndingAt_R5;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Connector_c [] getManyGD_CONsOnR5(LineSegment_c [] targets)
{
  return getManyGD_CONsOnR5(targets, null);
}
public static Connector_c [] getManyGD_CONsOnR5(LineSegment_c [] targets, boolean loadComponent)
{
  return getManyGD_CONsOnR5(targets, null, loadComponent);
}
public static Connector_c [] getManyGD_CONsOnR5(LineSegment_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_CONsOnR5(targets, test, true);
}

public static Connector_c [] getManyGD_CONsOnR5(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Connector_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Connector_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Connector_c source = (Connector_c)targets[i].backPointer_IsTheDestinationOfConnectorEndingAtConnectorIsTheDestinationOfConnectorEndingAt_R5;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Connector_c[] ret_set = new Connector_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Connector_c[0];
  }
  }

public static Connector_c [] getManyGD_CONsOnR5(LineSegment_c target)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR5(targetArray);
  } else {
    Connector_c [] result = new Connector_c [0] ;
  return result ;
}
}

public static Connector_c [] getManyGD_CONsOnR5(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR5(targetArray, loadComponent);
  } else {
    Connector_c [] result = new Connector_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<LineSegment_c> backPointer_HasLineSegmentHas_R6 = new ArrayList<LineSegment_c>();

public void setLineSegmentOrderInChildListR6(LineSegment_c target, int index) {
	unrelateAcrossR6From(target);
	LineSegment_c[] elements = LineSegment_c.getManyGD_LSsOnR6(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR6From((LineSegment_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR6To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR6To((LineSegment_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR6To(LineSegment_c target)
{
  if (target != null) {
    target.relateAcrossR6To(this, true) ;
  }
}

public void relateAcrossR6To(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR6To(this, notifyChanges) ;
  }
}

public void setBackPointerR6To(LineSegment_c target)
{
  	synchronized (backPointer_HasLineSegmentHas_R6) {
		backPointer_HasLineSegmentHas_R6.add(target);
	}
}

public void unrelateAcrossR6From(LineSegment_c target)
{
  if (target != null) {
    target.unrelateAcrossR6From(this, true) ;
  }
}

public void unrelateAcrossR6From(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR6From(this, notifyChanges) ;
  }
}

public void clearBackPointerR6To(LineSegment_c target)
{
  synchronized (backPointer_HasLineSegmentHas_R6) {
	    backPointer_HasLineSegmentHas_R6.remove(target);
	}
}

public static Connector_c getOneGD_CONOnR6(LineSegment_c [] targets)
{
    return getOneGD_CONOnR6(targets, null);
}

public static Connector_c getOneGD_CONOnR6(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_CONOnR6(targets, test, true);
}

public static Connector_c getOneGD_CONOnR6(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Connector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Connector_c candidate_val = getOneGD_CONOnR6(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_CONOnR6(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Connector_c getOneGD_CONOnR6(LineSegment_c target)
{
	return getOneGD_CONOnR6(target, true);
}
public static Connector_c getOneGD_CONOnR6(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsPartOfConnector ;
  } else {
    return null;
  }
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_CONsOnR6(targets, test, true);
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Connector_c[0];
  
  
  LinkedHashSet<Connector_c> elementsSet = new LinkedHashSet<Connector_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsPartOfConnector == null)
	  targets[i].loadProxy();
    Connector_c associate = targets[i].IsPartOfConnector;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Connector_c[] result = new Connector_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c [] targets)
{
  return getManyGD_CONsOnR6(targets, null);
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR6(targetArray, test, loadComponent);
  } else {
    Connector_c [] result = new Connector_c [0] ;
    return result ;
  }
  
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_CONsOnR6(target, null, true);
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c target)
{
    return getManyGD_CONsOnR6(target, null, true);
}

public static Connector_c [] getManyGD_CONsOnR6(LineSegment_c target, boolean loadComponent)
{
    return getManyGD_CONsOnR6(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<FloatingText_c> backPointer_HasAsATextFloatingTextHasAsAText_R8 = new ArrayList<FloatingText_c>();

public void setFloatingTextOrderInChildListR8(FloatingText_c target, int index) {
	unrelateAcrossR8From(target);
	FloatingText_c[] elements = FloatingText_c.getManyGD_CTXTsOnR8(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR8From((FloatingText_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR8To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR8To((FloatingText_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR8To(FloatingText_c target)
{
  if (target != null) {
    target.relateAcrossR8To(this, true) ;
  }
}

public void relateAcrossR8To(FloatingText_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR8To(this, notifyChanges) ;
  }
}

public void setBackPointerR8To(FloatingText_c target)
{
  	synchronized (backPointer_HasAsATextFloatingTextHasAsAText_R8) {
		backPointer_HasAsATextFloatingTextHasAsAText_R8.add(target);
	}
}

public void unrelateAcrossR8From(FloatingText_c target)
{
  if (target != null) {
    target.unrelateAcrossR8From(this, true) ;
  }
}

public void unrelateAcrossR8From(FloatingText_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR8From(this, notifyChanges) ;
  }
}

public void clearBackPointerR8To(FloatingText_c target)
{
  synchronized (backPointer_HasAsATextFloatingTextHasAsAText_R8) {
	    backPointer_HasAsATextFloatingTextHasAsAText_R8.remove(target);
	}
}

public static Connector_c getOneGD_CONOnR8(FloatingText_c [] targets)
{
    return getOneGD_CONOnR8(targets, null);
}

public static Connector_c getOneGD_CONOnR8(FloatingText_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_CONOnR8(targets, test, true);
}

public static Connector_c getOneGD_CONOnR8(FloatingText_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Connector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Connector_c candidate_val = getOneGD_CONOnR8(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_CONOnR8(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Connector_c getOneGD_CONOnR8(FloatingText_c target)
{
	return getOneGD_CONOnR8(target, true);
}
public static Connector_c getOneGD_CONOnR8(FloatingText_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsTextForConnector ;
  } else {
    return null;
  }
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_CONsOnR8(targets, test, true);
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Connector_c[0];
  
  
  LinkedHashSet<Connector_c> elementsSet = new LinkedHashSet<Connector_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsTextForConnector == null)
	  targets[i].loadProxy();
    Connector_c associate = targets[i].IsTextForConnector;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Connector_c[] result = new Connector_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c [] targets)
{
  return getManyGD_CONsOnR8(targets, null);
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    FloatingText_c [] targetArray = new FloatingText_c[1];
    targetArray[0] = target;
    return getManyGD_CONsOnR8(targetArray, test, loadComponent);
  } else {
    Connector_c [] result = new Connector_c [0] ;
    return result ;
  }
  
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_CONsOnR8(target, null, true);
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c target)
{
    return getManyGD_CONsOnR8(target, null, true);
}

public static Connector_c [] getManyGD_CONsOnR8(FloatingText_c target, boolean loadComponent)
{
    return getManyGD_CONsOnR8(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R20
      Graphedge_c relInst22356 = (Graphedge_c) baseRoot.getInstanceList(Graphedge_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22356 == null) {
      			relInst22356 = (Graphedge_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphedge_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst22356 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22356) && !isProxy())) {
	      relInst22356.relateAcrossR20To(this, notifyChanges);
	  }
	  }
	          

      // R2
      GraphicalElement_c relInst22357 = (GraphicalElement_c) baseRoot.getInstanceList(GraphicalElement_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22357 == null) {
      			relInst22357 = (GraphicalElement_c) Ooaofooa.getDefaultInstance().getInstanceList(GraphicalElement_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst22357 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22357) && !isProxy())) {
	      relInst22357.relateAcrossR2To(this, notifyChanges);
	  }
	  }
	          

	if (HasConnectorWhichEndsAtLineSegment == null) {          
      // R5
      LineSegment_c relInst22358 = (LineSegment_c) baseRoot.getInstanceList(LineSegment_c.class).get(new Object[] {m_assoc_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22358 == null) {
      			relInst22358 = (LineSegment_c) Ooaofooa.getDefaultInstance().getInstanceList(LineSegment_c.class).get(new Object[] {m_assoc_elementid});
      		}
			//synchronized
      if ( relInst22358 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22358) && !isProxy())) {
	      relInst22358.relateAcrossR5To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R20
      // DIM_ED
		  inst=IsSupertypeGraphedge;
			unrelateAcrossR20From(IsSupertypeGraphedge, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2
      // GD_GE
		  inst=IsSupertypeGraphicalElement;
			unrelateAcrossR2From(IsSupertypeGraphicalElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R5
      // GD_LS
		  inst=HasConnectorWhichEndsAtLineSegment;
			unrelateAcrossR5From(HasConnectorWhichEndsAtLineSegment, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Connector_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Connector_c inst = (Connector_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Connector_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Connector_c ConnectorInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Connector_c result=findConnectorInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Connector_c findConnectorInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Connector_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Connector_c x = (Connector_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Connector_c ConnectorInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ConnectorInstance(modelRoot,test,true);
  }
  
  public static Connector_c ConnectorInstance(ModelRoot modelRoot)
  {
	 return ConnectorInstance(modelRoot,null,true);
  }

  public static Connector_c [] ConnectorInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Connector_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Connector_c x = (Connector_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Connector_c[] ret_set = new Connector_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Connector_c[0];
			}		
		} 
  }
  public static Connector_c [] ConnectorInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ConnectorInstances(modelRoot,test,true);
  }
  public static Connector_c [] ConnectorInstances(ModelRoot modelRoot)
  {
	return ConnectorInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Connector.dispose call: ";
	Graphedge_c testR20Inst1 = Graphedge_c.getOneDIM_EDOnR20(this, false);

	if ( testR20Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "20 ";
	}
	GraphicalElement_c testR2Inst2 = GraphicalElement_c.getOneGD_GEOnR2(this, false);

	if ( testR2Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "2 ";
	}
	LineSegment_c testR6Inst = LineSegment_c.getOneGD_LSOnR6(this, false);

	if ( testR6Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "6 ";	
	}
	LineSegment_c testR5Inst = LineSegment_c.getOneGD_LSOnR5(this, false);

	if ( testR5Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "5 ";
	}
	FloatingText_c testR8Inst = FloatingText_c.getOneGD_CTXTOnR8(this, false);

	if ( testR8Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "8 ";	
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Connector", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("assoc_elementid")){
         return true;
      }
      if(attributeName.equals("elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getAssoc_elementidLongBased()
  {
    if ( HasConnectorWhichEndsAtLineSegment != null )
    {
      return HasConnectorWhichEndsAtLineSegment.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getAssoc_elementid()
  {
    if ( HasConnectorWhichEndsAtLineSegment != null )
    {
      return HasConnectorWhichEndsAtLineSegment.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getAssoc_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_assoc_elementid) )
      return m_assoc_elementid;
    else
      return getAssoc_elementid();
  }
  
  public void setAssoc_elementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_assoc_elementid)){
	        return;
	    }
	}else if(m_assoc_elementid != null){
	    if(m_assoc_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Assoc_elementid", m_assoc_elementid, newValue,true); 
   m_assoc_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if ( IsSupertypeGraphedge != null )
    {
      return IsSupertypeGraphedge.getElementidLongBased();
    }
    if ( IsSupertypeGraphicalElement != null )
    {
      return IsSupertypeGraphicalElement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( IsSupertypeGraphedge != null )
    {
      return IsSupertypeGraphedge.getElementid();
    }
    if ( IsSupertypeGraphicalElement != null )
    {
      return IsSupertypeGraphicalElement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeGraphedge != null );
 
 }                  

  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public int getRoutingtype()
  {
    return m_routingtype ;
  }


  public void setRoutingtype(int newValue)
  {
   m_routingtype = newValue ;
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Connector", //$NON-NLS-1$
	  " Operation entered: Connector::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Connector_c [] objs = Connector_c.ConnectorInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Connector", //$NON-NLS-1$
	  " Operation entered: Connector::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Connector_c_test22360_c implements ClassQueryInterface_c
    {
	  Connector_c_test22360_c( java.util.UUID            p22361 ) {
	  m_p22361 = p22361;
	  }
	  private java.util.UUID             m_p22361; 
	  public boolean evaluate (Object candidate)
	  {
	      Connector_c selected = (Connector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22361));
	      return retval;
	  }
    }

    Connector_c [] objs22359 = 
    Connector_c.ConnectorInstances(modelRoot, new Connector_c_test22360_c(getElementid())) ;

    if ( (  (objs22359.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22359.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22359.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22359.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22359.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22359.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Connector is a referring class in association: rel.Numb = 5
          // The participating class is: Line Segment
    class LineSegment_c_test22365_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test22365_c( java.util.UUID            p22366 ) {
	  m_p22366 = p22366;
	  }
	  private java.util.UUID             m_p22366; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22366));
	      return retval;
	  }
    }

    LineSegment_c [] objs22364 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test22365_c(getAssoc_elementid())) ;

    if ( (  (objs22364.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Association: 5: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22364.length )  + " Assoc_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Association: 5: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22364.length )  + " Assoc_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Connector is a subtype in association: rel.Numb = 20
          // The supertype class is: GraphEdge
    class Graphedge_c_test22368_c implements ClassQueryInterface_c
    {
	  Graphedge_c_test22368_c( java.util.UUID            p22369 ) {
	  m_p22369 = p22369;
	  }
	  private java.util.UUID             m_p22369; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphedge_c selected = (Graphedge_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22369));
	      return retval;
	  }
    }

    Graphedge_c [] objs22367 = 
    Graphedge_c.GraphedgeInstances(modelRoot, new Graphedge_c_test22368_c(getElementid())) ;

    if ( (  (objs22367.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Association: 20: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22367.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Association: 20: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22367.length )  , e); 
      }
      retval = false;

    }

          // Connector is a subtype in association: rel.Numb = 2
          // The supertype class is: Graphical Element
    class GraphicalElement_c_test22371_c implements ClassQueryInterface_c
    {
	  GraphicalElement_c_test22371_c( java.util.UUID            p22372 ) {
	  m_p22372 = p22372;
	  }
	  private java.util.UUID             m_p22372; 
	  public boolean evaluate (Object candidate)
	  {
	      GraphicalElement_c selected = (GraphicalElement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22372));
	      return retval;
	  }
    }

    GraphicalElement_c [] objs22370 = 
    GraphicalElement_c.GraphicalElementInstances(modelRoot, new GraphicalElement_c_test22371_c(getElementid())) ;

    if ( (  (objs22370.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Association: 2: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22370.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Association: 2: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22370.length )  , e); 
      }
      retval = false;

    }

          // Connector is a participating class in association: rel.Numb = 6
             // Object: Line Segment
    class LineSegment_c_test22374_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test22374_c( java.util.UUID            p22375 ) {
	  m_p22375 = p22375;
	  }
	  private java.util.UUID             m_p22375; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConn_elementid().equals(m_p22375));
	      return retval;
	  }
    }

    LineSegment_c [] objs22373 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test22374_c(getElementid())) ;

    if ( (  (objs22373.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Association: 6: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22373.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Association: 6: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22373.length )  , e); 
      }
      retval = false;

    }
                
          // Connector is a participating class in association: rel.Numb = 8
             // Object: Floating Text
    class FloatingText_c_test22377_c implements ClassQueryInterface_c
    {
	  FloatingText_c_test22377_c( java.util.UUID            p22378 ) {
	  m_p22378 = p22378;
	  }
	  private java.util.UUID             m_p22378; 
	  public boolean evaluate (Object candidate)
	  {
	      FloatingText_c selected = (FloatingText_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConn_elementid().equals(m_p22378));
	      return retval;
	  }
    }

    FloatingText_c [] objs22376 = 
    FloatingText_c.FloatingTextInstances(modelRoot, new FloatingText_c_test22377_c(getElementid())) ;

    if ( (  (objs22376.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Connector", //$NON-NLS-1$
           "Consistency: Object: Connector: Association: 8: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22376.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Connector: Association: 8: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22376.length )  , e); 
      }
      retval = false;

    }
                
    return retval;
  }


  // declare transform functions
  public  void Draw(final GCDelegate p_Context,final boolean      p_Disable_selection)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Draw") ; 
               final ModelRoot modelRoot = getModelRoot();
GraphicalElement_c v_con = GraphicalElement_c.getOneGD_GEOnR2(this);


Gr_c.Setlinestyle(			    
p_Context			    
,Cl_c.Getconnectorstyle(			    
End_c.Middle			    
,v_con.getRepresents()) ) ;


int  v_end_style = Cl_c.Getconnectorstyle(			    
End_c.End			    
,v_con.getRepresents()) ;


int          v_hs = Gr_c.Gethotspotsize() ;


int          v_semi_circle_radius = v_hs + 4 ;


Model_c v_canvas = Model_c.getOneGD_MDOnR1(v_con);


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


int          v_squareAdornmentOffset = 8 ;


int          v_squareAdornmentWidth = 16 ;


int          v_squareAdornmentHeight = 16 ;


boolean      v_adjustStartAdornment = false ;


boolean      v_adjustEndAdornment = false ;


int          v_draw_x = 0 ;


int          v_draw_y = 0 ;


int          v_draw_x2 = 0 ;


int          v_draw_y2 = 0 ;


int          v_adornment_x = 0 ;


int          v_adornment_y = 0 ;


int          v_adornment_x2 = 0 ;


int          v_adornment_y2 = 0 ;


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


java.util.UUID         v_end_segment_id = Getendingsegmentid() ;


java.util.UUID         v_start_segment_id = Getstartingsegmentid() ;


  class LineSegment_test21577_c implements ClassQueryInterface_c
  {
	LineSegment_test21577_c( java.util.UUID         p21578 ) {
		m_p21578 = p21578;
	}
	private java.util.UUID         m_p21578;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21578)) ;
	}
  }
LineSegment_c v_startSegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21577_c(v_start_segment_id));


  class LineSegment_test21579_c implements ClassQueryInterface_c
  {
	LineSegment_test21579_c( java.util.UUID         p21580 ) {
		m_p21580 = p21580;
	}
	private java.util.UUID         m_p21580;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21580)) ;
	}
  }
LineSegment_c v_endSegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21579_c(v_end_segment_id));


LineSegment_c  v_con_segment = null;
for ( int i21376 = 0; i21376 < v_segments.length; i21376++)
{
  v_con_segment = v_segments[i21376] ;

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_con_segment);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_con_segment);


float        v_x = v_segmentStart.getPositionx() - v_diagram.getViewportx() ;


float        v_y = v_segmentStart.getPositiony() - v_diagram.getViewporty() ;


float        v_x2 = v_segmentEnd.getPositionx() - v_diagram.getViewportx() ;


float        v_y2 = v_segmentEnd.getPositiony() - v_diagram.getViewporty() ;


v_draw_x = (int)(v_x) ;


v_draw_y = (int)(v_y) ;


v_draw_x2 = (int)(v_x2) ;


v_draw_y2 = (int)(v_y2) ;


if ( (v_con_segment == v_startSegment) )
{

Graphconnector_c v_anchor = Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this));


if ( (  (v_anchor != null)) )
{

Connector_c v_anchorCon = Connector_c.getOneGD_CONOnR6(LineSegment_c.getOneGD_LSOnR26(AnchorOnSegment_c.getOneGD_AOSOnR26(v_anchor)));


if ( (  (v_anchorCon != null)) )
{

GraphicalElement_c v_anchorGE = GraphicalElement_c.getOneGD_GEOnR2(v_anchorCon);


ElementSpecification_c v_thisSpec = ElementSpecification_c.getOneGD_ESOnR10(GraphicalElement_c.getOneGD_GEOnR2(this));


ElementSpecification_c v_anchorSpec = ElementSpecification_c.getOneGD_ESOnR10(v_anchorGE);


  class ConnectorTerminal_test21581_c implements ClassQueryInterface_c
  {
	ConnectorTerminal_test21581_c( int  p21582 ) {
		m_p21582 = p21582;
	}
	private int  m_p21582;
	public boolean evaluate (Object candidate)
	{
		ConnectorTerminal_c selected = (ConnectorTerminal_c)candidate;
		return (selected.getOoa_type() == m_p21582) ;
	}
  }
ConnectorTerminal_c v_connectorTerminal = ConnectorTerminal_c.getOneTS_CNTOnR201(TerminalSpecification_c.getManyTS_TSPsOnR202(ConnectorSpecification_c.getManyTS_CSPsOnR200(v_thisSpec)), new ConnectorTerminal_test21581_c(v_anchorGE.getOoa_type()));


if ( (  (v_connectorTerminal != null)) )
{

float        v_intersectX = Ooaofgraphics.Getintersectionofsegmentwithsquare(modelRoot			    
,Axis_c.X			    
,false			    
,v_squareAdornmentHeight			    
,v_squareAdornmentWidth			    
,v_x - v_squareAdornmentOffset			    
,v_y - v_squareAdornmentOffset			    
,v_x			    
,v_x2			    
,v_y			    
,v_y2) ;


float        v_intersectY = Ooaofgraphics.Getintersectionofsegmentwithsquare(modelRoot			    
,Axis_c.Y			    
,false			    
,v_squareAdornmentHeight			    
,v_squareAdornmentWidth			    
,v_x - v_squareAdornmentOffset			    
,v_y - v_squareAdornmentOffset			    
,v_x			    
,v_x2			    
,v_y			    
,v_y2) ;


if ( (v_intersectX == 0 || v_intersectY == 0) )
{

continue;



}

if ( (v_connectorTerminal.getTerminatesat() == End_c.Start) )
{

int  v_anchorStyle = Cl_c.Getconnectorstyle(			    
End_c.Start			    
,v_anchorGE.getRepresents()) ;


if ( (v_anchorStyle == Style_c.FilledSquare) )
{

v_adjustStartAdornment = true ;


v_draw_x = (int)(v_intersectX) ;


v_draw_y = (int)(v_intersectY) ;


v_adornment_x = v_draw_x ;


v_adornment_y = v_draw_y ;



}


}

else if ( (v_connectorTerminal.getTerminatesat() == End_c.End) )
{

int  v_anchorStyle = Cl_c.Getconnectorstyle(			    
End_c.End			    
,v_anchorGE.getRepresents()) ;


if ( (v_anchorStyle == Style_c.FilledSquare) )
{

v_adjustStartAdornment = true ;


v_draw_x = (int)(v_intersectX) ;


v_draw_y = (int)(v_intersectY) ;


v_adornment_x = v_draw_x ;


v_adornment_y = v_draw_y ;



}


}


}


}


}


}

if ( (v_con_segment == v_endSegment) )
{

Graphconnector_c v_anchor = Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this));


if ( (  (v_anchor != null)) )
{

Connector_c v_anchorCon = Connector_c.getOneGD_CONOnR6(LineSegment_c.getOneGD_LSOnR26(AnchorOnSegment_c.getOneGD_AOSOnR26(v_anchor)));


if ( (  (v_anchorCon != null)) )
{

GraphicalElement_c v_anchorGE = GraphicalElement_c.getOneGD_GEOnR2(v_anchorCon);


ElementSpecification_c v_thisSpec = ElementSpecification_c.getOneGD_ESOnR10(GraphicalElement_c.getOneGD_GEOnR2(this));


ElementSpecification_c v_anchorSpec = ElementSpecification_c.getOneGD_ESOnR10(v_anchorGE);


  class ConnectorTerminal_test21583_c implements ClassQueryInterface_c
  {
	ConnectorTerminal_test21583_c( int  p21584 ) {
		m_p21584 = p21584;
	}
	private int  m_p21584;
	public boolean evaluate (Object candidate)
	{
		ConnectorTerminal_c selected = (ConnectorTerminal_c)candidate;
		return (selected.getOoa_type() == m_p21584) ;
	}
  }
ConnectorTerminal_c v_connectorTerminal = ConnectorTerminal_c.getOneTS_CNTOnR201(TerminalSpecification_c.getManyTS_TSPsOnR203(ConnectorSpecification_c.getManyTS_CSPsOnR200(v_thisSpec)), new ConnectorTerminal_test21583_c(v_anchorGE.getOoa_type()));


if ( (  (v_connectorTerminal != null)) )
{

float        v_intersectX = Ooaofgraphics.Getintersectionofsegmentwithsquare(modelRoot			    
,Axis_c.X			    
,false			    
,v_squareAdornmentHeight			    
,v_squareAdornmentWidth			    
,v_x2 - v_squareAdornmentOffset			    
,v_y2 - v_squareAdornmentOffset			    
,v_x			    
,v_x2			    
,v_y			    
,v_y2) ;


float        v_intersectY = Ooaofgraphics.Getintersectionofsegmentwithsquare(modelRoot			    
,Axis_c.Y			    
,false			    
,v_squareAdornmentHeight			    
,v_squareAdornmentWidth			    
,v_x2 - v_squareAdornmentOffset			    
,v_y2 - v_squareAdornmentOffset			    
,v_x			    
,v_x2			    
,v_y			    
,v_y2) ;


if ( (v_intersectX == 0 || v_intersectY == 0) )
{

continue;



}

if ( (v_connectorTerminal.getTerminatesat() == End_c.Start) )
{

int  v_anchorStyle = Cl_c.Getconnectorstyle(			    
End_c.Start			    
,v_anchorGE.getRepresents()) ;


if ( (v_anchorStyle == Style_c.FilledSquare) )
{

v_adjustEndAdornment = true ;


v_draw_x2 = (int)(v_intersectX) ;


v_draw_y2 = (int)(v_intersectY) ;


v_adornment_x2 = v_draw_x2 ;


v_adornment_y2 = v_draw_y2 ;



}


}

else if ( (v_connectorTerminal.getTerminatesat() == End_c.End) )
{

int  v_anchorStyle = Cl_c.Getconnectorstyle(			    
End_c.End			    
,v_anchorGE.getRepresents()) ;


if ( (v_anchorStyle == Style_c.FilledSquare) )
{

v_adjustEndAdornment = true ;


v_draw_x2 = (int)(v_intersectX) ;


v_draw_y2 = (int)(v_intersectY) ;


v_adornment_x2 = v_draw_x2 ;


v_adornment_y2 = v_draw_y2 ;



}


}


}


}


}

if ( (v_end_style == Style_c.SemiCircle) || (v_end_style == Style_c.Circle) )
{

int          v_radius = v_hs ;


if ( (v_end_style == Style_c.SemiCircle) )
{

v_radius = v_semi_circle_radius ;



}

int          v_ellipseH = v_radius * 2 ;


int          v_ellipseW = v_ellipseH ;


float        v_ellipseX = v_x2 - v_radius ;


float        v_ellipseY = v_y2 - v_radius ;


float        v_angle = Gr_c.Getangle(			    
(int)(v_x)			    
,(int)(v_x2)			    
,(int)(v_y)			    
,(int)(v_y2)) ;


float        v_result_x = Ooaofgraphics.Getintersectionofsegmentwithellipse(modelRoot			    
,Axis_c.X			    
,false			    
,v_ellipseH			    
,v_ellipseW			    
,v_ellipseX			    
,v_ellipseY			    
,v_x			    
,v_x2			    
,v_y			    
,v_y2) ;


float        v_result_y = Ooaofgraphics.Getintersectionofsegmentwithellipse(modelRoot			    
,Axis_c.Y			    
,false			    
,v_ellipseH			    
,v_ellipseW			    
,v_ellipseX			    
,v_ellipseY			    
,v_x			    
,v_x2			    
,v_y			    
,v_y2) ;


v_draw_x2 = (int)(v_result_x) ;


v_draw_y2 = (int)(v_result_y) ;



}


}

Gr_c.Drawline(			    
p_Context			    
,v_draw_x			    
,v_draw_x2			    
,v_draw_y			    
,v_draw_y2 ) ;


GraphicalElement_c v_elem = GraphicalElement_c.getOneGD_GEOnR2(this);


if ( (v_elem.Isselected() &&   !p_Disable_selection) )
{

Gr_c.Drawflexhandles(			    
p_Context			    
,Gr_c.Gethotspotsize()			    
,(int)(v_x)			    
,(int)(v_y) ) ;


LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_con_segment);


if ( (  (v_nextSegment == null)) )
{

Gr_c.Drawflexhandles(			    
p_Context			    
,Gr_c.Gethotspotsize()			    
,(int)(v_x2)			    
,(int)(v_y2) ) ;



}


}


}

Gr_c.Setlinestyle(			    
p_Context			    
,Style_c.Solid ) ;


float        v_Startx1 = 0.f ;


float        v_Starty1 = 0.f ;


float        v_Startx2 = 0.f ;


float        v_Starty2 = 0.f ;


GraphicalElement_c v_startElem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this))));


  class LineSegment_test21585_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getPrevious_elementid().equals(Os_c.Null_unique_id())) ;
	}
  }
LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21585_c());


java.util.UUID         v_start_OOA_ID = Os_c.Null_unique_id() ;


int  v_start_OOA_Type = Ooatype_c.None ;


if ( (  (v_startElem != null)) )
{

v_start_OOA_ID = v_startElem.getOoa_id() ;


v_start_OOA_Type = v_startElem.getOoa_type() ;



}

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


v_Startx1 = v_segmentStart.getPositionx() - v_diagram.getViewportx() ;


v_Starty1 = v_segmentStart.getPositiony() - v_diagram.getViewporty() ;


v_Startx2 = v_segmentEnd.getPositionx() - v_diagram.getViewportx() ;


v_Starty2 = v_segmentEnd.getPositiony() - v_diagram.getViewporty() ;


if ( (v_adjustStartAdornment) )
{

v_Startx1 = v_adornment_x ;


v_Starty1 = v_adornment_y ;



}

v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


Drawtext(			    
End_c.Start			    
,p_Context			    
,p_Disable_selection			    
,Cl_c.Getconnectortext(			    
End_c.Start			    
,v_start_OOA_ID			    
,v_start_OOA_Type == Ooatype_c.ImportedClass			    
,v_con.getRepresents()			    
,Cl_c.Getooaid(			    
v_canvas.getRepresents()))			    
,(int)(v_Startx1)			    
,(int)(v_Startx2)			    
,(int)(v_Starty1)			    
,(int)(v_Starty2) ) ;


Drawfixedtext(			    
End_c.Start_Fixed			    
,p_Context			    
,Cl_c.Getconnectortext(			    
End_c.Start_Fixed			    
,v_start_OOA_ID			    
,v_start_OOA_Type == Ooatype_c.ImportedClass			    
,v_con.getRepresents()			    
,Cl_c.Getooaid(			    
v_canvas.getRepresents()))			    
,(int)(v_Startx1)			    
,(int)(v_Startx2)			    
,(int)(v_Starty1)			    
,(int)(v_Starty2) ) ;


if ( (Cl_c.Getconnectorstyle(			    
End_c.Start			    
,v_con.getRepresents()) == Style_c.Triangle) )
{

float        v_angle = Gr_c.Getangle(			    
(int)(v_Startx1)			    
,(int)(v_Startx2)			    
,(int)(v_Starty1)			    
,(int)(v_Starty2)) ;


Gr_c.Drawtriangle(			    
p_Context			    
,v_angle			    
,(int)(v_Startx1)			    
,(int)(v_Starty1) ) ;



}

java.util.UUID         v_middle_OOA_ID = Os_c.Null_unique_id() ;


int          v_segCount =   (v_segments.length) ;


v_segCount = v_segCount / 2 ;


while ( (v_segCount > 1) )
{

v_seg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


v_segCount = v_segCount - 1 ;



}

v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


float        v_Middlex1 = v_segmentStart.getPositionx() - v_diagram.getViewportx() ;


float        v_Middley1 = v_segmentStart.getPositiony() - v_diagram.getViewporty() ;


float        v_Middlex2 = v_segmentEnd.getPositionx() - v_diagram.getViewportx() ;


float        v_Middley2 = v_segmentEnd.getPositiony() - v_diagram.getViewporty() ;


Drawtext(			    
End_c.Middle			    
,p_Context			    
,p_Disable_selection			    
,Cl_c.Getconnectortext(			    
End_c.Middle			    
,v_middle_OOA_ID			    
,false			    
,v_con.getRepresents()			    
,Cl_c.Getooaid(			    
v_canvas.getRepresents()))			    
,(int)(v_Middlex1)			    
,(int)(v_Middlex2)			    
,(int)(v_Middley1)			    
,(int)(v_Middley2) ) ;


GraphicalElement_c v_endElem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this))));


java.util.UUID         v_end_OOA_ID = Os_c.Null_unique_id() ;


int  v_end_OOA_Type = Ooatype_c.None ;


if ( (  (v_endElem != null)) )
{

v_end_OOA_ID = v_endElem.getOoa_id() ;


v_end_OOA_Type = v_endElem.getOoa_type() ;



}

  class LineSegment_test21586_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getPrevious_elementid().equals(Os_c.Null_unique_id())) ;
	}
  }
v_seg = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21586_c());


v_segCount =   (v_segments.length) ;


while ( (v_segCount > 1) )
{

v_seg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


v_segCount = v_segCount - 1 ;



}

v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


float        v_Endx1 = v_segmentStart.getPositionx() - v_diagram.getViewportx() ;


float        v_Endy1 = v_segmentStart.getPositiony() - v_diagram.getViewporty() ;


float        v_Endx2 = v_segmentEnd.getPositionx() - v_diagram.getViewportx() ;


float        v_Endy2 = v_segmentEnd.getPositiony() - v_diagram.getViewporty() ;


if ( (v_adjustEndAdornment) )
{

v_Endx2 = v_adornment_x2 ;


v_Endy2 = v_adornment_y2 ;



}

Drawtext(			    
End_c.End			    
,p_Context			    
,p_Disable_selection			    
,Cl_c.Getconnectortext(			    
End_c.End			    
,v_end_OOA_ID			    
,v_end_OOA_Type == Ooatype_c.ImportedClass			    
,v_con.getRepresents()			    
,Cl_c.Getooaid(			    
v_canvas.getRepresents()))			    
,(int)(v_Endx1)			    
,(int)(v_Endx2)			    
,(int)(v_Endy1)			    
,(int)(v_Endy2) ) ;


Drawfixedtext(			    
End_c.End_Fixed			    
,p_Context			    
,Cl_c.Getconnectortext(			    
End_c.End_Fixed			    
,v_end_OOA_ID			    
,v_end_OOA_Type == Ooatype_c.ImportedClass			    
,v_con.getRepresents()			    
,Cl_c.Getooaid(			    
v_canvas.getRepresents()))			    
,(int)(v_Endx1)			    
,(int)(v_Endx2)			    
,(int)(v_Endy1)			    
,(int)(v_Endy2) ) ;


int  v_style = Cl_c.Getconnectorstyle(			    
End_c.Start			    
,v_con.getRepresents()) ;


float        v_angle = Gr_c.Getangle(			    
(int)(v_Startx1)			    
,(int)(v_Startx2)			    
,(int)(v_Starty1)			    
,(int)(v_Starty2)) ;


if ( (v_style == Style_c.OpenArrow) )
{

Gr_c.Drawarrow(			    
p_Context			    
,false			    
,v_angle			    
,(int)(v_Startx1)			    
,(int)(v_Starty1) ) ;



}

else if ( (v_style == Style_c.FilledArrow) )
{

Gr_c.Drawarrow(			    
p_Context			    
,true			    
,v_angle			    
,(int)(v_Startx1)			    
,(int)(v_Starty1) ) ;


Gr_c.Setdefaultfill(			    
p_Context ) ;



}

else if ( (v_style == Style_c.FilledSquare) )
{

Gr_c.Drawrect(			    
p_Context			    
,true			    
,v_squareAdornmentHeight			    
,v_squareAdornmentWidth			    
,(int)(v_Startx1 - v_squareAdornmentOffset)			    
,(int)(v_Starty1 - v_squareAdornmentOffset) ) ;



}

v_hs = Gr_c.Gethotspotsize() ;


v_style = Cl_c.Getconnectorstyle(			    
End_c.End			    
,v_con.getRepresents()) ;


v_angle = Gr_c.Getangle(			    
(int)(v_Endx2)			    
,(int)(v_Endx1)			    
,(int)(v_Endy2)			    
,(int)(v_Endy1)) ;


if ( (v_style == Style_c.OpenArrow) )
{

Gr_c.Drawarrow(			    
p_Context			    
,false			    
,v_angle			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;



}

else if ( (v_style == Style_c.Triangle) )
{

Gr_c.Drawtriangle(			    
p_Context			    
,v_angle			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;



}

else if ( (v_style == Style_c.FilledArrow) )
{

Gr_c.Drawarrow(			    
p_Context			    
,true			    
,v_angle			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;


Gr_c.Setdefaultfill(			    
p_Context ) ;



}

else if ( (v_style == Style_c.FilledSquare) )
{

Gr_c.Drawrect(			    
p_Context			    
,true			    
,v_squareAdornmentHeight			    
,v_squareAdornmentWidth			    
,(int)(v_Endx2 - v_squareAdornmentOffset)			    
,(int)(v_Endy2 - v_squareAdornmentOffset) ) ;



}

else if ( (v_style == Style_c.Circle) )
{

Gr_c.Drawcircle(			    
p_Context			    
,false			    
,v_hs			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;



}

else if ( (v_style == Style_c.SemiCircle) )
{

Gr_c.Drawsemicircle(			    
p_Context			    
,false			    
,v_semi_circle_radius			    
,v_angle			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;



}

if ( (Cl_c.Getconnectorstyle(			    
End_c.Start			    
,v_con.getRepresents()) == Style_c.FilledCircle) )
{

Gr_c.Drawcircle(			    
p_Context			    
,true			    
,v_hs			    
,(int)(v_Startx1)			    
,(int)(v_Starty1) ) ;



}

if ( (Cl_c.Getconnectorstyle(			    
End_c.End			    
,v_con.getRepresents()) == Style_c.FilledCircle) )
{

Gr_c.Drawcircle(			    
p_Context			    
,true			    
,v_hs			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;



}

if ( (Cl_c.Getconnectorstyle(			    
End_c.End			    
,v_con.getRepresents()) == Style_c.Cross) )
{

v_angle = Gr_c.Getangle(			    
(int)(v_Endx1)			    
,(int)(v_Endx2)			    
,(int)(v_Endy1)			    
,(int)(v_Endy2)) ;


Gr_c.Drawcross(			    
p_Context			    
,v_angle			    
,(int)(v_Endx2)			    
,(int)(v_Endy2) ) ;



}


   } // End draw
  public  void Drawtext(final int  p_At,final GCDelegate p_Context,final boolean      p_Disable_selection,final String       p_Text,final int          p_X1,final int          p_X2,final int          p_Y1,final int          p_Y2)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Drawtext") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (! p_Text.equals("")) )
{

  class FloatingText_test21587_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		FloatingText_c selected = (FloatingText_c)candidate;
		return selected.getEnd() == p_At ;
	}
  }
FloatingText_c v_con_text = FloatingText_c.getOneGD_CTXTOnR8(this, new FloatingText_test21587_c());


if ( (  (v_con_text != null)) )
{

if (v_con_text != null) {
v_con_text.Drawtext(			    
p_At			    
,p_Context			    
,p_Disable_selection			    
,p_Text			    
,p_X1			    
,p_X2			    
,p_Y1			    
,p_Y2 ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End drawText
  public  void Drawfixedtext(final int  p_At,final GCDelegate p_Context,final String       p_Text,final int          p_X1,final int          p_X2,final int          p_Y1,final int          p_Y2)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Drawfixedtext") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (! p_Text.equals("")) )
{

float        v_angle = 0.0f ;


int          v_text_x = 0 ;


int          v_text_y = 0 ;


if ( (p_At == End_c.Start_Fixed) )
{

v_text_x = p_X1 ;


v_text_y = p_Y1 ;


v_angle = Gr_c.Getangle(			    
p_X1			    
,p_X2			    
,p_Y1			    
,p_Y2) ;



}

else
{

v_text_x = p_X2 ;


v_text_y = p_Y2 ;


v_angle = Gr_c.Getangle(			    
p_X2			    
,p_X1			    
,p_Y2			    
,p_Y1) ;



}

int  v_end = End_c.Start ;


if ( (p_At == End_c.End_Fixed) )
{

v_end = End_c.End ;



}

GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);


int  v_style = Cl_c.Getconnectorstyle(			    
v_end			    
,v_ge.getRepresents()) ;


int          v_spacing = Gr_c.Getgraphicspacing() ;


if ( (v_style == Style_c.FilledSquare) )
{

v_spacing = v_spacing + 3 ;



}

int  v_dir = Gr_c.Getdirection(			    
v_angle) ;


if ( (v_dir == Direction_c.East) )
{

v_text_x = v_text_x + v_spacing ;


v_text_y = v_text_y - v_spacing - Gr_c.Gettextextent(			    
Axis_c.Y			    
,p_Context			    
,p_Text) ;



}

else if ( (v_dir == Direction_c.South) )
{

v_text_x = v_text_x - v_spacing - Gr_c.Gettextextent(			    
Axis_c.X			    
,p_Context			    
,p_Text) ;


v_text_y = v_text_y + v_spacing ;



}

else
{

v_text_x = v_text_x - v_spacing - Gr_c.Gettextextent(			    
Axis_c.X			    
,p_Context			    
,p_Text) ;


v_text_y = v_text_y - v_spacing - Gr_c.Gettextextent(			    
Axis_c.Y			    
,p_Context			    
,p_Text) ;



}

Gr_c.Drawtext(			    
p_Context			    
,Justification_c.Left			    
,p_Text			    
,Style_c.None			    
,v_text_x			    
,v_text_y ) ;



}


   } // End drawFixedText
  public  boolean      Isover(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Isover") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


int          v_scaled_x = Gr_c.Scale(			    
p_X) ;


int          v_scaled_y = Gr_c.Scale(			    
p_Y) ;


LineSegment_c  v_seg = null;
for ( int i21377 = 0; i21377 < v_segs.length; i21377++)
{
  v_seg = v_segs[i21377] ;

if ( (v_seg.Isover(			    
v_scaled_x			    
,v_scaled_y)) )
{

return true;



}


}

FloatingText_c [] v_texts = FloatingText_c.getManyGD_CTXTsOnR8(this);


FloatingText_c  v_text = null;
for ( int i21378 = 0; i21378 < v_texts.length; i21378++)
{
  v_text = v_texts[i21378] ;

if ( (v_text.Isover(			    
v_scaled_x			    
,v_scaled_y)) )
{

return true;



}


}

return false;



   } // End isOver
  public  void Movestart(final boolean      p_Snaptogrid,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Movestart") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Isendselected() || Endsonws()) )
{

LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21379 = 0; i21379 < v_segments.length; i21379++)
{
  v_segment = v_segments[i21379] ;

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment != null)) )
{

if (v_segment != null) {
v_segment.Movestart(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_segment != null) {
v_segment.Movemiddletext(			    
p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if ( (Endsonws()) )
{

if (v_segment != null) {
v_segment.Move(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if (v_segment != null) {
v_segment.Movestart(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


}

else
{

LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21380 = 0; i21380 < v_segments.length; i21380++)
{
  v_segment = v_segments[i21380] ;

if ( (v_segment.getPrevious_elementid().equals(Os_c.Null_unique_id())) )
{

if (v_segment != null) {
v_segment.Movestart(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


   } // End moveStart
  public  void Moveend(final boolean      p_Snaptogrid,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Moveend") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Startsonws()) )
{

  class LineSegment_test21588_c implements ClassQueryInterface_c
  {
	LineSegment_test21588_c( java.util.UUID         p21589 ) {
		m_p21589 = p21589;
	}
	private java.util.UUID         m_p21589;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21589)) ;
	}
  }
LineSegment_c v_firstSegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21588_c(Getstartingsegmentid()));


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21381 = 0; i21381 < v_segments.length; i21381++)
{
  v_segment = v_segments[i21381] ;

if ( (v_segment != v_firstSegment) )
{

if (v_segment != null) {
v_segment.Moveend(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_segment != null) {
v_segment.Movemiddletext(			    
p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if (v_segment != null) {
v_segment.Move(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}

else
{

LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21382 = 0; i21382 < v_segments.length; i21382++)
{
  v_segment = v_segments[i21382] ;

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment == null)) )
{

if (v_segment != null) {
v_segment.Moveend(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


   } // End moveEnd
  public  boolean      Isinside(final int          p_H,final int          p_W,final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Isinside") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


boolean      v_result = true ;


LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_seg = null;
for ( int i21383 = 0; i21383 < v_segs.length; i21383++)
{
  v_seg = v_segs[i21383] ;

Waypoint_c v_segStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


Waypoint_c v_segEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


float        v_startX = v_segStart.getPositionx() ;


float        v_startY = v_segStart.getPositiony() ;


float        v_endX = v_segEnd.getPositionx() ;


float        v_endY = v_segEnd.getPositiony() ;


if ( (p_X > v_startX || p_X + p_W < v_startX) )
{

v_result = false ;


break;



}

else if ( (p_X > v_endX || p_X + p_W < v_endX) )
{

v_result = false ;


break;



}

else if ( (p_Y > v_startY || p_Y + p_H < v_startY) )
{

v_result = false ;


break;



}

else if ( (p_Y > v_endY || p_Y + p_H < v_endY) )
{

v_result = false ;


break;



}


}

return v_result;



   } // End isInside
  public  boolean      Isendselected()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Isendselected") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphelement_c v_container = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR301(Graphedge_c.getOneDIM_EDOnR20(this))));


if ( (  (v_container != null)) )
{

GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR23(v_container);


if ( (v_ge.Isselected()) )
{

return true;



}


}

GraphicalElement_c v_end_elem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this))));


Connector_c v_con_elem = Connector_c.getOneGD_CONOnR2(v_end_elem);


if ( (  (v_con_elem != null)) )
{

if ( (v_end_elem.Isselected()) )
{

return true;



}

else
{

GraphicalElement_c v_end_end_elem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(v_con_elem))));


Connector_c v_end_con_elem = Connector_c.getOneGD_CONOnR2(v_end_end_elem);


if ( ((  (v_end_con_elem != null)) && (v_end_con_elem.getElementid().equals(getElementid()))) )
{

return v_con_elem.Isstartselected();



}

else
{

return v_con_elem.Isendselected() && v_con_elem.Isstartselected();



}


}


}

else
{

if ( (  (v_end_elem != null)) )
{

return v_end_elem.Isselected();



}

else
{

GraphicalElement_c v_start_elem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this))));


if ( (  (v_start_elem != null)) )
{

v_con_elem = Connector_c.getOneGD_CONOnR2(v_start_elem);


if ( (v_start_elem.Isselected()) )
{

return true;



}

else
{

if ( (  (v_con_elem != null)) )
{

return v_con_elem.Isendselected() && v_con_elem.Isstartselected();



}


}


}

return true;



}


}


   } // End isEndSelected
  public  boolean      Isstartselected()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Isstartselected") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphelement_c v_container = Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c.getOneDIM_GEOnR301(Graphedge_c.getOneDIM_EDOnR20(this))));


if ( (  (v_container != null)) )
{

GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR23(v_container);


if ( (v_ge.Isselected()) )
{

return true;



}


}

GraphicalElement_c v_start_elem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this))));


Connector_c v_con_elem = Connector_c.getOneGD_CONOnR2(v_start_elem);


if ( (  (v_con_elem != null)) )
{

if ( (v_start_elem.Isselected()) )
{

return true;



}

else
{

return v_con_elem.Isendselected() && v_con_elem.Isstartselected();



}


}

else
{

if ( (  (v_start_elem != null)) )
{

return v_start_elem.Isselected();



}

else
{

GraphicalElement_c v_end_elem = GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this))));


if ( (  (v_end_elem != null)) )
{

v_con_elem = Connector_c.getOneGD_CONOnR2(v_start_elem);


if ( (v_end_elem.Isselected()) )
{

return true;



}

else
{

if ( (  (v_con_elem != null)) )
{

return v_con_elem.Isendselected() && v_con_elem.Isstartselected();



}


}


}

return true;



}


}


   } // End isStartSelected
  public  boolean      Endsonws()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Endsonws") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphconnector_c v_end_anchor = Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this));


return   (v_end_anchor == null);



   } // End endsOnWS
  public  boolean      Isoververtex(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Isoververtex") ; 
               final ModelRoot modelRoot = getModelRoot();
return Getvertexunder(			    
p_X			    
,p_Y) != Vertex_c.None;



   } // End isOverVertex
  public  int  Getendunder(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getendunder") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_model = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);


float        v_scaled_x = Gr_c.Scale(			    
p_X) + v_diagram.getViewportx() ;


float        v_scaled_y = Gr_c.Scale(			    
p_Y) + v_diagram.getViewporty() ;


FloatingText_c [] v_texts = FloatingText_c.getManyGD_CTXTsOnR8(this);


FloatingText_c  v_text = null;
for ( int i21384 = 0; i21384 < v_texts.length; i21384++)
{
  v_text = v_texts[i21384] ;

Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(v_text);


Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR301(v_node);


if ( (Gr_c.Iswithinhotspot(			    
(int)(v_scaled_x)			    
,(int)(v_element.getPositionx())			    
,(int)(v_scaled_y)			    
,(int)(v_element.getPositiony()))) || (Gr_c.Iswithinhotspot(			    
(int)(v_scaled_x)			    
,(int)(v_element.getPositionx())			    
,(int)(v_scaled_y)			    
,(int)(v_element.getPositiony() + v_node.getHeight()))) || (Gr_c.Iswithinhotspot(			    
(int)(v_scaled_x)			    
,(int)(v_element.getPositionx() + v_node.getWidth())			    
,(int)(v_scaled_y)			    
,(int)(v_element.getPositiony() + v_node.getHeight()))) || (Gr_c.Iswithinhotspot(			    
(int)(v_scaled_x)			    
,(int)(v_element.getPositionx() + v_node.getWidth())			    
,(int)(v_scaled_y)			    
,(int)(v_element.getPositiony()))) )
{

return v_text.getEnd();



}


}

return End_c.None;



   } // End getEndUnder
  public  int  Getvertexunder(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getvertexunder") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_model = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);


float        v_scaled_x = Gr_c.Scale(			    
p_X) + v_diagram.getViewportx() ;


float        v_scaled_y = Gr_c.Scale(			    
p_Y) + v_diagram.getViewporty() ;


FloatingText_c [] v_texts = FloatingText_c.getManyGD_CTXTsOnR8(this);


FloatingText_c  v_text = null;
for ( int i21385 = 0; i21385 < v_texts.length; i21385++)
{
  v_text = v_texts[i21385] ;

int  v_v = v_text.Isoververtex(			    
(int)(v_scaled_x)			    
,(int)(v_scaled_y)) ;


if ( (v_v != Vertex_c.None) )
{

return v_v;



}


}

return Vertex_c.None;



   } // End getVertexUnder
  public  int          Getstartx()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getstartx") ; 
               final ModelRoot modelRoot = getModelRoot();
  class LineSegment_test21590_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getPrevious_elementid().equals(Os_c.Null_unique_id())) ;
	}
  }
LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21590_c());


if ( (  (v_segment != null)) )
{

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


return (int)(v_segmentStart.getPositionx());



}

else
{

return 0;



}


   } // End getStartX
  public  int          Getstarty()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getstarty") ; 
               final ModelRoot modelRoot = getModelRoot();
  class LineSegment_test21591_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getPrevious_elementid().equals(Os_c.Null_unique_id())) ;
	}
  }
LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21591_c());


if ( (  (v_segment != null)) )
{

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


return (int)(v_segmentStart.getPositiony());



}

else
{

return 0;



}


   } // End getStartY
  public  int          Getendx()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getendx") ; 
               final ModelRoot modelRoot = getModelRoot();
int          v_x = 0 ;


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21386 = 0; i21386 < v_segments.length; i21386++)
{
  v_segment = v_segments[i21386] ;

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment == null)) )
{

Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


v_x = (int)(v_segmentEnd.getPositionx()) ;


break;



}


}

return v_x;



   } // End getEndX
  public  int          Getendy()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getendy") ; 
               final ModelRoot modelRoot = getModelRoot();
int          v_y = 0 ;


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21387 = 0; i21387 < v_segments.length; i21387++)
{
  v_segment = v_segments[i21387] ;

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment == null)) )
{

Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


v_y = (int)(v_segmentEnd.getPositiony()) ;


break;



}


}

return v_y;



   } // End getEndY
  public  void Movevertex(final int  p_End,final int  p_Vertex,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Movevertex") ; 
               final ModelRoot modelRoot = getModelRoot();
  class FloatingText_test21592_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		FloatingText_c selected = (FloatingText_c)candidate;
		return selected.getEnd() == p_End ;
	}
  }
FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR8(this, new FloatingText_test21592_c());


if (v_text != null) {
v_text.Movevertex(			    
p_Vertex			    
,p_Xdelta			    
,p_Xdelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End moveVertex
  public  int          Getintersect(final int  p_Axis,final boolean      p_Testinfinite,final int          p_X1,final int          p_X2,final int          p_Y1,final int          p_Y2)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getintersect") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_intersect_found = false ;


int          v_xIntersect = 0 ;


int          v_yIntersect = 0 ;


int          v_shortestDistance = -1 ;


LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_seg = null;
for ( int i21388 = 0; i21388 < v_segs.length; i21388++)
{
  v_seg = v_segs[i21388] ;

int          v_currentXIntersect = v_seg.Getintersect(			    
Axis_c.X			    
,p_Testinfinite			    
,p_X1			    
,p_X2			    
,p_Y1			    
,p_Y2) ;


int          v_currentYIntersect = v_seg.Getintersect(			    
Axis_c.Y			    
,p_Testinfinite			    
,p_X1			    
,p_X2			    
,p_Y1			    
,p_Y2) ;


if ( (v_currentXIntersect != 0 && v_currentYIntersect != 0) )
{

float        v_distance = Ooaofgraphics.Getdistance(modelRoot			    
,p_X2			    
,v_currentXIntersect			    
,p_Y2			    
,v_currentYIntersect) ;


if ( (v_distance < v_shortestDistance) || (v_shortestDistance == -1) )
{

v_intersect_found = true ;


v_shortestDistance = (int)(v_distance) ;


v_xIntersect = v_currentXIntersect ;


v_yIntersect = v_currentYIntersect ;



}


}


}

if ( (v_intersect_found) )
{

if ( (p_Axis == Axis_c.X) )
{

return v_xIntersect;



}

else
{

return v_yIntersect;



}


}

else
{

return 0;



}


   } // End getIntersect
  public  java.util.UUID         Getdeltaforcropto(final int          p_Deltax,final int          p_Deltay,final int  p_End,final int          p_Oldshapeheight,final int          p_Oldshapewidth,final int          p_Oldshapex,final int          p_Oldshapey,final int  p_Vertex)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getdeltaforcropto") ; 
               final ModelRoot modelRoot = getModelRoot();
Point_c v_delta = new Point_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_delta));


if (v_delta != null) {
  v_delta.setX( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_delta != null) {
  v_delta.setY( 0) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if ( (p_Deltax == 0 && p_Deltay == 0) )
{

return v_delta.getPointid();



}

int          v_selfX = 0 ;


int          v_selfY = 0 ;


Shape_c v_shape = Shape_c.ShapeInstance(modelRoot) ;


if ( (p_End == End_c.Start) )
{

v_shape = Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this)))));


v_selfX = Getstartx() ;


v_selfY = Getstarty() ;



}

else
{

v_shape = Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this)))));


v_selfX = Getendx() ;


v_selfY = Getendy() ;



}

Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(v_shape);


Graphelement_c v_graphElement = Graphelement_c.getOneDIM_GEOnR301(v_graphNode);


GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(v_shape);


int  v_style = Cl_c.Getshapestyle(			    
v_ge.getRepresents()) ;


if ( (v_style == Style_c.Ellipse) )
{

float        v_result_x = Ooaofgraphics.Getintersectionofsegmentwithellipse(modelRoot			    
,Axis_c.X			    
,false			    
,v_graphNode.getHeight()			    
,v_graphNode.getWidth()			    
,v_graphElement.getPositionx()			    
,v_graphElement.getPositiony()			    
,v_selfX			    
,v_selfX + p_Deltax			    
,v_selfY			    
,v_selfY + p_Deltay) ;


float        v_result_y = Ooaofgraphics.Getintersectionofsegmentwithellipse(modelRoot			    
,Axis_c.Y			    
,false			    
,v_graphNode.getHeight()			    
,v_graphNode.getWidth()			    
,v_graphElement.getPositionx()			    
,v_graphElement.getPositiony()			    
,v_selfX			    
,v_selfX + p_Deltax			    
,v_selfY			    
,v_selfY + p_Deltay) ;


if ( (v_result_x != 0) && (v_result_y != 0) )
{

if (v_delta != null) {
  v_delta.setX( v_result_x - v_selfX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_delta != null) {
  v_delta.setY( v_result_y - v_selfY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


return v_delta.getPointid();



}


}

int          v_shapeSideX = 0 ;


int          v_shapeSideOldX = 0 ;


int          v_hotSpotFactorX = 0 ;


boolean      v_leftVertex = false ;


v_leftVertex = p_Vertex == Vertex_c.NW || p_Vertex == Vertex_c.SW ;


if ( (v_leftVertex) )
{

v_shapeSideX = (int)(v_graphElement.getPositionx()) ;


v_shapeSideOldX = p_Oldshapex ;


v_hotSpotFactorX = 1 ;



}

else
{

v_shapeSideX = (int)(v_graphElement.getPositionx() + v_graphNode.getWidth()) ;


v_shapeSideOldX = p_Oldshapex + p_Oldshapewidth ;


v_hotSpotFactorX = -1 ;



}

int          v_shapeSideY = 0 ;


int          v_shapeSideOldY = 0 ;


int          v_hotSpotFactorY = 0 ;


boolean      v_topVertex = false ;


v_topVertex = p_Vertex == Vertex_c.NW || p_Vertex == Vertex_c.NE ;


if ( (v_topVertex) )
{

v_shapeSideY = (int)(v_graphElement.getPositiony()) ;


v_shapeSideOldY = p_Oldshapey ;


v_hotSpotFactorY = 1 ;



}

else
{

v_shapeSideY = (int)(v_graphElement.getPositiony() + v_graphNode.getHeight()) ;


v_shapeSideOldY = p_Oldshapey + p_Oldshapeheight ;


v_hotSpotFactorY = -1 ;



}

if ( (v_selfX == v_shapeSideOldX) )
{

if (v_delta != null) {
  v_delta.setX( p_Deltax) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_selfY == p_Oldshapey || v_selfY == p_Oldshapey + p_Oldshapeheight) )
{

int          v_limit = v_shapeSideX + v_hotSpotFactorX * Gr_c.Gethotspotsize() ;


if ( ((v_leftVertex && v_selfX + v_delta.getX() < v_limit) || ((  !v_leftVertex) && v_selfX + v_delta.getX() > v_limit)) )
{

if (v_delta != null) {
  v_delta.setX( v_limit - v_selfX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}

if ( (v_selfY == v_shapeSideOldY) )
{

if (v_delta != null) {
  v_delta.setY( p_Deltay) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if ( (v_selfX == p_Oldshapex || v_selfX == p_Oldshapex + p_Oldshapewidth) )
{

int          v_limit = v_shapeSideY + v_hotSpotFactorY * Gr_c.Gethotspotsize() ;


if ( ((v_topVertex && v_selfY + v_delta.getY() < v_limit) || ((  !v_topVertex) && v_selfY + v_delta.getY() > v_limit)) )
{

if (v_delta != null) {
  v_delta.setY( v_limit - v_selfY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}

return v_delta.getPointid();



   } // End getDeltaForCropTo
  public  boolean      Isoverend(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Isoverend") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_result = false ;


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21389 = 0; i21389 < v_segments.length; i21389++)
{
  v_segment = v_segments[i21389] ;

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment == null)) )
{

v_result = v_segment.Isoverend(			    
p_X			    
,p_Y) ;



}


}

return v_result;



   } // End isOverEnd
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);


if ( (  (v_ge != null)) )
{

if (v_ge != null) {
v_ge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR5(this);


if ( (  (v_seg != null)) )
{

this.unrelateAcrossR5From(v_seg);



}

FloatingText_c [] v_ctxts = FloatingText_c.getManyGD_CTXTsOnR8(this);


FloatingText_c  v_ctxt = null;
for ( int i21390 = 0; i21390 < v_ctxts.length; i21390++)
{
  v_ctxt = v_ctxts[i21390] ;

this.unrelateAcrossR8From(v_ctxt);


if (v_ctxt != null) {
v_ctxt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


for ( int i21391 = 0; i21391 < v_segs.length; i21391++)
{
  v_seg = v_segs[i21391] ;

this.unrelateAcrossR6From(v_seg);


if (v_seg != null) {
v_seg.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Graphedge_c v_graphEdge = Graphedge_c.getOneDIM_EDOnR20(this);


if ( (  (v_graphEdge != null)) )
{

this.unrelateAcrossR20From(v_graphEdge);


if (v_graphEdge != null) {
v_graphEdge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



}


   } // End dispose
  public  void Reversesense()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Reversesense") ; 
               final ModelRoot modelRoot = getModelRoot();
  class LineSegment_test21593_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getPrevious_elementid().equals(Os_c.Null_unique_id())) ;
	}
  }
LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21593_c());


LineSegment_c v_nextSeg = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


while ( (  (v_nextSeg != null)) )
{

if (v_nextSeg != null) {
v_nextSeg.unrelateAcrossR7FromFollows(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


LineSegment_c v_newNextSeg = LineSegment_c.getOneGD_LSOnR7Precedes(v_nextSeg);


if (v_segment != null) {
  v_segment.relateAcrossR7ToFollows(v_nextSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_segment = v_nextSeg ;


v_nextSeg = v_newNextSeg ;



}

LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_seg = null;
for ( int i21392 = 0; i21392 < v_segments.length; i21392++)
{
  v_seg = v_segments[i21392] ;

Waypoint_c v_segStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


Waypoint_c v_segEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


if (v_segStart != null) {
v_segStart.unrelateAcrossR21From(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_segEnd != null) {
v_segEnd.unrelateAcrossR22From(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_segStart != null) {
  v_segStart.relateAcrossR22To(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_segEnd != null) {
  v_segEnd.relateAcrossR21To(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End reverseSense
  public  void Move(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Move") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Startsonws() && Endsonws()) )
{

Movestart(			    
true			    
,Gr_c.Scale(			    
p_X)			    
,Gr_c.Scale(			    
p_Y) ) ;


return ;



}

int          v_count = 0 ;


GraphicalElement_c [] v_ges = GraphicalElement_c.getManyGD_GEsOnR1(Model_c.getManyGD_MDsOnR1(GraphicalElement_c.getManyGD_GEsOnR2(this)));


GraphicalElement_c  v_ge = null;
for ( int i21393 = 0; i21393 < v_ges.length; i21393++)
{
  v_ge = v_ges[i21393] ;

if ( (v_ge.Isselected()) )
{

v_count = v_count + 1 ;



}


}

if ( (v_count == 1) )
{

Model_c v_model = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);


Graphedge_c v_graphEdge = Graphedge_c.getOneDIM_EDOnR20(this);


int          v_absol_x = Gr_c.Getabsolutexposition() ;


int          v_absol_y = Gr_c.Getabsoluteyposition() ;


int          v_scaled_absol_x = Gr_c.Scale(			    
v_absol_x) ;


int          v_scaled_absol_y = Gr_c.Scale(			    
v_absol_y) ;


float        v_scaled_x = v_scaled_absol_x + v_diagram.getViewportx() - Gr_c.Scale(			    
p_X) ;


float        v_scaled_y = v_scaled_absol_y + v_diagram.getViewporty() - Gr_c.Scale(			    
p_Y) ;


LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_seg = null;
for ( int i21394 = 0; i21394 < v_segs.length; i21394++)
{
  v_seg = v_segs[i21394] ;

Waypoint_c v_segStart = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


Waypoint_c v_segEnd = Waypoint_c.getOneDIM_WAYOnR22(v_seg);


if ( (v_seg.Isover(			    
v_scaled_absol_x - Gr_c.Scale(			    
p_X)			    
,v_scaled_absol_y - Gr_c.Scale(			    
p_Y))) )
{

if ( (v_seg.Isoververtex(			    
v_absol_x - p_X			    
,v_absol_y - p_Y) != true) )
{

LineSegment_c v_nextSeg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


if (v_seg != null) {
v_seg.unrelateAcrossR7FromPrecedes(v_nextSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


LineSegment_c v_newSeg = new LineSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_newSeg));


if (v_newSeg != null) {
  v_newSeg.relateAcrossR6To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Waypoint_c v_newSegStart = new Waypoint_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_newSegStart));


if (v_newSegStart != null) {
  v_newSegStart.relateAcrossR21To(v_newSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.relateAcrossR319To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.setPositionx( v_scaled_x) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.setPositiony( v_scaled_y) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_segEnd != null) {
v_segEnd.unrelateAcrossR22From(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_segEnd != null) {
  v_segEnd.relateAcrossR22To(v_newSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.relateAcrossR22To(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphconnector_c [] v_segmentAnchors = Graphconnector_c.getManyDIM_CONsOnR26(AnchorOnSegment_c.getManyGD_AOSsOnR26(v_seg));


Graphconnector_c  v_segmentAnchor = null;
for ( int i21395 = 0; i21395 < v_segmentAnchors.length; i21395++)
{
  v_segmentAnchor = v_segmentAnchors[i21395] ;

if ( (v_newSeg.Isover(			    
(int)(v_segmentAnchor.getPositionx() - v_diagram.getViewportx())			    
,(int)(v_segmentAnchor.getPositiony() - v_diagram.getViewporty()))) )
{

AnchorOnSegment_c v_aos = AnchorOnSegment_c.getOneGD_AOSOnR26(v_segmentAnchor);


if (v_aos != null) {
v_aos.unrelateAcrossR26From( v_segmentAnchor ) ; v_aos.unrelateAcrossR26From( v_seg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_aos != null) {
  v_aos.relateAcrossR26To( v_segmentAnchor ) ;   v_aos.relateAcrossR26To( v_newSeg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


}

if (v_seg != null) {
  v_seg.relateAcrossR7ToPrecedes(v_newSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_nextSeg != null)) )
{

if (v_newSeg != null) {
  v_newSeg.relateAcrossR7ToPrecedes(v_nextSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

WaypointInMove_c v_inMove = new WaypointInMove_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_inMove));


if (v_inMove != null) {
  v_inMove.setOriginx( (int)(v_scaled_x)) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_inMove != null) {
  v_inMove.setOriginy( (int)(v_scaled_y)) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_inMove != null) {
  v_inMove.relateAcrossR24To( v_newSegStart ) ;   v_inMove.relateAcrossR24To( v_model ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


Gr_c.Setmousecursor(			    
"waypoint tool" ) ;


SelectionTool_c v_selector = SelectionTool_c.getOneCT_SELOnR102(ModelTool_c.getManyCT_MTLsOnR100(v_model));


// Generate event CT_SEL24:WaypointCreated to selector
if (v_selector != null) {
  v_selector.WaypointCreated(false , p_X,p_Y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}


break;



}


}


}


}


   } // End move
  public  void Initializeendwaypointinmove(final int  p_At)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Initializeendwaypointinmove") ; 
               final ModelRoot modelRoot = getModelRoot();
  class LineSegment_test21594_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getPrevious_elementid().equals(Os_c.Null_unique_id())) ;
	}
  }
LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21594_c());


Model_c v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


if ( (p_At == End_c.End) )
{

LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


int          v_segCount =   (v_segments.length) ;


while ( (v_segCount > 1) )
{

v_seg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


v_segCount = v_segCount - 1 ;



}


}

if ( (  (v_seg != null)) )
{

Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR21(v_seg);


if ( (p_At == End_c.End) )
{

v_waypoint = Waypoint_c.getOneDIM_WAYOnR22(v_seg);



}

WaypointInMove_c v_inMove = WaypointInMove_c.getOneGD_WIMOnR24(v_waypoint);


if ( (  (v_inMove == null)) )
{

v_inMove = new WaypointInMove_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_inMove));


if (v_inMove != null) {
  v_inMove.relateAcrossR24To( v_canvas ) ;   v_inMove.relateAcrossR24To( v_waypoint ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_inMove != null) {
v_inMove.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End initializeEndWaypointInMove
  public  java.util.UUID         Getstartingsegmentid()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getstartingsegmentid") ; 
               final ModelRoot modelRoot = getModelRoot();
LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21396 = 0; i21396 < v_segments.length; i21396++)
{
  v_segment = v_segments[i21396] ;

LineSegment_c v_previousSegment = LineSegment_c.getOneGD_LSOnR7Follows(v_segment);


if ( (  (v_previousSegment == null)) )
{

return v_segment.getElementid();



}


}

return Os_c.Null_unique_id();



   } // End getStartingSegmentId
  public  java.util.UUID         Getendingsegmentid()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getendingsegmentid") ; 
               final ModelRoot modelRoot = getModelRoot();
LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_segment = null;
for ( int i21397 = 0; i21397 < v_segments.length; i21397++)
{
  v_segment = v_segments[i21397] ;

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment == null)) )
{

return v_segment.getElementid();



}


}

return Os_c.Null_unique_id();



   } // End getEndingSegmentId
  public  boolean      Startsonws()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Startsonws") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphconnector_c v_start_anchor = Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this));


return   (v_start_anchor == null);



   } // End startsOnWS
  public  void Cropto(final java.util.UUID         p_Attachingsegmentid,final java.util.UUID         p_Createdanchorid,final int  p_End)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Cropto") ; 
               final ModelRoot modelRoot = getModelRoot();
LineSegment_c v_segment = (LineSegment_c) modelRoot.getInstanceList(LineSegment_c.class).getGlobal(null, p_Attachingsegmentid);


Graphconnector_c v_anchor = (Graphconnector_c) modelRoot.getInstanceList(Graphconnector_c.class).getGlobal(null, p_Createdanchorid);


Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


float        v_x1 = v_segmentEnd.getPositionx() ;


float        v_y1 = v_segmentEnd.getPositiony() ;


float        v_x2 = v_segmentStart.getPositionx() ;


float        v_y2 = v_segmentStart.getPositiony() ;


if ( (p_End == End_c.End) )
{

v_x1 = v_segmentStart.getPositionx() ;


v_y1 = v_segmentStart.getPositiony() ;


v_x2 = v_segmentEnd.getPositionx() ;


v_y2 = v_segmentEnd.getPositiony() ;



}

int          v_intersectX = Getintersect(			    
Axis_c.X			    
,true			    
,(int)(v_x1)			    
,(int)(v_x2)			    
,(int)(v_y1)			    
,(int)(v_y2)) ;


int          v_intersectY = Getintersect(			    
Axis_c.Y			    
,true			    
,(int)(v_x1)			    
,(int)(v_x2)			    
,(int)(v_y1)			    
,(int)(v_y2)) ;


if ( (v_intersectX != 0 && v_intersectY != 0) )
{

java.util.UUID         v_intersectSegmentId = Getintersectsegmentid(			    
v_intersectX			    
,v_intersectY) ;


  class LineSegment_test21595_c implements ClassQueryInterface_c
  {
	LineSegment_test21595_c( java.util.UUID         p21596 ) {
		m_p21596 = p21596;
	}
	private java.util.UUID         m_p21596;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21596)) ;
	}
  }
LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21595_c(v_intersectSegmentId));


AnchorOnSegment_c v_aos = new AnchorOnSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aos));


if ( (p_End == End_c.Start) )
{

if (v_aos != null) {
  v_aos.relateAcrossR26To( v_anchor ) ;   v_aos.relateAcrossR26To( v_seg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


float        v_deltaX = v_intersectX - v_segmentStart.getPositionx() ;


float        v_deltaY = v_intersectY - v_segmentStart.getPositiony() ;


if (v_segment != null) {
v_segment.Movestart(			    
false			    
,(int)(v_deltaX)			    
,(int)(v_deltaY) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if (v_aos != null) {
  v_aos.relateAcrossR26To( v_anchor ) ;   v_aos.relateAcrossR26To( v_seg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


float        v_deltaX = v_intersectX - v_segmentEnd.getPositionx() ;


float        v_deltaY = v_intersectY - v_segmentEnd.getPositiony() ;


if (v_segment != null) {
v_segment.Moveend(			    
false			    
,(int)(v_deltaX)			    
,(int)(v_deltaY) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End cropTo
  public  java.util.UUID         Getintersectsegmentid(final float        p_X,final float        p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getintersectsegmentid") ; 
               final ModelRoot modelRoot = getModelRoot();
LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


LineSegment_c  v_seg = null;
for ( int i21398 = 0; i21398 < v_segs.length; i21398++)
{
  v_seg = v_segs[i21398] ;

if ( (v_seg.Isover(			    
(int)(p_X)			    
,(int)(p_Y))) )
{

return v_seg.getElementid();



}


}

return Os_c.Null_unique_id();



   } // End getIntersectSegmentId
  public  int          Getwidth()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getwidth") ; 
               final ModelRoot modelRoot = getModelRoot();
ElementSpecification_c v_es = ElementSpecification_c.getOneGD_ESOnR10(GraphicalElement_c.getOneGD_GEOnR2(this));


int          v_width = v_es.getDefaultwidth() ;


if ( (v_width == 0) )
{

v_width = 1 ;



}

return v_width;



   } // End getWidth
  public  int  Getshapeedge(final int  p_End)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getshapeedge") ; 
               final ModelRoot modelRoot = getModelRoot();
  class LineSegment_test21597_c implements ClassQueryInterface_c
  {
	LineSegment_test21597_c( java.util.UUID         p21598 ) {
		m_p21598 = p21598;
	}
	private java.util.UUID         m_p21598;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21598)) ;
	}
  }
LineSegment_c v_linesegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21597_c(Getstartingsegmentid()));


GraphicalElement_c v_shape = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this))))));


if ( (p_End == End_c.End) )
{

v_shape = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this))))));


  class LineSegment_test21599_c implements ClassQueryInterface_c
  {
	LineSegment_test21599_c( java.util.UUID         p21600 ) {
		m_p21600 = p21600;
	}
	private java.util.UUID         m_p21600;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21600)) ;
	}
  }
v_linesegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21599_c(Getendingsegmentid()));



}

if ( (  (v_shape != null) &&   (v_linesegment != null)) )
{

Graphelement_c v_dimGe = Graphelement_c.getOneDIM_GEOnR23(v_shape);


Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(Shape_c.getOneGD_SHPOnR2(v_shape));


Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR21(v_linesegment);


if ( (p_End == End_c.End) )
{

v_waypoint = Waypoint_c.getOneDIM_WAYOnR22(v_linesegment);



}

if ( (v_waypoint.getPositiony() == v_dimGe.getPositiony()) )
{

return Direction_c.North;



}

if ( (v_waypoint.getPositionx() == v_dimGe.getPositionx()) )
{

return Direction_c.West;



}

if ( (v_waypoint.getPositiony() == v_dimGe.getPositiony() + v_node.getHeight()) )
{

return Direction_c.South;



}

if ( (v_waypoint.getPositionx() == v_dimGe.getPositionx() + v_node.getWidth()) )
{

return Direction_c.East;



}


}

return Direction_c.None;



   } // End getShapeEdge
  public  float        Getpercentofedgelength(final int  p_End,final boolean      p_Isstart)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getpercentofedgelength") ; 
               final ModelRoot modelRoot = getModelRoot();
float        v_percentFromEdge = 0.0f ;


  class LineSegment_test21601_c implements ClassQueryInterface_c
  {
	LineSegment_test21601_c( java.util.UUID         p21602 ) {
		m_p21602 = p21602;
	}
	private java.util.UUID         m_p21602;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21602)) ;
	}
  }
LineSegment_c v_linesegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21601_c(Getstartingsegmentid()));


GraphicalElement_c v_shape = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(this))))));


if ( (p_End == End_c.End) )
{

v_shape = GraphicalElement_c.getOneGD_GEOnR2(Shape_c.getOneGD_SHPOnR2(GraphicalElement_c.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR311(Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(this))))));


  class LineSegment_test21603_c implements ClassQueryInterface_c
  {
	LineSegment_test21603_c( java.util.UUID         p21604 ) {
		m_p21604 = p21604;
	}
	private java.util.UUID         m_p21604;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21604)) ;
	}
  }
v_linesegment = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21603_c(Getendingsegmentid()));



}

if ( (  (v_linesegment != null)) )
{

Graphelement_c v_dimGe = Graphelement_c.getOneDIM_GEOnR23(v_shape);


Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(Shape_c.getOneGD_SHPOnR2(v_shape));


Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR21(v_linesegment);


if ( (p_End == End_c.End) )
{

v_waypoint = Waypoint_c.getOneDIM_WAYOnR22(v_linesegment);



}

if ( (v_waypoint.getPositiony() == v_dimGe.getPositiony()) )
{

v_percentFromEdge = (v_waypoint.getPositionx() - v_dimGe.getPositionx()) / v_node.getWidth() ;



}

else if ( (v_waypoint.getPositiony() == v_dimGe.getPositiony() + v_node.getHeight()) )
{

v_percentFromEdge = (v_waypoint.getPositionx() - v_dimGe.getPositionx()) / v_node.getWidth() ;



}

else if ( (v_waypoint.getPositionx() == v_dimGe.getPositionx()) )
{

v_percentFromEdge = (v_waypoint.getPositiony() - v_dimGe.getPositiony()) / v_node.getHeight() ;



}

else if ( (v_waypoint.getPositionx() == v_dimGe.getPositionx() + v_node.getWidth()) )
{

v_percentFromEdge = (v_waypoint.getPositiony() - v_dimGe.getPositiony()) / v_node.getHeight() ;



}


}

return v_percentFromEdge;



   } // End getPercentOfEdgeLength
  public  java.util.UUID         Getwaypointatindex(final int          p_Index)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Getwaypointatindex") ; 
               final ModelRoot modelRoot = getModelRoot();
LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(this);


int          v_current = 0 ;


if ( (p_Index + 1 >   (v_segs.length)) )
{

return Os_c.Null_unique_id();



}

java.util.UUID         v_startId = Getstartingsegmentid() ;


  class LineSegment_test21605_c implements ClassQueryInterface_c
  {
	LineSegment_test21605_c( java.util.UUID         p21606 ) {
		m_p21606 = p21606;
	}
	private java.util.UUID         m_p21606;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21606)) ;
	}
  }
LineSegment_c v_nextSeg = LineSegment_c.getOneGD_LSOnR6(this, new LineSegment_test21605_c(v_startId));


while (   (v_nextSeg != null) )
{

Waypoint_c v_endWay = Waypoint_c.getOneDIM_WAYOnR22(v_nextSeg);


if ( (p_Index == v_current) )
{

return v_endWay.getWay_id();



}

v_current = v_current + 1 ;


v_nextSeg = LineSegment_c.getOneGD_LSOnR7Precedes(v_nextSeg);



}

return Os_c.Null_unique_id();



   } // End getWaypointAtIndex
  public  void Createbendpoint(final int          p_Index,final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Createbendpoint") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Getwaypointatindex(			    
p_Index) ;


Waypoint_c v_segEnd = (Waypoint_c) modelRoot.getInstanceList(Waypoint_c.class).getGlobal(null, v_id);


LineSegment_c v_seg = LineSegment_c.getOneGD_LSOnR22(v_segEnd);


Graphedge_c v_graphEdge = Graphedge_c.getOneDIM_EDOnR20(this);


Model_c v_model = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this));


LineSegment_c v_nextSeg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


if (v_seg != null) {
v_seg.unrelateAcrossR7FromPrecedes(v_nextSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


LineSegment_c v_newSeg = new LineSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_newSeg));


if (v_newSeg != null) {
  v_newSeg.relateAcrossR6To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Waypoint_c v_newSegStart = new Waypoint_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_newSegStart));


if (v_newSegStart != null) {
  v_newSegStart.relateAcrossR21To(v_newSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.relateAcrossR319To(v_graphEdge);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.setPositionx( p_X) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.setPositiony( p_Y) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_segEnd != null) {
v_segEnd.unrelateAcrossR22From(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_segEnd != null) {
  v_segEnd.relateAcrossR22To(v_newSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_newSegStart != null) {
  v_newSegStart.relateAcrossR22To(v_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphconnector_c [] v_segmentAnchors = Graphconnector_c.getManyDIM_CONsOnR26(AnchorOnSegment_c.getManyGD_AOSsOnR26(v_seg));


Graphconnector_c  v_segmentAnchor = null;
for ( int i21399 = 0; i21399 < v_segmentAnchors.length; i21399++)
{
  v_segmentAnchor = v_segmentAnchors[i21399] ;

if ( (v_newSeg.Isover(			    
(int)(v_segmentAnchor.getPositionx())			    
,(int)(v_segmentAnchor.getPositiony()))) )
{

AnchorOnSegment_c v_aos = AnchorOnSegment_c.getOneGD_AOSOnR26(v_segmentAnchor);


if (v_aos != null) {
v_aos.unrelateAcrossR26From( v_segmentAnchor ) ; v_aos.unrelateAcrossR26From( v_seg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_aos != null) {
  v_aos.relateAcrossR26To( v_segmentAnchor ) ;   v_aos.relateAcrossR26To( v_newSeg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


}

if (v_seg != null) {
  v_seg.relateAcrossR7ToPrecedes(v_newSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_nextSeg != null)) )
{

if (v_newSeg != null) {
  v_newSeg.relateAcrossR7ToPrecedes(v_nextSeg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End createBendpoint
  public  void Deletebendpoint(final int          p_Index)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Deletebendpoint") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Getwaypointatindex(			    
p_Index) ;


Waypoint_c v_waypoint = (Waypoint_c) modelRoot.getInstanceList(Waypoint_c.class).getGlobal(null, v_id);


LineSegment_c v_afterSegment = LineSegment_c.getOneGD_LSOnR21(v_waypoint);


LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR22(v_waypoint);


LineSegment_c v_afterAfterSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_afterSegment);


Waypoint_c v_nextWaypoint = Waypoint_c.getOneDIM_WAYOnR22(v_afterSegment);


AnchorOnSegment_c [] v_anchors = AnchorOnSegment_c.getManyGD_AOSsOnR26(v_afterSegment);


AnchorOnSegment_c  v_anchor = null;
for ( int i21400 = 0; i21400 < v_anchors.length; i21400++)
{
  v_anchor = v_anchors[i21400] ;

Graphconnector_c v_con = Graphconnector_c.getOneDIM_CONOnR26(v_anchor);


if (v_anchor != null) {
v_anchor.unrelateAcrossR26From( v_con ) ; v_anchor.unrelateAcrossR26From( v_afterSegment ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_anchor != null) {
  v_anchor.relateAcrossR26To( v_con ) ;   v_anchor.relateAcrossR26To( v_segment ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}

if (v_afterSegment != null) {
v_afterSegment.unrelateAcrossR7FromFollows(v_segment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if ( (  (v_afterAfterSegment != null)) )
{

if (v_afterSegment != null) {
v_afterSegment.unrelateAcrossR7FromPrecedes(v_afterAfterSegment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_segment != null) {
  v_segment.relateAcrossR7ToPrecedes(v_afterAfterSegment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Waypoint_c v_prevWaypoint = Waypoint_c.getOneDIM_WAYOnR21(v_afterAfterSegment);


if (v_afterAfterSegment != null) {
v_afterAfterSegment.unrelateAcrossR21From(v_prevWaypoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_waypoint != null) {
  v_waypoint.relateAcrossR21To(v_afterAfterSegment);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if (v_waypoint != null) {
  v_waypoint.setPositionx( v_nextWaypoint.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_waypoint != null) {
  v_waypoint.setPositiony( v_nextWaypoint.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_afterSegment != null) {
v_afterSegment.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_nextWaypoint != null) {
v_nextWaypoint.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End deleteBendpoint
  public  String       Get_name()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Connector", " Operation entered: Connector::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "Connector";



   } // End get_name

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Connector
