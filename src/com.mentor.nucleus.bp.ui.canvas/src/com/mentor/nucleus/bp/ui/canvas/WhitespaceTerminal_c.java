package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.WhitespaceTerminal_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_WHITESPACE_TERMINAL extends genericEvent_c {
	public abstract int getEvtcode();
}

public class WhitespaceTerminal_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public WhitespaceTerminal_c(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_term_spec_id = IdAssigner.preprocessUUID(p_m_term_spec_id);

		Object[] key = {m_term_spec_id};
		addInstanceToMap(key);
	}
	static public WhitespaceTerminal_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(WhitespaceTerminal_c.class);
		WhitespaceTerminal_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_term_spec_id};
			new_inst = (WhitespaceTerminal_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_term_spec_id = IdAssigner
						.preprocessUUID(p_m_term_spec_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new WhitespaceTerminal_c(modelRoot, p_m_term_spec_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public WhitespaceTerminal_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id) {
		InstanceList instances = modelRoot
				.getInstanceList(WhitespaceTerminal_c.class);
		WhitespaceTerminal_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_term_spec_id};
			source = (WhitespaceTerminal_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_term_spec_id = IdAssigner
						.preprocessUUID(p_m_term_spec_id);

				return source;
			}
		}
		// there is no instance matching the id
		WhitespaceTerminal_c new_inst = new WhitespaceTerminal_c(modelRoot,
				p_m_term_spec_id);
		return new_inst;
	}
	public WhitespaceTerminal_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_term_spec_id = IdAssigner.NULL_UUID;
		Object[] key = {m_term_spec_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_term_spec_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_term_spec_id != p_newKey) {

			m_term_spec_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof WhitespaceTerminal_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof WhitespaceTerminal_c)) {
			return false;
		}

		WhitespaceTerminal_c me = (WhitespaceTerminal_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getTerm_spec_id()) || IdAssigner.NULL_UUID
						.equals(((WhitespaceTerminal_c) elem).getTerm_spec_id())) && this != elem)) {
			return false;
		}
		if (!getTerm_spec_id().equals(
				((WhitespaceTerminal_c) elem).getTerm_spec_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof WhitespaceTerminal_c)) {
			return false;
		}

		WhitespaceTerminal_c me = (WhitespaceTerminal_c) elem;
		if (!getTerm_spec_idCachedValue().equals(
				((WhitespaceTerminal_c) elem).getTerm_spec_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_term_spec_id;

	// declare association references from this class

	// referring navigation

	TerminalSpecification_c IsSupertypeTerminalSpecification;
	public void relateAcrossR201To(TerminalSpecification_c target) {
		relateAcrossR201To(target, true);
	}
	public void relateAcrossR201To(TerminalSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeTerminalSpecification)
			return; // already related

		if (IsSupertypeTerminalSpecification != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeTerminalSpecification != null) {

				IsSupertypeTerminalSpecification.clearBackPointerR201To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"WhitespaceTerminal_c.relateAcrossR201To(TerminalSpecification_c target)",
									"Relate performed across R201 from WhiteSpace Terminal to Terminal Specification without unrelate of prior instance.");
				}
			}

			IsSupertypeTerminalSpecification = target;
			m_term_spec_id = target.getTerm_spec_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR201To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR201From(TerminalSpecification_c target) {
		unrelateAcrossR201From(target, true);
	}
	public void unrelateAcrossR201From(TerminalSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeTerminalSpecification == null)
			return; // already unrelated

		if (target != IsSupertypeTerminalSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R201",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR201To(this);
		}

		if (IsSupertypeTerminalSpecification != null) {

			m_term_spec_id = IsSupertypeTerminalSpecification.getTerm_spec_id();
			IsSupertypeTerminalSpecification = null;
			target.removeRef();
		}
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(
			TerminalSpecification_c[] targets) {
		return getOneTS_WSTOnR201(targets, null);
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test) {
		WhitespaceTerminal_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneTS_WSTOnR201(targets[i], test);
			}
		}

		return ret_val;
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(
			TerminalSpecification_c target) {
		return getOneTS_WSTOnR201(target, null);
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(
			TerminalSpecification_c target, boolean loadComponent) {
		return getOneTS_WSTOnR201(Ooaofgraphics.getDefaultInstance(), target,
				null, loadComponent);
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneTS_WSTOnR201(Ooaofgraphics.getDefaultInstance(),
					target, test);
		}
		return null;
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		return getOneTS_WSTOnR201(modelRoot, target, test, true);
	}

	public static WhitespaceTerminal_c getOneTS_WSTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneTS_WSTOnR201(modelRoot, target, test);
	}
	private static WhitespaceTerminal_c find_getOneTS_WSTOnR201(
			ModelRoot modelRoot, TerminalSpecification_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			WhitespaceTerminal_c source = (WhitespaceTerminal_c) target.backPointer_IsSubtypeWhitespaceTerminalIsSubtype_R201;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static WhitespaceTerminal_c[] getManyTS_WSTsOnR201(
			TerminalSpecification_c[] targets) {
		return getManyTS_WSTsOnR201(targets, null);
	}
	public static WhitespaceTerminal_c[] getManyTS_WSTsOnR201(
			TerminalSpecification_c[] targets, boolean loadComponent) {
		return getManyTS_WSTsOnR201(targets, null, loadComponent);
	}
	public static WhitespaceTerminal_c[] getManyTS_WSTsOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManyTS_WSTsOnR201(targets, test, true);
	}

	public static WhitespaceTerminal_c[] getManyTS_WSTsOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new WhitespaceTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();

		InstanceList instances = modelRoot
				.getInstanceList(WhitespaceTerminal_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			WhitespaceTerminal_c source = (WhitespaceTerminal_c) targets[i].backPointer_IsSubtypeWhitespaceTerminalIsSubtype_R201;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			WhitespaceTerminal_c[] ret_set = new WhitespaceTerminal_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new WhitespaceTerminal_c[0];
		}
	}

	public static WhitespaceTerminal_c[] getManyTS_WSTsOnR201(
			TerminalSpecification_c target) {
		if (target != null) {
			TerminalSpecification_c[] targetArray = new TerminalSpecification_c[1];
			targetArray[0] = target;
			return getManyTS_WSTsOnR201(targetArray);
		} else {
			WhitespaceTerminal_c[] result = new WhitespaceTerminal_c[0];
			return result;
		}
	}

	public static WhitespaceTerminal_c[] getManyTS_WSTsOnR201(
			TerminalSpecification_c target, boolean loadComponent) {
		if (target != null) {
			TerminalSpecification_c[] targetArray = new TerminalSpecification_c[1];
			targetArray[0] = target;
			return getManyTS_WSTsOnR201(targetArray, loadComponent);
		} else {
			WhitespaceTerminal_c[] result = new WhitespaceTerminal_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R201
		baseRoot = Ooaofgraphics.getDefaultInstance();
		if (baseRoot != modelRoot && modelRoot.isCompareRoot()) {
			baseRoot = modelRoot;
		}
		TerminalSpecification_c relInst21931 = (TerminalSpecification_c) baseRoot
				.getInstanceList(TerminalSpecification_c.class).get(
						new Object[]{m_term_spec_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst21931 == null) {
			relInst21931 = (TerminalSpecification_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(TerminalSpecification_c.class)
					.get(new Object[]{m_term_spec_id});
		}
		//synchronized
		if (relInst21931 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst21931) && !isProxy())) {
				relInst21931.relateAcrossR201To(this, notifyChanges);
			}
		}
		baseRoot = modelRoot;

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R201
		// TS_TSP
		inst = IsSupertypeTerminalSpecification;
		unrelateAcrossR201From(IsSupertypeTerminalSpecification, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(WhitespaceTerminal_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final WhitespaceTerminal_c inst = (WhitespaceTerminal_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(WhitespaceTerminal_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static WhitespaceTerminal_c WhitespaceTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		WhitespaceTerminal_c result = findWhitespaceTerminalInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static WhitespaceTerminal_c findWhitespaceTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(WhitespaceTerminal_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				WhitespaceTerminal_c x = (WhitespaceTerminal_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static WhitespaceTerminal_c WhitespaceTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return WhitespaceTerminalInstance(modelRoot, test, true);
	}

	public static WhitespaceTerminal_c WhitespaceTerminalInstance(
			ModelRoot modelRoot) {
		return WhitespaceTerminalInstance(modelRoot, null, true);
	}

	public static WhitespaceTerminal_c[] WhitespaceTerminalInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(WhitespaceTerminal_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				WhitespaceTerminal_c x = (WhitespaceTerminal_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				WhitespaceTerminal_c[] ret_set = new WhitespaceTerminal_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new WhitespaceTerminal_c[0];
			}
		}
	}
	public static WhitespaceTerminal_c[] WhitespaceTerminalInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return WhitespaceTerminalInstances(modelRoot, test, true);
	}
	public static WhitespaceTerminal_c[] WhitespaceTerminalInstances(
			ModelRoot modelRoot) {
		return WhitespaceTerminalInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the WhiteSpace Terminal.dispose call: ";
		TerminalSpecification_c testR201Inst1 = TerminalSpecification_c
				.getOneTS_TSPOnR201(this, false);

		if (testR201Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "201 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE,
						"WhiteSpace Terminal", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("term_spec_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getTerm_spec_idLongBased() {
		if (IsSupertypeTerminalSpecification != null) {
			return IsSupertypeTerminalSpecification.getTerm_spec_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTerm_spec_id() {
		if (IsSupertypeTerminalSpecification != null) {
			return IsSupertypeTerminalSpecification.getTerm_spec_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeTerminalSpecification != null);

	}

	public java.util.UUID getTerm_spec_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_term_spec_id))
			return m_term_spec_id;
		else
			return getTerm_spec_id();
	}

	public void setTerm_spec_id(java.util.UUID newValue) {
		m_term_spec_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "WhiteSpace Terminal", //$NON-NLS-1$
						" Operation entered: WhiteSpace Terminal::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		WhitespaceTerminal_c[] objs = WhitespaceTerminal_c
				.WhitespaceTerminalInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "WhiteSpace Terminal", //$NON-NLS-1$
				" Operation entered: WhiteSpace Terminal::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class WhitespaceTerminal_c_test21933_c implements ClassQueryInterface_c {
			WhitespaceTerminal_c_test21933_c(java.util.UUID p21934) {
				m_p21934 = p21934;
			}
			private java.util.UUID m_p21934;
			public boolean evaluate(Object candidate) {
				WhitespaceTerminal_c selected = (WhitespaceTerminal_c) candidate;
				boolean retval = false;
				retval = (selected.getTerm_spec_id().equals(m_p21934));
				return retval;
			}
		}

		WhitespaceTerminal_c[] objs21932 = WhitespaceTerminal_c
				.WhitespaceTerminalInstances(
						Ooaofgraphics.getDefaultInstance(),
						new WhitespaceTerminal_c_test21933_c(getTerm_spec_id()));

		if (((objs21932.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"WhiteSpace Terminal", //$NON-NLS-1$
								"Consistency: Object: WhiteSpace Terminal: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21932.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: WhiteSpace Terminal: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21932.length), e);
			}
			retval = false;

		}

		if (((objs21932.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"WhiteSpace Terminal", //$NON-NLS-1$
								"Consistency: Object: WhiteSpace Terminal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21932.length)
										+ " Term_Spec_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: WhiteSpace Terminal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21932.length)
										+ " Term_Spec_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// WhiteSpace Terminal is a subtype in association: rel.Numb = 201
		// The supertype class is: Terminal Specification
		class TerminalSpecification_c_test21938_c
				implements
					ClassQueryInterface_c {
			TerminalSpecification_c_test21938_c(java.util.UUID p21939) {
				m_p21939 = p21939;
			}
			private java.util.UUID m_p21939;
			public boolean evaluate(Object candidate) {
				TerminalSpecification_c selected = (TerminalSpecification_c) candidate;
				boolean retval = false;
				retval = (selected.getTerm_spec_id().equals(m_p21939));
				return retval;
			}
		}

		TerminalSpecification_c[] objs21937 = TerminalSpecification_c
				.TerminalSpecificationInstances(Ooaofgraphics
						.getDefaultInstance(),
						new TerminalSpecification_c_test21938_c(
								getTerm_spec_id()));

		if (((objs21937.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"WhiteSpace Terminal", //$NON-NLS-1$
								"Consistency: Object: WhiteSpace Terminal: Association: 201: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21937.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: WhiteSpace Terminal: Association: 201: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21937.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public boolean Criteriamet(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "WhiteSpace Terminal",
				" Operation entered: WhitespaceTerminal::Criteriamet");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_model = Model_c.getOneGD_MDOnR207(TerminalSpecification_c
				.getOneTS_TSPOnR201(this));

		if (((v_model != null))) {

			class ModelTool_test21524_c implements ClassQueryInterface_c {
				public boolean evaluate(Object candidate) {
					ModelTool_c selected = (ModelTool_c) candidate;
					return (selected.getActive() == true);
				}
			}
			ModelTool_c v_tool = ModelTool_c.getOneCT_MTLOnR100(v_model,
					new ModelTool_test21524_c());

			if (((v_tool != null))) {

				GraphicalElement_c v_curElem = GraphicalElement_c
						.getOneGD_GEOnR16(ElementSpecification_c
								.getOneGD_ESOnR103(v_tool));

				Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);

				int v_unScaledX = Gr_c.Unscale((int) (p_X - v_diagram
						.getViewportx()));

				int v_unScaledY = Gr_c.Unscale((int) (p_Y - v_diagram
						.getViewporty()));

				GraphicalElement_c[] v_elems = GraphicalElement_c
						.getManyGD_GEsOnR1(v_model);

				GraphicalElement_c v_elem = null;
				for (int i21307 = 0; i21307 < v_elems.length; i21307++) {
					v_elem = v_elems[i21307];

					if ((v_curElem != v_elem && v_elem.Isover(v_unScaledX,
							v_unScaledY))) {

						return false;

					}

				}

			}

		}

		TerminalSpecification_c v_termSpec = TerminalSpecification_c
				.getOneTS_TSPOnR201(this);

		if (v_termSpec != null) {
			v_termSpec.setSatisfied(true);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		return true;

	} // End criteriaMet

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end WhiteSpace Terminal
