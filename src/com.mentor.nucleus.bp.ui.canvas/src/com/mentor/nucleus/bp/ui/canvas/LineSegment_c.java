      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.LineSegment_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_LINE_SEGMENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class LineSegment_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public LineSegment_c(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_conn_elementid,
       java.util.UUID         p_m_previous_elementid,
       java.util.UUID         p_m_start_way_id,
       java.util.UUID         p_m_end_way_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //extract 28 bit value only            
       m_elementidLongBased = 0xfffffff & p_m_elementid.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_elementid = IdAssigner.preprocessUUID(p_m_previous_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_start_way_id = IdAssigner.preprocessUUID(p_m_start_way_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_end_way_id = IdAssigner.preprocessUUID(p_m_end_way_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_conn_elementid = IdAssigner.preprocessUUID(p_m_conn_elementid);
        
    setUniqueId(m_elementid);
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }
  static public LineSegment_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_conn_elementid,
       java.util.UUID         p_m_previous_elementid,
       java.util.UUID         p_m_start_way_id,
       java.util.UUID         p_m_end_way_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);
      LineSegment_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_elementid};
          new_inst = (LineSegment_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //extract 28 bit value only            
       new_inst.m_elementidLongBased = 0xfffffff & p_m_elementid.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_elementid = IdAssigner.preprocessUUID(p_m_previous_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_start_way_id = IdAssigner.preprocessUUID(p_m_start_way_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_end_way_id = IdAssigner.preprocessUUID(p_m_end_way_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_conn_elementid = IdAssigner.preprocessUUID(p_m_conn_elementid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new LineSegment_c(modelRoot,
p_m_elementid,
p_m_conn_elementid,
p_m_previous_elementid,
p_m_start_way_id,
p_m_end_way_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public LineSegment_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_elementid,
       java.util.UUID         p_m_conn_elementid,
       java.util.UUID         p_m_previous_elementid,
       java.util.UUID         p_m_start_way_id,
       java.util.UUID         p_m_end_way_id){
    InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);
    LineSegment_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_elementid
            };
        source = (LineSegment_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
       //extract 28 bit value only            
       source.m_elementidLongBased = 0xfffffff & p_m_elementid.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_elementid = IdAssigner.preprocessUUID(p_m_previous_elementid);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_start_way_id = IdAssigner.preprocessUUID(p_m_start_way_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_end_way_id = IdAssigner.preprocessUUID(p_m_end_way_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_conn_elementid = IdAssigner.preprocessUUID(p_m_conn_elementid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    LineSegment_c new_inst = new LineSegment_c(modelRoot,
p_m_elementid,
p_m_conn_elementid,
p_m_previous_elementid,
p_m_start_way_id,
p_m_end_way_id
);
    return new_inst;
  }
  public LineSegment_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_elementid = idAssigner.createUUID();
     m_previous_elementid = IdAssigner.NULL_UUID;   
     m_start_way_id = IdAssigner.NULL_UUID;   
     m_end_way_id = IdAssigner.NULL_UUID;   
     m_conn_elementid = IdAssigner.NULL_UUID;   
    setUniqueId(m_elementid);
    Object [] key = {m_elementid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_elementid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_elementid !=  p_newKey ){
	
		m_elementid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof LineSegment_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof LineSegment_c)) {
           return false;
       }
       
       LineSegment_c me = (LineSegment_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID.equals(((LineSegment_c)elem).getElementid())) && this != elem)) {
      	return false;
      }
      if (!getElementid().equals(((LineSegment_c)elem).getElementid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof LineSegment_c)) {
           return false;
       }
       
       LineSegment_c me = (LineSegment_c)elem;
      if (!getElementid().equals(((LineSegment_c)elem).getElementid())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_elementid ;
  private long m_elementidLongBased ;
  private java.util.UUID         m_previous_elementid ;
  private java.util.UUID         m_start_way_id ;
  private java.util.UUID         m_end_way_id ;
  private java.util.UUID         m_conn_elementid ;
      
// declare association references from this class
  
  
    
// referring navigation

Waypoint_c StartingEndpointWaypoint ;
public void relateAcrossR21To(Waypoint_c target)
{
	relateAcrossR21To(target, true);
}
public void relateAcrossR21To(Waypoint_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == StartingEndpointWaypoint) return;  // already related

    if ( StartingEndpointWaypoint != target ) {
    
    Object oldKey = getInstanceKey();

    if (StartingEndpointWaypoint != null) {
    
        StartingEndpointWaypoint.clearBackPointerR21To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"LineSegment_c.relateAcrossR21To(Waypoint_c target)", 
			"Relate performed across R21 from Line Segment to Waypoint without unrelate of prior instance.");  
		}
    }
                
    	StartingEndpointWaypoint = target ;
        m_start_way_id = target.getWay_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR21To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "21", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR21From(Waypoint_c target)
{
	unrelateAcrossR21From(target, true);
}
public void unrelateAcrossR21From(Waypoint_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (StartingEndpointWaypoint == null) return;  // already unrelated
	
	if (target != StartingEndpointWaypoint) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R21", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR21To(this);
    }
    

      if(StartingEndpointWaypoint != null) {
      
        m_start_way_id = StartingEndpointWaypoint.getWay_id();
        StartingEndpointWaypoint = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "21", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static LineSegment_c getOneGD_LSOnR21(Waypoint_c [] targets)
{
    return getOneGD_LSOnR21(targets, null);
}

public static LineSegment_c getOneGD_LSOnR21(Waypoint_c [] targets, ClassQueryInterface_c test)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_LSOnR21(targets[i], test);
        }
    }

    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR21(Waypoint_c target)
{
  return getOneGD_LSOnR21(target, null);
}

public static LineSegment_c getOneGD_LSOnR21(Waypoint_c target, boolean loadComponent)
{
    return getOneGD_LSOnR21(target.getModelRoot(), target, null, loadComponent);
}

public static LineSegment_c getOneGD_LSOnR21(Waypoint_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_LSOnR21(target.getModelRoot(), target, test);
  }
  return null;
}

public static LineSegment_c getOneGD_LSOnR21(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test)
{
	return getOneGD_LSOnR21(modelRoot, target, test, true);
}

public static LineSegment_c getOneGD_LSOnR21(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_LSOnR21(modelRoot,target,test);
}
private static LineSegment_c find_getOneGD_LSOnR21(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    LineSegment_c source = (LineSegment_c)target.backPointer_LineSegment_R21;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static LineSegment_c [] getManyGD_LSsOnR21(Waypoint_c [] targets)
{
  return getManyGD_LSsOnR21(targets, null);
}
public static LineSegment_c [] getManyGD_LSsOnR21(Waypoint_c [] targets, boolean loadComponent)
{
  return getManyGD_LSsOnR21(targets, null, loadComponent);
}
public static LineSegment_c [] getManyGD_LSsOnR21(Waypoint_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR21(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR21(Waypoint_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new LineSegment_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      LineSegment_c source = (LineSegment_c)targets[i].backPointer_LineSegment_R21;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	LineSegment_c[] ret_set = new LineSegment_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new LineSegment_c[0];
  }
  }

public static LineSegment_c [] getManyGD_LSsOnR21(Waypoint_c target)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR21(targetArray);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
  return result ;
}
}

public static LineSegment_c [] getManyGD_LSsOnR21(Waypoint_c target, boolean loadComponent)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR21(targetArray, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Waypoint_c EndingEndpointWaypoint ;
public void relateAcrossR22To(Waypoint_c target)
{
	relateAcrossR22To(target, true);
}
public void relateAcrossR22To(Waypoint_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == EndingEndpointWaypoint) return;  // already related

    if ( EndingEndpointWaypoint != target ) {
    
    Object oldKey = getInstanceKey();

    if (EndingEndpointWaypoint != null) {
    
        EndingEndpointWaypoint.clearBackPointerR22To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"LineSegment_c.relateAcrossR22To(Waypoint_c target)", 
			"Relate performed across R22 from Line Segment to Waypoint without unrelate of prior instance.");  
		}
    }
                
    	EndingEndpointWaypoint = target ;
        m_end_way_id = target.getWay_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR22To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "22", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR22From(Waypoint_c target)
{
	unrelateAcrossR22From(target, true);
}
public void unrelateAcrossR22From(Waypoint_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (EndingEndpointWaypoint == null) return;  // already unrelated
	
	if (target != EndingEndpointWaypoint) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R22", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR22To(this);
    }
    

      if(EndingEndpointWaypoint != null) {
      
        m_end_way_id = EndingEndpointWaypoint.getWay_id();
        EndingEndpointWaypoint = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "22", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static LineSegment_c getOneGD_LSOnR22(Waypoint_c [] targets)
{
    return getOneGD_LSOnR22(targets, null);
}

public static LineSegment_c getOneGD_LSOnR22(Waypoint_c [] targets, ClassQueryInterface_c test)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_LSOnR22(targets[i], test);
        }
    }

    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR22(Waypoint_c target)
{
  return getOneGD_LSOnR22(target, null);
}

public static LineSegment_c getOneGD_LSOnR22(Waypoint_c target, boolean loadComponent)
{
    return getOneGD_LSOnR22(target.getModelRoot(), target, null, loadComponent);
}

public static LineSegment_c getOneGD_LSOnR22(Waypoint_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_LSOnR22(target.getModelRoot(), target, test);
  }
  return null;
}

public static LineSegment_c getOneGD_LSOnR22(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test)
{
	return getOneGD_LSOnR22(modelRoot, target, test, true);
}

public static LineSegment_c getOneGD_LSOnR22(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_LSOnR22(modelRoot,target,test);
}
private static LineSegment_c find_getOneGD_LSOnR22(ModelRoot modelRoot, Waypoint_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    LineSegment_c source = (LineSegment_c)target.backPointer_LineSegment_R22;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static LineSegment_c [] getManyGD_LSsOnR22(Waypoint_c [] targets)
{
  return getManyGD_LSsOnR22(targets, null);
}
public static LineSegment_c [] getManyGD_LSsOnR22(Waypoint_c [] targets, boolean loadComponent)
{
  return getManyGD_LSsOnR22(targets, null, loadComponent);
}
public static LineSegment_c [] getManyGD_LSsOnR22(Waypoint_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR22(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR22(Waypoint_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new LineSegment_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      LineSegment_c source = (LineSegment_c)targets[i].backPointer_LineSegment_R22;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	LineSegment_c[] ret_set = new LineSegment_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new LineSegment_c[0];
  }
  }

public static LineSegment_c [] getManyGD_LSsOnR22(Waypoint_c target)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR22(targetArray);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
  return result ;
}
}

public static LineSegment_c [] getManyGD_LSsOnR22(Waypoint_c target, boolean loadComponent)
{
  if (target != null) {
    Waypoint_c [] targetArray = new Waypoint_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR22(targetArray, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
  return result ;
}
}



  
    
// referring navigation

LineSegment_c FollowsLineSegment ;
public void relateAcrossR7ToFollows(LineSegment_c target)
{
	relateAcrossR7ToFollows(target, true);
}
public void relateAcrossR7ToFollows(LineSegment_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == FollowsLineSegment) return;  // already related

    if ( FollowsLineSegment != target ) {
    
    Object oldKey = getInstanceKey();

    if (FollowsLineSegment != null) {
    
        FollowsLineSegment.clearBackPointerR7ToPrecedes(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"LineSegment_c.relateAcrossR7ToFollows(LineSegment_c target)", 
			"Relate performed across R7 from Line Segment to Line Segment without unrelate of prior instance.");  
		}
    }
                
    	FollowsLineSegment = target ;
        m_previous_elementid = target.getElementid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR7ToPrecedes(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "7", "Follows");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR7FromFollows(LineSegment_c target)
{
	unrelateAcrossR7FromFollows(target, true);
}
public void unrelateAcrossR7FromFollows(LineSegment_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (FollowsLineSegment == null) return;  // already unrelated
	
	if (target != FollowsLineSegment) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R7", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR7ToPrecedes(this);
    }
    

      if(FollowsLineSegment != null) {
      
        m_previous_elementid = FollowsLineSegment.getElementid();
        FollowsLineSegment = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "7", "Follows");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static LineSegment_c getOneGD_LSOnR7Precedes(LineSegment_c [] targets)
{
    return getOneGD_LSOnR7Precedes(targets, null);
}

public static LineSegment_c getOneGD_LSOnR7Precedes(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_LSOnR7Precedes(targets[i], test);
        }
    }

    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR7Precedes(LineSegment_c target)
{
  return getOneGD_LSOnR7Precedes(target, null);
}

public static LineSegment_c getOneGD_LSOnR7Precedes(LineSegment_c target, boolean loadComponent)
{
    return getOneGD_LSOnR7Precedes(target.getModelRoot(), target, null, loadComponent);
}

public static LineSegment_c getOneGD_LSOnR7Precedes(LineSegment_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_LSOnR7Precedes(target.getModelRoot(), target, test);
  }
  return null;
}

public static LineSegment_c getOneGD_LSOnR7Precedes(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test)
{
	return getOneGD_LSOnR7Precedes(modelRoot, target, test, true);
}

public static LineSegment_c getOneGD_LSOnR7Precedes(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_LSOnR7Precedes(modelRoot,target,test);
}
private static LineSegment_c find_getOneGD_LSOnR7Precedes(ModelRoot modelRoot, LineSegment_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    LineSegment_c source = (LineSegment_c)target.backPointer_PrecedesLineSegmentPrecedes_R7;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static LineSegment_c [] getManyGD_LSsOnR7Precedes(LineSegment_c [] targets)
{
  return getManyGD_LSsOnR7Precedes(targets, null);
}
public static LineSegment_c [] getManyGD_LSsOnR7Precedes(LineSegment_c [] targets, boolean loadComponent)
{
  return getManyGD_LSsOnR7Precedes(targets, null, loadComponent);
}
public static LineSegment_c [] getManyGD_LSsOnR7Precedes(LineSegment_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR7Precedes(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR7Precedes(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new LineSegment_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      LineSegment_c source = (LineSegment_c)targets[i].backPointer_PrecedesLineSegmentPrecedes_R7;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	LineSegment_c[] ret_set = new LineSegment_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new LineSegment_c[0];
  }
  }

public static LineSegment_c [] getManyGD_LSsOnR7Precedes(LineSegment_c target)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR7Precedes(targetArray);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
  return result ;
}
}

public static LineSegment_c [] getManyGD_LSsOnR7Precedes(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR7Precedes(targetArray, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Connector_c IsPartOfConnector ;
public void relateAcrossR6To(Connector_c target)
{
	relateAcrossR6To(target, true);
}
public void relateAcrossR6To(Connector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsPartOfConnector) return;  // already related

    if ( IsPartOfConnector != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsPartOfConnector != null) {
    
        IsPartOfConnector.clearBackPointerR6To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"LineSegment_c.relateAcrossR6To(Connector_c target)", 
			"Relate performed across R6 from Line Segment to Connector without unrelate of prior instance.");  
		}
    }
                
    	IsPartOfConnector = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_conn_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR6To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "6", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR6From(Connector_c target)
{
	unrelateAcrossR6From(target, true);
}
public void unrelateAcrossR6From(Connector_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsPartOfConnector == null) return;  // already unrelated
	
	if (target != IsPartOfConnector) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R6", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR6To(this);
    }
    

      if(IsPartOfConnector != null) {
      
        m_conn_elementid = IsPartOfConnector.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_conn_elementid))
        {
          m_conn_elementid = IsPartOfConnector.getElementidCachedValue();
        }       
        IsPartOfConnector = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "6", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static LineSegment_c getOneGD_LSOnR6(Connector_c [] targets)
{
    return getOneGD_LSOnR6(targets, null);
}

public static LineSegment_c getOneGD_LSOnR6(Connector_c [] targets, ClassQueryInterface_c test)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneGD_LSOnR6(targets[i], test);
        }
    }

    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR6(Connector_c target)
{
  return getOneGD_LSOnR6(target, null);
}

public static LineSegment_c getOneGD_LSOnR6(Connector_c target, boolean loadComponent)
{
    return getOneGD_LSOnR6(target.getModelRoot(), target, null, loadComponent);
}

public static LineSegment_c getOneGD_LSOnR6(Connector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneGD_LSOnR6(target.getModelRoot(), target, test);
  }
  return null;
}

public static LineSegment_c getOneGD_LSOnR6(ModelRoot modelRoot, Connector_c target, ClassQueryInterface_c test)
{
	return getOneGD_LSOnR6(modelRoot, target, test, true);
}

public static LineSegment_c getOneGD_LSOnR6(ModelRoot modelRoot, Connector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneGD_LSOnR6(modelRoot,target,test);
}
private static LineSegment_c find_getOneGD_LSOnR6(ModelRoot modelRoot, Connector_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasLineSegmentHas_R6) {
	    for ( int i = 0; i < target.backPointer_HasLineSegmentHas_R6.size(); ++i ) {
	      LineSegment_c source = (LineSegment_c)target.backPointer_HasLineSegmentHas_R6.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c [] targets)
{
  return getManyGD_LSsOnR6(targets, null);
}
public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c [] targets, boolean loadComponent)
{
  return getManyGD_LSsOnR6(targets, null, loadComponent);
}
public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c [] targets, ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR6(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new LineSegment_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasLineSegmentHas_R6) {
	    for (int j = 0; j < targets[i].backPointer_HasLineSegmentHas_R6.size(); ++j) {
	      LineSegment_c source = (LineSegment_c)targets[i].backPointer_HasLineSegmentHas_R6.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	LineSegment_c[] ret_set = new LineSegment_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new LineSegment_c[0];
  }
  }

public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c target)
{
  return getManyGD_LSsOnR6(target, null);
}

public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c target, boolean loadComponent)
{
  return getManyGD_LSsOnR6(target, null, loadComponent);
}

public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c target, ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR6(target, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR6(Connector_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new LineSegment_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasLineSegmentHas_R6) {
    for (int i = 0; i < target.backPointer_HasLineSegmentHas_R6.size(); ++i) {
      LineSegment_c source = (LineSegment_c)target.backPointer_HasLineSegmentHas_R6.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		LineSegment_c[] ret_set = new LineSegment_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new LineSegment_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<AnchorOnSegment_c> backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26 = new ArrayList<AnchorOnSegment_c>();

public void setAnchorOnSegmentOrderInChildListR26(AnchorOnSegment_c target, int index) {
	unrelateAcrossR26From(target);
	AnchorOnSegment_c[] elements = AnchorOnSegment_c.getManyGD_AOSsOnR26(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR26From((AnchorOnSegment_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR26To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR26To((AnchorOnSegment_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR26To(AnchorOnSegment_c target)
{
  if (target != null) {
    target.relateAcrossR26To(this, true) ;
  }
}

public void relateAcrossR26To(AnchorOnSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR26To(this, notifyChanges) ;
  }
}

public void setBackPointerR26To(AnchorOnSegment_c target)
{
  	synchronized (backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26) {
		backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26.add(target);
	}
}

public void unrelateAcrossR26From(AnchorOnSegment_c target)
{
  if (target != null) {
    target.unrelateAcrossR26From(this, true) ;
  }
}

public void unrelateAcrossR26From(AnchorOnSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR26From(this, notifyChanges) ;
  }
}

public void clearBackPointerR26To(AnchorOnSegment_c target)
{
  synchronized (backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26) {
	    backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26.remove(target);
	}
}

public static LineSegment_c getOneGD_LSOnR26(AnchorOnSegment_c [] targets)
{
    return getOneGD_LSOnR26(targets, null);
}

public static LineSegment_c getOneGD_LSOnR26(AnchorOnSegment_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_LSOnR26(targets, test, true);
}

public static LineSegment_c getOneGD_LSOnR26(AnchorOnSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             LineSegment_c candidate_val = getOneGD_LSOnR26(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_LSOnR26(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR26(AnchorOnSegment_c target)
{
	return getOneGD_LSOnR26(target, true);
}
public static LineSegment_c getOneGD_LSOnR26(AnchorOnSegment_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.HasAnchorPointLineSegment ;
  } else {
    return null;
  }
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR26(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LineSegment_c[0];
  
  
  LinkedHashSet<LineSegment_c> elementsSet = new LinkedHashSet<LineSegment_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HasAnchorPointLineSegment == null)
	  targets[i].loadProxy();
    LineSegment_c associate = targets[i].HasAnchorPointLineSegment;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LineSegment_c[] result = new LineSegment_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c [] targets)
{
  return getManyGD_LSsOnR26(targets, null);
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AnchorOnSegment_c [] targetArray = new AnchorOnSegment_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR26(targetArray, test, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
    return result ;
  }
  
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_LSsOnR26(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c target)
{
    return getManyGD_LSsOnR26(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR26(AnchorOnSegment_c target, boolean loadComponent)
{
    return getManyGD_LSsOnR26(target, null, loadComponent);
}

public static LineSegment_c getOneGD_LSOnR26(Graphconnector_c target)
{
  return LineSegment_c.getOneGD_LSOnR26(AnchorOnSegment_c.getOneGD_AOSOnR26(target)) ;
}

public static LineSegment_c getOneGD_LSOnR26(Graphconnector_c target,
    ClassQueryInterface_c test)
{
  return LineSegment_c.getOneGD_LSOnR26(AnchorOnSegment_c.getManyGD_AOSsOnR26(target), test) ;
}



    
  
  
// referred to navigation

Connector_c backPointer_IsTheDestinationOfConnectorEndingAtConnectorIsTheDestinationOfConnectorEndingAt_R5;

public void setConnectorOrderInChildListR5(Connector_c target, int index) {
	unrelateAcrossR5From(target);
	Connector_c[] elements = Connector_c.getManyGD_CONsOnR5(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR5From((Connector_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR5To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR5To((Connector_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR5To(Connector_c target)
{
  if (target != null) {
    target.relateAcrossR5To(this, true) ;
  }
}

public void relateAcrossR5To(Connector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR5To(this, notifyChanges) ;
  }
}

public void setBackPointerR5To(Connector_c target)
{
    backPointer_IsTheDestinationOfConnectorEndingAtConnectorIsTheDestinationOfConnectorEndingAt_R5 = target;
}

public void unrelateAcrossR5From(Connector_c target)
{
  if (target != null) {
    target.unrelateAcrossR5From(this, true) ;
  }
}

public void unrelateAcrossR5From(Connector_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR5From(this, notifyChanges) ;
  }
}

public void clearBackPointerR5To(Connector_c target)
{
	if (target == backPointer_IsTheDestinationOfConnectorEndingAtConnectorIsTheDestinationOfConnectorEndingAt_R5) {
		backPointer_IsTheDestinationOfConnectorEndingAtConnectorIsTheDestinationOfConnectorEndingAt_R5 = null;
	}
}

public static LineSegment_c getOneGD_LSOnR5(Connector_c [] targets)
{
    return getOneGD_LSOnR5(targets, null);
}

public static LineSegment_c getOneGD_LSOnR5(Connector_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_LSOnR5(targets, test, true);
}

public static LineSegment_c getOneGD_LSOnR5(Connector_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             LineSegment_c candidate_val = getOneGD_LSOnR5(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_LSOnR5(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR5(Connector_c target)
{
	return getOneGD_LSOnR5(target, true);
}
public static LineSegment_c getOneGD_LSOnR5(Connector_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.HasConnectorWhichEndsAtLineSegment ;
  } else {
    return null;
  }
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR5(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LineSegment_c[0];
  
  
  LinkedHashSet<LineSegment_c> elementsSet = new LinkedHashSet<LineSegment_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HasConnectorWhichEndsAtLineSegment == null)
	  targets[i].loadProxy();
    LineSegment_c associate = targets[i].HasConnectorWhichEndsAtLineSegment;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LineSegment_c[] result = new LineSegment_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c [] targets)
{
  return getManyGD_LSsOnR5(targets, null);
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Connector_c [] targetArray = new Connector_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR5(targetArray, test, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
    return result ;
  }
  
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_LSsOnR5(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c target)
{
    return getManyGD_LSsOnR5(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR5(Connector_c target, boolean loadComponent)
{
    return getManyGD_LSsOnR5(target, null, loadComponent);
}


    
  
  
// referred to navigation

LineSegment_c backPointer_PrecedesLineSegmentPrecedes_R7;

public void setLineSegmentOrderInChildListR7(LineSegment_c target, int index) {
	unrelateAcrossR7FromPrecedes(target);
	LineSegment_c[] elements = LineSegment_c.getManyGD_LSsOnR7Precedes(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR7FromPrecedes((LineSegment_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR7ToPrecedes(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR7ToPrecedes((LineSegment_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR7ToPrecedes(LineSegment_c target)
{
  if (target != null) {
    target.relateAcrossR7ToFollows(this, true) ;
  }
}

public void relateAcrossR7ToPrecedes(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR7ToFollows(this, notifyChanges) ;
  }
}

public void setBackPointerR7ToPrecedes(LineSegment_c target)
{
    backPointer_PrecedesLineSegmentPrecedes_R7 = target;
}

public void unrelateAcrossR7FromPrecedes(LineSegment_c target)
{
  if (target != null) {
    target.unrelateAcrossR7FromFollows(this, true) ;
  }
}

public void unrelateAcrossR7FromPrecedes(LineSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR7FromFollows(this, notifyChanges) ;
  }
}

public void clearBackPointerR7ToPrecedes(LineSegment_c target)
{
	if (target == backPointer_PrecedesLineSegmentPrecedes_R7) {
		backPointer_PrecedesLineSegmentPrecedes_R7 = null;
	}
}

public static LineSegment_c getOneGD_LSOnR7Follows(LineSegment_c [] targets)
{
    return getOneGD_LSOnR7Follows(targets, null);
}

public static LineSegment_c getOneGD_LSOnR7Follows(LineSegment_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_LSOnR7Follows(targets, test, true);
}

public static LineSegment_c getOneGD_LSOnR7Follows(LineSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             LineSegment_c candidate_val = getOneGD_LSOnR7Follows(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_LSOnR7Follows(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR7Follows(LineSegment_c target)
{
	return getOneGD_LSOnR7Follows(target, true);
}
public static LineSegment_c getOneGD_LSOnR7Follows(LineSegment_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.FollowsLineSegment ;
  } else {
    return null;
  }
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR7Follows(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LineSegment_c[0];
  
  
  LinkedHashSet<LineSegment_c> elementsSet = new LinkedHashSet<LineSegment_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].FollowsLineSegment == null)
	  targets[i].loadProxy();
    LineSegment_c associate = targets[i].FollowsLineSegment;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LineSegment_c[] result = new LineSegment_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c [] targets)
{
  return getManyGD_LSsOnR7Follows(targets, null);
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LineSegment_c [] targetArray = new LineSegment_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR7Follows(targetArray, test, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
    return result ;
  }
  
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_LSsOnR7Follows(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c target)
{
    return getManyGD_LSsOnR7Follows(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR7Follows(LineSegment_c target, boolean loadComponent)
{
    return getManyGD_LSsOnR7Follows(target, null, loadComponent);
}


    
  
  
// referred to navigation

ConnectorTool_c backPointer_IsBeingDrawnByConnectorToolIsBeingDrawnBy_R106;

public void setConnectorToolOrderInChildListR106(ConnectorTool_c target, int index) {
	unrelateAcrossR106From(target);
	ConnectorTool_c[] elements = ConnectorTool_c.getManyCT_CTLsOnR106(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR106From((ConnectorTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR106To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR106To((ConnectorTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR106To(ConnectorTool_c target)
{
  if (target != null) {
    target.relateAcrossR106To(this, true) ;
  }
}

public void relateAcrossR106To(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR106To(this, notifyChanges) ;
  }
}

public void setBackPointerR106To(ConnectorTool_c target)
{
    backPointer_IsBeingDrawnByConnectorToolIsBeingDrawnBy_R106 = target;
}

public void unrelateAcrossR106From(ConnectorTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR106From(this, true) ;
  }
}

public void unrelateAcrossR106From(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR106From(this, notifyChanges) ;
  }
}

public void clearBackPointerR106To(ConnectorTool_c target)
{
	if (target == backPointer_IsBeingDrawnByConnectorToolIsBeingDrawnBy_R106) {
		backPointer_IsBeingDrawnByConnectorToolIsBeingDrawnBy_R106 = null;
	}
}

public static LineSegment_c getOneGD_LSOnR106(ConnectorTool_c [] targets)
{
    return getOneGD_LSOnR106(targets, null);
}

public static LineSegment_c getOneGD_LSOnR106(ConnectorTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneGD_LSOnR106(targets, test, true);
}

public static LineSegment_c getOneGD_LSOnR106(ConnectorTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    LineSegment_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             LineSegment_c candidate_val = getOneGD_LSOnR106(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneGD_LSOnR106(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static LineSegment_c getOneGD_LSOnR106(ConnectorTool_c target)
{
	return getOneGD_LSOnR106(target, true);
}
public static LineSegment_c getOneGD_LSOnR106(ConnectorTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsDrawingLineSegment ;
  } else {
    return null;
  }
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyGD_LSsOnR106(targets, test, true);
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LineSegment_c[0];
  
  
  LinkedHashSet<LineSegment_c> elementsSet = new LinkedHashSet<LineSegment_c>();
  for (int i = 0; i < targets.length; i++) {
    LineSegment_c associate = targets[i].IsDrawingLineSegment;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LineSegment_c[] result = new LineSegment_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c [] targets)
{
  return getManyGD_LSsOnR106(targets, null);
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ConnectorTool_c [] targetArray = new ConnectorTool_c[1];
    targetArray[0] = target;
    return getManyGD_LSsOnR106(targetArray, test, loadComponent);
  } else {
    LineSegment_c [] result = new LineSegment_c [0] ;
    return result ;
  }
  
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c target,
    ClassQueryInterface_c test)
{
    return getManyGD_LSsOnR106(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c target)
{
    return getManyGD_LSsOnR106(target, null, true);
}

public static LineSegment_c [] getManyGD_LSsOnR106(ConnectorTool_c target, boolean loadComponent)
{
    return getManyGD_LSsOnR106(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (StartingEndpointWaypoint == null) {          
      // R21
      Waypoint_c relInst22179 = (Waypoint_c) baseRoot.getInstanceList(Waypoint_c.class).get(new Object[] {m_start_way_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22179 == null) {
      			relInst22179 = (Waypoint_c) Ooaofooa.getDefaultInstance().getInstanceList(Waypoint_c.class).get(new Object[] {m_start_way_id});
      		}
			//synchronized
      if ( relInst22179 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22179) && !isProxy())) {
	      relInst22179.relateAcrossR21To(this, notifyChanges);
	  }
	  }
	}
	          

	if (EndingEndpointWaypoint == null) {          
      // R22
      Waypoint_c relInst22180 = (Waypoint_c) baseRoot.getInstanceList(Waypoint_c.class).get(new Object[] {m_end_way_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22180 == null) {
      			relInst22180 = (Waypoint_c) Ooaofooa.getDefaultInstance().getInstanceList(Waypoint_c.class).get(new Object[] {m_end_way_id});
      		}
			//synchronized
      if ( relInst22180 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22180) && !isProxy())) {
	      relInst22180.relateAcrossR22To(this, notifyChanges);
	  }
	  }
	}
	          

	if (FollowsLineSegment == null) {          
      // R7
      LineSegment_c relInst22181 = (LineSegment_c) baseRoot.getInstanceList(LineSegment_c.class).get(new Object[] {m_previous_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22181 == null) {
      			relInst22181 = (LineSegment_c) Ooaofooa.getDefaultInstance().getInstanceList(LineSegment_c.class).get(new Object[] {m_previous_elementid});
      		}
			//synchronized
      if ( relInst22181 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22181) && !isProxy())) {
	      relInst22181.relateAcrossR7ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsPartOfConnector == null) {          
      // R6
      Connector_c relInst22182 = (Connector_c) baseRoot.getInstanceList(Connector_c.class).get(new Object[] {m_conn_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22182 == null) {
      			relInst22182 = (Connector_c) Ooaofooa.getDefaultInstance().getInstanceList(Connector_c.class).get(new Object[] {m_conn_elementid});
      		}
			//synchronized
      if ( relInst22182 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22182) && !isProxy())) {
	      relInst22182.relateAcrossR6To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R21
      // DIM_WAY
		  inst=StartingEndpointWaypoint;
			unrelateAcrossR21From(StartingEndpointWaypoint, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R22
      // DIM_WAY
		  inst=EndingEndpointWaypoint;
			unrelateAcrossR22From(EndingEndpointWaypoint, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R7
      // GD_LS
		  inst=FollowsLineSegment;
			unrelateAcrossR7FromFollows(FollowsLineSegment, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R6
      // GD_CON
		  inst=IsPartOfConnector;
			unrelateAcrossR6From(IsPartOfConnector, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LineSegment_c inst = (LineSegment_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static LineSegment_c LineSegmentInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		LineSegment_c result=findLineSegmentInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static LineSegment_c findLineSegmentInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				LineSegment_c x = (LineSegment_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static LineSegment_c LineSegmentInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return LineSegmentInstance(modelRoot,test,true);
  }
  
  public static LineSegment_c LineSegmentInstance(ModelRoot modelRoot)
  {
	 return LineSegmentInstance(modelRoot,null,true);
  }

  public static LineSegment_c [] LineSegmentInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(LineSegment_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					LineSegment_c x = (LineSegment_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				LineSegment_c[] ret_set = new LineSegment_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LineSegment_c[0];
			}		
		} 
  }
  public static LineSegment_c [] LineSegmentInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  LineSegmentInstances(modelRoot,test,true);
  }
  public static LineSegment_c [] LineSegmentInstances(ModelRoot modelRoot)
  {
	return LineSegmentInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Line Segment.dispose call: ";
	Waypoint_c testR21Inst = Waypoint_c.getOneDIM_WAYOnR21(this, false);

	if ( testR21Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "21 ";
	}
	Waypoint_c testR22Inst = Waypoint_c.getOneDIM_WAYOnR22(this, false);

	if ( testR22Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "22 ";
	}
 	AnchorOnSegment_c testR26Inst = AnchorOnSegment_c.getOneGD_AOSOnR26(this, false);

 	if ( testR26Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "26 ";
 	}
	Connector_c testR5Inst = Connector_c.getOneGD_CONOnR5(this, false);

	if ( testR5Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "5 ";	
	}
	LineSegment_c testR7Inst = LineSegment_c.getOneGD_LSOnR7Precedes(this, false);

	if ( testR7Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "7 ";	
	}
	 testR7Inst = LineSegment_c.getOneGD_LSOnR7Follows(this, false);

	if ( testR7Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "7 ";
	}
	Connector_c testR6Inst = Connector_c.getOneGD_CONOnR6(this, false);

	if ( testR6Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "6 ";
	}
	ConnectorTool_c testR106Inst = ConnectorTool_c.getOneCT_CTLOnR106(this, false);

	if ( testR106Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "106 ";	
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Line Segment", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("elementid")){
         return true;
      }
      if(attributeName.equals("previous_elementid")){
         return true;
      }
      if(attributeName.equals("start_way_id")){
         return true;
      }
      if(attributeName.equals("end_way_id")){
         return true;
      }
      if(attributeName.equals("conn_elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getElementidLongBased()
  {
    if(m_elementidLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_elementid)){
    	return 0xfffffff & m_elementid.getLeastSignificantBits();
    }
    return m_elementidLongBased ;
  }
  public java.util.UUID getElementid()
  {
    return m_elementid ;
  }


  public void setElementid(java.util.UUID newValue)
  {
   m_elementid = IdAssigner.preprocessUUID(newValue);
  }
  public long getPrevious_elementidLongBased()
  {
    if ( FollowsLineSegment != null )
    {
      return FollowsLineSegment.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_elementid()
  {
    if ( FollowsLineSegment != null )
    {
      return FollowsLineSegment.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_elementid) )
      return m_previous_elementid;
    else
      return getPrevious_elementid();
  }
  
  public void setPrevious_elementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_elementid)){
	        return;
	    }
	}else if(m_previous_elementid != null){
	    if(m_previous_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_elementid", m_previous_elementid, newValue,true); 
   m_previous_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getStart_way_idLongBased()
  {
    if ( StartingEndpointWaypoint != null )
    {
      return StartingEndpointWaypoint.getWay_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getStart_way_id()
  {
    if ( StartingEndpointWaypoint != null )
    {
      return StartingEndpointWaypoint.getWay_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getStart_way_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_start_way_id) )
      return m_start_way_id;
    else
      return getStart_way_id();
  }
  
  public void setStart_way_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_start_way_id)){
	        return;
	    }
	}else if(m_start_way_id != null){
	    if(m_start_way_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Start_way_id", m_start_way_id, newValue,true); 
   m_start_way_id = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEnd_way_idLongBased()
  {
    if ( EndingEndpointWaypoint != null )
    {
      return EndingEndpointWaypoint.getWay_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEnd_way_id()
  {
    if ( EndingEndpointWaypoint != null )
    {
      return EndingEndpointWaypoint.getWay_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEnd_way_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_end_way_id) )
      return m_end_way_id;
    else
      return getEnd_way_id();
  }
  
  public void setEnd_way_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_end_way_id)){
	        return;
	    }
	}else if(m_end_way_id != null){
	    if(m_end_way_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "End_way_id", m_end_way_id, newValue,true); 
   m_end_way_id = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getConn_elementidLongBased()
  {
    if ( IsPartOfConnector != null )
    {
      return IsPartOfConnector.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getConn_elementid()
  {
    if ( IsPartOfConnector != null )
    {
      return IsPartOfConnector.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getConn_elementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_conn_elementid) )
      return m_conn_elementid;
    else
      return getConn_elementid();
  }
  
  public void setConn_elementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_conn_elementid)){
	        return;
	    }
	}else if(m_conn_elementid != null){
	    if(m_conn_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Conn_elementid", m_conn_elementid, newValue,true); 
   m_conn_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Line Segment", //$NON-NLS-1$
	  " Operation entered: Line Segment::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     LineSegment_c [] objs = LineSegment_c.LineSegmentInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Line Segment", //$NON-NLS-1$
	  " Operation entered: Line Segment::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class LineSegment_c_test22184_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test22184_c( java.util.UUID            p22185 ) {
	  m_p22185 = p22185;
	  }
	  private java.util.UUID             m_p22185; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22185));
	      return retval;
	  }
    }

    LineSegment_c [] objs22183 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test22184_c(getElementid())) ;

    if ( (  (objs22183.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22183.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22183.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22183.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22183.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22183.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Line Segment is a referring class in association: rel.Numb = 7
          // The participating class is: Line Segment
    class LineSegment_c_test22189_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test22189_c( java.util.UUID            p22190 ) {
	  m_p22190 = p22190;
	  }
	  private java.util.UUID             m_p22190; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22190));
	      return retval;
	  }
    }

    LineSegment_c [] objs22188 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test22189_c(getPrevious_elementid())) ;

    if ( (  (objs22188.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 7: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22188.length )  + " Previous_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 7: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22188.length )  + " Previous_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Line Segment is a referring class in association: rel.Numb = 21
          // The participating class is: Waypoint
    class Waypoint_c_test22192_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test22192_c( java.util.UUID            p22193 ) {
	  m_p22193 = p22193;
	  }
	  private java.util.UUID             m_p22193; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getWay_id().equals(m_p22193));
	      return retval;
	  }
    }

    Waypoint_c [] objs22191 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test22192_c(getStart_way_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22191.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 21: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22191.length )  + " start_Way_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 21: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22191.length )  + " start_Way_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Line Segment is a referring class in association: rel.Numb = 22
          // The participating class is: Waypoint
    class Waypoint_c_test22195_c implements ClassQueryInterface_c
    {
	  Waypoint_c_test22195_c( java.util.UUID            p22196 ) {
	  m_p22196 = p22196;
	  }
	  private java.util.UUID             m_p22196; 
	  public boolean evaluate (Object candidate)
	  {
	      Waypoint_c selected = (Waypoint_c) candidate;
	      boolean retval = false;
	      retval = (selected.getWay_id().equals(m_p22196));
	      return retval;
	  }
    }

    Waypoint_c [] objs22194 = 
    Waypoint_c.WaypointInstances(modelRoot, new Waypoint_c_test22195_c(getEnd_way_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22194.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 22: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22194.length )  + " end_Way_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 22: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22194.length )  + " end_Way_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Line Segment is a referring class in association: rel.Numb = 6
          // The participating class is: Connector
    class Connector_c_test22198_c implements ClassQueryInterface_c
    {
	  Connector_c_test22198_c( java.util.UUID            p22199 ) {
	  m_p22199 = p22199;
	  }
	  private java.util.UUID             m_p22199; 
	  public boolean evaluate (Object candidate)
	  {
	      Connector_c selected = (Connector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p22199));
	      return retval;
	  }
    }

    Connector_c [] objs22197 = 
    Connector_c.ConnectorInstances(modelRoot, new Connector_c_test22198_c(getConn_elementid())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22197.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 6: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22197.length )  + " conn_elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 6: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22197.length )  + " conn_elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Associated Other Side: rel.Numb = 26
            // Link Object: Anchor On Segment
          // Line Segment is a participating class in association: rel.Numb = 7
             // Object: Line Segment
    class LineSegment_c_test22201_c implements ClassQueryInterface_c
    {
	  LineSegment_c_test22201_c( java.util.UUID            p22202 ) {
	  m_p22202 = p22202;
	  }
	  private java.util.UUID             m_p22202; 
	  public boolean evaluate (Object candidate)
	  {
	      LineSegment_c selected = (LineSegment_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPrevious_elementid().equals(m_p22202));
	      return retval;
	  }
    }

    LineSegment_c [] objs22200 = 
    LineSegment_c.LineSegmentInstances(modelRoot, new LineSegment_c_test22201_c(getElementid())) ;

    if ( (  (objs22200.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 7: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22200.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 7: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22200.length )  , e); 
      }
      retval = false;

    }

          // Line Segment is a participating class in association: rel.Numb = 5
             // Object: Connector
    class Connector_c_test22204_c implements ClassQueryInterface_c
    {
	  Connector_c_test22204_c( java.util.UUID            p22205 ) {
	  m_p22205 = p22205;
	  }
	  private java.util.UUID             m_p22205; 
	  public boolean evaluate (Object candidate)
	  {
	      Connector_c selected = (Connector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAssoc_elementid().equals(m_p22205));
	      return retval;
	  }
    }

    Connector_c [] objs22203 = 
    Connector_c.ConnectorInstances(modelRoot, new Connector_c_test22204_c(getElementid())) ;

    if ( (  (objs22203.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 5: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22203.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 5: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22203.length )  , e); 
      }
      retval = false;

    }

          // Line Segment is a participating class in association: rel.Numb = 106
             // Object: Connector Tool
    class ConnectorTool_c_test22207_c implements ClassQueryInterface_c
    {
	  ConnectorTool_c_test22207_c( java.util.UUID            p22208 ) {
	  m_p22208 = p22208;
	  }
	  private java.util.UUID             m_p22208; 
	  public boolean evaluate (Object candidate)
	  {
	      ConnectorTool_c selected = (ConnectorTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCurrent_seg_elementid().equals(m_p22208));
	      return retval;
	  }
    }

    ConnectorTool_c [] objs22206 = 
    ConnectorTool_c.ConnectorToolInstances(modelRoot, new ConnectorTool_c_test22207_c(getElementid())) ;

    if ( (  (objs22206.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Line Segment", //$NON-NLS-1$
           "Consistency: Object: Line Segment: Association: 106: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22206.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Line Segment: Association: 106: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22206.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  boolean      Isselected()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Isselected") ; 
               final ModelRoot modelRoot = getModelRoot();
GraphicalElement_c v_seg_con_elem = GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(this));


return v_seg_con_elem.Isselected();



   } // End isSelected
  public  boolean      Isoververtex(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Isoververtex") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Isoverstart(			    
p_X			    
,p_Y)) )
{

return true;



}

else if ( (Isoverend(			    
p_X			    
,p_Y)) )
{

return true;



}

return false;



   } // End isOverVertex
  public  boolean      Isoverstart(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Isoverstart") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(this)));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);


Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(this);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


return Gr_c.Iswithinhotspot(			    
(int)(Gr_c.Scale(			    
p_X) + v_diagram.getViewportx())			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(Gr_c.Scale(			    
p_Y) + v_diagram.getViewporty())			    
,(int)(v_segmentStart.getPositiony()));



   } // End isOverStart
  public  boolean      Isoverend(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Isoverend") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(this)));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


return Gr_c.Iswithinhotspot(			    
(int)(Gr_c.Scale(			    
p_X) + v_diagram.getViewportx())			    
,(int)(v_segmentEnd.getPositionx())			    
,(int)(Gr_c.Scale(			    
p_Y) + v_diagram.getViewporty())			    
,(int)(v_segmentEnd.getPositiony()));



   } // End isOverEnd
  public  void Move(final boolean      p_Snaptogrid,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Move") ; 
               final ModelRoot modelRoot = getModelRoot();
Movestart(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;


Moveend(			    
p_Snaptogrid			    
,p_Xdelta			    
,p_Ydelta ) ;



   } // End move
  public  void Movestart(final boolean      p_Snaptogrid,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Movestart") ; 
               final ModelRoot modelRoot = getModelRoot();
Connector_c v_con = Connector_c.getOneGD_CONOnR6(this);


Waypoint_c v_selfStart = Waypoint_c.getOneDIM_WAYOnR21(this);


Waypoint_c v_selfEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


int          v_deltaX = p_Xdelta ;


int          v_deltaY = p_Ydelta ;


GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(v_con);


if ( (v_con.Isstartselected() && v_con.Isendselected()) )
{

Moveattachedconnectors(			    
v_deltaX			    
,v_deltaY ) ;



}

if ( (getPrevious_elementid().equals(Os_c.Null_unique_id())) )
{

  class FloatingText_test21566_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		FloatingText_c selected = (FloatingText_c)candidate;
		return selected.getEnd() == End_c.Start ;
	}
  }
FloatingText_c v_endText = FloatingText_c.getOneGD_CTXTOnR8(Connector_c.getManyGD_CONsOnR6(this), new FloatingText_test21566_c());


if ( (  (v_endText != null)) )
{

if (v_endText != null) {
v_endText.Move(			    
v_deltaX			    
,v_deltaY ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Graphconnector_c v_anchor = Graphconnector_c.getOneDIM_CONOnR320(Graphedge_c.getOneDIM_EDOnR20(Connector_c.getOneGD_CONOnR6(this)));


if ( (  (v_anchor != null)) )
{

if (v_anchor != null) {
  v_anchor.setPositionx( v_anchor.getPositionx() + v_deltaX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_anchor != null) {
  v_anchor.setPositiony( v_anchor.getPositiony() + v_deltaY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}

Movemiddletext(			    
v_deltaX			    
,v_deltaY ) ;


if (v_selfStart != null) {
  v_selfStart.setPositionx( v_selfStart.getPositionx() + v_deltaX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_selfStart != null) {
  v_selfStart.setPositiony( v_selfStart.getPositiony() + v_deltaY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



   } // End moveStart
  public  void Moveend(final boolean      p_Snaptogrid,final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Moveend") ; 
               final ModelRoot modelRoot = getModelRoot();
Connector_c v_con = Connector_c.getOneGD_CONOnR6(this);


Waypoint_c v_selfStart = Waypoint_c.getOneDIM_WAYOnR21(this);


Waypoint_c v_selfEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


int          v_deltaX = p_Xdelta ;


int          v_deltaY = p_Ydelta ;


LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(this);


if ( (  (v_nextSegment == null)) )
{

  class FloatingText_test21567_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		FloatingText_c selected = (FloatingText_c)candidate;
		return selected.getEnd() == End_c.End ;
	}
  }
FloatingText_c v_endText = FloatingText_c.getOneGD_CTXTOnR8(Connector_c.getManyGD_CONsOnR6(this), new FloatingText_test21567_c());


if ( (  (v_endText != null)) )
{

if (v_endText != null) {
v_endText.Move(			    
v_deltaX			    
,v_deltaY ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Graphconnector_c v_anchor = Graphconnector_c.getOneDIM_CONOnR321(Graphedge_c.getOneDIM_EDOnR20(Connector_c.getOneGD_CONOnR6(this)));


if ( (  (v_anchor != null)) )
{

if (v_anchor != null) {
  v_anchor.setPositionx( v_anchor.getPositionx() + v_deltaX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_anchor != null) {
  v_anchor.setPositiony( v_anchor.getPositiony() + v_deltaY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}

Movemiddletext(			    
v_deltaX			    
,v_deltaY ) ;


if (v_selfEnd != null) {
  v_selfEnd.setPositionx( v_selfEnd.getPositionx() + v_deltaX) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_selfEnd != null) {
  v_selfEnd.setPositiony( v_selfEnd.getPositiony() + v_deltaY) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



   } // End moveEnd
  public  boolean      Isover(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Isover") ; 
               final ModelRoot modelRoot = getModelRoot();
Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(this);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


return Gr_c.Isover(			    
Gr_c.Gethotspotsize()			    
,p_X			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,p_Y			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony()));



   } // End isOver
  public  boolean      Ismiddlesegment()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Ismiddlesegment") ; 
               final ModelRoot modelRoot = getModelRoot();
LineSegment_c [] v_segs = LineSegment_c.getManyGD_LSsOnR6(Connector_c.getManyGD_CONsOnR6(this));


int          v_count = 0 ;


LineSegment_c  v_seg = null;
for ( int i21353 = 0; i21353 < v_segs.length; i21353++)
{
  v_seg = v_segs[i21353] ;

if ( (v_seg.getElementid().equals(getElementid())) )
{

break;



}

v_count = v_count + 1 ;



}

int          v_total_segs =   (v_segs.length) ;


int          v_halfway = v_total_segs / 2 ;


return v_count == v_halfway;



   } // End isMiddleSegment
  public  boolean      Intersectswith(final int          p_X1,final int          p_X2,final int          p_Y1,final int          p_Y2)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Intersectswith") ; 
               final ModelRoot modelRoot = getModelRoot();
int          v_XIntersect = 0 ;


int          v_YIntersect = 0 ;


boolean      v_intersect_found = false ;


int          v_minX = p_X1 ;


int          v_maxX = p_X2 ;


if ( (v_minX > v_maxX) )
{

int          v_temp = v_minX ;


v_minX = v_maxX ;


v_maxX = v_temp ;



}

int          v_minY = p_Y1 ;


int          v_maxY = p_Y2 ;


if ( (v_minY > v_maxY) )
{

int          v_temp = v_minY ;


v_minY = v_maxY ;


v_maxY = v_temp ;



}

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(this);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


float        v_segMinX = v_segmentStart.getPositionx() ;


float        v_segMaxX = v_segmentEnd.getPositionx() ;


if ( (v_segMinX > v_segMaxX) )
{

float        v_temp = v_segMinX ;


v_segMinX = v_segMaxX ;


v_segMaxX = v_temp ;



}

float        v_segMinY = v_segmentStart.getPositiony() ;


float        v_segMaxY = v_segmentEnd.getPositiony() ;


if ( (v_segMinY > v_segMaxY) )
{

float        v_temp = v_segMinY ;


v_segMinY = v_segMaxY ;


v_segMaxY = v_temp ;



}

v_XIntersect = Gr_c.Getxintersect(			    
p_X1			    
,p_X2			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,p_Y1			    
,p_Y2			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


v_YIntersect = Gr_c.Getyintersect(			    
p_X1			    
,p_X2			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,p_Y1			    
,p_Y2			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


if ( ((v_XIntersect >= v_minX && v_XIntersect <= v_maxX) && (v_XIntersect >= v_segMinX && v_XIntersect <= v_segMaxX)) )
{

if ( ((v_YIntersect >= v_minY && v_YIntersect <= v_maxY) && (v_YIntersect >= v_segMinY && v_YIntersect <= v_segMaxY)) )
{

return true;



}


}

return false;



   } // End intersectsWith
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Waypoint_c v_start_way = Waypoint_c.getOneDIM_WAYOnR21(this);


if ( (  (v_start_way != null)) )
{

this.unrelateAcrossR21From(v_start_way);



}

Waypoint_c v_end_way = Waypoint_c.getOneDIM_WAYOnR22(this);


if ( (  (v_end_way != null)) )
{

this.unrelateAcrossR22From(v_end_way);



}

Connector_c v_conn = Connector_c.getOneGD_CONOnR5(this);


if ( (  (v_conn != null)) )
{

this.unrelateAcrossR5From(v_conn);



}

v_conn = Connector_c.getOneGD_CONOnR6(this);


if ( (  (v_conn != null)) )
{

this.unrelateAcrossR6From(v_conn);



}

ConnectorTool_c v_tool = ConnectorTool_c.getOneCT_CTLOnR106(this);


if ( (  (v_tool != null)) )
{

this.unrelateAcrossR106From(v_tool);



}

LineSegment_c v_next_seg = LineSegment_c.getOneGD_LSOnR7Precedes(this);


LineSegment_c v_prior_seg = LineSegment_c.getOneGD_LSOnR7Follows(this);


if ( (  (v_next_seg != null) &&   (v_prior_seg != null)) )
{

this.unrelateAcrossR7FromPrecedes(v_next_seg);


if (v_prior_seg != null) {
v_prior_seg.unrelateAcrossR7FromPrecedes(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_prior_seg != null) {
  v_prior_seg.relateAcrossR7ToPrecedes(v_next_seg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

else
{

if ( (  (v_prior_seg != null) &&   (v_next_seg == null)) )
{

if (v_prior_seg != null) {
v_prior_seg.unrelateAcrossR7FromPrecedes(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

else
{

this.unrelateAcrossR7FromPrecedes(v_next_seg);



}


}

AnchorOnSegment_c [] v_aoses = AnchorOnSegment_c.getManyGD_AOSsOnR26(this);


AnchorOnSegment_c  v_aose = null;
for ( int i21354 = 0; i21354 < v_aoses.length; i21354++)
{
  v_aose = v_aoses[i21354] ;

Graphconnector_c v_gcon = Graphconnector_c.getOneDIM_CONOnR26(v_aose);


if ( (  (v_gcon != null)) )
{

if (v_aose != null) {
v_aose.unrelateAcrossR26From( this ) ; v_aose.unrelateAcrossR26From( v_gcon ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


Graphedge_c [] v_startEdges = Graphedge_c.getManyDIM_EDsOnR320(v_gcon);


Graphedge_c  v_startEdge = null;
for ( int i21355 = 0; i21355 < v_startEdges.length; i21355++)
{
  v_startEdge = v_startEdges[i21355] ;

if (v_startEdge != null) {
v_startEdge.unrelateAcrossR320From(v_gcon);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

Graphedge_c [] v_endEdges = Graphedge_c.getManyDIM_EDsOnR321(v_gcon);


Graphedge_c  v_endEdge = null;
for ( int i21356 = 0; i21356 < v_endEdges.length; i21356++)
{
  v_endEdge = v_endEdges[i21356] ;

if (v_endEdge != null) {
v_endEdge.unrelateAcrossR321From(v_gcon);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_gcon != null) {
v_gcon.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if (v_aose != null) {
// get the location of this element in the instance list
// before deleting
if ( v_aose.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_aose));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Updateend(final int          p_X,final int          p_Y)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Updateend") ; 
               final ModelRoot modelRoot = getModelRoot();
Model_c v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(Connector_c.getOneGD_CONOnR6(this)));


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


Waypoint_c v_selfEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


if (v_selfEnd != null) {
  v_selfEnd.setPositionx( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,true			    
,(Gr_c.Scale(			    
p_X) + v_diagram.getViewportx()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_selfEnd != null) {
  v_selfEnd.setPositiony( Ooaofgraphics.Roundtogridsnappoint(modelRoot			    
,true			    
,(Gr_c.Scale(			    
p_Y) + v_diagram.getViewporty()))) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



   } // End updateEnd
  public  int          Getintersect(final int  p_Axis,final boolean      p_Testinfinite,final int          p_X1,final int          p_X2,final int          p_Y1,final int          p_Y2)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Getintersect") ; 
               final ModelRoot modelRoot = getModelRoot();
int          v_XIntersect = 0 ;


int          v_YIntersect = 0 ;


boolean      v_intersect_found = false ;


int          v_minX = p_X1 ;


int          v_maxX = p_X2 ;


if ( (v_minX > v_maxX) )
{

int          v_temp = v_minX ;


v_minX = v_maxX ;


v_maxX = v_temp ;



}

int          v_minY = p_Y1 ;


int          v_maxY = p_Y2 ;


if ( (v_minY > v_maxY) )
{

int          v_temp = v_minY ;


v_minY = v_maxY ;


v_maxY = v_temp ;



}

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(this);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(this);


float        v_segMinX = v_segmentStart.getPositionx() ;


float        v_segMaxX = v_segmentEnd.getPositionx() ;


if ( (v_segMinX > v_segMaxX) )
{

float        v_temp = v_segMinX ;


v_segMinX = v_segMaxX ;


v_segMaxX = v_temp ;



}

float        v_segMinY = v_segmentStart.getPositiony() ;


float        v_segMaxY = v_segmentEnd.getPositiony() ;


if ( (v_segMinY > v_segMaxY) )
{

float        v_temp = v_segMinY ;


v_segMinY = v_segMaxY ;


v_segMaxY = v_temp ;



}

v_XIntersect = Gr_c.Getxintersect(			    
p_X1			    
,p_X2			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,p_Y1			    
,p_Y2			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


v_YIntersect = Gr_c.Getyintersect(			    
p_X1			    
,p_X2			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,p_Y1			    
,p_Y2			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


if ( ((v_XIntersect >= v_minX && v_XIntersect <= v_maxX) && (v_XIntersect >= v_segMinX && v_XIntersect <= v_segMaxX)) )
{

if ( ((v_YIntersect >= v_minY && v_YIntersect <= v_maxY) && (v_YIntersect >= v_segMinY && v_YIntersect <= v_segMaxY)) )
{

v_intersect_found = true ;



}


}

if ( (v_intersect_found == false) )
{

v_intersect_found = Isover(			    
p_X1			    
,p_Y1) ;


if ( (  !v_intersect_found) )
{

v_intersect_found = Isover(			    
p_X2			    
,p_Y2) ;



}

if ( (v_XIntersect == 0) && (v_YIntersect == 0) && (v_intersect_found) )
{

float        v_distanceToSFS = Ooaofgraphics.Getdistance(modelRoot			    
,p_X1			    
,v_segmentStart.getPositionx()			    
,p_Y1			    
,v_segmentStart.getPositiony()) ;


float        v_distanceToSFE = Ooaofgraphics.Getdistance(modelRoot			    
,p_X2			    
,v_segmentStart.getPositionx()			    
,p_Y2			    
,v_segmentStart.getPositiony()) ;


float        v_distanceToEFS = Ooaofgraphics.Getdistance(modelRoot			    
,p_X1			    
,v_segmentEnd.getPositionx()			    
,p_Y1			    
,v_segmentEnd.getPositiony()) ;


float        v_distanceToEFE = Ooaofgraphics.Getdistance(modelRoot			    
,p_X2			    
,v_segmentEnd.getPositionx()			    
,p_Y2			    
,v_segmentEnd.getPositiony()) ;


int          v_minDist = Ooaofgraphics.Min(modelRoot			    
,(int)(v_distanceToSFS)			    
,(int)(v_distanceToSFE)) ;


v_minDist = Ooaofgraphics.Min(modelRoot			    
,v_minDist			    
,(int)(v_distanceToEFS)) ;


v_minDist = Ooaofgraphics.Min(modelRoot			    
,v_minDist			    
,(int)(v_distanceToEFE)) ;


int  v_closestEnd = End_c.None ;


if ( (v_minDist == v_distanceToSFS || v_minDist == v_distanceToEFS) )
{

v_closestEnd = End_c.Start ;



}

else
{

v_closestEnd = End_c.End ;



}

if ( (v_closestEnd == End_c.Start) )
{

v_XIntersect = (int)(v_segmentStart.getPositionx()) ;


v_YIntersect = (int)(v_segmentStart.getPositiony()) ;



}

else
{

v_XIntersect = (int)(v_segmentEnd.getPositionx()) ;


v_YIntersect = (int)(v_segmentEnd.getPositiony()) ;



}


}


}

if ( (  !v_intersect_found) && (p_Testinfinite) )
{

if ( (p_Axis == Axis_c.X) )
{

return v_XIntersect;



}

else
{

return v_YIntersect;



}


}

if ( (v_intersect_found) )
{

if ( (p_Axis == Axis_c.X) )
{

return v_XIntersect;



}

else
{

return v_YIntersect;



}


}

else
{

return 0;



}


   } // End getIntersect
  public  void Movemiddletext(final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Movemiddletext") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Ismiddlesegment()) )
{

  class FloatingText_test21568_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		FloatingText_c selected = (FloatingText_c)candidate;
		return selected.getEnd() == End_c.Middle ;
	}
  }
FloatingText_c v_middleText = FloatingText_c.getOneGD_CTXTOnR8(Connector_c.getManyGD_CONsOnR6(this), new FloatingText_test21568_c());


if ( (  (v_middleText != null)) )
{

if (v_middleText != null) {
v_middleText.Move(			    
p_Xdelta / 2.0f			    
,p_Ydelta / 2.0f ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End moveMiddleText
  public  void Moveattachedconnectors(final int          p_Xdelta,final int          p_Ydelta)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Line Segment", " Operation entered: LineSegment::Moveattachedconnectors") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphedge_c [] v_links = Graphedge_c.getManyDIM_EDsOnR320(Graphconnector_c.getManyDIM_CONsOnR26(AnchorOnSegment_c.getManyGD_AOSsOnR26(this)));


Graphedge_c  v_link = null;
for ( int i21357 = 0; i21357 < v_links.length; i21357++)
{
  v_link = v_links[i21357] ;

Connector_c v_linkConnector = Connector_c.getOneGD_CONOnR20(v_link);


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(v_linkConnector);


LineSegment_c  v_segment = null;
for ( int i21358 = 0; i21358 < v_segments.length; i21358++)
{
  v_segment = v_segments[i21358] ;

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


WaypointInMove_c v_startInMove = WaypointInMove_c.getOneGD_WIMOnR24(v_segmentStart);


WaypointInMove_c v_endInMove = WaypointInMove_c.getOneGD_WIMOnR24(v_segmentEnd);


if ( (  (v_startInMove == null) &&   (v_endInMove == null)) )
{

LineSegment_c v_prevSegment = LineSegment_c.getOneGD_LSOnR7Follows(v_segment);


if ( (  (v_prevSegment == null)) )
{

if (v_linkConnector != null) {
v_linkConnector.Movestart(			    
false			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


}

v_links = Graphedge_c.getManyDIM_EDsOnR321(Graphconnector_c.getManyDIM_CONsOnR26(AnchorOnSegment_c.getManyGD_AOSsOnR26(this)));


for ( int i21359 = 0; i21359 < v_links.length; i21359++)
{
  v_link = v_links[i21359] ;

Connector_c v_linkConnector = Connector_c.getOneGD_CONOnR20(v_link);


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(v_linkConnector);


LineSegment_c  v_segment = null;
for ( int i21360 = 0; i21360 < v_segments.length; i21360++)
{
  v_segment = v_segments[i21360] ;

Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


WaypointInMove_c v_startInMove = WaypointInMove_c.getOneGD_WIMOnR24(v_segmentStart);


WaypointInMove_c v_endInMove = WaypointInMove_c.getOneGD_WIMOnR24(v_segmentEnd);


if ( (  (v_startInMove == null) &&   (v_endInMove == null)) )
{

LineSegment_c v_nextSegment = LineSegment_c.getOneGD_LSOnR7Precedes(v_segment);


if ( (  (v_nextSegment == null)) )
{

if (v_linkConnector != null) {
v_linkConnector.Moveend(			    
false			    
,p_Xdelta			    
,p_Ydelta ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


}


   } // End moveAttachedConnectors

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Line Segment
