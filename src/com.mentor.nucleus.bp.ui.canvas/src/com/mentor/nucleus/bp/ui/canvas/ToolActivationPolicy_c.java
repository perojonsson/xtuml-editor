      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ToolActivationPolicy_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_TOOL_ACTIVATION_POLICY extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}
  class EV_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED extends EV_TOOL_ACTIVATION_POLICY
  {
    // supplemental event data
    public java.util.UUID         edi_toolid ;
    static final int EVCD_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED = 1 ;
    public final int getEvtcode()
    {
      return EVCD_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED ;
    }
  }
  class EV_TOOL_ACTIVATION_POLICY_DONE extends EV_TOOL_ACTIVATION_POLICY
  {
    // supplemental event data
    static final int EVCD_TOOL_ACTIVATION_POLICY_DONE = 2 ;
    public final int getEvtcode()
    {
      return EVCD_TOOL_ACTIVATION_POLICY_DONE ;
    }
  }
  class EV_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED extends EV_TOOL_ACTIVATION_POLICY
  {
    // supplemental event data
    public java.util.UUID         edi_toolid ;
    static final int EVCD_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED = 3 ;
    public final int getEvtcode()
    {
      return EVCD_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED ;
    }
  }

public class ToolActivationPolicy_c extends NonRootModelElement implements timerClient_c, ActiveObject_c, IAdaptable, Cloneable
{
  // Public Constructors
  public ToolActivationPolicy_c(ModelRoot modelRoot,
       java.util.UUID         p_m_toolactivationpolicyid,
       java.util.UUID         p_m_tool_id,
       java.util.UUID         p_m_diagramid)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_toolactivationpolicyid = IdAssigner.preprocessUUID(p_m_toolactivationpolicyid);
       //extract 28 bit value only            
       m_toolactivationpolicyidLongBased = 0xfffffff & p_m_toolactivationpolicyid.getLeastSignificantBits();
       // default value for m_current_state
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
        
    // register with event queue poller
    Activepoller_c.register(this) ;
    setUniqueId(m_toolactivationpolicyid);
    Object [] key = {m_toolactivationpolicyid};
    addInstanceToMap(key);
  }
  static public ToolActivationPolicy_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_toolactivationpolicyid,
       java.util.UUID         p_m_tool_id,
       java.util.UUID         p_m_diagramid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);
      ToolActivationPolicy_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_toolactivationpolicyid};
          new_inst = (ToolActivationPolicy_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_toolactivationpolicyid = IdAssigner.preprocessUUID(p_m_toolactivationpolicyid);
       //extract 28 bit value only            
       new_inst.m_toolactivationpolicyidLongBased = 0xfffffff & p_m_toolactivationpolicyid.getLeastSignificantBits();
       // default value for m_current_state
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ToolActivationPolicy_c(modelRoot,
p_m_toolactivationpolicyid,
p_m_tool_id,
p_m_diagramid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ToolActivationPolicy_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_toolactivationpolicyid,
       java.util.UUID         p_m_tool_id,
       java.util.UUID         p_m_diagramid){
    InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);
    ToolActivationPolicy_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_toolactivationpolicyid
            };
        source = (ToolActivationPolicy_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_toolactivationpolicyid = IdAssigner.preprocessUUID(p_m_toolactivationpolicyid);
       //extract 28 bit value only            
       source.m_toolactivationpolicyidLongBased = 0xfffffff & p_m_toolactivationpolicyid.getLeastSignificantBits();
       // default value for m_current_state
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ToolActivationPolicy_c new_inst = new ToolActivationPolicy_c(modelRoot,
p_m_toolactivationpolicyid,
p_m_tool_id,
p_m_diagramid
);
    return new_inst;
  }
  public ToolActivationPolicy_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_toolactivationpolicyid = idAssigner.createUUID();
     m_tool_id = IdAssigner.NULL_UUID;   
     m_diagramid = IdAssigner.NULL_UUID;   
    setUniqueId(m_toolactivationpolicyid);
    Object [] key = {m_toolactivationpolicyid};
    addInstanceToMap(key);
    // register with event queue poller
    Activepoller_c.register(this) ;
  }

  public Object getInstanceKey() {
    Object [] key =  {m_toolactivationpolicyid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_toolactivationpolicyid !=  p_newKey ){
	
		m_toolactivationpolicyid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  


  // Run Entry Point
  public boolean poll()
  {
      if (!eventQueue.isEmpty() || !selfEventQueue.isEmpty())
      { // an event queue is not empty
        procEvent() ;
        return true;
      } else {
        return false;
      }
  }

  public boolean equals (Object elem) {
     if (!(elem instanceof ToolActivationPolicy_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ToolActivationPolicy_c)) {
           return false;
       }
       
       ToolActivationPolicy_c me = (ToolActivationPolicy_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getToolactivationpolicyid()) || IdAssigner.NULL_UUID.equals(((ToolActivationPolicy_c)elem).getToolactivationpolicyid())) && this != elem)) {
      	return false;
      }
      if (!getToolactivationpolicyid().equals(((ToolActivationPolicy_c)elem).getToolactivationpolicyid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ToolActivationPolicy_c)) {
           return false;
       }
       
       ToolActivationPolicy_c me = (ToolActivationPolicy_c)elem;
      if (!getToolactivationpolicyid().equals(((ToolActivationPolicy_c)elem).getToolactivationpolicyid())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_toolactivationpolicyid ;
  private long m_toolactivationpolicyidLongBased ;
  private java.util.UUID         m_tool_id ;
  private java.util.UUID         m_diagramid ;
      
// declare association references from this class
  
  
    
// referring navigation

Model_c GovernsToolActivationForModel ;
public void relateAcrossR108To(Model_c target)
{
	relateAcrossR108To(target, true);
}
public void relateAcrossR108To(Model_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == GovernsToolActivationForModel) return;  // already related

    if ( GovernsToolActivationForModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (GovernsToolActivationForModel != null) {
    
        GovernsToolActivationForModel.clearBackPointerR108To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ToolActivationPolicy_c.relateAcrossR108To(Model_c target)", 
			"Relate performed across R108 from Tool Activation Policy to Model without unrelate of prior instance.");  
		}
    }
                
    	GovernsToolActivationForModel = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDiagramid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_diagramid = target.getDiagramidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR108To(this);
        target.addRef();
    }
}
public void unrelateAcrossR108From(Model_c target)
{
	unrelateAcrossR108From(target, true);
}
public void unrelateAcrossR108From(Model_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (GovernsToolActivationForModel == null) return;  // already unrelated
	
	if (target != GovernsToolActivationForModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R108", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR108To(this);
    }
    

      if(GovernsToolActivationForModel != null) {
      
        m_diagramid = GovernsToolActivationForModel.getDiagramid();
        if(IdAssigner.NULL_UUID.equals(m_diagramid))
        {
          m_diagramid = GovernsToolActivationForModel.getDiagramidCachedValue();
        }       
        GovernsToolActivationForModel = null ;
        target.removeRef();
    }
}

  
    
      
public static ToolActivationPolicy_c getOneCT_ACTOnR108(Model_c [] targets)
{
    return getOneCT_ACTOnR108(targets, null);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR108(Model_c [] targets, ClassQueryInterface_c test)
{
    ToolActivationPolicy_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_ACTOnR108(targets[i], test);
        }
    }

    return ret_val;
}

public static ToolActivationPolicy_c getOneCT_ACTOnR108(Model_c target)
{
  return getOneCT_ACTOnR108(target, null);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR108(Model_c target, boolean loadComponent)
{
    return getOneCT_ACTOnR108(target.getModelRoot(), target, null, loadComponent);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR108(Model_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_ACTOnR108(target.getModelRoot(), target, test);
  }
  return null;
}

public static ToolActivationPolicy_c getOneCT_ACTOnR108(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test)
{
	return getOneCT_ACTOnR108(modelRoot, target, test, true);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR108(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_ACTOnR108(modelRoot,target,test);
}
private static ToolActivationPolicy_c find_getOneCT_ACTOnR108(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ToolActivationPolicy_c source = (ToolActivationPolicy_c)target.backPointer_EmploysToolActivationPolicyEmploys_R108;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR108(Model_c [] targets)
{
  return getManyCT_ACTsOnR108(targets, null);
}
public static ToolActivationPolicy_c [] getManyCT_ACTsOnR108(Model_c [] targets, boolean loadComponent)
{
  return getManyCT_ACTsOnR108(targets, null, loadComponent);
}
public static ToolActivationPolicy_c [] getManyCT_ACTsOnR108(Model_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_ACTsOnR108(targets, test, true);
}

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR108(Model_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ToolActivationPolicy_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ToolActivationPolicy_c source = (ToolActivationPolicy_c)targets[i].backPointer_EmploysToolActivationPolicyEmploys_R108;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ToolActivationPolicy_c[] ret_set = new ToolActivationPolicy_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ToolActivationPolicy_c[0];
  }
  }

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR108(Model_c target)
{
  if (target != null) {
    Model_c [] targetArray = new Model_c[1];
    targetArray[0] = target;
    return getManyCT_ACTsOnR108(targetArray);
  } else {
    ToolActivationPolicy_c [] result = new ToolActivationPolicy_c [0] ;
  return result ;
}
}

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR108(Model_c target, boolean loadComponent)
{
  if (target != null) {
    Model_c [] targetArray = new Model_c[1];
    targetArray[0] = target;
    return getManyCT_ACTsOnR108(targetArray, loadComponent);
  } else {
    ToolActivationPolicy_c [] result = new ToolActivationPolicy_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ModelTool_c KnowsAsPreviouslyActiveToolModelTool ;
public void relateAcrossR109To(ModelTool_c target)
{
	relateAcrossR109To(target, true);
}
public void relateAcrossR109To(ModelTool_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == KnowsAsPreviouslyActiveToolModelTool) return;  // already related

    if ( KnowsAsPreviouslyActiveToolModelTool != target ) {
    
    Object oldKey = getInstanceKey();

    if (KnowsAsPreviouslyActiveToolModelTool != null) {
    
        KnowsAsPreviouslyActiveToolModelTool.clearBackPointerR109To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ToolActivationPolicy_c.relateAcrossR109To(ModelTool_c target)", 
			"Relate performed across R109 from Tool Activation Policy to Model Tool without unrelate of prior instance.");  
		}
    }
                
    	KnowsAsPreviouslyActiveToolModelTool = target ;
        m_tool_id = target.getTool_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR109To(this);
        target.addRef();
    }
}
public void unrelateAcrossR109From(ModelTool_c target)
{
	unrelateAcrossR109From(target, true);
}
public void unrelateAcrossR109From(ModelTool_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (KnowsAsPreviouslyActiveToolModelTool == null) return;  // already unrelated
	
	if (target != KnowsAsPreviouslyActiveToolModelTool) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R109", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR109To(this);
    }
    

      if(KnowsAsPreviouslyActiveToolModelTool != null) {
      
        m_tool_id = KnowsAsPreviouslyActiveToolModelTool.getTool_id();
        KnowsAsPreviouslyActiveToolModelTool = null ;
        target.removeRef();
    }
}

  
    
      
public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelTool_c [] targets)
{
    return getOneCT_ACTOnR109(targets, null);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelTool_c [] targets, ClassQueryInterface_c test)
{
    ToolActivationPolicy_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_ACTOnR109(targets[i], test);
        }
    }

    return ret_val;
}

public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelTool_c target)
{
  return getOneCT_ACTOnR109(target, null);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelTool_c target, boolean loadComponent)
{
    return getOneCT_ACTOnR109(target.getModelRoot(), target, null, loadComponent);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelTool_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_ACTOnR109(target.getModelRoot(), target, test);
  }
  return null;
}

public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test)
{
	return getOneCT_ACTOnR109(modelRoot, target, test, true);
}

public static ToolActivationPolicy_c getOneCT_ACTOnR109(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_ACTOnR109(modelRoot,target,test);
}
private static ToolActivationPolicy_c find_getOneCT_ACTOnR109(ModelRoot modelRoot, ModelTool_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ToolActivationPolicy_c source = (ToolActivationPolicy_c)target.backPointer_ToolActivationPolicy_R109;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR109(ModelTool_c [] targets)
{
  return getManyCT_ACTsOnR109(targets, null);
}
public static ToolActivationPolicy_c [] getManyCT_ACTsOnR109(ModelTool_c [] targets, boolean loadComponent)
{
  return getManyCT_ACTsOnR109(targets, null, loadComponent);
}
public static ToolActivationPolicy_c [] getManyCT_ACTsOnR109(ModelTool_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_ACTsOnR109(targets, test, true);
}

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR109(ModelTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ToolActivationPolicy_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ToolActivationPolicy_c source = (ToolActivationPolicy_c)targets[i].backPointer_ToolActivationPolicy_R109;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ToolActivationPolicy_c[] ret_set = new ToolActivationPolicy_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ToolActivationPolicy_c[0];
  }
  }

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR109(ModelTool_c target)
{
  if (target != null) {
    ModelTool_c [] targetArray = new ModelTool_c[1];
    targetArray[0] = target;
    return getManyCT_ACTsOnR109(targetArray);
  } else {
    ToolActivationPolicy_c [] result = new ToolActivationPolicy_c [0] ;
  return result ;
}
}

public static ToolActivationPolicy_c [] getManyCT_ACTsOnR109(ModelTool_c target, boolean loadComponent)
{
  if (target != null) {
    ModelTool_c [] targetArray = new ModelTool_c[1];
    targetArray[0] = target;
    return getManyCT_ACTsOnR109(targetArray, loadComponent);
  } else {
    ToolActivationPolicy_c [] result = new ToolActivationPolicy_c [0] ;
  return result ;
}
}



      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (GovernsToolActivationForModel == null) {          
      // R108
      Model_c relInst22422 = (Model_c) baseRoot.getInstanceList(Model_c.class).get(new Object[] {m_diagramid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22422 == null) {
      			relInst22422 = (Model_c) Ooaofooa.getDefaultInstance().getInstanceList(Model_c.class).get(new Object[] {m_diagramid});
      		}
			//synchronized
      if ( relInst22422 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22422) && !isProxy())) {
	      relInst22422.relateAcrossR108To(this, notifyChanges);
	  }
	  }
	}
	          

	if (KnowsAsPreviouslyActiveToolModelTool == null) {          
      // R109
      ModelTool_c relInst22423 = (ModelTool_c) baseRoot.getInstanceList(ModelTool_c.class).get(new Object[] {m_tool_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22423 == null) {
      			relInst22423 = (ModelTool_c) Ooaofooa.getDefaultInstance().getInstanceList(ModelTool_c.class).get(new Object[] {m_tool_id});
      		}
			//synchronized
      if ( relInst22423 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22423) && !isProxy())) {
	      relInst22423.relateAcrossR109To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R108
      // GD_MD
		  inst=GovernsToolActivationForModel;
			unrelateAcrossR108From(GovernsToolActivationForModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R109
      // CT_MTL
		  inst=KnowsAsPreviouslyActiveToolModelTool;
			unrelateAcrossR109From(KnowsAsPreviouslyActiveToolModelTool, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ToolActivationPolicy_c inst = (ToolActivationPolicy_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ToolActivationPolicy_c ToolActivationPolicyInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ToolActivationPolicy_c result=findToolActivationPolicyInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static ToolActivationPolicy_c findToolActivationPolicyInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ToolActivationPolicy_c x = (ToolActivationPolicy_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static ToolActivationPolicy_c ToolActivationPolicyInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ToolActivationPolicyInstance(modelRoot,test,true);
  }
  
  public static ToolActivationPolicy_c ToolActivationPolicyInstance(ModelRoot modelRoot)
  {
	 return ToolActivationPolicyInstance(modelRoot,null,true);
  }

  public static ToolActivationPolicy_c [] ToolActivationPolicyInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(ToolActivationPolicy_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ToolActivationPolicy_c x = (ToolActivationPolicy_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ToolActivationPolicy_c[] ret_set = new ToolActivationPolicy_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ToolActivationPolicy_c[0];
			}		
		} 
  }
  public static ToolActivationPolicy_c [] ToolActivationPolicyInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ToolActivationPolicyInstances(modelRoot,test,true);
  }
  public static ToolActivationPolicy_c [] ToolActivationPolicyInstances(ModelRoot modelRoot)
  {
	return ToolActivationPolicyInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
    Activepoller_c.unRegister(this) ;
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Tool Activation Policy.dispose call: ";
	Model_c testR108Inst = Model_c.getOneGD_MDOnR108(this, false);

	if ( testR108Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "108 ";
	}
	ModelTool_c testR109Inst = ModelTool_c.getOneCT_MTLOnR109(this, false);

	if ( testR109Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "109 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Tool Activation Policy", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("toolactivationpolicyid")){
         return true;
      }
      if(attributeName.equals("tool_id")){
         return true;
      }
      if(attributeName.equals("diagramid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getToolactivationpolicyidLongBased()
  {
    if(m_toolactivationpolicyidLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_toolactivationpolicyid)){
    	return 0xfffffff & m_toolactivationpolicyid.getLeastSignificantBits();
    }
    return m_toolactivationpolicyidLongBased ;
  }
  public java.util.UUID getToolactivationpolicyid()
  {
    return m_toolactivationpolicyid ;
  }


  public void setToolactivationpolicyid(java.util.UUID newValue)
  {
   m_toolactivationpolicyid = IdAssigner.preprocessUUID(newValue);
  }
  public long getTool_idLongBased()
  {
    if ( KnowsAsPreviouslyActiveToolModelTool != null )
    {
      return KnowsAsPreviouslyActiveToolModelTool.getTool_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTool_id()
  {
    if ( KnowsAsPreviouslyActiveToolModelTool != null )
    {
      return KnowsAsPreviouslyActiveToolModelTool.getTool_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getTool_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_tool_id) )
      return m_tool_id;
    else
      return getTool_id();
  }
  
  public void setTool_id(java.util.UUID newValue)
  {
   m_tool_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getDiagramidLongBased()
  {
    if ( GovernsToolActivationForModel != null )
    {
      return GovernsToolActivationForModel.getDiagramidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDiagramid()
  {
    if ( GovernsToolActivationForModel != null )
    {
      return GovernsToolActivationForModel.getDiagramid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDiagramidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_diagramid) )
      return m_diagramid;
    else
      return getDiagramid();
  }
  
  public void setDiagramid(java.util.UUID newValue)
  {
   m_diagramid = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Tool Activation Policy", //$NON-NLS-1$
	  " Operation entered: Tool Activation Policy::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ToolActivationPolicy_c [] objs = ToolActivationPolicy_c.ToolActivationPolicyInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Tool Activation Policy", //$NON-NLS-1$
	  " Operation entered: Tool Activation Policy::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ToolActivationPolicy_c_test22425_c implements ClassQueryInterface_c
    {
	  ToolActivationPolicy_c_test22425_c( java.util.UUID            p22426 ) {
	  m_p22426 = p22426;
	  }
	  private java.util.UUID             m_p22426; 
	  public boolean evaluate (Object candidate)
	  {
	      ToolActivationPolicy_c selected = (ToolActivationPolicy_c) candidate;
	      boolean retval = false;
	      retval = (selected.getToolactivationpolicyid().equals(m_p22426));
	      return retval;
	  }
    }

    ToolActivationPolicy_c [] objs22424 = 
    ToolActivationPolicy_c.ToolActivationPolicyInstances(modelRoot, new ToolActivationPolicy_c_test22425_c(getToolactivationpolicyid())) ;

    if ( (  (objs22424.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Tool Activation Policy", //$NON-NLS-1$
           "Consistency: Object: Tool Activation Policy: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22424.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Tool Activation Policy: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22424.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22424.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Tool Activation Policy", //$NON-NLS-1$
           "Consistency: Object: Tool Activation Policy: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22424.length )  + " toolActivationPolicyID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Tool Activation Policy: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22424.length )  + " toolActivationPolicyID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Tool Activation Policy is a referring class in association: rel.Numb = 109
          // The participating class is: Model Tool
    class ModelTool_c_test22430_c implements ClassQueryInterface_c
    {
	  ModelTool_c_test22430_c( java.util.UUID            p22431 ) {
	  m_p22431 = p22431;
	  }
	  private java.util.UUID             m_p22431; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelTool_c selected = (ModelTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22431));
	      return retval;
	  }
    }

    ModelTool_c [] objs22429 = 
    ModelTool_c.ModelToolInstances(modelRoot, new ModelTool_c_test22430_c(getTool_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22429.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Tool Activation Policy", //$NON-NLS-1$
           "Consistency: Object: Tool Activation Policy: Association: 109: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22429.length )  + " Tool_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Tool Activation Policy: Association: 109: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22429.length )  + " Tool_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Tool Activation Policy is a referring class in association: rel.Numb = 108
          // The participating class is: Model
    class Model_c_test22433_c implements ClassQueryInterface_c
    {
	  Model_c_test22433_c( java.util.UUID            p22434 ) {
	  m_p22434 = p22434;
	  }
	  private java.util.UUID             m_p22434; 
	  public boolean evaluate (Object candidate)
	  {
	      Model_c selected = (Model_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDiagramid().equals(m_p22434));
	      return retval;
	  }
    }

    Model_c [] objs22432 = 
    Model_c.ModelInstances(modelRoot, new Model_c_test22433_c(getDiagramid())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22432.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Tool Activation Policy", //$NON-NLS-1$
           "Consistency: Object: Tool Activation Policy: Association: 108: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22432.length )  + " diagramId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Tool Activation Policy: Association: 108: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22432.length )  + " diagramId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    return retval;
  }


  public static final int
    ST_TOOL_ACTIVATION_POLICY_IDLE = 1, 
    ST_TOOL_ACTIVATION_POLICY_EVALUATING_ACTIVATION_REQUEST = 2, 
    ST_TOOL_ACTIVATION_POLICY_RECONCILING_TOOL_DEACTIVATION = 3;

   private int state = ST_TOOL_ACTIVATION_POLICY_IDLE ;
   private Vector<genericEvent_c> eventQueue = new Vector<genericEvent_c>(10,10) ;
   private Vector<genericEvent_c> selfEventQueue = new Vector<genericEvent_c>(10,10) ;

  public int get_current_state() { return state; }
    
  static final int EVCD_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED = 1 ;
   public synchronized void ActivationPermissionRequested( boolean self_directed , final java.util.UUID         p_toolid)
  {
    EV_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED incoming_event = new EV_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED() ;
    incoming_event.edi_toolid = p_toolid ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_TOOL_ACTIVATION_POLICY_DONE = 2 ;
   public synchronized void Done( boolean self_directed )
  {
    EV_TOOL_ACTIVATION_POLICY_DONE incoming_event = new EV_TOOL_ACTIVATION_POLICY_DONE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED = 3 ;
   public synchronized void ToolDeactivated( boolean self_directed , final java.util.UUID         p_toolid)
  {
    EV_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED incoming_event = new EV_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED() ;
    incoming_event.edi_toolid = p_toolid ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }

  public synchronized void takeEvent(genericEvent_c incoming_event)
  {
    eventQueue.addElement(incoming_event) ;
	notify() ;
  }

  public synchronized void procEvent()
  {
    ModelRoot modelRoot = getModelRoot();
    EV_TOOL_ACTIVATION_POLICY currentEvent ;
	if (selfEventQueue.size() != 0) {
	  currentEvent = (EV_TOOL_ACTIVATION_POLICY)selfEventQueue.firstElement() ;
	  selfEventQueue.removeElement(currentEvent) ;
	}
	else {
      currentEvent = (EV_TOOL_ACTIVATION_POLICY)eventQueue.firstElement() ;
      if (currentEvent != null) {
        eventQueue.removeElement(currentEvent) ;
	  }
	}
	if (currentEvent != null) {
      switch (currentEvent.getEvtcode())
      {
        case EVCD_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Tool Activation Policy", " Event dequeued: ToolActivationPolicy.ActivationPermissionRequested in " + state) ; 
          final EV_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED arch_event = (EV_TOOL_ACTIVATION_POLICY_ACTIVATION_PERMISSION_REQUESTED)currentEvent ;
          switch (state)
          {
          case ST_TOOL_ACTIVATION_POLICY_IDLE:
            {
  class ModelTool_test21607_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelTool_c selected = (ModelTool_c)candidate;
		return (selected.getTool_id().equals(arch_event.edi_toolid)) ;
	}
  }
ModelTool_c v_tool = ModelTool_c.getOneCT_MTLOnR100(Model_c.getManyGD_MDsOnR108(this), new ModelTool_test21607_c());


boolean      v_permitted = true ;


ScrollTool_c v_scroller = ScrollTool_c.getOneCT_SCROnR102(v_tool);


boolean      v_isScroller =   !  (v_scroller == null) ;


  class ModelTool_test21608_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelTool_c selected = (ModelTool_c)candidate;
		return (selected.getActive() == true) ;
	}
  }
ModelTool_c v_active = ModelTool_c.getOneCT_MTLOnR100(Model_c.getManyGD_MDsOnR108(this), new ModelTool_test21608_c());


if ( v_isScroller )
{

if ( v_active.getDrawing() )
{

v_permitted = false ;



}


}

if ( v_permitted )
{

if (   !  (v_active == null) )
{

// Generate event CT_MTL6:Deactivate to active
if (v_active != null) {
  v_active.Deactivate(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}


if ( v_isScroller )
{

  this.relateAcrossR109To(v_active);



}


}

// Generate event CT_MTL7:ActivationPermitted to tool
if (v_tool != null) {
  v_tool.ActivationPermitted(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else
{

// Generate event CT_MTL8:ActivationDenied to tool
if (v_tool != null) {
  v_tool.ActivationDenied(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

// Generate event CT_ACT2:Done to self
Done(true ) ;



            }
            state = ST_TOOL_ACTIVATION_POLICY_EVALUATING_ACTIVATION_REQUEST ;
            break ;
               case ST_TOOL_ACTIVATION_POLICY_EVALUATING_ACTIVATION_REQUEST:
              	// Event Ignored
               break ;
               case ST_TOOL_ACTIVATION_POLICY_RECONCILING_TOOL_DEACTIVATION:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Tool Activation Policy state = " + state + " event = CT_ACT1:Activation Permission Requested", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_TOOL_ACTIVATION_POLICY_DONE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Tool Activation Policy", " Event dequeued: ToolActivationPolicy.Done in " + state) ; 
          final EV_TOOL_ACTIVATION_POLICY_DONE arch_event = (EV_TOOL_ACTIVATION_POLICY_DONE)currentEvent ;
          switch (state)
          {
          case ST_TOOL_ACTIVATION_POLICY_EVALUATING_ACTIVATION_REQUEST:
            {

            }
            state = ST_TOOL_ACTIVATION_POLICY_IDLE ;
            break ;
          case ST_TOOL_ACTIVATION_POLICY_RECONCILING_TOOL_DEACTIVATION:
            {

            }
            state = ST_TOOL_ACTIVATION_POLICY_IDLE ;
            break ;
               case ST_TOOL_ACTIVATION_POLICY_IDLE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Tool Activation Policy state = " + state + " event = CT_ACT2:Done", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Tool Activation Policy", " Event dequeued: ToolActivationPolicy.ToolDeactivated in " + state) ; 
          final EV_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED arch_event = (EV_TOOL_ACTIVATION_POLICY_TOOL_DEACTIVATED)currentEvent ;
          switch (state)
          {
               case ST_TOOL_ACTIVATION_POLICY_EVALUATING_ACTIVATION_REQUEST:
              	// Event Ignored
               break ;
          case ST_TOOL_ACTIVATION_POLICY_IDLE:
            {
  class ModelTool_test21609_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelTool_c selected = (ModelTool_c)candidate;
		return (selected.getTool_id().equals(arch_event.edi_toolid)) ;
	}
  }
ModelTool_c v_tool = ModelTool_c.getOneCT_MTLOnR100(Model_c.getManyGD_MDsOnR108(this), new ModelTool_test21609_c());


ScrollTool_c v_scroller = ScrollTool_c.getOneCT_SCROnR102(v_tool);


if (   !  (v_scroller == null) )
{

ModelTool_c v_previous = ModelTool_c.getOneCT_MTLOnR109(this);


if (   (v_previous != null) )
{

// Generate event CT_MTL5:Activate to previous
if (v_previous != null) {
  v_previous.Activate(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}


this.unrelateAcrossR109From(v_previous);



}


}

// Generate event CT_ACT2:Done to self
Done(true ) ;



            }
            state = ST_TOOL_ACTIVATION_POLICY_RECONCILING_TOOL_DEACTIVATION ;
            break ;
               case ST_TOOL_ACTIVATION_POLICY_RECONCILING_TOOL_DEACTIVATION:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Tool Activation Policy state = " + state + " event = CT_ACT3:Tool Deactivated", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
      } // end currentEvent switch
	} // end if currentEvent valid
  } // end Tool Activation Policy procEvent

  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Tool Activation Policy
