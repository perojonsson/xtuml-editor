package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Ellipse_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ELLIPSE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Ellipse_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Ellipse_c(ModelRoot modelRoot, float p_m_centerx, float p_m_centery,
			float p_m_radiusx, float p_m_radiusy, float p_m_rotation,
			float p_m_startangle, float p_m_endangle,
			java.util.UUID p_m_elementid) {
		super(modelRoot);
		m_centerx = p_m_centerx;
		m_radiusx = p_m_radiusx;
		m_radiusy = p_m_radiusy;
		m_rotation = p_m_rotation;
		m_startangle = p_m_startangle;
		m_endangle = p_m_endangle;
		m_centery = p_m_centery;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}
	static public Ellipse_c createProxy(ModelRoot modelRoot, float p_m_centerx,
			float p_m_centery, float p_m_radiusx, float p_m_radiusy,
			float p_m_rotation, float p_m_startangle, float p_m_endangle,
			java.util.UUID p_m_elementid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);
		Ellipse_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			new_inst = (Ellipse_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_centerx = p_m_centerx;
				new_inst.m_radiusx = p_m_radiusx;
				new_inst.m_radiusy = p_m_radiusy;
				new_inst.m_rotation = p_m_rotation;
				new_inst.m_startangle = p_m_startangle;
				new_inst.m_endangle = p_m_endangle;
				new_inst.m_centery = p_m_centery;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Ellipse_c(modelRoot, p_m_centerx, p_m_centery,
					p_m_radiusx, p_m_radiusy, p_m_rotation, p_m_startangle,
					p_m_endangle, p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Ellipse_c resolveInstance(ModelRoot modelRoot,
			float p_m_centerx, float p_m_centery, float p_m_radiusx,
			float p_m_radiusy, float p_m_rotation, float p_m_startangle,
			float p_m_endangle, java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);
		Ellipse_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			source = (Ellipse_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_centerx = p_m_centerx;
				source.m_radiusx = p_m_radiusx;
				source.m_radiusy = p_m_radiusy;
				source.m_rotation = p_m_rotation;
				source.m_startangle = p_m_startangle;
				source.m_endangle = p_m_endangle;
				source.m_centery = p_m_centery;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

				return source;
			}
		}
		// there is no instance matching the id
		Ellipse_c new_inst = new Ellipse_c(modelRoot, p_m_centerx, p_m_centery,
				p_m_radiusx, p_m_radiusy, p_m_rotation, p_m_startangle,
				p_m_endangle, p_m_elementid);
		return new_inst;
	}
	public Ellipse_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_elementid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_elementid != p_newKey) {

			m_elementid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Ellipse_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Ellipse_c)) {
			return false;
		}

		Ellipse_c me = (Ellipse_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
						.equals(((Ellipse_c) elem).getElementid())) && this != elem)) {
			return false;
		}
		if (!getElementid().equals(((Ellipse_c) elem).getElementid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Ellipse_c)) {
			return false;
		}

		Ellipse_c me = (Ellipse_c) elem;
		if (!getElementidCachedValue().equals(
				((Ellipse_c) elem).getElementidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private float m_centerx;
	private float m_radiusx;
	private float m_radiusy;
	private float m_rotation;
	private float m_startangle;
	private float m_endangle;
	private float m_centery;
	private java.util.UUID m_elementid;

	// declare association references from this class

	// referring navigation

	Graphicprimitive_c IsSupertypeGraphicprimitive;
	public void relateAcrossR306To(Graphicprimitive_c target) {
		relateAcrossR306To(target, true);
	}
	public void relateAcrossR306To(Graphicprimitive_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeGraphicprimitive)
			return; // already related

		if (IsSupertypeGraphicprimitive != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeGraphicprimitive != null) {

				IsSupertypeGraphicprimitive.clearBackPointerR306To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Ellipse_c.relateAcrossR306To(Graphicprimitive_c target)",
									"Relate performed across R306 from Ellipse to GraphicPrimitive without unrelate of prior instance.");
				}
			}

			IsSupertypeGraphicprimitive = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR306To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "306", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR306From(Graphicprimitive_c target) {
		unrelateAcrossR306From(target, true);
	}
	public void unrelateAcrossR306From(Graphicprimitive_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeGraphicprimitive == null)
			return; // already unrelated

		if (target != IsSupertypeGraphicprimitive) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R306",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR306To(this);
		}

		if (IsSupertypeGraphicprimitive != null) {

			m_elementid = IsSupertypeGraphicprimitive.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsSupertypeGraphicprimitive
						.getElementidCachedValue();
			}
			IsSupertypeGraphicprimitive = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "306", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Ellipse_c getOneDIM_ELPOnR306(Graphicprimitive_c[] targets) {
		return getOneDIM_ELPOnR306(targets, null);
	}

	public static Ellipse_c getOneDIM_ELPOnR306(Graphicprimitive_c[] targets,
			ClassQueryInterface_c test) {
		Ellipse_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_ELPOnR306(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Ellipse_c getOneDIM_ELPOnR306(Graphicprimitive_c target) {
		return getOneDIM_ELPOnR306(target, null);
	}

	public static Ellipse_c getOneDIM_ELPOnR306(Graphicprimitive_c target,
			boolean loadComponent) {
		return getOneDIM_ELPOnR306(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Ellipse_c getOneDIM_ELPOnR306(Graphicprimitive_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_ELPOnR306(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Ellipse_c getOneDIM_ELPOnR306(ModelRoot modelRoot,
			Graphicprimitive_c target, ClassQueryInterface_c test) {
		return getOneDIM_ELPOnR306(modelRoot, target, test, true);
	}

	public static Ellipse_c getOneDIM_ELPOnR306(ModelRoot modelRoot,
			Graphicprimitive_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneDIM_ELPOnR306(modelRoot, target, test);
	}
	private static Ellipse_c find_getOneDIM_ELPOnR306(ModelRoot modelRoot,
			Graphicprimitive_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Ellipse_c source = (Ellipse_c) target.backPointer_IsSubtypeEllipseIsSubtype_R306;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Ellipse_c[] getManyDIM_ELPsOnR306(Graphicprimitive_c[] targets) {
		return getManyDIM_ELPsOnR306(targets, null);
	}
	public static Ellipse_c[] getManyDIM_ELPsOnR306(
			Graphicprimitive_c[] targets, boolean loadComponent) {
		return getManyDIM_ELPsOnR306(targets, null, loadComponent);
	}
	public static Ellipse_c[] getManyDIM_ELPsOnR306(
			Graphicprimitive_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_ELPsOnR306(targets, test, true);
	}

	public static Ellipse_c[] getManyDIM_ELPsOnR306(
			Graphicprimitive_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Ellipse_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Ellipse_c source = (Ellipse_c) targets[i].backPointer_IsSubtypeEllipseIsSubtype_R306;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Ellipse_c[] ret_set = new Ellipse_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Ellipse_c[0];
		}
	}

	public static Ellipse_c[] getManyDIM_ELPsOnR306(Graphicprimitive_c target) {
		if (target != null) {
			Graphicprimitive_c[] targetArray = new Graphicprimitive_c[1];
			targetArray[0] = target;
			return getManyDIM_ELPsOnR306(targetArray);
		} else {
			Ellipse_c[] result = new Ellipse_c[0];
			return result;
		}
	}

	public static Ellipse_c[] getManyDIM_ELPsOnR306(Graphicprimitive_c target,
			boolean loadComponent) {
		if (target != null) {
			Graphicprimitive_c[] targetArray = new Graphicprimitive_c[1];
			targetArray[0] = target;
			return getManyDIM_ELPsOnR306(targetArray, loadComponent);
		} else {
			Ellipse_c[] result = new Ellipse_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R306
		Graphicprimitive_c relInst21859 = (Graphicprimitive_c) baseRoot
				.getInstanceList(Graphicprimitive_c.class).get(
						new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst21859 == null) {
			relInst21859 = (Graphicprimitive_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Graphicprimitive_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst21859 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst21859) && !isProxy())) {
				relInst21859.relateAcrossR306To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R306
		// DIM_GRP
		inst = IsSupertypeGraphicprimitive;
		unrelateAcrossR306From(IsSupertypeGraphicprimitive, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Ellipse_c inst = (Ellipse_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Ellipse_c EllipseInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Ellipse_c result = findEllipseInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Ellipse_c findEllipseInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Ellipse_c x = (Ellipse_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Ellipse_c EllipseInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return EllipseInstance(modelRoot, test, true);
	}

	public static Ellipse_c EllipseInstance(ModelRoot modelRoot) {
		return EllipseInstance(modelRoot, null, true);
	}

	public static Ellipse_c[] EllipseInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Ellipse_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Ellipse_c x = (Ellipse_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Ellipse_c[] ret_set = new Ellipse_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Ellipse_c[0];
			}
		}
	}
	public static Ellipse_c[] EllipseInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return EllipseInstances(modelRoot, test, true);
	}
	public static Ellipse_c[] EllipseInstances(ModelRoot modelRoot) {
		return EllipseInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Ellipse.dispose call: ";
		Graphicprimitive_c testR306Inst2 = Graphicprimitive_c
				.getOneDIM_GRPOnR306(this, false);

		if (testR306Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "306 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Ellipse", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public float getCenterx() {
		return m_centerx;
	}

	public void setCenterx(float newValue) {
		if (m_centerx == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Centerx", new Float(m_centerx), new Float(newValue), true);

		m_centerx = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getRadiusx() {
		return m_radiusx;
	}

	public void setRadiusx(float newValue) {
		if (m_radiusx == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Radiusx", new Float(m_radiusx), new Float(newValue), true);

		m_radiusx = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getRadiusy() {
		return m_radiusy;
	}

	public void setRadiusy(float newValue) {
		if (m_radiusy == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Radiusy", new Float(m_radiusy), new Float(newValue), true);

		m_radiusy = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getRotation() {
		return m_rotation;
	}

	public void setRotation(float newValue) {
		if (m_rotation == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Rotation", new Float(m_rotation), new Float(newValue), true);

		m_rotation = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getStartangle() {
		return m_startangle;
	}

	public void setStartangle(float newValue) {
		if (m_startangle == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Startangle", new Float(m_startangle), new Float(newValue),
				true);

		m_startangle = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getEndangle() {
		return m_endangle;
	}

	public void setEndangle(float newValue) {
		if (m_endangle == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Endangle", new Float(m_endangle), new Float(newValue), true);

		m_endangle = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getCentery() {
		return m_centery;
	}

	public void setCentery(float newValue) {
		if (m_centery == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Centery", new Float(m_centery), new Float(newValue), true);

		m_centery = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getElementidLongBased() {
		if (IsSupertypeGraphicprimitive != null) {
			return IsSupertypeGraphicprimitive.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (IsSupertypeGraphicprimitive != null) {
			return IsSupertypeGraphicprimitive.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeGraphicprimitive != null);

	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Ellipse", //$NON-NLS-1$
				" Operation entered: Ellipse::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Ellipse_c[] objs = Ellipse_c.EllipseInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Ellipse", //$NON-NLS-1$
				" Operation entered: Ellipse::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Ellipse_c_test21861_c implements ClassQueryInterface_c {
			Ellipse_c_test21861_c(java.util.UUID p21862) {
				m_p21862 = p21862;
			}
			private java.util.UUID m_p21862;
			public boolean evaluate(Object candidate) {
				Ellipse_c selected = (Ellipse_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21862));
				return retval;
			}
		}

		Ellipse_c[] objs21860 = Ellipse_c.EllipseInstances(modelRoot,
				new Ellipse_c_test21861_c(getElementid()));

		if (((objs21860.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Ellipse", //$NON-NLS-1$
								"Consistency: Object: Ellipse: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21860.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Ellipse: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21860.length), e);
			}
			retval = false;

		}

		if (((objs21860.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Ellipse", //$NON-NLS-1$
								"Consistency: Object: Ellipse: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21860.length)
										+ " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Ellipse: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21860.length)
										+ " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Ellipse is a subtype in association: rel.Numb = 306
		// The supertype class is: GraphicPrimitive
		class Graphicprimitive_c_test21866_c implements ClassQueryInterface_c {
			Graphicprimitive_c_test21866_c(java.util.UUID p21867) {
				m_p21867 = p21867;
			}
			private java.util.UUID m_p21867;
			public boolean evaluate(Object candidate) {
				Graphicprimitive_c selected = (Graphicprimitive_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21867));
				return retval;
			}
		}

		Graphicprimitive_c[] objs21865 = Graphicprimitive_c
				.GraphicprimitiveInstances(modelRoot,
						new Graphicprimitive_c_test21866_c(getElementid()));

		if (((objs21865.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Ellipse", //$NON-NLS-1$
								"Consistency: Object: Ellipse: Association: 306: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21865.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Ellipse: Association: 306: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21865.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Ellipse",
				" Operation entered: Ellipse::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		if (delete()) {
			Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Ellipse
