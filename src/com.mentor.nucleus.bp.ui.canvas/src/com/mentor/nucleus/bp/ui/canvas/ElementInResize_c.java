package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ElementInResize_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ELEMENT_IN_RESIZE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ElementInResize_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ElementInResize_c(ModelRoot modelRoot, java.util.UUID p_m_diagramid,
			int p_m_vertex, int p_m_end, java.util.UUID p_m_elementid) {
		super(modelRoot);
		m_vertex = p_m_vertex;
		m_end = p_m_end;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

		Object[] key = {m_elementid, m_diagramid};
		addInstanceToMap(key);
	}
	static public ElementInResize_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_diagramid, int p_m_vertex, int p_m_end,
			java.util.UUID p_m_elementid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);
		ElementInResize_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid, p_m_diagramid};
			new_inst = (ElementInResize_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_vertex = p_m_vertex;
				new_inst.m_end = p_m_end;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ElementInResize_c(modelRoot, p_m_diagramid,
					p_m_vertex, p_m_end, p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ElementInResize_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_diagramid, int p_m_vertex, int p_m_end,
			java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);
		ElementInResize_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid, p_m_diagramid};
			source = (ElementInResize_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_vertex = p_m_vertex;
				source.m_end = p_m_end;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);

				return source;
			}
		}
		// there is no instance matching the id
		ElementInResize_c new_inst = new ElementInResize_c(modelRoot,
				p_m_diagramid, p_m_vertex, p_m_end, p_m_elementid);
		return new_inst;
	}
	public ElementInResize_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_vertex = Vertex_c.OOA_UNINITIALIZED_ENUM;
		m_end = End_c.OOA_UNINITIALIZED_ENUM;
		m_elementid = IdAssigner.NULL_UUID;
		m_diagramid = IdAssigner.NULL_UUID;
		Object[] key = {m_elementid, m_diagramid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_elementid, m_diagramid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_elementid != p_newKey) {

			m_elementid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ElementInResize_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ElementInResize_c)) {
			return false;
		}

		ElementInResize_c me = (ElementInResize_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
						.equals(((ElementInResize_c) elem).getElementid())) && this != elem)) {
			return false;
		}
		if (!getElementid().equals(((ElementInResize_c) elem).getElementid()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDiagramid()) || IdAssigner.NULL_UUID
						.equals(((ElementInResize_c) elem).getDiagramid())) && this != elem)) {
			return false;
		}
		if (!getDiagramid().equals(((ElementInResize_c) elem).getDiagramid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ElementInResize_c)) {
			return false;
		}

		ElementInResize_c me = (ElementInResize_c) elem;
		if (!getElementidCachedValue().equals(
				((ElementInResize_c) elem).getElementidCachedValue()))
			return false;
		if (!getDiagramidCachedValue().equals(
				((ElementInResize_c) elem).getDiagramidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private int m_vertex;
	private int m_end;
	private java.util.UUID m_elementid;
	private java.util.UUID m_diagramid;

	// declare association references from this class

	// referring navigation

	Model_c IsResizedInModel;
	public void relateAcrossR12To(Model_c target) {
		relateAcrossR12To(target, true);
	}
	public void relateAcrossR12To(Model_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsResizedInModel)
			return; // already related

		if (IsResizedInModel != target) {

			Object oldKey = getInstanceKey();

			if (IsResizedInModel != null) {

				IsResizedInModel.clearBackPointerR12To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ElementInResize_c.relateAcrossR12To(Model_c target)",
									"Relate performed across R12 from Element In Resize to Model without unrelate of prior instance.");
				}
			}

			IsResizedInModel = target;
			if (IdAssigner.NULL_UUID.equals(target.getDiagramid())) {
				// do not update cached value
			} else {
				// update cached value
				m_diagramid = target.getDiagramidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR12To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "12", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR12From(Model_c target) {
		unrelateAcrossR12From(target, true);
	}
	public void unrelateAcrossR12From(Model_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsResizedInModel == null)
			return; // already unrelated

		if (target != IsResizedInModel) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R12",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR12To(this);
		}

		if (IsResizedInModel != null) {

			m_diagramid = IsResizedInModel.getDiagramid();
			if (IdAssigner.NULL_UUID.equals(m_diagramid)) {
				m_diagramid = IsResizedInModel.getDiagramidCachedValue();
			}
			IsResizedInModel = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "12", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	// referring navigation

	GraphicalElement_c IsResizingGraphicalElement;
	public void relateAcrossR12To(GraphicalElement_c target) {
		relateAcrossR12To(target, true);
	}
	public void relateAcrossR12To(GraphicalElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsResizingGraphicalElement)
			return; // already related

		if (IsResizingGraphicalElement != target) {

			Object oldKey = getInstanceKey();

			if (IsResizingGraphicalElement != null) {

				IsResizingGraphicalElement.clearBackPointerR12To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ElementInResize_c.relateAcrossR12To(GraphicalElement_c target)",
									"Relate performed across R12 from Element In Resize to Graphical Element without unrelate of prior instance.");
				}
			}

			IsResizingGraphicalElement = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR12To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "12", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR12From(GraphicalElement_c target) {
		unrelateAcrossR12From(target, true);
	}
	public void unrelateAcrossR12From(GraphicalElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsResizingGraphicalElement == null)
			return; // already unrelated

		if (target != IsResizingGraphicalElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R12",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR12To(this);
		}

		if (IsResizingGraphicalElement != null) {

			m_elementid = IsResizingGraphicalElement.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsResizingGraphicalElement
						.getElementidCachedValue();
			}
			IsResizingGraphicalElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "12", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static ElementInResize_c getOneGD_EIROnR12(Model_c[] targets) {
		return getOneGD_EIROnR12(targets, null);
	}

	public static ElementInResize_c getOneGD_EIROnR12(Model_c[] targets,
			ClassQueryInterface_c test) {
		ElementInResize_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_EIROnR12(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElementInResize_c getOneGD_EIROnR12(Model_c target) {
		return getOneGD_EIROnR12(target, null);
	}

	public static ElementInResize_c getOneGD_EIROnR12(Model_c target,
			boolean loadComponent) {
		return getOneGD_EIROnR12(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElementInResize_c getOneGD_EIROnR12(Model_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_EIROnR12(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElementInResize_c getOneGD_EIROnR12(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test) {
		return getOneGD_EIROnR12(modelRoot, target, test, true);
	}

	public static ElementInResize_c getOneGD_EIROnR12(ModelRoot modelRoot,
			Model_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneGD_EIROnR12(modelRoot, target, test);
	}
	private static ElementInResize_c find_getOneGD_EIROnR12(
			ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsResizingElementInResizeIsResizing_R12) {
				for (int i = 0; i < target.backPointer_IsResizingElementInResizeIsResizing_R12
						.size(); ++i) {
					ElementInResize_c source = (ElementInResize_c) target.backPointer_IsResizingElementInResizeIsResizing_R12
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(Model_c[] targets) {
		return getManyGD_EIRsOnR12(targets, null);
	}
	public static ElementInResize_c[] getManyGD_EIRsOnR12(Model_c[] targets,
			boolean loadComponent) {
		return getManyGD_EIRsOnR12(targets, null, loadComponent);
	}
	public static ElementInResize_c[] getManyGD_EIRsOnR12(Model_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_EIRsOnR12(targets, test, true);
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(Model_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElementInResize_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsResizingElementInResizeIsResizing_R12) {
				for (int j = 0; j < targets[i].backPointer_IsResizingElementInResizeIsResizing_R12
						.size(); ++j) {
					ElementInResize_c source = (ElementInResize_c) targets[i].backPointer_IsResizingElementInResizeIsResizing_R12
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ElementInResize_c[] ret_set = new ElementInResize_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementInResize_c[0];
		}
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(Model_c target) {
		if (target != null) {
			Model_c[] targetArray = new Model_c[1];
			targetArray[0] = target;
			return getManyGD_EIRsOnR12(targetArray);
		} else {
			ElementInResize_c[] result = new ElementInResize_c[0];
			return result;
		}
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(Model_c target,
			boolean loadComponent) {
		if (target != null) {
			Model_c[] targetArray = new Model_c[1];
			targetArray[0] = target;
			return getManyGD_EIRsOnR12(targetArray, loadComponent);
		} else {
			ElementInResize_c[] result = new ElementInResize_c[0];
			return result;
		}
	}

	public static ElementInResize_c getOneGD_EIROnR12(
			GraphicalElement_c[] targets) {
		return getOneGD_EIROnR12(targets, null);
	}

	public static ElementInResize_c getOneGD_EIROnR12(
			GraphicalElement_c[] targets, ClassQueryInterface_c test) {
		ElementInResize_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_EIROnR12(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElementInResize_c getOneGD_EIROnR12(GraphicalElement_c target) {
		return getOneGD_EIROnR12(target, null);
	}

	public static ElementInResize_c getOneGD_EIROnR12(
			GraphicalElement_c target, boolean loadComponent) {
		return getOneGD_EIROnR12(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElementInResize_c getOneGD_EIROnR12(
			GraphicalElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_EIROnR12(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElementInResize_c getOneGD_EIROnR12(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test) {
		return getOneGD_EIROnR12(modelRoot, target, test, true);
	}

	public static ElementInResize_c getOneGD_EIROnR12(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneGD_EIROnR12(modelRoot, target, test);
	}
	private static ElementInResize_c find_getOneGD_EIROnR12(
			ModelRoot modelRoot, GraphicalElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsResizedInElementInResizeIsResizedIn_R12) {
				for (int i = 0; i < target.backPointer_IsResizedInElementInResizeIsResizedIn_R12
						.size(); ++i) {
					ElementInResize_c source = (ElementInResize_c) target.backPointer_IsResizedInElementInResizeIsResizedIn_R12
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(
			GraphicalElement_c[] targets) {
		return getManyGD_EIRsOnR12(targets, null);
	}
	public static ElementInResize_c[] getManyGD_EIRsOnR12(
			GraphicalElement_c[] targets, boolean loadComponent) {
		return getManyGD_EIRsOnR12(targets, null, loadComponent);
	}
	public static ElementInResize_c[] getManyGD_EIRsOnR12(
			GraphicalElement_c[] targets, ClassQueryInterface_c test) {
		return getManyGD_EIRsOnR12(targets, test, true);
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(
			GraphicalElement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElementInResize_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsResizedInElementInResizeIsResizedIn_R12) {
				for (int j = 0; j < targets[i].backPointer_IsResizedInElementInResizeIsResizedIn_R12
						.size(); ++j) {
					ElementInResize_c source = (ElementInResize_c) targets[i].backPointer_IsResizedInElementInResizeIsResizedIn_R12
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ElementInResize_c[] ret_set = new ElementInResize_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementInResize_c[0];
		}
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(
			GraphicalElement_c target) {
		if (target != null) {
			GraphicalElement_c[] targetArray = new GraphicalElement_c[1];
			targetArray[0] = target;
			return getManyGD_EIRsOnR12(targetArray);
		} else {
			ElementInResize_c[] result = new ElementInResize_c[0];
			return result;
		}
	}

	public static ElementInResize_c[] getManyGD_EIRsOnR12(
			GraphicalElement_c target, boolean loadComponent) {
		if (target != null) {
			GraphicalElement_c[] targetArray = new GraphicalElement_c[1];
			targetArray[0] = target;
			return getManyGD_EIRsOnR12(targetArray, loadComponent);
		} else {
			ElementInResize_c[] result = new ElementInResize_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R12
		Model_c relInst22313 = (Model_c) baseRoot
				.getInstanceList(Model_c.class).get(new Object[]{m_diagramid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22313 == null) {
			relInst22313 = (Model_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Model_c.class)
					.get(new Object[]{m_diagramid});
		}
		//synchronized
		if (relInst22313 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22313) && !isProxy())) {
				relInst22313.relateAcrossR12To(this, notifyChanges);
			}
		}

		GraphicalElement_c relInst22314 = (GraphicalElement_c) baseRoot
				.getInstanceList(GraphicalElement_c.class).get(
						new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22314 == null) {
			relInst22314 = (GraphicalElement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(GraphicalElement_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst22314 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22314) && !isProxy())) {
				relInst22314.relateAcrossR12To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R12
		// GD_MD
		inst = IsResizedInModel;
		unrelateAcrossR12From(IsResizedInModel, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// GD_GE
		inst = IsResizingGraphicalElement;
		unrelateAcrossR12From(IsResizingGraphicalElement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ElementInResize_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ElementInResize_c inst = (ElementInResize_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ElementInResize_c ElementInResizeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ElementInResize_c result = findElementInResizeInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static ElementInResize_c findElementInResizeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElementInResize_c x = (ElementInResize_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ElementInResize_c ElementInResizeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ElementInResizeInstance(modelRoot, test, true);
	}

	public static ElementInResize_c ElementInResizeInstance(ModelRoot modelRoot) {
		return ElementInResizeInstance(modelRoot, null, true);
	}

	public static ElementInResize_c[] ElementInResizeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementInResize_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElementInResize_c x = (ElementInResize_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ElementInResize_c[] ret_set = new ElementInResize_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ElementInResize_c[0];
			}
		}
	}
	public static ElementInResize_c[] ElementInResizeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ElementInResizeInstances(modelRoot, test, true);
	}
	public static ElementInResize_c[] ElementInResizeInstances(
			ModelRoot modelRoot) {
		return ElementInResizeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Element In Resize.dispose call: ";
		GraphicalElement_c testR12Inst = GraphicalElement_c.getOneGD_GEOnR12(
				this, false);

		if (testR12Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "12 ";
		}

		Model_c testR12InstOth = Model_c.getOneGD_MDOnR12(this, false);

		if (testR12InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "12 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Element In Resize",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("elementid")) {
			return true;
		}
		if (attributeName.equals("diagramid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public int getVertex() {
		return m_vertex;
	}

	public void setVertex(int newValue) {
		if (m_vertex == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Vertex", new Integer(m_vertex), new Integer(newValue), false);

		m_vertex = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getEnd() {
		return m_end;
	}

	public void setEnd(int newValue) {
		if (m_end == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "End",
				new Integer(m_end), new Integer(newValue), false);

		m_end = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getElementidLongBased() {
		if (IsResizingGraphicalElement != null) {
			return IsResizingGraphicalElement.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (IsResizingGraphicalElement != null) {
			return IsResizingGraphicalElement.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, false);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getDiagramidLongBased() {
		if (IsResizedInModel != null) {
			return IsResizedInModel.getDiagramidLongBased();
		}
		return 0;
	}
	public java.util.UUID getDiagramid() {
		if (IsResizedInModel != null) {
			return IsResizedInModel.getDiagramid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDiagramidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_diagramid))
			return m_diagramid;
		else
			return getDiagramid();
	}

	public void setDiagramid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_diagramid)) {
				return;
			}
		} else if (m_diagramid != null) {
			if (m_diagramid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Diagramid", m_diagramid, newValue, false);
		m_diagramid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Element In Resize", //$NON-NLS-1$
				" Operation entered: Element In Resize::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ElementInResize_c[] objs = ElementInResize_c.ElementInResizeInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Element In Resize", //$NON-NLS-1$
				" Operation entered: Element In Resize::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ElementInResize_c_test22316_c implements ClassQueryInterface_c {
			ElementInResize_c_test22316_c(java.util.UUID p22317,
					java.util.UUID p22318) {
				m_p22317 = p22317;
				m_p22318 = p22318;
			}
			private java.util.UUID m_p22317;
			private java.util.UUID m_p22318;
			public boolean evaluate(Object candidate) {
				ElementInResize_c selected = (ElementInResize_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22317))
						& (selected.getDiagramid().equals(m_p22318));
				return retval;
			}
		}

		ElementInResize_c[] objs22315 = ElementInResize_c
				.ElementInResizeInstances(modelRoot,
						new ElementInResize_c_test22316_c(getElementid(),
								getDiagramid()));

		if (((objs22315.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Element In Resize", //$NON-NLS-1$
								"Consistency: Object: Element In Resize: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22315.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Element In Resize: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22315.length), e);
			}
			retval = false;

		}

		if (((objs22315.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Element In Resize", //$NON-NLS-1$
								"Consistency: Object: Element In Resize: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22315.length)
										+ " elementId: " + "Not Printable" + " diagramId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Element In Resize: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22315.length)
										+ " elementId: " + "Not Printable" + " diagramId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Element In Resize is a link class in association: rel.Numb = 12
		// The one side class in the association is: Graphical Element
		class GraphicalElement_c_test22322_c implements ClassQueryInterface_c {
			GraphicalElement_c_test22322_c(java.util.UUID p22323) {
				m_p22323 = p22323;
			}
			private java.util.UUID m_p22323;
			public boolean evaluate(Object candidate) {
				GraphicalElement_c selected = (GraphicalElement_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22323));
				return retval;
			}
		}

		GraphicalElement_c[] objs22321 = GraphicalElement_c
				.GraphicalElementInstances(modelRoot,
						new GraphicalElement_c_test22322_c(getElementid()));

		if (((objs22321.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Element In Resize", //$NON-NLS-1$
								"Consistency: Object: Element In Resize: Association: 12: Cardinality of one side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22321.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Element In Resize: Association: 12: Cardinality of one side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22321.length), e);
			}
			retval = false;

		}

		// Other side
		// The other side class in the association is: Model
		class Model_c_test22325_c implements ClassQueryInterface_c {
			Model_c_test22325_c(java.util.UUID p22326) {
				m_p22326 = p22326;
			}
			private java.util.UUID m_p22326;
			public boolean evaluate(Object candidate) {
				Model_c selected = (Model_c) candidate;
				boolean retval = false;
				retval = (selected.getDiagramid().equals(m_p22326));
				return retval;
			}
		}

		Model_c[] objs22324 = Model_c.ModelInstances(modelRoot,
				new Model_c_test22325_c(getDiagramid()));

		if (((objs22324.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Element In Resize", //$NON-NLS-1$
								"Consistency: Object: Element In Resize: Association: 12: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22324.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Element In Resize: Association: 12: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22324.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Initialize() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Element In Resize",
				" Operation entered: ElementInResize::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_symbol = GraphicalElement_c.getOneGD_GEOnR12(this);

		setVertex(v_symbol.Getvertexunder(Gr_c.Getabsolutexposition(),
				Gr_c.Getabsoluteyposition()));

		setEnd(v_symbol.Getendunder(Gr_c.Getabsolutexposition(),
				Gr_c.Getabsoluteyposition()));

	} // End initialize
	public void Finish() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Element In Resize",
				" Operation entered: ElementInResize::Finish");
		final ModelRoot modelRoot = getModelRoot();

	} // End finish
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Element In Resize",
				" Operation entered: ElementInResize::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_model = Model_c.getOneGD_MDOnR12(this);

		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR12(this);

		unrelateAcrossR12From(v_ge);
		unrelateAcrossR12From(v_model);

		if (delete()) {
			Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Element In Resize
