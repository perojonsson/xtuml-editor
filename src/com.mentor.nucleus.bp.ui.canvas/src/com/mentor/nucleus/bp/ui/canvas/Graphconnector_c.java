      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Graphconnector_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_GRAPHCONNECTOR extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Graphconnector_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Graphconnector_c(ModelRoot modelRoot,
       java.util.UUID         p_m_conid,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_elementid)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_conid = IdAssigner.preprocessUUID(p_m_conid);
       //extract 28 bit value only            
       m_conidLongBased = 0xfffffff & p_m_conid.getLeastSignificantBits();
       m_positionx = p_m_positionx;
       m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
    setUniqueId(m_conid);
    Object [] key = {m_conid};
    addInstanceToMap(key);
  }
  static public Graphconnector_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_conid,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_elementid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);
      Graphconnector_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_conid};
          new_inst = (Graphconnector_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_conid = IdAssigner.preprocessUUID(p_m_conid);
       //extract 28 bit value only            
       new_inst.m_conidLongBased = 0xfffffff & p_m_conid.getLeastSignificantBits();
       new_inst.m_positionx = p_m_positionx;
       new_inst.m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Graphconnector_c(modelRoot,
p_m_conid,
p_m_positionx,
p_m_positiony,
p_m_elementid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Graphconnector_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_conid,
       float        p_m_positionx,
       float        p_m_positiony,
       java.util.UUID         p_m_elementid){
    InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);
    Graphconnector_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_conid
            };
        source = (Graphconnector_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_conid = IdAssigner.preprocessUUID(p_m_conid);
       //extract 28 bit value only            
       source.m_conidLongBased = 0xfffffff & p_m_conid.getLeastSignificantBits();
       source.m_positionx = p_m_positionx;
       source.m_positiony = p_m_positiony;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Graphconnector_c new_inst = new Graphconnector_c(modelRoot,
p_m_conid,
p_m_positionx,
p_m_positiony,
p_m_elementid
);
    return new_inst;
  }
  public Graphconnector_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_conid = idAssigner.createUUID();
     m_elementid = IdAssigner.NULL_UUID;   
    setUniqueId(m_conid);
    Object [] key = {m_conid};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_conid};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_conid !=  p_newKey ){
	
		m_conid = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Graphconnector_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Graphconnector_c)) {
           return false;
       }
       
       Graphconnector_c me = (Graphconnector_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getConid()) || IdAssigner.NULL_UUID.equals(((Graphconnector_c)elem).getConid())) && this != elem)) {
      	return false;
      }
      if (!getConid().equals(((Graphconnector_c)elem).getConid())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Graphconnector_c)) {
           return false;
       }
       
       Graphconnector_c me = (Graphconnector_c)elem;
      if (!getConid().equals(((Graphconnector_c)elem).getConid())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_conid ;
  private long m_conidLongBased ;
  private float        m_positionx ;
  private float        m_positiony ;
  private java.util.UUID         m_elementid ;
      
// declare association references from this class
  
  
    
// referring navigation

Graphelement_c ElementGraphelement ;
public void relateAcrossR311To(Graphelement_c target)
{
	relateAcrossR311To(target, true);
}
public void relateAcrossR311To(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ElementGraphelement) return;  // already related

    if ( ElementGraphelement != target ) {
    
    Object oldKey = getInstanceKey();

    if (ElementGraphelement != null) {
    
        ElementGraphelement.clearBackPointerR311To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"Graphconnector_c.relateAcrossR311To(Graphelement_c target)", 
			"Relate performed across R311 from GraphConnector to GraphElement without unrelate of prior instance.");  
		}
    }
                
    	ElementGraphelement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getElementid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elementid = target.getElementidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR311To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "311", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR311From(Graphelement_c target)
{
	unrelateAcrossR311From(target, true);
}
public void unrelateAcrossR311From(Graphelement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ElementGraphelement == null) return;  // already unrelated
	
	if (target != ElementGraphelement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R311", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR311To(this);
    }
    

      if(ElementGraphelement != null) {
      
        m_elementid = ElementGraphelement.getElementid();
        if(IdAssigner.NULL_UUID.equals(m_elementid))
        {
          m_elementid = ElementGraphelement.getElementidCachedValue();
        }       
        ElementGraphelement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "311", "");
        Ooaofgraphics.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Graphconnector_c getOneDIM_CONOnR311(Graphelement_c [] targets)
{
    return getOneDIM_CONOnR311(targets, null);
}

public static Graphconnector_c getOneDIM_CONOnR311(Graphelement_c [] targets, ClassQueryInterface_c test)
{
    Graphconnector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneDIM_CONOnR311(targets[i], test);
        }
    }

    return ret_val;
}

public static Graphconnector_c getOneDIM_CONOnR311(Graphelement_c target)
{
  return getOneDIM_CONOnR311(target, null);
}

public static Graphconnector_c getOneDIM_CONOnR311(Graphelement_c target, boolean loadComponent)
{
    return getOneDIM_CONOnR311(target.getModelRoot(), target, null, loadComponent);
}

public static Graphconnector_c getOneDIM_CONOnR311(Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneDIM_CONOnR311(target.getModelRoot(), target, test);
  }
  return null;
}

public static Graphconnector_c getOneDIM_CONOnR311(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
	return getOneDIM_CONOnR311(modelRoot, target, test, true);
}

public static Graphconnector_c getOneDIM_CONOnR311(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneDIM_CONOnR311(modelRoot,target,test);
}
private static Graphconnector_c find_getOneDIM_CONOnR311(ModelRoot modelRoot, Graphelement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_AnchorageGraphconnectorAnchorage_R311) {
	    for ( int i = 0; i < target.backPointer_AnchorageGraphconnectorAnchorage_R311.size(); ++i ) {
	      Graphconnector_c source = (Graphconnector_c)target.backPointer_AnchorageGraphconnectorAnchorage_R311.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c [] targets)
{
  return getManyDIM_CONsOnR311(targets, null);
}
public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c [] targets, boolean loadComponent)
{
  return getManyDIM_CONsOnR311(targets, null, loadComponent);
}
public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c [] targets, ClassQueryInterface_c test)
{
	return getManyDIM_CONsOnR311(targets, test, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Graphconnector_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_AnchorageGraphconnectorAnchorage_R311) {
	    for (int j = 0; j < targets[i].backPointer_AnchorageGraphconnectorAnchorage_R311.size(); ++j) {
	      Graphconnector_c source = (Graphconnector_c)targets[i].backPointer_AnchorageGraphconnectorAnchorage_R311.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Graphconnector_c[] ret_set = new Graphconnector_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Graphconnector_c[0];
  }
  }

public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c target)
{
  return getManyDIM_CONsOnR311(target, null);
}

public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c target, boolean loadComponent)
{
  return getManyDIM_CONsOnR311(target, null, loadComponent);
}

public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c target, ClassQueryInterface_c test)
{
	return getManyDIM_CONsOnR311(target, test, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR311(Graphelement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Graphconnector_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_AnchorageGraphconnectorAnchorage_R311) {
    for (int i = 0; i < target.backPointer_AnchorageGraphconnectorAnchorage_R311.size(); ++i) {
      Graphconnector_c source = (Graphconnector_c)target.backPointer_AnchorageGraphconnectorAnchorage_R311.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Graphconnector_c[] ret_set = new Graphconnector_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Graphconnector_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Graphedge_c> backPointer_EdgeGraphedgeEdge_R320 = new ArrayList<Graphedge_c>();

public void setGraphedgeOrderInChildListR320(Graphedge_c target, int index) {
	unrelateAcrossR320From(target);
	Graphedge_c[] elements = Graphedge_c.getManyDIM_EDsOnR320(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR320From((Graphedge_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR320To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR320To((Graphedge_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR320To(Graphedge_c target)
{
  if (target != null) {
    target.relateAcrossR320To(this, true) ;
  }
}

public void relateAcrossR320To(Graphedge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR320To(this, notifyChanges) ;
  }
}

public void setBackPointerR320To(Graphedge_c target)
{
  	synchronized (backPointer_EdgeGraphedgeEdge_R320) {
		backPointer_EdgeGraphedgeEdge_R320.add(target);
	}
}

public void unrelateAcrossR320From(Graphedge_c target)
{
  if (target != null) {
    target.unrelateAcrossR320From(this, true) ;
  }
}

public void unrelateAcrossR320From(Graphedge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR320From(this, notifyChanges) ;
  }
}

public void clearBackPointerR320To(Graphedge_c target)
{
  synchronized (backPointer_EdgeGraphedgeEdge_R320) {
	    backPointer_EdgeGraphedgeEdge_R320.remove(target);
	}
}

public static Graphconnector_c getOneDIM_CONOnR320(Graphedge_c [] targets)
{
    return getOneDIM_CONOnR320(targets, null);
}

public static Graphconnector_c getOneDIM_CONOnR320(Graphedge_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_CONOnR320(targets, test, true);
}

public static Graphconnector_c getOneDIM_CONOnR320(Graphedge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphconnector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphconnector_c candidate_val = getOneDIM_CONOnR320(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_CONOnR320(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphconnector_c getOneDIM_CONOnR320(Graphedge_c target)
{
	return getOneDIM_CONOnR320(target, true);
}
public static Graphconnector_c getOneDIM_CONOnR320(Graphedge_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.AnchorForFirstWaypointGraphconnector ;
  } else {
    return null;
  }
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_CONsOnR320(targets, test, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphconnector_c[0];
  
  
  LinkedHashSet<Graphconnector_c> elementsSet = new LinkedHashSet<Graphconnector_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AnchorForFirstWaypointGraphconnector == null)
	  targets[i].loadProxy();
    Graphconnector_c associate = targets[i].AnchorForFirstWaypointGraphconnector;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphconnector_c[] result = new Graphconnector_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c [] targets)
{
  return getManyDIM_CONsOnR320(targets, null);
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphedge_c [] targetArray = new Graphedge_c[1];
    targetArray[0] = target;
    return getManyDIM_CONsOnR320(targetArray, test, loadComponent);
  } else {
    Graphconnector_c [] result = new Graphconnector_c [0] ;
    return result ;
  }
  
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_CONsOnR320(target, null, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c target)
{
    return getManyDIM_CONsOnR320(target, null, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR320(Graphedge_c target, boolean loadComponent)
{
    return getManyDIM_CONsOnR320(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Graphedge_c> backPointer_EdgeGraphedgeEdge_R321 = new ArrayList<Graphedge_c>();

public void setGraphedgeOrderInChildListR321(Graphedge_c target, int index) {
	unrelateAcrossR321From(target);
	Graphedge_c[] elements = Graphedge_c.getManyDIM_EDsOnR321(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR321From((Graphedge_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR321To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR321To((Graphedge_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR321To(Graphedge_c target)
{
  if (target != null) {
    target.relateAcrossR321To(this, true) ;
  }
}

public void relateAcrossR321To(Graphedge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR321To(this, notifyChanges) ;
  }
}

public void setBackPointerR321To(Graphedge_c target)
{
  	synchronized (backPointer_EdgeGraphedgeEdge_R321) {
		backPointer_EdgeGraphedgeEdge_R321.add(target);
	}
}

public void unrelateAcrossR321From(Graphedge_c target)
{
  if (target != null) {
    target.unrelateAcrossR321From(this, true) ;
  }
}

public void unrelateAcrossR321From(Graphedge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR321From(this, notifyChanges) ;
  }
}

public void clearBackPointerR321To(Graphedge_c target)
{
  synchronized (backPointer_EdgeGraphedgeEdge_R321) {
	    backPointer_EdgeGraphedgeEdge_R321.remove(target);
	}
}

public static Graphconnector_c getOneDIM_CONOnR321(Graphedge_c [] targets)
{
    return getOneDIM_CONOnR321(targets, null);
}

public static Graphconnector_c getOneDIM_CONOnR321(Graphedge_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_CONOnR321(targets, test, true);
}

public static Graphconnector_c getOneDIM_CONOnR321(Graphedge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphconnector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphconnector_c candidate_val = getOneDIM_CONOnR321(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_CONOnR321(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphconnector_c getOneDIM_CONOnR321(Graphedge_c target)
{
	return getOneDIM_CONOnR321(target, true);
}
public static Graphconnector_c getOneDIM_CONOnR321(Graphedge_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.AnchorForLastWaypointGraphconnector ;
  } else {
    return null;
  }
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_CONsOnR321(targets, test, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphconnector_c[0];
  
  
  LinkedHashSet<Graphconnector_c> elementsSet = new LinkedHashSet<Graphconnector_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AnchorForLastWaypointGraphconnector == null)
	  targets[i].loadProxy();
    Graphconnector_c associate = targets[i].AnchorForLastWaypointGraphconnector;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphconnector_c[] result = new Graphconnector_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c [] targets)
{
  return getManyDIM_CONsOnR321(targets, null);
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Graphedge_c [] targetArray = new Graphedge_c[1];
    targetArray[0] = target;
    return getManyDIM_CONsOnR321(targetArray, test, loadComponent);
  } else {
    Graphconnector_c [] result = new Graphconnector_c [0] ;
    return result ;
  }
  
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_CONsOnR321(target, null, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c target)
{
    return getManyDIM_CONsOnR321(target, null, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR321(Graphedge_c target, boolean loadComponent)
{
    return getManyDIM_CONsOnR321(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<AnchorOnSegment_c> backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26 = new ArrayList<AnchorOnSegment_c>();

public void setAnchorOnSegmentOrderInChildListR26(AnchorOnSegment_c target, int index) {
	unrelateAcrossR26From(target);
	AnchorOnSegment_c[] elements = AnchorOnSegment_c.getManyGD_AOSsOnR26(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR26From((AnchorOnSegment_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR26To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR26To((AnchorOnSegment_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR26To(AnchorOnSegment_c target)
{
  if (target != null) {
    target.relateAcrossR26To(this, true) ;
  }
}

public void relateAcrossR26To(AnchorOnSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR26To(this, notifyChanges) ;
  }
}

public void setBackPointerR26To(AnchorOnSegment_c target)
{
  	synchronized (backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26) {
		backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26.add(target);
	}
}

public void unrelateAcrossR26From(AnchorOnSegment_c target)
{
  if (target != null) {
    target.unrelateAcrossR26From(this, true) ;
  }
}

public void unrelateAcrossR26From(AnchorOnSegment_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR26From(this, notifyChanges) ;
  }
}

public void clearBackPointerR26To(AnchorOnSegment_c target)
{
  synchronized (backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26) {
	    backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26.remove(target);
	}
}

public static Graphconnector_c getOneDIM_CONOnR26(AnchorOnSegment_c [] targets)
{
    return getOneDIM_CONOnR26(targets, null);
}

public static Graphconnector_c getOneDIM_CONOnR26(AnchorOnSegment_c [] targets, ClassQueryInterface_c test)
{
    return getOneDIM_CONOnR26(targets, test, true);
}

public static Graphconnector_c getOneDIM_CONOnR26(AnchorOnSegment_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Graphconnector_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Graphconnector_c candidate_val = getOneDIM_CONOnR26(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneDIM_CONOnR26(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Graphconnector_c getOneDIM_CONOnR26(AnchorOnSegment_c target)
{
	return getOneDIM_CONOnR26(target, true);
}
public static Graphconnector_c getOneDIM_CONOnR26(AnchorOnSegment_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsAnchorOnSegmentGraphconnector ;
  } else {
    return null;
  }
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyDIM_CONsOnR26(targets, test, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Graphconnector_c[0];
  
  
  LinkedHashSet<Graphconnector_c> elementsSet = new LinkedHashSet<Graphconnector_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsAnchorOnSegmentGraphconnector == null)
	  targets[i].loadProxy();
    Graphconnector_c associate = targets[i].IsAnchorOnSegmentGraphconnector;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Graphconnector_c[] result = new Graphconnector_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c [] targets)
{
  return getManyDIM_CONsOnR26(targets, null);
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AnchorOnSegment_c [] targetArray = new AnchorOnSegment_c[1];
    targetArray[0] = target;
    return getManyDIM_CONsOnR26(targetArray, test, loadComponent);
  } else {
    Graphconnector_c [] result = new Graphconnector_c [0] ;
    return result ;
  }
  
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c target,
    ClassQueryInterface_c test)
{
    return getManyDIM_CONsOnR26(target, null, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c target)
{
    return getManyDIM_CONsOnR26(target, null, true);
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(AnchorOnSegment_c target, boolean loadComponent)
{
    return getManyDIM_CONsOnR26(target, null, loadComponent);
}

public static Graphconnector_c getOneDIM_CONOnR26(LineSegment_c target)
{
  return Graphconnector_c.getOneDIM_CONOnR26(AnchorOnSegment_c.getOneGD_AOSOnR26(target)) ;
}

public static Graphconnector_c getOneDIM_CONOnR26(LineSegment_c target,
    ClassQueryInterface_c test)
{
  return Graphconnector_c.getOneDIM_CONOnR26(AnchorOnSegment_c.getManyGD_AOSsOnR26(target), test) ;
}

public static Graphconnector_c [] getManyDIM_CONsOnR26(LineSegment_c target,
    ClassQueryInterface_c test)
{
	return getManyDIM_CONsOnR26(target, test, true);
}
public static Graphconnector_c [] getManyDIM_CONsOnR26(LineSegment_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  AnchorOnSegment_c [] associators = AnchorOnSegment_c.getManyGD_AOSsOnR26(target, loadComponent) ;
    return Graphconnector_c.getManyDIM_CONsOnR26(associators, test, loadComponent) ;
}
public static Graphconnector_c [] getManyDIM_CONsOnR26(LineSegment_c target)
{
    return getManyDIM_CONsOnR26(target, null, true);
}
public static Graphconnector_c [] getManyDIM_CONsOnR26(LineSegment_c target, boolean loadComponent)
{
    return getManyDIM_CONsOnR26(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ElementGraphelement == null) {          
      // R311
      Graphelement_c relInst21850 = (Graphelement_c) baseRoot.getInstanceList(Graphelement_c.class).get(new Object[] {m_elementid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21850 == null) {
      			relInst21850 = (Graphelement_c) Ooaofooa.getDefaultInstance().getInstanceList(Graphelement_c.class).get(new Object[] {m_elementid});
      		}
			//synchronized
      if ( relInst21850 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21850) && !isProxy())) {
	      relInst21850.relateAcrossR311To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R311
      // DIM_GE
		  inst=ElementGraphelement;
			unrelateAcrossR311From(ElementGraphelement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Graphconnector_c inst = (Graphconnector_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Graphconnector_c GraphconnectorInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Graphconnector_c result=findGraphconnectorInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Graphconnector_c findGraphconnectorInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Graphconnector_c x = (Graphconnector_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Graphconnector_c GraphconnectorInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return GraphconnectorInstance(modelRoot,test,true);
  }
  
  public static Graphconnector_c GraphconnectorInstance(ModelRoot modelRoot)
  {
	 return GraphconnectorInstance(modelRoot,null,true);
  }

  public static Graphconnector_c [] GraphconnectorInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Graphconnector_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Graphconnector_c x = (Graphconnector_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Graphconnector_c[] ret_set = new Graphconnector_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Graphconnector_c[0];
			}		
		} 
  }
  public static Graphconnector_c [] GraphconnectorInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  GraphconnectorInstances(modelRoot,test,true);
  }
  public static Graphconnector_c [] GraphconnectorInstances(ModelRoot modelRoot)
  {
	return GraphconnectorInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the GraphConnector.dispose call: ";
	Graphelement_c testR311Inst = Graphelement_c.getOneDIM_GEOnR311(this, false);

	if ( testR311Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "311 ";
	}
	Graphedge_c testR320Inst = Graphedge_c.getOneDIM_EDOnR320(this, false);

	if ( testR320Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "320 ";	
	}
	Graphedge_c testR321Inst = Graphedge_c.getOneDIM_EDOnR321(this, false);

	if ( testR321Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "321 ";	
	}
	AnchorOnSegment_c testR26Inst = AnchorOnSegment_c.getOneGD_AOSOnR26(this, false);

	if ( testR26Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "26 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "GraphConnector", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("conid")){
         return true;
      }
      if(attributeName.equals("elementid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getConidLongBased()
  {
    if(m_conidLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_conid)){
    	return 0xfffffff & m_conid.getLeastSignificantBits();
    }
    return m_conidLongBased ;
  }
  public java.util.UUID getConid()
  {
    return m_conid ;
  }


  public void setConid(java.util.UUID newValue)
  {
   m_conid = IdAssigner.preprocessUUID(newValue);
  }
  public float getPositionx()
  {
    return m_positionx ;
  }


  public void setPositionx(float newValue)
  {
    if(m_positionx == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Positionx", new Float(m_positionx), new Float(newValue),true);

   m_positionx = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public float getPositiony()
  {
    return m_positiony ;
  }


  public void setPositiony(float newValue)
  {
    if(m_positiony == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Positiony", new Float(m_positiony), new Float(newValue),true);

   m_positiony = newValue ;
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getElementidLongBased()
  {
    if ( ElementGraphelement != null )
    {
      return ElementGraphelement.getElementidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElementid()
  {
    if ( ElementGraphelement != null )
    {
      return ElementGraphelement.getElementid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getElementidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elementid) )
      return m_elementid;
    else
      return getElementid();
  }
  
  public void setElementid(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_elementid)){
	        return;
	    }
	}else if(m_elementid != null){
	    if(m_elementid.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Elementid", m_elementid, newValue,true); 
   m_elementid = IdAssigner.preprocessUUID(newValue);
    Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "GraphConnector", //$NON-NLS-1$
	  " Operation entered: GraphConnector::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Graphconnector_c [] objs = Graphconnector_c.GraphconnectorInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "GraphConnector", //$NON-NLS-1$
	  " Operation entered: GraphConnector::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Graphconnector_c_test21852_c implements ClassQueryInterface_c
    {
	  Graphconnector_c_test21852_c( java.util.UUID            p21853 ) {
	  m_p21853 = p21853;
	  }
	  private java.util.UUID             m_p21853; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphconnector_c selected = (Graphconnector_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConid().equals(m_p21853));
	      return retval;
	  }
    }

    Graphconnector_c [] objs21851 = 
    Graphconnector_c.GraphconnectorInstances(modelRoot, new Graphconnector_c_test21852_c(getConid())) ;

    if ( (  (objs21851.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphConnector", //$NON-NLS-1$
           "Consistency: Object: GraphConnector: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs21851.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphConnector: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21851.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs21851.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphConnector", //$NON-NLS-1$
           "Consistency: Object: GraphConnector: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21851.length )  + " conId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphConnector: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21851.length )  + " conId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // GraphConnector is a referring class in association: rel.Numb = 311
          // The participating class is: GraphElement
    class Graphelement_c_test21857_c implements ClassQueryInterface_c
    {
	  Graphelement_c_test21857_c( java.util.UUID            p21858 ) {
	  m_p21858 = p21858;
	  }
	  private java.util.UUID             m_p21858; 
	  public boolean evaluate (Object candidate)
	  {
	      Graphelement_c selected = (Graphelement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getElementid().equals(m_p21858));
	      return retval;
	  }
    }

    Graphelement_c [] objs21856 = 
    Graphelement_c.GraphelementInstances(modelRoot, new Graphelement_c_test21857_c(getElementid())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs21856.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "GraphConnector", //$NON-NLS-1$
           "Consistency: Object: GraphConnector: Association: 311: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs21856.length )  + " elementId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: GraphConnector: Association: 311: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs21856.length )  + " elementId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // GraphConnector is a participating class in association: rel.Numb = 320
             // Object: GraphEdge
          // GraphConnector is a participating class in association: rel.Numb = 321
             // Object: GraphEdge
          // Associated One Side: rel.Numb = 26
            // Link Object: Anchor On Segment
            // Other Side Class: Line Segment
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "GraphConnector", " Operation entered: Graphconnector::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Graphelement_c v_graphElem = Graphelement_c.getOneDIM_GEOnR311(this);


if ( (  (v_graphElem != null)) )
{

this.unrelateAcrossR311From(v_graphElem);



}

Graphedge_c [] v_anchorEdges = Graphedge_c.getManyDIM_EDsOnR320(this);


Graphedge_c  v_anchorEdge = null;
for ( int i21304 = 0; i21304 < v_anchorEdges.length; i21304++)
{
  v_anchorEdge = v_anchorEdges[i21304] ;

this.unrelateAcrossR320From(v_anchorEdge);



}

v_anchorEdges = Graphedge_c.getManyDIM_EDsOnR321(this);


for ( int i21305 = 0; i21305 < v_anchorEdges.length; i21305++)
{
  v_anchorEdge = v_anchorEdges[i21305] ;

this.unrelateAcrossR321From(v_anchorEdge);



}

AnchorOnSegment_c v_aos = AnchorOnSegment_c.getOneGD_AOSOnR26(this);


if ( (  (v_aos != null)) )
{

LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR26(v_aos);


if (v_aos != null) {
v_aos.unrelateAcrossR26From( this ) ; v_aos.unrelateAcrossR26From( v_segment ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_aos != null) {
// get the location of this element in the instance list
// before deleting
if ( v_aos.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_aos));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  String       Get_name()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "GraphConnector", " Operation entered: Graphconnector::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "Anchor Point";



   } // End get_name

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end GraphConnector
