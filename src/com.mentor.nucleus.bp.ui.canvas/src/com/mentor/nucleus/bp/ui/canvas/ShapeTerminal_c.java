package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ShapeTerminal_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SHAPE_TERMINAL extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ShapeTerminal_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ShapeTerminal_c(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, int p_m_ooa_type) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_term_spec_id = IdAssigner.preprocessUUID(p_m_term_spec_id);
		m_ooa_type = p_m_ooa_type;

		Object[] key = {m_term_spec_id};
		addInstanceToMap(key);
	}
	static public ShapeTerminal_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, int p_m_ooa_type,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);
		ShapeTerminal_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_term_spec_id};
			new_inst = (ShapeTerminal_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_term_spec_id = IdAssigner
						.preprocessUUID(p_m_term_spec_id);
				new_inst.m_ooa_type = p_m_ooa_type;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ShapeTerminal_c(modelRoot, p_m_term_spec_id,
					p_m_ooa_type);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ShapeTerminal_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_term_spec_id, int p_m_ooa_type) {
		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);
		ShapeTerminal_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_term_spec_id};
			source = (ShapeTerminal_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_term_spec_id = IdAssigner
						.preprocessUUID(p_m_term_spec_id);
				source.m_ooa_type = p_m_ooa_type;

				return source;
			}
		}
		// there is no instance matching the id
		ShapeTerminal_c new_inst = new ShapeTerminal_c(modelRoot,
				p_m_term_spec_id, p_m_ooa_type);
		return new_inst;
	}
	public ShapeTerminal_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_term_spec_id = IdAssigner.NULL_UUID;
		m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
		Object[] key = {m_term_spec_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_term_spec_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_term_spec_id != p_newKey) {

			m_term_spec_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ShapeTerminal_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ShapeTerminal_c)) {
			return false;
		}

		ShapeTerminal_c me = (ShapeTerminal_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getTerm_spec_id()) || IdAssigner.NULL_UUID
						.equals(((ShapeTerminal_c) elem).getTerm_spec_id())) && this != elem)) {
			return false;
		}
		if (!getTerm_spec_id().equals(
				((ShapeTerminal_c) elem).getTerm_spec_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ShapeTerminal_c)) {
			return false;
		}

		ShapeTerminal_c me = (ShapeTerminal_c) elem;
		if (!getTerm_spec_idCachedValue().equals(
				((ShapeTerminal_c) elem).getTerm_spec_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_term_spec_id;
	private int m_ooa_type;

	// declare association references from this class

	// referring navigation

	TerminalSpecification_c IsSupertypeTerminalSpecification;
	public void relateAcrossR201To(TerminalSpecification_c target) {
		relateAcrossR201To(target, true);
	}
	public void relateAcrossR201To(TerminalSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeTerminalSpecification)
			return; // already related

		if (IsSupertypeTerminalSpecification != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeTerminalSpecification != null) {

				IsSupertypeTerminalSpecification.clearBackPointerR201To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ShapeTerminal_c.relateAcrossR201To(TerminalSpecification_c target)",
									"Relate performed across R201 from Shape Terminal to Terminal Specification without unrelate of prior instance.");
				}
			}

			IsSupertypeTerminalSpecification = target;
			m_term_spec_id = target.getTerm_spec_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR201To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR201From(TerminalSpecification_c target) {
		unrelateAcrossR201From(target, true);
	}
	public void unrelateAcrossR201From(TerminalSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeTerminalSpecification == null)
			return; // already unrelated

		if (target != IsSupertypeTerminalSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R201",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR201To(this);
		}

		if (IsSupertypeTerminalSpecification != null) {

			m_term_spec_id = IsSupertypeTerminalSpecification.getTerm_spec_id();
			IsSupertypeTerminalSpecification = null;
			target.removeRef();
		}
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(
			TerminalSpecification_c[] targets) {
		return getOneTS_SHTOnR201(targets, null);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test) {
		ShapeTerminal_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneTS_SHTOnR201(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(
			TerminalSpecification_c target) {
		return getOneTS_SHTOnR201(target, null);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(
			TerminalSpecification_c target, boolean loadComponent) {
		return getOneTS_SHTOnR201(Ooaofgraphics.getDefaultInstance(), target,
				null, loadComponent);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneTS_SHTOnR201(Ooaofgraphics.getDefaultInstance(),
					target, test);
		}
		return null;
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		return getOneTS_SHTOnR201(modelRoot, target, test, true);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneTS_SHTOnR201(modelRoot, target, test);
	}
	private static ShapeTerminal_c find_getOneTS_SHTOnR201(ModelRoot modelRoot,
			TerminalSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ShapeTerminal_c source = (ShapeTerminal_c) target.backPointer_IsSubtypeShapeTerminalIsSubtype_R201;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR201(
			TerminalSpecification_c[] targets) {
		return getManyTS_SHTsOnR201(targets, null);
	}
	public static ShapeTerminal_c[] getManyTS_SHTsOnR201(
			TerminalSpecification_c[] targets, boolean loadComponent) {
		return getManyTS_SHTsOnR201(targets, null, loadComponent);
	}
	public static ShapeTerminal_c[] getManyTS_SHTsOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManyTS_SHTsOnR201(targets, test, true);
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR201(
			TerminalSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ShapeTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();

		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ShapeTerminal_c source = (ShapeTerminal_c) targets[i].backPointer_IsSubtypeShapeTerminalIsSubtype_R201;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ShapeTerminal_c[] ret_set = new ShapeTerminal_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ShapeTerminal_c[0];
		}
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR201(
			TerminalSpecification_c target) {
		if (target != null) {
			TerminalSpecification_c[] targetArray = new TerminalSpecification_c[1];
			targetArray[0] = target;
			return getManyTS_SHTsOnR201(targetArray);
		} else {
			ShapeTerminal_c[] result = new ShapeTerminal_c[0];
			return result;
		}
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR201(
			TerminalSpecification_c target, boolean loadComponent) {
		if (target != null) {
			TerminalSpecification_c[] targetArray = new TerminalSpecification_c[1];
			targetArray[0] = target;
			return getManyTS_SHTsOnR201(targetArray, loadComponent);
		} else {
			ShapeTerminal_c[] result = new ShapeTerminal_c[0];
			return result;
		}
	}

	// referring navigation

	ShapeSpecification_c SpecifiesTerminationOnShapeSpecification;
	public void relateAcrossR204To(ShapeSpecification_c target) {
		relateAcrossR204To(target, true);
	}
	public void relateAcrossR204To(ShapeSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesTerminationOnShapeSpecification)
			return; // already related

		if (SpecifiesTerminationOnShapeSpecification != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesTerminationOnShapeSpecification != null) {

				SpecifiesTerminationOnShapeSpecification
						.clearBackPointerR204To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"ShapeTerminal_c.relateAcrossR204To(ShapeSpecification_c target)",
									"Relate performed across R204 from Shape Terminal to Shape Specification without unrelate of prior instance.");
				}
			}

			SpecifiesTerminationOnShapeSpecification = target;
			if (target.getOoa_type() == 0) {
				// do not update cached value
			} else {
				// update cached value
				m_ooa_type = target.getOoa_typeCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR204To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR204From(ShapeSpecification_c target) {
		unrelateAcrossR204From(target, true);
	}
	public void unrelateAcrossR204From(ShapeSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesTerminationOnShapeSpecification == null)
			return; // already unrelated

		if (target != SpecifiesTerminationOnShapeSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R204",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR204To(this);
		}

		if (SpecifiesTerminationOnShapeSpecification != null) {

			m_ooa_type = SpecifiesTerminationOnShapeSpecification.getOoa_type();
			if (m_ooa_type == 0) {
				m_ooa_type = SpecifiesTerminationOnShapeSpecification
						.getOoa_typeCachedValue();
			}
			SpecifiesTerminationOnShapeSpecification = null;
			target.removeRef();
		}
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(
			ShapeSpecification_c[] targets) {
		return getOneTS_SHTOnR204(targets, null);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(
			ShapeSpecification_c[] targets, ClassQueryInterface_c test) {
		ShapeTerminal_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneTS_SHTOnR204(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(ShapeSpecification_c target) {
		return getOneTS_SHTOnR204(target, null);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(
			ShapeSpecification_c target, boolean loadComponent) {
		return getOneTS_SHTOnR204(Ooaofgraphics.getDefaultInstance(), target,
				null, loadComponent);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(
			ShapeSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneTS_SHTOnR204(Ooaofgraphics.getDefaultInstance(),
					target, test);
		}
		return null;
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(ModelRoot modelRoot,
			ShapeSpecification_c target, ClassQueryInterface_c test) {
		return getOneTS_SHTOnR204(modelRoot, target, test, true);
	}

	public static ShapeTerminal_c getOneTS_SHTOnR204(ModelRoot modelRoot,
			ShapeSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneTS_SHTOnR204(modelRoot, target, test);
	}
	private static ShapeTerminal_c find_getOneTS_SHTOnR204(ModelRoot modelRoot,
			ShapeSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ShapeTerminal_R204) {
				for (int i = 0; i < target.backPointer_ShapeTerminal_R204
						.size(); ++i) {
					ShapeTerminal_c source = (ShapeTerminal_c) target.backPointer_ShapeTerminal_R204
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c[] targets) {
		return getManyTS_SHTsOnR204(targets, null);
	}
	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c[] targets, boolean loadComponent) {
		return getManyTS_SHTsOnR204(targets, null, loadComponent);
	}
	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManyTS_SHTsOnR204(targets, test, true);
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ShapeTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();

		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ShapeTerminal_R204) {
				for (int j = 0; j < targets[i].backPointer_ShapeTerminal_R204
						.size(); ++j) {
					ShapeTerminal_c source = (ShapeTerminal_c) targets[i].backPointer_ShapeTerminal_R204
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ShapeTerminal_c[] ret_set = new ShapeTerminal_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ShapeTerminal_c[0];
		}
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c target) {
		return getManyTS_SHTsOnR204(target, null);
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c target, boolean loadComponent) {
		return getManyTS_SHTsOnR204(target, null, loadComponent);
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c target, ClassQueryInterface_c test) {
		return getManyTS_SHTsOnR204(target, test, true);
	}

	public static ShapeTerminal_c[] getManyTS_SHTsOnR204(
			ShapeSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ShapeTerminal_c[0];

		ModelRoot modelRoot = Ooaofgraphics.getDefaultInstance();
		Vector matches = new Vector();
		synchronized (target.backPointer_ShapeTerminal_R204) {
			for (int i = 0; i < target.backPointer_ShapeTerminal_R204.size(); ++i) {
				ShapeTerminal_c source = (ShapeTerminal_c) target.backPointer_ShapeTerminal_R204
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ShapeTerminal_c[] ret_set = new ShapeTerminal_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ShapeTerminal_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R201
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
      TerminalSpecification_c relInst21974 = (TerminalSpecification_c) baseRoot.getInstanceList(TerminalSpecification_c.class).get(new Object[] {m_term_spec_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst21974 == null) {
      			relInst21974 = (TerminalSpecification_c) Ooaofooa.getDefaultInstance().getInstanceList(TerminalSpecification_c.class).get(new Object[] {m_term_spec_id});
      		}
			//synchronized
      if ( relInst21974 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21974) && !isProxy())) {
	      relInst21974.relateAcrossR201To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	          

	if (SpecifiesTerminationOnShapeSpecification == null) {          
      // R204
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ShapeSpecification_c.class);
      ShapeSpecification_c relInst21975 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ShapeSpecification_c source = (ShapeSpecification_c)cursor.next() ;
           if (     source.getOoa_typeCachedValue() == m_ooa_type 		){
  		relInst21975 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst21975 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst21975) && !isProxy())) {
	      relInst21975.relateAcrossR204To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R201
		// TS_TSP
		inst = IsSupertypeTerminalSpecification;
		unrelateAcrossR201From(IsSupertypeTerminalSpecification, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R204
		// TS_SSP
		inst = SpecifiesTerminationOnShapeSpecification;
		unrelateAcrossR204From(SpecifiesTerminationOnShapeSpecification,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ShapeTerminal_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ShapeTerminal_c inst = (ShapeTerminal_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ShapeTerminal_c ShapeTerminalInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ShapeTerminal_c result = findShapeTerminalInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static ShapeTerminal_c findShapeTerminalInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ShapeTerminal_c x = (ShapeTerminal_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ShapeTerminal_c ShapeTerminalInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ShapeTerminalInstance(modelRoot, test, true);
	}

	public static ShapeTerminal_c ShapeTerminalInstance(ModelRoot modelRoot) {
		return ShapeTerminalInstance(modelRoot, null, true);
	}

	public static ShapeTerminal_c[] ShapeTerminalInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ShapeTerminal_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ShapeTerminal_c x = (ShapeTerminal_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ShapeTerminal_c[] ret_set = new ShapeTerminal_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ShapeTerminal_c[0];
			}
		}
	}
	public static ShapeTerminal_c[] ShapeTerminalInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ShapeTerminalInstances(modelRoot, test, true);
	}
	public static ShapeTerminal_c[] ShapeTerminalInstances(ModelRoot modelRoot) {
		return ShapeTerminalInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Shape Terminal.dispose call: ";
		TerminalSpecification_c testR201Inst2 = TerminalSpecification_c
				.getOneTS_TSPOnR201(this, false);

		if (testR201Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "201 ";
		}
		ShapeSpecification_c testR204Inst = ShapeSpecification_c
				.getOneTS_SSPOnR204(this, false);

		if (testR204Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "204 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Shape Terminal",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("term_spec_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getTerm_spec_idLongBased() {
		if (IsSupertypeTerminalSpecification != null) {
			return IsSupertypeTerminalSpecification.getTerm_spec_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTerm_spec_id() {
		if (IsSupertypeTerminalSpecification != null) {
			return IsSupertypeTerminalSpecification.getTerm_spec_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeTerminalSpecification != null);

	}

	public java.util.UUID getTerm_spec_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_term_spec_id))
			return m_term_spec_id;
		else
			return getTerm_spec_id();
	}

	public void setTerm_spec_id(java.util.UUID newValue) {
		m_term_spec_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getOoa_type() {
		if (SpecifiesTerminationOnShapeSpecification != null) {
			return SpecifiesTerminationOnShapeSpecification.getOoa_type();
		}
		return 0;
	}

	public int getOoa_typeCachedValue() {
		return m_ooa_type;
	}

	public void setOoa_type(int newValue) {
		m_ooa_type = newValue;
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Shape Terminal", //$NON-NLS-1$
				" Operation entered: Shape Terminal::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ShapeTerminal_c[] objs = ShapeTerminal_c.ShapeTerminalInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Shape Terminal", //$NON-NLS-1$
				" Operation entered: Shape Terminal::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ShapeTerminal_c_test21977_c implements ClassQueryInterface_c {
			ShapeTerminal_c_test21977_c(java.util.UUID p21978) {
				m_p21978 = p21978;
			}
			private java.util.UUID m_p21978;
			public boolean evaluate(Object candidate) {
				ShapeTerminal_c selected = (ShapeTerminal_c) candidate;
				boolean retval = false;
				retval = (selected.getTerm_spec_id().equals(m_p21978));
				return retval;
			}
		}

		ShapeTerminal_c[] objs21976 = ShapeTerminal_c.ShapeTerminalInstances(
				Ooaofgraphics.getDefaultInstance(),
				new ShapeTerminal_c_test21977_c(getTerm_spec_id()));

		if (((objs21976.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape Terminal", //$NON-NLS-1$
								"Consistency: Object: Shape Terminal: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21976.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Shape Terminal: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21976.length), e);
			}
			retval = false;

		}

		if (((objs21976.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape Terminal", //$NON-NLS-1$
								"Consistency: Object: Shape Terminal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21976.length)
										+ " Term_Spec_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape Terminal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21976.length)
										+ " Term_Spec_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Shape Terminal is a subtype in association: rel.Numb = 201
		// The supertype class is: Terminal Specification
		class TerminalSpecification_c_test21982_c
				implements
					ClassQueryInterface_c {
			TerminalSpecification_c_test21982_c(java.util.UUID p21983) {
				m_p21983 = p21983;
			}
			private java.util.UUID m_p21983;
			public boolean evaluate(Object candidate) {
				TerminalSpecification_c selected = (TerminalSpecification_c) candidate;
				boolean retval = false;
				retval = (selected.getTerm_spec_id().equals(m_p21983));
				return retval;
			}
		}

		TerminalSpecification_c[] objs21981 = TerminalSpecification_c
				.TerminalSpecificationInstances(Ooaofgraphics
						.getDefaultInstance(),
						new TerminalSpecification_c_test21982_c(
								getTerm_spec_id()));

		if (((objs21981.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape Terminal", //$NON-NLS-1$
								"Consistency: Object: Shape Terminal: Association: 201: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21981.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape Terminal: Association: 201: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21981.length), e);
			}
			retval = false;

		}

		// Shape Terminal is a referring class in association: rel.Numb = 204
		// The participating class is: Shape Specification
		class ShapeSpecification_c_test21985_c implements ClassQueryInterface_c {
			ShapeSpecification_c_test21985_c(int p21986) {
				m_p21986 = p21986;
			}
			private int m_p21986;
			public boolean evaluate(Object candidate) {
				ShapeSpecification_c selected = (ShapeSpecification_c) candidate;
				boolean retval = false;
				retval = (selected.getOoa_type() == (m_p21986));
				return retval;
			}
		}

		ShapeSpecification_c[] objs21984 = ShapeSpecification_c
				.ShapeSpecificationInstances(
						Ooaofgraphics.getDefaultInstance(),
						new ShapeSpecification_c_test21985_c(getOoa_type()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs21984.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape Terminal", //$NON-NLS-1$
								"Consistency: Object: Shape Terminal: Association: 204: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21984.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape Terminal: Association: 204: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21984.length)
										+ " OOA_Type: " + Integer.toString(getOoa_type()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public boolean Criteriamet(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape Terminal",
				" Operation entered: ShapeTerminal::Criteriamet");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_model = Model_c.getOneGD_MDOnR207(TerminalSpecification_c
				.getOneTS_TSPOnR201(this));

		if (((v_model != null))) {

			Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_model);

			int v_unScaledX = Gr_c.Unscale((int) (p_X - v_diagram
					.getViewportx()));

			int v_unScaledY = Gr_c.Unscale((int) (p_Y - v_diagram
					.getViewporty()));

			GraphicalElement_c[] v_shapeElems = GraphicalElement_c
					.getManyGD_GEsOnR2(Shape_c
							.getManyGD_SHPsOnR2(GraphicalElement_c
									.getManyGD_GEsOnR1(v_model)));

			ElementSpecification_c v_esTarget = ElementSpecification_c
					.getOneGD_ESOnR200(ShapeSpecification_c
							.getOneTS_SSPOnR204(this));

			GraphicalElement_c v_elementBeingCreated = GraphicalElement_c
					.getOneGD_GEOnR16(ElementSpecification_c
							.getManyGD_ESsOnR11(ElementInModelSpecification_c
									.getManyGD_EMSsOnR11(ModelSpecification_c
											.getManyGD_MSsOnR9(v_model))));

			boolean v_hasContainer = false;

			boolean v_doNotConsiderContainer = false;

			if (((v_elementBeingCreated != null))) {

				Graphelement_c v_container = Graphelement_c
						.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c
								.getOneDIM_GEOnR23(v_elementBeingCreated)));

				if (((v_container != null))) {

					v_hasContainer = true;

				}

			}

			else {

				v_doNotConsiderContainer = true;

			}

			GraphicalElement_c v_elem = null;
			for (int i21308 = 0; i21308 < v_shapeElems.length; i21308++) {
				v_elem = v_shapeElems[i21308];

				if ((v_hasContainer)) {

					GraphicalElement_c v_containerGE = GraphicalElement_c
							.getOneGD_GEOnR23(Graphelement_c.getOneDIM_GEOnR307(Diagramelement_c.getOneDIM_ELEOnR302(Graphelement_c
									.getOneDIM_GEOnR23(v_elementBeingCreated))));

					if ((v_containerGE == v_elem)) {

						if ((!v_containerGE.Isover(v_unScaledX, v_unScaledY))) {

							continue;

						}

					}

				}

				if ((v_doNotConsiderContainer)) {

					if ((v_model.Hascontainersymbol())) {

						class ElementSpecification_test21525_c
								implements
									ClassQueryInterface_c {
							public boolean evaluate(Object candidate) {
								ElementSpecification_c selected = (ElementSpecification_c) candidate;
								return (selected.getSymboltype().equals(
										"container") && selected
										.getCreationrule().equals(
												"on canvas creation"));
							}
						}
						ElementSpecification_c v_containerSpec = ElementSpecification_c
								.getOneGD_ESOnR11(
										ElementInModelSpecification_c
												.getManyGD_EMSsOnR11(ModelSpecification_c
														.getManyGD_MSsOnR9(v_model)),
										new ElementSpecification_test21525_c());

						if (((v_containerSpec != null))) {

							GraphicalElement_c v_containerShp = GraphicalElement_c
									.getOneGD_GEOnR2(Shape_c
											.getManyGD_SHPsOnR28(ContainingShape_c
													.getManyGD_CTRsOnR28(Shape_c
															.getManyGD_SHPsOnR2(GraphicalElement_c
																	.getManyGD_GEsOnR1(v_model)))));

							if (((v_containerShp != null))) {

								if ((v_containerShp == v_elem)) {

									ContainingShape_c v_container = ContainingShape_c
											.getOneGD_CTROnR28(Shape_c
													.getOneGD_SHPOnR2(v_containerShp));

									ElementSpecification_c v_creationSpec = ElementSpecification_c
											.getOneGD_ESOnR10(v_elementBeingCreated);

									if ((v_container.Isoveranypartof(
											v_unScaledX, v_unScaledY) && !v_containerShp
											.Isover(v_unScaledX, v_unScaledY))) {

										continue;

									}

								}

							}

						}

					}

				}

				ElementSpecification_c v_es = ElementSpecification_c
						.getOneGD_ESOnR10(v_elem);

				if ((v_es == v_esTarget)) {

					boolean v_isOver = false;

					ContainingShape_c v_containerShp = ContainingShape_c
							.getOneGD_CTROnR28(Shape_c.getOneGD_SHPOnR2(v_elem));

					if (((v_containerShp != null))) {

						v_isOver = v_containerShp.Isoveranypartof(v_unScaledX,
								v_unScaledY);

					}

					else {

						v_isOver = v_elem.Isover(v_unScaledX, v_unScaledY);

					}

					if ((v_isOver)) {

						TerminalSpecification_c v_tsp = TerminalSpecification_c
								.getOneTS_TSPOnR201(this);

						if (v_tsp != null) {
							v_tsp.relateAcrossR206To(v_elem);
						} else {
							Throwable t = new Throwable();
							t.fillInStackTrace();
							CorePlugin
									.logError(
											"Relate attempted on null left hand instance.",
											t);
						}

						if (v_tsp != null) {
							v_tsp.setSatisfied(true);
						} else {
							Throwable t = new Throwable();
							t.fillInStackTrace();
							CorePlugin
									.logError(
											"Attribute write attempted on null instance.",
											t);
						}

						return true;

					}

				}

			}

		}

		return false;

	} // End criteriaMet

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Shape Terminal
