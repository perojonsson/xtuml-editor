package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Semanticmodelbridge_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SEMANTICMODELBRIDGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Semanticmodelbridge_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Semanticmodelbridge_c(ModelRoot modelRoot,
			java.util.UUID p_m_smb_id, String p_m_presentation) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
		//extract 28 bit value only            
		m_smb_idLongBased = 0xfffffff & p_m_smb_id.getLeastSignificantBits();
		m_presentation = p_m_presentation;

		setUniqueId(m_smb_id);
		Object[] key = {m_smb_id};
		addInstanceToMap(key);
	}
	static public Semanticmodelbridge_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smb_id, String p_m_presentation,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Semanticmodelbridge_c.class);
		Semanticmodelbridge_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smb_id};
			new_inst = (Semanticmodelbridge_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
				//extract 28 bit value only            
				new_inst.m_smb_idLongBased = 0xfffffff & p_m_smb_id
						.getLeastSignificantBits();
				new_inst.m_presentation = p_m_presentation;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Semanticmodelbridge_c(modelRoot, p_m_smb_id,
					p_m_presentation);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Semanticmodelbridge_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smb_id, String p_m_presentation) {
		InstanceList instances = modelRoot
				.getInstanceList(Semanticmodelbridge_c.class);
		Semanticmodelbridge_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smb_id};
			source = (Semanticmodelbridge_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smb_id = IdAssigner.preprocessUUID(p_m_smb_id);
				//extract 28 bit value only            
				source.m_smb_idLongBased = 0xfffffff & p_m_smb_id
						.getLeastSignificantBits();
				source.m_presentation = p_m_presentation;

				return source;
			}
		}
		// there is no instance matching the id
		Semanticmodelbridge_c new_inst = new Semanticmodelbridge_c(modelRoot,
				p_m_smb_id, p_m_presentation);
		return new_inst;
	}
	public Semanticmodelbridge_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smb_id = idAssigner.createUUID();
		m_presentation = "";
		setUniqueId(m_smb_id);
		Object[] key = {m_smb_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smb_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_smb_id != p_newKey) {

			m_smb_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Semanticmodelbridge_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Semanticmodelbridge_c)) {
			return false;
		}

		Semanticmodelbridge_c me = (Semanticmodelbridge_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmb_id()) || IdAssigner.NULL_UUID
						.equals(((Semanticmodelbridge_c) elem).getSmb_id())) && this != elem)) {
			return false;
		}
		if (!getSmb_id().equals(((Semanticmodelbridge_c) elem).getSmb_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Semanticmodelbridge_c)) {
			return false;
		}

		Semanticmodelbridge_c me = (Semanticmodelbridge_c) elem;
		if (!getSmb_id().equals(((Semanticmodelbridge_c) elem).getSmb_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smb_id;
	private long m_smb_idLongBased;
	private String m_presentation;

	// declare associations referring to this class

	// referred to navigation

	Simplesemanticmodelelement_c backPointer_IsSubtypeSimplesemanticmodelelementIsSubtype_R313;

	public void setSimplesemanticmodelelementOrderInChildListR313(
			Simplesemanticmodelelement_c target, int index) {
		unrelateAcrossR313From(target);
		Simplesemanticmodelelement_c[] elements = Simplesemanticmodelelement_c
				.getManyDIM_SSMEsOnR313(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR313From((Simplesemanticmodelelement_c) elements[i]);
			}
			count++;
		}
		relateAcrossR313To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR313To((Simplesemanticmodelelement_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR313To(Simplesemanticmodelelement_c target) {
		if (target != null) {
			target.relateAcrossR313To(this, true);
		}
	}

	public void relateAcrossR313To(Simplesemanticmodelelement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR313To(this, notifyChanges);
		}
	}

	public void setBackPointerR313To(Simplesemanticmodelelement_c target) {
		backPointer_IsSubtypeSimplesemanticmodelelementIsSubtype_R313 = target;
	}

	public void unrelateAcrossR313From(Simplesemanticmodelelement_c target) {
		if (target != null) {
			target.unrelateAcrossR313From(this, true);
		}
	}

	public void unrelateAcrossR313From(Simplesemanticmodelelement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR313From(this, notifyChanges);
		}
	}

	public void clearBackPointerR313To(Simplesemanticmodelelement_c target) {
		if (target == backPointer_IsSubtypeSimplesemanticmodelelementIsSubtype_R313) {
			backPointer_IsSubtypeSimplesemanticmodelelementIsSubtype_R313 = null;
		}
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Simplesemanticmodelelement_c[] targets) {
		return getOneDIM_SMBOnR313(targets, null);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Simplesemanticmodelelement_c[] targets, ClassQueryInterface_c test) {
		return getOneDIM_SMBOnR313(targets, test, true);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Simplesemanticmodelelement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Semanticmodelbridge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Semanticmodelbridge_c candidate_val = getOneDIM_SMBOnR313(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneDIM_SMBOnR313(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Simplesemanticmodelelement_c target) {
		return getOneDIM_SMBOnR313(target, true);
	}
	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Simplesemanticmodelelement_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeSemanticmodelbridge;
		} else {
			return null;
		}
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Simplesemanticmodelelement_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR313(targets, test, true);
	}

	public static Semanticmodelbridge_c [] getManyDIM_SMBsOnR313(Simplesemanticmodelelement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Semanticmodelbridge_c[0];
  
  
  LinkedHashSet<Semanticmodelbridge_c> elementsSet = new LinkedHashSet<Semanticmodelbridge_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeSemanticmodelbridge == null)
	  targets[i].loadProxy();
    Semanticmodelbridge_c associate = targets[i].IsSupertypeSemanticmodelbridge;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Simplesemanticmodelelement_c[] targets) {
		return getManyDIM_SMBsOnR313(targets, null);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Simplesemanticmodelelement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			Simplesemanticmodelelement_c[] targetArray = new Simplesemanticmodelelement_c[1];
			targetArray[0] = target;
			return getManyDIM_SMBsOnR313(targetArray, test, loadComponent);
		} else {
			Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[0];
			return result;
		}

	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Simplesemanticmodelelement_c target, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR313(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Simplesemanticmodelelement_c target) {
		return getManyDIM_SMBsOnR313(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Simplesemanticmodelelement_c target, boolean loadComponent) {
		return getManyDIM_SMBsOnR313(target, null, loadComponent);
	}

	// referred to navigation

	Coresemanticmodelbridge_c backPointer_IsSubtypeCoresemanticmodelbridgeIsSubtype_R313;

	public void setCoresemanticmodelbridgeOrderInChildListR313(
			Coresemanticmodelbridge_c target, int index) {
		unrelateAcrossR313From(target);
		Coresemanticmodelbridge_c[] elements = Coresemanticmodelbridge_c
				.getManyDIM_CSMBsOnR313(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR313From((Coresemanticmodelbridge_c) elements[i]);
			}
			count++;
		}
		relateAcrossR313To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR313To((Coresemanticmodelbridge_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR313To(Coresemanticmodelbridge_c target) {
		if (target != null) {
			target.relateAcrossR313To(this, true);
		}
	}

	public void relateAcrossR313To(Coresemanticmodelbridge_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR313To(this, notifyChanges);
		}
	}

	public void setBackPointerR313To(Coresemanticmodelbridge_c target) {
		backPointer_IsSubtypeCoresemanticmodelbridgeIsSubtype_R313 = target;
	}

	public void unrelateAcrossR313From(Coresemanticmodelbridge_c target) {
		if (target != null) {
			target.unrelateAcrossR313From(this, true);
		}
	}

	public void unrelateAcrossR313From(Coresemanticmodelbridge_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR313From(this, notifyChanges);
		}
	}

	public void clearBackPointerR313To(Coresemanticmodelbridge_c target) {
		if (target == backPointer_IsSubtypeCoresemanticmodelbridgeIsSubtype_R313) {
			backPointer_IsSubtypeCoresemanticmodelbridgeIsSubtype_R313 = null;
		}
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Coresemanticmodelbridge_c[] targets) {
		return getOneDIM_SMBOnR313(targets, null);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Coresemanticmodelbridge_c[] targets, ClassQueryInterface_c test) {
		return getOneDIM_SMBOnR313(targets, test, true);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Coresemanticmodelbridge_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Semanticmodelbridge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Semanticmodelbridge_c candidate_val = getOneDIM_SMBOnR313(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneDIM_SMBOnR313(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Coresemanticmodelbridge_c target) {
		return getOneDIM_SMBOnR313(target, true);
	}
	public static Semanticmodelbridge_c getOneDIM_SMBOnR313(
			Coresemanticmodelbridge_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeSemanticmodelbridge;
		} else {
			return null;
		}
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Coresemanticmodelbridge_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR313(targets, test, true);
	}

	public static Semanticmodelbridge_c [] getManyDIM_SMBsOnR313(Coresemanticmodelbridge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Semanticmodelbridge_c[0];
  
  
  LinkedHashSet<Semanticmodelbridge_c> elementsSet = new LinkedHashSet<Semanticmodelbridge_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeSemanticmodelbridge == null)
	  targets[i].loadProxy();
    Semanticmodelbridge_c associate = targets[i].IsSupertypeSemanticmodelbridge;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Coresemanticmodelbridge_c[] targets) {
		return getManyDIM_SMBsOnR313(targets, null);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Coresemanticmodelbridge_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			Coresemanticmodelbridge_c[] targetArray = new Coresemanticmodelbridge_c[1];
			targetArray[0] = target;
			return getManyDIM_SMBsOnR313(targetArray, test, loadComponent);
		} else {
			Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[0];
			return result;
		}

	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Coresemanticmodelbridge_c target, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR313(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Coresemanticmodelbridge_c target) {
		return getManyDIM_SMBsOnR313(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR313(
			Coresemanticmodelbridge_c target, boolean loadComponent) {
		return getManyDIM_SMBsOnR313(target, null, loadComponent);
	}

	// referred to navigation

	Diagram_c backPointer_ContainerDiagramContainer_R317;

	public void setDiagramOrderInChildListR317(Diagram_c target, int index) {
		unrelateAcrossR317From(target);
		Diagram_c[] elements = Diagram_c.getManyDIM_DIAsOnR317(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR317From((Diagram_c) elements[i]);
			}
			count++;
		}
		relateAcrossR317To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR317To((Diagram_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR317To(Diagram_c target) {
		if (target != null) {
			target.relateAcrossR317To(this, true);
		}
	}

	public void relateAcrossR317To(Diagram_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR317To(this, notifyChanges);
		}
	}

	public void setBackPointerR317To(Diagram_c target) {
		backPointer_ContainerDiagramContainer_R317 = target;
	}

	public void unrelateAcrossR317From(Diagram_c target) {
		if (target != null) {
			target.unrelateAcrossR317From(this, true);
		}
	}

	public void unrelateAcrossR317From(Diagram_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR317From(this, notifyChanges);
		}
	}

	public void clearBackPointerR317To(Diagram_c target) {
		if (target == backPointer_ContainerDiagramContainer_R317) {
			backPointer_ContainerDiagramContainer_R317 = null;
		}
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR317(Diagram_c[] targets) {
		return getOneDIM_SMBOnR317(targets, null);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR317(
			Diagram_c[] targets, ClassQueryInterface_c test) {
		return getOneDIM_SMBOnR317(targets, test, true);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR317(
			Diagram_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Semanticmodelbridge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Semanticmodelbridge_c candidate_val = getOneDIM_SMBOnR317(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneDIM_SMBOnR317(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR317(Diagram_c target) {
		return getOneDIM_SMBOnR317(target, true);
	}
	public static Semanticmodelbridge_c getOneDIM_SMBOnR317(Diagram_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.NamespaceSemanticmodelbridge;
		} else {
			return null;
		}
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR317(
			Diagram_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR317(targets, test, true);
	}

	public static Semanticmodelbridge_c [] getManyDIM_SMBsOnR317(Diagram_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Semanticmodelbridge_c[0];
  
  
  LinkedHashSet<Semanticmodelbridge_c> elementsSet = new LinkedHashSet<Semanticmodelbridge_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].NamespaceSemanticmodelbridge == null)
	  targets[i].loadProxy();
    Semanticmodelbridge_c associate = targets[i].NamespaceSemanticmodelbridge;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR317(
			Diagram_c[] targets) {
		return getManyDIM_SMBsOnR317(targets, null);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR317(
			Diagram_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Diagram_c[] targetArray = new Diagram_c[1];
			targetArray[0] = target;
			return getManyDIM_SMBsOnR317(targetArray, test, loadComponent);
		} else {
			Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[0];
			return result;
		}

	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR317(
			Diagram_c target, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR317(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR317(Diagram_c target) {
		return getManyDIM_SMBsOnR317(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR317(
			Diagram_c target, boolean loadComponent) {
		return getManyDIM_SMBsOnR317(target, null, loadComponent);
	}

	// referred to navigation

	Graphelement_c backPointer_ElementGraphelementElement_R312;

	public void setGraphelementOrderInChildListR312(Graphelement_c target,
			int index) {
		unrelateAcrossR312From(target);
		Graphelement_c[] elements = Graphelement_c.getManyDIM_GEsOnR312(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR312From((Graphelement_c) elements[i]);
			}
			count++;
		}
		relateAcrossR312To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR312To((Graphelement_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR312To(Graphelement_c target) {
		if (target != null) {
			target.relateAcrossR312To(this, true);
		}
	}

	public void relateAcrossR312To(Graphelement_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR312To(this, notifyChanges);
		}
	}

	public void setBackPointerR312To(Graphelement_c target) {
		backPointer_ElementGraphelementElement_R312 = target;
	}

	public void unrelateAcrossR312From(Graphelement_c target) {
		if (target != null) {
			target.unrelateAcrossR312From(this, true);
		}
	}

	public void unrelateAcrossR312From(Graphelement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR312From(this, notifyChanges);
		}
	}

	public void clearBackPointerR312To(Graphelement_c target) {
		if (target == backPointer_ElementGraphelementElement_R312) {
			backPointer_ElementGraphelementElement_R312 = null;
		}
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR312(
			Graphelement_c[] targets) {
		return getOneDIM_SMBOnR312(targets, null);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR312(
			Graphelement_c[] targets, ClassQueryInterface_c test) {
		return getOneDIM_SMBOnR312(targets, test, true);
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR312(
			Graphelement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Semanticmodelbridge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Semanticmodelbridge_c candidate_val = getOneDIM_SMBOnR312(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneDIM_SMBOnR312(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Semanticmodelbridge_c getOneDIM_SMBOnR312(
			Graphelement_c target) {
		return getOneDIM_SMBOnR312(target, true);
	}
	public static Semanticmodelbridge_c getOneDIM_SMBOnR312(
			Graphelement_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.SemanticModelSemanticmodelbridge;
		} else {
			return null;
		}
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR312(
			Graphelement_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR312(targets, test, true);
	}

	public static Semanticmodelbridge_c [] getManyDIM_SMBsOnR312(Graphelement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Semanticmodelbridge_c[0];
  
  
  LinkedHashSet<Semanticmodelbridge_c> elementsSet = new LinkedHashSet<Semanticmodelbridge_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SemanticModelSemanticmodelbridge == null)
	  targets[i].loadProxy();
    Semanticmodelbridge_c associate = targets[i].SemanticModelSemanticmodelbridge;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR312(
			Graphelement_c[] targets) {
		return getManyDIM_SMBsOnR312(targets, null);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR312(
			Graphelement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			Graphelement_c[] targetArray = new Graphelement_c[1];
			targetArray[0] = target;
			return getManyDIM_SMBsOnR312(targetArray, test, loadComponent);
		} else {
			Semanticmodelbridge_c[] result = new Semanticmodelbridge_c[0];
			return result;
		}

	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR312(
			Graphelement_c target, ClassQueryInterface_c test) {
		return getManyDIM_SMBsOnR312(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR312(
			Graphelement_c target) {
		return getManyDIM_SMBsOnR312(target, null, true);
	}

	public static Semanticmodelbridge_c[] getManyDIM_SMBsOnR312(
			Graphelement_c target, boolean loadComponent) {
		return getManyDIM_SMBsOnR312(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
	}
	public void batchUnrelate(boolean notifyChanges) {
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots, boolean relateProxies) {

		// class has no referential attributes

	}

	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Semanticmodelbridge_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Semanticmodelbridge_c SemanticmodelbridgeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		Semanticmodelbridge_c result = findSemanticmodelbridgeInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static Semanticmodelbridge_c findSemanticmodelbridgeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Semanticmodelbridge_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Semanticmodelbridge_c x = (Semanticmodelbridge_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Semanticmodelbridge_c SemanticmodelbridgeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SemanticmodelbridgeInstance(modelRoot, test, true);
	}

	public static Semanticmodelbridge_c SemanticmodelbridgeInstance(
			ModelRoot modelRoot) {
		return SemanticmodelbridgeInstance(modelRoot, null, true);
	}

	public static Semanticmodelbridge_c[] SemanticmodelbridgeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Semanticmodelbridge_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Semanticmodelbridge_c x = (Semanticmodelbridge_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Semanticmodelbridge_c[] ret_set = new Semanticmodelbridge_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Semanticmodelbridge_c[0];
			}
		}
	}
	public static Semanticmodelbridge_c[] SemanticmodelbridgeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SemanticmodelbridgeInstances(modelRoot, test, true);
	}
	public static Semanticmodelbridge_c[] SemanticmodelbridgeInstances(
			ModelRoot modelRoot) {
		return SemanticmodelbridgeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the SemanticModelBridge.dispose call: ";
		Simplesemanticmodelelement_c testR313Inst1 = Simplesemanticmodelelement_c
				.getOneDIM_SSMEOnR313(this, false);

		if (testR313Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "313 ";
		}
		Coresemanticmodelbridge_c testR313Inst2 = Coresemanticmodelbridge_c
				.getOneDIM_CSMBOnR313(this, false);

		if (testR313Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "313 ";
		}
		Diagram_c testR317Inst = Diagram_c.getOneDIM_DIAOnR317(this, false);

		if (testR317Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "317 ";
		}
		Graphelement_c testR312Inst = Graphelement_c.getOneDIM_GEOnR312(this,
				false);

		if (testR312Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "312 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE,
						"SemanticModelBridge", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smb_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getSmb_idLongBased() {
		if (m_smb_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_smb_id)) {
			return 0xfffffff & m_smb_id.getLeastSignificantBits();
		}
		return m_smb_idLongBased;
	}
	public java.util.UUID getSmb_id() {
		return m_smb_id;
	}

	public void setSmb_id(java.util.UUID newValue) {
		m_smb_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getPresentation() {
		return m_presentation;
	}

	public void setPresentation(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_presentation)) {
				return;
			}
		} else if (m_presentation != null) {
			if (m_presentation.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Presentation", m_presentation, newValue, true);
		m_presentation = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SemanticModelBridge", //$NON-NLS-1$
						" Operation entered: SemanticModelBridge::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Semanticmodelbridge_c[] objs = Semanticmodelbridge_c
				.SemanticmodelbridgeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "SemanticModelBridge", //$NON-NLS-1$
				" Operation entered: SemanticModelBridge::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Semanticmodelbridge_c_test21685_c
				implements
					ClassQueryInterface_c {
			Semanticmodelbridge_c_test21685_c(java.util.UUID p21686) {
				m_p21686 = p21686;
			}
			private java.util.UUID m_p21686;
			public boolean evaluate(Object candidate) {
				Semanticmodelbridge_c selected = (Semanticmodelbridge_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21686));
				return retval;
			}
		}

		Semanticmodelbridge_c[] objs21684 = Semanticmodelbridge_c
				.SemanticmodelbridgeInstances(modelRoot,
						new Semanticmodelbridge_c_test21685_c(getSmb_id()));

		if (((objs21684.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"SemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: SemanticModelBridge: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21684.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: SemanticModelBridge: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21684.length), e);
			}
			retval = false;

		}

		if (((objs21684.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"SemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: SemanticModelBridge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21684.length)
										+ " Smb_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: SemanticModelBridge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21684.length)
										+ " Smb_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 313
		int objs21689 = 0;
		// Subtype Object: SimpleSemanticModelElement
		class Simplesemanticmodelelement_c_test21690_c
				implements
					ClassQueryInterface_c {
			Simplesemanticmodelelement_c_test21690_c(java.util.UUID p21691) {
				m_p21691 = p21691;
			}
			private java.util.UUID m_p21691;
			public boolean evaluate(Object candidate) {
				Simplesemanticmodelelement_c selected = (Simplesemanticmodelelement_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21691));
				return retval;
			}
		}

		Simplesemanticmodelelement_c[] objs21692 = Simplesemanticmodelelement_c
				.SimplesemanticmodelelementInstances(modelRoot,
						new Simplesemanticmodelelement_c_test21690_c(
								getSmb_id()));

		objs21689 = objs21689 + objs21692.length;
		// Subtype Object: CoreSemanticModelBridge
		class Coresemanticmodelbridge_c_test21693_c
				implements
					ClassQueryInterface_c {
			Coresemanticmodelbridge_c_test21693_c(java.util.UUID p21694) {
				m_p21694 = p21694;
			}
			private java.util.UUID m_p21694;
			public boolean evaluate(Object candidate) {
				Coresemanticmodelbridge_c selected = (Coresemanticmodelbridge_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21694));
				return retval;
			}
		}

		Coresemanticmodelbridge_c[] objs21695 = Coresemanticmodelbridge_c
				.CoresemanticmodelbridgeInstances(modelRoot,
						new Coresemanticmodelbridge_c_test21693_c(getSmb_id()));

		objs21689 = objs21689 + objs21695.length;
		if (objs21689 != 1) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"SemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: SemanticModelBridge: Association: 313: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21689)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: SemanticModelBridge: Association: 313: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21689), e);
			}
			retval = false;

		}

		// SemanticModelBridge is a participating class in association: rel.Numb = 317
		// Object: Diagram
		class Diagram_c_test21697_c implements ClassQueryInterface_c {
			Diagram_c_test21697_c(java.util.UUID p21698) {
				m_p21698 = p21698;
			}
			private java.util.UUID m_p21698;
			public boolean evaluate(Object candidate) {
				Diagram_c selected = (Diagram_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21698));
				return retval;
			}
		}

		Diagram_c[] objs21696 = Diagram_c.DiagramInstances(modelRoot,
				new Diagram_c_test21697_c(getSmb_id()));

		if (((objs21696.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"SemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: SemanticModelBridge: Association: 317: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21696.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: SemanticModelBridge: Association: 317: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21696.length), e);
			}
			retval = false;

		}

		// SemanticModelBridge is a participating class in association: rel.Numb = 312
		// Object: GraphElement
		class Graphelement_c_test21700_c implements ClassQueryInterface_c {
			Graphelement_c_test21700_c(java.util.UUID p21701) {
				m_p21701 = p21701;
			}
			private java.util.UUID m_p21701;
			public boolean evaluate(Object candidate) {
				Graphelement_c selected = (Graphelement_c) candidate;
				boolean retval = false;
				retval = (selected.getSmb_id().equals(m_p21701));
				return retval;
			}
		}

		Graphelement_c[] objs21699 = Graphelement_c.GraphelementInstances(
				modelRoot, new Graphelement_c_test21700_c(getSmb_id()));

		if (((objs21699.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"SemanticModelBridge", //$NON-NLS-1$
								"Consistency: Object: SemanticModelBridge: Association: 312: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21699.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: SemanticModelBridge: Association: 312: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21699.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end SemanticModelBridge
