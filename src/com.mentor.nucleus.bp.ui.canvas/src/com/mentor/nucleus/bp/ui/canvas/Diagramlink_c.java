package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Diagramlink_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_DIAGRAMLINK extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Diagramlink_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Diagramlink_c(ModelRoot modelRoot, java.util.UUID p_m_link_id,
			float p_m_zoom, float p_m_viewportx, float p_m_viewporty,
			java.util.UUID p_m_container_elementid,
			java.util.UUID p_m_diagram_diagramid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
		//extract 28 bit value only            
		m_link_idLongBased = 0xfffffff & p_m_link_id.getLeastSignificantBits();
		m_zoom = p_m_zoom;
		m_viewportx = p_m_viewportx;
		m_viewporty = p_m_viewporty;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_container_elementid = IdAssigner
				.preprocessUUID(p_m_container_elementid);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_diagram_diagramid = IdAssigner.preprocessUUID(p_m_diagram_diagramid);

		setUniqueId(m_link_id);
		Object[] key = {m_link_id};
		addInstanceToMap(key);
	}
	static public Diagramlink_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_link_id, float p_m_zoom, float p_m_viewportx,
			float p_m_viewporty, java.util.UUID p_m_container_elementid,
			java.util.UUID p_m_diagram_diagramid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);
		Diagramlink_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_link_id};
			new_inst = (Diagramlink_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
				//extract 28 bit value only            
				new_inst.m_link_idLongBased = 0xfffffff & p_m_link_id
						.getLeastSignificantBits();
				new_inst.m_zoom = p_m_zoom;
				new_inst.m_viewportx = p_m_viewportx;
				new_inst.m_viewporty = p_m_viewporty;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_container_elementid = IdAssigner
						.preprocessUUID(p_m_container_elementid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_diagram_diagramid = IdAssigner
						.preprocessUUID(p_m_diagram_diagramid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Diagramlink_c(modelRoot, p_m_link_id, p_m_zoom,
					p_m_viewportx, p_m_viewporty, p_m_container_elementid,
					p_m_diagram_diagramid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Diagramlink_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_link_id, float p_m_zoom, float p_m_viewportx,
			float p_m_viewporty, java.util.UUID p_m_container_elementid,
			java.util.UUID p_m_diagram_diagramid) {
		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);
		Diagramlink_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_link_id};
			source = (Diagramlink_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
				//extract 28 bit value only            
				source.m_link_idLongBased = 0xfffffff & p_m_link_id
						.getLeastSignificantBits();
				source.m_zoom = p_m_zoom;
				source.m_viewportx = p_m_viewportx;
				source.m_viewporty = p_m_viewporty;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_container_elementid = IdAssigner
						.preprocessUUID(p_m_container_elementid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_diagram_diagramid = IdAssigner
						.preprocessUUID(p_m_diagram_diagramid);

				return source;
			}
		}
		// there is no instance matching the id
		Diagramlink_c new_inst = new Diagramlink_c(modelRoot, p_m_link_id,
				p_m_zoom, p_m_viewportx, p_m_viewporty,
				p_m_container_elementid, p_m_diagram_diagramid);
		return new_inst;
	}
	public Diagramlink_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_link_id = idAssigner.createUUID();
		m_container_elementid = IdAssigner.NULL_UUID;
		m_diagram_diagramid = IdAssigner.NULL_UUID;
		setUniqueId(m_link_id);
		Object[] key = {m_link_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_link_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_link_id != p_newKey) {

			m_link_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Diagramlink_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Diagramlink_c)) {
			return false;
		}

		Diagramlink_c me = (Diagramlink_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getLink_id()) || IdAssigner.NULL_UUID
						.equals(((Diagramlink_c) elem).getLink_id())) && this != elem)) {
			return false;
		}
		if (!getLink_id().equals(((Diagramlink_c) elem).getLink_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Diagramlink_c)) {
			return false;
		}

		Diagramlink_c me = (Diagramlink_c) elem;
		if (!getLink_id().equals(((Diagramlink_c) elem).getLink_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_link_id;
	private long m_link_idLongBased;
	private float m_zoom;
	private float m_viewportx;
	private float m_viewporty;
	private java.util.UUID m_container_elementid;
	private java.util.UUID m_diagram_diagramid;

	// declare association references from this class

	// referring navigation

	Graphelement_c ContainerGraphelement;
	public void relateAcrossR309To(Graphelement_c target) {
		relateAcrossR309To(target, true);
	}
	public void relateAcrossR309To(Graphelement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainerGraphelement)
			return; // already related

		if (ContainerGraphelement != target) {

			Object oldKey = getInstanceKey();

			if (ContainerGraphelement != null) {

				ContainerGraphelement.clearBackPointerR309To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Diagramlink_c.relateAcrossR309To(Graphelement_c target)",
									"Relate performed across R309 from DiagramLink to GraphElement without unrelate of prior instance.");
				}
			}

			ContainerGraphelement = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_container_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR309To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "309", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR309From(Graphelement_c target) {
		unrelateAcrossR309From(target, true);
	}
	public void unrelateAcrossR309From(Graphelement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainerGraphelement == null)
			return; // already unrelated

		if (target != ContainerGraphelement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R309",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR309To(this);
		}

		if (ContainerGraphelement != null) {

			m_container_elementid = ContainerGraphelement.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_container_elementid)) {
				m_container_elementid = ContainerGraphelement
						.getElementidCachedValue();
			}
			ContainerGraphelement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "309", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(Graphelement_c[] targets) {
		return getOneDIM_DLKOnR309(targets, null);
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(Graphelement_c[] targets,
			ClassQueryInterface_c test) {
		Diagramlink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_DLKOnR309(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(Graphelement_c target) {
		return getOneDIM_DLKOnR309(target, null);
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(Graphelement_c target,
			boolean loadComponent) {
		return getOneDIM_DLKOnR309(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(Graphelement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_DLKOnR309(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(ModelRoot modelRoot,
			Graphelement_c target, ClassQueryInterface_c test) {
		return getOneDIM_DLKOnR309(modelRoot, target, test, true);
	}

	public static Diagramlink_c getOneDIM_DLKOnR309(ModelRoot modelRoot,
			Graphelement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneDIM_DLKOnR309(modelRoot, target, test);
	}
	private static Diagramlink_c find_getOneDIM_DLKOnR309(ModelRoot modelRoot,
			Graphelement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_LinkDiagramlinkLink_R309) {
				for (int i = 0; i < target.backPointer_LinkDiagramlinkLink_R309
						.size(); ++i) {
					Diagramlink_c source = (Diagramlink_c) target.backPointer_LinkDiagramlinkLink_R309
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR309(Graphelement_c[] targets) {
		return getManyDIM_DLKsOnR309(targets, null);
	}
	public static Diagramlink_c[] getManyDIM_DLKsOnR309(
			Graphelement_c[] targets, boolean loadComponent) {
		return getManyDIM_DLKsOnR309(targets, null, loadComponent);
	}
	public static Diagramlink_c[] getManyDIM_DLKsOnR309(
			Graphelement_c[] targets, ClassQueryInterface_c test) {
		return getManyDIM_DLKsOnR309(targets, test, true);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR309(
			Graphelement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Diagramlink_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_LinkDiagramlinkLink_R309) {
				for (int j = 0; j < targets[i].backPointer_LinkDiagramlinkLink_R309
						.size(); ++j) {
					Diagramlink_c source = (Diagramlink_c) targets[i].backPointer_LinkDiagramlinkLink_R309
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Diagramlink_c[] ret_set = new Diagramlink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Diagramlink_c[0];
		}
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR309(Graphelement_c target) {
		return getManyDIM_DLKsOnR309(target, null);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR309(Graphelement_c target,
			boolean loadComponent) {
		return getManyDIM_DLKsOnR309(target, null, loadComponent);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR309(Graphelement_c target,
			ClassQueryInterface_c test) {
		return getManyDIM_DLKsOnR309(target, test, true);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR309(Graphelement_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Diagramlink_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_LinkDiagramlinkLink_R309) {
			for (int i = 0; i < target.backPointer_LinkDiagramlinkLink_R309
					.size(); ++i) {
				Diagramlink_c source = (Diagramlink_c) target.backPointer_LinkDiagramlinkLink_R309
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Diagramlink_c[] ret_set = new Diagramlink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Diagramlink_c[0];
		}
	}

	// referring navigation

	Diagram_c DiagramDiagram;
	public void relateAcrossR316To(Diagram_c target) {
		relateAcrossR316To(target, true);
	}
	public void relateAcrossR316To(Diagram_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == DiagramDiagram)
			return; // already related

		if (DiagramDiagram != target) {

			Object oldKey = getInstanceKey();

			if (DiagramDiagram != null) {

				DiagramDiagram.clearBackPointerR316To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Diagramlink_c.relateAcrossR316To(Diagram_c target)",
									"Relate performed across R316 from DiagramLink to Diagram without unrelate of prior instance.");
				}
			}

			DiagramDiagram = target;
			m_diagram_diagramid = target.getDiagramid();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR316To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "316", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR316From(Diagram_c target) {
		unrelateAcrossR316From(target, true);
	}
	public void unrelateAcrossR316From(Diagram_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (DiagramDiagram == null)
			return; // already unrelated

		if (target != DiagramDiagram) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R316",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR316To(this);
		}

		if (DiagramDiagram != null) {

			m_diagram_diagramid = DiagramDiagram.getDiagramid();
			DiagramDiagram = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "316", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(Diagram_c[] targets) {
		return getOneDIM_DLKOnR316(targets, null);
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(Diagram_c[] targets,
			ClassQueryInterface_c test) {
		Diagramlink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneDIM_DLKOnR316(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(Diagram_c target) {
		return getOneDIM_DLKOnR316(target, null);
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(Diagram_c target,
			boolean loadComponent) {
		return getOneDIM_DLKOnR316(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(Diagram_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneDIM_DLKOnR316(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(ModelRoot modelRoot,
			Diagram_c target, ClassQueryInterface_c test) {
		return getOneDIM_DLKOnR316(modelRoot, target, test, true);
	}

	public static Diagramlink_c getOneDIM_DLKOnR316(ModelRoot modelRoot,
			Diagram_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneDIM_DLKOnR316(modelRoot, target, test);
	}
	private static Diagramlink_c find_getOneDIM_DLKOnR316(ModelRoot modelRoot,
			Diagram_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DiagramLinkDiagramlinkDiagramLink_R316) {
				for (int i = 0; i < target.backPointer_DiagramLinkDiagramlinkDiagramLink_R316
						.size(); ++i) {
					Diagramlink_c source = (Diagramlink_c) target.backPointer_DiagramLinkDiagramlinkDiagramLink_R316
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c[] targets) {
		return getManyDIM_DLKsOnR316(targets, null);
	}
	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c[] targets,
			boolean loadComponent) {
		return getManyDIM_DLKsOnR316(targets, null, loadComponent);
	}
	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c[] targets,
			ClassQueryInterface_c test) {
		return getManyDIM_DLKsOnR316(targets, test, true);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Diagramlink_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DiagramLinkDiagramlinkDiagramLink_R316) {
				for (int j = 0; j < targets[i].backPointer_DiagramLinkDiagramlinkDiagramLink_R316
						.size(); ++j) {
					Diagramlink_c source = (Diagramlink_c) targets[i].backPointer_DiagramLinkDiagramlinkDiagramLink_R316
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Diagramlink_c[] ret_set = new Diagramlink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Diagramlink_c[0];
		}
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c target) {
		return getManyDIM_DLKsOnR316(target, null);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c target,
			boolean loadComponent) {
		return getManyDIM_DLKsOnR316(target, null, loadComponent);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c target,
			ClassQueryInterface_c test) {
		return getManyDIM_DLKsOnR316(target, test, true);
	}

	public static Diagramlink_c[] getManyDIM_DLKsOnR316(Diagram_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Diagramlink_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_DiagramLinkDiagramlinkDiagramLink_R316) {
			for (int i = 0; i < target.backPointer_DiagramLinkDiagramlinkDiagramLink_R316
					.size(); ++i) {
				Diagramlink_c source = (Diagramlink_c) target.backPointer_DiagramLinkDiagramlinkDiagramLink_R316
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Diagramlink_c[] ret_set = new Diagramlink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Diagramlink_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ContainerGraphelement == null) {
			// R309
			Graphelement_c relInst21873 = (Graphelement_c) baseRoot
					.getInstanceList(Graphelement_c.class).get(
							new Object[]{m_container_elementid});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst21873 == null) {
				relInst21873 = (Graphelement_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Graphelement_c.class)
						.get(new Object[]{m_container_elementid});
			}
			//synchronized
			if (relInst21873 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst21873) && !isProxy())) {
					relInst21873.relateAcrossR309To(this, notifyChanges);
				}
			}
		}

		if (DiagramDiagram == null) {
			// R316
			Diagram_c relInst21874 = (Diagram_c) baseRoot.getInstanceList(
					Diagram_c.class).get(new Object[]{m_diagram_diagramid});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst21874 == null) {
				relInst21874 = (Diagram_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Diagram_c.class)
						.get(new Object[]{m_diagram_diagramid});
			}
			//synchronized
			if (relInst21874 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst21874) && !isProxy())) {
					relInst21874.relateAcrossR316To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R309
		// DIM_GE
		inst = ContainerGraphelement;
		unrelateAcrossR309From(ContainerGraphelement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R316
		// DIM_DIA
		inst = DiagramDiagram;
		unrelateAcrossR316From(DiagramDiagram, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Diagramlink_c inst = (Diagramlink_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Diagramlink_c DiagramlinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Diagramlink_c result = findDiagramlinkInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static Diagramlink_c findDiagramlinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Diagramlink_c x = (Diagramlink_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Diagramlink_c DiagramlinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return DiagramlinkInstance(modelRoot, test, true);
	}

	public static Diagramlink_c DiagramlinkInstance(ModelRoot modelRoot) {
		return DiagramlinkInstance(modelRoot, null, true);
	}

	public static Diagramlink_c[] DiagramlinkInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Diagramlink_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Diagramlink_c x = (Diagramlink_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Diagramlink_c[] ret_set = new Diagramlink_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Diagramlink_c[0];
			}
		}
	}
	public static Diagramlink_c[] DiagramlinkInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return DiagramlinkInstances(modelRoot, test, true);
	}
	public static Diagramlink_c[] DiagramlinkInstances(ModelRoot modelRoot) {
		return DiagramlinkInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the DiagramLink.dispose call: ";
		Graphelement_c testR309Inst = Graphelement_c.getOneDIM_GEOnR309(this,
				false);

		if (testR309Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "309 ";
		}
		Diagram_c testR316Inst = Diagram_c.getOneDIM_DIAOnR316(this, false);

		if (testR316Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "316 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "DiagramLink",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("link_id")) {
			return true;
		}
		if (attributeName.equals("container_elementid")) {
			return true;
		}
		if (attributeName.equals("diagram_diagramid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getLink_idLongBased() {
		if (m_link_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_link_id)) {
			return 0xfffffff & m_link_id.getLeastSignificantBits();
		}
		return m_link_idLongBased;
	}
	public java.util.UUID getLink_id() {
		return m_link_id;
	}

	public void setLink_id(java.util.UUID newValue) {
		m_link_id = IdAssigner.preprocessUUID(newValue);
	}
	public float getZoom() {
		return m_zoom;
	}

	public void setZoom(float newValue) {
		if (m_zoom == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Zoom",
				new Float(m_zoom), new Float(newValue), true);

		m_zoom = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getViewportx() {
		return m_viewportx;
	}

	public void setViewportx(float newValue) {
		if (m_viewportx == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Viewportx", new Float(m_viewportx), new Float(newValue), true);

		m_viewportx = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public float getViewporty() {
		return m_viewporty;
	}

	public void setViewporty(float newValue) {
		if (m_viewporty == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Viewporty", new Float(m_viewporty), new Float(newValue), true);

		m_viewporty = newValue;
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getContainer_elementidLongBased() {
		if (ContainerGraphelement != null) {
			return ContainerGraphelement.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getContainer_elementid() {
		if (ContainerGraphelement != null) {
			return ContainerGraphelement.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getContainer_elementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_container_elementid))
			return m_container_elementid;
		else
			return getContainer_elementid();
	}

	public void setContainer_elementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_container_elementid)) {
				return;
			}
		} else if (m_container_elementid != null) {
			if (m_container_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Container_elementid", m_container_elementid, newValue, true);
		m_container_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getDiagram_diagramidLongBased() {
		if (DiagramDiagram != null) {
			return DiagramDiagram.getDiagramidLongBased();
		}
		return 0;
	}
	public java.util.UUID getDiagram_diagramid() {
		if (DiagramDiagram != null) {
			return DiagramDiagram.getDiagramid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDiagram_diagramidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_diagram_diagramid))
			return m_diagram_diagramid;
		else
			return getDiagram_diagramid();
	}

	public void setDiagram_diagramid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_diagram_diagramid)) {
				return;
			}
		} else if (m_diagram_diagramid != null) {
			if (m_diagram_diagramid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Diagram_diagramid", m_diagram_diagramid, newValue, true);
		m_diagram_diagramid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "DiagramLink", //$NON-NLS-1$
				" Operation entered: DiagramLink::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Diagramlink_c[] objs = Diagramlink_c.DiagramlinkInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "DiagramLink", //$NON-NLS-1$
				" Operation entered: DiagramLink::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Diagramlink_c_test21876_c implements ClassQueryInterface_c {
			Diagramlink_c_test21876_c(java.util.UUID p21877) {
				m_p21877 = p21877;
			}
			private java.util.UUID m_p21877;
			public boolean evaluate(Object candidate) {
				Diagramlink_c selected = (Diagramlink_c) candidate;
				boolean retval = false;
				retval = (selected.getLink_id().equals(m_p21877));
				return retval;
			}
		}

		Diagramlink_c[] objs21875 = Diagramlink_c.DiagramlinkInstances(
				modelRoot, new Diagramlink_c_test21876_c(getLink_id()));

		if (((objs21875.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"DiagramLink", //$NON-NLS-1$
								"Consistency: Object: DiagramLink: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs21875.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: DiagramLink: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs21875.length), e);
			}
			retval = false;

		}

		if (((objs21875.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"DiagramLink", //$NON-NLS-1$
								"Consistency: Object: DiagramLink: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21875.length)
										+ " Link_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: DiagramLink: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21875.length)
										+ " Link_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// DiagramLink is a referring class in association: rel.Numb = 309
		// The participating class is: GraphElement
		class Graphelement_c_test21881_c implements ClassQueryInterface_c {
			Graphelement_c_test21881_c(java.util.UUID p21882) {
				m_p21882 = p21882;
			}
			private java.util.UUID m_p21882;
			public boolean evaluate(Object candidate) {
				Graphelement_c selected = (Graphelement_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p21882));
				return retval;
			}
		}

		Graphelement_c[] objs21880 = Graphelement_c.GraphelementInstances(
				modelRoot, new Graphelement_c_test21881_c(
						getContainer_elementid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs21880.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"DiagramLink", //$NON-NLS-1$
								"Consistency: Object: DiagramLink: Association: 309: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21880.length)
										+ " container_elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: DiagramLink: Association: 309: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21880.length)
										+ " container_elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// DiagramLink is a referring class in association: rel.Numb = 316
		// The participating class is: Diagram
		class Diagram_c_test21884_c implements ClassQueryInterface_c {
			Diagram_c_test21884_c(java.util.UUID p21885) {
				m_p21885 = p21885;
			}
			private java.util.UUID m_p21885;
			public boolean evaluate(Object candidate) {
				Diagram_c selected = (Diagram_c) candidate;
				boolean retval = false;
				retval = (selected.getDiagramid().equals(m_p21885));
				return retval;
			}
		}

		Diagram_c[] objs21883 = Diagram_c.DiagramInstances(modelRoot,
				new Diagram_c_test21884_c(getDiagram_diagramid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs21883.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"DiagramLink", //$NON-NLS-1$
								"Consistency: Object: DiagramLink: Association: 316: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs21883.length)
										+ " diagram_diagramId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: DiagramLink: Association: 316: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs21883.length)
										+ " diagram_diagramId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "DiagramLink",
				" Operation entered: Diagramlink::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR316(this);

		if (((v_diagram != null))) {

			this.unrelateAcrossR316From(v_diagram);

		}

		Graphelement_c v_element = Graphelement_c.getOneDIM_GEOnR309(this);

		if (((v_element != null))) {

			this.unrelateAcrossR309From(v_element);

		}

		if (delete()) {
			Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end DiagramLink
