package com.mentor.nucleus.bp.ui.canvas.inspector;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/canvas/inspector/ConnectorInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.core/arc/create_object_inspector.inc
// Version:      $Revision: 1.23 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class Connector_c from the traversal mechanisms that it provides to
// model diff.
//
import com.mentor.nucleus.bp.ui.canvas.*;

import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.CorePlugin;
import com.mentor.nucleus.bp.core.inspector.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import java.util.*;

/**
 * This file adapts the meta-model entity; 'Connector_c' to provide 
 * support of traversing to its children and parents.
 * <p>
 * Do not edit this class, it was created using the Mentor Graphics
 * MC-Java code generator product.
 * </p>
 */
public class ConnectorInspector extends BaseModelClassInspector {

  private String parentAssoc;
  
  public ConnectorInspector(MetadataSortingManager sortingManager){
    super(sortingManager);
  }

  /**
   * @see IModelClassInspector#getParent(Object)
   * Returns the parent(s) of this node
   */
  public Object getParent(Object arg) {
    GraphicalElement_c result1 = GraphicalElement_c.getOneGD_GEOnR2((Connector_c)arg);
     if (result1 != null) {
        return result1;
    }               
        return null;    //No parent found           
  }
  	  
  /**
   * @see IModelClassInspector#getChildRelations(Object)
   * Returns the children of this node
   */
  public ObjectElement[] getChildRelations(Object arg) {
    int resultSize = 0;
    Fillcolorstyle_c [] v_fillcolor = 
Fillcolorstyle_c.getManySTY_FCSsOnR400(
Elementstyle_c.getManySTY_SsOnR401(
GraphicalElement_c.getManyGD_GEsOnR2(
(Connector_c)arg)
)
)
;



    sort(v_fillcolor);
    Linecolorstyle_c [] v_linecolor = 
Linecolorstyle_c.getManySTY_LCSsOnR400(
Elementstyle_c.getManySTY_SsOnR401(
GraphicalElement_c.getManyGD_GEsOnR2(
(Connector_c)arg)
)
)
;



    sort(v_linecolor);
    Waypoint_c [] v_bendpoints = 
Waypoint_c.getManyDIM_WAYsOnR319(
Graphedge_c.getManyDIM_EDsOnR20(
(Connector_c)arg)
)
;



    sort(v_bendpoints);
    FloatingText_c [] v_floatingtext = 
FloatingText_c.getManyGD_CTXTsOnR8(
(Connector_c)arg)
;



    sort(v_floatingtext);
    Graphconnector_c [] v_anchorpoints = 
Graphconnector_c.getManyDIM_CONsOnR311(
Graphelement_c.getManyDIM_GEsOnR301(
Graphedge_c.getManyDIM_EDsOnR20(
(Connector_c)arg)
)
)
;



    sort(v_anchorpoints);
    List<ObjectElement> result = new ArrayList<ObjectElement> ();
    for (int i = 0 ; i < v_fillcolor.length ; i++) {   
        result.add(new ObjectElement("v_fillcolor", ObjectElement.RELATION_ROLE_ELEMENT, v_fillcolor[i], arg, false));
    }
    for (int i = 0 ; i < v_linecolor.length ; i++) {   
        result.add(new ObjectElement("v_linecolor", ObjectElement.RELATION_ROLE_ELEMENT, v_linecolor[i], arg, false));
    }
    for (int i = 0 ; i < v_bendpoints.length ; i++) {   
        result.add(new ObjectElement("v_bendpoints", ObjectElement.RELATION_ROLE_ELEMENT, v_bendpoints[i], arg, false));
    }
    for (int i = 0 ; i < v_floatingtext.length ; i++) {   
        result.add(new ObjectElement("v_floatingtext", ObjectElement.RELATION_ROLE_ELEMENT, v_floatingtext[i], arg, false));
    }
    for (int i = 0 ; i < v_anchorpoints.length ; i++) {   
        result.add(new ObjectElement("v_anchorpoints", ObjectElement.RELATION_ROLE_ELEMENT, v_anchorpoints[i], arg, false));
    }
    return result.toArray(new ObjectElement[result.size()]);
  }
  /**
   * @see IModelClassInspector#hasChildren(Object)
   * Returns true if this node has any children
   */
  public boolean hasChildRelations(Object arg) {
    Fillcolorstyle_c [] v_fillcolor = 
Fillcolorstyle_c.getManySTY_FCSsOnR400(
Elementstyle_c.getManySTY_SsOnR401(
GraphicalElement_c.getManyGD_GEsOnR2(
(Connector_c)arg)
)
)
;



    if (v_fillcolor.length > 0) return true;
    Linecolorstyle_c [] v_linecolor = 
Linecolorstyle_c.getManySTY_LCSsOnR400(
Elementstyle_c.getManySTY_SsOnR401(
GraphicalElement_c.getManyGD_GEsOnR2(
(Connector_c)arg)
)
)
;



    if (v_linecolor.length > 0) return true;
    Waypoint_c [] v_bendpoints = 
Waypoint_c.getManyDIM_WAYsOnR319(
Graphedge_c.getManyDIM_EDsOnR20(
(Connector_c)arg)
)
;



    if (v_bendpoints.length > 0) return true;
    FloatingText_c [] v_floatingtext = 
FloatingText_c.getManyGD_CTXTsOnR8(
(Connector_c)arg)
;



    if (v_floatingtext.length > 0) return true;
    Graphconnector_c [] v_anchorpoints = 
Graphconnector_c.getManyDIM_CONsOnR311(
Graphelement_c.getManyDIM_GEsOnR301(
Graphedge_c.getManyDIM_EDsOnR20(
(Connector_c)arg)
)
)
;



    if (v_anchorpoints.length > 0) return true;
    return false;
  }
  
  public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
  	Object[] details = new Object[4];
	if(details[0] == null && referentialClass == GraphicalElement_c.class) {
		details[0] = GraphicalElement_c.getOneGD_GEOnR23(
Graphelement_c.getOneDIM_GEOnR311(
Graphconnector_c.getOneDIM_CONOnR320(
Graphedge_c.getOneDIM_EDOnR20(
(Connector_c)arg)
)
)
)
;



;
		details[1] = arg;
		details[2] = "23";
		details[3] = "";
	}
	if(details[0] == null && referentialClass == GraphicalElement_c.class) {
		details[0] = GraphicalElement_c.getOneGD_GEOnR23(
Graphelement_c.getOneDIM_GEOnR311(
Graphconnector_c.getOneDIM_CONOnR321(
Graphedge_c.getOneDIM_EDOnR20(
(Connector_c)arg)
)
)
)
;



;
		details[1] = arg;
		details[2] = "23";
		details[3] = "";
	}
	return details;
  }
  
  /**
  * @seee IModelClassInspector#getReferentials(Object)
  * Returns the an array of Role Objects specifying the referenctial attibutes of
  * this model element
  * Role Name: <T_TPS.NameOnly>
  * Role Value: <Chain_result>
  * Role Type: "Referential"
  */
  public ObjectElement[] getReferentials(Object arg) {
     List<ObjectElement> referentials = new ArrayList<ObjectElement>();
        Object referential = GraphicalElement_c.getOneGD_GEOnR23(
Graphelement_c.getOneDIM_GEOnR311(
Graphconnector_c.getOneDIM_CONOnR320(
Graphedge_c.getOneDIM_EDOnR20(
(Connector_c)arg)
)
)
)

;
     referentials.add(new ObjectElement ("referential_Source_Element", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
        referential = GraphicalElement_c.getOneGD_GEOnR23(
Graphelement_c.getOneDIM_GEOnR311(
Graphconnector_c.getOneDIM_CONOnR321(
Graphedge_c.getOneDIM_EDOnR20(
(Connector_c)arg)
)
)
)

;
     referentials.add(new ObjectElement ("referential_Target_Element", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
    return referentials.toArray(new ObjectElement [referentials.size()]);        
  }

  /**
  * @seee IModelClassInspector#getAttributes(Object)
  * Returns the an array of Role objects that give the attibutes of the model 
  * element it self e.g.
  * Role Name: "Name"
  * Role Value: metaModelElement.getName()
  * Role Type: "Primitive"
  */
  public ObjectElement[] getAttributes(Object arg) {
    ObjectElement attrSet[] = new ObjectElement[3];
    ObjectElement compAttrSet[] = new ObjectElement[0];    
    return compAttrSet;
  }

    /**
     * Return configured image if none exists for the element type
     */
    public Image getImage(Object element) {
		Image image = CorePlugin.getImageFor(element, false);
		if(image != null) {
			return image;
		}
		return CorePlugin.getImageFor("metadata/Connector.gif");
	}

  /**
  * Returns a "slot number" to be used when comparing and merging tree elements
  * that contain multiple children.  All model element inspector's contain this 
  * function, but it only returns a value for cases where it a parent element
  * in a tree and the parent has multiple children.
  * 
  * @returns 0 if this is not a "parent" in the tree OR if the parent has less 
  * than 2 children. 
  */
	@Override
	public int getTreeDifferenceSlot(Object element) {
    	if (element instanceof Fillcolorstyle_c) {
			return 1;
		}
    	if (element instanceof Linecolorstyle_c) {
			return 2;
		}
    	if (element instanceof Waypoint_c) {
			return 3;
		}
    	if (element instanceof GraphicalElement_c) {
			return 4;
		}
    	if (element instanceof FloatingText_c) {
			return 5;
		}
    	if (element instanceof Graphconnector_c) {
			return 6;
		}
		return 0;
	}

	}       

