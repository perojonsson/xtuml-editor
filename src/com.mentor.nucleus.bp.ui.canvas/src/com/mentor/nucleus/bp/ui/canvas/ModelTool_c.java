      
package com.mentor.nucleus.bp.ui.canvas ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.ModelTool_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_MODEL_TOOL extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}
  class EV_MODEL_TOOL_ACTIVATE extends EV_MODEL_TOOL
  {
    // supplemental event data
    static final int EVCD_MODEL_TOOL_ACTIVATE = 5 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_ACTIVATE ;
    }
  }
  class EV_MODEL_TOOL_DONE extends EV_MODEL_TOOL
  {
    // supplemental event data
    static final int EVCD_MODEL_TOOL_DONE = 2 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_DONE ;
    }
  }
  class EV_MODEL_TOOL_MOUSE_MOVED extends EV_MODEL_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_MODEL_TOOL_MOUSE_MOVED = 4 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_MOUSE_MOVED ;
    }
  }
  class EV_MODEL_TOOL_MOUSE_PRESSED extends EV_MODEL_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    public boolean      edi_retainselection ;
    static final int EVCD_MODEL_TOOL_MOUSE_PRESSED = 1 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_MOUSE_PRESSED ;
    }
  }
  class EV_MODEL_TOOL_MOUSE_RELEASED extends EV_MODEL_TOOL
  {
    // supplemental event data
    public int          edi_x ;
    public int          edi_y ;
    static final int EVCD_MODEL_TOOL_MOUSE_RELEASED = 3 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_MOUSE_RELEASED ;
    }
  }
  class EV_MODEL_TOOL_DEACTIVATE extends EV_MODEL_TOOL
  {
    // supplemental event data
    static final int EVCD_MODEL_TOOL_DEACTIVATE = 6 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_DEACTIVATE ;
    }
  }
  class EV_MODEL_TOOL_ACTIVATION_PERMITTED extends EV_MODEL_TOOL
  {
    // supplemental event data
    static final int EVCD_MODEL_TOOL_ACTIVATION_PERMITTED = 7 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_ACTIVATION_PERMITTED ;
    }
  }
  class EV_MODEL_TOOL_ACTIVATION_DENIED extends EV_MODEL_TOOL
  {
    // supplemental event data
    static final int EVCD_MODEL_TOOL_ACTIVATION_DENIED = 8 ;
    public final int getEvtcode()
    {
      return EVCD_MODEL_TOOL_ACTIVATION_DENIED ;
    }
  }

public class ModelTool_c extends NonRootModelElement implements timerClient_c, ActiveObject_c, IAdaptable, Cloneable
{
  // Public Constructors
  public ModelTool_c(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       boolean      p_m_active,
       int  p_m_ooa_type,
       boolean      p_m_drawing,
       java.util.UUID         p_m_diagramid)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //extract 28 bit value only            
       m_tool_idLongBased = 0xfffffff & p_m_tool_id.getLeastSignificantBits();
       m_active = p_m_active;
       m_ooa_type = p_m_ooa_type;
       // default value for m_current_state
       m_drawing = p_m_drawing;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
        
    // register with event queue poller
    Activepoller_c.register(this) ;
    setUniqueId(m_tool_id);
    Object [] key = {m_tool_id};
    addInstanceToMap(key);
  }
  static public ModelTool_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       boolean      p_m_active,
       int  p_m_ooa_type,
       boolean      p_m_drawing,
       java.util.UUID         p_m_diagramid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);
      ModelTool_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_tool_id};
          new_inst = (ModelTool_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //extract 28 bit value only            
       new_inst.m_tool_idLongBased = 0xfffffff & p_m_tool_id.getLeastSignificantBits();
       new_inst.m_active = p_m_active;
       new_inst.m_ooa_type = p_m_ooa_type;
       // default value for m_current_state
       new_inst.m_drawing = p_m_drawing;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ModelTool_c(modelRoot,
p_m_tool_id,
p_m_active,
p_m_ooa_type,
p_m_drawing,
p_m_diagramid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ModelTool_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_tool_id,
       boolean      p_m_active,
       int  p_m_ooa_type,
       boolean      p_m_drawing,
       java.util.UUID         p_m_diagramid){
    InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);
    ModelTool_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_tool_id
            };
        source = (ModelTool_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_tool_id = IdAssigner.preprocessUUID(p_m_tool_id);
       //extract 28 bit value only            
       source.m_tool_idLongBased = 0xfffffff & p_m_tool_id.getLeastSignificantBits();
       source.m_active = p_m_active;
       source.m_ooa_type = p_m_ooa_type;
       // default value for m_current_state
       source.m_drawing = p_m_drawing;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_diagramid = IdAssigner.preprocessUUID(p_m_diagramid);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ModelTool_c new_inst = new ModelTool_c(modelRoot,
p_m_tool_id,
p_m_active,
p_m_ooa_type,
p_m_drawing,
p_m_diagramid
);
    return new_inst;
  }
  public ModelTool_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_tool_id = idAssigner.createUUID();
     m_ooa_type = Ooatype_c.OOA_UNINITIALIZED_ENUM;
     m_diagramid = IdAssigner.NULL_UUID;   
    setUniqueId(m_tool_id);
    Object [] key = {m_tool_id};
    addInstanceToMap(key);
    // register with event queue poller
    Activepoller_c.register(this) ;
  }

  public Object getInstanceKey() {
    Object [] key =  {m_tool_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_tool_id !=  p_newKey ){
	
		m_tool_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  


  // Run Entry Point
  public boolean poll()
  {
      if (!eventQueue.isEmpty() || !selfEventQueue.isEmpty())
      { // an event queue is not empty
        procEvent() ;
        return true;
      } else {
        return false;
      }
  }

  public boolean equals (Object elem) {
     if (!(elem instanceof ModelTool_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ModelTool_c)) {
           return false;
       }
       
       ModelTool_c me = (ModelTool_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getTool_id()) || IdAssigner.NULL_UUID.equals(((ModelTool_c)elem).getTool_id())) && this != elem)) {
      	return false;
      }
      if (!getTool_id().equals(((ModelTool_c)elem).getTool_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ModelTool_c)) {
           return false;
       }
       
       ModelTool_c me = (ModelTool_c)elem;
      if (!getTool_id().equals(((ModelTool_c)elem).getTool_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_tool_id ;
  private long m_tool_idLongBased ;
  private boolean      m_active ;
  private int  m_ooa_type ;
  private boolean      m_drawing ;
  private java.util.UUID         m_diagramid ;
      
// declare association references from this class
  
  
    
// referring navigation

Model_c IsAssignedToModel ;
public void relateAcrossR100To(Model_c target)
{
	relateAcrossR100To(target, true);
}
public void relateAcrossR100To(Model_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsAssignedToModel) return;  // already related

    if ( IsAssignedToModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsAssignedToModel != null) {
    
        IsAssignedToModel.clearBackPointerR100To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ModelTool_c.relateAcrossR100To(Model_c target)", 
			"Relate performed across R100 from Model Tool to Model without unrelate of prior instance.");  
		}
    }
                
    	IsAssignedToModel = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDiagramid()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_diagramid = target.getDiagramidCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR100To(this);
        target.addRef();
    }
}
public void unrelateAcrossR100From(Model_c target)
{
	unrelateAcrossR100From(target, true);
}
public void unrelateAcrossR100From(Model_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsAssignedToModel == null) return;  // already unrelated
	
	if (target != IsAssignedToModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R100", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR100To(this);
    }
    

      if(IsAssignedToModel != null) {
      
        m_diagramid = IsAssignedToModel.getDiagramid();
        if(IdAssigner.NULL_UUID.equals(m_diagramid))
        {
          m_diagramid = IsAssignedToModel.getDiagramidCachedValue();
        }       
        IsAssignedToModel = null ;
        target.removeRef();
    }
}

  
    
      
public static ModelTool_c getOneCT_MTLOnR100(Model_c [] targets)
{
    return getOneCT_MTLOnR100(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR100(Model_c [] targets, ClassQueryInterface_c test)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_MTLOnR100(targets[i], test);
        }
    }

    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR100(Model_c target)
{
  return getOneCT_MTLOnR100(target, null);
}

public static ModelTool_c getOneCT_MTLOnR100(Model_c target, boolean loadComponent)
{
    return getOneCT_MTLOnR100(target.getModelRoot(), target, null, loadComponent);
}

public static ModelTool_c getOneCT_MTLOnR100(Model_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_MTLOnR100(target.getModelRoot(), target, test);
  }
  return null;
}

public static ModelTool_c getOneCT_MTLOnR100(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test)
{
	return getOneCT_MTLOnR100(modelRoot, target, test, true);
}

public static ModelTool_c getOneCT_MTLOnR100(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_MTLOnR100(modelRoot,target,test);
}
private static ModelTool_c find_getOneCT_MTLOnR100(ModelRoot modelRoot, Model_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasAssignedModelToolHasAssigned_R100) {
	    for ( int i = 0; i < target.backPointer_HasAssignedModelToolHasAssigned_R100.size(); ++i ) {
	      ModelTool_c source = (ModelTool_c)target.backPointer_HasAssignedModelToolHasAssigned_R100.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c [] targets)
{
  return getManyCT_MTLsOnR100(targets, null);
}
public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c [] targets, boolean loadComponent)
{
  return getManyCT_MTLsOnR100(targets, null, loadComponent);
}
public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR100(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ModelTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasAssignedModelToolHasAssigned_R100) {
	    for (int j = 0; j < targets[i].backPointer_HasAssignedModelToolHasAssigned_R100.size(); ++j) {
	      ModelTool_c source = (ModelTool_c)targets[i].backPointer_HasAssignedModelToolHasAssigned_R100.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ModelTool_c[] ret_set = new ModelTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ModelTool_c[0];
  }
  }

public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c target)
{
  return getManyCT_MTLsOnR100(target, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c target, boolean loadComponent)
{
  return getManyCT_MTLsOnR100(target, null, loadComponent);
}

public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c target, ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR100(target, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR100(Model_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ModelTool_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasAssignedModelToolHasAssigned_R100) {
    for (int i = 0; i < target.backPointer_HasAssignedModelToolHasAssigned_R100.size(); ++i) {
      ModelTool_c source = (ModelTool_c)target.backPointer_HasAssignedModelToolHasAssigned_R100.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ModelTool_c[] ret_set = new ModelTool_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ModelTool_c[0];
	}
  }


  
    
// referring navigation

ElementSpecification_c InstantiatesElementsSpecifiedByElementSpecification ;
public void relateAcrossR103To(ElementSpecification_c target)
{
	relateAcrossR103To(target, true);
}
public void relateAcrossR103To(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == InstantiatesElementsSpecifiedByElementSpecification) return;  // already related

    if ( InstantiatesElementsSpecifiedByElementSpecification != target ) {
    
    Object oldKey = getInstanceKey();

    if (InstantiatesElementsSpecifiedByElementSpecification != null) {
    
        InstantiatesElementsSpecifiedByElementSpecification.clearBackPointerR103To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofgraphics.log.println(ILogger.CONSISTENCY, 
			"ModelTool_c.relateAcrossR103To(ElementSpecification_c target)", 
			"Relate performed across R103 from Model Tool to Element Specification without unrelate of prior instance.");  
		}
    }
                
    	InstantiatesElementsSpecifiedByElementSpecification = target ;
        m_ooa_type = target.getOoa_type();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR103To(this);
        target.addRef();
    }
}
public void unrelateAcrossR103From(ElementSpecification_c target)
{
	unrelateAcrossR103From(target, true);
}
public void unrelateAcrossR103From(ElementSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (InstantiatesElementsSpecifiedByElementSpecification == null) return;  // already unrelated
	
	if (target != InstantiatesElementsSpecifiedByElementSpecification) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CanvasPlugin.logError("Tried to unrelate from non-related instance across R103", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR103To(this);
    }
    

      if(InstantiatesElementsSpecifiedByElementSpecification != null) {
      
        m_ooa_type = InstantiatesElementsSpecifiedByElementSpecification.getOoa_type();
        InstantiatesElementsSpecifiedByElementSpecification = null ;
        target.removeRef();
    }
}

  
    
      
public static ModelTool_c getOneCT_MTLOnR103(ElementSpecification_c [] targets)
{
    return getOneCT_MTLOnR103(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR103(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCT_MTLOnR103(targets[i], test);
        }
    }

    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR103(ElementSpecification_c target)
{
  return getOneCT_MTLOnR103(target, null);
}

public static ModelTool_c getOneCT_MTLOnR103(ElementSpecification_c target, boolean loadComponent)
{
    return getOneCT_MTLOnR103(target.getModelRoot(), target, null, loadComponent);
}

public static ModelTool_c getOneCT_MTLOnR103(ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCT_MTLOnR103(target.getModelRoot(), target, test);
  }
  return null;
}

public static ModelTool_c getOneCT_MTLOnR103(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
	return getOneCT_MTLOnR103(modelRoot, target, test, true);
}

public static ModelTool_c getOneCT_MTLOnR103(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCT_MTLOnR103(modelRoot,target,test);
}
private static ModelTool_c find_getOneCT_MTLOnR103(ModelRoot modelRoot, ElementSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103) {
	    for ( int i = 0; i < target.backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103.size(); ++i ) {
	      ModelTool_c source = (ModelTool_c)target.backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c [] targets)
{
  return getManyCT_MTLsOnR103(targets, null);
}
public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c [] targets, boolean loadComponent)
{
  return getManyCT_MTLsOnR103(targets, null, loadComponent);
}
public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c [] targets, ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR103(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ModelTool_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103) {
	    for (int j = 0; j < targets[i].backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103.size(); ++j) {
	      ModelTool_c source = (ModelTool_c)targets[i].backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ModelTool_c[] ret_set = new ModelTool_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ModelTool_c[0];
  }
  }

public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c target)
{
  return getManyCT_MTLsOnR103(target, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c target, boolean loadComponent)
{
  return getManyCT_MTLsOnR103(target, null, loadComponent);
}

public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c target, ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR103(target, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR103(ElementSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ModelTool_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103) {
    for (int i = 0; i < target.backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103.size(); ++i) {
      ModelTool_c source = (ModelTool_c)target.backPointer_HasElementsInstantiatedByModelToolHasElementsInstantiatedBy_R103.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ModelTool_c[] ret_set = new ModelTool_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ModelTool_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ToolActivationPolicy_c backPointer_ToolActivationPolicy_R109;

public void setToolActivationPolicyOrderInChildListR109(ToolActivationPolicy_c target, int index) {
	unrelateAcrossR109From(target);
	ToolActivationPolicy_c[] elements = ToolActivationPolicy_c.getManyCT_ACTsOnR109(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR109From((ToolActivationPolicy_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR109To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR109To((ToolActivationPolicy_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR109To(ToolActivationPolicy_c target)
{
  if (target != null) {
    target.relateAcrossR109To(this, true) ;
  }
}

public void relateAcrossR109To(ToolActivationPolicy_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR109To(this, notifyChanges) ;
  }
}

public void setBackPointerR109To(ToolActivationPolicy_c target)
{
    backPointer_ToolActivationPolicy_R109 = target;
}

public void unrelateAcrossR109From(ToolActivationPolicy_c target)
{
  if (target != null) {
    target.unrelateAcrossR109From(this, true) ;
  }
}

public void unrelateAcrossR109From(ToolActivationPolicy_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR109From(this, notifyChanges) ;
  }
}

public void clearBackPointerR109To(ToolActivationPolicy_c target)
{
	if (target == backPointer_ToolActivationPolicy_R109) {
		backPointer_ToolActivationPolicy_R109 = null;
	}
}

public static ModelTool_c getOneCT_MTLOnR109(ToolActivationPolicy_c [] targets)
{
    return getOneCT_MTLOnR109(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR109(ToolActivationPolicy_c [] targets, ClassQueryInterface_c test)
{
    return getOneCT_MTLOnR109(targets, test, true);
}

public static ModelTool_c getOneCT_MTLOnR109(ToolActivationPolicy_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ModelTool_c candidate_val = getOneCT_MTLOnR109(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCT_MTLOnR109(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR109(ToolActivationPolicy_c target)
{
	return getOneCT_MTLOnR109(target, true);
}
public static ModelTool_c getOneCT_MTLOnR109(ToolActivationPolicy_c target, boolean loadComponent)
{
  if (target != null) {
    return target.KnowsAsPreviouslyActiveToolModelTool ;
  } else {
    return null;
  }
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR109(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ModelTool_c[0];
  
  
  LinkedHashSet<ModelTool_c> elementsSet = new LinkedHashSet<ModelTool_c>();
  for (int i = 0; i < targets.length; i++) {
    ModelTool_c associate = targets[i].KnowsAsPreviouslyActiveToolModelTool;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ModelTool_c[] result = new ModelTool_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c [] targets)
{
  return getManyCT_MTLsOnR109(targets, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ToolActivationPolicy_c [] targetArray = new ToolActivationPolicy_c[1];
    targetArray[0] = target;
    return getManyCT_MTLsOnR109(targetArray, test, loadComponent);
  } else {
    ModelTool_c [] result = new ModelTool_c [0] ;
    return result ;
  }
  
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c target,
    ClassQueryInterface_c test)
{
    return getManyCT_MTLsOnR109(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c target)
{
    return getManyCT_MTLsOnR109(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR109(ToolActivationPolicy_c target, boolean loadComponent)
{
    return getManyCT_MTLsOnR109(target, null, loadComponent);
}


    
  
  
// referred to navigation

ShapeTool_c backPointer_IsSubtypeShapeToolIsSubtype_R102;

public void setShapeToolOrderInChildListR102(ShapeTool_c target, int index) {
	unrelateAcrossR102From(target);
	ShapeTool_c[] elements = ShapeTool_c.getManyCT_STLsOnR102(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR102From((ShapeTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR102To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR102To((ShapeTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR102To(ShapeTool_c target)
{
  if (target != null) {
    target.relateAcrossR102To(this, true) ;
  }
}

public void relateAcrossR102To(ShapeTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR102To(this, notifyChanges) ;
  }
}

public void setBackPointerR102To(ShapeTool_c target)
{
    backPointer_IsSubtypeShapeToolIsSubtype_R102 = target;
}

public void unrelateAcrossR102From(ShapeTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, true) ;
  }
}

public void unrelateAcrossR102From(ShapeTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, notifyChanges) ;
  }
}

public void clearBackPointerR102To(ShapeTool_c target)
{
	if (target == backPointer_IsSubtypeShapeToolIsSubtype_R102) {
		backPointer_IsSubtypeShapeToolIsSubtype_R102 = null;
	}
}

public static ModelTool_c getOneCT_MTLOnR102(ShapeTool_c [] targets)
{
    return getOneCT_MTLOnR102(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR102(ShapeTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneCT_MTLOnR102(targets, test, true);
}

public static ModelTool_c getOneCT_MTLOnR102(ShapeTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ModelTool_c candidate_val = getOneCT_MTLOnR102(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCT_MTLOnR102(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR102(ShapeTool_c target)
{
	return getOneCT_MTLOnR102(target, true);
}
public static ModelTool_c getOneCT_MTLOnR102(ShapeTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeModelTool ;
  } else {
    return null;
  }
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR102(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ModelTool_c[0];
  
  
  LinkedHashSet<ModelTool_c> elementsSet = new LinkedHashSet<ModelTool_c>();
  for (int i = 0; i < targets.length; i++) {
    ModelTool_c associate = targets[i].IsSupertypeModelTool;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ModelTool_c[] result = new ModelTool_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c [] targets)
{
  return getManyCT_MTLsOnR102(targets, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ShapeTool_c [] targetArray = new ShapeTool_c[1];
    targetArray[0] = target;
    return getManyCT_MTLsOnR102(targetArray, test, loadComponent);
  } else {
    ModelTool_c [] result = new ModelTool_c [0] ;
    return result ;
  }
  
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c target,
    ClassQueryInterface_c test)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c target)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ShapeTool_c target, boolean loadComponent)
{
    return getManyCT_MTLsOnR102(target, null, loadComponent);
}

  
  
  
// referred to navigation

SelectionTool_c backPointer_IsSubtypeSelectionToolIsSubtype_R102;

public void setSelectionToolOrderInChildListR102(SelectionTool_c target, int index) {
	unrelateAcrossR102From(target);
	SelectionTool_c[] elements = SelectionTool_c.getManyCT_SELsOnR102(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR102From((SelectionTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR102To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR102To((SelectionTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR102To(SelectionTool_c target)
{
  if (target != null) {
    target.relateAcrossR102To(this, true) ;
  }
}

public void relateAcrossR102To(SelectionTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR102To(this, notifyChanges) ;
  }
}

public void setBackPointerR102To(SelectionTool_c target)
{
    backPointer_IsSubtypeSelectionToolIsSubtype_R102 = target;
}

public void unrelateAcrossR102From(SelectionTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, true) ;
  }
}

public void unrelateAcrossR102From(SelectionTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, notifyChanges) ;
  }
}

public void clearBackPointerR102To(SelectionTool_c target)
{
	if (target == backPointer_IsSubtypeSelectionToolIsSubtype_R102) {
		backPointer_IsSubtypeSelectionToolIsSubtype_R102 = null;
	}
}

public static ModelTool_c getOneCT_MTLOnR102(SelectionTool_c [] targets)
{
    return getOneCT_MTLOnR102(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR102(SelectionTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneCT_MTLOnR102(targets, test, true);
}

public static ModelTool_c getOneCT_MTLOnR102(SelectionTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ModelTool_c candidate_val = getOneCT_MTLOnR102(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCT_MTLOnR102(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR102(SelectionTool_c target)
{
	return getOneCT_MTLOnR102(target, true);
}
public static ModelTool_c getOneCT_MTLOnR102(SelectionTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeModelTool ;
  } else {
    return null;
  }
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR102(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ModelTool_c[0];
  
  
  LinkedHashSet<ModelTool_c> elementsSet = new LinkedHashSet<ModelTool_c>();
  for (int i = 0; i < targets.length; i++) {
    ModelTool_c associate = targets[i].IsSupertypeModelTool;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ModelTool_c[] result = new ModelTool_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c [] targets)
{
  return getManyCT_MTLsOnR102(targets, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SelectionTool_c [] targetArray = new SelectionTool_c[1];
    targetArray[0] = target;
    return getManyCT_MTLsOnR102(targetArray, test, loadComponent);
  } else {
    ModelTool_c [] result = new ModelTool_c [0] ;
    return result ;
  }
  
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c target,
    ClassQueryInterface_c test)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c target)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(SelectionTool_c target, boolean loadComponent)
{
    return getManyCT_MTLsOnR102(target, null, loadComponent);
}

  
  
  
// referred to navigation

ConnectorTool_c backPointer_IsSubtypeConnectorToolIsSubtype_R102;

public void setConnectorToolOrderInChildListR102(ConnectorTool_c target, int index) {
	unrelateAcrossR102From(target);
	ConnectorTool_c[] elements = ConnectorTool_c.getManyCT_CTLsOnR102(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR102From((ConnectorTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR102To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR102To((ConnectorTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR102To(ConnectorTool_c target)
{
  if (target != null) {
    target.relateAcrossR102To(this, true) ;
  }
}

public void relateAcrossR102To(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR102To(this, notifyChanges) ;
  }
}

public void setBackPointerR102To(ConnectorTool_c target)
{
    backPointer_IsSubtypeConnectorToolIsSubtype_R102 = target;
}

public void unrelateAcrossR102From(ConnectorTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, true) ;
  }
}

public void unrelateAcrossR102From(ConnectorTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, notifyChanges) ;
  }
}

public void clearBackPointerR102To(ConnectorTool_c target)
{
	if (target == backPointer_IsSubtypeConnectorToolIsSubtype_R102) {
		backPointer_IsSubtypeConnectorToolIsSubtype_R102 = null;
	}
}

public static ModelTool_c getOneCT_MTLOnR102(ConnectorTool_c [] targets)
{
    return getOneCT_MTLOnR102(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR102(ConnectorTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneCT_MTLOnR102(targets, test, true);
}

public static ModelTool_c getOneCT_MTLOnR102(ConnectorTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ModelTool_c candidate_val = getOneCT_MTLOnR102(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCT_MTLOnR102(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR102(ConnectorTool_c target)
{
	return getOneCT_MTLOnR102(target, true);
}
public static ModelTool_c getOneCT_MTLOnR102(ConnectorTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeModelTool ;
  } else {
    return null;
  }
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR102(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ModelTool_c[0];
  
  
  LinkedHashSet<ModelTool_c> elementsSet = new LinkedHashSet<ModelTool_c>();
  for (int i = 0; i < targets.length; i++) {
    ModelTool_c associate = targets[i].IsSupertypeModelTool;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ModelTool_c[] result = new ModelTool_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c [] targets)
{
  return getManyCT_MTLsOnR102(targets, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ConnectorTool_c [] targetArray = new ConnectorTool_c[1];
    targetArray[0] = target;
    return getManyCT_MTLsOnR102(targetArray, test, loadComponent);
  } else {
    ModelTool_c [] result = new ModelTool_c [0] ;
    return result ;
  }
  
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c target,
    ClassQueryInterface_c test)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c target)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ConnectorTool_c target, boolean loadComponent)
{
    return getManyCT_MTLsOnR102(target, null, loadComponent);
}

  
  
  
// referred to navigation

ScrollTool_c backPointer_IsSubtypeScrollToolIsSubtype_R102;

public void setScrollToolOrderInChildListR102(ScrollTool_c target, int index) {
	unrelateAcrossR102From(target);
	ScrollTool_c[] elements = ScrollTool_c.getManyCT_SCRsOnR102(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR102From((ScrollTool_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR102To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR102To((ScrollTool_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR102To(ScrollTool_c target)
{
  if (target != null) {
    target.relateAcrossR102To(this, true) ;
  }
}

public void relateAcrossR102To(ScrollTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR102To(this, notifyChanges) ;
  }
}

public void setBackPointerR102To(ScrollTool_c target)
{
    backPointer_IsSubtypeScrollToolIsSubtype_R102 = target;
}

public void unrelateAcrossR102From(ScrollTool_c target)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, true) ;
  }
}

public void unrelateAcrossR102From(ScrollTool_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR102From(this, notifyChanges) ;
  }
}

public void clearBackPointerR102To(ScrollTool_c target)
{
	if (target == backPointer_IsSubtypeScrollToolIsSubtype_R102) {
		backPointer_IsSubtypeScrollToolIsSubtype_R102 = null;
	}
}

public static ModelTool_c getOneCT_MTLOnR102(ScrollTool_c [] targets)
{
    return getOneCT_MTLOnR102(targets, null);
}

public static ModelTool_c getOneCT_MTLOnR102(ScrollTool_c [] targets, ClassQueryInterface_c test)
{
    return getOneCT_MTLOnR102(targets, test, true);
}

public static ModelTool_c getOneCT_MTLOnR102(ScrollTool_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ModelTool_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ModelTool_c candidate_val = getOneCT_MTLOnR102(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCT_MTLOnR102(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ModelTool_c getOneCT_MTLOnR102(ScrollTool_c target)
{
	return getOneCT_MTLOnR102(target, true);
}
public static ModelTool_c getOneCT_MTLOnR102(ScrollTool_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeModelTool ;
  } else {
    return null;
  }
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCT_MTLsOnR102(targets, test, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ModelTool_c[0];
  
  
  LinkedHashSet<ModelTool_c> elementsSet = new LinkedHashSet<ModelTool_c>();
  for (int i = 0; i < targets.length; i++) {
    ModelTool_c associate = targets[i].IsSupertypeModelTool;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ModelTool_c[] result = new ModelTool_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c [] targets)
{
  return getManyCT_MTLsOnR102(targets, null);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ScrollTool_c [] targetArray = new ScrollTool_c[1];
    targetArray[0] = target;
    return getManyCT_MTLsOnR102(targetArray, test, loadComponent);
  } else {
    ModelTool_c [] result = new ModelTool_c [0] ;
    return result ;
  }
  
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c target,
    ClassQueryInterface_c test)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c target)
{
    return getManyCT_MTLsOnR102(target, null, true);
}

public static ModelTool_c [] getManyCT_MTLsOnR102(ScrollTool_c target, boolean loadComponent)
{
    return getManyCT_MTLsOnR102(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsAssignedToModel == null) {          
      // R100
      Model_c relInst22462 = (Model_c) baseRoot.getInstanceList(Model_c.class).get(new Object[] {m_diagramid});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst22462 == null) {
      			relInst22462 = (Model_c) Ooaofooa.getDefaultInstance().getInstanceList(Model_c.class).get(new Object[] {m_diagramid});
      		}
			//synchronized
      if ( relInst22462 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22462) && !isProxy())) {
	      relInst22462.relateAcrossR100To(this, notifyChanges);
	  }
	  }
	}
	          

	if (InstantiatesElementsSpecifiedByElementSpecification == null) {          
      // R103
      baseRoot = Ooaofgraphics.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
	  instances = baseRoot.getInstanceList(ElementSpecification_c.class);
      ElementSpecification_c relInst22463 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ElementSpecification_c source = (ElementSpecification_c)cursor.next() ;
           if (     source.getOoa_type() == m_ooa_type 		){
  		relInst22463 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst22463 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst22463) && !isProxy())) {
	      relInst22463.relateAcrossR103To(this, notifyChanges);
	  }
	  }
          baseRoot = modelRoot;
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R100
      // GD_MD
		  inst=IsAssignedToModel;
			unrelateAcrossR100From(IsAssignedToModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R103
      // GD_ES
		  inst=InstantiatesElementsSpecifiedByElementSpecification;
			unrelateAcrossR103From(InstantiatesElementsSpecifiedByElementSpecification, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ModelTool_c inst = (ModelTool_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ModelTool_c ModelToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ModelTool_c result=findModelToolInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static ModelTool_c findModelToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ModelTool_c x = (ModelTool_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static ModelTool_c ModelToolInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ModelToolInstance(modelRoot,test,true);
  }
  
  public static ModelTool_c ModelToolInstance(ModelRoot modelRoot)
  {
	 return ModelToolInstance(modelRoot,null,true);
  }

  public static ModelTool_c [] ModelToolInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(ModelTool_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ModelTool_c x = (ModelTool_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ModelTool_c[] ret_set = new ModelTool_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ModelTool_c[0];
			}		
		} 
  }
  public static ModelTool_c [] ModelToolInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ModelToolInstances(modelRoot,test,true);
  }
  public static ModelTool_c [] ModelToolInstances(ModelRoot modelRoot)
  {
	return ModelToolInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
    Activepoller_c.unRegister(this) ;
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Model Tool.dispose call: ";
	Model_c testR100Inst = Model_c.getOneGD_MDOnR100(this, false);

	if ( testR100Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "100 ";
	}
	ElementSpecification_c testR103Inst = ElementSpecification_c.getOneGD_ESOnR103(this, false);

	if ( testR103Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "103 ";
	}
	ToolActivationPolicy_c testR109Inst = ToolActivationPolicy_c.getOneCT_ACTOnR109(this, false);

	if ( testR109Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "109 ";	
	}
	ShapeTool_c testR102Inst1 = ShapeTool_c.getOneCT_STLOnR102(this, false);

	if ( testR102Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "102 ";
	}
	SelectionTool_c testR102Inst2 = SelectionTool_c.getOneCT_SELOnR102(this, false);

	if ( testR102Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "102 ";
	}
	ConnectorTool_c testR102Inst3 = ConnectorTool_c.getOneCT_CTLOnR102(this, false);

	if ( testR102Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "102 ";
	}
	ScrollTool_c testR102Inst4 = ScrollTool_c.getOneCT_SCROnR102(this, false);

	if ( testR102Inst4 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "102 ";
	}
	if(delete_error == true) {

		if(CanvasPlugin.getDefault().isDebugging()) {
			Ooaofgraphics.log.println(ILogger.DELETE, "Model Tool", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CanvasPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("tool_id")){
         return true;
      }
      if(attributeName.equals("diagramid")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getTool_idLongBased()
  {
    if(m_tool_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_tool_id)){
    	return 0xfffffff & m_tool_id.getLeastSignificantBits();
    }
    return m_tool_idLongBased ;
  }
  public java.util.UUID getTool_id()
  {
    return m_tool_id ;
  }


  public void setTool_id(java.util.UUID newValue)
  {
   m_tool_id = IdAssigner.preprocessUUID(newValue);
  }
  public boolean getActive()
  {
    return m_active ;
  }


  public void setActive(boolean newValue)
  {
   m_active = newValue ;
  }
  public int getOoa_type()
  {
    if ( InstantiatesElementsSpecifiedByElementSpecification != null )
    {
      return InstantiatesElementsSpecifiedByElementSpecification.getOoa_type();
    }
    return 0;
  }


  public int getOoa_typeCachedValue()
  {
      return m_ooa_type;
  }
  
  public void setOoa_type(int newValue)
  {
   m_ooa_type = newValue ;
  }
  public boolean getDrawing()
  {
    return m_drawing ;
  }


  public void setDrawing(boolean newValue)
  {
   m_drawing = newValue ;
  }
  public long getDiagramidLongBased()
  {
    if ( IsAssignedToModel != null )
    {
      return IsAssignedToModel.getDiagramidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDiagramid()
  {
    if ( IsAssignedToModel != null )
    {
      return IsAssignedToModel.getDiagramid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDiagramidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_diagramid) )
      return m_diagramid;
    else
      return getDiagramid();
  }
  
  public void setDiagramid(java.util.UUID newValue)
  {
   m_diagramid = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Model Tool", //$NON-NLS-1$
	  " Operation entered: Model Tool::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ModelTool_c [] objs = ModelTool_c.ModelToolInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Model Tool", //$NON-NLS-1$
	  " Operation entered: Model Tool::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ModelTool_c_test22465_c implements ClassQueryInterface_c
    {
	  ModelTool_c_test22465_c( java.util.UUID            p22466 ) {
	  m_p22466 = p22466;
	  }
	  private java.util.UUID             m_p22466; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelTool_c selected = (ModelTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22466));
	      return retval;
	  }
    }

    ModelTool_c [] objs22464 = 
    ModelTool_c.ModelToolInstances(modelRoot, new ModelTool_c_test22465_c(getTool_id())) ;

    if ( (  (objs22464.length) == 0) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Model Tool", //$NON-NLS-1$
           "Consistency: Object: Model Tool: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22464.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Model Tool: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22464.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs22464.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Model Tool", //$NON-NLS-1$
           "Consistency: Object: Model Tool: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22464.length )  + " Tool_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Model Tool: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22464.length )  + " Tool_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Model Tool is a referring class in association: rel.Numb = 103
          // The participating class is: Element Specification
    class ElementSpecification_c_test22470_c implements ClassQueryInterface_c
    {
	  ElementSpecification_c_test22470_c( int     p22471 ) {
	  m_p22471 = p22471;
	  }
	  private int      m_p22471; 
	  public boolean evaluate (Object candidate)
	  {
	      ElementSpecification_c selected = (ElementSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOoa_type() == (m_p22471));
	      return retval;
	  }
    }

    ElementSpecification_c [] objs22469 = 
    ElementSpecification_c.ElementSpecificationInstances(Ooaofgraphics.getDefaultInstance(), new ElementSpecification_c_test22470_c(getOoa_type())) ;

    if ( (  (objs22469.length) > 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Model Tool", //$NON-NLS-1$
           "Consistency: Object: Model Tool: Association: 103: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22469.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Model Tool: Association: 103: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22469.length )  + " OOA_Type: " + Integer.toString(getOoa_type()) , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Model Tool is a referring class in association: rel.Numb = 100
          // The participating class is: Model
    class Model_c_test22473_c implements ClassQueryInterface_c
    {
	  Model_c_test22473_c( java.util.UUID            p22474 ) {
	  m_p22474 = p22474;
	  }
	  private java.util.UUID             m_p22474; 
	  public boolean evaluate (Object candidate)
	  {
	      Model_c selected = (Model_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDiagramid().equals(m_p22474));
	      return retval;
	  }
    }

    Model_c [] objs22472 = 
    Model_c.ModelInstances(modelRoot, new Model_c_test22473_c(getDiagramid())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs22472.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Model Tool", //$NON-NLS-1$
           "Consistency: Object: Model Tool: Association: 100: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs22472.length )  + " diagramId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Model Tool: Association: 100: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22472.length )  + " diagramId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Model Tool is a participating class in association: rel.Numb = 109
             // Object: Tool Activation Policy
    class ToolActivationPolicy_c_test22476_c implements ClassQueryInterface_c
    {
	  ToolActivationPolicy_c_test22476_c( java.util.UUID            p22477 ) {
	  m_p22477 = p22477;
	  }
	  private java.util.UUID             m_p22477; 
	  public boolean evaluate (Object candidate)
	  {
	      ToolActivationPolicy_c selected = (ToolActivationPolicy_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22477));
	      return retval;
	  }
    }

    ToolActivationPolicy_c [] objs22475 = 
    ToolActivationPolicy_c.ToolActivationPolicyInstances(modelRoot, new ToolActivationPolicy_c_test22476_c(getTool_id())) ;

    if ( (  (objs22475.length) != 1) )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Model Tool", //$NON-NLS-1$
           "Consistency: Object: Model Tool: Association: 109: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22475.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Model Tool: Association: 109: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22475.length )  , e); 
      }
      retval = false;

    }

          // Supertype: rel.Numb = 102
    int objs22478 = 0;
            // Subtype Object: Shape Tool
    class ShapeTool_c_test22479_c implements ClassQueryInterface_c
    {
	  ShapeTool_c_test22479_c( java.util.UUID            p22480 ) {
	  m_p22480 = p22480;
	  }
	  private java.util.UUID             m_p22480; 
	  public boolean evaluate (Object candidate)
	  {
	      ShapeTool_c selected = (ShapeTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22480));
	      return retval;
	  }
    }

    ShapeTool_c [] objs22481 = 
    ShapeTool_c.ShapeToolInstances(modelRoot, new ShapeTool_c_test22479_c(getTool_id())) ;
 
    objs22478 = objs22478 + objs22481.length;
            // Subtype Object: Selection Tool
    class SelectionTool_c_test22482_c implements ClassQueryInterface_c
    {
	  SelectionTool_c_test22482_c( java.util.UUID            p22483 ) {
	  m_p22483 = p22483;
	  }
	  private java.util.UUID             m_p22483; 
	  public boolean evaluate (Object candidate)
	  {
	      SelectionTool_c selected = (SelectionTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22483));
	      return retval;
	  }
    }

    SelectionTool_c [] objs22484 = 
    SelectionTool_c.SelectionToolInstances(modelRoot, new SelectionTool_c_test22482_c(getTool_id())) ;
 
    objs22478 = objs22478 + objs22484.length;
            // Subtype Object: Connector Tool
    class ConnectorTool_c_test22485_c implements ClassQueryInterface_c
    {
	  ConnectorTool_c_test22485_c( java.util.UUID            p22486 ) {
	  m_p22486 = p22486;
	  }
	  private java.util.UUID             m_p22486; 
	  public boolean evaluate (Object candidate)
	  {
	      ConnectorTool_c selected = (ConnectorTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22486));
	      return retval;
	  }
    }

    ConnectorTool_c [] objs22487 = 
    ConnectorTool_c.ConnectorToolInstances(modelRoot, new ConnectorTool_c_test22485_c(getTool_id())) ;
 
    objs22478 = objs22478 + objs22487.length;
            // Subtype Object: Scroll Tool
    class ScrollTool_c_test22488_c implements ClassQueryInterface_c
    {
	  ScrollTool_c_test22488_c( java.util.UUID            p22489 ) {
	  m_p22489 = p22489;
	  }
	  private java.util.UUID             m_p22489; 
	  public boolean evaluate (Object candidate)
	  {
	      ScrollTool_c selected = (ScrollTool_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTool_id().equals(m_p22489));
	      return retval;
	  }
    }

    ScrollTool_c [] objs22490 = 
    ScrollTool_c.ScrollToolInstances(modelRoot, new ScrollTool_c_test22488_c(getTool_id())) ;
 
    objs22478 = objs22478 + objs22490.length;
    if ( objs22478 != 1 )
    {

      if (CanvasPlugin.getDefault().isDebugging()){
          Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Model Tool", //$NON-NLS-1$
           "Consistency: Object: Model Tool: Association: 102: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs22478 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CanvasPlugin.logError("Consistency: Object: Model Tool: Association: 102: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs22478 )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Model Tool", " Operation entered: ModelTool::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ElementSpecification_c v_es = ElementSpecification_c.getOneGD_ESOnR103(this);


if ( (  (v_es != null)) )
{

this.unrelateAcrossR103From(v_es);



}

Model_c v_mdl = Model_c.getOneGD_MDOnR100(this);


if ( (  (v_mdl != null)) )
{

this.unrelateAcrossR100From(v_mdl);



}

ToolActivationPolicy_c v_act = ToolActivationPolicy_c.getOneCT_ACTOnR109(this);


if ( (  (v_act != null)) )
{

this.unrelateAcrossR109From(v_act);



}

ShapeTool_c v_stl = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_ctl = ConnectorTool_c.getOneCT_CTLOnR102(this);


SelectionTool_c v_sel = SelectionTool_c.getOneCT_SELOnR102(this);


ScrollTool_c v_scr = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_stl != null)) )
{

this.unrelateAcrossR102From(v_stl);


if (v_stl != null) {
v_stl.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_ctl != null)) )
{

this.unrelateAcrossR102From(v_ctl);


if (v_ctl != null) {
v_ctl.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_sel != null)) )
{

this.unrelateAcrossR102From(v_sel);


if (v_sel != null) {
v_sel.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_scr != null)) )
{

this.unrelateAcrossR102From(v_scr);


if (v_scr != null) {
v_scr.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

delete() ;



   } // End dispose
  public  void Initialize()
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Model Tool", " Operation entered: ModelTool::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_drawing = false ;



   } // End initialize
  public  void Finalizeconnector(final java.util.UUID         p_Endelement,final java.util.UUID         p_Startelement)
  {
      Ooaofgraphics.log.println(ILogger.OPERATION, "Model Tool", " Operation entered: ModelTool::Finalizeconnector") ; 
               final ModelRoot modelRoot = getModelRoot();
GraphicalElement_c v_startElement = GraphicalElement_c.getOneGD_GEOnR104(ConnectorTool_c.getOneCT_CTLOnR102(this));


GraphicalElement_c v_endElement = GraphicalElement_c.getOneGD_GEOnR105(ConnectorTool_c.getOneCT_CTLOnR102(this));


ConnectorTool_c v_conTool = ConnectorTool_c.getOneCT_CTLOnR102(this);


SelectionTool_c v_selTool = SelectionTool_c.getOneCT_SELOnR102(this);


if ( (  (v_selTool != null)) )
{

  class GraphicalElement_test21621_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		GraphicalElement_c selected = (GraphicalElement_c)candidate;
		return (selected.getElementid().equals(p_Startelement)) ;
	}
  }
v_startElement = GraphicalElement_c.getOneGD_GEOnR1(Model_c.getManyGD_MDsOnR100(this), new GraphicalElement_test21621_c());


  class GraphicalElement_test21622_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		GraphicalElement_c selected = (GraphicalElement_c)candidate;
		return (selected.getElementid().equals(p_Endelement)) ;
	}
  }
v_endElement = GraphicalElement_c.getOneGD_GEOnR1(Model_c.getManyGD_MDsOnR100(this), new GraphicalElement_test21622_c());



}

boolean      v_newConnectorwasCreated = true ;


if ( ((! p_Startelement.equals(Os_c.Null_unique_id())) && (! p_Endelement.equals(Os_c.Null_unique_id()))) )
{

v_newConnectorwasCreated = false ;



}

Model_c v_canvas = Model_c.getOneGD_MDOnR100(this);


Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);


GraphicalElement_c v_conElem = v_startElement ;


if ( (v_newConnectorwasCreated) )
{

ElementSpecification_c v_elemSpec = ElementSpecification_c.getOneGD_ESOnR103(this);


v_conElem = GraphicalElement_c.getOneGD_GEOnR16(v_elemSpec);



}

Connector_c v_connector = Connector_c.getOneGD_CONOnR2(v_conElem);


LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR106(ConnectorTool_c.getOneCT_CTLOnR102(this));


LineSegment_c [] v_segments = LineSegment_c.getManyGD_LSsOnR6(v_connector);


if ( ((v_newConnectorwasCreated) && (  (v_startElement != null))) )
{

LineSegment_c  v_seg = null;
for ( int i21434 = 0; i21434 < v_segments.length; i21434++)
{
  v_seg = v_segments[i21434] ;

if ( (v_seg.getPrevious_elementid().equals(Os_c.Null_unique_id())) )
{

v_segment = v_seg ;



}


}

Graphconnector_c v_anchor = new Graphconnector_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_anchor));


Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_anchor != null) {
  v_anchor.setPositionx( v_segmentStart.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_anchor != null) {
  v_anchor.setPositiony( v_segmentStart.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Graphelement_c v_graphElement = Graphelement_c.getOneDIM_GEOnR23(v_startElement);


if (v_anchor != null) {
  v_anchor.relateAcrossR311To(v_graphElement);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphedge_c v_edge = Graphedge_c.getOneDIM_EDOnR20(v_connector);


if (v_edge != null) {
  v_edge.relateAcrossR320To(v_anchor);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_conTool != null)) )
{

if (v_conTool != null) {
v_conTool.unrelateAcrossR104From(v_startElement);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(v_startElement);


Connector_c v_con = Connector_c.getOneGD_CONOnR2(v_startElement);


if ( (  (v_shp != null)) )
{

int          v_intersectX = v_shp.Getxintersect(			    
true			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


int          v_intersectY = v_shp.Getyintersect(			    
true			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


java.util.UUID         v_snapPointId = v_shp.Getnearestgridsnappointonedge(			    
v_intersectX			    
,v_intersectY) ;


Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(Point_c.class).getGlobal(null, v_snapPointId);


if (v_segment != null) {
v_segment.Movestart(			    
false			    
,(int)(v_snapPoint.getX() - v_segmentStart.getPositionx())			    
,(int)(v_snapPoint.getY() - v_segmentStart.getPositiony()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_snapPoint != null) {
// get the location of this element in the instance list
// before deleting
if ( v_snapPoint.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_snapPoint));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

else if ( (  (v_con != null)) )
{

ConnectorTerminal_c v_cnt = ConnectorTerminal_c.getOneTS_CNTOnR201(TerminalSpecification_c.getManyTS_TSPsOnR206(v_startElement));


if ( (v_cnt.getTerminatesat() == End_c.Middle) )
{

if (v_con != null) {
v_con.Cropto(			    
v_segment.getElementid()			    
,v_anchor.getConid()			    
,End_c.Start ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (v_cnt.getTerminatesat() == End_c.Start) )
{

AnchorOnSegment_c v_aos = new AnchorOnSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aos));


java.util.UUID         v_startSegId = v_con.Getstartingsegmentid() ;


  class LineSegment_test21623_c implements ClassQueryInterface_c
  {
	LineSegment_test21623_c( java.util.UUID         p21624 ) {
		m_p21624 = p21624;
	}
	private java.util.UUID         m_p21624;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21624)) ;
	}
  }
LineSegment_c v_startSeg = LineSegment_c.getOneGD_LSOnR6(v_con, new LineSegment_test21623_c(v_startSegId));


if (v_aos != null) {
  v_aos.relateAcrossR26To( v_anchor ) ;   v_aos.relateAcrossR26To( v_startSeg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_segment != null) {
v_segment.Movestart(			    
false			    
,(int)(v_con.Getstartx() - v_segmentStart.getPositionx())			    
,(int)(v_con.Getstarty() - v_segmentStart.getPositiony()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (v_cnt.getTerminatesat() == End_c.End) )
{

AnchorOnSegment_c v_aos = new AnchorOnSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aos));


java.util.UUID         v_endSegId = v_con.Getendingsegmentid() ;


  class LineSegment_test21625_c implements ClassQueryInterface_c
  {
	LineSegment_test21625_c( java.util.UUID         p21626 ) {
		m_p21626 = p21626;
	}
	private java.util.UUID         m_p21626;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21626)) ;
	}
  }
LineSegment_c v_endSeg = LineSegment_c.getOneGD_LSOnR6(v_con, new LineSegment_test21625_c(v_endSegId));


if (v_aos != null) {
  v_aos.relateAcrossR26To( v_anchor ) ;   v_aos.relateAcrossR26To( v_endSeg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_segment != null) {
v_segment.Movestart(			    
false			    
,(int)(v_con.Getendx() - v_segmentEnd.getPositionx())			    
,(int)(v_con.Getendy() - v_segmentEnd.getPositiony()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}

if ( (  (v_endElement != null)) )
{

LineSegment_c  v_seg = null;
for ( int i21435 = 0; i21435 < v_segments.length; i21435++)
{
  v_seg = v_segments[i21435] ;

LineSegment_c v_nextSeg = LineSegment_c.getOneGD_LSOnR7Precedes(v_seg);


if ( (  (v_nextSeg == null)) )
{

v_segment = v_seg ;



}


}

Graphconnector_c v_anchor = new Graphconnector_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_anchor));


Waypoint_c v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


Waypoint_c v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_anchor != null) {
  v_anchor.setPositionx( v_segmentEnd.getPositionx()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_anchor != null) {
  v_anchor.setPositiony( v_segmentEnd.getPositiony()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Graphelement_c v_graphElement = Graphelement_c.getOneDIM_GEOnR23(v_endElement);


if (v_anchor != null) {
  v_anchor.relateAcrossR311To(v_graphElement);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Graphedge_c v_edge = Graphedge_c.getOneDIM_EDOnR20(v_connector);


if (v_edge != null) {
  v_edge.relateAcrossR321To(v_anchor);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_conTool != null)) )
{

if (v_conTool != null) {
v_conTool.unrelateAcrossR105From(v_endElement);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

Shape_c v_shp = Shape_c.getOneGD_SHPOnR2(v_endElement);


Connector_c v_con = Connector_c.getOneGD_CONOnR2(v_endElement);


if ( (  (v_shp != null)) )
{

int          v_intersectX = v_shp.Getxintersect(			    
true			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


int          v_intersectY = v_shp.Getyintersect(			    
true			    
,(int)(v_segmentStart.getPositionx())			    
,(int)(v_segmentEnd.getPositionx())			    
,(int)(v_segmentStart.getPositiony())			    
,(int)(v_segmentEnd.getPositiony())) ;


java.util.UUID         v_snapPointId = v_shp.Getnearestgridsnappointonedge(			    
v_intersectX			    
,v_intersectY) ;


Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(Point_c.class).getGlobal(null, v_snapPointId);


if (v_segment != null) {
v_segment.Moveend(			    
false			    
,(int)(v_snapPoint.getX() - v_segmentEnd.getPositionx())			    
,(int)(v_snapPoint.getY() - v_segmentEnd.getPositiony()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_snapPoint != null) {
// get the location of this element in the instance list
// before deleting
if ( v_snapPoint.delete() ) {
    Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_snapPoint));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

else if ( (  (v_con != null)) )
{

ConnectorTerminal_c v_cnt = ConnectorTerminal_c.getOneTS_CNTOnR201(TerminalSpecification_c.getManyTS_TSPsOnR206(v_endElement));


if ( (v_cnt.getTerminatesat() == End_c.Middle) )
{

if (v_con != null) {
v_con.Cropto(			    
v_segment.getElementid()			    
,v_anchor.getConid()			    
,End_c.End ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (v_cnt.getTerminatesat() == End_c.Start) )
{

AnchorOnSegment_c v_aos = new AnchorOnSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aos));


java.util.UUID         v_startSegId = v_con.Getstartingsegmentid() ;


  class LineSegment_test21627_c implements ClassQueryInterface_c
  {
	LineSegment_test21627_c( java.util.UUID         p21628 ) {
		m_p21628 = p21628;
	}
	private java.util.UUID         m_p21628;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21628)) ;
	}
  }
LineSegment_c v_startSeg = LineSegment_c.getOneGD_LSOnR6(v_con, new LineSegment_test21627_c(v_startSegId));


if (v_aos != null) {
  v_aos.relateAcrossR26To( v_anchor ) ;   v_aos.relateAcrossR26To( v_startSeg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_segment != null) {
v_segment.Moveend(			    
false			    
,(int)(v_con.Getstartx() - v_segmentEnd.getPositionx())			    
,(int)(v_con.Getstarty() - v_segmentEnd.getPositiony()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (v_cnt.getTerminatesat() == End_c.End) )
{

AnchorOnSegment_c v_aos = new AnchorOnSegment_c(modelRoot) ;
Ooaofgraphics.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aos));


java.util.UUID         v_endSegId = v_con.Getendingsegmentid() ;


  class LineSegment_test21629_c implements ClassQueryInterface_c
  {
	LineSegment_test21629_c( java.util.UUID         p21630 ) {
		m_p21630 = p21630;
	}
	private java.util.UUID         m_p21630;
	public boolean evaluate (Object candidate)
	{
		LineSegment_c selected = (LineSegment_c)candidate;
		return (selected.getElementid().equals(m_p21630)) ;
	}
  }
LineSegment_c v_endSeg = LineSegment_c.getOneGD_LSOnR6(v_con, new LineSegment_test21629_c(v_endSegId));


if (v_aos != null) {
  v_aos.relateAcrossR26To( v_anchor ) ;   v_aos.relateAcrossR26To( v_endSeg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


v_segmentStart = Waypoint_c.getOneDIM_WAYOnR21(v_segment);


v_segmentEnd = Waypoint_c.getOneDIM_WAYOnR22(v_segment);


if (v_segment != null) {
v_segment.Moveend(			    
false			    
,(int)(v_con.Getendx() - v_segmentEnd.getPositionx())			    
,(int)(v_con.Getendy() - v_segmentEnd.getPositiony()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


   } // End finalizeConnector

  // end transform functions

  public static final int
    ST_MODEL_TOOL_ACTIVE = 5, 
    ST_MODEL_TOOL_MOUSE_MOVING = 6, 
    ST_MODEL_TOOL_MOUSE_DOWN = 3, 
    ST_MODEL_TOOL_MOUSE_UP = 4, 
    ST_MODEL_TOOL_IDLE = 1, 
    ST_MODEL_TOOL_ACTIVATING = 2, 
    ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE = 7;

   private int state = ST_MODEL_TOOL_IDLE ;
   private Vector<genericEvent_c> eventQueue = new Vector<genericEvent_c>(10,10) ;
   private Vector<genericEvent_c> selfEventQueue = new Vector<genericEvent_c>(10,10) ;

  public int get_current_state() { return state; }
    
  static final int EVCD_MODEL_TOOL_ACTIVATE = 5 ;
   public synchronized void Activate( boolean self_directed )
  {
    EV_MODEL_TOOL_ACTIVATE incoming_event = new EV_MODEL_TOOL_ACTIVATE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_DONE = 2 ;
   public synchronized void Done( boolean self_directed )
  {
    EV_MODEL_TOOL_DONE incoming_event = new EV_MODEL_TOOL_DONE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_MOUSE_MOVED = 4 ;
   public synchronized void MouseMoved( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_MODEL_TOOL_MOUSE_MOVED incoming_event = new EV_MODEL_TOOL_MOUSE_MOVED() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_MOUSE_PRESSED = 1 ;
   public synchronized void MousePressed( boolean self_directed , final int          p_x, final int          p_y, final boolean      p_retainselection)
  {
    EV_MODEL_TOOL_MOUSE_PRESSED incoming_event = new EV_MODEL_TOOL_MOUSE_PRESSED() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
    incoming_event.edi_retainselection = p_retainselection ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_MOUSE_RELEASED = 3 ;
   public synchronized void MouseReleased( boolean self_directed , final int          p_x, final int          p_y)
  {
    EV_MODEL_TOOL_MOUSE_RELEASED incoming_event = new EV_MODEL_TOOL_MOUSE_RELEASED() ;
    incoming_event.edi_y = p_y ;
    incoming_event.edi_x = p_x ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_DEACTIVATE = 6 ;
   public synchronized void Deactivate( boolean self_directed )
  {
    EV_MODEL_TOOL_DEACTIVATE incoming_event = new EV_MODEL_TOOL_DEACTIVATE() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_ACTIVATION_PERMITTED = 7 ;
   public synchronized void ActivationPermitted( boolean self_directed )
  {
    EV_MODEL_TOOL_ACTIVATION_PERMITTED incoming_event = new EV_MODEL_TOOL_ACTIVATION_PERMITTED() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }
  static final int EVCD_MODEL_TOOL_ACTIVATION_DENIED = 8 ;
   public synchronized void ActivationDenied( boolean self_directed )
  {
    EV_MODEL_TOOL_ACTIVATION_DENIED incoming_event = new EV_MODEL_TOOL_ACTIVATION_DENIED() ;
	if (self_directed == true) {
	  selfEventQueue.addElement(incoming_event) ;
	}
	else {
      eventQueue.addElement(incoming_event) ;
	}
	notify() ;
  }

  public synchronized void takeEvent(genericEvent_c incoming_event)
  {
    eventQueue.addElement(incoming_event) ;
	notify() ;
  }

  public synchronized void procEvent()
  {
    ModelRoot modelRoot = getModelRoot();
    EV_MODEL_TOOL currentEvent ;
	if (selfEventQueue.size() != 0) {
	  currentEvent = (EV_MODEL_TOOL)selfEventQueue.firstElement() ;
	  selfEventQueue.removeElement(currentEvent) ;
	}
	else {
      currentEvent = (EV_MODEL_TOOL)eventQueue.firstElement() ;
      if (currentEvent != null) {
        eventQueue.removeElement(currentEvent) ;
	  }
	}
	if (currentEvent != null) {
      switch (currentEvent.getEvtcode())
      {
        case EVCD_MODEL_TOOL_ACTIVATE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.Activate in " + state) ; 
          final EV_MODEL_TOOL_ACTIVATE arch_event = (EV_MODEL_TOOL_ACTIVATE)currentEvent ;
          switch (state)
          {
          case ST_MODEL_TOOL_IDLE:
            {
ToolActivationPolicy_c v_policy = ToolActivationPolicy_c.getOneCT_ACTOnR108(Model_c.getOneGD_MDOnR100(this));


// Generate event CT_ACT1:ActivationPermissionRequested to policy
if (v_policy != null) {
  v_policy.ActivationPermissionRequested(false , getTool_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



            }
            state = ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE ;
            break ;
               case ST_MODEL_TOOL_ACTIVE:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL5:Activate", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_DONE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.Done in " + state) ; 
          final EV_MODEL_TOOL_DONE arch_event = (EV_MODEL_TOOL_DONE)currentEvent ;
          switch (state)
          {
          case ST_MODEL_TOOL_ACTIVATING:
            {

            }
            state = ST_MODEL_TOOL_ACTIVE ;
            break ;
          case ST_MODEL_TOOL_MOUSE_MOVING:
            {

            }
            state = ST_MODEL_TOOL_ACTIVE ;
            break ;
          case ST_MODEL_TOOL_MOUSE_DOWN:
            {

            }
            state = ST_MODEL_TOOL_ACTIVE ;
            break ;
          case ST_MODEL_TOOL_MOUSE_UP:
            {

            }
            state = ST_MODEL_TOOL_ACTIVE ;
            break ;
               case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL2:Done", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_MOUSE_MOVED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.MouseMoved in " + state) ; 
          final EV_MODEL_TOOL_MOUSE_MOVED arch_event = (EV_MODEL_TOOL_MOUSE_MOVED)currentEvent ;
          switch (state)
          {
          case ST_MODEL_TOOL_ACTIVE:
            {
SelectionTool_c v_sel_tool = SelectionTool_c.getOneCT_SELOnR102(this);


ShapeTool_c v_shp_tool = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_con_tool = ConnectorTool_c.getOneCT_CTLOnR102(this);


ScrollTool_c v_scroll_tool = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_sel_tool != null)) )
{

// Generate event CT_SEL4:MouseMoved to sel_tool
if (v_sel_tool != null) {
  v_sel_tool.MouseMoved(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_shp_tool != null)) )
{

// Generate event CT_STL3:MouseMoved to shp_tool
if (v_shp_tool != null) {
  v_shp_tool.MouseMoved(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_con_tool != null)) )
{

// Generate event CT_CTL7:MouseMove to con_tool
if (v_con_tool != null) {
  v_con_tool.MouseMove(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_scroll_tool != null)) )
{

// Generate event CT_SCR4:MouseMoved to scroll_tool
if (v_scroll_tool != null) {
  v_scroll_tool.MouseMoved(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

// Generate event CT_MTL2:Done to self
Done(true ) ;



            }
            state = ST_MODEL_TOOL_MOUSE_MOVING ;
            break ;
               case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL4:Mouse Moved", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_MOUSE_PRESSED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.MousePressed in " + state) ; 
          final EV_MODEL_TOOL_MOUSE_PRESSED arch_event = (EV_MODEL_TOOL_MOUSE_PRESSED)currentEvent ;
          switch (state)
          {
          case ST_MODEL_TOOL_ACTIVE:
            {
SelectionTool_c v_sel_tool = SelectionTool_c.getOneCT_SELOnR102(this);


ShapeTool_c v_shp_tool = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_con_tool = ConnectorTool_c.getOneCT_CTLOnR102(this);


ScrollTool_c v_scroll_tool = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_sel_tool != null)) )
{

// Generate event CT_SEL2:MousePressed to sel_tool
if (v_sel_tool != null) {
  v_sel_tool.MousePressed(false , arch_event.edi_retainselection,arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_shp_tool != null)) )
{

// Generate event CT_STL1:MousePressed to shp_tool
if (v_shp_tool != null) {
  v_shp_tool.MousePressed(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_con_tool != null)) )
{

// Generate event CT_CTL3:MouseDown to con_tool
if (v_con_tool != null) {
  v_con_tool.MouseDown(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_scroll_tool != null)) )
{

// Generate event CT_SCR2:MousePressed to scroll_tool
if (v_scroll_tool != null) {
  v_scroll_tool.MousePressed(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

if ( ((  (v_shp_tool != null)) || (  (v_con_tool != null))) )
{

setDrawing( true) ;



}

// Generate event CT_MTL2:Done to self
Done(true ) ;



            }
            state = ST_MODEL_TOOL_MOUSE_DOWN ;
            break ;
               case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL1:Mouse Pressed", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_MOUSE_RELEASED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.MouseReleased in " + state) ; 
          final EV_MODEL_TOOL_MOUSE_RELEASED arch_event = (EV_MODEL_TOOL_MOUSE_RELEASED)currentEvent ;
          switch (state)
          {
          case ST_MODEL_TOOL_ACTIVE:
            {
SelectionTool_c v_sel_tool = SelectionTool_c.getOneCT_SELOnR102(this);


ShapeTool_c v_shp_tool = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_con_tool = ConnectorTool_c.getOneCT_CTLOnR102(this);


ScrollTool_c v_scroll_tool = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_sel_tool != null)) )
{

// Generate event CT_SEL3:MouseReleased to sel_tool
if (v_sel_tool != null) {
  v_sel_tool.MouseReleased(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_shp_tool != null)) )
{

// Generate event CT_STL2:MouseReleased to shp_tool
if (v_shp_tool != null) {
  v_shp_tool.MouseReleased(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_con_tool != null)) )
{

// Generate event CT_CTL6:MouseUp to con_tool
if (v_con_tool != null) {
  v_con_tool.MouseUp(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_scroll_tool != null)) )
{

// Generate event CT_SCR3:MouseReleased to scroll_tool
if (v_scroll_tool != null) {
  v_scroll_tool.MouseReleased(false , arch_event.edi_x,arch_event.edi_y ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

if ( ((  (v_shp_tool != null)) || (  (v_con_tool != null))) )
{

setDrawing( false) ;



}

// Generate event CT_MTL2:Done to self
Done(true ) ;



            }
            state = ST_MODEL_TOOL_MOUSE_UP ;
            break ;
               case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL3:Mouse Released", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_DEACTIVATE:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.Deactivate in " + state) ; 
          final EV_MODEL_TOOL_DEACTIVATE arch_event = (EV_MODEL_TOOL_DEACTIVATE)currentEvent ;
          switch (state)
          {
          case ST_MODEL_TOOL_ACTIVE:
            {
if ( getActive() )
{

setActive( false) ;


SelectionTool_c v_selection_tool = SelectionTool_c.getOneCT_SELOnR102(this);


ShapeTool_c v_shp_tool = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_con_tool = ConnectorTool_c.getOneCT_CTLOnR102(this);


ScrollTool_c v_scroll_tool = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_selection_tool != null)) )
{

// Generate event CT_SEL17:Deactivated to selection_tool
if (v_selection_tool != null) {
  v_selection_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_shp_tool != null)) )
{

// Generate event CT_STL6:Deactivated to shp_tool
if (v_shp_tool != null) {
  v_shp_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_con_tool != null)) )
{

// Generate event CT_CTL2:Deactivated to con_tool
if (v_con_tool != null) {
  v_con_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_scroll_tool != null)) )
{

// Generate event CT_SCR8:Deactivated to scroll_tool
if (v_scroll_tool != null) {
  v_scroll_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

ToolActivationPolicy_c v_policy = ToolActivationPolicy_c.getOneCT_ACTOnR108(Model_c.getOneGD_MDOnR100(this));


// Generate event CT_ACT3:ToolDeactivated to policy
if (v_policy != null) {
  v_policy.ToolDeactivated(false , getTool_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}


            }
            state = ST_MODEL_TOOL_IDLE ;
            break ;
               case ST_MODEL_TOOL_IDLE:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL6:Deactivate", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_ACTIVATION_PERMITTED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.ActivationPermitted in " + state) ; 
          final EV_MODEL_TOOL_ACTIVATION_PERMITTED arch_event = (EV_MODEL_TOOL_ACTIVATION_PERMITTED)currentEvent ;
          switch (state)
          {
               case ST_MODEL_TOOL_MOUSE_MOVING:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_MOUSE_DOWN:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_MOUSE_UP:
              	// Event Ignored
               break ;
          case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
            {
SelectionTool_c v_sel_tool = SelectionTool_c.getOneCT_SELOnR102(this);


ShapeTool_c v_shp_tool = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_con_tool = ConnectorTool_c.getOneCT_CTLOnR102(this);


ScrollTool_c v_scroll_tool = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_sel_tool != null)) )
{

// Generate event CT_SEL16:Activated to sel_tool
if (v_sel_tool != null) {
  v_sel_tool.Activated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_shp_tool != null)) )
{

// Generate event CT_STL5:Activated to shp_tool
if (v_shp_tool != null) {
  v_shp_tool.Activated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_con_tool != null)) )
{

// Generate event CT_CTL1:Activated to con_tool
if (v_con_tool != null) {
  v_con_tool.Activated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_scroll_tool != null)) )
{

// Generate event CT_SCR7:Activated to scroll_tool
if (v_scroll_tool != null) {
  v_scroll_tool.Activated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

setActive( true) ;


// Generate event CT_MTL2:Done to self
Done(true ) ;



            }
            state = ST_MODEL_TOOL_ACTIVATING ;
            break ;
               case ST_MODEL_TOOL_ACTIVE:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_IDLE:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_ACTIVATING:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL7:Activation Permitted", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
        case EVCD_MODEL_TOOL_ACTIVATION_DENIED:
        {
        Ooaofgraphics.log.println(ILogger.STATE_MACHINE, "Model Tool", " Event dequeued: ModelTool.ActivationDenied in " + state) ; 
          final EV_MODEL_TOOL_ACTIVATION_DENIED arch_event = (EV_MODEL_TOOL_ACTIVATION_DENIED)currentEvent ;
          switch (state)
          {
               case ST_MODEL_TOOL_MOUSE_MOVING:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_MOUSE_DOWN:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_MOUSE_UP:
              	// Event Ignored
               break ;
          case ST_MODEL_TOOL_REQUESTING_PERMISSION_TO_ACTIVATE:
            {
if ( getActive() )
{

setActive( false) ;


SelectionTool_c v_selection_tool = SelectionTool_c.getOneCT_SELOnR102(this);


ShapeTool_c v_shp_tool = ShapeTool_c.getOneCT_STLOnR102(this);


ConnectorTool_c v_con_tool = ConnectorTool_c.getOneCT_CTLOnR102(this);


ScrollTool_c v_scroll_tool = ScrollTool_c.getOneCT_SCROnR102(this);


if ( (  (v_selection_tool != null)) )
{

// Generate event CT_SEL17:Deactivated to selection_tool
if (v_selection_tool != null) {
  v_selection_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_shp_tool != null)) )
{

// Generate event CT_STL6:Deactivated to shp_tool
if (v_shp_tool != null) {
  v_shp_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_con_tool != null)) )
{

// Generate event CT_CTL2:Deactivated to con_tool
if (v_con_tool != null) {
  v_con_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

else if ( (  (v_scroll_tool != null)) )
{

// Generate event CT_SCR8:Deactivated to scroll_tool
if (v_scroll_tool != null) {
  v_scroll_tool.Deactivated(false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}

ToolActivationPolicy_c v_policy = ToolActivationPolicy_c.getOneCT_ACTOnR108(Model_c.getOneGD_MDOnR100(this));


// Generate event CT_ACT3:ToolDeactivated to policy
if (v_policy != null) {
  v_policy.ToolDeactivated(false , getTool_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to fire null event instance.", t);
}



}


            }
            state = ST_MODEL_TOOL_IDLE ;
            break ;
               case ST_MODEL_TOOL_ACTIVE:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_IDLE:
              	// Event Ignored
               break ;
               case ST_MODEL_TOOL_ACTIVATING:
              	// Event Ignored
               break ;
            default:
          CanvasPlugin.logError(" Can't Happen:  Model Tool state = " + state + " event = CT_MTL8:Activation Denied", null);
          // throw cantHappenException here ;
          }  // end state switch
          break ;
        }
      } // end currentEvent switch
	} // end if currentEvent valid
  } // end Model Tool procEvent

  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Model Tool
