package com.mentor.nucleus.bp.ui.canvas.inspector;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/canvas/inspector/GraphicalElementInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.core/arc/create_object_inspector.inc
// Version:      $Revision: 1.23 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class GraphicalElement_c from the traversal mechanisms that it provides to
// model diff.
//
import com.mentor.nucleus.bp.ui.canvas.*;

import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.CorePlugin;
import com.mentor.nucleus.bp.core.inspector.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import java.util.*;

/**
 * This file adapts the meta-model entity; 'GraphicalElement_c' to provide 
 * support of traversing to its children and parents.
 * <p>
 * Do not edit this class, it was created using the Mentor Graphics
 * MC-Java code generator product.
 * </p>
 */
public class GraphicalElementInspector extends BaseModelClassInspector {

  private String parentAssoc;
  
  public GraphicalElementInspector(MetadataSortingManager sortingManager){
    super(sortingManager);
  }

  /**
   * @see IModelClassInspector#getParent(Object)
   * Returns the parent(s) of this node
   */
  public Object getParent(Object arg) {
    Model_c result1 = Model_c.getOneGD_MDOnR1((GraphicalElement_c)arg);
     if (result1 != null) {
        return result1;
    }               
        return null;    //No parent found           
  }
  	  
  /**
   * @see IModelClassInspector#getChildRelations(Object)
   * Returns the children of this node
   */
  public ObjectElement[] getChildRelations(Object arg) {
    int resultSize = 0;
    Shape_c [] v_shape = 
Shape_c.getManyGD_SHPsOnR2(
(GraphicalElement_c)arg)
;



    sort(v_shape);
    Connector_c [] v_connector = 
Connector_c.getManyGD_CONsOnR2(
(GraphicalElement_c)arg)
;



    sort(v_connector);
    List<ObjectElement> result = new ArrayList<ObjectElement> ();
    for (int i = 0 ; i < v_shape.length ; i++) {   
        result.add(new ObjectElement("v_shape", ObjectElement.RELATION_ROLE_ELEMENT, v_shape[i], arg, false));
    }
    for (int i = 0 ; i < v_connector.length ; i++) {   
        result.add(new ObjectElement("v_connector", ObjectElement.RELATION_ROLE_ELEMENT, v_connector[i], arg, false));
    }
    return result.toArray(new ObjectElement[result.size()]);
  }
  /**
   * @see IModelClassInspector#hasChildren(Object)
   * Returns true if this node has any children
   */
  public boolean hasChildRelations(Object arg) {
    Shape_c [] v_shape = 
Shape_c.getManyGD_SHPsOnR2(
(GraphicalElement_c)arg)
;



    if (v_shape.length > 0) return true;
    Connector_c [] v_connector = 
Connector_c.getManyGD_CONsOnR2(
(GraphicalElement_c)arg)
;



    if (v_connector.length > 0) return true;
    return false;
  }
  
  public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
  	Object[] details = new Object[4];
	return details;
  }
  
  /**
  * @seee IModelClassInspector#getReferentials(Object)
  * Returns the an array of Role Objects specifying the referenctial attibutes of
  * this model element
  * Role Name: <T_TPS.NameOnly>
  * Role Value: <Chain_result>
  * Role Type: "Referential"
  */
  public ObjectElement[] getReferentials(Object arg) {
     List<ObjectElement> referentials = new ArrayList<ObjectElement>();
    return referentials.toArray(new ObjectElement [referentials.size()]);        
  }

  /**
  * @seee IModelClassInspector#getAttributes(Object)
  * Returns the an array of Role objects that give the attibutes of the model 
  * element it self e.g.
  * Role Name: "Name"
  * Role Value: metaModelElement.getName()
  * Role Type: "Primitive"
  */
  public ObjectElement[] getAttributes(Object arg) {
    ObjectElement attrSet[] = new ObjectElement[6];
      attrSet[0] = new ObjectElement("represents_path", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getRepresents_path"), arg, "getRepresents_path", true);
      attrSet[0].setDerived();
    ObjectElement compAttrSet[] = new ObjectElement[1];    
    for (int i = 0; i < 1 ; i++) {
        compAttrSet[i] = attrSet[i];
    }
    return compAttrSet;
  }

    /**
     * Return configured image if none exists for the element type
     */
    public Image getImage(Object element) {
		Image image = CorePlugin.getImageFor(element, false);
		if(image != null) {
			return image;
		}
		return CorePlugin.getImageFor("metadata/GraphicalElement.gif");
	}

  /**
  * Returns a "slot number" to be used when comparing and merging tree elements
  * that contain multiple children.  All model element inspector's contain this 
  * function, but it only returns a value for cases where it a parent element
  * in a tree and the parent has multiple children.
  * 
  * @returns 0 if this is not a "parent" in the tree OR if the parent has less 
  * than 2 children. 
  */
	@Override
	public int getTreeDifferenceSlot(Object element) {
    	if (element instanceof Shape_c) {
			return 1;
		}
    	if (element instanceof Connector_c) {
			return 2;
		}
		return 0;
	}

	}       

