package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.AnchorOnSegment_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ANCHOR_ON_SEGMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class AnchorOnSegment_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public AnchorOnSegment_c(ModelRoot modelRoot, java.util.UUID p_m_conid,
			java.util.UUID p_m_elementid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_conid = IdAssigner.preprocessUUID(p_m_conid);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

		Object[] key = {m_conid, m_elementid};
		addInstanceToMap(key);
	}
	static public AnchorOnSegment_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_conid, java.util.UUID p_m_elementid,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);
		AnchorOnSegment_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_conid, p_m_elementid};
			new_inst = (AnchorOnSegment_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_conid = IdAssigner.preprocessUUID(p_m_conid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new AnchorOnSegment_c(modelRoot, p_m_conid,
					p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public AnchorOnSegment_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_conid, java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);
		AnchorOnSegment_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_conid, p_m_elementid};
			source = (AnchorOnSegment_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_conid = IdAssigner.preprocessUUID(p_m_conid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

				return source;
			}
		}
		// there is no instance matching the id
		AnchorOnSegment_c new_inst = new AnchorOnSegment_c(modelRoot,
				p_m_conid, p_m_elementid);
		return new_inst;
	}
	public AnchorOnSegment_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_conid = IdAssigner.NULL_UUID;
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {m_conid, m_elementid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_conid, m_elementid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_conid != p_newKey) {

			m_conid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof AnchorOnSegment_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof AnchorOnSegment_c)) {
			return false;
		}

		AnchorOnSegment_c me = (AnchorOnSegment_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getConid()) || IdAssigner.NULL_UUID
						.equals(((AnchorOnSegment_c) elem).getConid())) && this != elem)) {
			return false;
		}
		if (!getConid().equals(((AnchorOnSegment_c) elem).getConid()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
						.equals(((AnchorOnSegment_c) elem).getElementid())) && this != elem)) {
			return false;
		}
		if (!getElementid().equals(((AnchorOnSegment_c) elem).getElementid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof AnchorOnSegment_c)) {
			return false;
		}

		AnchorOnSegment_c me = (AnchorOnSegment_c) elem;
		if (!getConidCachedValue().equals(
				((AnchorOnSegment_c) elem).getConidCachedValue()))
			return false;
		if (!getElementidCachedValue().equals(
				((AnchorOnSegment_c) elem).getElementidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_conid;
	private java.util.UUID m_elementid;

	// declare association references from this class

	// referring navigation

	LineSegment_c HasAnchorPointLineSegment;
	public void relateAcrossR26To(LineSegment_c target) {
		relateAcrossR26To(target, true);
	}
	public void relateAcrossR26To(LineSegment_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasAnchorPointLineSegment)
			return; // already related

		if (HasAnchorPointLineSegment != target) {

			Object oldKey = getInstanceKey();

			if (HasAnchorPointLineSegment != null) {

				HasAnchorPointLineSegment.clearBackPointerR26To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"AnchorOnSegment_c.relateAcrossR26To(LineSegment_c target)",
									"Relate performed across R26 from Anchor On Segment to Line Segment without unrelate of prior instance.");
				}
			}

			HasAnchorPointLineSegment = target;
			m_elementid = target.getElementid();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR26To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "26", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR26From(LineSegment_c target) {
		unrelateAcrossR26From(target, true);
	}
	public void unrelateAcrossR26From(LineSegment_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasAnchorPointLineSegment == null)
			return; // already unrelated

		if (target != HasAnchorPointLineSegment) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R26",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR26To(this);
		}

		if (HasAnchorPointLineSegment != null) {

			m_elementid = HasAnchorPointLineSegment.getElementid();
			HasAnchorPointLineSegment = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "26", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	// referring navigation

	Graphconnector_c IsAnchorOnSegmentGraphconnector;
	public void relateAcrossR26To(Graphconnector_c target) {
		relateAcrossR26To(target, true);
	}
	public void relateAcrossR26To(Graphconnector_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsAnchorOnSegmentGraphconnector)
			return; // already related

		if (IsAnchorOnSegmentGraphconnector != target) {

			Object oldKey = getInstanceKey();

			if (IsAnchorOnSegmentGraphconnector != null) {

				IsAnchorOnSegmentGraphconnector.clearBackPointerR26To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"AnchorOnSegment_c.relateAcrossR26To(Graphconnector_c target)",
									"Relate performed across R26 from Anchor On Segment to GraphConnector without unrelate of prior instance.");
				}
			}

			IsAnchorOnSegmentGraphconnector = target;
			m_conid = target.getConid();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR26To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "26", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR26From(Graphconnector_c target) {
		unrelateAcrossR26From(target, true);
	}
	public void unrelateAcrossR26From(Graphconnector_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsAnchorOnSegmentGraphconnector == null)
			return; // already unrelated

		if (target != IsAnchorOnSegmentGraphconnector) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R26",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR26To(this);
		}

		if (IsAnchorOnSegmentGraphconnector != null) {

			m_conid = IsAnchorOnSegmentGraphconnector.getConid();
			IsAnchorOnSegmentGraphconnector = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "26", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(LineSegment_c[] targets) {
		return getOneGD_AOSOnR26(targets, null);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(LineSegment_c[] targets,
			ClassQueryInterface_c test) {
		AnchorOnSegment_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_AOSOnR26(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(LineSegment_c target) {
		return getOneGD_AOSOnR26(target, null);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(LineSegment_c target,
			boolean loadComponent) {
		return getOneGD_AOSOnR26(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(LineSegment_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_AOSOnR26(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(ModelRoot modelRoot,
			LineSegment_c target, ClassQueryInterface_c test) {
		return getOneGD_AOSOnR26(modelRoot, target, test, true);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(ModelRoot modelRoot,
			LineSegment_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneGD_AOSOnR26(modelRoot, target, test);
	}
	private static AnchorOnSegment_c find_getOneGD_AOSOnR26(
			ModelRoot modelRoot, LineSegment_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26) {
				for (int i = 0; i < target.backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26
						.size(); ++i) {
					AnchorOnSegment_c source = (AnchorOnSegment_c) target.backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			LineSegment_c[] targets) {
		return getManyGD_AOSsOnR26(targets, null);
	}
	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			LineSegment_c[] targets, boolean loadComponent) {
		return getManyGD_AOSsOnR26(targets, null, loadComponent);
	}
	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			LineSegment_c[] targets, ClassQueryInterface_c test) {
		return getManyGD_AOSsOnR26(targets, test, true);
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			LineSegment_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AnchorOnSegment_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26) {
				for (int j = 0; j < targets[i].backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26
						.size(); ++j) {
					AnchorOnSegment_c source = (AnchorOnSegment_c) targets[i].backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AnchorOnSegment_c[] ret_set = new AnchorOnSegment_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AnchorOnSegment_c[0];
		}
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(LineSegment_c target) {
		return getManyGD_AOSsOnR26(target, null);
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(LineSegment_c target,
			boolean loadComponent) {
		return getManyGD_AOSsOnR26(target, null, loadComponent);
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(LineSegment_c target,
			ClassQueryInterface_c test) {
		return getManyGD_AOSsOnR26(target, test, true);
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(LineSegment_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new AnchorOnSegment_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26) {
			for (int i = 0; i < target.backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26
					.size(); ++i) {
				AnchorOnSegment_c source = (AnchorOnSegment_c) target.backPointer_IsAnchorOnSegmentAnchorOnSegmentIsAnchorOnSegment_R26
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AnchorOnSegment_c[] ret_set = new AnchorOnSegment_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AnchorOnSegment_c[0];
		}
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(Graphconnector_c[] targets) {
		return getOneGD_AOSOnR26(targets, null);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(
			Graphconnector_c[] targets, ClassQueryInterface_c test) {
		AnchorOnSegment_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_AOSOnR26(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(Graphconnector_c target) {
		return getOneGD_AOSOnR26(target, null);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(Graphconnector_c target,
			boolean loadComponent) {
		return getOneGD_AOSOnR26(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(Graphconnector_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_AOSOnR26(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(ModelRoot modelRoot,
			Graphconnector_c target, ClassQueryInterface_c test) {
		return getOneGD_AOSOnR26(modelRoot, target, test, true);
	}

	public static AnchorOnSegment_c getOneGD_AOSOnR26(ModelRoot modelRoot,
			Graphconnector_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneGD_AOSOnR26(modelRoot, target, test);
	}
	private static AnchorOnSegment_c find_getOneGD_AOSOnR26(
			ModelRoot modelRoot, Graphconnector_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26) {
				for (int i = 0; i < target.backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26
						.size(); ++i) {
					AnchorOnSegment_c source = (AnchorOnSegment_c) target.backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			Graphconnector_c[] targets) {
		return getManyGD_AOSsOnR26(targets, null);
	}
	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			Graphconnector_c[] targets, boolean loadComponent) {
		return getManyGD_AOSsOnR26(targets, null, loadComponent);
	}
	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			Graphconnector_c[] targets, ClassQueryInterface_c test) {
		return getManyGD_AOSsOnR26(targets, test, true);
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			Graphconnector_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AnchorOnSegment_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26) {
				for (int j = 0; j < targets[i].backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26
						.size(); ++j) {
					AnchorOnSegment_c source = (AnchorOnSegment_c) targets[i].backPointer_HasAnchorPointAnchorOnSegmentHasAnchorPoint_R26
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AnchorOnSegment_c[] ret_set = new AnchorOnSegment_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AnchorOnSegment_c[0];
		}
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			Graphconnector_c target) {
		if (target != null) {
			Graphconnector_c[] targetArray = new Graphconnector_c[1];
			targetArray[0] = target;
			return getManyGD_AOSsOnR26(targetArray);
		} else {
			AnchorOnSegment_c[] result = new AnchorOnSegment_c[0];
			return result;
		}
	}

	public static AnchorOnSegment_c[] getManyGD_AOSsOnR26(
			Graphconnector_c target, boolean loadComponent) {
		if (target != null) {
			Graphconnector_c[] targetArray = new Graphconnector_c[1];
			targetArray[0] = target;
			return getManyGD_AOSsOnR26(targetArray, loadComponent);
		} else {
			AnchorOnSegment_c[] result = new AnchorOnSegment_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R26
		Graphconnector_c relInst22411 = (Graphconnector_c) baseRoot
				.getInstanceList(Graphconnector_c.class).get(
						new Object[]{m_conid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22411 == null) {
			relInst22411 = (Graphconnector_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Graphconnector_c.class)
					.get(new Object[]{m_conid});
		}
		//synchronized
		if (relInst22411 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22411) && !isProxy())) {
				relInst22411.relateAcrossR26To(this, notifyChanges);
			}
		}

		LineSegment_c relInst22412 = (LineSegment_c) baseRoot.getInstanceList(
				LineSegment_c.class).get(new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22412 == null) {
			relInst22412 = (LineSegment_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(LineSegment_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst22412 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22412) && !isProxy())) {
				relInst22412.relateAcrossR26To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R26
		// DIM_CON
		inst = IsAnchorOnSegmentGraphconnector;
		unrelateAcrossR26From(IsAnchorOnSegmentGraphconnector, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// GD_LS
		inst = HasAnchorPointLineSegment;
		unrelateAcrossR26From(HasAnchorPointLineSegment, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(AnchorOnSegment_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final AnchorOnSegment_c inst = (AnchorOnSegment_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static AnchorOnSegment_c AnchorOnSegmentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		AnchorOnSegment_c result = findAnchorOnSegmentInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static AnchorOnSegment_c findAnchorOnSegmentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AnchorOnSegment_c x = (AnchorOnSegment_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static AnchorOnSegment_c AnchorOnSegmentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AnchorOnSegmentInstance(modelRoot, test, true);
	}

	public static AnchorOnSegment_c AnchorOnSegmentInstance(ModelRoot modelRoot) {
		return AnchorOnSegmentInstance(modelRoot, null, true);
	}

	public static AnchorOnSegment_c[] AnchorOnSegmentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AnchorOnSegment_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AnchorOnSegment_c x = (AnchorOnSegment_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				AnchorOnSegment_c[] ret_set = new AnchorOnSegment_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new AnchorOnSegment_c[0];
			}
		}
	}
	public static AnchorOnSegment_c[] AnchorOnSegmentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AnchorOnSegmentInstances(modelRoot, test, true);
	}
	public static AnchorOnSegment_c[] AnchorOnSegmentInstances(
			ModelRoot modelRoot) {
		return AnchorOnSegmentInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Anchor On Segment.dispose call: ";
		Graphconnector_c testR26Inst = Graphconnector_c.getOneDIM_CONOnR26(
				this, false);

		if (testR26Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "26 ";
		}

		LineSegment_c testR26InstOth = LineSegment_c.getOneGD_LSOnR26(this,
				false);

		if (testR26InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "26 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Anchor On Segment",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("conid")) {
			return true;
		}
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getConidLongBased() {
		if (IsAnchorOnSegmentGraphconnector != null) {
			return IsAnchorOnSegmentGraphconnector.getConidLongBased();
		}
		return 0;
	}
	public java.util.UUID getConid() {
		if (IsAnchorOnSegmentGraphconnector != null) {
			return IsAnchorOnSegmentGraphconnector.getConid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getConidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_conid))
			return m_conid;
		else
			return getConid();
	}

	public void setConid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_conid)) {
				return;
			}
		} else if (m_conid != null) {
			if (m_conid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Conid",
				m_conid, newValue, true);
		m_conid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public long getElementidLongBased() {
		if (HasAnchorPointLineSegment != null) {
			return HasAnchorPointLineSegment.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (HasAnchorPointLineSegment != null) {
			return HasAnchorPointLineSegment.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofgraphics.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Anchor On Segment", //$NON-NLS-1$
				" Operation entered: Anchor On Segment::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		AnchorOnSegment_c[] objs = AnchorOnSegment_c.AnchorOnSegmentInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Anchor On Segment", //$NON-NLS-1$
				" Operation entered: Anchor On Segment::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class AnchorOnSegment_c_test22414_c implements ClassQueryInterface_c {
			AnchorOnSegment_c_test22414_c(java.util.UUID p22415,
					java.util.UUID p22416) {
				m_p22415 = p22415;
				m_p22416 = p22416;
			}
			private java.util.UUID m_p22415;
			private java.util.UUID m_p22416;
			public boolean evaluate(Object candidate) {
				AnchorOnSegment_c selected = (AnchorOnSegment_c) candidate;
				boolean retval = false;
				retval = (selected.getConid().equals(m_p22415))
						& (selected.getElementid().equals(m_p22416));
				return retval;
			}
		}

		AnchorOnSegment_c[] objs22413 = AnchorOnSegment_c
				.AnchorOnSegmentInstances(modelRoot,
						new AnchorOnSegment_c_test22414_c(getConid(),
								getElementid()));

		if (((objs22413.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Anchor On Segment", //$NON-NLS-1$
								"Consistency: Object: Anchor On Segment: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22413.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Anchor On Segment: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22413.length), e);
			}
			retval = false;

		}

		if (((objs22413.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Anchor On Segment", //$NON-NLS-1$
								"Consistency: Object: Anchor On Segment: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs22413.length)
										+ " conId: " + "Not Printable" + " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Anchor On Segment: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22413.length)
										+ " conId: " + "Not Printable" + " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Anchor On Segment is a link class in association: rel.Numb = 26
		// Other side
		// The other side class in the association is: Line Segment
		class LineSegment_c_test22420_c implements ClassQueryInterface_c {
			LineSegment_c_test22420_c(java.util.UUID p22421) {
				m_p22421 = p22421;
			}
			private java.util.UUID m_p22421;
			public boolean evaluate(Object candidate) {
				LineSegment_c selected = (LineSegment_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22421));
				return retval;
			}
		}

		LineSegment_c[] objs22419 = LineSegment_c.LineSegmentInstances(
				modelRoot, new LineSegment_c_test22420_c(getElementid()));

		if (((objs22419.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Anchor On Segment", //$NON-NLS-1$
								"Consistency: Object: Anchor On Segment: Association: 26: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22419.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Anchor On Segment: Association: 26: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22419.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Anchor On Segment
