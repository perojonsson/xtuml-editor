




//========================================================================
//
// File: ExternalLinkEvaluator.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_external_link_evaluator.arc
// Version:      $Revision: 1.13 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//

package com.mentor.nucleus.bp.io.mdl;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Vector;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.core.common.IPersistenceHierarchyMetaData;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.core.common.PersistableModelComponent;
import com.mentor.nucleus.bp.core.common.PersistenceManager;


public class ExternalLinkEvaluator {

	static IPersistenceHierarchyMetaData metaData = PersistenceManager.getHierarchyMetaData();
	static public Map evaluators = new Hashtable();
	static {
		evaluators.put(SystemModel_c.class, new SystemModel_cEvaluator());
		evaluators.put(Domain_c.class, new Domain_cEvaluator());
		evaluators.put(DataTypePackage_c.class, new DataTypePackage_cEvaluator());
		evaluators.put(ExternalEntityPackage_c.class, new ExternalEntityPackage_cEvaluator());
		evaluators.put(FunctionPackage_c.class, new FunctionPackage_cEvaluator());
		evaluators.put(SubsystemInDomain_c.class, new SubsystemInDomain_cEvaluator());
		evaluators.put(ExternalEntityPackageInDomain_c.class, new ExternalEntityPackageInDomain_cEvaluator());
		evaluators.put(FunctionPackageInDomain_c.class, new FunctionPackageInDomain_cEvaluator());
		evaluators.put(Sequence_c.class, new Sequence_cEvaluator());
		evaluators.put(Communication_c.class, new Communication_cEvaluator());
		evaluators.put(UseCaseDiagram_c.class, new UseCaseDiagram_cEvaluator());
		evaluators.put(Activity_c.class, new Activity_cEvaluator());
		evaluators.put(DatatypeInSuppression_c.class, new DatatypeInSuppression_cEvaluator());
		evaluators.put(DataType_c.class, new DataType_cEvaluator());
		evaluators.put(SystemDatatypePackage_c.class, new SystemDatatypePackage_cEvaluator());
		evaluators.put(ComponentPackage_c.class, new ComponentPackage_cEvaluator());
		evaluators.put(InterfacePackage_c.class, new InterfacePackage_cEvaluator());
		evaluators.put(Package_c.class, new Package_cEvaluator());
		evaluators.put(PackageInPackage_c.class, new PackageInPackage_cEvaluator());
		evaluators.put(InteractionParticipant_c.class, new InteractionParticipant_cEvaluator());
		evaluators.put(ActivityNode_c.class, new ActivityNode_cEvaluator());
		evaluators.put(ModelClass_c.class, new ModelClass_cEvaluator());
		evaluators.put(Component_c.class, new Component_cEvaluator());
		evaluators.put(ComponentReference_c.class, new ComponentReference_cEvaluator());
		evaluators.put(Interface_c.class, new Interface_cEvaluator());
		evaluators.put(ConstantSpecification_c.class, new ConstantSpecification_cEvaluator());
		evaluators.put(ActivityPartition_c.class, new ActivityPartition_cEvaluator());
		evaluators.put(ActivityEdge_c.class, new ActivityEdge_cEvaluator());
		evaluators.put(Message_c.class, new Message_cEvaluator());
		evaluators.put(Association_c.class, new Association_cEvaluator());
		evaluators.put(ImportedClass_c.class, new ImportedClass_cEvaluator());
		evaluators.put(ExternalEntity_c.class, new ExternalEntity_cEvaluator());
		evaluators.put(Function_c.class, new Function_cEvaluator());
		evaluators.put(UseCaseAssociation_c.class, new UseCaseAssociation_cEvaluator());
		evaluators.put(Satisfaction_c.class, new Satisfaction_cEvaluator());
		evaluators.put(Delegation_c.class, new Delegation_cEvaluator());
		evaluators.put(PackageableElement_c.class, new PackageableElement_cEvaluator());
		evaluators.put(ComponentPackageInPackage_c.class, new ComponentPackageInPackage_cEvaluator());
		evaluators.put(ComponentInComponent_c.class, new ComponentInComponent_cEvaluator());
		evaluators.put(Port_c.class, new Port_cEvaluator());
		evaluators.put(InterfaceReference_c.class, new InterfaceReference_cEvaluator());
		evaluators.put(Requirement_c.class, new Requirement_cEvaluator());
		evaluators.put(RequiredExecutableProperty_c.class, new RequiredExecutableProperty_cEvaluator());
		evaluators.put(RequiredSignal_c.class, new RequiredSignal_cEvaluator());
		evaluators.put(RequiredOperation_c.class, new RequiredOperation_cEvaluator());
		evaluators.put(Provision_c.class, new Provision_cEvaluator());
		evaluators.put(ProvidedExecutableProperty_c.class, new ProvidedExecutableProperty_cEvaluator());
		evaluators.put(ProvidedSignal_c.class, new ProvidedSignal_cEvaluator());
		evaluators.put(ProvidedOperation_c.class, new ProvidedOperation_cEvaluator());
		evaluators.put(DomainAsComponent_c.class, new DomainAsComponent_cEvaluator());
		evaluators.put(ImportedReference_c.class, new ImportedReference_cEvaluator());
		evaluators.put(ImportedProvision_c.class, new ImportedProvision_cEvaluator());
		evaluators.put(ImportedProvisionInSatisfaction_c.class, new ImportedProvisionInSatisfaction_cEvaluator());
		evaluators.put(ImportedRequirement_c.class, new ImportedRequirement_cEvaluator());
		evaluators.put(DelegationInComponent_c.class, new DelegationInComponent_cEvaluator());
		evaluators.put(InterfaceReferenceInDelegation_c.class, new InterfaceReferenceInDelegation_cEvaluator());
		evaluators.put(SatisfactionInComponent_c.class, new SatisfactionInComponent_cEvaluator());
		evaluators.put(SatisfactionInComponentPackage_c.class, new SatisfactionInComponentPackage_cEvaluator());
		evaluators.put(SpecificationPackage_c.class, new SpecificationPackage_cEvaluator());
		evaluators.put(InterfacePackageInInterfacePackage_c.class, new InterfacePackageInInterfacePackage_cEvaluator());
		evaluators.put(ExecutableProperty_c.class, new ExecutableProperty_cEvaluator());
		evaluators.put(InterfaceSignal_c.class, new InterfaceSignal_cEvaluator());
		evaluators.put(InterfaceOperation_c.class, new InterfaceOperation_cEvaluator());
		evaluators.put(Dimensions_c.class, new Dimensions_cEvaluator());
		evaluators.put(PropertyParameter_c.class, new PropertyParameter_cEvaluator());
		evaluators.put(DataTypePackageInPackage_c.class, new DataTypePackageInPackage_cEvaluator());
		evaluators.put(DataTypeInPackage_c.class, new DataTypeInPackage_cEvaluator());
		evaluators.put(CoreDataType_c.class, new CoreDataType_cEvaluator());
		evaluators.put(UserDataType_c.class, new UserDataType_cEvaluator());
		evaluators.put(EnumerationDataType_c.class, new EnumerationDataType_cEvaluator());
		evaluators.put(Enumerator_c.class, new Enumerator_cEvaluator());
		evaluators.put(StructuredDataType_c.class, new StructuredDataType_cEvaluator());
		evaluators.put(StructureMember_c.class, new StructureMember_cEvaluator());
		evaluators.put(InstanceReferenceDataType_c.class, new InstanceReferenceDataType_cEvaluator());
		evaluators.put(SystemDatatypeInPackage_c.class, new SystemDatatypeInPackage_cEvaluator());
		evaluators.put(ConstantInPackage_c.class, new ConstantInPackage_cEvaluator());
		evaluators.put(SymbolicConstant_c.class, new SymbolicConstant_cEvaluator());
		evaluators.put(LeafSymbolicConstant_c.class, new LeafSymbolicConstant_cEvaluator());
		evaluators.put(LiteralSymbolicConstant_c.class, new LiteralSymbolicConstant_cEvaluator());
		evaluators.put(SystemConstantInPackage_c.class, new SystemConstantInPackage_cEvaluator());
		evaluators.put(EePackageInPackage_c.class, new EePackageInPackage_cEvaluator());
		evaluators.put(ExternalEntityInPackage_c.class, new ExternalEntityInPackage_cEvaluator());
		evaluators.put(Bridge_c.class, new Bridge_cEvaluator());
		evaluators.put(BridgeParameter_c.class, new BridgeParameter_cEvaluator());
		evaluators.put(ExternalEntityEventDataItem_c.class, new ExternalEntityEventDataItem_cEvaluator());
		evaluators.put(ExternalEntityEvent_c.class, new ExternalEntityEvent_cEvaluator());
		evaluators.put(ExternalEntityEventData_c.class, new ExternalEntityEventData_cEvaluator());
		evaluators.put(ExternalEntityDataItem_c.class, new ExternalEntityDataItem_cEvaluator());
		evaluators.put(FunctionPackageInPackage_c.class, new FunctionPackageInPackage_cEvaluator());
		evaluators.put(FunctionInPackage_c.class, new FunctionInPackage_cEvaluator());
		evaluators.put(FunctionParameter_c.class, new FunctionParameter_cEvaluator());
		evaluators.put(ActionNode_c.class, new ActionNode_cEvaluator());
		evaluators.put(ActivityDiagramAction_c.class, new ActivityDiagramAction_cEvaluator());
		evaluators.put(AcceptEvent_c.class, new AcceptEvent_cEvaluator());
		evaluators.put(AcceptEventAction_c.class, new AcceptEventAction_cEvaluator());
		evaluators.put(AcceptTimeEventAction_c.class, new AcceptTimeEventAction_cEvaluator());
		evaluators.put(SendSignal_c.class, new SendSignal_cEvaluator());
		evaluators.put(ObjectNode_c.class, new ObjectNode_cEvaluator());
		evaluators.put(ControlNode_c.class, new ControlNode_cEvaluator());
		evaluators.put(InitialNode_c.class, new InitialNode_cEvaluator());
		evaluators.put(ActivityFinalNode_c.class, new ActivityFinalNode_cEvaluator());
		evaluators.put(FlowFinalNode_c.class, new FlowFinalNode_cEvaluator());
		evaluators.put(DecisionMergeNode_c.class, new DecisionMergeNode_cEvaluator());
		evaluators.put(ForkJoinNode_c.class, new ForkJoinNode_cEvaluator());
		evaluators.put(ActivityInActivity_c.class, new ActivityInActivity_cEvaluator());
		evaluators.put(Subsystem_c.class, new Subsystem_cEvaluator());
		evaluators.put(ExternalEntityInModel_c.class, new ExternalEntityInModel_cEvaluator());
		evaluators.put(CommunicationPath_c.class, new CommunicationPath_cEvaluator());
		evaluators.put(AccessPath_c.class, new AccessPath_cEvaluator());
		evaluators.put(SubsystemInSubsystem_c.class, new SubsystemInSubsystem_cEvaluator());
		evaluators.put(Operation_c.class, new Operation_cEvaluator());
		evaluators.put(OperationParameter_c.class, new OperationParameter_cEvaluator());
		evaluators.put(Attribute_c.class, new Attribute_cEvaluator());
		evaluators.put(BaseAttribute_c.class, new BaseAttribute_cEvaluator());
		evaluators.put(DerivedBaseAttribute_c.class, new DerivedBaseAttribute_cEvaluator());
		evaluators.put(NewBaseAttribute_c.class, new NewBaseAttribute_cEvaluator());
		evaluators.put(ReferentialAttribute_c.class, new ReferentialAttribute_cEvaluator());
		evaluators.put(AttributeReferenceInClass_c.class, new AttributeReferenceInClass_cEvaluator());
		evaluators.put(ClassIdentifier_c.class, new ClassIdentifier_cEvaluator());
		evaluators.put(ClassIdentifierAttribute_c.class, new ClassIdentifierAttribute_cEvaluator());
		evaluators.put(InstanceStateMachine_c.class, new InstanceStateMachine_cEvaluator());
		evaluators.put(ClassStateMachine_c.class, new ClassStateMachine_cEvaluator());
		evaluators.put(SimpleAssociation_c.class, new SimpleAssociation_cEvaluator());
		evaluators.put(LinkedAssociation_c.class, new LinkedAssociation_cEvaluator());
		evaluators.put(SubtypeSupertypeAssociation_c.class, new SubtypeSupertypeAssociation_cEvaluator());
		evaluators.put(DerivedAssociation_c.class, new DerivedAssociation_cEvaluator());
		evaluators.put(ClassInAssociation_c.class, new ClassInAssociation_cEvaluator());
		evaluators.put(ReferredToClassInAssoc_c.class, new ReferredToClassInAssoc_cEvaluator());
		evaluators.put(ClassAsSimpleParticipant_c.class, new ClassAsSimpleParticipant_cEvaluator());
		evaluators.put(ClassAsAssociatedOneSide_c.class, new ClassAsAssociatedOneSide_cEvaluator());
		evaluators.put(ClassAsAssociatedOtherSide_c.class, new ClassAsAssociatedOtherSide_cEvaluator());
		evaluators.put(ClassAsSupertype_c.class, new ClassAsSupertype_cEvaluator());
		evaluators.put(ReferredToIdentifierAttribute_c.class, new ReferredToIdentifierAttribute_cEvaluator());
		evaluators.put(ReferringClassInAssoc_c.class, new ReferringClassInAssoc_cEvaluator());
		evaluators.put(ClassAsSimpleFormalizer_c.class, new ClassAsSimpleFormalizer_cEvaluator());
		evaluators.put(ClassAsLink_c.class, new ClassAsLink_cEvaluator());
		evaluators.put(ClassAsSubtype_c.class, new ClassAsSubtype_cEvaluator());
		evaluators.put(ClassAsDerivedOneSide_c.class, new ClassAsDerivedOneSide_cEvaluator());
		evaluators.put(ClassAsDerivedOtherSide_c.class, new ClassAsDerivedOtherSide_cEvaluator());
		evaluators.put(EeToSmCommPath_c.class, new EeToSmCommPath_cEvaluator());
		evaluators.put(EeToSmEventComm_c.class, new EeToSmEventComm_cEvaluator());
		evaluators.put(SmToSmCommPath_c.class, new SmToSmCommPath_cEvaluator());
		evaluators.put(SmToSmEventComm_c.class, new SmToSmEventComm_cEvaluator());
		evaluators.put(SmToEeCommPath_c.class, new SmToEeCommPath_cEvaluator());
		evaluators.put(SmToEeEventComm_c.class, new SmToEeEventComm_cEvaluator());
		evaluators.put(SmToObjAccessPath_c.class, new SmToObjAccessPath_cEvaluator());
		evaluators.put(SmToObjAttributeAccess_c.class, new SmToObjAttributeAccess_cEvaluator());
		evaluators.put(SmToEeAccessPath_c.class, new SmToEeAccessPath_cEvaluator());
		evaluators.put(SmToEeDataItemAccess_c.class, new SmToEeDataItemAccess_cEvaluator());
		evaluators.put(StateMachine_c.class, new StateMachine_cEvaluator());
		evaluators.put(MooreStateMachine_c.class, new MooreStateMachine_cEvaluator());
		evaluators.put(MealyStateMachine_c.class, new MealyStateMachine_cEvaluator());
		evaluators.put(StateMachineEventDataItem_c.class, new StateMachineEventDataItem_cEvaluator());
		evaluators.put(StateMachineEvent_c.class, new StateMachineEvent_cEvaluator());
		evaluators.put(StateMachineState_c.class, new StateMachineState_cEvaluator());
		evaluators.put(Transition_c.class, new Transition_cEvaluator());
		evaluators.put(Action_c.class, new Action_cEvaluator());
		evaluators.put(PolymorphicEvent_c.class, new PolymorphicEvent_cEvaluator());
		evaluators.put(SemEvent_c.class, new SemEvent_cEvaluator());
		evaluators.put(LocalEvent_c.class, new LocalEvent_cEvaluator());
		evaluators.put(NonLocalEvent_c.class, new NonLocalEvent_cEvaluator());
		evaluators.put(SignalEvent_c.class, new SignalEvent_cEvaluator());
		evaluators.put(StateEventMatrixEntry_c.class, new StateEventMatrixEntry_cEvaluator());
		evaluators.put(EventIgnored_c.class, new EventIgnored_cEvaluator());
		evaluators.put(CantHappen_c.class, new CantHappen_cEvaluator());
		evaluators.put(NoEventTransition_c.class, new NoEventTransition_cEvaluator());
		evaluators.put(NewStateTransition_c.class, new NewStateTransition_cEvaluator());
		evaluators.put(CreationTransition_c.class, new CreationTransition_cEvaluator());
		evaluators.put(ActionHome_c.class, new ActionHome_cEvaluator());
		evaluators.put(MooreActionHome_c.class, new MooreActionHome_cEvaluator());
		evaluators.put(MealyActionHome_c.class, new MealyActionHome_cEvaluator());
		evaluators.put(TransitionActionHome_c.class, new TransitionActionHome_cEvaluator());
		evaluators.put(ExternalEntityParticipant_c.class, new ExternalEntityParticipant_cEvaluator());
		evaluators.put(FunctionPackageParticipant_c.class, new FunctionPackageParticipant_cEvaluator());
		evaluators.put(ClassParticipant_c.class, new ClassParticipant_cEvaluator());
		evaluators.put(ClassParticipantAttribute_c.class, new ClassParticipantAttribute_cEvaluator());
		evaluators.put(InformalAttribute_c.class, new InformalAttribute_cEvaluator());
		evaluators.put(FormalAttribute_c.class, new FormalAttribute_cEvaluator());
		evaluators.put(ClassInstanceParticipant_c.class, new ClassInstanceParticipant_cEvaluator());
		evaluators.put(InstanceAttributeValue_c.class, new InstanceAttributeValue_cEvaluator());
		evaluators.put(InformalAttributeValue_c.class, new InformalAttributeValue_cEvaluator());
		evaluators.put(FormalAttributeValue_c.class, new FormalAttributeValue_cEvaluator());
		evaluators.put(ActorParticipant_c.class, new ActorParticipant_cEvaluator());
		evaluators.put(CommunicationLink_c.class, new CommunicationLink_cEvaluator());
		evaluators.put(UseCaseParticipant_c.class, new UseCaseParticipant_cEvaluator());
		evaluators.put(ComponentParticipant_c.class, new ComponentParticipant_cEvaluator());
		evaluators.put(Lifespan_c.class, new Lifespan_cEvaluator());
		evaluators.put(TimingMark_c.class, new TimingMark_cEvaluator());
		evaluators.put(TimeSpan_c.class, new TimeSpan_cEvaluator());
		evaluators.put(PackageParticipant_c.class, new PackageParticipant_cEvaluator());
		evaluators.put(ReturnMessage_c.class, new ReturnMessage_cEvaluator());
		evaluators.put(SynchronousMessage_c.class, new SynchronousMessage_cEvaluator());
		evaluators.put(InformalSynchronousMessage_c.class, new InformalSynchronousMessage_cEvaluator());
		evaluators.put(FunctionMessage_c.class, new FunctionMessage_cEvaluator());
		evaluators.put(OperationMessage_c.class, new OperationMessage_cEvaluator());
		evaluators.put(BridgeMessage_c.class, new BridgeMessage_cEvaluator());
		evaluators.put(InterfaceOperationMessage_c.class, new InterfaceOperationMessage_cEvaluator());
		evaluators.put(AsynchronousMessage_c.class, new AsynchronousMessage_cEvaluator());
		evaluators.put(EventMessage_c.class, new EventMessage_cEvaluator());
		evaluators.put(InformalAsynchronousMessage_c.class, new InformalAsynchronousMessage_cEvaluator());
		evaluators.put(SignalMessage_c.class, new SignalMessage_cEvaluator());
		evaluators.put(MessageArgument_c.class, new MessageArgument_cEvaluator());
		evaluators.put(BridgeArgument_c.class, new BridgeArgument_cEvaluator());
		evaluators.put(OperationArgument_c.class, new OperationArgument_cEvaluator());
		evaluators.put(FunctionArgument_c.class, new FunctionArgument_cEvaluator());
		evaluators.put(EventArgument_c.class, new EventArgument_cEvaluator());
		evaluators.put(InformalArgument_c.class, new InformalArgument_cEvaluator());
		evaluators.put(ExecutablePropertyArgument_c.class, new ExecutablePropertyArgument_cEvaluator());
		evaluators.put(SequenceInSequence_c.class, new SequenceInSequence_cEvaluator());
		evaluators.put(MessageInSequence_c.class, new MessageInSequence_cEvaluator());
		evaluators.put(CommunicationInCommunication_c.class, new CommunicationInCommunication_cEvaluator());
		evaluators.put(ParticipantInCommunication_c.class, new ParticipantInCommunication_cEvaluator());
		evaluators.put(MessageInCommunication_c.class, new MessageInCommunication_cEvaluator());
		evaluators.put(UseCaseInUseCase_c.class, new UseCaseInUseCase_cEvaluator());
		evaluators.put(ParticipantInUseCase_c.class, new ParticipantInUseCase_cEvaluator());
		evaluators.put(AssociationInUseCase_c.class, new AssociationInUseCase_cEvaluator());
		evaluators.put(BinaryAssociation_c.class, new BinaryAssociation_cEvaluator());
		evaluators.put(Generalization_c.class, new Generalization_cEvaluator());
		evaluators.put(Include_c.class, new Include_cEvaluator());
		evaluators.put(Extend_c.class, new Extend_cEvaluator());
	}
	
	public static HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(
			NonRootModelElement element) {
        IPersistenceHierarchyMetaData metaData = PersistenceManager.getHierarchyMetaData();
        if (element != null) {
            IMEExternalLinkEvaluator evaluator = (IMEExternalLinkEvaluator) evaluators.get(element.getClass());
            if (evaluator != null) {
                return evaluator.getAssociationMapOfExternalRGOs(element);
            }
        }
        return new HashMap<String, List<NonRootModelElement>>();
	}
	
    public static List findExternalRGOs(
            NonRootModelElement modelElement, boolean loadComponent, boolean rgoToComponent, boolean checkSameComponent) {
            List externalLinks = new Vector(){
                public boolean add(Object element){
                    if(!contains(element)){
                        return super.add(element);
                    }
                    return false;
                }
            };
            gatherRGOsExternalTo(modelElement, externalLinks, loadComponent, rgoToComponent, checkSameComponent);
            return externalLinks;
    }
    
    private static void gatherRGOsExternalTo(NonRootModelElement modelElement, List rgos, boolean loadComponent, boolean rgoToComponent, boolean checkSameComponent){
        IPersistenceHierarchyMetaData metaData = PersistenceManager.getHierarchyMetaData();
        if (modelElement != null) {
            IMEExternalLinkEvaluator evaluator = (IMEExternalLinkEvaluator) evaluators.get(modelElement.getClass());
            if (evaluator != null) {
                evaluator.findExternalRGOs(modelElement, rgos, loadComponent, checkSameComponent);
            }
        }
        if(rgoToComponent){
        List children = metaData.getChildren(modelElement, loadComponent);
        for (Iterator iterator = children.iterator(); iterator.hasNext();) {
            NonRootModelElement child = (NonRootModelElement) iterator.next();
            gatherRGOsExternalTo(child, rgos, loadComponent,rgoToComponent, checkSameComponent);
        }
       }
    }
	public static boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
		if (modelElement != null) {
			IMEExternalLinkEvaluator evaluator = (IMEExternalLinkEvaluator) evaluators
					.get(modelElement.getClass());
			if (evaluator != null) {
				return evaluator.hasExternalRGO(modelElement, loadComponent);
			}
		}
		return false;
	}
	private final static boolean isComponentSame(
		NonRootModelElement modelElement,
		NonRootModelElement other) { 
		return (PersistenceManager.getComponent(modelElement) == PersistenceManager.getComponent(other));
	}
	
	interface IMEExternalLinkEvaluator {
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEs, boolean loadComponent, boolean checkSameComponent);
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent);
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element);
	}

    
    
    
	static class SystemModel_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1211List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1211((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1211List.add(externalMEs[i]);
            }
            map.put("R1211", R1211List);
            List<NonRootModelElement> R4400List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemDatatypePackage_c.getManySLD_SDPsOnR4400((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4400List.add(externalMEs[i]);
            }
            map.put("R4400", R4400List);
            List<NonRootModelElement> R4402List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4402List.add(externalMEs[i]);
            }
            map.put("R4402", R4402List);
            List<NonRootModelElement> R4404List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemConstantInPackage_c.getManySLD_SCINPsOnR4404((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4404List.add(externalMEs[i]);
            }
            map.put("R4404", R4404List);
            List<NonRootModelElement> R950List = new ArrayList<NonRootModelElement>();
            externalMEs = Sequence_c.getManySQ_SsOnR950((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R950List.add(externalMEs[i]);
            }
            map.put("R950", R950List);
            IntegrityManager_c instIntegrityManager0 = IntegrityManager_c.getOneMI_IMOnR1301((SystemModel_c)element, true);
            if(instIntegrityManager0 != null){
            	List<NonRootModelElement> R1301List = new ArrayList<NonRootModelElement>();
            	R1301List.add(instIntegrityManager0);
                map.put("R1301", R1301List);
            }
            List<NonRootModelElement> R4302List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4302((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4302List.add(externalMEs[i]);
            }
            map.put("R4302", R4302List);
            List<NonRootModelElement> R4304List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4304((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4304List.add(externalMEs[i]);
            }
            map.put("R4304", R4304List);
            List<NonRootModelElement> R9100List = new ArrayList<NonRootModelElement>();
            externalMEs = GlobalElementInSystem_c.getManyG_EISsOnR9100((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9100List.add(externalMEs[i]);
            }
            map.put("R9100", R9100List);
            List<NonRootModelElement> R1401List = new ArrayList<NonRootModelElement>();
            externalMEs = Package_c.getManyEP_PKGsOnR1401((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1401List.add(externalMEs[i]);
            }
            map.put("R1401", R1401List);
            List<NonRootModelElement> R1405List = new ArrayList<NonRootModelElement>();
            externalMEs = Package_c.getManyEP_PKGsOnR1405((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1405List.add(externalMEs[i]);
            }
            map.put("R1405", R1405List);
            List<NonRootModelElement> R28List = new ArrayList<NonRootModelElement>();
            externalMEs = Domain_c.getManyS_DOMsOnR28((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R28List.add(externalMEs[i]);
            }
            map.put("R28", R28List);
            List<NonRootModelElement> R4602List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentPackage_c.getManyCP_CPsOnR4602((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4602List.add(externalMEs[i]);
            }
            map.put("R4602", R4602List);
            List<NonRootModelElement> R4606List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentPackage_c.getManyCP_CPsOnR4606((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4606List.add(externalMEs[i]);
            }
            map.put("R4606", R4606List);
            List<NonRootModelElement> R1136List = new ArrayList<NonRootModelElement>();
            externalMEs = Communication_c.getManyCOMM_COMMsOnR1136((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1136List.add(externalMEs[i]);
            }
            map.put("R1136", R1136List);
            List<NonRootModelElement> R1113List = new ArrayList<NonRootModelElement>();
            externalMEs = Activity_c.getManyA_AsOnR1113((SystemModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1113List.add(externalMEs[i]);
            }
            map.put("R1113", R1113List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1211((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SystemDatatypePackage_c.getManySLD_SDPsOnR4400((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SystemConstantInPackage_c.getManySLD_SCINPsOnR4404((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Sequence_c.getManySQ_SsOnR950((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            IntegrityManager_c instIntegrityManager0 = IntegrityManager_c.getOneMI_IMOnR1301((SystemModel_c)modelElement, loadComponent);
            if(instIntegrityManager0 != null){
                externalMEList.add(instIntegrityManager0);
            }

            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4302((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4304((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = GlobalElementInSystem_c.getManyG_EISsOnR9100((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Package_c.getManyEP_PKGsOnR1401((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Package_c.getManyEP_PKGsOnR1405((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Domain_c.getManyS_DOMsOnR28((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ComponentPackage_c.getManyCP_CPsOnR4602((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ComponentPackage_c.getManyCP_CPsOnR4606((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Communication_c.getManyCOMM_COMMsOnR1136((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Activity_c.getManyA_AsOnR1113((SystemModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // System Model ->R1211
           //                      ->R1211 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4400
           //                      ->R4400 -- System Datatype Package  
           //                      ->R4400 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4402
           //                      ->R4402 -- System Datatype in Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4404
           //                      ->R4404 -- System Constant in Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R950
           //                      ->R950 -- Sequence <<DEFINITE EXTERNAL LINK>>
            // System Model ->R1301
           //                      ->R1301 -- Integrity Manager <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4302
           //                      ->R4302 -- Interface Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4304
           //                      ->R4304 -- Interface Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R9100
           //                      ->R9100 -- Packageable Element <<DEFINITE EXTERNAL LINK>>
           //                      ->R9100 -- Global Element in System <<DEFINITE EXTERNAL LINK>>
            // System Model ->R1401
           //                      ->R1401 -- Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R1405
           //                      ->R1405 -- Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R28
           //                      ->R28 -- Domain <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4602
           //                      ->R4602 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R4606
           //                      ->R4606 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // System Model ->R1136
           //                      ->R1136 -- Communication <<DEFINITE EXTERNAL LINK>>
            // System Model ->R1113
           //                      ->R1113 -- Activity <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1211((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SystemDatatypePackage_c.getOneSLD_SDPOnR4400((SystemModel_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4402((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SystemConstantInPackage_c.getOneSLD_SCINPOnR4404((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Sequence_c.getOneSQ_SOnR950((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = IntegrityManager_c.getOneMI_IMOnR1301((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfacePackage_c.getOneIP_IPOnR4302((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfacePackage_c.getOneIP_IPOnR4304((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = GlobalElementInSystem_c.getOneG_EISOnR9100((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Package_c.getOneEP_PKGOnR1401((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Package_c.getOneEP_PKGOnR1405((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Domain_c.getOneS_DOMOnR28((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentPackage_c.getOneCP_CPOnR4602((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentPackage_c.getOneCP_CPOnR4606((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Communication_c.getOneCOMM_COMMOnR1136((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Activity_c.getOneA_AOnR1113((SystemModel_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Domain_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1201List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1201((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1201List.add(externalMEs[i]);
            }
            map.put("R1201", R1201List);
            List<NonRootModelElement> R913List = new ArrayList<NonRootModelElement>();
            externalMEs = Sequence_c.getManySQ_SsOnR913((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R913List.add(externalMEs[i]);
            }
            map.put("R913", R913List);
            ComponentInstance_c instComponentInstance0 = ComponentInstance_c.getOneI_EXEOnR2948((Domain_c)element, true);
            if(instComponentInstance0 != null){
            	List<NonRootModelElement> R2948List = new ArrayList<NonRootModelElement>();
            	R2948List.add(instComponentInstance0);
                map.put("R2948", R2948List);
            }
            List<NonRootModelElement> R1List = new ArrayList<NonRootModelElement>();
            externalMEs = Subsystem_c.getManyS_SSsOnR1((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1List.add(externalMEs[i]);
            }
            map.put("R1", R1List);
            List<NonRootModelElement> R14List = new ArrayList<NonRootModelElement>();
            externalMEs = DataType_c.getManyS_DTsOnR14((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R14List.add(externalMEs[i]);
            }
            map.put("R14", R14List);
            List<NonRootModelElement> R8List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntity_c.getManyS_EEsOnR8((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8List.add(externalMEs[i]);
            }
            map.put("R8", R8List);
            List<NonRootModelElement> R23List = new ArrayList<NonRootModelElement>();
            externalMEs = Function_c.getManyS_SYNCsOnR23((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R23List.add(externalMEs[i]);
            }
            map.put("R23", R23List);
            List<NonRootModelElement> R29List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionPackage_c.getManyS_FPKsOnR29((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R29List.add(externalMEs[i]);
            }
            map.put("R29", R29List);
            List<NonRootModelElement> R36List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityPackage_c.getManyS_EEPKsOnR36((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R36List.add(externalMEs[i]);
            }
            map.put("R36", R36List);
            List<NonRootModelElement> R40List = new ArrayList<NonRootModelElement>();
            externalMEs = DataTypePackage_c.getManyS_DPKsOnR40((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R40List.add(externalMEs[i]);
            }
            map.put("R40", R40List);
            List<NonRootModelElement> R43List = new ArrayList<NonRootModelElement>();
            externalMEs = SubsystemInDomain_c.getManyS_SIDsOnR43((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R43List.add(externalMEs[i]);
            }
            map.put("R43", R43List);
            List<NonRootModelElement> R47List = new ArrayList<NonRootModelElement>();
            externalMEs = DatatypeInSuppression_c.getManyS_DISsOnR47((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R47List.add(externalMEs[i]);
            }
            map.put("R47", R47List);
            List<NonRootModelElement> R300List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityPackageInDomain_c.getManyPL_EEPIDsOnR300((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R300List.add(externalMEs[i]);
            }
            map.put("R300", R300List);
            List<NonRootModelElement> R301List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionPackageInDomain_c.getManyPL_FPIDsOnR301((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R301List.add(externalMEs[i]);
            }
            map.put("R301", R301List);
            List<NonRootModelElement> R4204List = new ArrayList<NonRootModelElement>();
            externalMEs = DomainAsComponent_c.getManyCN_DCsOnR4204((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4204List.add(externalMEs[i]);
            }
            map.put("R4204", R4204List);
            List<NonRootModelElement> R1132List = new ArrayList<NonRootModelElement>();
            externalMEs = Communication_c.getManyCOMM_COMMsOnR1132((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1132List.add(externalMEs[i]);
            }
            map.put("R1132", R1132List);
            List<NonRootModelElement> R1100List = new ArrayList<NonRootModelElement>();
            externalMEs = Activity_c.getManyA_AsOnR1100((Domain_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1100List.add(externalMEs[i]);
            }
            map.put("R1100", R1100List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1201((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Sequence_c.getManySQ_SsOnR913((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            ComponentInstance_c instComponentInstance0 = ComponentInstance_c.getOneI_EXEOnR2948((Domain_c)modelElement, loadComponent);
            if(instComponentInstance0 != null){
                externalMEList.add(instComponentInstance0);
            }

            externalMEs = Subsystem_c.getManyS_SSsOnR1((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = DataType_c.getManyS_DTsOnR14((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntity_c.getManyS_EEsOnR8((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Function_c.getManyS_SYNCsOnR23((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionPackage_c.getManyS_FPKsOnR29((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ExternalEntityPackage_c.getManyS_EEPKsOnR36((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = DataTypePackage_c.getManyS_DPKsOnR40((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SubsystemInDomain_c.getManyS_SIDsOnR43((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = DatatypeInSuppression_c.getManyS_DISsOnR47((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntityPackageInDomain_c.getManyPL_EEPIDsOnR300((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = FunctionPackageInDomain_c.getManyPL_FPIDsOnR301((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = DomainAsComponent_c.getManyCN_DCsOnR4204((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Communication_c.getManyCOMM_COMMsOnR1132((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Activity_c.getManyA_AsOnR1100((Domain_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Domain ->R1201
           //                      ->R1201 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
            // Domain ->R913
           //                      ->R913 -- Sequence <<DEFINITE EXTERNAL LINK>>
            // Domain ->R2948
           //                      ->R2948 -- Component Instance <<DEFINITE EXTERNAL LINK>>
            // Domain ->R1
           //                      ->R1 -- Subsystem <<Legacy Containment>>
            // Domain ->R14
           //                      ->R14 -- Data Type <<Legacy Containment>>
            // Domain ->R8
           //                      ->R8 -- External Entity <<Legacy Containment>>
            // Domain ->R23
           //                      ->R23 -- Function <<Legacy Containment>>
            // Domain ->R28
           //                      ->R28 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Domain ->R29
           //                      ->R29 -- Function Package <<DEFINITE EXTERNAL LINK>>
            // Domain ->R36
           //                      ->R36 -- External Entity Package <<DEFINITE EXTERNAL LINK>>
            // Domain ->R40
           //                      ->R40 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
            // Domain ->R43
           //                      ->R43 -- Subsystem in Domain  
           //                      ->R43 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Domain ->R47
           //                      ->R47 -- Datatype In Suppression  
           //                      ->R47 -- Data Type  
            // Domain ->R300
           //                      ->R300 -- External Entity Package in Domain  
           //                      ->R300 -- External Entity Package <<DEFINITE EXTERNAL LINK>>
            // Domain ->R301
           //                      ->R301 -- Function Package in Domain  
           //                      ->R301 -- Function Package <<DEFINITE EXTERNAL LINK>>
            // Domain ->R4204
           //                      ->R4204 -- Domain As Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R4204 -- Component <<DEFINITE EXTERNAL LINK>>
            // Domain ->R1132
           //                      ->R1132 -- Communication <<DEFINITE EXTERNAL LINK>>
            // Domain ->R1100
           //                      ->R1100 -- Activity <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1201((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Sequence_c.getOneSQ_SOnR913((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentInstance_c.getOneI_EXEOnR2948((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Subsystem_c.getOneS_SSOnR1((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = DataType_c.getOneS_DTOnR14((Domain_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntity_c.getOneS_EEOnR8((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Function_c.getOneS_SYNCOnR23((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionPackage_c.getOneS_FPKOnR29((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ExternalEntityPackage_c.getOneS_EEPKOnR36((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = DataTypePackage_c.getOneS_DPKOnR40((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SubsystemInDomain_c.getOneS_SIDOnR43((Domain_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DatatypeInSuppression_c.getOneS_DISOnR47((Domain_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityPackageInDomain_c.getOnePL_EEPIDOnR300((Domain_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionPackageInDomain_c.getOnePL_FPIDOnR301((Domain_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DomainAsComponent_c.getOneCN_DCOnR4204((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Communication_c.getOneCOMM_COMMOnR1132((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Activity_c.getOneA_AOnR1100((Domain_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DataTypePackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4400List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemDatatypePackage_c.getManySLD_SDPsOnR4400((DataTypePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4400List.add(externalMEs[i]);
            }
            map.put("R4400", R4400List);
            List<NonRootModelElement> R4401List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401((DataTypePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4401List.add(externalMEs[i]);
            }
            map.put("R4401", R4401List);
            List<NonRootModelElement> R4403List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403((DataTypePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4403List.add(externalMEs[i]);
            }
            map.put("R4403", R4403List);
            DataTypePackageInPackage_c instDataTypePackageInPackage0 = DataTypePackageInPackage_c.getOneS_DPIPOnR37((DataTypePackage_c)element, true);
            if(instDataTypePackageInPackage0 != null){
            	List<NonRootModelElement> R37List = new ArrayList<NonRootModelElement>();
            	R37List.add(instDataTypePackageInPackage0);
                map.put("R37", R37List);
            }
            List<NonRootModelElement> R39List = new ArrayList<NonRootModelElement>();
            externalMEs = DataTypeInPackage_c.getManyS_DIPsOnR39((DataTypePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R39List.add(externalMEs[i]);
            }
            map.put("R39", R39List);
            List<NonRootModelElement> R1506List = new ArrayList<NonRootModelElement>();
            externalMEs = ConstantInPackage_c.getManyCNST_CIPsOnR1506((DataTypePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1506List.add(externalMEs[i]);
            }
            map.put("R1506", R1506List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SystemDatatypePackage_c.getManySLD_SDPsOnR4400((DataTypePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401((DataTypePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403((DataTypePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            DataTypePackageInPackage_c instDataTypePackageInPackage0 = DataTypePackageInPackage_c.getOneS_DPIPOnR37((DataTypePackage_c)modelElement, loadComponent);
            if(instDataTypePackageInPackage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instDataTypePackageInPackage0))){
                externalMEList.add(instDataTypePackageInPackage0);
            }

            externalMEs = DataTypeInPackage_c.getManyS_DIPsOnR39((DataTypePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ConstantInPackage_c.getManyCNST_CIPsOnR1506((DataTypePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Data Type Package ->R4400
           //                      ->R4400 -- System Datatype Package  
           //                      ->R4400 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Data Type Package ->R4401
           //                      ->R4401 -- System Datatype in Package  
           //                      ->R4401 -- Data Type  
            // Data Type Package ->R4403
           //                      ->R4403 -- System Constant in Package  
           //                      ->R4403 -- Constant Specification  
            // Data Type Package ->R1402
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
            // Data Type Package ->R37
           //                      ->R37 -- Data Type Package in Package  
            // Data Type Package ->R38
           //                      ->R38 -- Data Type Package in Package  
            // Data Type Package ->R39
           //                      ->R39 -- Data Type in Package  
           //                      ->R39 -- Data Type  
            // Data Type Package ->R40
           //                      ->R40 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Data Type Package ->R1506
           //                      ->R1506 -- Constant in Package  
           //                      ->R1506 -- Constant Specification  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SystemDatatypePackage_c.getOneSLD_SDPOnR4400((DataTypePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401((DataTypePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SystemConstantInPackage_c.getOneSLD_SCINPOnR4403((DataTypePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DataTypePackageInPackage_c.getOneS_DPIPOnR37((DataTypePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DataTypeInPackage_c.getOneS_DIPOnR39((DataTypePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ConstantInPackage_c.getOneCNST_CIPOnR1506((DataTypePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntityPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R33List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityInPackage_c.getManyS_EEIPsOnR33((ExternalEntityPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R33List.add(externalMEs[i]);
            }
            map.put("R33", R33List);
            EePackageInPackage_c instEePackageInPackage0 = EePackageInPackage_c.getOneS_EEPIPOnR34((ExternalEntityPackage_c)element, true);
            if(instEePackageInPackage0 != null){
            	List<NonRootModelElement> R34List = new ArrayList<NonRootModelElement>();
            	R34List.add(instEePackageInPackage0);
                map.put("R34", R34List);
            }
            List<NonRootModelElement> R300List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityPackageInDomain_c.getManyPL_EEPIDsOnR300((ExternalEntityPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R300List.add(externalMEs[i]);
            }
            map.put("R300", R300List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ExternalEntityInPackage_c.getManyS_EEIPsOnR33((ExternalEntityPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            EePackageInPackage_c instEePackageInPackage0 = EePackageInPackage_c.getOneS_EEPIPOnR34((ExternalEntityPackage_c)modelElement, loadComponent);
            if(instEePackageInPackage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instEePackageInPackage0))){
                externalMEList.add(instEePackageInPackage0);
            }

            externalMEs = ExternalEntityPackageInDomain_c.getManyPL_EEPIDsOnR300((ExternalEntityPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // External Entity Package ->R33
           //                      ->R33 -- External Entity in Package  
           //                      ->R33 -- External Entity  
            // External Entity Package ->R34
           //                      ->R34 -- EE Package in Package  
            // External Entity Package ->R35
           //                      ->R35 -- EE Package in Package  
            // External Entity Package ->R36
           //                      ->R36 -- Domain <<DEFINITE EXTERNAL LINK>>
            // External Entity Package ->R300
           //                      ->R300 -- External Entity Package in Domain  
           //                      ->R300 -- Domain <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ExternalEntityInPackage_c.getOneS_EEIPOnR33((ExternalEntityPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EePackageInPackage_c.getOneS_EEPIPOnR34((ExternalEntityPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityPackageInDomain_c.getOnePL_EEPIDOnR300((ExternalEntityPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class FunctionPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R932List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionPackageParticipant_c.getManySQ_FPPsOnR932((FunctionPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R932List.add(externalMEs[i]);
            }
            map.put("R932", R932List);
            List<NonRootModelElement> R31List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionInPackage_c.getManyS_FIPsOnR31((FunctionPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R31List.add(externalMEs[i]);
            }
            map.put("R31", R31List);
            FunctionPackageInPackage_c instFunctionPackageInPackage0 = FunctionPackageInPackage_c.getOneS_FPIPOnR30((FunctionPackage_c)element, true);
            if(instFunctionPackageInPackage0 != null){
            	List<NonRootModelElement> R30List = new ArrayList<NonRootModelElement>();
            	R30List.add(instFunctionPackageInPackage0);
                map.put("R30", R30List);
            }
            List<NonRootModelElement> R301List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionPackageInDomain_c.getManyPL_FPIDsOnR301((FunctionPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R301List.add(externalMEs[i]);
            }
            map.put("R301", R301List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = FunctionPackageParticipant_c.getManySQ_FPPsOnR932((FunctionPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionInPackage_c.getManyS_FIPsOnR31((FunctionPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            FunctionPackageInPackage_c instFunctionPackageInPackage0 = FunctionPackageInPackage_c.getOneS_FPIPOnR30((FunctionPackage_c)modelElement, loadComponent);
            if(instFunctionPackageInPackage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instFunctionPackageInPackage0))){
                externalMEList.add(instFunctionPackageInPackage0);
            }

            externalMEs = FunctionPackageInDomain_c.getManyPL_FPIDsOnR301((FunctionPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Function Package ->R932
           //                      ->R932 -- Function Package Participant <<DEFINITE EXTERNAL LINK>>
            // Function Package ->R29
           //                      ->R29 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Function Package ->R31
           //                      ->R31 -- Function in Package  
           //                      ->R31 -- Function  
            // Function Package ->R30
           //                      ->R30 -- Function Package in Package  
            // Function Package ->R32
           //                      ->R32 -- Function Package in Package  
            // Function Package ->R301
           //                      ->R301 -- Function Package in Domain  
           //                      ->R301 -- Domain <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = FunctionPackageParticipant_c.getOneSQ_FPPOnR932((FunctionPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionInPackage_c.getOneS_FIPOnR31((FunctionPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionPackageInPackage_c.getOneS_FPIPOnR30((FunctionPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionPackageInDomain_c.getOnePL_FPIDOnR301((FunctionPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SubsystemInDomain_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Subsystem in Domain ->R43
           //                      ->R43 -- Domain  
           //                      ->R43 -- Subsystem <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ExternalEntityPackageInDomain_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // External Entity Package in Domain ->R300
           //                      ->R300 -- Domain  
           //                      ->R300 -- External Entity Package <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FunctionPackageInDomain_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Function Package in Domain ->R301
           //                      ->R301 -- Function Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R301 -- Domain  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Sequence_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            SequenceInSequence_c instSequenceInSequence0 = SequenceInSequence_c.getOneSQ_SISOnR911((Sequence_c)element, true);
            if(instSequenceInSequence0 != null){
            	List<NonRootModelElement> R911List = new ArrayList<NonRootModelElement>();
            	R911List.add(instSequenceInSequence0);
                map.put("R911", R911List);
            }
            List<NonRootModelElement> R929List = new ArrayList<NonRootModelElement>();
            externalMEs = InteractionParticipant_c.getManySQ_PsOnR929((Sequence_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R929List.add(externalMEs[i]);
            }
            map.put("R929", R929List);
            List<NonRootModelElement> R953List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageInSequence_c.getManySQ_MISsOnR953((Sequence_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R953List.add(externalMEs[i]);
            }
            map.put("R953", R953List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            SequenceInSequence_c instSequenceInSequence0 = SequenceInSequence_c.getOneSQ_SISOnR911((Sequence_c)modelElement, loadComponent);
            if(instSequenceInSequence0 != null && (!checkSameComponent || !isComponentSame(modelElement, instSequenceInSequence0))){
                externalMEList.add(instSequenceInSequence0);
            }

            externalMEs = InteractionParticipant_c.getManySQ_PsOnR929((Sequence_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = MessageInSequence_c.getManySQ_MISsOnR953((Sequence_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Sequence ->R913
           //                      ->R913 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Sequence ->R914
           //                      ->R914 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Sequence ->R928
           //                      ->R928 -- Sequence in Sequence  
            // Sequence ->R911
           //                      ->R911 -- Sequence in Sequence  
            // Sequence ->R929
           //                      ->R929 -- Interaction Participant  
            // Sequence ->R950
           //                      ->R950 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Sequence ->R951
           //                      ->R951 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Sequence ->R952
           //                      ->R952 -- Component <<DEFINITE EXTERNAL LINK>>
            // Sequence ->R953
           //                      ->R953 -- Message In Sequence  
            // Sequence ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SequenceInSequence_c.getOneSQ_SISOnR911((Sequence_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InteractionParticipant_c.getOneSQ_POnR929((Sequence_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MessageInSequence_c.getOneSQ_MISOnR953((Sequence_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Communication_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            CommunicationInCommunication_c instCommunicationInCommunication0 = CommunicationInCommunication_c.getOneCOMM_CICOnR1130((Communication_c)element, true);
            if(instCommunicationInCommunication0 != null){
            	List<NonRootModelElement> R1130List = new ArrayList<NonRootModelElement>();
            	R1130List.add(instCommunicationInCommunication0);
                map.put("R1130", R1130List);
            }
            List<NonRootModelElement> R1126List = new ArrayList<NonRootModelElement>();
            externalMEs = ParticipantInCommunication_c.getManyCOMM_PICsOnR1126((Communication_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1126List.add(externalMEs[i]);
            }
            map.put("R1126", R1126List);
            List<NonRootModelElement> R1135List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageInCommunication_c.getManyCOMM_MICsOnR1135((Communication_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1135List.add(externalMEs[i]);
            }
            map.put("R1135", R1135List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            CommunicationInCommunication_c instCommunicationInCommunication0 = CommunicationInCommunication_c.getOneCOMM_CICOnR1130((Communication_c)modelElement, loadComponent);
            if(instCommunicationInCommunication0 != null && (!checkSameComponent || !isComponentSame(modelElement, instCommunicationInCommunication0))){
                externalMEList.add(instCommunicationInCommunication0);
            }

            externalMEs = ParticipantInCommunication_c.getManyCOMM_PICsOnR1126((Communication_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = MessageInCommunication_c.getManyCOMM_MICsOnR1135((Communication_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Communication ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
            // Communication ->R1129
           //                      ->R1129 -- Communication in Communication  
            // Communication ->R1130
           //                      ->R1130 -- Communication in Communication  
            // Communication ->R1132
           //                      ->R1132 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Communication ->R1126
           //                      ->R1126 -- Participant in Communication  
           //                      ->R1126 -- Interaction Participant  
            // Communication ->R1131
           //                      ->R1131 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Communication ->R1135
           //                      ->R1135 -- Message in Communication  
           //                      ->R1135 -- Message  
            // Communication ->R1136
           //                      ->R1136 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Communication ->R1137
           //                      ->R1137 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Communication ->R1138
           //                      ->R1138 -- Component <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = CommunicationInCommunication_c.getOneCOMM_CICOnR1130((Communication_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParticipantInCommunication_c.getOneCOMM_PICOnR1126((Communication_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MessageInCommunication_c.getOneCOMM_MICOnR1135((Communication_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class UseCaseDiagram_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            UseCaseInUseCase_c instUseCaseInUseCase0 = UseCaseInUseCase_c.getOneUC_UIUOnR1208((UseCaseDiagram_c)element, true);
            if(instUseCaseInUseCase0 != null){
            	List<NonRootModelElement> R1208List = new ArrayList<NonRootModelElement>();
            	R1208List.add(instUseCaseInUseCase0);
                map.put("R1208", R1208List);
            }
            List<NonRootModelElement> R1203List = new ArrayList<NonRootModelElement>();
            externalMEs = ParticipantInUseCase_c.getManyUC_PIUCsOnR1203((UseCaseDiagram_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1203List.add(externalMEs[i]);
            }
            map.put("R1203", R1203List);
            List<NonRootModelElement> R1214List = new ArrayList<NonRootModelElement>();
            externalMEs = AssociationInUseCase_c.getManyUC_AIUCsOnR1214((UseCaseDiagram_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1214List.add(externalMEs[i]);
            }
            map.put("R1214", R1214List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            UseCaseInUseCase_c instUseCaseInUseCase0 = UseCaseInUseCase_c.getOneUC_UIUOnR1208((UseCaseDiagram_c)modelElement, loadComponent);
            if(instUseCaseInUseCase0 != null && (!checkSameComponent || !isComponentSame(modelElement, instUseCaseInUseCase0))){
                externalMEList.add(instUseCaseInUseCase0);
            }

            externalMEs = ParticipantInUseCase_c.getManyUC_PIUCsOnR1203((UseCaseDiagram_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = AssociationInUseCase_c.getManyUC_AIUCsOnR1214((UseCaseDiagram_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Use Case Diagram ->R1201
           //                      ->R1201 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Use Case Diagram ->R1202
           //                      ->R1202 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Use Case Diagram ->R1208
           //                      ->R1208 -- Use Case in Use Case  
            // Use Case Diagram ->R1209
           //                      ->R1209 -- Use Case in Use Case  
            // Use Case Diagram ->R1203
           //                      ->R1203 -- Participant in Use Case  
           //                      ->R1203 -- Interaction Participant  
            // Use Case Diagram ->R1211
           //                      ->R1211 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Use Case Diagram ->R1212
           //                      ->R1212 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Use Case Diagram ->R1213
           //                      ->R1213 -- Component <<DEFINITE EXTERNAL LINK>>
            // Use Case Diagram ->R1214
           //                      ->R1214 -- Association In Use Case  
            // Use Case Diagram ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = UseCaseInUseCase_c.getOneUC_UIUOnR1208((UseCaseDiagram_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParticipantInUseCase_c.getOneUC_PIUCOnR1203((UseCaseDiagram_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AssociationInUseCase_c.getOneUC_AIUCOnR1214((UseCaseDiagram_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Activity_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ActivityInActivity_c instActivityInActivity0 = ActivityInActivity_c.getOneA_AIAOnR1109((Activity_c)element, true);
            if(instActivityInActivity0 != null){
            	List<NonRootModelElement> R1109List = new ArrayList<NonRootModelElement>();
            	R1109List.add(instActivityInActivity0);
                map.put("R1109", R1109List);
            }
            List<NonRootModelElement> R1111List = new ArrayList<NonRootModelElement>();
            externalMEs = ActivityPartition_c.getManyA_APsOnR1111((Activity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1111List.add(externalMEs[i]);
            }
            map.put("R1111", R1111List);
            List<NonRootModelElement> R1102List = new ArrayList<NonRootModelElement>();
            externalMEs = ActivityEdge_c.getManyA_EsOnR1102((Activity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1102List.add(externalMEs[i]);
            }
            map.put("R1102", R1102List);
            List<NonRootModelElement> R1101List = new ArrayList<NonRootModelElement>();
            externalMEs = ActivityNode_c.getManyA_NsOnR1101((Activity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1101List.add(externalMEs[i]);
            }
            map.put("R1101", R1101List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ActivityInActivity_c instActivityInActivity0 = ActivityInActivity_c.getOneA_AIAOnR1109((Activity_c)modelElement, loadComponent);
            if(instActivityInActivity0 != null && (!checkSameComponent || !isComponentSame(modelElement, instActivityInActivity0))){
                externalMEList.add(instActivityInActivity0);
            }

            externalMEs = ActivityPartition_c.getManyA_APsOnR1111((Activity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ActivityEdge_c.getManyA_EsOnR1102((Activity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ActivityNode_c.getManyA_NsOnR1101((Activity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Activity ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
            // Activity ->R1100
           //                      ->R1100 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Activity ->R1108
           //                      ->R1108 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Activity ->R1109
           //                      ->R1109 -- Activity In Activity  
            // Activity ->R1110
           //                      ->R1110 -- Activity In Activity  
            // Activity ->R1111
           //                      ->R1111 -- Activity Partition  
            // Activity ->R1102
           //                      ->R1102 -- Activity Edge  
            // Activity ->R1101
           //                      ->R1101 -- Activity Node  
            // Activity ->R1113
           //                      ->R1113 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Activity ->R1114
           //                      ->R1114 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Activity ->R1115
           //                      ->R1115 -- Component <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ActivityInActivity_c.getOneA_AIAOnR1109((Activity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityPartition_c.getOneA_APOnR1111((Activity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityEdge_c.getOneA_EOnR1102((Activity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityNode_c.getOneA_NOnR1101((Activity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DatatypeInSuppression_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Datatype In Suppression ->R47
           //                      ->R47 -- Domain  
           //                      ->R47 -- Data Type  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class DataType_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R47List = new ArrayList<NonRootModelElement>();
            externalMEs = DatatypeInSuppression_c.getManyS_DISsOnR47((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R47List.add(externalMEs[i]);
            }
            map.put("R47", R47List);
            List<NonRootModelElement> R820List = new ArrayList<NonRootModelElement>();
            externalMEs = Value_c.getManyV_VALsOnR820((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R820List.add(externalMEs[i]);
            }
            map.put("R820", R820List);
            List<NonRootModelElement> R821List = new ArrayList<NonRootModelElement>();
            externalMEs = TransientVar_c.getManyV_TRNsOnR821((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R821List.add(externalMEs[i]);
            }
            map.put("R821", R821List);
            List<NonRootModelElement> R848List = new ArrayList<NonRootModelElement>();
            externalMEs = Variable_c.getManyV_VARsOnR848((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R848List.add(externalMEs[i]);
            }
            map.put("R848", R848List);
            List<NonRootModelElement> R4401List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4401List.add(externalMEs[i]);
            }
            map.put("R4401", R4401List);
            List<NonRootModelElement> R118List = new ArrayList<NonRootModelElement>();
            externalMEs = OperationParameter_c.getManyO_TPARMsOnR118((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R118List.add(externalMEs[i]);
            }
            map.put("R118", R118List);
            List<NonRootModelElement> R116List = new ArrayList<NonRootModelElement>();
            externalMEs = Operation_c.getManyO_TFRsOnR116((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R116List.add(externalMEs[i]);
            }
            map.put("R116", R116List);
            List<NonRootModelElement> R114List = new ArrayList<NonRootModelElement>();
            externalMEs = Attribute_c.getManyO_ATTRsOnR114((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R114List.add(externalMEs[i]);
            }
            map.put("R114", R114List);
            List<NonRootModelElement> R524List = new ArrayList<NonRootModelElement>();
            externalMEs = StateMachineEventDataItem_c.getManySM_EVTDIsOnR524((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R524List.add(externalMEs[i]);
            }
            map.put("R524", R524List);
            List<NonRootModelElement> R16List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR16((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R16List.add(externalMEs[i]);
            }
            map.put("R16", R16List);
            CoreDataType_c instCoreDataType0 = CoreDataType_c.getOneS_CDTOnR17((DataType_c)element, true);
            if(instCoreDataType0 != null){
            	List<NonRootModelElement> R17List = new ArrayList<NonRootModelElement>();
            	R17List.add(instCoreDataType0);
                map.put("R17", R17List);
            }
            UserDataType_c instUserDataType1 = UserDataType_c.getOneS_UDTOnR17((DataType_c)element, true);
            if(instUserDataType1 != null){
            	List<NonRootModelElement> R17List = new ArrayList<NonRootModelElement>();
            	R17List.add(instUserDataType1);
                map.put("R17", R17List);
            }
            EnumerationDataType_c instEnumerationDataType2 = EnumerationDataType_c.getOneS_EDTOnR17((DataType_c)element, true);
            if(instEnumerationDataType2 != null){
            	List<NonRootModelElement> R17List = new ArrayList<NonRootModelElement>();
            	R17List.add(instEnumerationDataType2);
                map.put("R17", R17List);
            }
            StructuredDataType_c instStructuredDataType3 = StructuredDataType_c.getOneS_SDTOnR17((DataType_c)element, true);
            if(instStructuredDataType3 != null){
            	List<NonRootModelElement> R17List = new ArrayList<NonRootModelElement>();
            	R17List.add(instStructuredDataType3);
                map.put("R17", R17List);
            }
            InstanceReferenceDataType_c instInstanceReferenceDataType4 = InstanceReferenceDataType_c.getOneS_IRDTOnR17((DataType_c)element, true);
            if(instInstanceReferenceDataType4 != null){
            	List<NonRootModelElement> R17List = new ArrayList<NonRootModelElement>();
            	R17List.add(instInstanceReferenceDataType4);
                map.put("R17", R17List);
            }
            List<NonRootModelElement> R20List = new ArrayList<NonRootModelElement>();
            externalMEs = Bridge_c.getManyS_BRGsOnR20((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R20List.add(externalMEs[i]);
            }
            map.put("R20", R20List);
            List<NonRootModelElement> R15List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityDataItem_c.getManyS_EEDIsOnR15((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R15List.add(externalMEs[i]);
            }
            map.put("R15", R15List);
            List<NonRootModelElement> R22List = new ArrayList<NonRootModelElement>();
            externalMEs = BridgeParameter_c.getManyS_BPARMsOnR22((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R22List.add(externalMEs[i]);
            }
            map.put("R22", R22List);
            List<NonRootModelElement> R25List = new ArrayList<NonRootModelElement>();
            externalMEs = Function_c.getManyS_SYNCsOnR25((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R25List.add(externalMEs[i]);
            }
            map.put("R25", R25List);
            List<NonRootModelElement> R26List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionParameter_c.getManyS_SPARMsOnR26((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R26List.add(externalMEs[i]);
            }
            map.put("R26", R26List);
            List<NonRootModelElement> R39List = new ArrayList<NonRootModelElement>();
            externalMEs = DataTypeInPackage_c.getManyS_DIPsOnR39((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R39List.add(externalMEs[i]);
            }
            map.put("R39", R39List);
            List<NonRootModelElement> R45List = new ArrayList<NonRootModelElement>();
            externalMEs = StructureMember_c.getManyS_MBRsOnR45((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R45List.add(externalMEs[i]);
            }
            map.put("R45", R45List);
            List<NonRootModelElement> R18List = new ArrayList<NonRootModelElement>();
            externalMEs = UserDataType_c.getManyS_UDTsOnR18((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R18List.add(externalMEs[i]);
            }
            map.put("R18", R18List);
            List<NonRootModelElement> R1500List = new ArrayList<NonRootModelElement>();
            externalMEs = SymbolicConstant_c.getManyCNST_SYCsOnR1500((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1500List.add(externalMEs[i]);
            }
            map.put("R1500", R1500List);
            List<NonRootModelElement> R4007List = new ArrayList<NonRootModelElement>();
            externalMEs = PropertyParameter_c.getManyC_PPsOnR4007((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4007List.add(externalMEs[i]);
            }
            map.put("R4007", R4007List);
            List<NonRootModelElement> R4008List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceOperation_c.getManyC_IOsOnR4008((DataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4008List.add(externalMEs[i]);
            }
            map.put("R4008", R4008List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = DatatypeInSuppression_c.getManyS_DISsOnR47((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Value_c.getManyV_VALsOnR820((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = TransientVar_c.getManyV_TRNsOnR821((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Variable_c.getManyV_VARsOnR848((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = OperationParameter_c.getManyO_TPARMsOnR118((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Operation_c.getManyO_TFRsOnR116((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Attribute_c.getManyO_ATTRsOnR114((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = StateMachineEventDataItem_c.getManySM_EVTDIsOnR524((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR16((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            CoreDataType_c instCoreDataType0 = CoreDataType_c.getOneS_CDTOnR17((DataType_c)modelElement, loadComponent);
            if(instCoreDataType0 != null && (!checkSameComponent || !isComponentSame(modelElement, instCoreDataType0))){
                externalMEList.add(instCoreDataType0);
            }
            UserDataType_c instUserDataType1 = UserDataType_c.getOneS_UDTOnR17((DataType_c)modelElement, loadComponent);
            if(instUserDataType1 != null && (!checkSameComponent || !isComponentSame(modelElement, instUserDataType1))){
                externalMEList.add(instUserDataType1);
            }
            EnumerationDataType_c instEnumerationDataType2 = EnumerationDataType_c.getOneS_EDTOnR17((DataType_c)modelElement, loadComponent);
            if(instEnumerationDataType2 != null && (!checkSameComponent || !isComponentSame(modelElement, instEnumerationDataType2))){
                externalMEList.add(instEnumerationDataType2);
            }
            StructuredDataType_c instStructuredDataType3 = StructuredDataType_c.getOneS_SDTOnR17((DataType_c)modelElement, loadComponent);
            if(instStructuredDataType3 != null && (!checkSameComponent || !isComponentSame(modelElement, instStructuredDataType3))){
                externalMEList.add(instStructuredDataType3);
            }
            InstanceReferenceDataType_c instInstanceReferenceDataType4 = InstanceReferenceDataType_c.getOneS_IRDTOnR17((DataType_c)modelElement, loadComponent);
            if(instInstanceReferenceDataType4 != null && (!checkSameComponent || !isComponentSame(modelElement, instInstanceReferenceDataType4))){
                externalMEList.add(instInstanceReferenceDataType4);
            }

            externalMEs = Bridge_c.getManyS_BRGsOnR20((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ExternalEntityDataItem_c.getManyS_EEDIsOnR15((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = BridgeParameter_c.getManyS_BPARMsOnR22((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Function_c.getManyS_SYNCsOnR25((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionParameter_c.getManyS_SPARMsOnR26((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = DataTypeInPackage_c.getManyS_DIPsOnR39((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = StructureMember_c.getManyS_MBRsOnR45((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = UserDataType_c.getManyS_UDTsOnR18((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SymbolicConstant_c.getManyCNST_SYCsOnR1500((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = PropertyParameter_c.getManyC_PPsOnR4007((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InterfaceOperation_c.getManyC_IOsOnR4008((DataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Data Type ->R47
           //                      ->R47 -- Datatype In Suppression  
           //                      ->R47 -- Domain  
            // Data Type ->R820
           //                      ->R820 -- Value <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R821
           //                      ->R821 -- Transient Var <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R848
           //                      ->R848 -- Variable <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R4401
           //                      ->R4401 -- System Datatype in Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R4401 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R118
           //                      ->R118 -- Operation Parameter <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R116
           //                      ->R116 -- Operation <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R114
           //                      ->R114 -- Attribute <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R524
           //                      ->R524 -- State Machine Event Data Item <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R8001
           //                      ->R8001 -- Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interaction Participant <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Node <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Partition <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Edge <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Message <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Imported Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- External Entity <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Function <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Use Case Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Satisfaction <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Delegation <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Packageable Element  
            // Data Type ->R14
           //                      ->R14 -- Domain <<Legacy Containment>>
            // Data Type ->R16
           //                      ->R16 -- External Entity Event Data Item <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R17
           //                      ->R17 -- Core Data Type  
           //                      ->R17 -- User Data Type  
           //                      ->R17 -- Enumeration Data Type  
           //                      ->R17 -- Structured Data Type  
           //                      ->R17 -- Instance Reference Data Type  
            // Data Type ->R20
           //                      ->R20 -- Bridge <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R15
           //                      ->R15 -- External Entity Data Item <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R22
           //                      ->R22 -- Bridge Parameter <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R25
           //                      ->R25 -- Function <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R26
           //                      ->R26 -- Function Parameter <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R39
           //                      ->R39 -- Data Type in Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R39 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R45
           //                      ->R45 -- Structure Member  
            // Data Type ->R18
           //                      ->R18 -- User Data Type  
            // Data Type ->R1500
           //                      ->R1500 -- Symbolic Constant <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R4007
           //                      ->R4007 -- Property Parameter <<DEFINITE EXTERNAL LINK>>
            // Data Type ->R4008
           //                      ->R4008 -- Interface Operation <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = DatatypeInSuppression_c.getOneS_DISOnR47((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Value_c.getOneV_VALOnR820((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = TransientVar_c.getOneV_TRNOnR821((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Variable_c.getOneV_VAROnR848((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = OperationParameter_c.getOneO_TPARMOnR118((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Operation_c.getOneO_TFROnR116((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Attribute_c.getOneO_ATTROnR114((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = StateMachineEventDataItem_c.getOneSM_EVTDIOnR524((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ExternalEntityEventDataItem_c.getOneS_EEEDIOnR16((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = CoreDataType_c.getOneS_CDTOnR17((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = UserDataType_c.getOneS_UDTOnR17((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EnumerationDataType_c.getOneS_EDTOnR17((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = StructuredDataType_c.getOneS_SDTOnR17((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InstanceReferenceDataType_c.getOneS_IRDTOnR17((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Bridge_c.getOneS_BRGOnR20((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ExternalEntityDataItem_c.getOneS_EEDIOnR15((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = BridgeParameter_c.getOneS_BPARMOnR22((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Function_c.getOneS_SYNCOnR25((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionParameter_c.getOneS_SPARMOnR26((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = DataTypeInPackage_c.getOneS_DIPOnR39((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = StructureMember_c.getOneS_MBROnR45((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = UserDataType_c.getOneS_UDTOnR18((DataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SymbolicConstant_c.getOneCNST_SYCOnR1500((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = PropertyParameter_c.getOneC_PPOnR4007((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfaceOperation_c.getOneC_IOOnR4008((DataType_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SystemDatatypePackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // System Datatype Package ->R4400
           //                      ->R4400 -- System Model  
           //                      ->R4400 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ComponentPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R951List = new ArrayList<NonRootModelElement>();
            externalMEs = Sequence_c.getManySQ_SsOnR951((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R951List.add(externalMEs[i]);
            }
            map.put("R951", R951List);
            List<NonRootModelElement> R1137List = new ArrayList<NonRootModelElement>();
            externalMEs = Communication_c.getManyCOMM_COMMsOnR1137((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1137List.add(externalMEs[i]);
            }
            map.put("R1137", R1137List);
            List<NonRootModelElement> R1212List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1212((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1212List.add(externalMEs[i]);
            }
            map.put("R1212", R1212List);
            List<NonRootModelElement> R1114List = new ArrayList<NonRootModelElement>();
            externalMEs = Activity_c.getManyA_AsOnR1114((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1114List.add(externalMEs[i]);
            }
            map.put("R1114", R1114List);
            List<NonRootModelElement> R9001List = new ArrayList<NonRootModelElement>();
            externalMEs = SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9001List.add(externalMEs[i]);
            }
            map.put("R9001", R9001List);
            List<NonRootModelElement> R4600List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentPackageInPackage_c.getManyCP_CPINPsOnR4600((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4600List.add(externalMEs[i]);
            }
            map.put("R4600", R4600List);
            List<NonRootModelElement> R4604List = new ArrayList<NonRootModelElement>();
            externalMEs = Component_c.getManyC_CsOnR4604((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4604List.add(externalMEs[i]);
            }
            map.put("R4604", R4604List);
            List<NonRootModelElement> R4607List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4607((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4607List.add(externalMEs[i]);
            }
            map.put("R4607", R4607List);
            List<NonRootModelElement> R4605List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentReference_c.getManyCL_ICsOnR4605((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4605List.add(externalMEs[i]);
            }
            map.put("R4605", R4605List);
            List<NonRootModelElement> R4608List = new ArrayList<NonRootModelElement>();
            externalMEs = Component_c.getManyC_CsOnR4608((ComponentPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4608List.add(externalMEs[i]);
            }
            map.put("R4608", R4608List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Sequence_c.getManySQ_SsOnR951((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Communication_c.getManyCOMM_COMMsOnR1137((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1212((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Activity_c.getManyA_AsOnR1114((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ComponentPackageInPackage_c.getManyCP_CPINPsOnR4600((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Component_c.getManyC_CsOnR4604((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4607((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ComponentReference_c.getManyCL_ICsOnR4605((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Component_c.getManyC_CsOnR4608((ComponentPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Component Package ->R951
           //                      ->R951 -- Sequence <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R1137
           //                      ->R1137 -- Communication <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R1212
           //                      ->R1212 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R1114
           //                      ->R1114 -- Activity <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R9001
           //                      ->R9001 -- Satisfaction In Component Package  
           //                      ->R9001 -- Satisfaction  
            // Component Package ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
            // Component Package ->R4600
           //                      ->R4600 -- Component Package in Package  
            // Component Package ->R4601
           //                      ->R4601 -- Component Package in Package  
            // Component Package ->R4602
           //                      ->R4602 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R4604
           //                      ->R4604 -- Component <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R4606
           //                      ->R4606 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R4607
           //                      ->R4607 -- Interface Package <<DEFINITE EXTERNAL LINK>>
            // Component Package ->R4605
           //                      ->R4605 -- Component Reference  
            // Component Package ->R4608
           //                      ->R4608 -- Component <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Sequence_c.getOneSQ_SOnR951((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Communication_c.getOneCOMM_COMMOnR1137((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1212((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Activity_c.getOneA_AOnR1114((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SatisfactionInComponentPackage_c.getOnePA_SICPOnR9001((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentPackageInPackage_c.getOneCP_CPINPOnR4600((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Component_c.getOneC_COnR4604((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfacePackage_c.getOneIP_IPOnR4607((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentReference_c.getOneCL_ICOnR4605((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Component_c.getOneC_COnR4608((ComponentPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InterfacePackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            InterfacePackageInInterfacePackage_c instInterfacePackageInInterfacePackage0 = InterfacePackageInInterfacePackage_c.getOneIP_IPINIPOnR4300((InterfacePackage_c)element, true);
            if(instInterfacePackageInInterfacePackage0 != null){
            	List<NonRootModelElement> R4300List = new ArrayList<NonRootModelElement>();
            	R4300List.add(instInterfacePackageInInterfacePackage0);
                map.put("R4300", R4300List);
            }
            List<NonRootModelElement> R4303List = new ArrayList<NonRootModelElement>();
            externalMEs = Interface_c.getManyC_IsOnR4303((InterfacePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4303List.add(externalMEs[i]);
            }
            map.put("R4303", R4303List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            InterfacePackageInInterfacePackage_c instInterfacePackageInInterfacePackage0 = InterfacePackageInInterfacePackage_c.getOneIP_IPINIPOnR4300((InterfacePackage_c)modelElement, loadComponent);
            if(instInterfacePackageInInterfacePackage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInterfacePackageInInterfacePackage0))){
                externalMEList.add(instInterfacePackageInInterfacePackage0);
            }

            externalMEs = Interface_c.getManyC_IsOnR4303((InterfacePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Interface Package ->R4300
           //                      ->R4300 -- Interface Package in Interface Package  
            // Interface Package ->R4301
           //                      ->R4301 -- Interface Package in Interface Package  
            // Interface Package ->R4302
           //                      ->R4302 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Interface Package ->R4303
           //                      ->R4303 -- Interface <<DEFINITE EXTERNAL LINK>>
            // Interface Package ->R4304
           //                      ->R4304 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Interface Package ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Specification Package  
            // Interface Package ->R4607
           //                      ->R4607 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Interface Package ->R4206
           //                      ->R4206 -- Component <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InterfacePackageInInterfacePackage_c.getOneIP_IPINIPOnR4300((InterfacePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Interface_c.getOneC_IOnR4303((InterfacePackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Package_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R8000List = new ArrayList<NonRootModelElement>();
            externalMEs = PackageableElement_c.getManyPE_PEsOnR8000((Package_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8000List.add(externalMEs[i]);
            }
            map.put("R8000", R8000List);
            List<NonRootModelElement> R8002List = new ArrayList<NonRootModelElement>();
            externalMEs = ElementVisibility_c.getManyPE_VISsOnR8002((Package_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8002List.add(externalMEs[i]);
            }
            map.put("R8002", R8002List);
            List<NonRootModelElement> R8005List = new ArrayList<NonRootModelElement>();
            externalMEs = SearchResultSet_c.getManyPE_SRSsOnR8005((Package_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8005List.add(externalMEs[i]);
            }
            map.put("R8005", R8005List);
            List<NonRootModelElement> R956List = new ArrayList<NonRootModelElement>();
            externalMEs = PackageParticipant_c.getManySQ_PPsOnR956((Package_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R956List.add(externalMEs[i]);
            }
            map.put("R956", R956List);
            ComponentInstance_c instComponentInstance0 = ComponentInstance_c.getOneI_EXEOnR2970((Package_c)element, true);
            if(instComponentInstance0 != null){
            	List<NonRootModelElement> R2970List = new ArrayList<NonRootModelElement>();
            	R2970List.add(instComponentInstance0);
                map.put("R2970", R2970List);
            }
            List<NonRootModelElement> R1400List = new ArrayList<NonRootModelElement>();
            externalMEs = SpecificationPackage_c.getManyEP_SPKGsOnR1400((Package_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1400List.add(externalMEs[i]);
            }
            map.put("R1400", R1400List);
            List<NonRootModelElement> R1403List = new ArrayList<NonRootModelElement>();
            externalMEs = PackageInPackage_c.getManyEP_PIPsOnR1403((Package_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1403List.add(externalMEs[i]);
            }
            map.put("R1403", R1403List);
            PackageInPackage_c instPackageInPackage1 = PackageInPackage_c.getOneEP_PIPOnR1404((Package_c)element, true);
            if(instPackageInPackage1 != null){
            	List<NonRootModelElement> R1404List = new ArrayList<NonRootModelElement>();
            	R1404List.add(instPackageInPackage1);
                map.put("R1404", R1404List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = PackageableElement_c.getManyPE_PEsOnR8000((Package_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ElementVisibility_c.getManyPE_VISsOnR8002((Package_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SearchResultSet_c.getManyPE_SRSsOnR8005((Package_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = PackageParticipant_c.getManySQ_PPsOnR956((Package_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ComponentInstance_c instComponentInstance0 = ComponentInstance_c.getOneI_EXEOnR2970((Package_c)modelElement, loadComponent);
            if(instComponentInstance0 != null){
                externalMEList.add(instComponentInstance0);
            }

            externalMEs = SpecificationPackage_c.getManyEP_SPKGsOnR1400((Package_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = PackageInPackage_c.getManyEP_PIPsOnR1403((Package_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            PackageInPackage_c instPackageInPackage1 = PackageInPackage_c.getOneEP_PIPOnR1404((Package_c)modelElement, loadComponent);
            if(instPackageInPackage1 != null && (!checkSameComponent || !isComponentSame(modelElement, instPackageInPackage1))){
                externalMEList.add(instPackageInPackage1);
            }
            // Package ->R8000
           //                      ->R8000 -- Packageable Element  
            // Package ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Package ->R8002
           //                      ->R8002 -- Packageable Element  
           //                      ->R8002 -- Element Visibility <<DEFINITE EXTERNAL LINK>>
            // Package ->R8005
           //                      ->R8005 -- Search Result Set <<DEFINITE EXTERNAL LINK>>
            // Package ->R956
           //                      ->R956 -- Package Participant  
            // Package ->R2970
           //                      ->R2970 -- Component Instance <<DEFINITE EXTERNAL LINK>>
            // Package ->R1401
           //                      ->R1401 -- System Model <<DEFINITE EXTERNAL LINK>>
            // Package ->R1400
           //                      ->R1400 -- Specification Package <<DEFINITE EXTERNAL LINK>>
            // Package ->R1403
           //                      ->R1403 -- Package In Package  
            // Package ->R1404
           //                      ->R1404 -- Package In Package  
            // Package ->R1405
           //                      ->R1405 -- System Model <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = PackageableElement_c.getOnePE_PEOnR8000((Package_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ElementVisibility_c.getOnePE_VISOnR8002((Package_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SearchResultSet_c.getOnePE_SRSOnR8005((Package_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = PackageParticipant_c.getOneSQ_PPOnR956((Package_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentInstance_c.getOneI_EXEOnR2970((Package_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SpecificationPackage_c.getOneEP_SPKGOnR1400((Package_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = PackageInPackage_c.getOneEP_PIPOnR1403((Package_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = PackageInPackage_c.getOneEP_PIPOnR1404((Package_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class PackageInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Package In Package ->R1403
           //                      ->R1403 -- Package  
            // Package In Package ->R1404
           //                      ->R1404 -- Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class InteractionParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1203List = new ArrayList<NonRootModelElement>();
            externalMEs = ParticipantInUseCase_c.getManyUC_PIUCsOnR1203((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1203List.add(externalMEs[i]);
            }
            map.put("R1203", R1203List);
            List<NonRootModelElement> R1206List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseAssociation_c.getManyUC_UCAsOnR1206((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1206List.add(externalMEs[i]);
            }
            map.put("R1206", R1206List);
            List<NonRootModelElement> R1207List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseAssociation_c.getManyUC_UCAsOnR1207((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1207List.add(externalMEs[i]);
            }
            map.put("R1207", R1207List);
            List<NonRootModelElement> R1007List = new ArrayList<NonRootModelElement>();
            externalMEs = Message_c.getManyMSG_MsOnR1007((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1007List.add(externalMEs[i]);
            }
            map.put("R1007", R1007List);
            List<NonRootModelElement> R1008List = new ArrayList<NonRootModelElement>();
            externalMEs = Message_c.getManyMSG_MsOnR1008((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1008List.add(externalMEs[i]);
            }
            map.put("R1008", R1008List);
            ExternalEntityParticipant_c instExternalEntityParticipant0 = ExternalEntityParticipant_c.getOneSQ_EEPOnR930((InteractionParticipant_c)element, true);
            if(instExternalEntityParticipant0 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instExternalEntityParticipant0);
                map.put("R930", R930List);
            }
            FunctionPackageParticipant_c instFunctionPackageParticipant1 = FunctionPackageParticipant_c.getOneSQ_FPPOnR930((InteractionParticipant_c)element, true);
            if(instFunctionPackageParticipant1 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instFunctionPackageParticipant1);
                map.put("R930", R930List);
            }
            ClassParticipant_c instClassParticipant2 = ClassParticipant_c.getOneSQ_CPOnR930((InteractionParticipant_c)element, true);
            if(instClassParticipant2 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instClassParticipant2);
                map.put("R930", R930List);
            }
            ClassInstanceParticipant_c instClassInstanceParticipant3 = ClassInstanceParticipant_c.getOneSQ_CIPOnR930((InteractionParticipant_c)element, true);
            if(instClassInstanceParticipant3 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instClassInstanceParticipant3);
                map.put("R930", R930List);
            }
            ActorParticipant_c instActorParticipant4 = ActorParticipant_c.getOneSQ_APOnR930((InteractionParticipant_c)element, true);
            if(instActorParticipant4 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instActorParticipant4);
                map.put("R930", R930List);
            }
            UseCaseParticipant_c instUseCaseParticipant5 = UseCaseParticipant_c.getOneIA_UCPOnR930((InteractionParticipant_c)element, true);
            if(instUseCaseParticipant5 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instUseCaseParticipant5);
                map.put("R930", R930List);
            }
            ComponentParticipant_c instComponentParticipant6 = ComponentParticipant_c.getOneSQ_COPOnR930((InteractionParticipant_c)element, true);
            if(instComponentParticipant6 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instComponentParticipant6);
                map.put("R930", R930List);
            }
            Lifespan_c instLifespan7 = Lifespan_c.getOneSQ_LSOnR930((InteractionParticipant_c)element, true);
            if(instLifespan7 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instLifespan7);
                map.put("R930", R930List);
            }
            PackageParticipant_c instPackageParticipant8 = PackageParticipant_c.getOneSQ_PPOnR930((InteractionParticipant_c)element, true);
            if(instPackageParticipant8 != null){
            	List<NonRootModelElement> R930List = new ArrayList<NonRootModelElement>();
            	R930List.add(instPackageParticipant8);
                map.put("R930", R930List);
            }
            Lifespan_c instLifespan9 = Lifespan_c.getOneSQ_LSOnR940((InteractionParticipant_c)element, true);
            if(instLifespan9 != null){
            	List<NonRootModelElement> R940List = new ArrayList<NonRootModelElement>();
            	R940List.add(instLifespan9);
                map.put("R940", R940List);
            }
            List<NonRootModelElement> R1126List = new ArrayList<NonRootModelElement>();
            externalMEs = ParticipantInCommunication_c.getManyCOMM_PICsOnR1126((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1126List.add(externalMEs[i]);
            }
            map.put("R1126", R1126List);
            List<NonRootModelElement> R1133List = new ArrayList<NonRootModelElement>();
            externalMEs = CommunicationLink_c.getManyCOMM_LNKsOnR1133((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1133List.add(externalMEs[i]);
            }
            map.put("R1133", R1133List);
            List<NonRootModelElement> R1134List = new ArrayList<NonRootModelElement>();
            externalMEs = CommunicationLink_c.getManyCOMM_LNKsOnR1134((InteractionParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1134List.add(externalMEs[i]);
            }
            map.put("R1134", R1134List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ParticipantInUseCase_c.getManyUC_PIUCsOnR1203((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = UseCaseAssociation_c.getManyUC_UCAsOnR1206((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = UseCaseAssociation_c.getManyUC_UCAsOnR1207((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Message_c.getManyMSG_MsOnR1007((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Message_c.getManyMSG_MsOnR1008((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ExternalEntityParticipant_c instExternalEntityParticipant0 = ExternalEntityParticipant_c.getOneSQ_EEPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instExternalEntityParticipant0 != null && (!checkSameComponent || !isComponentSame(modelElement, instExternalEntityParticipant0))){
                externalMEList.add(instExternalEntityParticipant0);
            }
            FunctionPackageParticipant_c instFunctionPackageParticipant1 = FunctionPackageParticipant_c.getOneSQ_FPPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instFunctionPackageParticipant1 != null && (!checkSameComponent || !isComponentSame(modelElement, instFunctionPackageParticipant1))){
                externalMEList.add(instFunctionPackageParticipant1);
            }
            ClassParticipant_c instClassParticipant2 = ClassParticipant_c.getOneSQ_CPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instClassParticipant2 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassParticipant2))){
                externalMEList.add(instClassParticipant2);
            }
            ClassInstanceParticipant_c instClassInstanceParticipant3 = ClassInstanceParticipant_c.getOneSQ_CIPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instClassInstanceParticipant3 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassInstanceParticipant3))){
                externalMEList.add(instClassInstanceParticipant3);
            }
            ActorParticipant_c instActorParticipant4 = ActorParticipant_c.getOneSQ_APOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instActorParticipant4 != null && (!checkSameComponent || !isComponentSame(modelElement, instActorParticipant4))){
                externalMEList.add(instActorParticipant4);
            }
            UseCaseParticipant_c instUseCaseParticipant5 = UseCaseParticipant_c.getOneIA_UCPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instUseCaseParticipant5 != null && (!checkSameComponent || !isComponentSame(modelElement, instUseCaseParticipant5))){
                externalMEList.add(instUseCaseParticipant5);
            }
            ComponentParticipant_c instComponentParticipant6 = ComponentParticipant_c.getOneSQ_COPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instComponentParticipant6 != null && (!checkSameComponent || !isComponentSame(modelElement, instComponentParticipant6))){
                externalMEList.add(instComponentParticipant6);
            }
            Lifespan_c instLifespan7 = Lifespan_c.getOneSQ_LSOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instLifespan7 != null && (!checkSameComponent || !isComponentSame(modelElement, instLifespan7))){
                externalMEList.add(instLifespan7);
            }
            PackageParticipant_c instPackageParticipant8 = PackageParticipant_c.getOneSQ_PPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(instPackageParticipant8 != null && (!checkSameComponent || !isComponentSame(modelElement, instPackageParticipant8))){
                externalMEList.add(instPackageParticipant8);
            }

            Lifespan_c instLifespan9 = Lifespan_c.getOneSQ_LSOnR940((InteractionParticipant_c)modelElement, loadComponent);
            if(instLifespan9 != null && (!checkSameComponent || !isComponentSame(modelElement, instLifespan9))){
                externalMEList.add(instLifespan9);
            }

            externalMEs = ParticipantInCommunication_c.getManyCOMM_PICsOnR1126((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = CommunicationLink_c.getManyCOMM_LNKsOnR1133((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = CommunicationLink_c.getManyCOMM_LNKsOnR1134((InteractionParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Interaction Participant ->R1203
           //                      ->R1203 -- Participant in Use Case <<DEFINITE EXTERNAL LINK>>
           //                      ->R1203 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
            // Interaction Participant ->R1206
           //                      ->R1206 -- Use Case Association  
            // Interaction Participant ->R1207
           //                      ->R1207 -- Use Case Association  
            // Interaction Participant ->R929
           //                      ->R929 -- Sequence <<DEFINITE EXTERNAL LINK>>
            // Interaction Participant ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Interaction Participant ->R1007
           //                      ->R1007 -- Message  
            // Interaction Participant ->R1008
           //                      ->R1008 -- Message  
            // Interaction Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
            // Interaction Participant ->R940
           //                      ->R940 -- Lifespan  
            // Interaction Participant ->R1126
           //                      ->R1126 -- Participant in Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1126 -- Communication <<DEFINITE EXTERNAL LINK>>
            // Interaction Participant ->R1133
           //                      ->R1133 -- Communication Link  
            // Interaction Participant ->R1134
           //                      ->R1134 -- Communication Link  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ParticipantInUseCase_c.getOneUC_PIUCOnR1203((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = UseCaseAssociation_c.getOneUC_UCAOnR1206((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = UseCaseAssociation_c.getOneUC_UCAOnR1207((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Message_c.getOneMSG_MOnR1007((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Message_c.getOneMSG_MOnR1008((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityParticipant_c.getOneSQ_EEPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionPackageParticipant_c.getOneSQ_FPPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassParticipant_c.getOneSQ_CPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassInstanceParticipant_c.getOneSQ_CIPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActorParticipant_c.getOneSQ_APOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = UseCaseParticipant_c.getOneIA_UCPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentParticipant_c.getOneSQ_COPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Lifespan_c.getOneSQ_LSOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = PackageParticipant_c.getOneSQ_PPOnR930((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Lifespan_c.getOneSQ_LSOnR940((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParticipantInCommunication_c.getOneCOMM_PICOnR1126((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = CommunicationLink_c.getOneCOMM_LNKOnR1133((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = CommunicationLink_c.getOneCOMM_LNKOnR1134((InteractionParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ActivityNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1103List = new ArrayList<NonRootModelElement>();
            externalMEs = ActivityEdge_c.getManyA_EsOnR1103((ActivityNode_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1103List.add(externalMEs[i]);
            }
            map.put("R1103", R1103List);
            List<NonRootModelElement> R1104List = new ArrayList<NonRootModelElement>();
            externalMEs = ActivityEdge_c.getManyA_EsOnR1104((ActivityNode_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1104List.add(externalMEs[i]);
            }
            map.put("R1104", R1104List);
            ActionNode_c instActionNode0 = ActionNode_c.getOneA_ACTOnR1105((ActivityNode_c)element, true);
            if(instActionNode0 != null){
            	List<NonRootModelElement> R1105List = new ArrayList<NonRootModelElement>();
            	R1105List.add(instActionNode0);
                map.put("R1105", R1105List);
            }
            ObjectNode_c instObjectNode1 = ObjectNode_c.getOneA_OBJOnR1105((ActivityNode_c)element, true);
            if(instObjectNode1 != null){
            	List<NonRootModelElement> R1105List = new ArrayList<NonRootModelElement>();
            	R1105List.add(instObjectNode1);
                map.put("R1105", R1105List);
            }
            ControlNode_c instControlNode2 = ControlNode_c.getOneA_CTLOnR1105((ActivityNode_c)element, true);
            if(instControlNode2 != null){
            	List<NonRootModelElement> R1105List = new ArrayList<NonRootModelElement>();
            	R1105List.add(instControlNode2);
                map.put("R1105", R1105List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ActivityEdge_c.getManyA_EsOnR1103((ActivityNode_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ActivityEdge_c.getManyA_EsOnR1104((ActivityNode_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ActionNode_c instActionNode0 = ActionNode_c.getOneA_ACTOnR1105((ActivityNode_c)modelElement, loadComponent);
            if(instActionNode0 != null && (!checkSameComponent || !isComponentSame(modelElement, instActionNode0))){
                externalMEList.add(instActionNode0);
            }
            ObjectNode_c instObjectNode1 = ObjectNode_c.getOneA_OBJOnR1105((ActivityNode_c)modelElement, loadComponent);
            if(instObjectNode1 != null && (!checkSameComponent || !isComponentSame(modelElement, instObjectNode1))){
                externalMEList.add(instObjectNode1);
            }
            ControlNode_c instControlNode2 = ControlNode_c.getOneA_CTLOnR1105((ActivityNode_c)modelElement, loadComponent);
            if(instControlNode2 != null && (!checkSameComponent || !isComponentSame(modelElement, instControlNode2))){
                externalMEList.add(instControlNode2);
            }
            // Activity Node ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Activity Node ->R1101
           //                      ->R1101 -- Activity <<DEFINITE EXTERNAL LINK>>
            // Activity Node ->R1103
           //                      ->R1103 -- Activity Edge  
            // Activity Node ->R1104
           //                      ->R1104 -- Activity Edge  
            // Activity Node ->R1105
           //                      ->R1105 -- Action Node  
           //                      ->R1105 -- Object Node  
           //                      ->R1105 -- Control Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ActivityEdge_c.getOneA_EOnR1103((ActivityNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityEdge_c.getOneA_EOnR1104((ActivityNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActionNode_c.getOneA_ACTOnR1105((ActivityNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ObjectNode_c.getOneA_OBJOnR1105((ActivityNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ControlNode_c.getOneA_CTLOnR1105((ActivityNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ModelClass_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R818List = new ArrayList<NonRootModelElement>();
            externalMEs = InstanceHandle_c.getManyV_INTsOnR818((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R818List.add(externalMEs[i]);
            }
            map.put("R818", R818List);
            List<NonRootModelElement> R819List = new ArrayList<NonRootModelElement>();
            externalMEs = InstanceSet_c.getManyV_INSsOnR819((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R819List.add(externalMEs[i]);
            }
            map.put("R819", R819List);
            List<NonRootModelElement> R115List = new ArrayList<NonRootModelElement>();
            externalMEs = Operation_c.getManyO_TFRsOnR115((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R115List.add(externalMEs[i]);
            }
            map.put("R115", R115List);
            List<NonRootModelElement> R102List = new ArrayList<NonRootModelElement>();
            externalMEs = Attribute_c.getManyO_ATTRsOnR102((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R102List.add(externalMEs[i]);
            }
            map.put("R102", R102List);
            List<NonRootModelElement> R104List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassIdentifier_c.getManyO_IDsOnR104((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R104List.add(externalMEs[i]);
            }
            map.put("R104", R104List);
            List<NonRootModelElement> R101List = new ArrayList<NonRootModelElement>();
            externalMEs = ImportedClass_c.getManyO_IOBJsOnR101((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R101List.add(externalMEs[i]);
            }
            map.put("R101", R101List);
            List<NonRootModelElement> R123List = new ArrayList<NonRootModelElement>();
            externalMEs = InstanceReferenceDataType_c.getManyS_IRDTsOnR123((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R123List.add(externalMEs[i]);
            }
            map.put("R123", R123List);
            InstanceStateMachine_c instInstanceStateMachine0 = InstanceStateMachine_c.getOneSM_ISMOnR518((ModelClass_c)element, true);
            if(instInstanceStateMachine0 != null){
            	List<NonRootModelElement> R518List = new ArrayList<NonRootModelElement>();
            	R518List.add(instInstanceStateMachine0);
                map.put("R518", R518List);
            }
            ClassStateMachine_c instClassStateMachine1 = ClassStateMachine_c.getOneSM_ASMOnR519((ModelClass_c)element, true);
            if(instClassStateMachine1 != null){
            	List<NonRootModelElement> R519List = new ArrayList<NonRootModelElement>();
            	R519List.add(instClassStateMachine1);
                map.put("R519", R519List);
            }
            List<NonRootModelElement> R676List = new ArrayList<NonRootModelElement>();
            externalMEs = SelectFromInstancesWhere_c.getManyACT_FIWsOnR676((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R676List.add(externalMEs[i]);
            }
            map.put("R676", R676List);
            List<NonRootModelElement> R677List = new ArrayList<NonRootModelElement>();
            externalMEs = SelectFromInstances_c.getManyACT_FIOsOnR677((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R677List.add(externalMEs[i]);
            }
            map.put("R677", R677List);
            List<NonRootModelElement> R678List = new ArrayList<NonRootModelElement>();
            externalMEs = ChainLink_c.getManyACT_LNKsOnR678((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R678List.add(externalMEs[i]);
            }
            map.put("R678", R678List);
            List<NonRootModelElement> R934List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassInstanceParticipant_c.getManySQ_CIPsOnR934((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R934List.add(externalMEs[i]);
            }
            map.put("R934", R934List);
            List<NonRootModelElement> R939List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassParticipant_c.getManySQ_CPsOnR939((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R939List.add(externalMEs[i]);
            }
            map.put("R939", R939List);
            List<NonRootModelElement> R671List = new ArrayList<NonRootModelElement>();
            externalMEs = Create_c.getManyACT_CRsOnR671((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R671List.add(externalMEs[i]);
            }
            map.put("R671", R671List);
            List<NonRootModelElement> R672List = new ArrayList<NonRootModelElement>();
            externalMEs = CreateNoVariable_c.getManyACT_CNVsOnR672((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R672List.add(externalMEs[i]);
            }
            map.put("R672", R672List);
            List<NonRootModelElement> R417List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToObjAccessPath_c.getManyCA_SMOAsOnR417((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R417List.add(externalMEs[i]);
            }
            map.put("R417", R417List);
            List<NonRootModelElement> R670List = new ArrayList<NonRootModelElement>();
            externalMEs = ForStmt_c.getManyACT_FORsOnR670((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R670List.add(externalMEs[i]);
            }
            map.put("R670", R670List);
            List<NonRootModelElement> R201List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassInAssociation_c.getManyR_OIRsOnR201((ModelClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R201List.add(externalMEs[i]);
            }
            map.put("R201", R201List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InstanceHandle_c.getManyV_INTsOnR818((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InstanceSet_c.getManyV_INSsOnR819((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Operation_c.getManyO_TFRsOnR115((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Attribute_c.getManyO_ATTRsOnR102((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ClassIdentifier_c.getManyO_IDsOnR104((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ImportedClass_c.getManyO_IOBJsOnR101((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InstanceReferenceDataType_c.getManyS_IRDTsOnR123((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            InstanceStateMachine_c instInstanceStateMachine0 = InstanceStateMachine_c.getOneSM_ISMOnR518((ModelClass_c)modelElement, loadComponent);
            if(instInstanceStateMachine0 != null){
                externalMEList.add(instInstanceStateMachine0);
            }

            ClassStateMachine_c instClassStateMachine1 = ClassStateMachine_c.getOneSM_ASMOnR519((ModelClass_c)modelElement, loadComponent);
            if(instClassStateMachine1 != null){
                externalMEList.add(instClassStateMachine1);
            }

            externalMEs = SelectFromInstancesWhere_c.getManyACT_FIWsOnR676((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SelectFromInstances_c.getManyACT_FIOsOnR677((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ChainLink_c.getManyACT_LNKsOnR678((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ClassInstanceParticipant_c.getManySQ_CIPsOnR934((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ClassParticipant_c.getManySQ_CPsOnR939((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Create_c.getManyACT_CRsOnR671((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = CreateNoVariable_c.getManyACT_CNVsOnR672((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToObjAccessPath_c.getManyCA_SMOAsOnR417((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ForStmt_c.getManyACT_FORsOnR670((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ClassInAssociation_c.getManyR_OIRsOnR201((ModelClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Model Class ->R818
           //                      ->R818 -- Instance Handle <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R819
           //                      ->R819 -- Instance Set <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R115
           //                      ->R115 -- Operation  
            // Model Class ->R102
           //                      ->R102 -- Attribute  
            // Model Class ->R104
           //                      ->R104 -- Class Identifier  
            // Model Class ->R101
           //                      ->R101 -- Imported Class <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R123
           //                      ->R123 -- Instance Reference Data Type <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R518
           //                      ->R518 -- Instance State Machine <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R519
           //                      ->R519 -- Class State Machine <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R676
           //                      ->R676 -- Select From Instances Where <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R677
           //                      ->R677 -- Select From Instances <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R678
           //                      ->R678 -- Chain Link <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R8001
           //                      ->R8001 -- Data Type <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interaction Participant <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Node <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Partition <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Edge <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Message <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Imported Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- External Entity <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Function <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Use Case Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Satisfaction <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Delegation <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Packageable Element  
            // Model Class ->R934
           //                      ->R934 -- Class Instance Participant <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R939
           //                      ->R939 -- Class Participant <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R671
           //                      ->R671 -- Create <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R672
           //                      ->R672 -- Create No Variable <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R2
           //                      ->R2 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R417
           //                      ->R417 -- SM to OBJ Access Path <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R670
           //                      ->R670 -- For Stmt <<DEFINITE EXTERNAL LINK>>
            // Model Class ->R201
           //                      ->R201 -- Class In Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R201 -- Association <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InstanceHandle_c.getOneV_INTOnR818((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InstanceSet_c.getOneV_INSOnR819((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Operation_c.getOneO_TFROnR115((ModelClass_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Attribute_c.getOneO_ATTROnR102((ModelClass_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassIdentifier_c.getOneO_IDOnR104((ModelClass_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ImportedClass_c.getOneO_IOBJOnR101((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InstanceReferenceDataType_c.getOneS_IRDTOnR123((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InstanceStateMachine_c.getOneSM_ISMOnR518((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ClassStateMachine_c.getOneSM_ASMOnR519((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SelectFromInstancesWhere_c.getOneACT_FIWOnR676((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SelectFromInstances_c.getOneACT_FIOOnR677((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ChainLink_c.getOneACT_LNKOnR678((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ClassInstanceParticipant_c.getOneSQ_CIPOnR934((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ClassParticipant_c.getOneSQ_CPOnR939((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Create_c.getOneACT_CROnR671((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = CreateNoVariable_c.getOneACT_CNVOnR672((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToObjAccessPath_c.getOneCA_SMOAOnR417((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ForStmt_c.getOneACT_FOROnR670((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ClassInAssociation_c.getOneR_OIROnR201((ModelClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Component_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R952List = new ArrayList<NonRootModelElement>();
            externalMEs = Sequence_c.getManySQ_SsOnR952((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R952List.add(externalMEs[i]);
            }
            map.put("R952", R952List);
            List<NonRootModelElement> R1138List = new ArrayList<NonRootModelElement>();
            externalMEs = Communication_c.getManyCOMM_COMMsOnR1138((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1138List.add(externalMEs[i]);
            }
            map.put("R1138", R1138List);
            List<NonRootModelElement> R1213List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1213((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1213List.add(externalMEs[i]);
            }
            map.put("R1213", R1213List);
            List<NonRootModelElement> R1115List = new ArrayList<NonRootModelElement>();
            externalMEs = Activity_c.getManyA_AsOnR1115((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1115List.add(externalMEs[i]);
            }
            map.put("R1115", R1115List);
            List<NonRootModelElement> R4206List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4206((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4206List.add(externalMEs[i]);
            }
            map.put("R4206", R4206List);
            List<NonRootModelElement> R9002List = new ArrayList<NonRootModelElement>();
            externalMEs = DelegationInComponent_c.getManyPA_DICsOnR9002((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9002List.add(externalMEs[i]);
            }
            map.put("R9002", R9002List);
            List<NonRootModelElement> R9000List = new ArrayList<NonRootModelElement>();
            externalMEs = SatisfactionInComponent_c.getManyPA_SICsOnR9000((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9000List.add(externalMEs[i]);
            }
            map.put("R9000", R9000List);
            List<NonRootModelElement> R8003List = new ArrayList<NonRootModelElement>();
            externalMEs = PackageableElement_c.getManyPE_PEsOnR8003((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8003List.add(externalMEs[i]);
            }
            map.put("R8003", R8003List);
            List<NonRootModelElement> R8004List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentVisibility_c.getManyPE_CVSsOnR8004((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8004List.add(externalMEs[i]);
            }
            map.put("R8004", R8004List);
            List<NonRootModelElement> R8007List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentResultSet_c.getManyPE_CRSsOnR8007((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8007List.add(externalMEs[i]);
            }
            map.put("R8007", R8007List);
            List<NonRootModelElement> R955List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentParticipant_c.getManySQ_COPsOnR955((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R955List.add(externalMEs[i]);
            }
            map.put("R955", R955List);
            List<NonRootModelElement> R2955List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentInstance_c.getManyI_EXEsOnR2955((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2955List.add(externalMEs[i]);
            }
            map.put("R2955", R2955List);
            List<NonRootModelElement> R4010List = new ArrayList<NonRootModelElement>();
            externalMEs = Port_c.getManyC_POsOnR4010((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4010List.add(externalMEs[i]);
            }
            map.put("R4010", R4010List);
            List<NonRootModelElement> R4202List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentInComponent_c.getManyCN_CICsOnR4202((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4202List.add(externalMEs[i]);
            }
            map.put("R4202", R4202List);
            List<NonRootModelElement> R4204List = new ArrayList<NonRootModelElement>();
            externalMEs = DomainAsComponent_c.getManyCN_DCsOnR4204((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4204List.add(externalMEs[i]);
            }
            map.put("R4204", R4204List);
            List<NonRootModelElement> R4201List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentReference_c.getManyCL_ICsOnR4201((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4201List.add(externalMEs[i]);
            }
            map.put("R4201", R4201List);
            List<NonRootModelElement> R4205List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentReference_c.getManyCL_ICsOnR4205((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4205List.add(externalMEs[i]);
            }
            map.put("R4205", R4205List);
            List<NonRootModelElement> R694List = new ArrayList<NonRootModelElement>();
            externalMEs = BodyInComponent_c.getManyACT_BICsOnR694((Component_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R694List.add(externalMEs[i]);
            }
            map.put("R694", R694List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Sequence_c.getManySQ_SsOnR952((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Communication_c.getManyCOMM_COMMsOnR1138((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1213((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Activity_c.getManyA_AsOnR1115((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4206((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = DelegationInComponent_c.getManyPA_DICsOnR9002((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SatisfactionInComponent_c.getManyPA_SICsOnR9000((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = PackageableElement_c.getManyPE_PEsOnR8003((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ComponentVisibility_c.getManyPE_CVSsOnR8004((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ComponentResultSet_c.getManyPE_CRSsOnR8007((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ComponentParticipant_c.getManySQ_COPsOnR955((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ComponentInstance_c.getManyI_EXEsOnR2955((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Port_c.getManyC_POsOnR4010((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ComponentInComponent_c.getManyCN_CICsOnR4202((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = DomainAsComponent_c.getManyCN_DCsOnR4204((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ComponentReference_c.getManyCL_ICsOnR4201((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ComponentReference_c.getManyCL_ICsOnR4205((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = BodyInComponent_c.getManyACT_BICsOnR694((Component_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Component ->R952
           //                      ->R952 -- Sequence <<DEFINITE EXTERNAL LINK>>
            // Component ->R1138
           //                      ->R1138 -- Communication <<DEFINITE EXTERNAL LINK>>
            // Component ->R1213
           //                      ->R1213 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
            // Component ->R1115
           //                      ->R1115 -- Activity <<DEFINITE EXTERNAL LINK>>
            // Component ->R4206
           //                      ->R4206 -- Interface Package <<DEFINITE EXTERNAL LINK>>
            // Component ->R9002
           //                      ->R9002 -- Delegation In Component  
           //                      ->R9002 -- Delegation  
            // Component ->R9000
           //                      ->R9000 -- Satisfaction In Component  
           //                      ->R9000 -- Satisfaction  
            // Component ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Component ->R8003
           //                      ->R8003 -- Packageable Element  
            // Component ->R8004
           //                      ->R8004 -- Packageable Element  
           //                      ->R8004 -- Component Visibility <<DEFINITE EXTERNAL LINK>>
            // Component ->R8007
           //                      ->R8007 -- Component Result Set <<DEFINITE EXTERNAL LINK>>
            // Component ->R955
           //                      ->R955 -- Component Participant  
            // Component ->R2955
           //                      ->R2955 -- Component Instance <<DEFINITE EXTERNAL LINK>>
            // Component ->R4010
           //                      ->R4010 -- Port  
            // Component ->R4604
           //                      ->R4604 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Component ->R4608
           //                      ->R4608 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Component ->R4202
           //                      ->R4202 -- Component in Component  
            // Component ->R4203
           //                      ->R4203 -- Component in Component  
            // Component ->R4204
           //                      ->R4204 -- Domain As Component  
           //                      ->R4204 -- Domain  
            // Component ->R4201
           //                      ->R4201 -- Component Reference  
            // Component ->R4205
           //                      ->R4205 -- Component Reference  
            // Component ->R694
           //                      ->R694 -- Body <<DEFINITE EXTERNAL LINK>>
           //                      ->R694 -- Body in Component <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Sequence_c.getOneSQ_SOnR952((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Communication_c.getOneCOMM_COMMOnR1138((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1213((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Activity_c.getOneA_AOnR1115((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfacePackage_c.getOneIP_IPOnR4206((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = DelegationInComponent_c.getOnePA_DICOnR9002((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SatisfactionInComponent_c.getOnePA_SICOnR9000((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = PackageableElement_c.getOnePE_PEOnR8003((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentVisibility_c.getOnePE_CVSOnR8004((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentResultSet_c.getOnePE_CRSOnR8007((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentParticipant_c.getOneSQ_COPOnR955((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentInstance_c.getOneI_EXEOnR2955((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Port_c.getOneC_POOnR4010((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentInComponent_c.getOneCN_CICOnR4202((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DomainAsComponent_c.getOneCN_DCOnR4204((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentReference_c.getOneCL_ICOnR4201((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ComponentReference_c.getOneCL_ICOnR4205((Component_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = BodyInComponent_c.getOneACT_BICOnR694((Component_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ComponentReference_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R2963List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentInstance_c.getManyI_EXEsOnR2963((ComponentReference_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2963List.add(externalMEs[i]);
            }
            map.put("R2963", R2963List);
            List<NonRootModelElement> R4700List = new ArrayList<NonRootModelElement>();
            externalMEs = ImportedReference_c.getManyCL_IIRsOnR4700((ComponentReference_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4700List.add(externalMEs[i]);
            }
            map.put("R4700", R4700List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ComponentInstance_c.getManyI_EXEsOnR2963((ComponentReference_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ImportedReference_c.getManyCL_IIRsOnR4700((ComponentReference_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Component Reference ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Component Reference ->R2963
           //                      ->R2963 -- Component Instance <<DEFINITE EXTERNAL LINK>>
            // Component Reference ->R4605
           //                      ->R4605 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Component Reference ->R4201
           //                      ->R4201 -- Component <<DEFINITE EXTERNAL LINK>>
            // Component Reference ->R4205
           //                      ->R4205 -- Component <<DEFINITE EXTERNAL LINK>>
            // Component Reference ->R4700
           //                      ->R4700 -- Imported Reference  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ComponentInstance_c.getOneI_EXEOnR2963((ComponentReference_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ImportedReference_c.getOneCL_IIROnR4700((ComponentReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Interface_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4003List = new ArrayList<NonRootModelElement>();
            externalMEs = ExecutableProperty_c.getManyC_EPsOnR4003((Interface_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4003List.add(externalMEs[i]);
            }
            map.put("R4003", R4003List);
            List<NonRootModelElement> R4012List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceReference_c.getManyC_IRsOnR4012((Interface_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4012List.add(externalMEs[i]);
            }
            map.put("R4012", R4012List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ExecutableProperty_c.getManyC_EPsOnR4003((Interface_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = InterfaceReference_c.getManyC_IRsOnR4012((Interface_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Interface ->R8001
           //                      ->R8001 -- Data Type <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Interaction Participant <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Node <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Partition <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Edge <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Message <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Imported Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- External Entity <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Function <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Use Case Association <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Satisfaction <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Delegation <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Packageable Element  
            // Interface ->R4303
           //                      ->R4303 -- Interface Package <<DEFINITE EXTERNAL LINK>>
            // Interface ->R4003
           //                      ->R4003 -- Executable Property  
            // Interface ->R4012
           //                      ->R4012 -- Interface Reference <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ExecutableProperty_c.getOneC_EPOnR4003((Interface_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfaceReference_c.getOneC_IROnR4012((Interface_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ConstantSpecification_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4403List = new ArrayList<NonRootModelElement>();
            externalMEs = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403((ConstantSpecification_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4403List.add(externalMEs[i]);
            }
            map.put("R4403", R4403List);
            List<NonRootModelElement> R1504List = new ArrayList<NonRootModelElement>();
            externalMEs = SymbolicConstant_c.getManyCNST_SYCsOnR1504((ConstantSpecification_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1504List.add(externalMEs[i]);
            }
            map.put("R1504", R1504List);
            List<NonRootModelElement> R1506List = new ArrayList<NonRootModelElement>();
            externalMEs = ConstantInPackage_c.getManyCNST_CIPsOnR1506((ConstantSpecification_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1506List.add(externalMEs[i]);
            }
            map.put("R1506", R1506List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403((ConstantSpecification_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SymbolicConstant_c.getManyCNST_SYCsOnR1504((ConstantSpecification_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ConstantInPackage_c.getManyCNST_CIPsOnR1506((ConstantSpecification_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Constant Specification ->R4403
           //                      ->R4403 -- System Constant in Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R4403 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
            // Constant Specification ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Constant Specification ->R1504
           //                      ->R1504 -- Symbolic Constant  
            // Constant Specification ->R1506
           //                      ->R1506 -- Constant in Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1506 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SystemConstantInPackage_c.getOneSLD_SCINPOnR4403((ConstantSpecification_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SymbolicConstant_c.getOneCNST_SYCOnR1504((ConstantSpecification_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ConstantInPackage_c.getOneCNST_CIPOnR1506((ConstantSpecification_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ActivityPartition_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Activity Partition ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Activity Partition ->R1111
           //                      ->R1111 -- Activity <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ActivityEdge_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Activity Edge ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Activity Edge ->R1102
           //                      ->R1102 -- Activity <<DEFINITE EXTERNAL LINK>>
            // Activity Edge ->R1103
           //                      ->R1103 -- Activity Node  
            // Activity Edge ->R1104
           //                      ->R1104 -- Activity Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Message_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            MessageInSequence_c instMessageInSequence0 = MessageInSequence_c.getOneSQ_MISOnR954((Message_c)element, true);
            if(instMessageInSequence0 != null){
            	List<NonRootModelElement> R954List = new ArrayList<NonRootModelElement>();
            	R954List.add(instMessageInSequence0);
                map.put("R954", R954List);
            }
            List<NonRootModelElement> R1000List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageArgument_c.getManyMSG_AsOnR1000((Message_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1000List.add(externalMEs[i]);
            }
            map.put("R1000", R1000List);
            List<NonRootModelElement> R1001List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageArgument_c.getManyMSG_AsOnR1001((Message_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1001List.add(externalMEs[i]);
            }
            map.put("R1001", R1001List);
            ReturnMessage_c instReturnMessage1 = ReturnMessage_c.getOneMSG_ROnR1018((Message_c)element, true);
            if(instReturnMessage1 != null){
            	List<NonRootModelElement> R1018List = new ArrayList<NonRootModelElement>();
            	R1018List.add(instReturnMessage1);
                map.put("R1018", R1018List);
            }
            SynchronousMessage_c instSynchronousMessage2 = SynchronousMessage_c.getOneMSG_SMOnR1018((Message_c)element, true);
            if(instSynchronousMessage2 != null){
            	List<NonRootModelElement> R1018List = new ArrayList<NonRootModelElement>();
            	R1018List.add(instSynchronousMessage2);
                map.put("R1018", R1018List);
            }
            AsynchronousMessage_c instAsynchronousMessage3 = AsynchronousMessage_c.getOneMSG_AMOnR1018((Message_c)element, true);
            if(instAsynchronousMessage3 != null){
            	List<NonRootModelElement> R1018List = new ArrayList<NonRootModelElement>();
            	R1018List.add(instAsynchronousMessage3);
                map.put("R1018", R1018List);
            }
            List<NonRootModelElement> R1135List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageInCommunication_c.getManyCOMM_MICsOnR1135((Message_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1135List.add(externalMEs[i]);
            }
            map.put("R1135", R1135List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            MessageInSequence_c instMessageInSequence0 = MessageInSequence_c.getOneSQ_MISOnR954((Message_c)modelElement, loadComponent);
            if(instMessageInSequence0 != null){
                externalMEList.add(instMessageInSequence0);
            }

            externalMEs = MessageArgument_c.getManyMSG_AsOnR1000((Message_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = MessageArgument_c.getManyMSG_AsOnR1001((Message_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ReturnMessage_c instReturnMessage1 = ReturnMessage_c.getOneMSG_ROnR1018((Message_c)modelElement, loadComponent);
            if(instReturnMessage1 != null && (!checkSameComponent || !isComponentSame(modelElement, instReturnMessage1))){
                externalMEList.add(instReturnMessage1);
            }
            SynchronousMessage_c instSynchronousMessage2 = SynchronousMessage_c.getOneMSG_SMOnR1018((Message_c)modelElement, loadComponent);
            if(instSynchronousMessage2 != null && (!checkSameComponent || !isComponentSame(modelElement, instSynchronousMessage2))){
                externalMEList.add(instSynchronousMessage2);
            }
            AsynchronousMessage_c instAsynchronousMessage3 = AsynchronousMessage_c.getOneMSG_AMOnR1018((Message_c)modelElement, loadComponent);
            if(instAsynchronousMessage3 != null && (!checkSameComponent || !isComponentSame(modelElement, instAsynchronousMessage3))){
                externalMEList.add(instAsynchronousMessage3);
            }

            externalMEs = MessageInCommunication_c.getManyCOMM_MICsOnR1135((Message_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Message ->R954
           //                      ->R954 -- Message In Sequence <<DEFINITE EXTERNAL LINK>>
            // Message ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Message ->R1000
           //                      ->R1000 -- Message Argument  
            // Message ->R1001
           //                      ->R1001 -- Message Argument  
            // Message ->R1007
           //                      ->R1007 -- Interaction Participant  
            // Message ->R1008
           //                      ->R1008 -- Interaction Participant  
            // Message ->R1018
           //                      ->R1018 -- Return Message  
           //                      ->R1018 -- Synchronous Message  
           //                      ->R1018 -- Asynchronous Message  
            // Message ->R1135
           //                      ->R1135 -- Message in Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1135 -- Communication <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = MessageInSequence_c.getOneSQ_MISOnR954((Message_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = MessageArgument_c.getOneMSG_AOnR1000((Message_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MessageArgument_c.getOneMSG_AOnR1001((Message_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ReturnMessage_c.getOneMSG_ROnR1018((Message_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SynchronousMessage_c.getOneMSG_SMOnR1018((Message_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AsynchronousMessage_c.getOneMSG_AMOnR1018((Message_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MessageInCommunication_c.getOneCOMM_MICOnR1135((Message_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Association_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R681List = new ArrayList<NonRootModelElement>();
            externalMEs = ChainLink_c.getManyACT_LNKsOnR681((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R681List.add(externalMEs[i]);
            }
            map.put("R681", R681List);
            List<NonRootModelElement> R653List = new ArrayList<NonRootModelElement>();
            externalMEs = Relate_c.getManyACT_RELsOnR653((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R653List.add(externalMEs[i]);
            }
            map.put("R653", R653List);
            List<NonRootModelElement> R654List = new ArrayList<NonRootModelElement>();
            externalMEs = RelateUsing_c.getManyACT_RUsOnR654((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R654List.add(externalMEs[i]);
            }
            map.put("R654", R654List);
            List<NonRootModelElement> R655List = new ArrayList<NonRootModelElement>();
            externalMEs = Unrelate_c.getManyACT_UNRsOnR655((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R655List.add(externalMEs[i]);
            }
            map.put("R655", R655List);
            List<NonRootModelElement> R656List = new ArrayList<NonRootModelElement>();
            externalMEs = UnrelateUsing_c.getManyACT_URUsOnR656((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R656List.add(externalMEs[i]);
            }
            map.put("R656", R656List);
            List<NonRootModelElement> R2904List = new ArrayList<NonRootModelElement>();
            externalMEs = Link_c.getManyI_LNKsOnR2904((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2904List.add(externalMEs[i]);
            }
            map.put("R2904", R2904List);
            List<NonRootModelElement> R2959List = new ArrayList<NonRootModelElement>();
            externalMEs = LinkParticipation_c.getManyI_LIPsOnR2959((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2959List.add(externalMEs[i]);
            }
            map.put("R2959", R2959List);
            List<NonRootModelElement> R1128List = new ArrayList<NonRootModelElement>();
            externalMEs = CommunicationLink_c.getManyCOMM_LNKsOnR1128((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1128List.add(externalMEs[i]);
            }
            map.put("R1128", R1128List);
            List<NonRootModelElement> R201List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassInAssociation_c.getManyR_OIRsOnR201((Association_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R201List.add(externalMEs[i]);
            }
            map.put("R201", R201List);
            SimpleAssociation_c instSimpleAssociation0 = SimpleAssociation_c.getOneR_SIMPOnR206((Association_c)element, true);
            if(instSimpleAssociation0 != null){
            	List<NonRootModelElement> R206List = new ArrayList<NonRootModelElement>();
            	R206List.add(instSimpleAssociation0);
                map.put("R206", R206List);
            }
            LinkedAssociation_c instLinkedAssociation1 = LinkedAssociation_c.getOneR_ASSOCOnR206((Association_c)element, true);
            if(instLinkedAssociation1 != null){
            	List<NonRootModelElement> R206List = new ArrayList<NonRootModelElement>();
            	R206List.add(instLinkedAssociation1);
                map.put("R206", R206List);
            }
            SubtypeSupertypeAssociation_c instSubtypeSupertypeAssociation2 = SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206((Association_c)element, true);
            if(instSubtypeSupertypeAssociation2 != null){
            	List<NonRootModelElement> R206List = new ArrayList<NonRootModelElement>();
            	R206List.add(instSubtypeSupertypeAssociation2);
                map.put("R206", R206List);
            }
            DerivedAssociation_c instDerivedAssociation3 = DerivedAssociation_c.getOneR_COMPOnR206((Association_c)element, true);
            if(instDerivedAssociation3 != null){
            	List<NonRootModelElement> R206List = new ArrayList<NonRootModelElement>();
            	R206List.add(instDerivedAssociation3);
                map.put("R206", R206List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ChainLink_c.getManyACT_LNKsOnR681((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Relate_c.getManyACT_RELsOnR653((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = RelateUsing_c.getManyACT_RUsOnR654((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Unrelate_c.getManyACT_UNRsOnR655((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = UnrelateUsing_c.getManyACT_URUsOnR656((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Link_c.getManyI_LNKsOnR2904((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = LinkParticipation_c.getManyI_LIPsOnR2959((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = CommunicationLink_c.getManyCOMM_LNKsOnR1128((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ClassInAssociation_c.getManyR_OIRsOnR201((Association_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            SimpleAssociation_c instSimpleAssociation0 = SimpleAssociation_c.getOneR_SIMPOnR206((Association_c)modelElement, loadComponent);
            if(instSimpleAssociation0 != null && (!checkSameComponent || !isComponentSame(modelElement, instSimpleAssociation0))){
                externalMEList.add(instSimpleAssociation0);
            }
            LinkedAssociation_c instLinkedAssociation1 = LinkedAssociation_c.getOneR_ASSOCOnR206((Association_c)modelElement, loadComponent);
            if(instLinkedAssociation1 != null && (!checkSameComponent || !isComponentSame(modelElement, instLinkedAssociation1))){
                externalMEList.add(instLinkedAssociation1);
            }
            SubtypeSupertypeAssociation_c instSubtypeSupertypeAssociation2 = SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206((Association_c)modelElement, loadComponent);
            if(instSubtypeSupertypeAssociation2 != null && (!checkSameComponent || !isComponentSame(modelElement, instSubtypeSupertypeAssociation2))){
                externalMEList.add(instSubtypeSupertypeAssociation2);
            }
            DerivedAssociation_c instDerivedAssociation3 = DerivedAssociation_c.getOneR_COMPOnR206((Association_c)modelElement, loadComponent);
            if(instDerivedAssociation3 != null && (!checkSameComponent || !isComponentSame(modelElement, instDerivedAssociation3))){
                externalMEList.add(instDerivedAssociation3);
            }
            // Association ->R681
           //                      ->R681 -- Chain Link <<DEFINITE EXTERNAL LINK>>
            // Association ->R653
           //                      ->R653 -- Relate <<DEFINITE EXTERNAL LINK>>
            // Association ->R654
           //                      ->R654 -- Relate Using <<DEFINITE EXTERNAL LINK>>
            // Association ->R655
           //                      ->R655 -- Unrelate <<DEFINITE EXTERNAL LINK>>
            // Association ->R656
           //                      ->R656 -- Unrelate Using <<DEFINITE EXTERNAL LINK>>
            // Association ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Association ->R2904
           //                      ->R2904 -- Link <<DEFINITE EXTERNAL LINK>>
            // Association ->R2959
           //                      ->R2959 -- Link Participation <<DEFINITE EXTERNAL LINK>>
            // Association ->R4
           //                      ->R4 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Association ->R1128
           //                      ->R1128 -- Communication Link  
            // Association ->R201
           //                      ->R201 -- Class In Association  
           //                      ->R201 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // Association ->R206
           //                      ->R206 -- Simple Association  
           //                      ->R206 -- Linked Association  
           //                      ->R206 -- Subtype Supertype Association  
           //                      ->R206 -- Derived Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ChainLink_c.getOneACT_LNKOnR681((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Relate_c.getOneACT_RELOnR653((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = RelateUsing_c.getOneACT_RUOnR654((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Unrelate_c.getOneACT_UNROnR655((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = UnrelateUsing_c.getOneACT_URUOnR656((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Link_c.getOneI_LNKOnR2904((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = LinkParticipation_c.getOneI_LIPOnR2959((Association_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = CommunicationLink_c.getOneCOMM_LNKOnR1128((Association_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassInAssociation_c.getOneR_OIROnR201((Association_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SimpleAssociation_c.getOneR_SIMPOnR206((Association_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = LinkedAssociation_c.getOneR_ASSOCOnR206((Association_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206((Association_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DerivedAssociation_c.getOneR_COMPOnR206((Association_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ImportedClass_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R414List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR414((ImportedClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R414List.add(externalMEs[i]);
            }
            map.put("R414", R414List);
            List<NonRootModelElement> R420List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToObjAccessPath_c.getManyCA_SMOAsOnR420((ImportedClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R420List.add(externalMEs[i]);
            }
            map.put("R420", R420List);
            List<NonRootModelElement> R424List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR424((ImportedClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R424List.add(externalMEs[i]);
            }
            map.put("R424", R424List);
            List<NonRootModelElement> R425List = new ArrayList<NonRootModelElement>();
            externalMEs = AccessPath_c.getManyCA_ACCsOnR425((ImportedClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R425List.add(externalMEs[i]);
            }
            map.put("R425", R425List);
            List<NonRootModelElement> R202List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassInAssociation_c.getManyR_OIRsOnR202((ImportedClass_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R202List.add(externalMEs[i]);
            }
            map.put("R202", R202List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR414((ImportedClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToObjAccessPath_c.getManyCA_SMOAsOnR420((ImportedClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR424((ImportedClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = AccessPath_c.getManyCA_ACCsOnR425((ImportedClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ClassInAssociation_c.getManyR_OIRsOnR202((ImportedClass_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Imported Class ->R101
           //                      ->R101 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // Imported Class ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Imported Class ->R3
           //                      ->R3 -- Subsystem <<DEFINITE EXTERNAL LINK>>
            // Imported Class ->R414
           //                      ->R414 -- SM to SM Comm Path <<DEFINITE EXTERNAL LINK>>
            // Imported Class ->R420
           //                      ->R420 -- SM to OBJ Access Path <<DEFINITE EXTERNAL LINK>>
            // Imported Class ->R424
           //                      ->R424 -- SM to SM Comm Path <<DEFINITE EXTERNAL LINK>>
            // Imported Class ->R425
           //                      ->R425 -- Access Path <<DEFINITE EXTERNAL LINK>>
            // Imported Class ->R202
           //                      ->R202 -- Class In Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToSmCommPath_c.getOneCA_SMSMCOnR414((ImportedClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToObjAccessPath_c.getOneCA_SMOAOnR420((ImportedClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToSmCommPath_c.getOneCA_SMSMCOnR424((ImportedClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = AccessPath_c.getOneCA_ACCOnR425((ImportedClass_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ClassInAssociation_c.getOneR_OIROnR202((ImportedClass_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntity_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R933List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityParticipant_c.getManySQ_EEPsOnR933((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R933List.add(externalMEs[i]);
            }
            map.put("R933", R933List);
            List<NonRootModelElement> R9List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityInModel_c.getManyS_EEMsOnR9((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9List.add(externalMEs[i]);
            }
            map.put("R9", R9List);
            List<NonRootModelElement> R10List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityEvent_c.getManyS_EEEVTsOnR10((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R10List.add(externalMEs[i]);
            }
            map.put("R10", R10List);
            List<NonRootModelElement> R12List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR12((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R12List.add(externalMEs[i]);
            }
            map.put("R12", R12List);
            List<NonRootModelElement> R19List = new ArrayList<NonRootModelElement>();
            externalMEs = Bridge_c.getManyS_BRGsOnR19((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R19List.add(externalMEs[i]);
            }
            map.put("R19", R19List);
            List<NonRootModelElement> R11List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityDataItem_c.getManyS_EEDIsOnR11((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R11List.add(externalMEs[i]);
            }
            map.put("R11", R11List);
            List<NonRootModelElement> R33List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityInPackage_c.getManyS_EEIPsOnR33((ExternalEntity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R33List.add(externalMEs[i]);
            }
            map.put("R33", R33List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ExternalEntityParticipant_c.getManySQ_EEPsOnR933((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntityInModel_c.getManyS_EEMsOnR9((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ExternalEntityEvent_c.getManyS_EEEVTsOnR10((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR12((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Bridge_c.getManyS_BRGsOnR19((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntityDataItem_c.getManyS_EEDIsOnR11((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntityInPackage_c.getManyS_EEIPsOnR33((ExternalEntity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // External Entity ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // External Entity ->R933
           //                      ->R933 -- External Entity Participant  
            // External Entity ->R9
           //                      ->R9 -- External Entity in Model <<DEFINITE EXTERNAL LINK>>
            // External Entity ->R10
           //                      ->R10 -- External Entity Event  
            // External Entity ->R12
           //                      ->R12 -- External Entity Event Data Item  
            // External Entity ->R8
           //                      ->R8 -- Domain <<Legacy Containment>>
            // External Entity ->R19
           //                      ->R19 -- Bridge  
            // External Entity ->R11
           //                      ->R11 -- External Entity Data Item  
            // External Entity ->R33
           //                      ->R33 -- External Entity in Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R33 -- External Entity Package <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ExternalEntityParticipant_c.getOneSQ_EEPOnR933((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityInModel_c.getOneS_EEMOnR9((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ExternalEntityEvent_c.getOneS_EEEVTOnR10((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityEventDataItem_c.getOneS_EEEDIOnR12((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Bridge_c.getOneS_BRGOnR19((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityDataItem_c.getOneS_EEDIOnR11((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityInPackage_c.getOneS_EEIPOnR33((ExternalEntity_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Function_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R3201List = new ArrayList<NonRootModelElement>();
            externalMEs = AutomaticWiring_c.getManyS_AWsOnR3201((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R3201List.add(externalMEs[i]);
            }
            map.put("R3201", R3201List);
            List<NonRootModelElement> R827List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionValue_c.getManyV_FNVsOnR827((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R827List.add(externalMEs[i]);
            }
            map.put("R827", R827List);
            List<NonRootModelElement> R1010List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionMessage_c.getManyMSG_FsOnR1010((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1010List.add(externalMEs[i]);
            }
            map.put("R1010", R1010List);
            List<NonRootModelElement> R675List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionInvocation_c.getManyACT_FNCsOnR675((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R675List.add(externalMEs[i]);
            }
            map.put("R675", R675List);
            List<NonRootModelElement> R24List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionParameter_c.getManyS_SPARMsOnR24((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R24List.add(externalMEs[i]);
            }
            map.put("R24", R24List);
            List<NonRootModelElement> R31List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionInPackage_c.getManyS_FIPsOnR31((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R31List.add(externalMEs[i]);
            }
            map.put("R31", R31List);
            List<NonRootModelElement> R51List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR51((Function_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R51List.add(externalMEs[i]);
            }
            map.put("R51", R51List);
            FunctionBody_c instFunctionBody0 = FunctionBody_c.getOneACT_FNBOnR695((Function_c)element, true);
            if(instFunctionBody0 != null){
            	List<NonRootModelElement> R695List = new ArrayList<NonRootModelElement>();
            	R695List.add(instFunctionBody0);
                map.put("R695", R695List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = AutomaticWiring_c.getManyS_AWsOnR3201((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionValue_c.getManyV_FNVsOnR827((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionMessage_c.getManyMSG_FsOnR1010((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = FunctionInvocation_c.getManyACT_FNCsOnR675((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionParameter_c.getManyS_SPARMsOnR24((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = FunctionInPackage_c.getManyS_FIPsOnR31((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Dimensions_c.getManyS_DIMsOnR51((Function_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            FunctionBody_c instFunctionBody0 = FunctionBody_c.getOneACT_FNBOnR695((Function_c)modelElement, loadComponent);
            if(instFunctionBody0 != null){
                externalMEList.add(instFunctionBody0);
            }
            // Function ->R3201
           //                      ->R3201 -- Automatic Wiring <<DEFINITE EXTERNAL LINK>>
            // Function ->R827
           //                      ->R827 -- Function Value <<DEFINITE EXTERNAL LINK>>
            // Function ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Function ->R1010
           //                      ->R1010 -- Function Message  
            // Function ->R675
           //                      ->R675 -- Function Invocation <<DEFINITE EXTERNAL LINK>>
            // Function ->R23
           //                      ->R23 -- Domain <<Legacy Containment>>
            // Function ->R25
           //                      ->R25 -- Data Type  
            // Function ->R24
           //                      ->R24 -- Function Parameter  
            // Function ->R31
           //                      ->R31 -- Function in Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R31 -- Function Package <<DEFINITE EXTERNAL LINK>>
            // Function ->R51
           //                      ->R51 -- Dimensions  
            // Function ->R695
           //                      ->R695 -- Function Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AutomaticWiring_c.getOneS_AWOnR3201((Function_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionValue_c.getOneV_FNVOnR827((Function_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionMessage_c.getOneMSG_FOnR1010((Function_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionInvocation_c.getOneACT_FNCOnR675((Function_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionParameter_c.getOneS_SPARMOnR24((Function_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionInPackage_c.getOneS_FIPOnR31((Function_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Dimensions_c.getOneS_DIMOnR51((Function_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionBody_c.getOneACT_FNBOnR695((Function_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class UseCaseAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            BinaryAssociation_c instBinaryAssociation0 = BinaryAssociation_c.getOneUC_BAOnR1210((UseCaseAssociation_c)element, true);
            if(instBinaryAssociation0 != null){
            	List<NonRootModelElement> R1210List = new ArrayList<NonRootModelElement>();
            	R1210List.add(instBinaryAssociation0);
                map.put("R1210", R1210List);
            }
            Generalization_c instGeneralization1 = Generalization_c.getOneUC_GOnR1210((UseCaseAssociation_c)element, true);
            if(instGeneralization1 != null){
            	List<NonRootModelElement> R1210List = new ArrayList<NonRootModelElement>();
            	R1210List.add(instGeneralization1);
                map.put("R1210", R1210List);
            }
            Include_c instInclude2 = Include_c.getOneUC_IOnR1210((UseCaseAssociation_c)element, true);
            if(instInclude2 != null){
            	List<NonRootModelElement> R1210List = new ArrayList<NonRootModelElement>();
            	R1210List.add(instInclude2);
                map.put("R1210", R1210List);
            }
            Extend_c instExtend3 = Extend_c.getOneUC_EOnR1210((UseCaseAssociation_c)element, true);
            if(instExtend3 != null){
            	List<NonRootModelElement> R1210List = new ArrayList<NonRootModelElement>();
            	R1210List.add(instExtend3);
                map.put("R1210", R1210List);
            }
            AssociationInUseCase_c instAssociationInUseCase4 = AssociationInUseCase_c.getOneUC_AIUCOnR1215((UseCaseAssociation_c)element, true);
            if(instAssociationInUseCase4 != null){
            	List<NonRootModelElement> R1215List = new ArrayList<NonRootModelElement>();
            	R1215List.add(instAssociationInUseCase4);
                map.put("R1215", R1215List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            BinaryAssociation_c instBinaryAssociation0 = BinaryAssociation_c.getOneUC_BAOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(instBinaryAssociation0 != null && (!checkSameComponent || !isComponentSame(modelElement, instBinaryAssociation0))){
                externalMEList.add(instBinaryAssociation0);
            }
            Generalization_c instGeneralization1 = Generalization_c.getOneUC_GOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(instGeneralization1 != null && (!checkSameComponent || !isComponentSame(modelElement, instGeneralization1))){
                externalMEList.add(instGeneralization1);
            }
            Include_c instInclude2 = Include_c.getOneUC_IOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(instInclude2 != null && (!checkSameComponent || !isComponentSame(modelElement, instInclude2))){
                externalMEList.add(instInclude2);
            }
            Extend_c instExtend3 = Extend_c.getOneUC_EOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(instExtend3 != null && (!checkSameComponent || !isComponentSame(modelElement, instExtend3))){
                externalMEList.add(instExtend3);
            }

            AssociationInUseCase_c instAssociationInUseCase4 = AssociationInUseCase_c.getOneUC_AIUCOnR1215((UseCaseAssociation_c)modelElement, loadComponent);
            if(instAssociationInUseCase4 != null){
                externalMEList.add(instAssociationInUseCase4);
            }
            // Use Case Association ->R1210
           //                      ->R1210 -- Binary Association  
           //                      ->R1210 -- Generalization  
           //                      ->R1210 -- Include  
           //                      ->R1210 -- Extend  
            // Use Case Association ->R1206
           //                      ->R1206 -- Interaction Participant  
            // Use Case Association ->R1207
           //                      ->R1207 -- Interaction Participant  
            // Use Case Association ->R1215
           //                      ->R1215 -- Association In Use Case <<DEFINITE EXTERNAL LINK>>
            // Use Case Association ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = BinaryAssociation_c.getOneUC_BAOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Generalization_c.getOneUC_GOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Include_c.getOneUC_IOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Extend_c.getOneUC_EOnR1210((UseCaseAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AssociationInUseCase_c.getOneUC_AIUCOnR1215((UseCaseAssociation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Satisfaction_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R9001List = new ArrayList<NonRootModelElement>();
            externalMEs = SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001((Satisfaction_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9001List.add(externalMEs[i]);
            }
            map.put("R9001", R9001List);
            List<NonRootModelElement> R9000List = new ArrayList<NonRootModelElement>();
            externalMEs = SatisfactionInComponent_c.getManyPA_SICsOnR9000((Satisfaction_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9000List.add(externalMEs[i]);
            }
            map.put("R9000", R9000List);
            List<NonRootModelElement> R4705List = new ArrayList<NonRootModelElement>();
            externalMEs = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705((Satisfaction_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4705List.add(externalMEs[i]);
            }
            map.put("R4705", R4705List);
            ImportedRequirement_c instImportedRequirement0 = ImportedRequirement_c.getOneCL_IROnR4706((Satisfaction_c)element, true);
            if(instImportedRequirement0 != null){
            	List<NonRootModelElement> R4706List = new ArrayList<NonRootModelElement>();
            	R4706List.add(instImportedRequirement0);
                map.put("R4706", R4706List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001((Satisfaction_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SatisfactionInComponent_c.getManyPA_SICsOnR9000((Satisfaction_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705((Satisfaction_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ImportedRequirement_c instImportedRequirement0 = ImportedRequirement_c.getOneCL_IROnR4706((Satisfaction_c)modelElement, loadComponent);
            if(instImportedRequirement0 != null && (!checkSameComponent || !isComponentSame(modelElement, instImportedRequirement0))){
                externalMEList.add(instImportedRequirement0);
            }
            // Satisfaction ->R9001
           //                      ->R9001 -- Satisfaction In Component Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R9001 -- Component Package <<DEFINITE EXTERNAL LINK>>
            // Satisfaction ->R9000
           //                      ->R9000 -- Satisfaction In Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R9000 -- Component <<DEFINITE EXTERNAL LINK>>
            // Satisfaction ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Delegation  
           //                      ->R8001 -- Packageable Element  
            // Satisfaction ->R4002
           //                      ->R4002 -- Requirement <<DEFINITE EXTERNAL LINK>>
           //                      ->R4002 -- Provision <<DEFINITE EXTERNAL LINK>>
            // Satisfaction ->R4705
           //                      ->R4705 -- Imported Provision In Satisfaction  
           //                      ->R4705 -- Imported Provision  
            // Satisfaction ->R4706
           //                      ->R4706 -- Imported Requirement  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SatisfactionInComponentPackage_c.getOnePA_SICPOnR9001((Satisfaction_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SatisfactionInComponent_c.getOnePA_SICOnR9000((Satisfaction_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705((Satisfaction_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ImportedRequirement_c.getOneCL_IROnR4706((Satisfaction_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Delegation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R9002List = new ArrayList<NonRootModelElement>();
            externalMEs = DelegationInComponent_c.getManyPA_DICsOnR9002((Delegation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9002List.add(externalMEs[i]);
            }
            map.put("R9002", R9002List);
            List<NonRootModelElement> R4013List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013((Delegation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4013List.add(externalMEs[i]);
            }
            map.put("R4013", R4013List);
            List<NonRootModelElement> R4014List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceReference_c.getManyC_IRsOnR4014((Delegation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4014List.add(externalMEs[i]);
            }
            map.put("R4014", R4014List);
            ImportedReference_c instImportedReference0 = ImportedReference_c.getOneCL_IIROnR4704((Delegation_c)element, true);
            if(instImportedReference0 != null){
            	List<NonRootModelElement> R4704List = new ArrayList<NonRootModelElement>();
            	R4704List.add(instImportedReference0);
                map.put("R4704", R4704List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = DelegationInComponent_c.getManyPA_DICsOnR9002((Delegation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013((Delegation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = InterfaceReference_c.getManyC_IRsOnR4014((Delegation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            ImportedReference_c instImportedReference0 = ImportedReference_c.getOneCL_IIROnR4704((Delegation_c)modelElement, loadComponent);
            if(instImportedReference0 != null && (!checkSameComponent || !isComponentSame(modelElement, instImportedReference0))){
                externalMEList.add(instImportedReference0);
            }
            // Delegation ->R9002
           //                      ->R9002 -- Delegation In Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R9002 -- Component <<DEFINITE EXTERNAL LINK>>
            // Delegation ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Packageable Element  
            // Delegation ->R4013
           //                      ->R4013 -- Interface Reference In Delegation  
           //                      ->R4013 -- Interface Reference <<DEFINITE EXTERNAL LINK>>
            // Delegation ->R4014
           //                      ->R4014 -- Interface Reference <<DEFINITE EXTERNAL LINK>>
            // Delegation ->R4704
           //                      ->R4704 -- Imported Reference  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = DelegationInComponent_c.getOnePA_DICOnR9002((Delegation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013((Delegation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfaceReference_c.getOneC_IROnR4014((Delegation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ImportedReference_c.getOneCL_IIROnR4704((Delegation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class PackageableElement_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            DataType_c instDataType0 = DataType_c.getOneS_DTOnR8001((PackageableElement_c)element, true);
            if(instDataType0 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instDataType0);
                map.put("R8001", R8001List);
            }
            Package_c instPackage1 = Package_c.getOneEP_PKGOnR8001((PackageableElement_c)element, true);
            if(instPackage1 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instPackage1);
                map.put("R8001", R8001List);
            }
            InteractionParticipant_c instInteractionParticipant2 = InteractionParticipant_c.getOneSQ_POnR8001((PackageableElement_c)element, true);
            if(instInteractionParticipant2 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instInteractionParticipant2);
                map.put("R8001", R8001List);
            }
            ActivityNode_c instActivityNode3 = ActivityNode_c.getOneA_NOnR8001((PackageableElement_c)element, true);
            if(instActivityNode3 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instActivityNode3);
                map.put("R8001", R8001List);
            }
            ModelClass_c instModelClass4 = ModelClass_c.getOneO_OBJOnR8001((PackageableElement_c)element, true);
            if(instModelClass4 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instModelClass4);
                map.put("R8001", R8001List);
            }
            Component_c instComponent5 = Component_c.getOneC_COnR8001((PackageableElement_c)element, true);
            if(instComponent5 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instComponent5);
                map.put("R8001", R8001List);
            }
            ComponentReference_c instComponentReference6 = ComponentReference_c.getOneCL_ICOnR8001((PackageableElement_c)element, true);
            if(instComponentReference6 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instComponentReference6);
                map.put("R8001", R8001List);
            }
            Interface_c instInterface7 = Interface_c.getOneC_IOnR8001((PackageableElement_c)element, true);
            if(instInterface7 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instInterface7);
                map.put("R8001", R8001List);
            }
            ConstantSpecification_c instConstantSpecification8 = ConstantSpecification_c.getOneCNST_CSPOnR8001((PackageableElement_c)element, true);
            if(instConstantSpecification8 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instConstantSpecification8);
                map.put("R8001", R8001List);
            }
            ActivityPartition_c instActivityPartition9 = ActivityPartition_c.getOneA_APOnR8001((PackageableElement_c)element, true);
            if(instActivityPartition9 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instActivityPartition9);
                map.put("R8001", R8001List);
            }
            ActivityEdge_c instActivityEdge10 = ActivityEdge_c.getOneA_EOnR8001((PackageableElement_c)element, true);
            if(instActivityEdge10 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instActivityEdge10);
                map.put("R8001", R8001List);
            }
            Message_c instMessage11 = Message_c.getOneMSG_MOnR8001((PackageableElement_c)element, true);
            if(instMessage11 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instMessage11);
                map.put("R8001", R8001List);
            }
            Association_c instAssociation12 = Association_c.getOneR_RELOnR8001((PackageableElement_c)element, true);
            if(instAssociation12 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instAssociation12);
                map.put("R8001", R8001List);
            }
            ImportedClass_c instImportedClass13 = ImportedClass_c.getOneO_IOBJOnR8001((PackageableElement_c)element, true);
            if(instImportedClass13 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instImportedClass13);
                map.put("R8001", R8001List);
            }
            ExternalEntity_c instExternalEntity14 = ExternalEntity_c.getOneS_EEOnR8001((PackageableElement_c)element, true);
            if(instExternalEntity14 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instExternalEntity14);
                map.put("R8001", R8001List);
            }
            Function_c instFunction15 = Function_c.getOneS_SYNCOnR8001((PackageableElement_c)element, true);
            if(instFunction15 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instFunction15);
                map.put("R8001", R8001List);
            }
            UseCaseAssociation_c instUseCaseAssociation16 = UseCaseAssociation_c.getOneUC_UCAOnR8001((PackageableElement_c)element, true);
            if(instUseCaseAssociation16 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instUseCaseAssociation16);
                map.put("R8001", R8001List);
            }
            Satisfaction_c instSatisfaction17 = Satisfaction_c.getOneC_SFOnR8001((PackageableElement_c)element, true);
            if(instSatisfaction17 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instSatisfaction17);
                map.put("R8001", R8001List);
            }
            Delegation_c instDelegation18 = Delegation_c.getOneC_DGOnR8001((PackageableElement_c)element, true);
            if(instDelegation18 != null){
            	List<NonRootModelElement> R8001List = new ArrayList<NonRootModelElement>();
            	R8001List.add(instDelegation18);
                map.put("R8001", R8001List);
            }
            List<NonRootModelElement> R8002List = new ArrayList<NonRootModelElement>();
            externalMEs = ElementVisibility_c.getManyPE_VISsOnR8002((PackageableElement_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8002List.add(externalMEs[i]);
            }
            map.put("R8002", R8002List);
            List<NonRootModelElement> R8004List = new ArrayList<NonRootModelElement>();
            externalMEs = ComponentVisibility_c.getManyPE_CVSsOnR8004((PackageableElement_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R8004List.add(externalMEs[i]);
            }
            map.put("R8004", R8004List);
            List<NonRootModelElement> R9100List = new ArrayList<NonRootModelElement>();
            externalMEs = GlobalElementInSystem_c.getManyG_EISsOnR9100((PackageableElement_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R9100List.add(externalMEs[i]);
            }
            map.put("R9100", R9100List);
            List<NonRootModelElement> R640List = new ArrayList<NonRootModelElement>();
            externalMEs = BodyInElement_c.getManyACT_BIEsOnR640((PackageableElement_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R640List.add(externalMEs[i]);
            }
            map.put("R640", R640List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            DataType_c instDataType0 = DataType_c.getOneS_DTOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instDataType0 != null && (!checkSameComponent || !isComponentSame(modelElement, instDataType0))){
                externalMEList.add(instDataType0);
            }
            Package_c instPackage1 = Package_c.getOneEP_PKGOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instPackage1 != null && (!checkSameComponent || !isComponentSame(modelElement, instPackage1))){
                externalMEList.add(instPackage1);
            }
            InteractionParticipant_c instInteractionParticipant2 = InteractionParticipant_c.getOneSQ_POnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instInteractionParticipant2 != null && (!checkSameComponent || !isComponentSame(modelElement, instInteractionParticipant2))){
                externalMEList.add(instInteractionParticipant2);
            }
            ActivityNode_c instActivityNode3 = ActivityNode_c.getOneA_NOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instActivityNode3 != null && (!checkSameComponent || !isComponentSame(modelElement, instActivityNode3))){
                externalMEList.add(instActivityNode3);
            }
            ModelClass_c instModelClass4 = ModelClass_c.getOneO_OBJOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instModelClass4 != null){
                externalMEList.add(instModelClass4);
            }
            Component_c instComponent5 = Component_c.getOneC_COnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instComponent5 != null){
                externalMEList.add(instComponent5);
            }
            ComponentReference_c instComponentReference6 = ComponentReference_c.getOneCL_ICOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instComponentReference6 != null && (!checkSameComponent || !isComponentSame(modelElement, instComponentReference6))){
                externalMEList.add(instComponentReference6);
            }
            Interface_c instInterface7 = Interface_c.getOneC_IOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instInterface7 != null){
                externalMEList.add(instInterface7);
            }
            ConstantSpecification_c instConstantSpecification8 = ConstantSpecification_c.getOneCNST_CSPOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instConstantSpecification8 != null && (!checkSameComponent || !isComponentSame(modelElement, instConstantSpecification8))){
                externalMEList.add(instConstantSpecification8);
            }
            ActivityPartition_c instActivityPartition9 = ActivityPartition_c.getOneA_APOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instActivityPartition9 != null && (!checkSameComponent || !isComponentSame(modelElement, instActivityPartition9))){
                externalMEList.add(instActivityPartition9);
            }
            ActivityEdge_c instActivityEdge10 = ActivityEdge_c.getOneA_EOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instActivityEdge10 != null && (!checkSameComponent || !isComponentSame(modelElement, instActivityEdge10))){
                externalMEList.add(instActivityEdge10);
            }
            Message_c instMessage11 = Message_c.getOneMSG_MOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instMessage11 != null && (!checkSameComponent || !isComponentSame(modelElement, instMessage11))){
                externalMEList.add(instMessage11);
            }
            Association_c instAssociation12 = Association_c.getOneR_RELOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instAssociation12 != null && (!checkSameComponent || !isComponentSame(modelElement, instAssociation12))){
                externalMEList.add(instAssociation12);
            }
            ImportedClass_c instImportedClass13 = ImportedClass_c.getOneO_IOBJOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instImportedClass13 != null && (!checkSameComponent || !isComponentSame(modelElement, instImportedClass13))){
                externalMEList.add(instImportedClass13);
            }
            ExternalEntity_c instExternalEntity14 = ExternalEntity_c.getOneS_EEOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instExternalEntity14 != null && (!checkSameComponent || !isComponentSame(modelElement, instExternalEntity14))){
                externalMEList.add(instExternalEntity14);
            }
            Function_c instFunction15 = Function_c.getOneS_SYNCOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instFunction15 != null && (!checkSameComponent || !isComponentSame(modelElement, instFunction15))){
                externalMEList.add(instFunction15);
            }
            UseCaseAssociation_c instUseCaseAssociation16 = UseCaseAssociation_c.getOneUC_UCAOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instUseCaseAssociation16 != null && (!checkSameComponent || !isComponentSame(modelElement, instUseCaseAssociation16))){
                externalMEList.add(instUseCaseAssociation16);
            }
            Satisfaction_c instSatisfaction17 = Satisfaction_c.getOneC_SFOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instSatisfaction17 != null && (!checkSameComponent || !isComponentSame(modelElement, instSatisfaction17))){
                externalMEList.add(instSatisfaction17);
            }
            Delegation_c instDelegation18 = Delegation_c.getOneC_DGOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(instDelegation18 != null && (!checkSameComponent || !isComponentSame(modelElement, instDelegation18))){
                externalMEList.add(instDelegation18);
            }

            externalMEs = ElementVisibility_c.getManyPE_VISsOnR8002((PackageableElement_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ComponentVisibility_c.getManyPE_CVSsOnR8004((PackageableElement_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = GlobalElementInSystem_c.getManyG_EISsOnR9100((PackageableElement_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = BodyInElement_c.getManyACT_BIEsOnR640((PackageableElement_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Packageable Element ->R8001
           //                      ->R8001 -- Data Type  
           //                      ->R8001 -- Package  
           //                      ->R8001 -- Interaction Participant  
           //                      ->R8001 -- Activity Node  
           //                      ->R8001 -- Model Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Component Reference  
           //                      ->R8001 -- Interface <<DEFINITE EXTERNAL LINK>>
           //                      ->R8001 -- Constant Specification  
           //                      ->R8001 -- Activity Partition  
           //                      ->R8001 -- Activity Edge  
           //                      ->R8001 -- Message  
           //                      ->R8001 -- Association  
           //                      ->R8001 -- Imported Class  
           //                      ->R8001 -- External Entity  
           //                      ->R8001 -- Function  
           //                      ->R8001 -- Use Case Association  
           //                      ->R8001 -- Satisfaction  
           //                      ->R8001 -- Delegation  
            // Packageable Element ->R8000
           //                      ->R8000 -- Package  
            // Packageable Element ->R8002
           //                      ->R8002 -- Package  
           //                      ->R8002 -- Element Visibility <<DEFINITE EXTERNAL LINK>>
            // Packageable Element ->R8003
           //                      ->R8003 -- Component <<DEFINITE EXTERNAL LINK>>
            // Packageable Element ->R8004
           //                      ->R8004 -- Component <<DEFINITE EXTERNAL LINK>>
           //                      ->R8004 -- Component Visibility <<DEFINITE EXTERNAL LINK>>
            // Packageable Element ->R9100
           //                      ->R9100 -- System Model <<DEFINITE EXTERNAL LINK>>
           //                      ->R9100 -- Global Element in System <<DEFINITE EXTERNAL LINK>>
            // Packageable Element ->R640
           //                      ->R640 -- Body <<DEFINITE EXTERNAL LINK>>
           //                      ->R640 -- Body in Element <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = DataType_c.getOneS_DTOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Package_c.getOneEP_PKGOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InteractionParticipant_c.getOneSQ_POnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityNode_c.getOneA_NOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ModelClass_c.getOneO_OBJOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Component_c.getOneC_COnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentReference_c.getOneCL_ICOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Interface_c.getOneC_IOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ConstantSpecification_c.getOneCNST_CSPOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityPartition_c.getOneA_APOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityEdge_c.getOneA_EOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Message_c.getOneMSG_MOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Association_c.getOneR_RELOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ImportedClass_c.getOneO_IOBJOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntity_c.getOneS_EEOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Function_c.getOneS_SYNCOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = UseCaseAssociation_c.getOneUC_UCAOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Satisfaction_c.getOneC_SFOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Delegation_c.getOneC_DGOnR8001((PackageableElement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ElementVisibility_c.getOnePE_VISOnR8002((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentVisibility_c.getOnePE_CVSOnR8004((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = GlobalElementInSystem_c.getOneG_EISOnR9100((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = BodyInElement_c.getOneACT_BIEOnR640((PackageableElement_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ComponentPackageInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ComponentPackage_c instComponentPackage0 = ComponentPackage_c.getOneCP_CPOnR4601((ComponentPackageInPackage_c)element, true);
            if(instComponentPackage0 != null){
            	List<NonRootModelElement> R4601List = new ArrayList<NonRootModelElement>();
            	R4601List.add(instComponentPackage0);
                map.put("R4601", R4601List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ComponentPackage_c instComponentPackage0 = ComponentPackage_c.getOneCP_CPOnR4601((ComponentPackageInPackage_c)modelElement, loadComponent);
            if(instComponentPackage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instComponentPackage0))){
                externalMEList.add(instComponentPackage0);
            }
            // Component Package in Package ->R4601
           //                      ->R4601 -- Component Package  
            // Component Package in Package ->R4600
           //                      ->R4600 -- Component Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ComponentPackage_c.getOneCP_CPOnR4601((ComponentPackageInPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ComponentInComponent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            Component_c instComponent0 = Component_c.getOneC_COnR4203((ComponentInComponent_c)element, true);
            if(instComponent0 != null){
            	List<NonRootModelElement> R4203List = new ArrayList<NonRootModelElement>();
            	R4203List.add(instComponent0);
                map.put("R4203", R4203List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            Component_c instComponent0 = Component_c.getOneC_COnR4203((ComponentInComponent_c)modelElement, loadComponent);
            if(instComponent0 != null && (!checkSameComponent || !isComponentSame(modelElement, instComponent0))){
                externalMEList.add(instComponent0);
            }
            // Component in Component ->R4203
           //                      ->R4203 -- Component  
            // Component in Component ->R4202
           //                      ->R4202 -- Component  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Component_c.getOneC_COnR4203((ComponentInComponent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Port_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4016List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceReference_c.getManyC_IRsOnR4016((Port_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4016List.add(externalMEs[i]);
            }
            map.put("R4016", R4016List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InterfaceReference_c.getManyC_IRsOnR4016((Port_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Port ->R4010
           //                      ->R4010 -- Component  
            // Port ->R4016
           //                      ->R4016 -- Interface Reference  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InterfaceReference_c.getOneC_IROnR4016((Port_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InterfaceReference_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            Requirement_c instRequirement0 = Requirement_c.getOneC_ROnR4009((InterfaceReference_c)element, true);
            if(instRequirement0 != null){
            	List<NonRootModelElement> R4009List = new ArrayList<NonRootModelElement>();
            	R4009List.add(instRequirement0);
                map.put("R4009", R4009List);
            }
            Provision_c instProvision1 = Provision_c.getOneC_POnR4009((InterfaceReference_c)element, true);
            if(instProvision1 != null){
            	List<NonRootModelElement> R4009List = new ArrayList<NonRootModelElement>();
            	R4009List.add(instProvision1);
                map.put("R4009", R4009List);
            }
            List<NonRootModelElement> R4013List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013((InterfaceReference_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4013List.add(externalMEs[i]);
            }
            map.put("R4013", R4013List);
            List<NonRootModelElement> R4701List = new ArrayList<NonRootModelElement>();
            externalMEs = ImportedReference_c.getManyCL_IIRsOnR4701((InterfaceReference_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4701List.add(externalMEs[i]);
            }
            map.put("R4701", R4701List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            Requirement_c instRequirement0 = Requirement_c.getOneC_ROnR4009((InterfaceReference_c)modelElement, loadComponent);
            if(instRequirement0 != null && (!checkSameComponent || !isComponentSame(modelElement, instRequirement0))){
                externalMEList.add(instRequirement0);
            }
            Provision_c instProvision1 = Provision_c.getOneC_POnR4009((InterfaceReference_c)modelElement, loadComponent);
            if(instProvision1 != null && (!checkSameComponent || !isComponentSame(modelElement, instProvision1))){
                externalMEList.add(instProvision1);
            }

            externalMEs = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013((InterfaceReference_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ImportedReference_c.getManyCL_IIRsOnR4701((InterfaceReference_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Interface Reference ->R4009
           //                      ->R4009 -- Requirement  
           //                      ->R4009 -- Provision  
            // Interface Reference ->R4012
           //                      ->R4012 -- Interface <<DEFINITE EXTERNAL LINK>>
            // Interface Reference ->R4013
           //                      ->R4013 -- Interface Reference In Delegation  
           //                      ->R4013 -- Delegation  
            // Interface Reference ->R4014
           //                      ->R4014 -- Delegation  
            // Interface Reference ->R4016
           //                      ->R4016 -- Port  
            // Interface Reference ->R4701
           //                      ->R4701 -- Imported Reference  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Requirement_c.getOneC_ROnR4009((InterfaceReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Provision_c.getOneC_POnR4009((InterfaceReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013((InterfaceReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ImportedReference_c.getOneCL_IIROnR4701((InterfaceReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Requirement_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4002List = new ArrayList<NonRootModelElement>();
            externalMEs = Satisfaction_c.getManyC_SFsOnR4002((Requirement_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4002List.add(externalMEs[i]);
            }
            map.put("R4002", R4002List);
            List<NonRootModelElement> R4500List = new ArrayList<NonRootModelElement>();
            externalMEs = RequiredExecutableProperty_c.getManySPR_REPsOnR4500((Requirement_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4500List.add(externalMEs[i]);
            }
            map.put("R4500", R4500List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Satisfaction_c.getManyC_SFsOnR4002((Requirement_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = RequiredExecutableProperty_c.getManySPR_REPsOnR4500((Requirement_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Requirement ->R4002
           //                      ->R4002 -- Satisfaction  
           //                      ->R4002 -- Provision  
            // Requirement ->R4009
           //                      ->R4009 -- Provision  
           //                      ->R4009 -- Interface Reference  
            // Requirement ->R4500
           //                      ->R4500 -- Required Executable Property  
           //                      ->R4500 -- Executable Property <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Satisfaction_c.getOneC_SFOnR4002((Requirement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = RequiredExecutableProperty_c.getOneSPR_REPOnR4500((Requirement_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class RequiredExecutableProperty_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R845List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageValue_c.getManyV_MSVsOnR845((RequiredExecutableProperty_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R845List.add(externalMEs[i]);
            }
            map.put("R845", R845List);
            RequiredSignal_c instRequiredSignal0 = RequiredSignal_c.getOneSPR_RSOnR4502((RequiredExecutableProperty_c)element, true);
            if(instRequiredSignal0 != null){
            	List<NonRootModelElement> R4502List = new ArrayList<NonRootModelElement>();
            	R4502List.add(instRequiredSignal0);
                map.put("R4502", R4502List);
            }
            RequiredOperation_c instRequiredOperation1 = RequiredOperation_c.getOneSPR_ROOnR4502((RequiredExecutableProperty_c)element, true);
            if(instRequiredOperation1 != null){
            	List<NonRootModelElement> R4502List = new ArrayList<NonRootModelElement>();
            	R4502List.add(instRequiredOperation1);
                map.put("R4502", R4502List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = MessageValue_c.getManyV_MSVsOnR845((RequiredExecutableProperty_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            RequiredSignal_c instRequiredSignal0 = RequiredSignal_c.getOneSPR_RSOnR4502((RequiredExecutableProperty_c)modelElement, loadComponent);
            if(instRequiredSignal0 != null && (!checkSameComponent || !isComponentSame(modelElement, instRequiredSignal0))){
                externalMEList.add(instRequiredSignal0);
            }
            RequiredOperation_c instRequiredOperation1 = RequiredOperation_c.getOneSPR_ROOnR4502((RequiredExecutableProperty_c)modelElement, loadComponent);
            if(instRequiredOperation1 != null && (!checkSameComponent || !isComponentSame(modelElement, instRequiredOperation1))){
                externalMEList.add(instRequiredOperation1);
            }
            // Required Executable Property ->R845
           //                      ->R845 -- Message Value <<DEFINITE EXTERNAL LINK>>
            // Required Executable Property ->R4500
           //                      ->R4500 -- Executable Property <<DEFINITE EXTERNAL LINK>>
           //                      ->R4500 -- Requirement  
            // Required Executable Property ->R4502
           //                      ->R4502 -- Required Signal  
           //                      ->R4502 -- Required Operation  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = MessageValue_c.getOneV_MSVOnR845((RequiredExecutableProperty_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = RequiredSignal_c.getOneSPR_RSOnR4502((RequiredExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = RequiredOperation_c.getOneSPR_ROOnR4502((RequiredExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class RequiredSignal_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            SignalEvent_c instSignalEvent0 = SignalEvent_c.getOneSM_SGEVTOnR529((RequiredSignal_c)element, true);
            if(instSignalEvent0 != null){
            	List<NonRootModelElement> R529List = new ArrayList<NonRootModelElement>();
            	R529List.add(instSignalEvent0);
                map.put("R529", R529List);
            }
            List<NonRootModelElement> R660List = new ArrayList<NonRootModelElement>();
            externalMEs = SignalInvocation_c.getManyACT_SGNsOnR660((RequiredSignal_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R660List.add(externalMEs[i]);
            }
            map.put("R660", R660List);
            RequiredSignalBody_c instRequiredSignalBody1 = RequiredSignalBody_c.getOneACT_RSBOnR684((RequiredSignal_c)element, true);
            if(instRequiredSignalBody1 != null){
            	List<NonRootModelElement> R684List = new ArrayList<NonRootModelElement>();
            	R684List.add(instRequiredSignalBody1);
                map.put("R684", R684List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            SignalEvent_c instSignalEvent0 = SignalEvent_c.getOneSM_SGEVTOnR529((RequiredSignal_c)modelElement, loadComponent);
            if(instSignalEvent0 != null){
                externalMEList.add(instSignalEvent0);
            }

            externalMEs = SignalInvocation_c.getManyACT_SGNsOnR660((RequiredSignal_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            RequiredSignalBody_c instRequiredSignalBody1 = RequiredSignalBody_c.getOneACT_RSBOnR684((RequiredSignal_c)modelElement, loadComponent);
            if(instRequiredSignalBody1 != null){
                externalMEList.add(instRequiredSignalBody1);
            }
            // Required Signal ->R529
           //                      ->R529 -- Signal Event <<DEFINITE EXTERNAL LINK>>
            // Required Signal ->R660
           //                      ->R660 -- Signal Invocation <<DEFINITE EXTERNAL LINK>>
            // Required Signal ->R4502
           //                      ->R4502 -- Required Operation  
           //                      ->R4502 -- Required Executable Property  
            // Required Signal ->R684
           //                      ->R684 -- Required Signal Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SignalEvent_c.getOneSM_SGEVTOnR529((RequiredSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SignalInvocation_c.getOneACT_SGNOnR660((RequiredSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = RequiredSignalBody_c.getOneACT_RSBOnR684((RequiredSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class RequiredOperation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R657List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceOperationInvocation_c.getManyACT_IOPsOnR657((RequiredOperation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R657List.add(externalMEs[i]);
            }
            map.put("R657", R657List);
            RequiredOperationBody_c instRequiredOperationBody0 = RequiredOperationBody_c.getOneACT_ROBOnR685((RequiredOperation_c)element, true);
            if(instRequiredOperationBody0 != null){
            	List<NonRootModelElement> R685List = new ArrayList<NonRootModelElement>();
            	R685List.add(instRequiredOperationBody0);
                map.put("R685", R685List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InterfaceOperationInvocation_c.getManyACT_IOPsOnR657((RequiredOperation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            RequiredOperationBody_c instRequiredOperationBody0 = RequiredOperationBody_c.getOneACT_ROBOnR685((RequiredOperation_c)modelElement, loadComponent);
            if(instRequiredOperationBody0 != null){
                externalMEList.add(instRequiredOperationBody0);
            }
            // Required Operation ->R657
           //                      ->R657 -- Interface Operation Invocation <<DEFINITE EXTERNAL LINK>>
            // Required Operation ->R4502
           //                      ->R4502 -- Required Signal  
           //                      ->R4502 -- Required Executable Property  
            // Required Operation ->R685
           //                      ->R685 -- Required Operation Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InterfaceOperationInvocation_c.getOneACT_IOPOnR657((RequiredOperation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = RequiredOperationBody_c.getOneACT_ROBOnR685((RequiredOperation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Provision_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4002List = new ArrayList<NonRootModelElement>();
            externalMEs = Satisfaction_c.getManyC_SFsOnR4002((Provision_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4002List.add(externalMEs[i]);
            }
            map.put("R4002", R4002List);
            List<NonRootModelElement> R4501List = new ArrayList<NonRootModelElement>();
            externalMEs = ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501((Provision_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4501List.add(externalMEs[i]);
            }
            map.put("R4501", R4501List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Satisfaction_c.getManyC_SFsOnR4002((Provision_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501((Provision_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Provision ->R4002
           //                      ->R4002 -- Satisfaction  
           //                      ->R4002 -- Requirement  
            // Provision ->R4009
           //                      ->R4009 -- Requirement  
           //                      ->R4009 -- Interface Reference  
            // Provision ->R4501
           //                      ->R4501 -- Provided Executable Property  
           //                      ->R4501 -- Executable Property <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Satisfaction_c.getOneC_SFOnR4002((Provision_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4501((Provision_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ProvidedExecutableProperty_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R841List = new ArrayList<NonRootModelElement>();
            externalMEs = MessageValue_c.getManyV_MSVsOnR841((ProvidedExecutableProperty_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R841List.add(externalMEs[i]);
            }
            map.put("R841", R841List);
            ProvidedSignal_c instProvidedSignal0 = ProvidedSignal_c.getOneSPR_PSOnR4503((ProvidedExecutableProperty_c)element, true);
            if(instProvidedSignal0 != null){
            	List<NonRootModelElement> R4503List = new ArrayList<NonRootModelElement>();
            	R4503List.add(instProvidedSignal0);
                map.put("R4503", R4503List);
            }
            ProvidedOperation_c instProvidedOperation1 = ProvidedOperation_c.getOneSPR_POOnR4503((ProvidedExecutableProperty_c)element, true);
            if(instProvidedOperation1 != null){
            	List<NonRootModelElement> R4503List = new ArrayList<NonRootModelElement>();
            	R4503List.add(instProvidedOperation1);
                map.put("R4503", R4503List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = MessageValue_c.getManyV_MSVsOnR841((ProvidedExecutableProperty_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            ProvidedSignal_c instProvidedSignal0 = ProvidedSignal_c.getOneSPR_PSOnR4503((ProvidedExecutableProperty_c)modelElement, loadComponent);
            if(instProvidedSignal0 != null && (!checkSameComponent || !isComponentSame(modelElement, instProvidedSignal0))){
                externalMEList.add(instProvidedSignal0);
            }
            ProvidedOperation_c instProvidedOperation1 = ProvidedOperation_c.getOneSPR_POOnR4503((ProvidedExecutableProperty_c)modelElement, loadComponent);
            if(instProvidedOperation1 != null && (!checkSameComponent || !isComponentSame(modelElement, instProvidedOperation1))){
                externalMEList.add(instProvidedOperation1);
            }
            // Provided Executable Property ->R841
           //                      ->R841 -- Message Value <<DEFINITE EXTERNAL LINK>>
            // Provided Executable Property ->R4501
           //                      ->R4501 -- Executable Property <<DEFINITE EXTERNAL LINK>>
           //                      ->R4501 -- Provision  
            // Provided Executable Property ->R4503
           //                      ->R4503 -- Provided Signal  
           //                      ->R4503 -- Provided Operation  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = MessageValue_c.getOneV_MSVOnR841((ProvidedExecutableProperty_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ProvidedSignal_c.getOneSPR_PSOnR4503((ProvidedExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ProvidedOperation_c.getOneSPR_POOnR4503((ProvidedExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ProvidedSignal_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            SignalEvent_c instSignalEvent0 = SignalEvent_c.getOneSM_SGEVTOnR528((ProvidedSignal_c)element, true);
            if(instSignalEvent0 != null){
            	List<NonRootModelElement> R528List = new ArrayList<NonRootModelElement>();
            	R528List.add(instSignalEvent0);
                map.put("R528", R528List);
            }
            List<NonRootModelElement> R663List = new ArrayList<NonRootModelElement>();
            externalMEs = SignalInvocation_c.getManyACT_SGNsOnR663((ProvidedSignal_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R663List.add(externalMEs[i]);
            }
            map.put("R663", R663List);
            ProvidedSignalBody_c instProvidedSignalBody1 = ProvidedSignalBody_c.getOneACT_PSBOnR686((ProvidedSignal_c)element, true);
            if(instProvidedSignalBody1 != null){
            	List<NonRootModelElement> R686List = new ArrayList<NonRootModelElement>();
            	R686List.add(instProvidedSignalBody1);
                map.put("R686", R686List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            SignalEvent_c instSignalEvent0 = SignalEvent_c.getOneSM_SGEVTOnR528((ProvidedSignal_c)modelElement, loadComponent);
            if(instSignalEvent0 != null){
                externalMEList.add(instSignalEvent0);
            }

            externalMEs = SignalInvocation_c.getManyACT_SGNsOnR663((ProvidedSignal_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            ProvidedSignalBody_c instProvidedSignalBody1 = ProvidedSignalBody_c.getOneACT_PSBOnR686((ProvidedSignal_c)modelElement, loadComponent);
            if(instProvidedSignalBody1 != null){
                externalMEList.add(instProvidedSignalBody1);
            }
            // Provided Signal ->R528
           //                      ->R528 -- Signal Event <<DEFINITE EXTERNAL LINK>>
            // Provided Signal ->R663
           //                      ->R663 -- Signal Invocation <<DEFINITE EXTERNAL LINK>>
            // Provided Signal ->R4503
           //                      ->R4503 -- Provided Operation  
           //                      ->R4503 -- Provided Executable Property  
            // Provided Signal ->R686
           //                      ->R686 -- Provided Signal Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SignalEvent_c.getOneSM_SGEVTOnR528((ProvidedSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SignalInvocation_c.getOneACT_SGNOnR663((ProvidedSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ProvidedSignalBody_c.getOneACT_PSBOnR686((ProvidedSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ProvidedOperation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R680List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceOperationInvocation_c.getManyACT_IOPsOnR680((ProvidedOperation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R680List.add(externalMEs[i]);
            }
            map.put("R680", R680List);
            ProvidedOperationBody_c instProvidedOperationBody0 = ProvidedOperationBody_c.getOneACT_POBOnR687((ProvidedOperation_c)element, true);
            if(instProvidedOperationBody0 != null){
            	List<NonRootModelElement> R687List = new ArrayList<NonRootModelElement>();
            	R687List.add(instProvidedOperationBody0);
                map.put("R687", R687List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InterfaceOperationInvocation_c.getManyACT_IOPsOnR680((ProvidedOperation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            ProvidedOperationBody_c instProvidedOperationBody0 = ProvidedOperationBody_c.getOneACT_POBOnR687((ProvidedOperation_c)modelElement, loadComponent);
            if(instProvidedOperationBody0 != null){
                externalMEList.add(instProvidedOperationBody0);
            }
            // Provided Operation ->R680
           //                      ->R680 -- Interface Operation Invocation <<DEFINITE EXTERNAL LINK>>
            // Provided Operation ->R4503
           //                      ->R4503 -- Provided Signal  
           //                      ->R4503 -- Provided Executable Property  
            // Provided Operation ->R687
           //                      ->R687 -- Provided Operation Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InterfaceOperationInvocation_c.getOneACT_IOPOnR680((ProvidedOperation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ProvidedOperationBody_c.getOneACT_POBOnR687((ProvidedOperation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DomainAsComponent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Domain As Component ->R4204
           //                      ->R4204 -- Component  
           //                      ->R4204 -- Domain  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ImportedReference_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ImportedProvision_c instImportedProvision0 = ImportedProvision_c.getOneCL_IPOnR4703((ImportedReference_c)element, true);
            if(instImportedProvision0 != null){
            	List<NonRootModelElement> R4703List = new ArrayList<NonRootModelElement>();
            	R4703List.add(instImportedProvision0);
                map.put("R4703", R4703List);
            }
            ImportedRequirement_c instImportedRequirement1 = ImportedRequirement_c.getOneCL_IROnR4703((ImportedReference_c)element, true);
            if(instImportedRequirement1 != null){
            	List<NonRootModelElement> R4703List = new ArrayList<NonRootModelElement>();
            	R4703List.add(instImportedRequirement1);
                map.put("R4703", R4703List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ImportedProvision_c instImportedProvision0 = ImportedProvision_c.getOneCL_IPOnR4703((ImportedReference_c)modelElement, loadComponent);
            if(instImportedProvision0 != null && (!checkSameComponent || !isComponentSame(modelElement, instImportedProvision0))){
                externalMEList.add(instImportedProvision0);
            }
            ImportedRequirement_c instImportedRequirement1 = ImportedRequirement_c.getOneCL_IROnR4703((ImportedReference_c)modelElement, loadComponent);
            if(instImportedRequirement1 != null && (!checkSameComponent || !isComponentSame(modelElement, instImportedRequirement1))){
                externalMEList.add(instImportedRequirement1);
            }
            // Imported Reference ->R4700
           //                      ->R4700 -- Component Reference  
            // Imported Reference ->R4701
           //                      ->R4701 -- Interface Reference <<DEFINITE EXTERNAL LINK>>
            // Imported Reference ->R4703
           //                      ->R4703 -- Imported Provision  
           //                      ->R4703 -- Imported Requirement  
            // Imported Reference ->R4704
           //                      ->R4704 -- Delegation  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ImportedProvision_c.getOneCL_IPOnR4703((ImportedReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ImportedRequirement_c.getOneCL_IROnR4703((ImportedReference_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ImportedProvision_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4705List = new ArrayList<NonRootModelElement>();
            externalMEs = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705((ImportedProvision_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4705List.add(externalMEs[i]);
            }
            map.put("R4705", R4705List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705((ImportedProvision_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Imported Provision ->R4703
           //                      ->R4703 -- Imported Requirement  
           //                      ->R4703 -- Imported Reference  
            // Imported Provision ->R4705
           //                      ->R4705 -- Imported Provision In Satisfaction  
           //                      ->R4705 -- Satisfaction  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705((ImportedProvision_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ImportedProvisionInSatisfaction_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Imported Provision In Satisfaction ->R4705
           //                      ->R4705 -- Satisfaction  
           //                      ->R4705 -- Imported Provision  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ImportedRequirement_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Imported Requirement ->R4703
           //                      ->R4703 -- Imported Provision  
           //                      ->R4703 -- Imported Reference  
            // Imported Requirement ->R4706
           //                      ->R4706 -- Satisfaction  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class DelegationInComponent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Delegation In Component ->R9002
           //                      ->R9002 -- Delegation  
           //                      ->R9002 -- Component  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class InterfaceReferenceInDelegation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Interface Reference In Delegation ->R4013
           //                      ->R4013 -- Delegation  
           //                      ->R4013 -- Interface Reference <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SatisfactionInComponent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Satisfaction In Component ->R9000
           //                      ->R9000 -- Satisfaction  
           //                      ->R9000 -- Component  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SatisfactionInComponentPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Satisfaction In Component Package ->R9001
           //                      ->R9001 -- Component Package  
           //                      ->R9001 -- Satisfaction  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SpecificationPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            DataTypePackage_c instDataTypePackage0 = DataTypePackage_c.getOneS_DPKOnR1402((SpecificationPackage_c)element, true);
            if(instDataTypePackage0 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instDataTypePackage0);
                map.put("R1402", R1402List);
            }
            Sequence_c instSequence1 = Sequence_c.getOneSQ_SOnR1402((SpecificationPackage_c)element, true);
            if(instSequence1 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instSequence1);
                map.put("R1402", R1402List);
            }
            Communication_c instCommunication2 = Communication_c.getOneCOMM_COMMOnR1402((SpecificationPackage_c)element, true);
            if(instCommunication2 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instCommunication2);
                map.put("R1402", R1402List);
            }
            UseCaseDiagram_c instUseCaseDiagram3 = UseCaseDiagram_c.getOneUC_UCCOnR1402((SpecificationPackage_c)element, true);
            if(instUseCaseDiagram3 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instUseCaseDiagram3);
                map.put("R1402", R1402List);
            }
            Activity_c instActivity4 = Activity_c.getOneA_AOnR1402((SpecificationPackage_c)element, true);
            if(instActivity4 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instActivity4);
                map.put("R1402", R1402List);
            }
            ComponentPackage_c instComponentPackage5 = ComponentPackage_c.getOneCP_CPOnR1402((SpecificationPackage_c)element, true);
            if(instComponentPackage5 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instComponentPackage5);
                map.put("R1402", R1402List);
            }
            InterfacePackage_c instInterfacePackage6 = InterfacePackage_c.getOneIP_IPOnR1402((SpecificationPackage_c)element, true);
            if(instInterfacePackage6 != null){
            	List<NonRootModelElement> R1402List = new ArrayList<NonRootModelElement>();
            	R1402List.add(instInterfacePackage6);
                map.put("R1402", R1402List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            DataTypePackage_c instDataTypePackage0 = DataTypePackage_c.getOneS_DPKOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instDataTypePackage0 != null){
                externalMEList.add(instDataTypePackage0);
            }
            Sequence_c instSequence1 = Sequence_c.getOneSQ_SOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instSequence1 != null){
                externalMEList.add(instSequence1);
            }
            Communication_c instCommunication2 = Communication_c.getOneCOMM_COMMOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instCommunication2 != null){
                externalMEList.add(instCommunication2);
            }
            UseCaseDiagram_c instUseCaseDiagram3 = UseCaseDiagram_c.getOneUC_UCCOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instUseCaseDiagram3 != null){
                externalMEList.add(instUseCaseDiagram3);
            }
            Activity_c instActivity4 = Activity_c.getOneA_AOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instActivity4 != null){
                externalMEList.add(instActivity4);
            }
            ComponentPackage_c instComponentPackage5 = ComponentPackage_c.getOneCP_CPOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instComponentPackage5 != null && (!checkSameComponent || !isComponentSame(modelElement, instComponentPackage5))){
                externalMEList.add(instComponentPackage5);
            }
            InterfacePackage_c instInterfacePackage6 = InterfacePackage_c.getOneIP_IPOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(instInterfacePackage6 != null){
                externalMEList.add(instInterfacePackage6);
            }
            // Specification Package ->R1402
           //                      ->R1402 -- Data Type Package <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Sequence <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Communication <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Activity <<DEFINITE EXTERNAL LINK>>
           //                      ->R1402 -- Component Package  
           //                      ->R1402 -- Interface Package <<DEFINITE EXTERNAL LINK>>
            // Specification Package ->R1400
           //                      ->R1400 -- Package <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = DataTypePackage_c.getOneS_DPKOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Sequence_c.getOneSQ_SOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Communication_c.getOneCOMM_COMMOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Activity_c.getOneA_AOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ComponentPackage_c.getOneCP_CPOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfacePackage_c.getOneIP_IPOnR1402((SpecificationPackage_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InterfacePackageInInterfacePackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4301List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4301((InterfacePackageInInterfacePackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4301List.add(externalMEs[i]);
            }
            map.put("R4301", R4301List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InterfacePackage_c.getManyIP_IPsOnR4301((InterfacePackageInInterfacePackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Interface Package in Interface Package ->R4301
           //                      ->R4301 -- Interface Package  
            // Interface Package in Interface Package ->R4300
           //                      ->R4300 -- Interface Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InterfacePackage_c.getOneIP_IPOnR4301((InterfacePackageInInterfacePackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExecutableProperty_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4500List = new ArrayList<NonRootModelElement>();
            externalMEs = RequiredExecutableProperty_c.getManySPR_REPsOnR4500((ExecutableProperty_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4500List.add(externalMEs[i]);
            }
            map.put("R4500", R4500List);
            List<NonRootModelElement> R4501List = new ArrayList<NonRootModelElement>();
            externalMEs = ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501((ExecutableProperty_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4501List.add(externalMEs[i]);
            }
            map.put("R4501", R4501List);
            InterfaceSignal_c instInterfaceSignal0 = InterfaceSignal_c.getOneC_ASOnR4004((ExecutableProperty_c)element, true);
            if(instInterfaceSignal0 != null){
            	List<NonRootModelElement> R4004List = new ArrayList<NonRootModelElement>();
            	R4004List.add(instInterfaceSignal0);
                map.put("R4004", R4004List);
            }
            InterfaceOperation_c instInterfaceOperation1 = InterfaceOperation_c.getOneC_IOOnR4004((ExecutableProperty_c)element, true);
            if(instInterfaceOperation1 != null){
            	List<NonRootModelElement> R4004List = new ArrayList<NonRootModelElement>();
            	R4004List.add(instInterfaceOperation1);
                map.put("R4004", R4004List);
            }
            List<NonRootModelElement> R4006List = new ArrayList<NonRootModelElement>();
            externalMEs = PropertyParameter_c.getManyC_PPsOnR4006((ExecutableProperty_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4006List.add(externalMEs[i]);
            }
            map.put("R4006", R4006List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = RequiredExecutableProperty_c.getManySPR_REPsOnR4500((ExecutableProperty_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501((ExecutableProperty_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            InterfaceSignal_c instInterfaceSignal0 = InterfaceSignal_c.getOneC_ASOnR4004((ExecutableProperty_c)modelElement, loadComponent);
            if(instInterfaceSignal0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInterfaceSignal0))){
                externalMEList.add(instInterfaceSignal0);
            }
            InterfaceOperation_c instInterfaceOperation1 = InterfaceOperation_c.getOneC_IOOnR4004((ExecutableProperty_c)modelElement, loadComponent);
            if(instInterfaceOperation1 != null && (!checkSameComponent || !isComponentSame(modelElement, instInterfaceOperation1))){
                externalMEList.add(instInterfaceOperation1);
            }

            externalMEs = PropertyParameter_c.getManyC_PPsOnR4006((ExecutableProperty_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Executable Property ->R4500
           //                      ->R4500 -- Required Executable Property <<DEFINITE EXTERNAL LINK>>
           //                      ->R4500 -- Requirement <<DEFINITE EXTERNAL LINK>>
            // Executable Property ->R4501
           //                      ->R4501 -- Provided Executable Property <<DEFINITE EXTERNAL LINK>>
           //                      ->R4501 -- Provision <<DEFINITE EXTERNAL LINK>>
            // Executable Property ->R4003
           //                      ->R4003 -- Interface  
            // Executable Property ->R4004
           //                      ->R4004 -- Interface Signal  
           //                      ->R4004 -- Interface Operation  
            // Executable Property ->R4006
           //                      ->R4006 -- Property Parameter  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = RequiredExecutableProperty_c.getOneSPR_REPOnR4500((ExecutableProperty_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4501((ExecutableProperty_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfaceSignal_c.getOneC_ASOnR4004((ExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfaceOperation_c.getOneC_IOOnR4004((ExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = PropertyParameter_c.getOneC_PPOnR4006((ExecutableProperty_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InterfaceSignal_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1021List = new ArrayList<NonRootModelElement>();
            externalMEs = SignalMessage_c.getManyMSG_SIGsOnR1021((InterfaceSignal_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1021List.add(externalMEs[i]);
            }
            map.put("R1021", R1021List);
            InterfaceSignal_c instInterfaceSignal0 = InterfaceSignal_c.getOneC_ASOnR4020Precedes((InterfaceSignal_c)element, true);
            if(instInterfaceSignal0 != null){
            	List<NonRootModelElement> R4020List = new ArrayList<NonRootModelElement>();
            	R4020List.add(instInterfaceSignal0);
                map.put("R4020", R4020List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SignalMessage_c.getManyMSG_SIGsOnR1021((InterfaceSignal_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            InterfaceSignal_c instInterfaceSignal0 = InterfaceSignal_c.getOneC_ASOnR4020Precedes((InterfaceSignal_c)modelElement, loadComponent);
            if(instInterfaceSignal0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInterfaceSignal0))){
                externalMEList.add(instInterfaceSignal0);
            }
            // Interface Signal ->R1021
           //                      ->R1021 -- Signal Message <<DEFINITE EXTERNAL LINK>>
            // Interface Signal ->R4004
           //                      ->R4004 -- Interface Operation  
           //                      ->R4004 -- Executable Property  
            // Interface Signal ->R4020
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SignalMessage_c.getOneMSG_SIGOnR1021((InterfaceSignal_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InterfaceSignal_c.getOneC_ASOnR4020Precedes((InterfaceSignal_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InterfaceOperation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1022List = new ArrayList<NonRootModelElement>();
            externalMEs = InterfaceOperationMessage_c.getManyMSG_IOPsOnR1022((InterfaceOperation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1022List.add(externalMEs[i]);
            }
            map.put("R1022", R1022List);
            List<NonRootModelElement> R4018List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR4018((InterfaceOperation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4018List.add(externalMEs[i]);
            }
            map.put("R4018", R4018List);
            InterfaceOperation_c instInterfaceOperation0 = InterfaceOperation_c.getOneC_IOOnR4019Precedes((InterfaceOperation_c)element, true);
            if(instInterfaceOperation0 != null){
            	List<NonRootModelElement> R4019List = new ArrayList<NonRootModelElement>();
            	R4019List.add(instInterfaceOperation0);
                map.put("R4019", R4019List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InterfaceOperationMessage_c.getManyMSG_IOPsOnR1022((InterfaceOperation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Dimensions_c.getManyS_DIMsOnR4018((InterfaceOperation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            InterfaceOperation_c instInterfaceOperation0 = InterfaceOperation_c.getOneC_IOOnR4019Precedes((InterfaceOperation_c)modelElement, loadComponent);
            if(instInterfaceOperation0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInterfaceOperation0))){
                externalMEList.add(instInterfaceOperation0);
            }
            // Interface Operation ->R1022
           //                      ->R1022 -- Interface Operation Message <<DEFINITE EXTERNAL LINK>>
            // Interface Operation ->R4004
           //                      ->R4004 -- Interface Signal  
           //                      ->R4004 -- Executable Property  
            // Interface Operation ->R4008
           //                      ->R4008 -- Data Type <<DEFINITE EXTERNAL LINK>>
            // Interface Operation ->R4018
           //                      ->R4018 -- Dimensions  
            // Interface Operation ->R4019
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InterfaceOperationMessage_c.getOneMSG_IOPOnR1022((InterfaceOperation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Dimensions_c.getOneS_DIMOnR4018((InterfaceOperation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfaceOperation_c.getOneC_IOOnR4019Precedes((InterfaceOperation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Dimensions_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Dimensions ->R844
           //                      ->R844 -- Transient Var <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R849
           //                      ->R849 -- Variable <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R120
           //                      ->R120 -- Attribute <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R121
           //                      ->R121 -- Operation Parameter <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R122
           //                      ->R122 -- Operation <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R531
           //                      ->R531 -- State Machine Event Data Item <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R49
           //                      ->R49 -- Bridge Parameter <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R50
           //                      ->R50 -- Bridge <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R51
           //                      ->R51 -- Function <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R52
           //                      ->R52 -- Function Parameter <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R53
           //                      ->R53 -- Structure Member <<DEFINITE EXTERNAL LINK>>
            // Dimensions ->R4017
           //                      ->R4017 -- Property Parameter  
            // Dimensions ->R4018
           //                      ->R4018 -- Interface Operation  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class PropertyParameter_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R4017List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR4017((PropertyParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4017List.add(externalMEs[i]);
            }
            map.put("R4017", R4017List);
            List<NonRootModelElement> R843List = new ArrayList<NonRootModelElement>();
            externalMEs = ParameterValue_c.getManyV_PVLsOnR843((PropertyParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R843List.add(externalMEs[i]);
            }
            map.put("R843", R843List);
            List<NonRootModelElement> R847List = new ArrayList<NonRootModelElement>();
            externalMEs = EventParameterReference_c.getManyV_EPRsOnR847((PropertyParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R847List.add(externalMEs[i]);
            }
            map.put("R847", R847List);
            List<NonRootModelElement> R1023List = new ArrayList<NonRootModelElement>();
            externalMEs = ExecutablePropertyArgument_c.getManyMSG_EPAsOnR1023((PropertyParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1023List.add(externalMEs[i]);
            }
            map.put("R1023", R1023List);
            List<NonRootModelElement> R2956List = new ArrayList<NonRootModelElement>();
            externalMEs = DataItemValue_c.getManyI_DIVsOnR2956((PropertyParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2956List.add(externalMEs[i]);
            }
            map.put("R2956", R2956List);
            PropertyParameter_c instPropertyParameter0 = PropertyParameter_c.getOneC_PPOnR4021Precedes((PropertyParameter_c)element, true);
            if(instPropertyParameter0 != null){
            	List<NonRootModelElement> R4021List = new ArrayList<NonRootModelElement>();
            	R4021List.add(instPropertyParameter0);
                map.put("R4021", R4021List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR4017((PropertyParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ParameterValue_c.getManyV_PVLsOnR843((PropertyParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = EventParameterReference_c.getManyV_EPRsOnR847((PropertyParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ExecutablePropertyArgument_c.getManyMSG_EPAsOnR1023((PropertyParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = DataItemValue_c.getManyI_DIVsOnR2956((PropertyParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            PropertyParameter_c instPropertyParameter0 = PropertyParameter_c.getOneC_PPOnR4021Precedes((PropertyParameter_c)modelElement, loadComponent);
            if(instPropertyParameter0 != null && (!checkSameComponent || !isComponentSame(modelElement, instPropertyParameter0))){
                externalMEList.add(instPropertyParameter0);
            }
            // Property Parameter ->R4017
           //                      ->R4017 -- Dimensions  
            // Property Parameter ->R843
           //                      ->R843 -- Parameter Value <<DEFINITE EXTERNAL LINK>>
            // Property Parameter ->R847
           //                      ->R847 -- Event Parameter Reference <<DEFINITE EXTERNAL LINK>>
            // Property Parameter ->R1023
           //                      ->R1023 -- Executable Property Argument <<DEFINITE EXTERNAL LINK>>
            // Property Parameter ->R2956
           //                      ->R2956 -- Data Item Value <<DEFINITE EXTERNAL LINK>>
            // Property Parameter ->R4006
           //                      ->R4006 -- Executable Property  
            // Property Parameter ->R4007
           //                      ->R4007 -- Data Type <<DEFINITE EXTERNAL LINK>>
            // Property Parameter ->R4021
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR4017((PropertyParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParameterValue_c.getOneV_PVLOnR843((PropertyParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = EventParameterReference_c.getOneV_EPROnR847((PropertyParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ExecutablePropertyArgument_c.getOneMSG_EPAOnR1023((PropertyParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = DataItemValue_c.getOneI_DIVOnR2956((PropertyParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = PropertyParameter_c.getOneC_PPOnR4021Precedes((PropertyParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DataTypePackageInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R38List = new ArrayList<NonRootModelElement>();
            externalMEs = DataTypePackage_c.getManyS_DPKsOnR38((DataTypePackageInPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R38List.add(externalMEs[i]);
            }
            map.put("R38", R38List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = DataTypePackage_c.getManyS_DPKsOnR38((DataTypePackageInPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Data Type Package in Package ->R38
           //                      ->R38 -- Data Type Package  
            // Data Type Package in Package ->R37
           //                      ->R37 -- Data Type Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = DataTypePackage_c.getOneS_DPKOnR38((DataTypePackageInPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DataTypeInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Data Type in Package ->R39
           //                      ->R39 -- Data Type Package  
           //                      ->R39 -- Data Type  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class CoreDataType_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Core Data Type ->R17
           //                      ->R17 -- User Data Type  
           //                      ->R17 -- Enumeration Data Type  
           //                      ->R17 -- Structured Data Type  
           //                      ->R17 -- Instance Reference Data Type  
           //                      ->R17 -- Data Type  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class UserDataType_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // User Data Type ->R17
           //                      ->R17 -- Core Data Type  
           //                      ->R17 -- Enumeration Data Type  
           //                      ->R17 -- Structured Data Type  
           //                      ->R17 -- Instance Reference Data Type  
           //                      ->R17 -- Data Type  
            // User Data Type ->R18
           //                      ->R18 -- Data Type  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class EnumerationDataType_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R27List = new ArrayList<NonRootModelElement>();
            externalMEs = Enumerator_c.getManyS_ENUMsOnR27((EnumerationDataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R27List.add(externalMEs[i]);
            }
            map.put("R27", R27List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Enumerator_c.getManyS_ENUMsOnR27((EnumerationDataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Enumeration Data Type ->R17
           //                      ->R17 -- Core Data Type  
           //                      ->R17 -- User Data Type  
           //                      ->R17 -- Structured Data Type  
           //                      ->R17 -- Instance Reference Data Type  
           //                      ->R17 -- Data Type  
            // Enumeration Data Type ->R27
           //                      ->R27 -- Enumerator  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Enumerator_c.getOneS_ENUMOnR27((EnumerationDataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Enumerator_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R824List = new ArrayList<NonRootModelElement>();
            externalMEs = LiteralEnumerator_c.getManyV_LENsOnR824((Enumerator_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R824List.add(externalMEs[i]);
            }
            map.put("R824", R824List);
            Enumerator_c instEnumerator0 = Enumerator_c.getOneS_ENUMOnR56Precedes((Enumerator_c)element, true);
            if(instEnumerator0 != null){
            	List<NonRootModelElement> R56List = new ArrayList<NonRootModelElement>();
            	R56List.add(instEnumerator0);
                map.put("R56", R56List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = LiteralEnumerator_c.getManyV_LENsOnR824((Enumerator_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            Enumerator_c instEnumerator0 = Enumerator_c.getOneS_ENUMOnR56Precedes((Enumerator_c)modelElement, loadComponent);
            if(instEnumerator0 != null && (!checkSameComponent || !isComponentSame(modelElement, instEnumerator0))){
                externalMEList.add(instEnumerator0);
            }
            // Enumerator ->R824
           //                      ->R824 -- Literal Enumerator <<DEFINITE EXTERNAL LINK>>
            // Enumerator ->R27
           //                      ->R27 -- Enumeration Data Type  
            // Enumerator ->R56
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = LiteralEnumerator_c.getOneV_LENOnR824((Enumerator_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Enumerator_c.getOneS_ENUMOnR56Precedes((Enumerator_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class StructuredDataType_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R44List = new ArrayList<NonRootModelElement>();
            externalMEs = StructureMember_c.getManyS_MBRsOnR44((StructuredDataType_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R44List.add(externalMEs[i]);
            }
            map.put("R44", R44List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = StructureMember_c.getManyS_MBRsOnR44((StructuredDataType_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Structured Data Type ->R17
           //                      ->R17 -- Core Data Type  
           //                      ->R17 -- User Data Type  
           //                      ->R17 -- Enumeration Data Type  
           //                      ->R17 -- Instance Reference Data Type  
           //                      ->R17 -- Data Type  
            // Structured Data Type ->R44
           //                      ->R44 -- Structure Member  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = StructureMember_c.getOneS_MBROnR44((StructuredDataType_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class StructureMember_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R53List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR53((StructureMember_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R53List.add(externalMEs[i]);
            }
            map.put("R53", R53List);
            List<NonRootModelElement> R836List = new ArrayList<NonRootModelElement>();
            externalMEs = MemberValueReference_c.getManyV_MVLsOnR836((StructureMember_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R836List.add(externalMEs[i]);
            }
            map.put("R836", R836List);
            StructureMember_c instStructureMember0 = StructureMember_c.getOneS_MBROnR46Precedes((StructureMember_c)element, true);
            if(instStructureMember0 != null){
            	List<NonRootModelElement> R46List = new ArrayList<NonRootModelElement>();
            	R46List.add(instStructureMember0);
                map.put("R46", R46List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR53((StructureMember_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = MemberValueReference_c.getManyV_MVLsOnR836((StructureMember_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            StructureMember_c instStructureMember0 = StructureMember_c.getOneS_MBROnR46Precedes((StructureMember_c)modelElement, loadComponent);
            if(instStructureMember0 != null && (!checkSameComponent || !isComponentSame(modelElement, instStructureMember0))){
                externalMEList.add(instStructureMember0);
            }
            // Structure Member ->R53
           //                      ->R53 -- Dimensions  
            // Structure Member ->R836
           //                      ->R836 -- Member Value Reference <<DEFINITE EXTERNAL LINK>>
            // Structure Member ->R44
           //                      ->R44 -- Structured Data Type  
            // Structure Member ->R45
           //                      ->R45 -- Data Type  
            // Structure Member ->R46
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR53((StructureMember_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MemberValueReference_c.getOneV_MVLOnR836((StructureMember_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = StructureMember_c.getOneS_MBROnR46Precedes((StructureMember_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InstanceReferenceDataType_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Instance Reference Data Type ->R123
           //                      ->R123 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // Instance Reference Data Type ->R17
           //                      ->R17 -- Core Data Type  
           //                      ->R17 -- User Data Type  
           //                      ->R17 -- Enumeration Data Type  
           //                      ->R17 -- Structured Data Type  
           //                      ->R17 -- Data Type  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SystemDatatypeInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // System Datatype in Package ->R4401
           //                      ->R4401 -- Data Type Package  
           //                      ->R4401 -- Data Type  
            // System Datatype in Package ->R4402
           //                      ->R4402 -- System Model <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ConstantInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Constant in Package ->R1506
           //                      ->R1506 -- Constant Specification  
           //                      ->R1506 -- Data Type Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SymbolicConstant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R850List = new ArrayList<NonRootModelElement>();
            externalMEs = SymbolicConstantValue_c.getManyV_SCVsOnR850((SymbolicConstant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R850List.add(externalMEs[i]);
            }
            map.put("R850", R850List);
            LeafSymbolicConstant_c instLeafSymbolicConstant0 = LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502((SymbolicConstant_c)element, true);
            if(instLeafSymbolicConstant0 != null){
            	List<NonRootModelElement> R1502List = new ArrayList<NonRootModelElement>();
            	R1502List.add(instLeafSymbolicConstant0);
                map.put("R1502", R1502List);
            }
            SymbolicConstant_c instSymbolicConstant1 = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes((SymbolicConstant_c)element, true);
            if(instSymbolicConstant1 != null){
            	List<NonRootModelElement> R1505List = new ArrayList<NonRootModelElement>();
            	R1505List.add(instSymbolicConstant1);
                map.put("R1505", R1505List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SymbolicConstantValue_c.getManyV_SCVsOnR850((SymbolicConstant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            LeafSymbolicConstant_c instLeafSymbolicConstant0 = LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502((SymbolicConstant_c)modelElement, loadComponent);
            if(instLeafSymbolicConstant0 != null && (!checkSameComponent || !isComponentSame(modelElement, instLeafSymbolicConstant0))){
                externalMEList.add(instLeafSymbolicConstant0);
            }

            SymbolicConstant_c instSymbolicConstant1 = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes((SymbolicConstant_c)modelElement, loadComponent);
            if(instSymbolicConstant1 != null && (!checkSameComponent || !isComponentSame(modelElement, instSymbolicConstant1))){
                externalMEList.add(instSymbolicConstant1);
            }
            // Symbolic Constant ->R850
           //                      ->R850 -- Symbolic Constant Value <<DEFINITE EXTERNAL LINK>>
            // Symbolic Constant ->R1500
           //                      ->R1500 -- Data Type  
            // Symbolic Constant ->R1502
           //                      ->R1502 -- Leaf Symbolic Constant  
            // Symbolic Constant ->R1504
           //                      ->R1504 -- Constant Specification  
            // Symbolic Constant ->R1505
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SymbolicConstantValue_c.getOneV_SCVOnR850((SymbolicConstant_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502((SymbolicConstant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes((SymbolicConstant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class LeafSymbolicConstant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            LiteralSymbolicConstant_c instLiteralSymbolicConstant0 = LiteralSymbolicConstant_c.getOneCNST_LSCOnR1503((LeafSymbolicConstant_c)element, true);
            if(instLiteralSymbolicConstant0 != null){
            	List<NonRootModelElement> R1503List = new ArrayList<NonRootModelElement>();
            	R1503List.add(instLiteralSymbolicConstant0);
                map.put("R1503", R1503List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            LiteralSymbolicConstant_c instLiteralSymbolicConstant0 = LiteralSymbolicConstant_c.getOneCNST_LSCOnR1503((LeafSymbolicConstant_c)modelElement, loadComponent);
            if(instLiteralSymbolicConstant0 != null && (!checkSameComponent || !isComponentSame(modelElement, instLiteralSymbolicConstant0))){
                externalMEList.add(instLiteralSymbolicConstant0);
            }
            // Leaf Symbolic Constant ->R1502
           //                      ->R1502 -- Symbolic Constant  
            // Leaf Symbolic Constant ->R1503
           //                      ->R1503 -- Literal Symbolic Constant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = LiteralSymbolicConstant_c.getOneCNST_LSCOnR1503((LeafSymbolicConstant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class LiteralSymbolicConstant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Literal Symbolic Constant ->R1503
           //                      ->R1503 -- Leaf Symbolic Constant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SystemConstantInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // System Constant in Package ->R4404
           //                      ->R4404 -- System Model <<DEFINITE EXTERNAL LINK>>
            // System Constant in Package ->R4403
           //                      ->R4403 -- Data Type Package  
           //                      ->R4403 -- Constant Specification  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class EePackageInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R35List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityPackage_c.getManyS_EEPKsOnR35((EePackageInPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R35List.add(externalMEs[i]);
            }
            map.put("R35", R35List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ExternalEntityPackage_c.getManyS_EEPKsOnR35((EePackageInPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // EE Package in Package ->R35
           //                      ->R35 -- External Entity Package  
            // EE Package in Package ->R34
           //                      ->R34 -- External Entity Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ExternalEntityPackage_c.getOneS_EEPKOnR35((EePackageInPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntityInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // External Entity in Package ->R33
           //                      ->R33 -- External Entity Package  
           //                      ->R33 -- External Entity  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Bridge_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R50List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR50((Bridge_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R50List.add(externalMEs[i]);
            }
            map.put("R50", R50List);
            AutomaticWiring_c instAutomaticWiring0 = AutomaticWiring_c.getOneS_AWOnR3200((Bridge_c)element, true);
            if(instAutomaticWiring0 != null){
            	List<NonRootModelElement> R3200List = new ArrayList<NonRootModelElement>();
            	R3200List.add(instAutomaticWiring0);
                map.put("R3200", R3200List);
            }
            List<NonRootModelElement> R828List = new ArrayList<NonRootModelElement>();
            externalMEs = BridgeValue_c.getManyV_BRVsOnR828((Bridge_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R828List.add(externalMEs[i]);
            }
            map.put("R828", R828List);
            List<NonRootModelElement> R1012List = new ArrayList<NonRootModelElement>();
            externalMEs = BridgeMessage_c.getManyMSG_BsOnR1012((Bridge_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1012List.add(externalMEs[i]);
            }
            map.put("R1012", R1012List);
            List<NonRootModelElement> R674List = new ArrayList<NonRootModelElement>();
            externalMEs = BridgeInvocation_c.getManyACT_BRGsOnR674((Bridge_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R674List.add(externalMEs[i]);
            }
            map.put("R674", R674List);
            List<NonRootModelElement> R21List = new ArrayList<NonRootModelElement>();
            externalMEs = BridgeParameter_c.getManyS_BPARMsOnR21((Bridge_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R21List.add(externalMEs[i]);
            }
            map.put("R21", R21List);
            BridgeBody_c instBridgeBody1 = BridgeBody_c.getOneACT_BRBOnR697((Bridge_c)element, true);
            if(instBridgeBody1 != null){
            	List<NonRootModelElement> R697List = new ArrayList<NonRootModelElement>();
            	R697List.add(instBridgeBody1);
                map.put("R697", R697List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR50((Bridge_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            AutomaticWiring_c instAutomaticWiring0 = AutomaticWiring_c.getOneS_AWOnR3200((Bridge_c)modelElement, loadComponent);
            if(instAutomaticWiring0 != null){
                externalMEList.add(instAutomaticWiring0);
            }

            externalMEs = BridgeValue_c.getManyV_BRVsOnR828((Bridge_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = BridgeMessage_c.getManyMSG_BsOnR1012((Bridge_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = BridgeInvocation_c.getManyACT_BRGsOnR674((Bridge_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = BridgeParameter_c.getManyS_BPARMsOnR21((Bridge_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            BridgeBody_c instBridgeBody1 = BridgeBody_c.getOneACT_BRBOnR697((Bridge_c)modelElement, loadComponent);
            if(instBridgeBody1 != null){
                externalMEList.add(instBridgeBody1);
            }
            // Bridge ->R50
           //                      ->R50 -- Dimensions  
            // Bridge ->R3200
           //                      ->R3200 -- Automatic Wiring <<DEFINITE EXTERNAL LINK>>
            // Bridge ->R828
           //                      ->R828 -- Bridge Value <<DEFINITE EXTERNAL LINK>>
            // Bridge ->R1012
           //                      ->R1012 -- Bridge Message  
            // Bridge ->R674
           //                      ->R674 -- Bridge Invocation <<DEFINITE EXTERNAL LINK>>
            // Bridge ->R20
           //                      ->R20 -- Data Type  
            // Bridge ->R21
           //                      ->R21 -- Bridge Parameter  
            // Bridge ->R19
           //                      ->R19 -- External Entity  
            // Bridge ->R697
           //                      ->R697 -- Bridge Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR50((Bridge_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AutomaticWiring_c.getOneS_AWOnR3200((Bridge_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = BridgeValue_c.getOneV_BRVOnR828((Bridge_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = BridgeMessage_c.getOneMSG_BOnR1012((Bridge_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = BridgeInvocation_c.getOneACT_BRGOnR674((Bridge_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = BridgeParameter_c.getOneS_BPARMOnR21((Bridge_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = BridgeBody_c.getOneACT_BRBOnR697((Bridge_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class BridgeParameter_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R49List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR49((BridgeParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R49List.add(externalMEs[i]);
            }
            map.put("R49", R49List);
            List<NonRootModelElement> R831List = new ArrayList<NonRootModelElement>();
            externalMEs = ParameterValue_c.getManyV_PVLsOnR831((BridgeParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R831List.add(externalMEs[i]);
            }
            map.put("R831", R831List);
            List<NonRootModelElement> R1014List = new ArrayList<NonRootModelElement>();
            externalMEs = BridgeArgument_c.getManyMSG_BAsOnR1014((BridgeParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1014List.add(externalMEs[i]);
            }
            map.put("R1014", R1014List);
            BridgeParameter_c instBridgeParameter0 = BridgeParameter_c.getOneS_BPARMOnR55Precedes((BridgeParameter_c)element, true);
            if(instBridgeParameter0 != null){
            	List<NonRootModelElement> R55List = new ArrayList<NonRootModelElement>();
            	R55List.add(instBridgeParameter0);
                map.put("R55", R55List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR49((BridgeParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ParameterValue_c.getManyV_PVLsOnR831((BridgeParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = BridgeArgument_c.getManyMSG_BAsOnR1014((BridgeParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            BridgeParameter_c instBridgeParameter0 = BridgeParameter_c.getOneS_BPARMOnR55Precedes((BridgeParameter_c)modelElement, loadComponent);
            if(instBridgeParameter0 != null && (!checkSameComponent || !isComponentSame(modelElement, instBridgeParameter0))){
                externalMEList.add(instBridgeParameter0);
            }
            // Bridge Parameter ->R49
           //                      ->R49 -- Dimensions  
            // Bridge Parameter ->R831
           //                      ->R831 -- Parameter Value <<DEFINITE EXTERNAL LINK>>
            // Bridge Parameter ->R1014
           //                      ->R1014 -- Bridge Argument  
            // Bridge Parameter ->R21
           //                      ->R21 -- Bridge  
            // Bridge Parameter ->R22
           //                      ->R22 -- Data Type  
            // Bridge Parameter ->R55
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR49((BridgeParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParameterValue_c.getOneV_PVLOnR831((BridgeParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = BridgeArgument_c.getOneMSG_BAOnR1014((BridgeParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = BridgeParameter_c.getOneS_BPARMOnR55Precedes((BridgeParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntityEventDataItem_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R13List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityEventData_c.getManyS_EEEDTsOnR13((ExternalEntityEventDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R13List.add(externalMEs[i]);
            }
            map.put("R13", R13List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ExternalEntityEventData_c.getManyS_EEEDTsOnR13((ExternalEntityEventDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // External Entity Event Data Item ->R12
           //                      ->R12 -- External Entity  
            // External Entity Event Data Item ->R16
           //                      ->R16 -- Data Type  
            // External Entity Event Data Item ->R13
           //                      ->R13 -- External Entity Event Data  
           //                      ->R13 -- External Entity Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ExternalEntityEventData_c.getOneS_EEEDTOnR13((ExternalEntityEventDataItem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntityEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R708List = new ArrayList<NonRootModelElement>();
            externalMEs = CreateEventToExternalEntity_c.getManyE_CEEsOnR708((ExternalEntityEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R708List.add(externalMEs[i]);
            }
            map.put("R708", R708List);
            List<NonRootModelElement> R709List = new ArrayList<NonRootModelElement>();
            externalMEs = GenerateToExternalEntity_c.getManyE_GEEsOnR709((ExternalEntityEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R709List.add(externalMEs[i]);
            }
            map.put("R709", R709List);
            List<NonRootModelElement> R13List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityEventData_c.getManyS_EEEDTsOnR13((ExternalEntityEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R13List.add(externalMEs[i]);
            }
            map.put("R13", R13List);
            List<NonRootModelElement> R413List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeEventComm_c.getManyCA_SMEEEsOnR413((ExternalEntityEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R413List.add(externalMEs[i]);
            }
            map.put("R413", R413List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = CreateEventToExternalEntity_c.getManyE_CEEsOnR708((ExternalEntityEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = GenerateToExternalEntity_c.getManyE_GEEsOnR709((ExternalEntityEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ExternalEntityEventData_c.getManyS_EEEDTsOnR13((ExternalEntityEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SmToEeEventComm_c.getManyCA_SMEEEsOnR413((ExternalEntityEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // External Entity Event ->R708
           //                      ->R708 -- Create Event to External Entity <<DEFINITE EXTERNAL LINK>>
            // External Entity Event ->R709
           //                      ->R709 -- Generate to External Entity <<DEFINITE EXTERNAL LINK>>
            // External Entity Event ->R10
           //                      ->R10 -- External Entity  
            // External Entity Event ->R13
           //                      ->R13 -- External Entity Event Data  
           //                      ->R13 -- External Entity Event Data Item  
            // External Entity Event ->R413
           //                      ->R413 -- SM to EE Event Comm <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = CreateEventToExternalEntity_c.getOneE_CEEOnR708((ExternalEntityEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = GenerateToExternalEntity_c.getOneE_GEEOnR709((ExternalEntityEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ExternalEntityEventData_c.getOneS_EEEDTOnR13((ExternalEntityEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SmToEeEventComm_c.getOneCA_SMEEEOnR413((ExternalEntityEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntityEventData_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // External Entity Event Data ->R13
           //                      ->R13 -- External Entity Event Data Item  
           //                      ->R13 -- External Entity Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ExternalEntityDataItem_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R423List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeDataItemAccess_c.getManyCA_SMEEDsOnR423((ExternalEntityDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R423List.add(externalMEs[i]);
            }
            map.put("R423", R423List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToEeDataItemAccess_c.getManyCA_SMEEDsOnR423((ExternalEntityDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // External Entity Data Item ->R15
           //                      ->R15 -- Data Type  
            // External Entity Data Item ->R11
           //                      ->R11 -- External Entity  
            // External Entity Data Item ->R423
           //                      ->R423 -- SM to EE Data Item Access <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToEeDataItemAccess_c.getOneCA_SMEEDOnR423((ExternalEntityDataItem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class FunctionPackageInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R32List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionPackage_c.getManyS_FPKsOnR32((FunctionPackageInPackage_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R32List.add(externalMEs[i]);
            }
            map.put("R32", R32List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = FunctionPackage_c.getManyS_FPKsOnR32((FunctionPackageInPackage_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Function Package in Package ->R32
           //                      ->R32 -- Function Package  
            // Function Package in Package ->R30
           //                      ->R30 -- Function Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = FunctionPackage_c.getOneS_FPKOnR32((FunctionPackageInPackage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class FunctionInPackage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Function in Package ->R31
           //                      ->R31 -- Function Package  
           //                      ->R31 -- Function  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FunctionParameter_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R52List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR52((FunctionParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R52List.add(externalMEs[i]);
            }
            map.put("R52", R52List);
            List<NonRootModelElement> R832List = new ArrayList<NonRootModelElement>();
            externalMEs = ParameterValue_c.getManyV_PVLsOnR832((FunctionParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R832List.add(externalMEs[i]);
            }
            map.put("R832", R832List);
            List<NonRootModelElement> R1016List = new ArrayList<NonRootModelElement>();
            externalMEs = FunctionArgument_c.getManyMSG_FAsOnR1016((FunctionParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1016List.add(externalMEs[i]);
            }
            map.put("R1016", R1016List);
            FunctionParameter_c instFunctionParameter0 = FunctionParameter_c.getOneS_SPARMOnR54Precedes((FunctionParameter_c)element, true);
            if(instFunctionParameter0 != null){
            	List<NonRootModelElement> R54List = new ArrayList<NonRootModelElement>();
            	R54List.add(instFunctionParameter0);
                map.put("R54", R54List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR52((FunctionParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ParameterValue_c.getManyV_PVLsOnR832((FunctionParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = FunctionArgument_c.getManyMSG_FAsOnR1016((FunctionParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            FunctionParameter_c instFunctionParameter0 = FunctionParameter_c.getOneS_SPARMOnR54Precedes((FunctionParameter_c)modelElement, loadComponent);
            if(instFunctionParameter0 != null && (!checkSameComponent || !isComponentSame(modelElement, instFunctionParameter0))){
                externalMEList.add(instFunctionParameter0);
            }
            // Function Parameter ->R52
           //                      ->R52 -- Dimensions  
            // Function Parameter ->R832
           //                      ->R832 -- Parameter Value <<DEFINITE EXTERNAL LINK>>
            // Function Parameter ->R1016
           //                      ->R1016 -- Function Argument  
            // Function Parameter ->R24
           //                      ->R24 -- Function  
            // Function Parameter ->R26
           //                      ->R26 -- Data Type  
            // Function Parameter ->R54
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR52((FunctionParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParameterValue_c.getOneV_PVLOnR832((FunctionParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = FunctionArgument_c.getOneMSG_FAOnR1016((FunctionParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionParameter_c.getOneS_SPARMOnR54Precedes((FunctionParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ActionNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ActivityDiagramAction_c instActivityDiagramAction0 = ActivityDiagramAction_c.getOneA_GAOnR1107((ActionNode_c)element, true);
            if(instActivityDiagramAction0 != null){
            	List<NonRootModelElement> R1107List = new ArrayList<NonRootModelElement>();
            	R1107List.add(instActivityDiagramAction0);
                map.put("R1107", R1107List);
            }
            AcceptEvent_c instAcceptEvent1 = AcceptEvent_c.getOneA_AEOnR1107((ActionNode_c)element, true);
            if(instAcceptEvent1 != null){
            	List<NonRootModelElement> R1107List = new ArrayList<NonRootModelElement>();
            	R1107List.add(instAcceptEvent1);
                map.put("R1107", R1107List);
            }
            SendSignal_c instSendSignal2 = SendSignal_c.getOneA_SSOnR1107((ActionNode_c)element, true);
            if(instSendSignal2 != null){
            	List<NonRootModelElement> R1107List = new ArrayList<NonRootModelElement>();
            	R1107List.add(instSendSignal2);
                map.put("R1107", R1107List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ActivityDiagramAction_c instActivityDiagramAction0 = ActivityDiagramAction_c.getOneA_GAOnR1107((ActionNode_c)modelElement, loadComponent);
            if(instActivityDiagramAction0 != null && (!checkSameComponent || !isComponentSame(modelElement, instActivityDiagramAction0))){
                externalMEList.add(instActivityDiagramAction0);
            }
            AcceptEvent_c instAcceptEvent1 = AcceptEvent_c.getOneA_AEOnR1107((ActionNode_c)modelElement, loadComponent);
            if(instAcceptEvent1 != null && (!checkSameComponent || !isComponentSame(modelElement, instAcceptEvent1))){
                externalMEList.add(instAcceptEvent1);
            }
            SendSignal_c instSendSignal2 = SendSignal_c.getOneA_SSOnR1107((ActionNode_c)modelElement, loadComponent);
            if(instSendSignal2 != null && (!checkSameComponent || !isComponentSame(modelElement, instSendSignal2))){
                externalMEList.add(instSendSignal2);
            }
            // Action Node ->R1105
           //                      ->R1105 -- Object Node  
           //                      ->R1105 -- Control Node  
           //                      ->R1105 -- Activity Node  
            // Action Node ->R1107
           //                      ->R1107 -- Activity Diagram Action  
           //                      ->R1107 -- Accept Event  
           //                      ->R1107 -- Send Signal  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ActivityDiagramAction_c.getOneA_GAOnR1107((ActionNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AcceptEvent_c.getOneA_AEOnR1107((ActionNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SendSignal_c.getOneA_SSOnR1107((ActionNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ActivityDiagramAction_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Activity Diagram Action ->R1107
           //                      ->R1107 -- Accept Event  
           //                      ->R1107 -- Send Signal  
           //                      ->R1107 -- Action Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class AcceptEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            AcceptEventAction_c instAcceptEventAction0 = AcceptEventAction_c.getOneA_AEAOnR1112((AcceptEvent_c)element, true);
            if(instAcceptEventAction0 != null){
            	List<NonRootModelElement> R1112List = new ArrayList<NonRootModelElement>();
            	R1112List.add(instAcceptEventAction0);
                map.put("R1112", R1112List);
            }
            AcceptTimeEventAction_c instAcceptTimeEventAction1 = AcceptTimeEventAction_c.getOneA_ATEOnR1112((AcceptEvent_c)element, true);
            if(instAcceptTimeEventAction1 != null){
            	List<NonRootModelElement> R1112List = new ArrayList<NonRootModelElement>();
            	R1112List.add(instAcceptTimeEventAction1);
                map.put("R1112", R1112List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            AcceptEventAction_c instAcceptEventAction0 = AcceptEventAction_c.getOneA_AEAOnR1112((AcceptEvent_c)modelElement, loadComponent);
            if(instAcceptEventAction0 != null && (!checkSameComponent || !isComponentSame(modelElement, instAcceptEventAction0))){
                externalMEList.add(instAcceptEventAction0);
            }
            AcceptTimeEventAction_c instAcceptTimeEventAction1 = AcceptTimeEventAction_c.getOneA_ATEOnR1112((AcceptEvent_c)modelElement, loadComponent);
            if(instAcceptTimeEventAction1 != null && (!checkSameComponent || !isComponentSame(modelElement, instAcceptTimeEventAction1))){
                externalMEList.add(instAcceptTimeEventAction1);
            }
            // Accept Event ->R1107
           //                      ->R1107 -- Activity Diagram Action  
           //                      ->R1107 -- Send Signal  
           //                      ->R1107 -- Action Node  
            // Accept Event ->R1112
           //                      ->R1112 -- Accept Event Action  
           //                      ->R1112 -- Accept Time Event Action  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AcceptEventAction_c.getOneA_AEAOnR1112((AcceptEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AcceptTimeEventAction_c.getOneA_ATEOnR1112((AcceptEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class AcceptEventAction_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Accept Event Action ->R1112
           //                      ->R1112 -- Accept Time Event Action  
           //                      ->R1112 -- Accept Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class AcceptTimeEventAction_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Accept Time Event Action ->R1112
           //                      ->R1112 -- Accept Event Action  
           //                      ->R1112 -- Accept Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SendSignal_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Send Signal ->R1107
           //                      ->R1107 -- Activity Diagram Action  
           //                      ->R1107 -- Accept Event  
           //                      ->R1107 -- Action Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ObjectNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Object Node ->R1105
           //                      ->R1105 -- Action Node  
           //                      ->R1105 -- Control Node  
           //                      ->R1105 -- Activity Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ControlNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            InitialNode_c instInitialNode0 = InitialNode_c.getOneA_INIOnR1106((ControlNode_c)element, true);
            if(instInitialNode0 != null){
            	List<NonRootModelElement> R1106List = new ArrayList<NonRootModelElement>();
            	R1106List.add(instInitialNode0);
                map.put("R1106", R1106List);
            }
            ActivityFinalNode_c instActivityFinalNode1 = ActivityFinalNode_c.getOneA_AFOnR1106((ControlNode_c)element, true);
            if(instActivityFinalNode1 != null){
            	List<NonRootModelElement> R1106List = new ArrayList<NonRootModelElement>();
            	R1106List.add(instActivityFinalNode1);
                map.put("R1106", R1106List);
            }
            FlowFinalNode_c instFlowFinalNode2 = FlowFinalNode_c.getOneA_FFOnR1106((ControlNode_c)element, true);
            if(instFlowFinalNode2 != null){
            	List<NonRootModelElement> R1106List = new ArrayList<NonRootModelElement>();
            	R1106List.add(instFlowFinalNode2);
                map.put("R1106", R1106List);
            }
            DecisionMergeNode_c instDecisionMergeNode3 = DecisionMergeNode_c.getOneA_DMOnR1106((ControlNode_c)element, true);
            if(instDecisionMergeNode3 != null){
            	List<NonRootModelElement> R1106List = new ArrayList<NonRootModelElement>();
            	R1106List.add(instDecisionMergeNode3);
                map.put("R1106", R1106List);
            }
            ForkJoinNode_c instForkJoinNode4 = ForkJoinNode_c.getOneA_FJOnR1106((ControlNode_c)element, true);
            if(instForkJoinNode4 != null){
            	List<NonRootModelElement> R1106List = new ArrayList<NonRootModelElement>();
            	R1106List.add(instForkJoinNode4);
                map.put("R1106", R1106List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            InitialNode_c instInitialNode0 = InitialNode_c.getOneA_INIOnR1106((ControlNode_c)modelElement, loadComponent);
            if(instInitialNode0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInitialNode0))){
                externalMEList.add(instInitialNode0);
            }
            ActivityFinalNode_c instActivityFinalNode1 = ActivityFinalNode_c.getOneA_AFOnR1106((ControlNode_c)modelElement, loadComponent);
            if(instActivityFinalNode1 != null && (!checkSameComponent || !isComponentSame(modelElement, instActivityFinalNode1))){
                externalMEList.add(instActivityFinalNode1);
            }
            FlowFinalNode_c instFlowFinalNode2 = FlowFinalNode_c.getOneA_FFOnR1106((ControlNode_c)modelElement, loadComponent);
            if(instFlowFinalNode2 != null && (!checkSameComponent || !isComponentSame(modelElement, instFlowFinalNode2))){
                externalMEList.add(instFlowFinalNode2);
            }
            DecisionMergeNode_c instDecisionMergeNode3 = DecisionMergeNode_c.getOneA_DMOnR1106((ControlNode_c)modelElement, loadComponent);
            if(instDecisionMergeNode3 != null && (!checkSameComponent || !isComponentSame(modelElement, instDecisionMergeNode3))){
                externalMEList.add(instDecisionMergeNode3);
            }
            ForkJoinNode_c instForkJoinNode4 = ForkJoinNode_c.getOneA_FJOnR1106((ControlNode_c)modelElement, loadComponent);
            if(instForkJoinNode4 != null && (!checkSameComponent || !isComponentSame(modelElement, instForkJoinNode4))){
                externalMEList.add(instForkJoinNode4);
            }
            // Control Node ->R1105
           //                      ->R1105 -- Action Node  
           //                      ->R1105 -- Object Node  
           //                      ->R1105 -- Activity Node  
            // Control Node ->R1106
           //                      ->R1106 -- Initial Node  
           //                      ->R1106 -- Activity Final Node  
           //                      ->R1106 -- Flow Final Node  
           //                      ->R1106 -- Decision Merge Node  
           //                      ->R1106 -- Fork Join Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InitialNode_c.getOneA_INIOnR1106((ControlNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ActivityFinalNode_c.getOneA_AFOnR1106((ControlNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FlowFinalNode_c.getOneA_FFOnR1106((ControlNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DecisionMergeNode_c.getOneA_DMOnR1106((ControlNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ForkJoinNode_c.getOneA_FJOnR1106((ControlNode_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InitialNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Initial Node ->R1106
           //                      ->R1106 -- Activity Final Node  
           //                      ->R1106 -- Flow Final Node  
           //                      ->R1106 -- Decision Merge Node  
           //                      ->R1106 -- Fork Join Node  
           //                      ->R1106 -- Control Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ActivityFinalNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Activity Final Node ->R1106
           //                      ->R1106 -- Initial Node  
           //                      ->R1106 -- Flow Final Node  
           //                      ->R1106 -- Decision Merge Node  
           //                      ->R1106 -- Fork Join Node  
           //                      ->R1106 -- Control Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FlowFinalNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Flow Final Node ->R1106
           //                      ->R1106 -- Initial Node  
           //                      ->R1106 -- Activity Final Node  
           //                      ->R1106 -- Decision Merge Node  
           //                      ->R1106 -- Fork Join Node  
           //                      ->R1106 -- Control Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class DecisionMergeNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Decision Merge Node ->R1106
           //                      ->R1106 -- Initial Node  
           //                      ->R1106 -- Activity Final Node  
           //                      ->R1106 -- Flow Final Node  
           //                      ->R1106 -- Fork Join Node  
           //                      ->R1106 -- Control Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ForkJoinNode_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Fork Join Node ->R1106
           //                      ->R1106 -- Initial Node  
           //                      ->R1106 -- Activity Final Node  
           //                      ->R1106 -- Flow Final Node  
           //                      ->R1106 -- Decision Merge Node  
           //                      ->R1106 -- Control Node  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ActivityInActivity_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1110List = new ArrayList<NonRootModelElement>();
            externalMEs = Activity_c.getManyA_AsOnR1110((ActivityInActivity_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1110List.add(externalMEs[i]);
            }
            map.put("R1110", R1110List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Activity_c.getManyA_AsOnR1110((ActivityInActivity_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Activity In Activity ->R1110
           //                      ->R1110 -- Activity  
            // Activity In Activity ->R1109
           //                      ->R1109 -- Activity  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Activity_c.getOneA_AOnR1110((ActivityInActivity_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Subsystem_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R43List = new ArrayList<NonRootModelElement>();
            externalMEs = SubsystemInDomain_c.getManyS_SIDsOnR43((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R43List.add(externalMEs[i]);
            }
            map.put("R43", R43List);
            List<NonRootModelElement> R914List = new ArrayList<NonRootModelElement>();
            externalMEs = Sequence_c.getManySQ_SsOnR914((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R914List.add(externalMEs[i]);
            }
            map.put("R914", R914List);
            List<NonRootModelElement> R1131List = new ArrayList<NonRootModelElement>();
            externalMEs = Communication_c.getManyCOMM_COMMsOnR1131((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1131List.add(externalMEs[i]);
            }
            map.put("R1131", R1131List);
            List<NonRootModelElement> R1202List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1202((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1202List.add(externalMEs[i]);
            }
            map.put("R1202", R1202List);
            List<NonRootModelElement> R1108List = new ArrayList<NonRootModelElement>();
            externalMEs = Activity_c.getManyA_AsOnR1108((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1108List.add(externalMEs[i]);
            }
            map.put("R1108", R1108List);
            List<NonRootModelElement> R2List = new ArrayList<NonRootModelElement>();
            externalMEs = ModelClass_c.getManyO_OBJsOnR2((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2List.add(externalMEs[i]);
            }
            map.put("R2", R2List);
            List<NonRootModelElement> R4List = new ArrayList<NonRootModelElement>();
            externalMEs = Association_c.getManyR_RELsOnR4((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R4List.add(externalMEs[i]);
            }
            map.put("R4", R4List);
            List<NonRootModelElement> R3List = new ArrayList<NonRootModelElement>();
            externalMEs = ImportedClass_c.getManyO_IOBJsOnR3((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R3List.add(externalMEs[i]);
            }
            map.put("R3", R3List);
            List<NonRootModelElement> R7List = new ArrayList<NonRootModelElement>();
            externalMEs = ExternalEntityInModel_c.getManyS_EEMsOnR7((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R7List.add(externalMEs[i]);
            }
            map.put("R7", R7List);
            List<NonRootModelElement> R5List = new ArrayList<NonRootModelElement>();
            externalMEs = CommunicationPath_c.getManyCA_COMMsOnR5((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R5List.add(externalMEs[i]);
            }
            map.put("R5", R5List);
            List<NonRootModelElement> R6List = new ArrayList<NonRootModelElement>();
            externalMEs = AccessPath_c.getManyCA_ACCsOnR6((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R6List.add(externalMEs[i]);
            }
            map.put("R6", R6List);
            SubsystemInSubsystem_c instSubsystemInSubsystem0 = SubsystemInSubsystem_c.getOneS_SISOnR42((Subsystem_c)element, true);
            if(instSubsystemInSubsystem0 != null){
            	List<NonRootModelElement> R42List = new ArrayList<NonRootModelElement>();
            	R42List.add(instSubsystemInSubsystem0);
                map.put("R42", R42List);
            }
            List<NonRootModelElement> R41List = new ArrayList<NonRootModelElement>();
            externalMEs = SubsystemInSubsystem_c.getManyS_SISsOnR41((Subsystem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R41List.add(externalMEs[i]);
            }
            map.put("R41", R41List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SubsystemInDomain_c.getManyS_SIDsOnR43((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Sequence_c.getManySQ_SsOnR914((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Communication_c.getManyCOMM_COMMsOnR1131((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1202((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Activity_c.getManyA_AsOnR1108((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = ModelClass_c.getManyO_OBJsOnR2((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = Association_c.getManyR_RELsOnR4((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ImportedClass_c.getManyO_IOBJsOnR3((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ExternalEntityInModel_c.getManyS_EEMsOnR7((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = CommunicationPath_c.getManyCA_COMMsOnR5((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = AccessPath_c.getManyCA_ACCsOnR6((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            SubsystemInSubsystem_c instSubsystemInSubsystem0 = SubsystemInSubsystem_c.getOneS_SISOnR42((Subsystem_c)modelElement, loadComponent);
            if(instSubsystemInSubsystem0 != null && (!checkSameComponent || !isComponentSame(modelElement, instSubsystemInSubsystem0))){
                externalMEList.add(instSubsystemInSubsystem0);
            }

            externalMEs = SubsystemInSubsystem_c.getManyS_SISsOnR41((Subsystem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Subsystem ->R43
           //                      ->R43 -- Subsystem in Domain  
           //                      ->R43 -- Domain <<DEFINITE EXTERNAL LINK>>
            // Subsystem ->R914
           //                      ->R914 -- Sequence <<DEFINITE EXTERNAL LINK>>
            // Subsystem ->R1131
           //                      ->R1131 -- Communication <<DEFINITE EXTERNAL LINK>>
            // Subsystem ->R1202
           //                      ->R1202 -- Use Case Diagram <<DEFINITE EXTERNAL LINK>>
            // Subsystem ->R1108
           //                      ->R1108 -- Activity <<DEFINITE EXTERNAL LINK>>
            // Subsystem ->R2
           //                      ->R2 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // Subsystem ->R4
           //                      ->R4 -- Association  
            // Subsystem ->R3
           //                      ->R3 -- Imported Class  
            // Subsystem ->R1
           //                      ->R1 -- Domain <<Legacy Containment>>
            // Subsystem ->R7
           //                      ->R7 -- External Entity in Model  
            // Subsystem ->R5
           //                      ->R5 -- Communication Path  
            // Subsystem ->R6
           //                      ->R6 -- Access Path  
            // Subsystem ->R42
           //                      ->R42 -- Subsystem in Subsystem  
            // Subsystem ->R41
           //                      ->R41 -- Subsystem in Subsystem  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SubsystemInDomain_c.getOneS_SIDOnR43((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Sequence_c.getOneSQ_SOnR914((Subsystem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Communication_c.getOneCOMM_COMMOnR1131((Subsystem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1202((Subsystem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Activity_c.getOneA_AOnR1108((Subsystem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ModelClass_c.getOneO_OBJOnR2((Subsystem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Association_c.getOneR_RELOnR4((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ImportedClass_c.getOneO_IOBJOnR3((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExternalEntityInModel_c.getOneS_EEMOnR7((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = CommunicationPath_c.getOneCA_COMMOnR5((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AccessPath_c.getOneCA_ACCOnR6((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SubsystemInSubsystem_c.getOneS_SISOnR42((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SubsystemInSubsystem_c.getOneS_SISOnR41((Subsystem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ExternalEntityInModel_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R421List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeAccessPath_c.getManyCA_SMEEAsOnR421((ExternalEntityInModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R421List.add(externalMEs[i]);
            }
            map.put("R421", R421List);
            List<NonRootModelElement> R402List = new ArrayList<NonRootModelElement>();
            externalMEs = EeToSmCommPath_c.getManyCA_EESMCsOnR402((ExternalEntityInModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R402List.add(externalMEs[i]);
            }
            map.put("R402", R402List);
            List<NonRootModelElement> R411List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeCommPath_c.getManyCA_SMEECsOnR411((ExternalEntityInModel_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R411List.add(externalMEs[i]);
            }
            map.put("R411", R411List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToEeAccessPath_c.getManyCA_SMEEAsOnR421((ExternalEntityInModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = EeToSmCommPath_c.getManyCA_EESMCsOnR402((ExternalEntityInModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = SmToEeCommPath_c.getManyCA_SMEECsOnR411((ExternalEntityInModel_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // External Entity in Model ->R7
           //                      ->R7 -- Subsystem  
            // External Entity in Model ->R9
           //                      ->R9 -- External Entity <<DEFINITE EXTERNAL LINK>>
            // External Entity in Model ->R421
           //                      ->R421 -- SM to EE Access Path  
            // External Entity in Model ->R402
           //                      ->R402 -- EE to SM Comm Path  
            // External Entity in Model ->R411
           //                      ->R411 -- SM to EE Comm Path  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToEeAccessPath_c.getOneCA_SMEEAOnR421((ExternalEntityInModel_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EeToSmCommPath_c.getOneCA_EESMCOnR402((ExternalEntityInModel_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SmToEeCommPath_c.getOneCA_SMEECOnR411((ExternalEntityInModel_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class CommunicationPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            EeToSmCommPath_c instEeToSmCommPath0 = EeToSmCommPath_c.getOneCA_EESMCOnR401((CommunicationPath_c)element, true);
            if(instEeToSmCommPath0 != null){
            	List<NonRootModelElement> R401List = new ArrayList<NonRootModelElement>();
            	R401List.add(instEeToSmCommPath0);
                map.put("R401", R401List);
            }
            SmToSmCommPath_c instSmToSmCommPath1 = SmToSmCommPath_c.getOneCA_SMSMCOnR401((CommunicationPath_c)element, true);
            if(instSmToSmCommPath1 != null){
            	List<NonRootModelElement> R401List = new ArrayList<NonRootModelElement>();
            	R401List.add(instSmToSmCommPath1);
                map.put("R401", R401List);
            }
            SmToEeCommPath_c instSmToEeCommPath2 = SmToEeCommPath_c.getOneCA_SMEECOnR401((CommunicationPath_c)element, true);
            if(instSmToEeCommPath2 != null){
            	List<NonRootModelElement> R401List = new ArrayList<NonRootModelElement>();
            	R401List.add(instSmToEeCommPath2);
                map.put("R401", R401List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            EeToSmCommPath_c instEeToSmCommPath0 = EeToSmCommPath_c.getOneCA_EESMCOnR401((CommunicationPath_c)modelElement, loadComponent);
            if(instEeToSmCommPath0 != null && (!checkSameComponent || !isComponentSame(modelElement, instEeToSmCommPath0))){
                externalMEList.add(instEeToSmCommPath0);
            }
            SmToSmCommPath_c instSmToSmCommPath1 = SmToSmCommPath_c.getOneCA_SMSMCOnR401((CommunicationPath_c)modelElement, loadComponent);
            if(instSmToSmCommPath1 != null && (!checkSameComponent || !isComponentSame(modelElement, instSmToSmCommPath1))){
                externalMEList.add(instSmToSmCommPath1);
            }
            SmToEeCommPath_c instSmToEeCommPath2 = SmToEeCommPath_c.getOneCA_SMEECOnR401((CommunicationPath_c)modelElement, loadComponent);
            if(instSmToEeCommPath2 != null && (!checkSameComponent || !isComponentSame(modelElement, instSmToEeCommPath2))){
                externalMEList.add(instSmToEeCommPath2);
            }
            // Communication Path ->R5
           //                      ->R5 -- Subsystem  
            // Communication Path ->R401
           //                      ->R401 -- EE to SM Comm Path  
           //                      ->R401 -- SM to SM Comm Path  
           //                      ->R401 -- SM to EE Comm Path  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = EeToSmCommPath_c.getOneCA_EESMCOnR401((CommunicationPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SmToSmCommPath_c.getOneCA_SMSMCOnR401((CommunicationPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SmToEeCommPath_c.getOneCA_SMEECOnR401((CommunicationPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class AccessPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            SmToObjAccessPath_c instSmToObjAccessPath0 = SmToObjAccessPath_c.getOneCA_SMOAOnR415((AccessPath_c)element, true);
            if(instSmToObjAccessPath0 != null){
            	List<NonRootModelElement> R415List = new ArrayList<NonRootModelElement>();
            	R415List.add(instSmToObjAccessPath0);
                map.put("R415", R415List);
            }
            SmToEeAccessPath_c instSmToEeAccessPath1 = SmToEeAccessPath_c.getOneCA_SMEEAOnR415((AccessPath_c)element, true);
            if(instSmToEeAccessPath1 != null){
            	List<NonRootModelElement> R415List = new ArrayList<NonRootModelElement>();
            	R415List.add(instSmToEeAccessPath1);
                map.put("R415", R415List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            SmToObjAccessPath_c instSmToObjAccessPath0 = SmToObjAccessPath_c.getOneCA_SMOAOnR415((AccessPath_c)modelElement, loadComponent);
            if(instSmToObjAccessPath0 != null && (!checkSameComponent || !isComponentSame(modelElement, instSmToObjAccessPath0))){
                externalMEList.add(instSmToObjAccessPath0);
            }
            SmToEeAccessPath_c instSmToEeAccessPath1 = SmToEeAccessPath_c.getOneCA_SMEEAOnR415((AccessPath_c)modelElement, loadComponent);
            if(instSmToEeAccessPath1 != null && (!checkSameComponent || !isComponentSame(modelElement, instSmToEeAccessPath1))){
                externalMEList.add(instSmToEeAccessPath1);
            }
            // Access Path ->R6
           //                      ->R6 -- Subsystem  
            // Access Path ->R415
           //                      ->R415 -- SM to OBJ Access Path  
           //                      ->R415 -- SM to EE Access Path  
            // Access Path ->R425
           //                      ->R425 -- Imported Class  
            // Access Path ->R416
           //                      ->R416 -- State Machine <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToObjAccessPath_c.getOneCA_SMOAOnR415((AccessPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SmToEeAccessPath_c.getOneCA_SMEEAOnR415((AccessPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SubsystemInSubsystem_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Subsystem in Subsystem ->R42
           //                      ->R42 -- Subsystem  
            // Subsystem in Subsystem ->R41
           //                      ->R41 -- Subsystem  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Operation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R122List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR122((Operation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R122List.add(externalMEs[i]);
            }
            map.put("R122", R122List);
            List<NonRootModelElement> R829List = new ArrayList<NonRootModelElement>();
            externalMEs = OperationValue_c.getManyV_TRVsOnR829((Operation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R829List.add(externalMEs[i]);
            }
            map.put("R829", R829List);
            List<NonRootModelElement> R117List = new ArrayList<NonRootModelElement>();
            externalMEs = OperationParameter_c.getManyO_TPARMsOnR117((Operation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R117List.add(externalMEs[i]);
            }
            map.put("R117", R117List);
            Operation_c instOperation0 = Operation_c.getOneO_TFROnR125Precedes((Operation_c)element, true);
            if(instOperation0 != null){
            	List<NonRootModelElement> R125List = new ArrayList<NonRootModelElement>();
            	R125List.add(instOperation0);
                map.put("R125", R125List);
            }
            List<NonRootModelElement> R1011List = new ArrayList<NonRootModelElement>();
            externalMEs = OperationMessage_c.getManyMSG_OsOnR1011((Operation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1011List.add(externalMEs[i]);
            }
            map.put("R1011", R1011List);
            List<NonRootModelElement> R673List = new ArrayList<NonRootModelElement>();
            externalMEs = OperationInvocation_c.getManyACT_TFMsOnR673((Operation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R673List.add(externalMEs[i]);
            }
            map.put("R673", R673List);
            OperationBody_c instOperationBody1 = OperationBody_c.getOneACT_OPBOnR696((Operation_c)element, true);
            if(instOperationBody1 != null){
            	List<NonRootModelElement> R696List = new ArrayList<NonRootModelElement>();
            	R696List.add(instOperationBody1);
                map.put("R696", R696List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR122((Operation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = OperationValue_c.getManyV_TRVsOnR829((Operation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = OperationParameter_c.getManyO_TPARMsOnR117((Operation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            Operation_c instOperation0 = Operation_c.getOneO_TFROnR125Precedes((Operation_c)modelElement, loadComponent);
            if(instOperation0 != null && (!checkSameComponent || !isComponentSame(modelElement, instOperation0))){
                externalMEList.add(instOperation0);
            }

            externalMEs = OperationMessage_c.getManyMSG_OsOnR1011((Operation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = OperationInvocation_c.getManyACT_TFMsOnR673((Operation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            OperationBody_c instOperationBody1 = OperationBody_c.getOneACT_OPBOnR696((Operation_c)modelElement, loadComponent);
            if(instOperationBody1 != null){
                externalMEList.add(instOperationBody1);
            }
            // Operation ->R122
           //                      ->R122 -- Dimensions  
            // Operation ->R829
           //                      ->R829 -- Operation Value <<DEFINITE EXTERNAL LINK>>
            // Operation ->R117
           //                      ->R117 -- Operation Parameter  
            // Operation ->R116
           //                      ->R116 -- Data Type <<DEFINITE EXTERNAL LINK>>
            // Operation ->R115
           //                      ->R115 -- Model Class  
            // Operation ->R125
            // Operation ->R1011
           //                      ->R1011 -- Operation Message <<DEFINITE EXTERNAL LINK>>
            // Operation ->R673
           //                      ->R673 -- Operation Invocation <<DEFINITE EXTERNAL LINK>>
            // Operation ->R696
           //                      ->R696 -- Operation Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR122((Operation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = OperationValue_c.getOneV_TRVOnR829((Operation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = OperationParameter_c.getOneO_TPARMOnR117((Operation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Operation_c.getOneO_TFROnR125Precedes((Operation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = OperationMessage_c.getOneMSG_OOnR1011((Operation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = OperationInvocation_c.getOneACT_TFMOnR673((Operation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = OperationBody_c.getOneACT_OPBOnR696((Operation_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class OperationParameter_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R121List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR121((OperationParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R121List.add(externalMEs[i]);
            }
            map.put("R121", R121List);
            List<NonRootModelElement> R833List = new ArrayList<NonRootModelElement>();
            externalMEs = ParameterValue_c.getManyV_PVLsOnR833((OperationParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R833List.add(externalMEs[i]);
            }
            map.put("R833", R833List);
            OperationParameter_c instOperationParameter0 = OperationParameter_c.getOneO_TPARMOnR124Precedes((OperationParameter_c)element, true);
            if(instOperationParameter0 != null){
            	List<NonRootModelElement> R124List = new ArrayList<NonRootModelElement>();
            	R124List.add(instOperationParameter0);
                map.put("R124", R124List);
            }
            List<NonRootModelElement> R1015List = new ArrayList<NonRootModelElement>();
            externalMEs = OperationArgument_c.getManyMSG_OAsOnR1015((OperationParameter_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1015List.add(externalMEs[i]);
            }
            map.put("R1015", R1015List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR121((OperationParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ParameterValue_c.getManyV_PVLsOnR833((OperationParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            OperationParameter_c instOperationParameter0 = OperationParameter_c.getOneO_TPARMOnR124Precedes((OperationParameter_c)modelElement, loadComponent);
            if(instOperationParameter0 != null && (!checkSameComponent || !isComponentSame(modelElement, instOperationParameter0))){
                externalMEList.add(instOperationParameter0);
            }

            externalMEs = OperationArgument_c.getManyMSG_OAsOnR1015((OperationParameter_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Operation Parameter ->R121
           //                      ->R121 -- Dimensions  
            // Operation Parameter ->R833
           //                      ->R833 -- Parameter Value <<DEFINITE EXTERNAL LINK>>
            // Operation Parameter ->R117
           //                      ->R117 -- Operation  
            // Operation Parameter ->R118
           //                      ->R118 -- Data Type <<DEFINITE EXTERNAL LINK>>
            // Operation Parameter ->R124
            // Operation Parameter ->R1015
           //                      ->R1015 -- Operation Argument <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR121((OperationParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ParameterValue_c.getOneV_PVLOnR833((OperationParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = OperationParameter_c.getOneO_TPARMOnR124Precedes((OperationParameter_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = OperationArgument_c.getOneMSG_OAOnR1015((OperationParameter_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Attribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R120List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR120((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R120List.add(externalMEs[i]);
            }
            map.put("R120", R120List);
            List<NonRootModelElement> R806List = new ArrayList<NonRootModelElement>();
            externalMEs = AttributeValueReference_c.getManyV_AVLsOnR806((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R806List.add(externalMEs[i]);
            }
            map.put("R806", R806List);
            List<NonRootModelElement> R812List = new ArrayList<NonRootModelElement>();
            externalMEs = SelectedReference_c.getManyV_SLRsOnR812((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R812List.add(externalMEs[i]);
            }
            map.put("R812", R812List);
            Attribute_c instAttribute0 = Attribute_c.getOneO_ATTROnR103Precedes((Attribute_c)element, true);
            if(instAttribute0 != null){
            	List<NonRootModelElement> R103List = new ArrayList<NonRootModelElement>();
            	R103List.add(instAttribute0);
                map.put("R103", R103List);
            }
            BaseAttribute_c instBaseAttribute1 = BaseAttribute_c.getOneO_BATTROnR106((Attribute_c)element, true);
            if(instBaseAttribute1 != null){
            	List<NonRootModelElement> R106List = new ArrayList<NonRootModelElement>();
            	R106List.add(instBaseAttribute1);
                map.put("R106", R106List);
            }
            ReferentialAttribute_c instReferentialAttribute2 = ReferentialAttribute_c.getOneO_RATTROnR106((Attribute_c)element, true);
            if(instReferentialAttribute2 != null){
            	List<NonRootModelElement> R106List = new ArrayList<NonRootModelElement>();
            	R106List.add(instReferentialAttribute2);
                map.put("R106", R106List);
            }
            List<NonRootModelElement> R105List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R105List.add(externalMEs[i]);
            }
            map.put("R105", R105List);
            List<NonRootModelElement> R938List = new ArrayList<NonRootModelElement>();
            externalMEs = InstanceAttributeValue_c.getManySQ_AVsOnR938((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R938List.add(externalMEs[i]);
            }
            map.put("R938", R938List);
            List<NonRootModelElement> R2910List = new ArrayList<NonRootModelElement>();
            externalMEs = AttributeValue_c.getManyI_AVLsOnR2910((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2910List.add(externalMEs[i]);
            }
            map.put("R2910", R2910List);
            List<NonRootModelElement> R419List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToObjAttributeAccess_c.getManyCA_SMOAAsOnR419((Attribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R419List.add(externalMEs[i]);
            }
            map.put("R419", R419List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR120((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = AttributeValueReference_c.getManyV_AVLsOnR806((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SelectedReference_c.getManyV_SLRsOnR812((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            Attribute_c instAttribute0 = Attribute_c.getOneO_ATTROnR103Precedes((Attribute_c)modelElement, loadComponent);
            if(instAttribute0 != null && (!checkSameComponent || !isComponentSame(modelElement, instAttribute0))){
                externalMEList.add(instAttribute0);
            }

            BaseAttribute_c instBaseAttribute1 = BaseAttribute_c.getOneO_BATTROnR106((Attribute_c)modelElement, loadComponent);
            if(instBaseAttribute1 != null && (!checkSameComponent || !isComponentSame(modelElement, instBaseAttribute1))){
                externalMEList.add(instBaseAttribute1);
            }
            ReferentialAttribute_c instReferentialAttribute2 = ReferentialAttribute_c.getOneO_RATTROnR106((Attribute_c)modelElement, loadComponent);
            if(instReferentialAttribute2 != null && (!checkSameComponent || !isComponentSame(modelElement, instReferentialAttribute2))){
                externalMEList.add(instReferentialAttribute2);
            }

            externalMEs = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = InstanceAttributeValue_c.getManySQ_AVsOnR938((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = AttributeValue_c.getManyI_AVLsOnR2910((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToObjAttributeAccess_c.getManyCA_SMOAAsOnR419((Attribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Attribute ->R120
           //                      ->R120 -- Dimensions  
            // Attribute ->R806
           //                      ->R806 -- Attribute Value Reference <<DEFINITE EXTERNAL LINK>>
            // Attribute ->R812
           //                      ->R812 -- Selected Reference <<DEFINITE EXTERNAL LINK>>
            // Attribute ->R102
           //                      ->R102 -- Model Class  
            // Attribute ->R103
            // Attribute ->R114
           //                      ->R114 -- Data Type <<DEFINITE EXTERNAL LINK>>
            // Attribute ->R106
           //                      ->R106 -- Base Attribute  
           //                      ->R106 -- Referential Attribute  
            // Attribute ->R105
           //                      ->R105 -- Class Identifier Attribute  
           //                      ->R105 -- Class Identifier  
            // Attribute ->R938
           //                      ->R938 -- Instance Attribute Value <<DEFINITE EXTERNAL LINK>>
            // Attribute ->R2910
           //                      ->R2910 -- Attribute Value <<DEFINITE EXTERNAL LINK>>
            // Attribute ->R419
           //                      ->R419 -- SM to OBJ Attribute Access <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR120((Attribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = AttributeValueReference_c.getOneV_AVLOnR806((Attribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SelectedReference_c.getOneV_SLROnR812((Attribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = Attribute_c.getOneO_ATTROnR103Precedes((Attribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = BaseAttribute_c.getOneO_BATTROnR106((Attribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ReferentialAttribute_c.getOneO_RATTROnR106((Attribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassIdentifierAttribute_c.getOneO_OIDAOnR105((Attribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InstanceAttributeValue_c.getOneSQ_AVOnR938((Attribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = AttributeValue_c.getOneI_AVLOnR2910((Attribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToObjAttributeAccess_c.getOneCA_SMOAAOnR419((Attribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class BaseAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R113List = new ArrayList<NonRootModelElement>();
            externalMEs = ReferentialAttribute_c.getManyO_RATTRsOnR113((BaseAttribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R113List.add(externalMEs[i]);
            }
            map.put("R113", R113List);
            DerivedBaseAttribute_c instDerivedBaseAttribute0 = DerivedBaseAttribute_c.getOneO_DBATTROnR107((BaseAttribute_c)element, true);
            if(instDerivedBaseAttribute0 != null){
            	List<NonRootModelElement> R107List = new ArrayList<NonRootModelElement>();
            	R107List.add(instDerivedBaseAttribute0);
                map.put("R107", R107List);
            }
            NewBaseAttribute_c instNewBaseAttribute1 = NewBaseAttribute_c.getOneO_NBATTROnR107((BaseAttribute_c)element, true);
            if(instNewBaseAttribute1 != null){
            	List<NonRootModelElement> R107List = new ArrayList<NonRootModelElement>();
            	R107List.add(instNewBaseAttribute1);
                map.put("R107", R107List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ReferentialAttribute_c.getManyO_RATTRsOnR113((BaseAttribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            DerivedBaseAttribute_c instDerivedBaseAttribute0 = DerivedBaseAttribute_c.getOneO_DBATTROnR107((BaseAttribute_c)modelElement, loadComponent);
            if(instDerivedBaseAttribute0 != null && (!checkSameComponent || !isComponentSame(modelElement, instDerivedBaseAttribute0))){
                externalMEList.add(instDerivedBaseAttribute0);
            }
            NewBaseAttribute_c instNewBaseAttribute1 = NewBaseAttribute_c.getOneO_NBATTROnR107((BaseAttribute_c)modelElement, loadComponent);
            if(instNewBaseAttribute1 != null && (!checkSameComponent || !isComponentSame(modelElement, instNewBaseAttribute1))){
                externalMEList.add(instNewBaseAttribute1);
            }
            // Base Attribute ->R106
           //                      ->R106 -- Referential Attribute  
           //                      ->R106 -- Attribute  
            // Base Attribute ->R113
           //                      ->R113 -- Referential Attribute  
            // Base Attribute ->R107
           //                      ->R107 -- Derived Base Attribute  
           //                      ->R107 -- New Base Attribute  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ReferentialAttribute_c.getOneO_RATTROnR113((BaseAttribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = DerivedBaseAttribute_c.getOneO_DBATTROnR107((BaseAttribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = NewBaseAttribute_c.getOneO_NBATTROnR107((BaseAttribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DerivedBaseAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            DerivedAttributeBody_c instDerivedAttributeBody0 = DerivedAttributeBody_c.getOneACT_DABOnR693((DerivedBaseAttribute_c)element, true);
            if(instDerivedAttributeBody0 != null){
            	List<NonRootModelElement> R693List = new ArrayList<NonRootModelElement>();
            	R693List.add(instDerivedAttributeBody0);
                map.put("R693", R693List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            DerivedAttributeBody_c instDerivedAttributeBody0 = DerivedAttributeBody_c.getOneACT_DABOnR693((DerivedBaseAttribute_c)modelElement, loadComponent);
            if(instDerivedAttributeBody0 != null){
                externalMEList.add(instDerivedAttributeBody0);
            }
            // Derived Base Attribute ->R107
           //                      ->R107 -- New Base Attribute  
           //                      ->R107 -- Base Attribute  
            // Derived Base Attribute ->R693
           //                      ->R693 -- Derived Attribute Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = DerivedAttributeBody_c.getOneACT_DABOnR693((DerivedBaseAttribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class NewBaseAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // New Base Attribute ->R107
           //                      ->R107 -- Derived Base Attribute  
           //                      ->R107 -- Base Attribute  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ReferentialAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R108List = new ArrayList<NonRootModelElement>();
            externalMEs = AttributeReferenceInClass_c.getManyO_REFsOnR108((ReferentialAttribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R108List.add(externalMEs[i]);
            }
            map.put("R108", R108List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = AttributeReferenceInClass_c.getManyO_REFsOnR108((ReferentialAttribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Referential Attribute ->R106
           //                      ->R106 -- Base Attribute  
           //                      ->R106 -- Attribute  
            // Referential Attribute ->R113
           //                      ->R113 -- Base Attribute  
            // Referential Attribute ->R108
           //                      ->R108 -- Attribute Reference in Class  
            // Referential Attribute ->R119
           //                      ->R119 -- Referential Attribute Visited Recorder <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AttributeReferenceInClass_c.getOneO_REFOnR108((ReferentialAttribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class AttributeReferenceInClass_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            AttributeReferenceInClass_c instAttributeReferenceInClass0 = AttributeReferenceInClass_c.getOneO_REFOnR112Precedes((AttributeReferenceInClass_c)element, true);
            if(instAttributeReferenceInClass0 != null){
            	List<NonRootModelElement> R112List = new ArrayList<NonRootModelElement>();
            	R112List.add(instAttributeReferenceInClass0);
                map.put("R112", R112List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            AttributeReferenceInClass_c instAttributeReferenceInClass0 = AttributeReferenceInClass_c.getOneO_REFOnR112Precedes((AttributeReferenceInClass_c)modelElement, loadComponent);
            if(instAttributeReferenceInClass0 != null && (!checkSameComponent || !isComponentSame(modelElement, instAttributeReferenceInClass0))){
                externalMEList.add(instAttributeReferenceInClass0);
            }
            // Attribute Reference in Class ->R108
           //                      ->R108 -- Referential Attribute  
            // Attribute Reference in Class ->R112
            // Attribute Reference in Class ->R111
           //                      ->R111 -- Referring Class In Assoc <<DEFINITE EXTERNAL LINK>>
           //                      ->R111 -- Referred To Identifier Attribute <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AttributeReferenceInClass_c.getOneO_REFOnR112Precedes((AttributeReferenceInClass_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ClassIdentifier_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R105List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105((ClassIdentifier_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R105List.add(externalMEs[i]);
            }
            map.put("R105", R105List);
            List<NonRootModelElement> R109List = new ArrayList<NonRootModelElement>();
            externalMEs = ReferredToClassInAssoc_c.getManyR_RTOsOnR109((ClassIdentifier_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R109List.add(externalMEs[i]);
            }
            map.put("R109", R109List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105((ClassIdentifier_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = ReferredToClassInAssoc_c.getManyR_RTOsOnR109((ClassIdentifier_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Class Identifier ->R105
           //                      ->R105 -- Class Identifier Attribute  
           //                      ->R105 -- Attribute  
            // Class Identifier ->R104
           //                      ->R104 -- Model Class  
            // Class Identifier ->R109
           //                      ->R109 -- Referred To Class in Assoc <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ClassIdentifierAttribute_c.getOneO_OIDAOnR105((ClassIdentifier_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ReferredToClassInAssoc_c.getOneR_RTOOnR109((ClassIdentifier_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ClassIdentifierAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R110List = new ArrayList<NonRootModelElement>();
            externalMEs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110((ClassIdentifierAttribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R110List.add(externalMEs[i]);
            }
            map.put("R110", R110List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110((ClassIdentifierAttribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Class Identifier Attribute ->R105
           //                      ->R105 -- Attribute  
           //                      ->R105 -- Class Identifier  
            // Class Identifier Attribute ->R110
           //                      ->R110 -- Referred To Identifier Attribute <<DEFINITE EXTERNAL LINK>>
           //                      ->R110 -- Referred To Class in Assoc <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110((ClassIdentifierAttribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InstanceStateMachine_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Instance State Machine ->R517
           //                      ->R517 -- Class State Machine <<DEFINITE EXTERNAL LINK>>
           //                      ->R517 -- State Machine  
            // Instance State Machine ->R518
           //                      ->R518 -- Model Class <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassStateMachine_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class State Machine ->R517
           //                      ->R517 -- Instance State Machine <<DEFINITE EXTERNAL LINK>>
           //                      ->R517 -- State Machine  
            // Class State Machine ->R519
           //                      ->R519 -- Model Class <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SimpleAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R207List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassAsSimpleParticipant_c.getManyR_PARTsOnR207((SimpleAssociation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R207List.add(externalMEs[i]);
            }
            map.put("R207", R207List);
            ClassAsSimpleFormalizer_c instClassAsSimpleFormalizer0 = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208((SimpleAssociation_c)element, true);
            if(instClassAsSimpleFormalizer0 != null){
            	List<NonRootModelElement> R208List = new ArrayList<NonRootModelElement>();
            	R208List.add(instClassAsSimpleFormalizer0);
                map.put("R208", R208List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ClassAsSimpleParticipant_c.getManyR_PARTsOnR207((SimpleAssociation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ClassAsSimpleFormalizer_c instClassAsSimpleFormalizer0 = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208((SimpleAssociation_c)modelElement, loadComponent);
            if(instClassAsSimpleFormalizer0 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsSimpleFormalizer0))){
                externalMEList.add(instClassAsSimpleFormalizer0);
            }
            // Simple Association ->R206
           //                      ->R206 -- Linked Association  
           //                      ->R206 -- Subtype Supertype Association  
           //                      ->R206 -- Derived Association  
           //                      ->R206 -- Association  
            // Simple Association ->R207
           //                      ->R207 -- Class As Simple Participant  
            // Simple Association ->R208
           //                      ->R208 -- Class As Simple Formalizer  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ClassAsSimpleParticipant_c.getOneR_PARTOnR207((SimpleAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208((SimpleAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class LinkedAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ClassAsAssociatedOneSide_c instClassAsAssociatedOneSide0 = ClassAsAssociatedOneSide_c.getOneR_AONEOnR209((LinkedAssociation_c)element, true);
            if(instClassAsAssociatedOneSide0 != null){
            	List<NonRootModelElement> R209List = new ArrayList<NonRootModelElement>();
            	R209List.add(instClassAsAssociatedOneSide0);
                map.put("R209", R209List);
            }
            ClassAsAssociatedOtherSide_c instClassAsAssociatedOtherSide1 = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR210((LinkedAssociation_c)element, true);
            if(instClassAsAssociatedOtherSide1 != null){
            	List<NonRootModelElement> R210List = new ArrayList<NonRootModelElement>();
            	R210List.add(instClassAsAssociatedOtherSide1);
                map.put("R210", R210List);
            }
            ClassAsLink_c instClassAsLink2 = ClassAsLink_c.getOneR_ASSROnR211((LinkedAssociation_c)element, true);
            if(instClassAsLink2 != null){
            	List<NonRootModelElement> R211List = new ArrayList<NonRootModelElement>();
            	R211List.add(instClassAsLink2);
                map.put("R211", R211List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ClassAsAssociatedOneSide_c instClassAsAssociatedOneSide0 = ClassAsAssociatedOneSide_c.getOneR_AONEOnR209((LinkedAssociation_c)modelElement, loadComponent);
            if(instClassAsAssociatedOneSide0 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsAssociatedOneSide0))){
                externalMEList.add(instClassAsAssociatedOneSide0);
            }

            ClassAsAssociatedOtherSide_c instClassAsAssociatedOtherSide1 = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR210((LinkedAssociation_c)modelElement, loadComponent);
            if(instClassAsAssociatedOtherSide1 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsAssociatedOtherSide1))){
                externalMEList.add(instClassAsAssociatedOtherSide1);
            }

            ClassAsLink_c instClassAsLink2 = ClassAsLink_c.getOneR_ASSROnR211((LinkedAssociation_c)modelElement, loadComponent);
            if(instClassAsLink2 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsLink2))){
                externalMEList.add(instClassAsLink2);
            }
            // Linked Association ->R206
           //                      ->R206 -- Simple Association  
           //                      ->R206 -- Subtype Supertype Association  
           //                      ->R206 -- Derived Association  
           //                      ->R206 -- Association  
            // Linked Association ->R209
           //                      ->R209 -- Class As Associated One Side  
            // Linked Association ->R210
           //                      ->R210 -- Class As Associated Other Side  
            // Linked Association ->R211
           //                      ->R211 -- Class As Link  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ClassAsAssociatedOneSide_c.getOneR_AONEOnR209((LinkedAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR210((LinkedAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsLink_c.getOneR_ASSROnR211((LinkedAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SubtypeSupertypeAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ClassAsSupertype_c instClassAsSupertype0 = ClassAsSupertype_c.getOneR_SUPEROnR212((SubtypeSupertypeAssociation_c)element, true);
            if(instClassAsSupertype0 != null){
            	List<NonRootModelElement> R212List = new ArrayList<NonRootModelElement>();
            	R212List.add(instClassAsSupertype0);
                map.put("R212", R212List);
            }
            List<NonRootModelElement> R213List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassAsSubtype_c.getManyR_SUBsOnR213((SubtypeSupertypeAssociation_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R213List.add(externalMEs[i]);
            }
            map.put("R213", R213List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ClassAsSupertype_c instClassAsSupertype0 = ClassAsSupertype_c.getOneR_SUPEROnR212((SubtypeSupertypeAssociation_c)modelElement, loadComponent);
            if(instClassAsSupertype0 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsSupertype0))){
                externalMEList.add(instClassAsSupertype0);
            }

            externalMEs = ClassAsSubtype_c.getManyR_SUBsOnR213((SubtypeSupertypeAssociation_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Subtype Supertype Association ->R206
           //                      ->R206 -- Simple Association  
           //                      ->R206 -- Linked Association  
           //                      ->R206 -- Derived Association  
           //                      ->R206 -- Association  
            // Subtype Supertype Association ->R212
           //                      ->R212 -- Class As Supertype  
            // Subtype Supertype Association ->R213
           //                      ->R213 -- Class As Subtype  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ClassAsSupertype_c.getOneR_SUPEROnR212((SubtypeSupertypeAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsSubtype_c.getOneR_SUBOnR213((SubtypeSupertypeAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class DerivedAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ClassAsDerivedOneSide_c instClassAsDerivedOneSide0 = ClassAsDerivedOneSide_c.getOneR_CONEOnR214((DerivedAssociation_c)element, true);
            if(instClassAsDerivedOneSide0 != null){
            	List<NonRootModelElement> R214List = new ArrayList<NonRootModelElement>();
            	R214List.add(instClassAsDerivedOneSide0);
                map.put("R214", R214List);
            }
            ClassAsDerivedOtherSide_c instClassAsDerivedOtherSide1 = ClassAsDerivedOtherSide_c.getOneR_COTHOnR215((DerivedAssociation_c)element, true);
            if(instClassAsDerivedOtherSide1 != null){
            	List<NonRootModelElement> R215List = new ArrayList<NonRootModelElement>();
            	R215List.add(instClassAsDerivedOtherSide1);
                map.put("R215", R215List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ClassAsDerivedOneSide_c instClassAsDerivedOneSide0 = ClassAsDerivedOneSide_c.getOneR_CONEOnR214((DerivedAssociation_c)modelElement, loadComponent);
            if(instClassAsDerivedOneSide0 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsDerivedOneSide0))){
                externalMEList.add(instClassAsDerivedOneSide0);
            }

            ClassAsDerivedOtherSide_c instClassAsDerivedOtherSide1 = ClassAsDerivedOtherSide_c.getOneR_COTHOnR215((DerivedAssociation_c)modelElement, loadComponent);
            if(instClassAsDerivedOtherSide1 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsDerivedOtherSide1))){
                externalMEList.add(instClassAsDerivedOtherSide1);
            }
            // Derived Association ->R206
           //                      ->R206 -- Simple Association  
           //                      ->R206 -- Linked Association  
           //                      ->R206 -- Subtype Supertype Association  
           //                      ->R206 -- Association  
            // Derived Association ->R214
           //                      ->R214 -- Class As Derived One Side  
            // Derived Association ->R215
           //                      ->R215 -- Class As Derived Other Side  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ClassAsDerivedOneSide_c.getOneR_CONEOnR214((DerivedAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsDerivedOtherSide_c.getOneR_COTHOnR215((DerivedAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ClassInAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ReferredToClassInAssoc_c instReferredToClassInAssoc0 = ReferredToClassInAssoc_c.getOneR_RTOOnR203((ClassInAssociation_c)element, true);
            if(instReferredToClassInAssoc0 != null){
            	List<NonRootModelElement> R203List = new ArrayList<NonRootModelElement>();
            	R203List.add(instReferredToClassInAssoc0);
                map.put("R203", R203List);
            }
            ReferringClassInAssoc_c instReferringClassInAssoc1 = ReferringClassInAssoc_c.getOneR_RGOOnR203((ClassInAssociation_c)element, true);
            if(instReferringClassInAssoc1 != null){
            	List<NonRootModelElement> R203List = new ArrayList<NonRootModelElement>();
            	R203List.add(instReferringClassInAssoc1);
                map.put("R203", R203List);
            }
            ClassAsDerivedOneSide_c instClassAsDerivedOneSide2 = ClassAsDerivedOneSide_c.getOneR_CONEOnR203((ClassInAssociation_c)element, true);
            if(instClassAsDerivedOneSide2 != null){
            	List<NonRootModelElement> R203List = new ArrayList<NonRootModelElement>();
            	R203List.add(instClassAsDerivedOneSide2);
                map.put("R203", R203List);
            }
            ClassAsDerivedOtherSide_c instClassAsDerivedOtherSide3 = ClassAsDerivedOtherSide_c.getOneR_COTHOnR203((ClassInAssociation_c)element, true);
            if(instClassAsDerivedOtherSide3 != null){
            	List<NonRootModelElement> R203List = new ArrayList<NonRootModelElement>();
            	R203List.add(instClassAsDerivedOtherSide3);
                map.put("R203", R203List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ReferredToClassInAssoc_c instReferredToClassInAssoc0 = ReferredToClassInAssoc_c.getOneR_RTOOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(instReferredToClassInAssoc0 != null && (!checkSameComponent || !isComponentSame(modelElement, instReferredToClassInAssoc0))){
                externalMEList.add(instReferredToClassInAssoc0);
            }
            ReferringClassInAssoc_c instReferringClassInAssoc1 = ReferringClassInAssoc_c.getOneR_RGOOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(instReferringClassInAssoc1 != null && (!checkSameComponent || !isComponentSame(modelElement, instReferringClassInAssoc1))){
                externalMEList.add(instReferringClassInAssoc1);
            }
            ClassAsDerivedOneSide_c instClassAsDerivedOneSide2 = ClassAsDerivedOneSide_c.getOneR_CONEOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(instClassAsDerivedOneSide2 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsDerivedOneSide2))){
                externalMEList.add(instClassAsDerivedOneSide2);
            }
            ClassAsDerivedOtherSide_c instClassAsDerivedOtherSide3 = ClassAsDerivedOtherSide_c.getOneR_COTHOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(instClassAsDerivedOtherSide3 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsDerivedOtherSide3))){
                externalMEList.add(instClassAsDerivedOtherSide3);
            }
            // Class In Association ->R201
           //                      ->R201 -- Association  
           //                      ->R201 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // Class In Association ->R203
           //                      ->R203 -- Referred To Class in Assoc  
           //                      ->R203 -- Referring Class In Assoc  
           //                      ->R203 -- Class As Derived One Side  
           //                      ->R203 -- Class As Derived Other Side  
            // Class In Association ->R202
           //                      ->R202 -- Imported Class  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ReferredToClassInAssoc_c.getOneR_RTOOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ReferringClassInAssoc_c.getOneR_RGOOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsDerivedOneSide_c.getOneR_CONEOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsDerivedOtherSide_c.getOneR_COTHOnR203((ClassInAssociation_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ReferredToClassInAssoc_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R110List = new ArrayList<NonRootModelElement>();
            externalMEs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110((ReferredToClassInAssoc_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R110List.add(externalMEs[i]);
            }
            map.put("R110", R110List);
            ClassAsSimpleParticipant_c instClassAsSimpleParticipant0 = ClassAsSimpleParticipant_c.getOneR_PARTOnR204((ReferredToClassInAssoc_c)element, true);
            if(instClassAsSimpleParticipant0 != null){
            	List<NonRootModelElement> R204List = new ArrayList<NonRootModelElement>();
            	R204List.add(instClassAsSimpleParticipant0);
                map.put("R204", R204List);
            }
            ClassAsAssociatedOneSide_c instClassAsAssociatedOneSide1 = ClassAsAssociatedOneSide_c.getOneR_AONEOnR204((ReferredToClassInAssoc_c)element, true);
            if(instClassAsAssociatedOneSide1 != null){
            	List<NonRootModelElement> R204List = new ArrayList<NonRootModelElement>();
            	R204List.add(instClassAsAssociatedOneSide1);
                map.put("R204", R204List);
            }
            ClassAsAssociatedOtherSide_c instClassAsAssociatedOtherSide2 = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR204((ReferredToClassInAssoc_c)element, true);
            if(instClassAsAssociatedOtherSide2 != null){
            	List<NonRootModelElement> R204List = new ArrayList<NonRootModelElement>();
            	R204List.add(instClassAsAssociatedOtherSide2);
                map.put("R204", R204List);
            }
            ClassAsSupertype_c instClassAsSupertype3 = ClassAsSupertype_c.getOneR_SUPEROnR204((ReferredToClassInAssoc_c)element, true);
            if(instClassAsSupertype3 != null){
            	List<NonRootModelElement> R204List = new ArrayList<NonRootModelElement>();
            	R204List.add(instClassAsSupertype3);
                map.put("R204", R204List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110((ReferredToClassInAssoc_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            ClassAsSimpleParticipant_c instClassAsSimpleParticipant0 = ClassAsSimpleParticipant_c.getOneR_PARTOnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsSimpleParticipant0 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsSimpleParticipant0))){
                externalMEList.add(instClassAsSimpleParticipant0);
            }
            ClassAsAssociatedOneSide_c instClassAsAssociatedOneSide1 = ClassAsAssociatedOneSide_c.getOneR_AONEOnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsAssociatedOneSide1 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsAssociatedOneSide1))){
                externalMEList.add(instClassAsAssociatedOneSide1);
            }
            ClassAsAssociatedOtherSide_c instClassAsAssociatedOtherSide2 = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsAssociatedOtherSide2 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsAssociatedOtherSide2))){
                externalMEList.add(instClassAsAssociatedOtherSide2);
            }
            ClassAsSupertype_c instClassAsSupertype3 = ClassAsSupertype_c.getOneR_SUPEROnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsSupertype3 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsSupertype3))){
                externalMEList.add(instClassAsSupertype3);
            }
            // Referred To Class in Assoc ->R110
           //                      ->R110 -- Referred To Identifier Attribute  
           //                      ->R110 -- Class Identifier Attribute <<DEFINITE EXTERNAL LINK>>
            // Referred To Class in Assoc ->R109
           //                      ->R109 -- Class Identifier <<DEFINITE EXTERNAL LINK>>
            // Referred To Class in Assoc ->R203
           //                      ->R203 -- Referring Class In Assoc  
           //                      ->R203 -- Class As Derived One Side  
           //                      ->R203 -- Class As Derived Other Side  
           //                      ->R203 -- Class In Association  
            // Referred To Class in Assoc ->R204
           //                      ->R204 -- Class As Simple Participant  
           //                      ->R204 -- Class As Associated One Side  
           //                      ->R204 -- Class As Associated Other Side  
           //                      ->R204 -- Class As Supertype  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsSimpleParticipant_c.getOneR_PARTOnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsAssociatedOneSide_c.getOneR_AONEOnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsSupertype_c.getOneR_SUPEROnR204((ReferredToClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ClassAsSimpleParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Simple Participant ->R207
           //                      ->R207 -- Simple Association  
            // Class As Simple Participant ->R204
           //                      ->R204 -- Class As Associated One Side  
           //                      ->R204 -- Class As Associated Other Side  
           //                      ->R204 -- Class As Supertype  
           //                      ->R204 -- Referred To Class in Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsAssociatedOneSide_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Associated One Side ->R209
           //                      ->R209 -- Linked Association  
            // Class As Associated One Side ->R204
           //                      ->R204 -- Class As Simple Participant  
           //                      ->R204 -- Class As Associated Other Side  
           //                      ->R204 -- Class As Supertype  
           //                      ->R204 -- Referred To Class in Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsAssociatedOtherSide_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Associated Other Side ->R210
           //                      ->R210 -- Linked Association  
            // Class As Associated Other Side ->R204
           //                      ->R204 -- Class As Simple Participant  
           //                      ->R204 -- Class As Associated One Side  
           //                      ->R204 -- Class As Supertype  
           //                      ->R204 -- Referred To Class in Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsSupertype_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Supertype ->R212
           //                      ->R212 -- Subtype Supertype Association  
            // Class As Supertype ->R204
           //                      ->R204 -- Class As Simple Participant  
           //                      ->R204 -- Class As Associated One Side  
           //                      ->R204 -- Class As Associated Other Side  
           //                      ->R204 -- Referred To Class in Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ReferredToIdentifierAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R111List = new ArrayList<NonRootModelElement>();
            externalMEs = AttributeReferenceInClass_c.getManyO_REFsOnR111((ReferredToIdentifierAttribute_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R111List.add(externalMEs[i]);
            }
            map.put("R111", R111List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = AttributeReferenceInClass_c.getManyO_REFsOnR111((ReferredToIdentifierAttribute_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Referred To Identifier Attribute ->R111
           //                      ->R111 -- Attribute Reference in Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R111 -- Referring Class In Assoc  
            // Referred To Identifier Attribute ->R110
           //                      ->R110 -- Referred To Class in Assoc  
           //                      ->R110 -- Class Identifier Attribute <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AttributeReferenceInClass_c.getOneO_REFOnR111((ReferredToIdentifierAttribute_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ReferringClassInAssoc_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R111List = new ArrayList<NonRootModelElement>();
            externalMEs = AttributeReferenceInClass_c.getManyO_REFsOnR111((ReferringClassInAssoc_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R111List.add(externalMEs[i]);
            }
            map.put("R111", R111List);
            ClassAsSimpleFormalizer_c instClassAsSimpleFormalizer0 = ClassAsSimpleFormalizer_c.getOneR_FORMOnR205((ReferringClassInAssoc_c)element, true);
            if(instClassAsSimpleFormalizer0 != null){
            	List<NonRootModelElement> R205List = new ArrayList<NonRootModelElement>();
            	R205List.add(instClassAsSimpleFormalizer0);
                map.put("R205", R205List);
            }
            ClassAsLink_c instClassAsLink1 = ClassAsLink_c.getOneR_ASSROnR205((ReferringClassInAssoc_c)element, true);
            if(instClassAsLink1 != null){
            	List<NonRootModelElement> R205List = new ArrayList<NonRootModelElement>();
            	R205List.add(instClassAsLink1);
                map.put("R205", R205List);
            }
            ClassAsSubtype_c instClassAsSubtype2 = ClassAsSubtype_c.getOneR_SUBOnR205((ReferringClassInAssoc_c)element, true);
            if(instClassAsSubtype2 != null){
            	List<NonRootModelElement> R205List = new ArrayList<NonRootModelElement>();
            	R205List.add(instClassAsSubtype2);
                map.put("R205", R205List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = AttributeReferenceInClass_c.getManyO_REFsOnR111((ReferringClassInAssoc_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            ClassAsSimpleFormalizer_c instClassAsSimpleFormalizer0 = ClassAsSimpleFormalizer_c.getOneR_FORMOnR205((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsSimpleFormalizer0 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsSimpleFormalizer0))){
                externalMEList.add(instClassAsSimpleFormalizer0);
            }
            ClassAsLink_c instClassAsLink1 = ClassAsLink_c.getOneR_ASSROnR205((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsLink1 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsLink1))){
                externalMEList.add(instClassAsLink1);
            }
            ClassAsSubtype_c instClassAsSubtype2 = ClassAsSubtype_c.getOneR_SUBOnR205((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(instClassAsSubtype2 != null && (!checkSameComponent || !isComponentSame(modelElement, instClassAsSubtype2))){
                externalMEList.add(instClassAsSubtype2);
            }
            // Referring Class In Assoc ->R111
           //                      ->R111 -- Attribute Reference in Class <<DEFINITE EXTERNAL LINK>>
           //                      ->R111 -- Referred To Identifier Attribute  
            // Referring Class In Assoc ->R203
           //                      ->R203 -- Referred To Class in Assoc  
           //                      ->R203 -- Class As Derived One Side  
           //                      ->R203 -- Class As Derived Other Side  
           //                      ->R203 -- Class In Association  
            // Referring Class In Assoc ->R205
           //                      ->R205 -- Class As Simple Formalizer  
           //                      ->R205 -- Class As Link  
           //                      ->R205 -- Class As Subtype  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AttributeReferenceInClass_c.getOneO_REFOnR111((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = ClassAsSimpleFormalizer_c.getOneR_FORMOnR205((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsLink_c.getOneR_ASSROnR205((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassAsSubtype_c.getOneR_SUBOnR205((ReferringClassInAssoc_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ClassAsSimpleFormalizer_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Simple Formalizer ->R208
           //                      ->R208 -- Simple Association  
            // Class As Simple Formalizer ->R205
           //                      ->R205 -- Class As Link  
           //                      ->R205 -- Class As Subtype  
           //                      ->R205 -- Referring Class In Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsLink_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Link ->R211
           //                      ->R211 -- Linked Association  
            // Class As Link ->R205
           //                      ->R205 -- Class As Simple Formalizer  
           //                      ->R205 -- Class As Subtype  
           //                      ->R205 -- Referring Class In Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsSubtype_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Subtype ->R213
           //                      ->R213 -- Subtype Supertype Association  
            // Class As Subtype ->R205
           //                      ->R205 -- Class As Simple Formalizer  
           //                      ->R205 -- Class As Link  
           //                      ->R205 -- Referring Class In Assoc  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsDerivedOneSide_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Derived One Side ->R214
           //                      ->R214 -- Derived Association  
            // Class As Derived One Side ->R203
           //                      ->R203 -- Referred To Class in Assoc  
           //                      ->R203 -- Referring Class In Assoc  
           //                      ->R203 -- Class As Derived Other Side  
           //                      ->R203 -- Class In Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassAsDerivedOtherSide_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Class As Derived Other Side ->R215
           //                      ->R215 -- Derived Association  
            // Class As Derived Other Side ->R203
           //                      ->R203 -- Referred To Class in Assoc  
           //                      ->R203 -- Referring Class In Assoc  
           //                      ->R203 -- Class As Derived One Side  
           //                      ->R203 -- Class In Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class EeToSmCommPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R404List = new ArrayList<NonRootModelElement>();
            externalMEs = EeToSmEventComm_c.getManyCA_EESMEsOnR404((EeToSmCommPath_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R404List.add(externalMEs[i]);
            }
            map.put("R404", R404List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = EeToSmEventComm_c.getManyCA_EESMEsOnR404((EeToSmCommPath_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // EE to SM Comm Path ->R401
           //                      ->R401 -- SM to SM Comm Path  
           //                      ->R401 -- SM to EE Comm Path  
           //                      ->R401 -- Communication Path  
            // EE to SM Comm Path ->R404
           //                      ->R404 -- EE to SM Event Comm  
            // EE to SM Comm Path ->R403
           //                      ->R403 -- State Machine <<DEFINITE EXTERNAL LINK>>
            // EE to SM Comm Path ->R402
           //                      ->R402 -- External Entity in Model  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = EeToSmEventComm_c.getOneCA_EESMEOnR404((EeToSmCommPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class EeToSmEventComm_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // EE to SM Event Comm ->R404
           //                      ->R404 -- EE to SM Comm Path  
            // EE to SM Event Comm ->R405
           //                      ->R405 -- State Machine Event <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SmToSmCommPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R408List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToSmEventComm_c.getManyCA_SMSMEsOnR408((SmToSmCommPath_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R408List.add(externalMEs[i]);
            }
            map.put("R408", R408List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToSmEventComm_c.getManyCA_SMSMEsOnR408((SmToSmCommPath_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // SM to SM Comm Path ->R401
           //                      ->R401 -- EE to SM Comm Path  
           //                      ->R401 -- SM to EE Comm Path  
           //                      ->R401 -- Communication Path  
            // SM to SM Comm Path ->R408
           //                      ->R408 -- SM to SM Event Comm  
            // SM to SM Comm Path ->R414
           //                      ->R414 -- Imported Class  
            // SM to SM Comm Path ->R424
           //                      ->R424 -- Imported Class  
            // SM to SM Comm Path ->R406
           //                      ->R406 -- State Machine <<DEFINITE EXTERNAL LINK>>
            // SM to SM Comm Path ->R407
           //                      ->R407 -- State Machine <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToSmEventComm_c.getOneCA_SMSMEOnR408((SmToSmCommPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SmToSmEventComm_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // SM to SM Event Comm ->R408
           //                      ->R408 -- SM to SM Comm Path  
            // SM to SM Event Comm ->R409
           //                      ->R409 -- State Machine Event <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SmToEeCommPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R412List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeEventComm_c.getManyCA_SMEEEsOnR412((SmToEeCommPath_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R412List.add(externalMEs[i]);
            }
            map.put("R412", R412List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToEeEventComm_c.getManyCA_SMEEEsOnR412((SmToEeCommPath_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // SM to EE Comm Path ->R401
           //                      ->R401 -- EE to SM Comm Path  
           //                      ->R401 -- SM to SM Comm Path  
           //                      ->R401 -- Communication Path  
            // SM to EE Comm Path ->R412
           //                      ->R412 -- SM to EE Event Comm  
            // SM to EE Comm Path ->R410
           //                      ->R410 -- State Machine <<DEFINITE EXTERNAL LINK>>
            // SM to EE Comm Path ->R411
           //                      ->R411 -- External Entity in Model  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToEeEventComm_c.getOneCA_SMEEEOnR412((SmToEeCommPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SmToEeEventComm_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // SM to EE Event Comm ->R412
           //                      ->R412 -- SM to EE Comm Path  
            // SM to EE Event Comm ->R413
           //                      ->R413 -- External Entity Event <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SmToObjAccessPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R418List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToObjAttributeAccess_c.getManyCA_SMOAAsOnR418((SmToObjAccessPath_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R418List.add(externalMEs[i]);
            }
            map.put("R418", R418List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToObjAttributeAccess_c.getManyCA_SMOAAsOnR418((SmToObjAccessPath_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // SM to OBJ Access Path ->R415
           //                      ->R415 -- SM to EE Access Path  
           //                      ->R415 -- Access Path  
            // SM to OBJ Access Path ->R417
           //                      ->R417 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // SM to OBJ Access Path ->R418
           //                      ->R418 -- SM to OBJ Attribute Access  
            // SM to OBJ Access Path ->R420
           //                      ->R420 -- Imported Class  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToObjAttributeAccess_c.getOneCA_SMOAAOnR418((SmToObjAccessPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SmToObjAttributeAccess_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // SM to OBJ Attribute Access ->R418
           //                      ->R418 -- SM to OBJ Access Path  
            // SM to OBJ Attribute Access ->R419
           //                      ->R419 -- Attribute <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SmToEeAccessPath_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R422List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeDataItemAccess_c.getManyCA_SMEEDsOnR422((SmToEeAccessPath_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R422List.add(externalMEs[i]);
            }
            map.put("R422", R422List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = SmToEeDataItemAccess_c.getManyCA_SMEEDsOnR422((SmToEeAccessPath_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // SM to EE Access Path ->R415
           //                      ->R415 -- SM to OBJ Access Path  
           //                      ->R415 -- Access Path  
            // SM to EE Access Path ->R421
           //                      ->R421 -- External Entity in Model  
            // SM to EE Access Path ->R422
           //                      ->R422 -- SM to EE Data Item Access  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = SmToEeDataItemAccess_c.getOneCA_SMEEDOnR422((SmToEeAccessPath_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SmToEeDataItemAccess_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // SM to EE Data Item Access ->R422
           //                      ->R422 -- SM to EE Access Path  
            // SM to EE Data Item Access ->R423
           //                      ->R423 -- External Entity Data Item <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class StateMachine_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R416List = new ArrayList<NonRootModelElement>();
            externalMEs = AccessPath_c.getManyCA_ACCsOnR416((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R416List.add(externalMEs[i]);
            }
            map.put("R416", R416List);
            InstanceStateMachine_c instInstanceStateMachine0 = InstanceStateMachine_c.getOneSM_ISMOnR517((StateMachine_c)element, true);
            if(instInstanceStateMachine0 != null){
            	List<NonRootModelElement> R517List = new ArrayList<NonRootModelElement>();
            	R517List.add(instInstanceStateMachine0);
                map.put("R517", R517List);
            }
            ClassStateMachine_c instClassStateMachine1 = ClassStateMachine_c.getOneSM_ASMOnR517((StateMachine_c)element, true);
            if(instClassStateMachine1 != null){
            	List<NonRootModelElement> R517List = new ArrayList<NonRootModelElement>();
            	R517List.add(instClassStateMachine1);
                map.put("R517", R517List);
            }
            List<NonRootModelElement> R403List = new ArrayList<NonRootModelElement>();
            externalMEs = EeToSmCommPath_c.getManyCA_EESMCsOnR403((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R403List.add(externalMEs[i]);
            }
            map.put("R403", R403List);
            List<NonRootModelElement> R406List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR406((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R406List.add(externalMEs[i]);
            }
            map.put("R406", R406List);
            List<NonRootModelElement> R407List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR407((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R407List.add(externalMEs[i]);
            }
            map.put("R407", R407List);
            List<NonRootModelElement> R410List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToEeCommPath_c.getManyCA_SMEECsOnR410((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R410List.add(externalMEs[i]);
            }
            map.put("R410", R410List);
            List<NonRootModelElement> R502List = new ArrayList<NonRootModelElement>();
            externalMEs = StateMachineEvent_c.getManySM_EVTsOnR502((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R502List.add(externalMEs[i]);
            }
            map.put("R502", R502List);
            List<NonRootModelElement> R501List = new ArrayList<NonRootModelElement>();
            externalMEs = StateMachineState_c.getManySM_STATEsOnR501((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R501List.add(externalMEs[i]);
            }
            map.put("R501", R501List);
            List<NonRootModelElement> R505List = new ArrayList<NonRootModelElement>();
            externalMEs = Transition_c.getManySM_TXNsOnR505((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R505List.add(externalMEs[i]);
            }
            map.put("R505", R505List);
            MooreStateMachine_c instMooreStateMachine2 = MooreStateMachine_c.getOneSM_MOOREOnR510((StateMachine_c)element, true);
            if(instMooreStateMachine2 != null){
            	List<NonRootModelElement> R510List = new ArrayList<NonRootModelElement>();
            	R510List.add(instMooreStateMachine2);
                map.put("R510", R510List);
            }
            MealyStateMachine_c instMealyStateMachine3 = MealyStateMachine_c.getOneSM_MEALYOnR510((StateMachine_c)element, true);
            if(instMealyStateMachine3 != null){
            	List<NonRootModelElement> R510List = new ArrayList<NonRootModelElement>();
            	R510List.add(instMealyStateMachine3);
                map.put("R510", R510List);
            }
            List<NonRootModelElement> R515List = new ArrayList<NonRootModelElement>();
            externalMEs = Action_c.getManySM_ACTsOnR515((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R515List.add(externalMEs[i]);
            }
            map.put("R515", R515List);
            List<NonRootModelElement> R516List = new ArrayList<NonRootModelElement>();
            externalMEs = StateMachineEventDataItem_c.getManySM_EVTDIsOnR516((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R516List.add(externalMEs[i]);
            }
            map.put("R516", R516List);
            List<NonRootModelElement> R523List = new ArrayList<NonRootModelElement>();
            externalMEs = EventSupplementalData_c.getManySM_SUPDTsOnR523((StateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R523List.add(externalMEs[i]);
            }
            map.put("R523", R523List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = AccessPath_c.getManyCA_ACCsOnR416((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            InstanceStateMachine_c instInstanceStateMachine0 = InstanceStateMachine_c.getOneSM_ISMOnR517((StateMachine_c)modelElement, loadComponent);
            if(instInstanceStateMachine0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInstanceStateMachine0))){
                externalMEList.add(instInstanceStateMachine0);
            }
            ClassStateMachine_c instClassStateMachine1 = ClassStateMachine_c.getOneSM_ASMOnR517((StateMachine_c)modelElement, loadComponent);
            if(instClassStateMachine1 != null){
                externalMEList.add(instClassStateMachine1);
            }

            externalMEs = EeToSmCommPath_c.getManyCA_EESMCsOnR403((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR406((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToSmCommPath_c.getManyCA_SMSMCsOnR407((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToEeCommPath_c.getManyCA_SMEECsOnR410((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = StateMachineEvent_c.getManySM_EVTsOnR502((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = StateMachineState_c.getManySM_STATEsOnR501((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Transition_c.getManySM_TXNsOnR505((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            MooreStateMachine_c instMooreStateMachine2 = MooreStateMachine_c.getOneSM_MOOREOnR510((StateMachine_c)modelElement, loadComponent);
            if(instMooreStateMachine2 != null && (!checkSameComponent || !isComponentSame(modelElement, instMooreStateMachine2))){
                externalMEList.add(instMooreStateMachine2);
            }
            MealyStateMachine_c instMealyStateMachine3 = MealyStateMachine_c.getOneSM_MEALYOnR510((StateMachine_c)modelElement, loadComponent);
            if(instMealyStateMachine3 != null && (!checkSameComponent || !isComponentSame(modelElement, instMealyStateMachine3))){
                externalMEList.add(instMealyStateMachine3);
            }

            externalMEs = Action_c.getManySM_ACTsOnR515((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = StateMachineEventDataItem_c.getManySM_EVTDIsOnR516((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = EventSupplementalData_c.getManySM_SUPDTsOnR523((StateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // State Machine ->R416
           //                      ->R416 -- Access Path <<DEFINITE EXTERNAL LINK>>
            // State Machine ->R517
           //                      ->R517 -- Instance State Machine  
           //                      ->R517 -- Class State Machine <<DEFINITE EXTERNAL LINK>>
            // State Machine ->R403
           //                      ->R403 -- EE to SM Comm Path <<DEFINITE EXTERNAL LINK>>
            // State Machine ->R406
           //                      ->R406 -- SM to SM Comm Path <<DEFINITE EXTERNAL LINK>>
            // State Machine ->R407
           //                      ->R407 -- SM to SM Comm Path <<DEFINITE EXTERNAL LINK>>
            // State Machine ->R410
           //                      ->R410 -- SM to EE Comm Path <<DEFINITE EXTERNAL LINK>>
            // State Machine ->R502
           //                      ->R502 -- State Machine Event  
            // State Machine ->R501
           //                      ->R501 -- State Machine State  
            // State Machine ->R505
           //                      ->R505 -- Transition  
            // State Machine ->R510
           //                      ->R510 -- Moore State Machine  
           //                      ->R510 -- Mealy State Machine  
            // State Machine ->R515
           //                      ->R515 -- Action  
            // State Machine ->R516
           //                      ->R516 -- State Machine Event Data Item  
            // State Machine ->R523
           //                      ->R523 -- Event Supplemental Data <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = AccessPath_c.getOneCA_ACCOnR416((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = InstanceStateMachine_c.getOneSM_ISMOnR517((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ClassStateMachine_c.getOneSM_ASMOnR517((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = EeToSmCommPath_c.getOneCA_EESMCOnR403((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToSmCommPath_c.getOneCA_SMSMCOnR406((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToSmCommPath_c.getOneCA_SMSMCOnR407((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToEeCommPath_c.getOneCA_SMEECOnR410((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = StateMachineEvent_c.getOneSM_EVTOnR502((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = StateMachineState_c.getOneSM_STATEOnR501((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Transition_c.getOneSM_TXNOnR505((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MooreStateMachine_c.getOneSM_MOOREOnR510((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MealyStateMachine_c.getOneSM_MEALYOnR510((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Action_c.getOneSM_ACTOnR515((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = StateMachineEventDataItem_c.getOneSM_EVTDIOnR516((StateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EventSupplementalData_c.getOneSM_SUPDTOnR523((StateMachine_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class MooreStateMachine_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R511List = new ArrayList<NonRootModelElement>();
            externalMEs = MooreActionHome_c.getManySM_MOAHsOnR511((MooreStateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R511List.add(externalMEs[i]);
            }
            map.put("R511", R511List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = MooreActionHome_c.getManySM_MOAHsOnR511((MooreStateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Moore State Machine ->R510
           //                      ->R510 -- Mealy State Machine  
           //                      ->R510 -- State Machine  
            // Moore State Machine ->R511
           //                      ->R511 -- Moore Action Home  
           //                      ->R511 -- State Machine State  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = MooreActionHome_c.getOneSM_MOAHOnR511((MooreStateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class MealyStateMachine_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R512List = new ArrayList<NonRootModelElement>();
            externalMEs = MealyActionHome_c.getManySM_MEAHsOnR512((MealyStateMachine_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R512List.add(externalMEs[i]);
            }
            map.put("R512", R512List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = MealyActionHome_c.getManySM_MEAHsOnR512((MealyStateMachine_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Mealy State Machine ->R510
           //                      ->R510 -- Moore State Machine  
           //                      ->R510 -- State Machine  
            // Mealy State Machine ->R512
           //                      ->R512 -- Mealy Action Home  
           //                      ->R512 -- Transition  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = MealyActionHome_c.getOneSM_MEAHOnR512((MealyStateMachine_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class StateMachineEventDataItem_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R531List = new ArrayList<NonRootModelElement>();
            externalMEs = Dimensions_c.getManyS_DIMsOnR531((StateMachineEventDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R531List.add(externalMEs[i]);
            }
            map.put("R531", R531List);
            List<NonRootModelElement> R846List = new ArrayList<NonRootModelElement>();
            externalMEs = EventParameterReference_c.getManyV_EPRsOnR846((StateMachineEventDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R846List.add(externalMEs[i]);
            }
            map.put("R846", R846List);
            List<NonRootModelElement> R522List = new ArrayList<NonRootModelElement>();
            externalMEs = SupplementalDataItems_c.getManySM_SDIsOnR522((StateMachineEventDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R522List.add(externalMEs[i]);
            }
            map.put("R522", R522List);
            StateMachineEventDataItem_c instStateMachineEventDataItem0 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR533Precedes((StateMachineEventDataItem_c)element, true);
            if(instStateMachineEventDataItem0 != null){
            	List<NonRootModelElement> R533List = new ArrayList<NonRootModelElement>();
            	R533List.add(instStateMachineEventDataItem0);
                map.put("R533", R533List);
            }
            List<NonRootModelElement> R1017List = new ArrayList<NonRootModelElement>();
            externalMEs = EventArgument_c.getManyMSG_EAsOnR1017((StateMachineEventDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1017List.add(externalMEs[i]);
            }
            map.put("R1017", R1017List);
            List<NonRootModelElement> R2934List = new ArrayList<NonRootModelElement>();
            externalMEs = DataItemValue_c.getManyI_DIVsOnR2934((StateMachineEventDataItem_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2934List.add(externalMEs[i]);
            }
            map.put("R2934", R2934List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Dimensions_c.getManyS_DIMsOnR531((StateMachineEventDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = EventParameterReference_c.getManyV_EPRsOnR846((StateMachineEventDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SupplementalDataItems_c.getManySM_SDIsOnR522((StateMachineEventDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            StateMachineEventDataItem_c instStateMachineEventDataItem0 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR533Precedes((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(instStateMachineEventDataItem0 != null && (!checkSameComponent || !isComponentSame(modelElement, instStateMachineEventDataItem0))){
                externalMEList.add(instStateMachineEventDataItem0);
            }

            externalMEs = EventArgument_c.getManyMSG_EAsOnR1017((StateMachineEventDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = DataItemValue_c.getManyI_DIVsOnR2934((StateMachineEventDataItem_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // State Machine Event Data Item ->R531
           //                      ->R531 -- Dimensions  
            // State Machine Event Data Item ->R846
           //                      ->R846 -- Event Parameter Reference <<DEFINITE EXTERNAL LINK>>
            // State Machine Event Data Item ->R516
           //                      ->R516 -- State Machine  
            // State Machine Event Data Item ->R522
           //                      ->R522 -- Event Supplemental Data <<DEFINITE EXTERNAL LINK>>
           //                      ->R522 -- Supplemental Data Items <<DEFINITE EXTERNAL LINK>>
            // State Machine Event Data Item ->R524
           //                      ->R524 -- Data Type <<DEFINITE EXTERNAL LINK>>
            // State Machine Event Data Item ->R532
           //                      ->R532 -- State Machine Event  
            // State Machine Event Data Item ->R533
            // State Machine Event Data Item ->R1017
           //                      ->R1017 -- Event Argument <<DEFINITE EXTERNAL LINK>>
            // State Machine Event Data Item ->R2934
           //                      ->R2934 -- Data Item Value <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Dimensions_c.getOneS_DIMOnR531((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EventParameterReference_c.getOneV_EPROnR846((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SupplementalDataItems_c.getOneSM_SDIOnR522((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = StateMachineEventDataItem_c.getOneSM_EVTDIOnR533Precedes((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EventArgument_c.getOneMSG_EAOnR1017((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = DataItemValue_c.getOneI_DIVOnR2934((StateMachineEventDataItem_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class StateMachineEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R405List = new ArrayList<NonRootModelElement>();
            externalMEs = EeToSmEventComm_c.getManyCA_EESMEsOnR405((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R405List.add(externalMEs[i]);
            }
            map.put("R405", R405List);
            List<NonRootModelElement> R409List = new ArrayList<NonRootModelElement>();
            externalMEs = SmToSmEventComm_c.getManyCA_SMSMEsOnR409((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R409List.add(externalMEs[i]);
            }
            map.put("R409", R409List);
            List<NonRootModelElement> R532List = new ArrayList<NonRootModelElement>();
            externalMEs = StateMachineEventDataItem_c.getManySM_EVTDIsOnR532((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R532List.add(externalMEs[i]);
            }
            map.put("R532", R532List);
            PolymorphicEvent_c instPolymorphicEvent0 = PolymorphicEvent_c.getOneSM_PEVTOnR525((StateMachineEvent_c)element, true);
            if(instPolymorphicEvent0 != null){
            	List<NonRootModelElement> R525List = new ArrayList<NonRootModelElement>();
            	R525List.add(instPolymorphicEvent0);
                map.put("R525", R525List);
            }
            SemEvent_c instSemEvent1 = SemEvent_c.getOneSM_SEVTOnR525((StateMachineEvent_c)element, true);
            if(instSemEvent1 != null){
            	List<NonRootModelElement> R525List = new ArrayList<NonRootModelElement>();
            	R525List.add(instSemEvent1);
                map.put("R525", R525List);
            }
            List<NonRootModelElement> R1009List = new ArrayList<NonRootModelElement>();
            externalMEs = EventMessage_c.getManyMSG_EsOnR1009((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1009List.add(externalMEs[i]);
            }
            map.put("R1009", R1009List);
            List<NonRootModelElement> R2906List = new ArrayList<NonRootModelElement>();
            externalMEs = PendingEvent_c.getManyI_EVIsOnR2906((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2906List.add(externalMEs[i]);
            }
            map.put("R2906", R2906List);
            List<NonRootModelElement> R706List = new ArrayList<NonRootModelElement>();
            externalMEs = CreateSmEventStatement_c.getManyE_CSMEsOnR706((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R706List.add(externalMEs[i]);
            }
            map.put("R706", R706List);
            List<NonRootModelElement> R707List = new ArrayList<NonRootModelElement>();
            externalMEs = GenerateSmEventStatement_c.getManyE_GSMEsOnR707((StateMachineEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R707List.add(externalMEs[i]);
            }
            map.put("R707", R707List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = EeToSmEventComm_c.getManyCA_EESMEsOnR405((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = SmToSmEventComm_c.getManyCA_SMSMEsOnR409((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = StateMachineEventDataItem_c.getManySM_EVTDIsOnR532((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            PolymorphicEvent_c instPolymorphicEvent0 = PolymorphicEvent_c.getOneSM_PEVTOnR525((StateMachineEvent_c)modelElement, loadComponent);
            if(instPolymorphicEvent0 != null && (!checkSameComponent || !isComponentSame(modelElement, instPolymorphicEvent0))){
                externalMEList.add(instPolymorphicEvent0);
            }
            SemEvent_c instSemEvent1 = SemEvent_c.getOneSM_SEVTOnR525((StateMachineEvent_c)modelElement, loadComponent);
            if(instSemEvent1 != null && (!checkSameComponent || !isComponentSame(modelElement, instSemEvent1))){
                externalMEList.add(instSemEvent1);
            }

            externalMEs = EventMessage_c.getManyMSG_EsOnR1009((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = PendingEvent_c.getManyI_EVIsOnR2906((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = CreateSmEventStatement_c.getManyE_CSMEsOnR706((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }

            externalMEs = GenerateSmEventStatement_c.getManyE_GSMEsOnR707((StateMachineEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // State Machine Event ->R405
           //                      ->R405 -- EE to SM Event Comm <<DEFINITE EXTERNAL LINK>>
            // State Machine Event ->R409
           //                      ->R409 -- SM to SM Event Comm <<DEFINITE EXTERNAL LINK>>
            // State Machine Event ->R532
           //                      ->R532 -- State Machine Event Data Item  
            // State Machine Event ->R502
           //                      ->R502 -- State Machine  
            // State Machine Event ->R520
           //                      ->R520 -- Event Supplemental Data <<DEFINITE EXTERNAL LINK>>
            // State Machine Event ->R525
           //                      ->R525 -- Polymorphic Event  
           //                      ->R525 -- SEM Event  
            // State Machine Event ->R1009
           //                      ->R1009 -- Event Message <<DEFINITE EXTERNAL LINK>>
            // State Machine Event ->R2906
           //                      ->R2906 -- Pending Event <<DEFINITE EXTERNAL LINK>>
            // State Machine Event ->R706
           //                      ->R706 -- Create SM Event Statement <<DEFINITE EXTERNAL LINK>>
            // State Machine Event ->R707
           //                      ->R707 -- Generate SM Event Statement <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = EeToSmEventComm_c.getOneCA_EESMEOnR405((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = SmToSmEventComm_c.getOneCA_SMSMEOnR409((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = StateMachineEventDataItem_c.getOneSM_EVTDIOnR532((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = PolymorphicEvent_c.getOneSM_PEVTOnR525((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SemEvent_c.getOneSM_SEVTOnR525((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EventMessage_c.getOneMSG_EOnR1009((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = PendingEvent_c.getOneI_EVIOnR2906((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = CreateSmEventStatement_c.getOneE_CSMEOnR706((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = GenerateSmEventStatement_c.getOneE_GSMEOnR707((StateMachineEvent_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class StateMachineState_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R508List = new ArrayList<NonRootModelElement>();
            externalMEs = NoEventTransition_c.getManySM_NETXNsOnR508((StateMachineState_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R508List.add(externalMEs[i]);
            }
            map.put("R508", R508List);
            List<NonRootModelElement> R506List = new ArrayList<NonRootModelElement>();
            externalMEs = Transition_c.getManySM_TXNsOnR506((StateMachineState_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R506List.add(externalMEs[i]);
            }
            map.put("R506", R506List);
            List<NonRootModelElement> R511List = new ArrayList<NonRootModelElement>();
            externalMEs = MooreActionHome_c.getManySM_MOAHsOnR511((StateMachineState_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R511List.add(externalMEs[i]);
            }
            map.put("R511", R511List);
            List<NonRootModelElement> R503List = new ArrayList<NonRootModelElement>();
            externalMEs = StateEventMatrixEntry_c.getManySM_SEMEsOnR503((StateMachineState_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R503List.add(externalMEs[i]);
            }
            map.put("R503", R503List);
            List<NonRootModelElement> R2915List = new ArrayList<NonRootModelElement>();
            externalMEs = Instance_c.getManyI_INSsOnR2915((StateMachineState_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2915List.add(externalMEs[i]);
            }
            map.put("R2915", R2915List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = NoEventTransition_c.getManySM_NETXNsOnR508((StateMachineState_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Transition_c.getManySM_TXNsOnR506((StateMachineState_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = MooreActionHome_c.getManySM_MOAHsOnR511((StateMachineState_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = StateEventMatrixEntry_c.getManySM_SEMEsOnR503((StateMachineState_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = Instance_c.getManyI_INSsOnR2915((StateMachineState_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // State Machine State ->R501
           //                      ->R501 -- State Machine  
            // State Machine State ->R508
           //                      ->R508 -- No Event Transition  
            // State Machine State ->R506
           //                      ->R506 -- Transition  
            // State Machine State ->R511
           //                      ->R511 -- Moore Action Home  
           //                      ->R511 -- Moore State Machine  
            // State Machine State ->R521
           //                      ->R521 -- Event Supplemental Data <<DEFINITE EXTERNAL LINK>>
            // State Machine State ->R503
           //                      ->R503 -- State Event Matrix Entry  
           //                      ->R503 -- SEM Event  
            // State Machine State ->R2915
           //                      ->R2915 -- Instance <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = NoEventTransition_c.getOneSM_NETXNOnR508((StateMachineState_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Transition_c.getOneSM_TXNOnR506((StateMachineState_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MooreActionHome_c.getOneSM_MOAHOnR511((StateMachineState_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = StateEventMatrixEntry_c.getOneSM_SEMEOnR503((StateMachineState_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Instance_c.getOneI_INSOnR2915((StateMachineState_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Transition_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            NoEventTransition_c instNoEventTransition0 = NoEventTransition_c.getOneSM_NETXNOnR507((Transition_c)element, true);
            if(instNoEventTransition0 != null){
            	List<NonRootModelElement> R507List = new ArrayList<NonRootModelElement>();
            	R507List.add(instNoEventTransition0);
                map.put("R507", R507List);
            }
            NewStateTransition_c instNewStateTransition1 = NewStateTransition_c.getOneSM_NSTXNOnR507((Transition_c)element, true);
            if(instNewStateTransition1 != null){
            	List<NonRootModelElement> R507List = new ArrayList<NonRootModelElement>();
            	R507List.add(instNewStateTransition1);
                map.put("R507", R507List);
            }
            CreationTransition_c instCreationTransition2 = CreationTransition_c.getOneSM_CRTXNOnR507((Transition_c)element, true);
            if(instCreationTransition2 != null){
            	List<NonRootModelElement> R507List = new ArrayList<NonRootModelElement>();
            	R507List.add(instCreationTransition2);
                map.put("R507", R507List);
            }
            List<NonRootModelElement> R512List = new ArrayList<NonRootModelElement>();
            externalMEs = MealyActionHome_c.getManySM_MEAHsOnR512((Transition_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R512List.add(externalMEs[i]);
            }
            map.put("R512", R512List);
            TransitionActionHome_c instTransitionActionHome3 = TransitionActionHome_c.getOneSM_TAHOnR530((Transition_c)element, true);
            if(instTransitionActionHome3 != null){
            	List<NonRootModelElement> R530List = new ArrayList<NonRootModelElement>();
            	R530List.add(instTransitionActionHome3);
                map.put("R530", R530List);
            }
            List<NonRootModelElement> R2953List = new ArrayList<NonRootModelElement>();
            externalMEs = Instance_c.getManyI_INSsOnR2953((Transition_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R2953List.add(externalMEs[i]);
            }
            map.put("R2953", R2953List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            NoEventTransition_c instNoEventTransition0 = NoEventTransition_c.getOneSM_NETXNOnR507((Transition_c)modelElement, loadComponent);
            if(instNoEventTransition0 != null && (!checkSameComponent || !isComponentSame(modelElement, instNoEventTransition0))){
                externalMEList.add(instNoEventTransition0);
            }
            NewStateTransition_c instNewStateTransition1 = NewStateTransition_c.getOneSM_NSTXNOnR507((Transition_c)modelElement, loadComponent);
            if(instNewStateTransition1 != null && (!checkSameComponent || !isComponentSame(modelElement, instNewStateTransition1))){
                externalMEList.add(instNewStateTransition1);
            }
            CreationTransition_c instCreationTransition2 = CreationTransition_c.getOneSM_CRTXNOnR507((Transition_c)modelElement, loadComponent);
            if(instCreationTransition2 != null && (!checkSameComponent || !isComponentSame(modelElement, instCreationTransition2))){
                externalMEList.add(instCreationTransition2);
            }

            externalMEs = MealyActionHome_c.getManySM_MEAHsOnR512((Transition_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            TransitionActionHome_c instTransitionActionHome3 = TransitionActionHome_c.getOneSM_TAHOnR530((Transition_c)modelElement, loadComponent);
            if(instTransitionActionHome3 != null && (!checkSameComponent || !isComponentSame(modelElement, instTransitionActionHome3))){
                externalMEList.add(instTransitionActionHome3);
            }

            externalMEs = Instance_c.getManyI_INSsOnR2953((Transition_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                externalMEList.add(externalMEs[i]);
            }
            // Transition ->R507
           //                      ->R507 -- No Event Transition  
           //                      ->R507 -- New State Transition  
           //                      ->R507 -- Creation Transition  
            // Transition ->R506
           //                      ->R506 -- State Machine State  
            // Transition ->R505
           //                      ->R505 -- State Machine  
            // Transition ->R512
           //                      ->R512 -- Mealy Action Home  
           //                      ->R512 -- Mealy State Machine  
            // Transition ->R530
           //                      ->R530 -- Transition Action Home  
            // Transition ->R2953
           //                      ->R2953 -- Instance <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = NoEventTransition_c.getOneSM_NETXNOnR507((Transition_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = NewStateTransition_c.getOneSM_NSTXNOnR507((Transition_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = CreationTransition_c.getOneSM_CRTXNOnR507((Transition_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MealyActionHome_c.getOneSM_MEAHOnR512((Transition_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = TransitionActionHome_c.getOneSM_TAHOnR530((Transition_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = Instance_c.getOneI_INSOnR2953((Transition_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class Action_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ActionHome_c instActionHome0 = ActionHome_c.getOneSM_AHOnR514((Action_c)element, true);
            if(instActionHome0 != null){
            	List<NonRootModelElement> R514List = new ArrayList<NonRootModelElement>();
            	R514List.add(instActionHome0);
                map.put("R514", R514List);
            }
            StateActionBody_c instStateActionBody1 = StateActionBody_c.getOneACT_SABOnR691((Action_c)element, true);
            if(instStateActionBody1 != null){
            	List<NonRootModelElement> R691List = new ArrayList<NonRootModelElement>();
            	R691List.add(instStateActionBody1);
                map.put("R691", R691List);
            }
            TransitionActionBody_c instTransitionActionBody2 = TransitionActionBody_c.getOneACT_TABOnR688((Action_c)element, true);
            if(instTransitionActionBody2 != null){
            	List<NonRootModelElement> R688List = new ArrayList<NonRootModelElement>();
            	R688List.add(instTransitionActionBody2);
                map.put("R688", R688List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ActionHome_c instActionHome0 = ActionHome_c.getOneSM_AHOnR514((Action_c)modelElement, loadComponent);
            if(instActionHome0 != null && (!checkSameComponent || !isComponentSame(modelElement, instActionHome0))){
                externalMEList.add(instActionHome0);
            }

            StateActionBody_c instStateActionBody1 = StateActionBody_c.getOneACT_SABOnR691((Action_c)modelElement, loadComponent);
            if(instStateActionBody1 != null){
                externalMEList.add(instStateActionBody1);
            }

            TransitionActionBody_c instTransitionActionBody2 = TransitionActionBody_c.getOneACT_TABOnR688((Action_c)modelElement, loadComponent);
            if(instTransitionActionBody2 != null){
                externalMEList.add(instTransitionActionBody2);
            }
            // Action ->R514
           //                      ->R514 -- Action Home  
            // Action ->R515
           //                      ->R515 -- State Machine  
            // Action ->R691
           //                      ->R691 -- State Action Body <<DEFINITE EXTERNAL LINK>>
            // Action ->R688
           //                      ->R688 -- Transition Action Body <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ActionHome_c.getOneSM_AHOnR514((Action_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = StateActionBody_c.getOneACT_SABOnR691((Action_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
				inst = TransitionActionBody_c.getOneACT_TABOnR688((Action_c)modelElement, loadComponent);
            if(inst != null){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class PolymorphicEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R527List = new ArrayList<NonRootModelElement>();
            externalMEs = NonLocalEvent_c.getManySM_NLEVTsOnR527((PolymorphicEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R527List.add(externalMEs[i]);
            }
            map.put("R527", R527List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = NonLocalEvent_c.getManySM_NLEVTsOnR527((PolymorphicEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Polymorphic Event ->R525
           //                      ->R525 -- SEM Event  
           //                      ->R525 -- State Machine Event  
            // Polymorphic Event ->R527
           //                      ->R527 -- Non Local Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = NonLocalEvent_c.getOneSM_NLEVTOnR527((PolymorphicEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class SemEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R503List = new ArrayList<NonRootModelElement>();
            externalMEs = StateEventMatrixEntry_c.getManySM_SEMEsOnR503((SemEvent_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R503List.add(externalMEs[i]);
            }
            map.put("R503", R503List);
            LocalEvent_c instLocalEvent0 = LocalEvent_c.getOneSM_LEVTOnR526((SemEvent_c)element, true);
            if(instLocalEvent0 != null){
            	List<NonRootModelElement> R526List = new ArrayList<NonRootModelElement>();
            	R526List.add(instLocalEvent0);
                map.put("R526", R526List);
            }
            NonLocalEvent_c instNonLocalEvent1 = NonLocalEvent_c.getOneSM_NLEVTOnR526((SemEvent_c)element, true);
            if(instNonLocalEvent1 != null){
            	List<NonRootModelElement> R526List = new ArrayList<NonRootModelElement>();
            	R526List.add(instNonLocalEvent1);
                map.put("R526", R526List);
            }
            SignalEvent_c instSignalEvent2 = SignalEvent_c.getOneSM_SGEVTOnR526((SemEvent_c)element, true);
            if(instSignalEvent2 != null){
            	List<NonRootModelElement> R526List = new ArrayList<NonRootModelElement>();
            	R526List.add(instSignalEvent2);
                map.put("R526", R526List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = StateEventMatrixEntry_c.getManySM_SEMEsOnR503((SemEvent_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            LocalEvent_c instLocalEvent0 = LocalEvent_c.getOneSM_LEVTOnR526((SemEvent_c)modelElement, loadComponent);
            if(instLocalEvent0 != null && (!checkSameComponent || !isComponentSame(modelElement, instLocalEvent0))){
                externalMEList.add(instLocalEvent0);
            }
            NonLocalEvent_c instNonLocalEvent1 = NonLocalEvent_c.getOneSM_NLEVTOnR526((SemEvent_c)modelElement, loadComponent);
            if(instNonLocalEvent1 != null && (!checkSameComponent || !isComponentSame(modelElement, instNonLocalEvent1))){
                externalMEList.add(instNonLocalEvent1);
            }
            SignalEvent_c instSignalEvent2 = SignalEvent_c.getOneSM_SGEVTOnR526((SemEvent_c)modelElement, loadComponent);
            if(instSignalEvent2 != null && (!checkSameComponent || !isComponentSame(modelElement, instSignalEvent2))){
                externalMEList.add(instSignalEvent2);
            }
            // SEM Event ->R525
           //                      ->R525 -- Polymorphic Event  
           //                      ->R525 -- State Machine Event  
            // SEM Event ->R503
           //                      ->R503 -- State Event Matrix Entry  
           //                      ->R503 -- State Machine State  
            // SEM Event ->R526
           //                      ->R526 -- Local Event  
           //                      ->R526 -- Non Local Event  
           //                      ->R526 -- Signal Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = StateEventMatrixEntry_c.getOneSM_SEMEOnR503((SemEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = LocalEvent_c.getOneSM_LEVTOnR526((SemEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = NonLocalEvent_c.getOneSM_NLEVTOnR526((SemEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SignalEvent_c.getOneSM_SGEVTOnR526((SemEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class LocalEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            CreationTransition_c instCreationTransition0 = CreationTransition_c.getOneSM_CRTXNOnR509((LocalEvent_c)element, true);
            if(instCreationTransition0 != null){
            	List<NonRootModelElement> R509List = new ArrayList<NonRootModelElement>();
            	R509List.add(instCreationTransition0);
                map.put("R509", R509List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            CreationTransition_c instCreationTransition0 = CreationTransition_c.getOneSM_CRTXNOnR509((LocalEvent_c)modelElement, loadComponent);
            if(instCreationTransition0 != null && (!checkSameComponent || !isComponentSame(modelElement, instCreationTransition0))){
                externalMEList.add(instCreationTransition0);
            }
            // Local Event ->R526
           //                      ->R526 -- Non Local Event  
           //                      ->R526 -- Signal Event  
           //                      ->R526 -- SEM Event  
            // Local Event ->R509
           //                      ->R509 -- Creation Transition  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = CreationTransition_c.getOneSM_CRTXNOnR509((LocalEvent_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class NonLocalEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Non Local Event ->R526
           //                      ->R526 -- Local Event  
           //                      ->R526 -- Signal Event  
           //                      ->R526 -- SEM Event  
            // Non Local Event ->R527
           //                      ->R527 -- Polymorphic Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SignalEvent_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Signal Event ->R526
           //                      ->R526 -- Local Event  
           //                      ->R526 -- Non Local Event  
           //                      ->R526 -- SEM Event  
            // Signal Event ->R528
           //                      ->R528 -- Provided Signal <<DEFINITE EXTERNAL LINK>>
            // Signal Event ->R529
           //                      ->R529 -- Required Signal <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class StateEventMatrixEntry_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            EventIgnored_c instEventIgnored0 = EventIgnored_c.getOneSM_EIGNOnR504((StateEventMatrixEntry_c)element, true);
            if(instEventIgnored0 != null){
            	List<NonRootModelElement> R504List = new ArrayList<NonRootModelElement>();
            	R504List.add(instEventIgnored0);
                map.put("R504", R504List);
            }
            CantHappen_c instCantHappen1 = CantHappen_c.getOneSM_CHOnR504((StateEventMatrixEntry_c)element, true);
            if(instCantHappen1 != null){
            	List<NonRootModelElement> R504List = new ArrayList<NonRootModelElement>();
            	R504List.add(instCantHappen1);
                map.put("R504", R504List);
            }
            NewStateTransition_c instNewStateTransition2 = NewStateTransition_c.getOneSM_NSTXNOnR504((StateEventMatrixEntry_c)element, true);
            if(instNewStateTransition2 != null){
            	List<NonRootModelElement> R504List = new ArrayList<NonRootModelElement>();
            	R504List.add(instNewStateTransition2);
                map.put("R504", R504List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            EventIgnored_c instEventIgnored0 = EventIgnored_c.getOneSM_EIGNOnR504((StateEventMatrixEntry_c)modelElement, loadComponent);
            if(instEventIgnored0 != null && (!checkSameComponent || !isComponentSame(modelElement, instEventIgnored0))){
                externalMEList.add(instEventIgnored0);
            }
            CantHappen_c instCantHappen1 = CantHappen_c.getOneSM_CHOnR504((StateEventMatrixEntry_c)modelElement, loadComponent);
            if(instCantHappen1 != null && (!checkSameComponent || !isComponentSame(modelElement, instCantHappen1))){
                externalMEList.add(instCantHappen1);
            }
            NewStateTransition_c instNewStateTransition2 = NewStateTransition_c.getOneSM_NSTXNOnR504((StateEventMatrixEntry_c)modelElement, loadComponent);
            if(instNewStateTransition2 != null && (!checkSameComponent || !isComponentSame(modelElement, instNewStateTransition2))){
                externalMEList.add(instNewStateTransition2);
            }
            // State Event Matrix Entry ->R504
           //                      ->R504 -- Event Ignored  
           //                      ->R504 -- Cant Happen  
           //                      ->R504 -- New State Transition  
            // State Event Matrix Entry ->R503
           //                      ->R503 -- State Machine State  
           //                      ->R503 -- SEM Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = EventIgnored_c.getOneSM_EIGNOnR504((StateEventMatrixEntry_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = CantHappen_c.getOneSM_CHOnR504((StateEventMatrixEntry_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = NewStateTransition_c.getOneSM_NSTXNOnR504((StateEventMatrixEntry_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class EventIgnored_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Event Ignored ->R504
           //                      ->R504 -- Cant Happen  
           //                      ->R504 -- New State Transition  
           //                      ->R504 -- State Event Matrix Entry  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class CantHappen_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Cant Happen ->R504
           //                      ->R504 -- Event Ignored  
           //                      ->R504 -- New State Transition  
           //                      ->R504 -- State Event Matrix Entry  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class NoEventTransition_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // No Event Transition ->R507
           //                      ->R507 -- New State Transition  
           //                      ->R507 -- Creation Transition  
           //                      ->R507 -- Transition  
            // No Event Transition ->R508
           //                      ->R508 -- State Machine State  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class NewStateTransition_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // New State Transition ->R504
           //                      ->R504 -- Event Ignored  
           //                      ->R504 -- Cant Happen  
           //                      ->R504 -- State Event Matrix Entry  
            // New State Transition ->R507
           //                      ->R507 -- No Event Transition  
           //                      ->R507 -- Creation Transition  
           //                      ->R507 -- Transition  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class CreationTransition_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Creation Transition ->R507
           //                      ->R507 -- No Event Transition  
           //                      ->R507 -- New State Transition  
           //                      ->R507 -- Transition  
            // Creation Transition ->R509
           //                      ->R509 -- Local Event  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ActionHome_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            MooreActionHome_c instMooreActionHome0 = MooreActionHome_c.getOneSM_MOAHOnR513((ActionHome_c)element, true);
            if(instMooreActionHome0 != null){
            	List<NonRootModelElement> R513List = new ArrayList<NonRootModelElement>();
            	R513List.add(instMooreActionHome0);
                map.put("R513", R513List);
            }
            MealyActionHome_c instMealyActionHome1 = MealyActionHome_c.getOneSM_MEAHOnR513((ActionHome_c)element, true);
            if(instMealyActionHome1 != null){
            	List<NonRootModelElement> R513List = new ArrayList<NonRootModelElement>();
            	R513List.add(instMealyActionHome1);
                map.put("R513", R513List);
            }
            TransitionActionHome_c instTransitionActionHome2 = TransitionActionHome_c.getOneSM_TAHOnR513((ActionHome_c)element, true);
            if(instTransitionActionHome2 != null){
            	List<NonRootModelElement> R513List = new ArrayList<NonRootModelElement>();
            	R513List.add(instTransitionActionHome2);
                map.put("R513", R513List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            MooreActionHome_c instMooreActionHome0 = MooreActionHome_c.getOneSM_MOAHOnR513((ActionHome_c)modelElement, loadComponent);
            if(instMooreActionHome0 != null && (!checkSameComponent || !isComponentSame(modelElement, instMooreActionHome0))){
                externalMEList.add(instMooreActionHome0);
            }
            MealyActionHome_c instMealyActionHome1 = MealyActionHome_c.getOneSM_MEAHOnR513((ActionHome_c)modelElement, loadComponent);
            if(instMealyActionHome1 != null && (!checkSameComponent || !isComponentSame(modelElement, instMealyActionHome1))){
                externalMEList.add(instMealyActionHome1);
            }
            TransitionActionHome_c instTransitionActionHome2 = TransitionActionHome_c.getOneSM_TAHOnR513((ActionHome_c)modelElement, loadComponent);
            if(instTransitionActionHome2 != null && (!checkSameComponent || !isComponentSame(modelElement, instTransitionActionHome2))){
                externalMEList.add(instTransitionActionHome2);
            }
            // Action Home ->R513
           //                      ->R513 -- Moore Action Home  
           //                      ->R513 -- Mealy Action Home  
           //                      ->R513 -- Transition Action Home  
            // Action Home ->R514
           //                      ->R514 -- Action  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = MooreActionHome_c.getOneSM_MOAHOnR513((ActionHome_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = MealyActionHome_c.getOneSM_MEAHOnR513((ActionHome_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = TransitionActionHome_c.getOneSM_TAHOnR513((ActionHome_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class MooreActionHome_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Moore Action Home ->R511
           //                      ->R511 -- Moore State Machine  
           //                      ->R511 -- State Machine State  
            // Moore Action Home ->R513
           //                      ->R513 -- Mealy Action Home  
           //                      ->R513 -- Transition Action Home  
           //                      ->R513 -- Action Home  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class MealyActionHome_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Mealy Action Home ->R512
           //                      ->R512 -- Mealy State Machine  
           //                      ->R512 -- Transition  
            // Mealy Action Home ->R513
           //                      ->R513 -- Moore Action Home  
           //                      ->R513 -- Transition Action Home  
           //                      ->R513 -- Action Home  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class TransitionActionHome_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Transition Action Home ->R513
           //                      ->R513 -- Moore Action Home  
           //                      ->R513 -- Mealy Action Home  
           //                      ->R513 -- Action Home  
            // Transition Action Home ->R530
           //                      ->R530 -- Transition  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ExternalEntityParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // External Entity Participant ->R930
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // External Entity Participant ->R933
           //                      ->R933 -- External Entity  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FunctionPackageParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Function Package Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // Function Package Participant ->R932
           //                      ->R932 -- Function Package <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R935List = new ArrayList<NonRootModelElement>();
            externalMEs = ClassParticipantAttribute_c.getManySQ_CPAsOnR935((ClassParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R935List.add(externalMEs[i]);
            }
            map.put("R935", R935List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = ClassParticipantAttribute_c.getManySQ_CPAsOnR935((ClassParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Class Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // Class Participant ->R935
           //                      ->R935 -- Class Participant Attribute  
            // Class Participant ->R939
           //                      ->R939 -- Model Class <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ClassParticipantAttribute_c.getOneSQ_CPAOnR935((ClassParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ClassParticipantAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            InformalAttribute_c instInformalAttribute0 = InformalAttribute_c.getOneSQ_IAOnR947((ClassParticipantAttribute_c)element, true);
            if(instInformalAttribute0 != null){
            	List<NonRootModelElement> R947List = new ArrayList<NonRootModelElement>();
            	R947List.add(instInformalAttribute0);
                map.put("R947", R947List);
            }
            FormalAttribute_c instFormalAttribute1 = FormalAttribute_c.getOneSQ_FAOnR947((ClassParticipantAttribute_c)element, true);
            if(instFormalAttribute1 != null){
            	List<NonRootModelElement> R947List = new ArrayList<NonRootModelElement>();
            	R947List.add(instFormalAttribute1);
                map.put("R947", R947List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            InformalAttribute_c instInformalAttribute0 = InformalAttribute_c.getOneSQ_IAOnR947((ClassParticipantAttribute_c)modelElement, loadComponent);
            if(instInformalAttribute0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInformalAttribute0))){
                externalMEList.add(instInformalAttribute0);
            }
            FormalAttribute_c instFormalAttribute1 = FormalAttribute_c.getOneSQ_FAOnR947((ClassParticipantAttribute_c)modelElement, loadComponent);
            if(instFormalAttribute1 != null && (!checkSameComponent || !isComponentSame(modelElement, instFormalAttribute1))){
                externalMEList.add(instFormalAttribute1);
            }
            // Class Participant Attribute ->R935
           //                      ->R935 -- Class Participant  
            // Class Participant Attribute ->R947
           //                      ->R947 -- Informal Attribute  
           //                      ->R947 -- Formal Attribute  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InformalAttribute_c.getOneSQ_IAOnR947((ClassParticipantAttribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FormalAttribute_c.getOneSQ_FAOnR947((ClassParticipantAttribute_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InformalAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Informal Attribute ->R947
           //                      ->R947 -- Formal Attribute  
           //                      ->R947 -- Class Participant Attribute  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FormalAttribute_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Formal Attribute ->R947
           //                      ->R947 -- Informal Attribute  
           //                      ->R947 -- Class Participant Attribute  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ClassInstanceParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R936List = new ArrayList<NonRootModelElement>();
            externalMEs = InstanceAttributeValue_c.getManySQ_AVsOnR936((ClassInstanceParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R936List.add(externalMEs[i]);
            }
            map.put("R936", R936List);
            List<NonRootModelElement> R937List = new ArrayList<NonRootModelElement>();
            externalMEs = InstanceAttributeValue_c.getManySQ_AVsOnR937((ClassInstanceParticipant_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R937List.add(externalMEs[i]);
            }
            map.put("R937", R937List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = InstanceAttributeValue_c.getManySQ_AVsOnR936((ClassInstanceParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = InstanceAttributeValue_c.getManySQ_AVsOnR937((ClassInstanceParticipant_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Class Instance Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // Class Instance Participant ->R934
           //                      ->R934 -- Model Class <<DEFINITE EXTERNAL LINK>>
            // Class Instance Participant ->R936
           //                      ->R936 -- Instance Attribute Value  
            // Class Instance Participant ->R937
           //                      ->R937 -- Instance Attribute Value  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InstanceAttributeValue_c.getOneSQ_AVOnR936((ClassInstanceParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InstanceAttributeValue_c.getOneSQ_AVOnR937((ClassInstanceParticipant_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InstanceAttributeValue_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            InformalAttributeValue_c instInformalAttributeValue0 = InformalAttributeValue_c.getOneSQ_IAVOnR948((InstanceAttributeValue_c)element, true);
            if(instInformalAttributeValue0 != null){
            	List<NonRootModelElement> R948List = new ArrayList<NonRootModelElement>();
            	R948List.add(instInformalAttributeValue0);
                map.put("R948", R948List);
            }
            FormalAttributeValue_c instFormalAttributeValue1 = FormalAttributeValue_c.getOneSQ_FAVOnR948((InstanceAttributeValue_c)element, true);
            if(instFormalAttributeValue1 != null){
            	List<NonRootModelElement> R948List = new ArrayList<NonRootModelElement>();
            	R948List.add(instFormalAttributeValue1);
                map.put("R948", R948List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            InformalAttributeValue_c instInformalAttributeValue0 = InformalAttributeValue_c.getOneSQ_IAVOnR948((InstanceAttributeValue_c)modelElement, loadComponent);
            if(instInformalAttributeValue0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInformalAttributeValue0))){
                externalMEList.add(instInformalAttributeValue0);
            }
            FormalAttributeValue_c instFormalAttributeValue1 = FormalAttributeValue_c.getOneSQ_FAVOnR948((InstanceAttributeValue_c)modelElement, loadComponent);
            if(instFormalAttributeValue1 != null && (!checkSameComponent || !isComponentSame(modelElement, instFormalAttributeValue1))){
                externalMEList.add(instFormalAttributeValue1);
            }
            // Instance Attribute Value ->R936
           //                      ->R936 -- Class Instance Participant  
            // Instance Attribute Value ->R937
           //                      ->R937 -- Class Instance Participant  
            // Instance Attribute Value ->R938
           //                      ->R938 -- Attribute <<DEFINITE EXTERNAL LINK>>
            // Instance Attribute Value ->R948
           //                      ->R948 -- Informal Attribute Value  
           //                      ->R948 -- Formal Attribute Value  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InformalAttributeValue_c.getOneSQ_IAVOnR948((InstanceAttributeValue_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FormalAttributeValue_c.getOneSQ_FAVOnR948((InstanceAttributeValue_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InformalAttributeValue_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Informal Attribute Value ->R948
           //                      ->R948 -- Formal Attribute Value  
           //                      ->R948 -- Instance Attribute Value  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FormalAttributeValue_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Formal Attribute Value ->R948
           //                      ->R948 -- Informal Attribute Value  
           //                      ->R948 -- Instance Attribute Value  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ActorParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Actor Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // Actor Participant ->R949
           //                      ->R949 -- Lifespan  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class CommunicationLink_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Communication Link ->R1128
           //                      ->R1128 -- Association  
            // Communication Link ->R1133
           //                      ->R1133 -- Interaction Participant  
            // Communication Link ->R1134
           //                      ->R1134 -- Interaction Participant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class UseCaseParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Use Case Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ComponentParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Component Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // Component Participant ->R955
           //                      ->R955 -- Component <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Lifespan_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            ActorParticipant_c instActorParticipant0 = ActorParticipant_c.getOneSQ_APOnR949((Lifespan_c)element, true);
            if(instActorParticipant0 != null){
            	List<NonRootModelElement> R949List = new ArrayList<NonRootModelElement>();
            	R949List.add(instActorParticipant0);
                map.put("R949", R949List);
            }
            List<NonRootModelElement> R931List = new ArrayList<NonRootModelElement>();
            externalMEs = TimingMark_c.getManySQ_TMsOnR931((Lifespan_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R931List.add(externalMEs[i]);
            }
            map.put("R931", R931List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            ActorParticipant_c instActorParticipant0 = ActorParticipant_c.getOneSQ_APOnR949((Lifespan_c)modelElement, loadComponent);
            if(instActorParticipant0 != null && (!checkSameComponent || !isComponentSame(modelElement, instActorParticipant0))){
                externalMEList.add(instActorParticipant0);
            }

            externalMEs = TimingMark_c.getManySQ_TMsOnR931((Lifespan_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Lifespan ->R949
           //                      ->R949 -- Actor Participant  
            // Lifespan ->R931
           //                      ->R931 -- Timing Mark  
            // Lifespan ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Package Participant  
           //                      ->R930 -- Interaction Participant  
            // Lifespan ->R940
           //                      ->R940 -- Interaction Participant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = ActorParticipant_c.getOneSQ_APOnR949((Lifespan_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = TimingMark_c.getOneSQ_TMOnR931((Lifespan_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class TimingMark_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R941List = new ArrayList<NonRootModelElement>();
            externalMEs = TimeSpan_c.getManySQ_TSsOnR941((TimingMark_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R941List.add(externalMEs[i]);
            }
            map.put("R941", R941List);
            List<NonRootModelElement> R942List = new ArrayList<NonRootModelElement>();
            externalMEs = TimeSpan_c.getManySQ_TSsOnR942((TimingMark_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R942List.add(externalMEs[i]);
            }
            map.put("R942", R942List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = TimeSpan_c.getManySQ_TSsOnR941((TimingMark_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }

            externalMEs = TimeSpan_c.getManySQ_TSsOnR942((TimingMark_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Timing Mark ->R941
           //                      ->R941 -- Time Span  
            // Timing Mark ->R931
           //                      ->R931 -- Lifespan  
            // Timing Mark ->R942
           //                      ->R942 -- Time Span  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = TimeSpan_c.getOneSQ_TSOnR941((TimingMark_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = TimeSpan_c.getOneSQ_TSOnR942((TimingMark_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class TimeSpan_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Time Span ->R941
           //                      ->R941 -- Timing Mark  
            // Time Span ->R942
           //                      ->R942 -- Timing Mark  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class PackageParticipant_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Package Participant ->R930
           //                      ->R930 -- External Entity Participant  
           //                      ->R930 -- Function Package Participant  
           //                      ->R930 -- Class Participant  
           //                      ->R930 -- Class Instance Participant  
           //                      ->R930 -- Actor Participant  
           //                      ->R930 -- Use Case Participant  
           //                      ->R930 -- Component Participant  
           //                      ->R930 -- Lifespan  
           //                      ->R930 -- Interaction Participant  
            // Package Participant ->R956
           //                      ->R956 -- Package  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ReturnMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Return Message ->R1018
           //                      ->R1018 -- Synchronous Message  
           //                      ->R1018 -- Asynchronous Message  
           //                      ->R1018 -- Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SynchronousMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            InformalSynchronousMessage_c instInformalSynchronousMessage0 = InformalSynchronousMessage_c.getOneMSG_ISMOnR1020((SynchronousMessage_c)element, true);
            if(instInformalSynchronousMessage0 != null){
            	List<NonRootModelElement> R1020List = new ArrayList<NonRootModelElement>();
            	R1020List.add(instInformalSynchronousMessage0);
                map.put("R1020", R1020List);
            }
            FunctionMessage_c instFunctionMessage1 = FunctionMessage_c.getOneMSG_FOnR1020((SynchronousMessage_c)element, true);
            if(instFunctionMessage1 != null){
            	List<NonRootModelElement> R1020List = new ArrayList<NonRootModelElement>();
            	R1020List.add(instFunctionMessage1);
                map.put("R1020", R1020List);
            }
            OperationMessage_c instOperationMessage2 = OperationMessage_c.getOneMSG_OOnR1020((SynchronousMessage_c)element, true);
            if(instOperationMessage2 != null){
            	List<NonRootModelElement> R1020List = new ArrayList<NonRootModelElement>();
            	R1020List.add(instOperationMessage2);
                map.put("R1020", R1020List);
            }
            BridgeMessage_c instBridgeMessage3 = BridgeMessage_c.getOneMSG_BOnR1020((SynchronousMessage_c)element, true);
            if(instBridgeMessage3 != null){
            	List<NonRootModelElement> R1020List = new ArrayList<NonRootModelElement>();
            	R1020List.add(instBridgeMessage3);
                map.put("R1020", R1020List);
            }
            InterfaceOperationMessage_c instInterfaceOperationMessage4 = InterfaceOperationMessage_c.getOneMSG_IOPOnR1020((SynchronousMessage_c)element, true);
            if(instInterfaceOperationMessage4 != null){
            	List<NonRootModelElement> R1020List = new ArrayList<NonRootModelElement>();
            	R1020List.add(instInterfaceOperationMessage4);
                map.put("R1020", R1020List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            InformalSynchronousMessage_c instInformalSynchronousMessage0 = InformalSynchronousMessage_c.getOneMSG_ISMOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(instInformalSynchronousMessage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instInformalSynchronousMessage0))){
                externalMEList.add(instInformalSynchronousMessage0);
            }
            FunctionMessage_c instFunctionMessage1 = FunctionMessage_c.getOneMSG_FOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(instFunctionMessage1 != null && (!checkSameComponent || !isComponentSame(modelElement, instFunctionMessage1))){
                externalMEList.add(instFunctionMessage1);
            }
            OperationMessage_c instOperationMessage2 = OperationMessage_c.getOneMSG_OOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(instOperationMessage2 != null && (!checkSameComponent || !isComponentSame(modelElement, instOperationMessage2))){
                externalMEList.add(instOperationMessage2);
            }
            BridgeMessage_c instBridgeMessage3 = BridgeMessage_c.getOneMSG_BOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(instBridgeMessage3 != null && (!checkSameComponent || !isComponentSame(modelElement, instBridgeMessage3))){
                externalMEList.add(instBridgeMessage3);
            }
            InterfaceOperationMessage_c instInterfaceOperationMessage4 = InterfaceOperationMessage_c.getOneMSG_IOPOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(instInterfaceOperationMessage4 != null && (!checkSameComponent || !isComponentSame(modelElement, instInterfaceOperationMessage4))){
                externalMEList.add(instInterfaceOperationMessage4);
            }
            // Synchronous Message ->R1018
           //                      ->R1018 -- Return Message  
           //                      ->R1018 -- Asynchronous Message  
           //                      ->R1018 -- Message  
            // Synchronous Message ->R1020
           //                      ->R1020 -- Informal Synchronous Message  
           //                      ->R1020 -- Function Message  
           //                      ->R1020 -- Operation Message  
           //                      ->R1020 -- Bridge Message  
           //                      ->R1020 -- Interface Operation Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = InformalSynchronousMessage_c.getOneMSG_ISMOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionMessage_c.getOneMSG_FOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = OperationMessage_c.getOneMSG_OOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = BridgeMessage_c.getOneMSG_BOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InterfaceOperationMessage_c.getOneMSG_IOPOnR1020((SynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class InformalSynchronousMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Informal Synchronous Message ->R1020
           //                      ->R1020 -- Function Message  
           //                      ->R1020 -- Operation Message  
           //                      ->R1020 -- Bridge Message  
           //                      ->R1020 -- Interface Operation Message  
           //                      ->R1020 -- Synchronous Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FunctionMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Function Message ->R1010
           //                      ->R1010 -- Function  
            // Function Message ->R1020
           //                      ->R1020 -- Informal Synchronous Message  
           //                      ->R1020 -- Operation Message  
           //                      ->R1020 -- Bridge Message  
           //                      ->R1020 -- Interface Operation Message  
           //                      ->R1020 -- Synchronous Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class OperationMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Operation Message ->R1011
           //                      ->R1011 -- Operation <<DEFINITE EXTERNAL LINK>>
            // Operation Message ->R1020
           //                      ->R1020 -- Informal Synchronous Message  
           //                      ->R1020 -- Function Message  
           //                      ->R1020 -- Bridge Message  
           //                      ->R1020 -- Interface Operation Message  
           //                      ->R1020 -- Synchronous Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class BridgeMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Bridge Message ->R1012
           //                      ->R1012 -- Bridge  
            // Bridge Message ->R1020
           //                      ->R1020 -- Informal Synchronous Message  
           //                      ->R1020 -- Function Message  
           //                      ->R1020 -- Operation Message  
           //                      ->R1020 -- Interface Operation Message  
           //                      ->R1020 -- Synchronous Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class InterfaceOperationMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Interface Operation Message ->R1020
           //                      ->R1020 -- Informal Synchronous Message  
           //                      ->R1020 -- Function Message  
           //                      ->R1020 -- Operation Message  
           //                      ->R1020 -- Bridge Message  
           //                      ->R1020 -- Synchronous Message  
            // Interface Operation Message ->R1022
           //                      ->R1022 -- Interface Operation <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class AsynchronousMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            EventMessage_c instEventMessage0 = EventMessage_c.getOneMSG_EOnR1019((AsynchronousMessage_c)element, true);
            if(instEventMessage0 != null){
            	List<NonRootModelElement> R1019List = new ArrayList<NonRootModelElement>();
            	R1019List.add(instEventMessage0);
                map.put("R1019", R1019List);
            }
            InformalAsynchronousMessage_c instInformalAsynchronousMessage1 = InformalAsynchronousMessage_c.getOneMSG_IAMOnR1019((AsynchronousMessage_c)element, true);
            if(instInformalAsynchronousMessage1 != null){
            	List<NonRootModelElement> R1019List = new ArrayList<NonRootModelElement>();
            	R1019List.add(instInformalAsynchronousMessage1);
                map.put("R1019", R1019List);
            }
            SignalMessage_c instSignalMessage2 = SignalMessage_c.getOneMSG_SIGOnR1019((AsynchronousMessage_c)element, true);
            if(instSignalMessage2 != null){
            	List<NonRootModelElement> R1019List = new ArrayList<NonRootModelElement>();
            	R1019List.add(instSignalMessage2);
                map.put("R1019", R1019List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            EventMessage_c instEventMessage0 = EventMessage_c.getOneMSG_EOnR1019((AsynchronousMessage_c)modelElement, loadComponent);
            if(instEventMessage0 != null && (!checkSameComponent || !isComponentSame(modelElement, instEventMessage0))){
                externalMEList.add(instEventMessage0);
            }
            InformalAsynchronousMessage_c instInformalAsynchronousMessage1 = InformalAsynchronousMessage_c.getOneMSG_IAMOnR1019((AsynchronousMessage_c)modelElement, loadComponent);
            if(instInformalAsynchronousMessage1 != null && (!checkSameComponent || !isComponentSame(modelElement, instInformalAsynchronousMessage1))){
                externalMEList.add(instInformalAsynchronousMessage1);
            }
            SignalMessage_c instSignalMessage2 = SignalMessage_c.getOneMSG_SIGOnR1019((AsynchronousMessage_c)modelElement, loadComponent);
            if(instSignalMessage2 != null && (!checkSameComponent || !isComponentSame(modelElement, instSignalMessage2))){
                externalMEList.add(instSignalMessage2);
            }
            // Asynchronous Message ->R1018
           //                      ->R1018 -- Return Message  
           //                      ->R1018 -- Synchronous Message  
           //                      ->R1018 -- Message  
            // Asynchronous Message ->R1019
           //                      ->R1019 -- Event Message  
           //                      ->R1019 -- Informal Asynchronous Message  
           //                      ->R1019 -- Signal Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = EventMessage_c.getOneMSG_EOnR1019((AsynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InformalAsynchronousMessage_c.getOneMSG_IAMOnR1019((AsynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = SignalMessage_c.getOneMSG_SIGOnR1019((AsynchronousMessage_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class EventMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Event Message ->R1009
           //                      ->R1009 -- State Machine Event <<DEFINITE EXTERNAL LINK>>
            // Event Message ->R1019
           //                      ->R1019 -- Informal Asynchronous Message  
           //                      ->R1019 -- Signal Message  
           //                      ->R1019 -- Asynchronous Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class InformalAsynchronousMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Informal Asynchronous Message ->R1019
           //                      ->R1019 -- Event Message  
           //                      ->R1019 -- Signal Message  
           //                      ->R1019 -- Asynchronous Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SignalMessage_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Signal Message ->R1019
           //                      ->R1019 -- Event Message  
           //                      ->R1019 -- Informal Asynchronous Message  
           //                      ->R1019 -- Asynchronous Message  
            // Signal Message ->R1021
           //                      ->R1021 -- Interface Signal <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class MessageArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            BridgeArgument_c instBridgeArgument0 = BridgeArgument_c.getOneMSG_BAOnR1013((MessageArgument_c)element, true);
            if(instBridgeArgument0 != null){
            	List<NonRootModelElement> R1013List = new ArrayList<NonRootModelElement>();
            	R1013List.add(instBridgeArgument0);
                map.put("R1013", R1013List);
            }
            OperationArgument_c instOperationArgument1 = OperationArgument_c.getOneMSG_OAOnR1013((MessageArgument_c)element, true);
            if(instOperationArgument1 != null){
            	List<NonRootModelElement> R1013List = new ArrayList<NonRootModelElement>();
            	R1013List.add(instOperationArgument1);
                map.put("R1013", R1013List);
            }
            FunctionArgument_c instFunctionArgument2 = FunctionArgument_c.getOneMSG_FAOnR1013((MessageArgument_c)element, true);
            if(instFunctionArgument2 != null){
            	List<NonRootModelElement> R1013List = new ArrayList<NonRootModelElement>();
            	R1013List.add(instFunctionArgument2);
                map.put("R1013", R1013List);
            }
            EventArgument_c instEventArgument3 = EventArgument_c.getOneMSG_EAOnR1013((MessageArgument_c)element, true);
            if(instEventArgument3 != null){
            	List<NonRootModelElement> R1013List = new ArrayList<NonRootModelElement>();
            	R1013List.add(instEventArgument3);
                map.put("R1013", R1013List);
            }
            InformalArgument_c instInformalArgument4 = InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)element, true);
            if(instInformalArgument4 != null){
            	List<NonRootModelElement> R1013List = new ArrayList<NonRootModelElement>();
            	R1013List.add(instInformalArgument4);
                map.put("R1013", R1013List);
            }
            ExecutablePropertyArgument_c instExecutablePropertyArgument5 = ExecutablePropertyArgument_c.getOneMSG_EPAOnR1013((MessageArgument_c)element, true);
            if(instExecutablePropertyArgument5 != null){
            	List<NonRootModelElement> R1013List = new ArrayList<NonRootModelElement>();
            	R1013List.add(instExecutablePropertyArgument5);
                map.put("R1013", R1013List);
            }
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            BridgeArgument_c instBridgeArgument0 = BridgeArgument_c.getOneMSG_BAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(instBridgeArgument0 != null && (!checkSameComponent || !isComponentSame(modelElement, instBridgeArgument0))){
                externalMEList.add(instBridgeArgument0);
            }
            OperationArgument_c instOperationArgument1 = OperationArgument_c.getOneMSG_OAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(instOperationArgument1 != null && (!checkSameComponent || !isComponentSame(modelElement, instOperationArgument1))){
                externalMEList.add(instOperationArgument1);
            }
            FunctionArgument_c instFunctionArgument2 = FunctionArgument_c.getOneMSG_FAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(instFunctionArgument2 != null && (!checkSameComponent || !isComponentSame(modelElement, instFunctionArgument2))){
                externalMEList.add(instFunctionArgument2);
            }
            EventArgument_c instEventArgument3 = EventArgument_c.getOneMSG_EAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(instEventArgument3 != null && (!checkSameComponent || !isComponentSame(modelElement, instEventArgument3))){
                externalMEList.add(instEventArgument3);
            }
            InformalArgument_c instInformalArgument4 = InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(instInformalArgument4 != null && (!checkSameComponent || !isComponentSame(modelElement, instInformalArgument4))){
                externalMEList.add(instInformalArgument4);
            }
            ExecutablePropertyArgument_c instExecutablePropertyArgument5 = ExecutablePropertyArgument_c.getOneMSG_EPAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(instExecutablePropertyArgument5 != null && (!checkSameComponent || !isComponentSame(modelElement, instExecutablePropertyArgument5))){
                externalMEList.add(instExecutablePropertyArgument5);
            }
            // Message Argument ->R1000
           //                      ->R1000 -- Message  
            // Message Argument ->R1001
           //                      ->R1001 -- Message  
            // Message Argument ->R1013
           //                      ->R1013 -- Bridge Argument  
           //                      ->R1013 -- Operation Argument  
           //                      ->R1013 -- Function Argument  
           //                      ->R1013 -- Event Argument  
           //                      ->R1013 -- Informal Argument  
           //                      ->R1013 -- Executable Property Argument  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = BridgeArgument_c.getOneMSG_BAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = OperationArgument_c.getOneMSG_OAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = FunctionArgument_c.getOneMSG_FAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = EventArgument_c.getOneMSG_EAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
				inst = ExecutablePropertyArgument_c.getOneMSG_EPAOnR1013((MessageArgument_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class BridgeArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Bridge Argument ->R1013
           //                      ->R1013 -- Operation Argument  
           //                      ->R1013 -- Function Argument  
           //                      ->R1013 -- Event Argument  
           //                      ->R1013 -- Informal Argument  
           //                      ->R1013 -- Executable Property Argument  
           //                      ->R1013 -- Message Argument  
            // Bridge Argument ->R1014
           //                      ->R1014 -- Bridge Parameter  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class OperationArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Operation Argument ->R1013
           //                      ->R1013 -- Bridge Argument  
           //                      ->R1013 -- Function Argument  
           //                      ->R1013 -- Event Argument  
           //                      ->R1013 -- Informal Argument  
           //                      ->R1013 -- Executable Property Argument  
           //                      ->R1013 -- Message Argument  
            // Operation Argument ->R1015
           //                      ->R1015 -- Operation Parameter <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class FunctionArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Function Argument ->R1013
           //                      ->R1013 -- Bridge Argument  
           //                      ->R1013 -- Operation Argument  
           //                      ->R1013 -- Event Argument  
           //                      ->R1013 -- Informal Argument  
           //                      ->R1013 -- Executable Property Argument  
           //                      ->R1013 -- Message Argument  
            // Function Argument ->R1016
           //                      ->R1016 -- Function Parameter  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class EventArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Event Argument ->R1013
           //                      ->R1013 -- Bridge Argument  
           //                      ->R1013 -- Operation Argument  
           //                      ->R1013 -- Function Argument  
           //                      ->R1013 -- Informal Argument  
           //                      ->R1013 -- Executable Property Argument  
           //                      ->R1013 -- Message Argument  
            // Event Argument ->R1017
           //                      ->R1017 -- State Machine Event Data Item <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class InformalArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Informal Argument ->R1013
           //                      ->R1013 -- Bridge Argument  
           //                      ->R1013 -- Operation Argument  
           //                      ->R1013 -- Function Argument  
           //                      ->R1013 -- Event Argument  
           //                      ->R1013 -- Executable Property Argument  
           //                      ->R1013 -- Message Argument  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class ExecutablePropertyArgument_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Executable Property Argument ->R1013
           //                      ->R1013 -- Bridge Argument  
           //                      ->R1013 -- Operation Argument  
           //                      ->R1013 -- Function Argument  
           //                      ->R1013 -- Event Argument  
           //                      ->R1013 -- Informal Argument  
           //                      ->R1013 -- Message Argument  
            // Executable Property Argument ->R1023
           //                      ->R1023 -- Property Parameter <<DEFINITE EXTERNAL LINK>>
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class SequenceInSequence_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R928List = new ArrayList<NonRootModelElement>();
            externalMEs = Sequence_c.getManySQ_SsOnR928((SequenceInSequence_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R928List.add(externalMEs[i]);
            }
            map.put("R928", R928List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Sequence_c.getManySQ_SsOnR928((SequenceInSequence_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Sequence in Sequence ->R928
           //                      ->R928 -- Sequence  
            // Sequence in Sequence ->R911
           //                      ->R911 -- Sequence  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Sequence_c.getOneSQ_SOnR928((SequenceInSequence_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class MessageInSequence_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Message In Sequence ->R953
           //                      ->R953 -- Sequence  
            // Message In Sequence ->R954
           //                      ->R954 -- Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class CommunicationInCommunication_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1129List = new ArrayList<NonRootModelElement>();
            externalMEs = Communication_c.getManyCOMM_COMMsOnR1129((CommunicationInCommunication_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1129List.add(externalMEs[i]);
            }
            map.put("R1129", R1129List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = Communication_c.getManyCOMM_COMMsOnR1129((CommunicationInCommunication_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Communication in Communication ->R1129
           //                      ->R1129 -- Communication  
            // Communication in Communication ->R1130
           //                      ->R1130 -- Communication  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = Communication_c.getOneCOMM_COMMOnR1129((CommunicationInCommunication_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ParticipantInCommunication_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Participant in Communication ->R1126
           //                      ->R1126 -- Communication  
           //                      ->R1126 -- Interaction Participant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class MessageInCommunication_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Message in Communication ->R1135
           //                      ->R1135 -- Communication  
           //                      ->R1135 -- Message  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class UseCaseInUseCase_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
            List<NonRootModelElement> R1209List = new ArrayList<NonRootModelElement>();
            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1209((UseCaseInUseCase_c)element, true);
            for(int i=0; i<externalMEs.length; i++){
                R1209List.add(externalMEs[i]);
            }
            map.put("R1209", R1209List);
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;


            externalMEs = UseCaseDiagram_c.getManyUC_UCCsOnR1209((UseCaseInUseCase_c)modelElement, loadComponent);
            for(int i=0; i<externalMEs.length; i++){
                if(!checkSameComponent || !isComponentSame(modelElement, externalMEs[i])){
                externalMEList.add(externalMEs[i]);
                }
            }
            // Use Case in Use Case ->R1209
           //                      ->R1209 -- Use Case Diagram  
            // Use Case in Use Case ->R1208
           //                      ->R1208 -- Use Case Diagram  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
				inst = UseCaseDiagram_c.getOneUC_UCCOnR1209((UseCaseInUseCase_c)modelElement, loadComponent);
            if(inst != null && !isComponentSame(modelElement, inst)){
                return true;
            }
	    return false;
	}
 }
    
    
    
	static class ParticipantInUseCase_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Participant in Use Case ->R1203
           //                      ->R1203 -- Use Case Diagram  
           //                      ->R1203 -- Interaction Participant  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class AssociationInUseCase_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Association In Use Case ->R1214
           //                      ->R1214 -- Use Case Diagram  
            // Association In Use Case ->R1215
           //                      ->R1215 -- Use Case Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class BinaryAssociation_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Binary Association ->R1210
           //                      ->R1210 -- Generalization  
           //                      ->R1210 -- Include  
           //                      ->R1210 -- Extend  
           //                      ->R1210 -- Use Case Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Generalization_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Generalization ->R1210
           //                      ->R1210 -- Binary Association  
           //                      ->R1210 -- Include  
           //                      ->R1210 -- Extend  
           //                      ->R1210 -- Use Case Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Include_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Include ->R1210
           //                      ->R1210 -- Binary Association  
           //                      ->R1210 -- Generalization  
           //                      ->R1210 -- Extend  
           //                      ->R1210 -- Use Case Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
    
    
    
	static class Extend_cEvaluator implements IMEExternalLinkEvaluator{
		public HashMap<String, List<NonRootModelElement>> getAssociationMapOfExternalRGOs(NonRootModelElement element) {
			HashMap<String, List<NonRootModelElement>> map = new HashMap<String, List<NonRootModelElement>>();
			NonRootModelElement[] externalMEs = new NonRootModelElement[0];
    		return map;
		}
		public void findExternalRGOs(NonRootModelElement modelElement, List externalMEList, boolean loadComponent, boolean checkSameComponent){
    NonRootModelElement[] externalMEs;

            // Extend ->R1210
           //                      ->R1210 -- Binary Association  
           //                      ->R1210 -- Generalization  
           //                      ->R1210 -- Include  
           //                      ->R1210 -- Use Case Association  
		}
		public boolean hasExternalRGO(NonRootModelElement modelElement, boolean loadComponent){
			NonRootModelElement  inst=null;
	    return false;
	}
 }
}
