




//========================================================================
//
// File: ImportModel.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/gen_import_java.arc
// Version:      $Revision: 1.14 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
package com.mentor.nucleus.bp.io.mdl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;
import java.util.List;
import java.io.FileNotFoundException;
import org.eclipse.core.runtime.IPath;
import java.util.Map;
import java.util.Vector;
import java.util.UUID;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.preferences.IScopeContext;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.PlatformUI;
import org.osgi.service.prefs.Preferences;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.ui.Selection;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.ui.preferences.BridgePointProjectPreferences;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import com.mentor.nucleus.bp.io.core.CoreImport;
import com.mentor.nucleus.bp.io.core.ImportHelper;
import com.mentor.nucleus.bp.io.core.ImportInteger;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.text.activity.AllActivityModifier;

public class ImportModel extends CoreImport
{
    String m_inFile; // used for error messages
    private int m_num_s_parent_found = 0;
    private boolean m_parseAll = true;
    private boolean m_parseGraphics = true;
    private boolean IPR_WindowSelection = false;
    private boolean initialCheck = false;
    private List<NonRootModelElement> loadedInstances = new Vector<NonRootModelElement>();
    private List<NonRootModelElement> loadedProxies = new Vector<NonRootModelElement>();
    private List<NonRootModelElement> loadedGraphicsInstances = new Vector<NonRootModelElement>();
    private SystemModel_c m_parent;
    private static String streamFileName = "stream";

    private UUID dataPkgUUID = null;

    /**
     * Holds Java-only functionality employed by this importer.
     */
    private ImportHelper helper = new ImportHelper(this);

    /**
     * The version number found at the beginning of legacy BridgePoint 7.0 model files.
     */
    private final static String bp7_0VersionNumber = "7.0";

    /**
     * The version number found at the beginning of legacy BridgePoint 7.1 model files.
     */
    private final static String bp7_1VersionNumber = "7.1";

    /**
     * The version number found at the beginning of some legacy BridgePoint 7.1 model files.
     */
    private final static String bp7_1_1VersionNumber = "7.1.1";

    /**
     * The version number found at the beginning of some legacy BridgePoint 7.1 model files.
     */
    private final static String bp7_1_2VersionNumber = "7.1.2";

    /**
     * The version number found at the beginning of some legacy BridgePoint 7.1 model files.
     */
    private final static String bp7_1_3VersionNumber = "7.1.3";

    /**
     * The version number found at the beginning of some legacy BridgePoint 7.1 model files.
     */
    private final static String bp7_1_4VersionNumber = "7.1.4";

	private final static String bp7_1_5VersionNumber = "7.1.5";
    /**
     * The current persistence version
     */
    private final static String persistenceVersion = "7.1.6";

    String actualVersion = getHeader().getFileFormatVersion();

    public ImportModel(InputStream inStream, Ooaofooa aModelRoot, SystemModel_c parent, boolean parseAll, boolean clearDatabase, boolean parseGraphics, boolean isTemplate) throws IOException {
        super(aModelRoot, inStream, clearDatabase, isTemplate);
        m_parseAll = parseAll;
        m_inFile = streamFileName;
        m_parseGraphics = parseGraphics;
        m_parent = parent;
    }
    public ImportModel(String fileName, Ooaofooa aModelRoot, SystemModel_c parent, boolean parseAll, boolean clearDatabase, boolean isTemplate) throws FileNotFoundException {
        super(aModelRoot, fileName, clearDatabase, isTemplate);
        m_inFile = fileName;
        m_parseAll = parseAll;
        m_parent = parent;
    }

    public ImportModel(IPath filePath) throws FileNotFoundException {
        super(filePath);
    }

    /* (non-Javadoc)
     * @see org.eclipse.core.resources.IWorkspaceRunnable#run(org.eclipse.core.runtime.IProgressMonitor)
     */
    public void run(IProgressMonitor pm) {
    	helper.eesToUpgradeForIsRealized.clear();
        m_success = doLoadSql(pm);
        finishLoad(pm);
    }

        public NonRootModelElement[] getLoadedInstances() {
            return loadedInstances.toArray(new NonRootModelElement[loadedInstances.size()]);
        }

        public NonRootModelElement[] getLoadedGraphicalInstances() {
          return new NonRootModelElement[0];
        }

     public void performCleanUp(IProgressMonitor pm) throws IOException{
        if (m_clear_database) {
               Domain_c domain = Domain_c.DomainInstance(getModelRoot());
               if (domain != null) {
                // clear out all elements held by the model-root
                AllActivityModifier aam = new AllActivityModifier(domain, pm);
                aam.processAllActivities(AllActivityModifier.CLEAR);
                getModelRoot().clearDatabase(pm);
                }
        }
    }

    public boolean isExpectedContent(String actualContent) {
        return actualContent.equals("domain");
    }

    public boolean isExpectedVersion(String actualVersion)
    {
        return actualVersion.equals("7.1.5")
            || actualVersion.equals(bp7_1_3VersionNumber)
          || actualVersion.equals(bp7_1_2VersionNumber)
                || actualVersion.equals(bp7_1_1VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)
            || actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals("7.1.6")
        ;
    }

    public String getErrorMessage() {
        return m_errorMessage;
    }

    public void preprocessStatement(String s, BufferedReader is)
        throws IOException {
        if (s.toUpperCase().equals("INSERT INTO S_DOM")) //$NON-NLS-1$
        {
            m_num_s_parent_found += 1;
        }
    }

    /* (non-Javadoc)
     * @see com.mentor.nucleus.bp.io.sql.CoreImport#postprocessStatements()
     */
    public int postprocessStatements() {
        if (m_num_s_parent_found == 0) {
            m_errorMessage =
                "The file "
                    + m_inFile
                    + " is not a valid UML domain model file.";
            return PPS_ERROR;
        } else if (m_num_s_parent_found > 1) {
            m_errorMessage =
                "The file " + m_inFile + " contains multiple domains.";
            return PPS_ERROR;
        }
        return PPS_OK;
    }

/*
    Since the call to CoreImport.doLoadSql (see the run method
    above) is done in a different thread, we can't do anything
    that would cause a fireModelChange to occur in that sub-
    thread.  All the UI processing is therefore done by this
    function, after the file has been loaded.
*/
    public void finishLoad(IProgressMonitor pm)
    {
      if ( m_success )
      {
        Ooaofooa modelRoot = getModelRoot();
        modelRoot.setFullModelIsLoaded();
        Domain_c d2 = null;
                ModelRoot.disableChangeNotification();
        try {

        if(m_parseGraphics){
        pm.beginTask("Completing import...", 377 + 3);
        }else{
            pm.beginTask("Completing import...", 339 + 3);
        }

        AutomaticWiring_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        VariableLocation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Variable_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Value_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UnaryOperation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        TransientVar_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        TransientValueReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SymbolicConstantValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SelectedReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ParameterValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MessageValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MemberValueReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LiteralString_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LiteralReal_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LiteralInteger_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LiteralEnumerator_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LiteralBoolean_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceSetReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceSet_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceHandle_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventParameterReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventDatumValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BinaryOperation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AttributeValueReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ArrayLengthValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ArrayElementReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActualParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UseCaseInUseCase_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UseCaseDiagram_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UseCaseAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ParticipantInUseCase_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Include_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Generalization_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Extend_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BinaryAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AssociationInUseCase_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SystemDatatypePackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SystemDatatypeInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SystemConstantInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferredToIdentifierAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferentialAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Operation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NewBaseAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ModelClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ImportedClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DerivedBaseAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassIdentifierAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassIdentifier_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BaseAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AttributeReferenceInClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Attribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        TransitionActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Transition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SupplementalDataItems_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachineState_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachineEventDataItem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachineEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateEventMatrixEntry_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SignalEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SemEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PolymorphicEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NonLocalEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NoEventTransition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NewStateTransition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MooreStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MooreActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MealyStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MealyActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LocalEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventSupplementalData_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventIgnored_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreationTransition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CantHappen_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Action_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SequenceInSequence_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Sequence_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MessageInSequence_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SelectRelatedWhere_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SelectRelatedBy_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SelectFromInstancesWhere_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SelectFromInstances_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Select_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ChainLink_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SearchResult_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NameMatch_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Match_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ContentMatchResult_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ContentMatch_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferencesQuery_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Query_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DescriptionQuery_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DeclarationQuery_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActionLanguageQuery_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SearchableElement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SearchParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NamedSearchable_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DescriptionSearchable_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActionLanguageSearchable_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SearchEngine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferencesEngine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DescriptionEngine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DeclarationsEngine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActionLanguageEngine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UnrelateUsing_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Unrelate_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        RelateUsing_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Relate_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SatisfactionInComponentPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SatisfactionInComponent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DelegationInComponent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PackageableElement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SynchronousMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SignalMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReturnMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MessageArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Message_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfaceOperationMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InformalSynchronousMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InformalAsynchronousMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InformalArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExecutablePropertyArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeArgument_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AsynchronousMessage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SignalInvocation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReturnStmt_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationInvocation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfaceOperationInvocation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionInvocation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeInvocation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfacePackageInInterfacePackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfacePackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UseCaseParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        TimingMark_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        TimeSpan_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PackageParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Lifespan_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InteractionParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceAttributeValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InformalAttributeValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InformalAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionPackageParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FormalAttributeValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FormalAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassParticipantAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassInstanceParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActorParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Delete_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateNoVariable_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Create_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AssignToMember_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Timer_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PendingEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LinkParticipation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Link_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Instance_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DataItemValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentInstanceContainer_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentInstance_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AttributeValue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GlobalElementInSystem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GenerateToExternalEntity_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GenerateToCreator_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GenerateToClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GenerateSmEventStatement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GeneratePreexistingEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        GenerateEventStatement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Generate_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventSpecificationStatement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateSmEventStatement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateEventToInstance_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateEventToExternalEntity_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateEventToCreator_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateEventToClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreateEventStatement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SpecificationPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PackageInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Package_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UserDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SystemModel_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SubsystemInSubsystem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SubsystemInDomain_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Subsystem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StructuredDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StructureMember_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionPackageInDomain_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityPackageInDomain_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceReferenceDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionPackageInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Function_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityInModel_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityEventDataItem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityEventData_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityDataItem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntity_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Enumerator_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EnumerationDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EePackageInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Domain_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Dimensions_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DatatypeInSuppression_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DataTypePackageInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DataTypePackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DataTypeInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CoreDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Bridge_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SymbolicConstant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LiteralSymbolicConstant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LeafSymbolicConstant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ConstantSpecification_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ConstantInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        RequiredSignal_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        RequiredOperation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        RequiredExecutableProperty_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ProvidedSignal_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ProvidedOperation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ProvidedExecutableProperty_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Satisfaction_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Requirement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Provision_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PropertyParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Port_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfaceSignal_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfaceReferenceInDelegation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfaceReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InterfaceOperation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Interface_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExecutableProperty_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Delegation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentPackageInPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentPackage_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DomainAsComponent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentInComponent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ImportedRequirement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ImportedReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ImportedProvisionInSatisfaction_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ImportedProvision_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ComponentReference_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Component_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToSmEventComm_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToSmCommPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToObjAttributeAccess_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToObjAccessPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeEventComm_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeDataItemAccess_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeCommPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeAccessPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EeToSmEventComm_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EeToSmCommPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CommunicationPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AccessPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ParticipantInCommunication_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MessageInCommunication_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CommunicationLink_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CommunicationInCommunication_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Communication_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        WhileStmt_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        TransitionActionBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Statement_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateActionBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        RequiredSignalBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        RequiredOperationBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ProvidedSignalBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ProvidedOperationBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        IfStmt_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ForStmt_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ElseifStmt_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ElseStmt_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DerivedAttributeBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Control_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Continue_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeBody_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Break_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Body_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Block_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SubtypeSupertypeAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SimpleAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferringClassInAssoc_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferredToClassInAssoc_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LinkedAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DerivedAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassInAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSupertype_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSubtype_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSimpleParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSimpleFormalizer_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsLink_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsDerivedOtherSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsDerivedOneSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsAssociatedOtherSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsAssociatedOneSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Association_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SendSignal_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ObjectNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InitialNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ForkJoinNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FlowFinalNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DecisionMergeNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ControlNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActivityPartition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActivityNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActivityInActivity_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActivityFinalNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActivityEdge_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActivityDiagramAction_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Activity_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActionNode_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AcceptTimeEventAction_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AcceptEventAction_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AcceptEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);


    if(m_parseGraphics){
        Waypoint_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Textelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Simplesemanticmodelelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Semanticmodelbridge_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Reference_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Property_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Polyline_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Leafelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Image_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Graphnode_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Graphicprimitive_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Graphelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Graphedge_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Graphconnector_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Ellipse_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Element_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Diagramlink_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Diagramelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Diagram_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Coresemanticmodelbridge_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        NoncontainingShapeSpecification_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        ContainingShapeSpecification_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Linecolorstyle_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Fontstyle_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Fillcolorstyle_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Elementstyle_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Shape_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        NoncontainingShape_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Model_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        LineSegment_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Layer_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Graphicalelementinlayer_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        GraphicalElement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        FloatingText_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        ElementInSuppression_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        ContainingShape_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Connector_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        AnchorOnSegment_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        }
        helper.upgradePackages(getRootModelElement(), getModelRoot());
        helper.importPreBP7_1LineSegments();
        helper.importPreBP7_1Connectors();
        helper.importPreBP7_1_1ConnectorTexts();
        if((!actualVersion.equals("7.1.2")) && (!actualVersion.equals("7.1.3")))
            helper.createAnchorsOnSegmentsForPre7_1_2Connectors();
        d2 = Domain_c.DomainInstance(modelRoot);
        if ( m_parent != null )
        {
            d2.relateAcrossR28To((SystemModel_c)m_parent);
            modelRoot.setRoot((SystemModel_c)m_parent);
        }

        //Setting the root model element
        rootModelElement = d2;

        pm.worked(1);
        // see if the domains id is unique
        ModelClass_c [] mc_set = ModelClass_c.ModelClassInstances(modelRoot);
        for (int i = 0; i < mc_set.length; i++)
        {
            mc_set[i].Addidentifiers();
        }
        ReferentialAttribute_c [] rattr_set = ReferentialAttribute_c.ReferentialAttributeInstances(modelRoot);
        for (int i = 0; i < rattr_set.length; i++)
        {
            rattr_set[i].Setdatatype();
        }
        setGraphicalRepresents();
        pm.done();
        if(m_parseAll){
        AllActivityModifier aam = new AllActivityModifier(d2, pm);
        aam.processAllActivities(AllActivityModifier.PARSE);
      }

        //check if they are long based UUIDs or
        //even in case of UUID based model, it could be copy of same file with different name.
        //there is also unit test for this
    if (d2 != null && !isDomainIdUnique(d2)) {
       IDConvertor.getInstance().recreateUUID(d2);
    }
        Ooaofooa mr = Ooaofooa.getDefaultInstance();
        Ooaofgraphics gmr = Ooaofgraphics.getDefaultInstance();
        try {
		  mr.disableDeltaCollection();
		  gmr.disableDeltaCollection();
          helper.upgradeDSAs(getModelRoot());
        helper.associateDTsWithDomain(getModelRoot());
        helper.formalizeExternalEntityPackageLinkingAssociations(getModelRoot());
        helper.formalizeFunctionPackageLinkingAssociations(getModelRoot());
        helper.createShapeSubtypes(getGraphicsModelRoot());
        loadedInstances.addAll(helper.upgradeTransitions(loadedInstances));
        helper.upgradeEventData(getModelRoot(), getRootModelElement());
        helper.upgradeLifespans(getRootModelElement());
        helper.upgradeElementOrder(getModelRoot());
        helper.upgradeEEsForIsRealized();
		helper.upgradeDatatypes(loadedInstances);
        }
        finally {
            mr.enableDeltaCollection();
            gmr.enableDeltaCollection();
        }
    }   finally {
                    ModelRoot.enableChangeNotification();
    }
	  if (d2 != null) {
        Ooaofooa.getDefaultInstance().fireModelElementLoaded(d2);
	  }
    }
  }

    
    
    public void processStatement(Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm ) {
        ModelRoot.disableChangeNotification();
      try {
        createS_AW(modelRoot, table, parms, rawParms, numParms, pm);
        createV_LOC(modelRoot, table, parms, rawParms, numParms, pm);
        createV_VAR(modelRoot, table, parms, rawParms, numParms, pm);
        createV_VAL(modelRoot, table, parms, rawParms, numParms, pm);
        createV_UNY(modelRoot, table, parms, rawParms, numParms, pm);
        createV_TRN(modelRoot, table, parms, rawParms, numParms, pm);
        createV_TVL(modelRoot, table, parms, rawParms, numParms, pm);
        createV_SCV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_SLR(modelRoot, table, parms, rawParms, numParms, pm);
        createV_PVL(modelRoot, table, parms, rawParms, numParms, pm);
        createV_TRV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_MSV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_MVL(modelRoot, table, parms, rawParms, numParms, pm);
        createV_LST(modelRoot, table, parms, rawParms, numParms, pm);
        createV_LRL(modelRoot, table, parms, rawParms, numParms, pm);
        createV_LIN(modelRoot, table, parms, rawParms, numParms, pm);
        createV_LEN(modelRoot, table, parms, rawParms, numParms, pm);
        createV_LBO(modelRoot, table, parms, rawParms, numParms, pm);
        createV_ISR(modelRoot, table, parms, rawParms, numParms, pm);
        createV_INS(modelRoot, table, parms, rawParms, numParms, pm);
        createV_IRF(modelRoot, table, parms, rawParms, numParms, pm);
        createV_INT(modelRoot, table, parms, rawParms, numParms, pm);
        createV_FNV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_EPR(modelRoot, table, parms, rawParms, numParms, pm);
        createV_EDV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_BRV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_BIN(modelRoot, table, parms, rawParms, numParms, pm);
        createV_AVL(modelRoot, table, parms, rawParms, numParms, pm);
        createV_ALV(modelRoot, table, parms, rawParms, numParms, pm);
        createV_AER(modelRoot, table, parms, rawParms, numParms, pm);
        createV_PAR(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_UIU(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_UCC(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_UCA(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_PIUC(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_I(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_G(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_E(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_BA(modelRoot, table, parms, rawParms, numParms, pm);
        createUC_AIUC(modelRoot, table, parms, rawParms, numParms, pm);
        createSLD_SDP(modelRoot, table, parms, rawParms, numParms, pm);
        createSLD_SDINP(modelRoot, table, parms, rawParms, numParms, pm);
        createSLD_SCINP(modelRoot, table, parms, rawParms, numParms, pm);
        createO_RTIDA(modelRoot, table, parms, rawParms, numParms, pm);
        createO_RATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_TPARM(modelRoot, table, parms, rawParms, numParms, pm);
        createO_TFR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_NBATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_OBJ(modelRoot, table, parms, rawParms, numParms, pm);
        createO_IOBJ(modelRoot, table, parms, rawParms, numParms, pm);
        createO_DBATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_OIDA(modelRoot, table, parms, rawParms, numParms, pm);
        createO_ID(modelRoot, table, parms, rawParms, numParms, pm);
        createO_BATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_REF(modelRoot, table, parms, rawParms, numParms, pm);
        createO_ATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_TAH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_TXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SDI(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_STATE(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_EVTDI(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_EVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SM(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SEME(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SGEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_PEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_NLEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_NETXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_NSTXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MOORE(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MOAH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MEALY(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MEAH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_LEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_ISM(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SUPDT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_EIGN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_CRTXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_ASM(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_CH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_AH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_ACT(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_SIS(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_S(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_MIS(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_SRW(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_SR(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_FIW(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_FIO(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_SEL(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_LNK(modelRoot, table, parms, rawParms, numParms, pm);
        createSR_SR(modelRoot, table, parms, rawParms, numParms, pm);
        createSR_NM(modelRoot, table, parms, rawParms, numParms, pm);
        createSR_M(modelRoot, table, parms, rawParms, numParms, pm);
        createSR_CMR(modelRoot, table, parms, rawParms, numParms, pm);
        createSR_CM(modelRoot, table, parms, rawParms, numParms, pm);
        createSQU_R(modelRoot, table, parms, rawParms, numParms, pm);
        createSQU_Q(modelRoot, table, parms, rawParms, numParms, pm);
        createSQU_DE(modelRoot, table, parms, rawParms, numParms, pm);
        createSQU_D(modelRoot, table, parms, rawParms, numParms, pm);
        createSQU_A(modelRoot, table, parms, rawParms, numParms, pm);
        createSP_SE(modelRoot, table, parms, rawParms, numParms, pm);
        createSP_SP(modelRoot, table, parms, rawParms, numParms, pm);
        createSP_NS(modelRoot, table, parms, rawParms, numParms, pm);
        createSP_DS(modelRoot, table, parms, rawParms, numParms, pm);
        createSP_ALS(modelRoot, table, parms, rawParms, numParms, pm);
        createSEN_E(modelRoot, table, parms, rawParms, numParms, pm);
        createSEN_RE(modelRoot, table, parms, rawParms, numParms, pm);
        createSEN_DE(modelRoot, table, parms, rawParms, numParms, pm);
        createSEN_DCE(modelRoot, table, parms, rawParms, numParms, pm);
        createSEN_ALE(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_URU(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_UNR(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_RU(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_REL(modelRoot, table, parms, rawParms, numParms, pm);
        createPA_SICP(modelRoot, table, parms, rawParms, numParms, pm);
        createPA_SIC(modelRoot, table, parms, rawParms, numParms, pm);
        createPA_DIC(modelRoot, table, parms, rawParms, numParms, pm);
        createPE_PE(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_SM(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_SIG(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_R(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_O(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_OA(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_A(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_M(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_IOP(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_ISM(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_IAM(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_IA(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_F(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_FA(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_EPA(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_E(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_EA(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_B(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_BA(modelRoot, table, parms, rawParms, numParms, pm);
        createMSG_AM(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_SGN(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_RET(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_TFM(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_IOP(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_FNC(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_BRG(modelRoot, table, parms, rawParms, numParms, pm);
        createIP_IPINIP(modelRoot, table, parms, rawParms, numParms, pm);
        createIP_IP(modelRoot, table, parms, rawParms, numParms, pm);
        createIA_UCP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_TM(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_TS(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_PP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_LS(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_P(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_AV(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_IAV(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_IA(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_FPP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_FAV(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_FA(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_EEP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_COP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_CPA(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_CP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_CIP(modelRoot, table, parms, rawParms, numParms, pm);
        createSQ_AP(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_DEL(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_CNV(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_CR(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_AI(modelRoot, table, parms, rawParms, numParms, pm);
        createI_TIM(modelRoot, table, parms, rawParms, numParms, pm);
        createI_EVI(modelRoot, table, parms, rawParms, numParms, pm);
        createI_LIP(modelRoot, table, parms, rawParms, numParms, pm);
        createI_LNK(modelRoot, table, parms, rawParms, numParms, pm);
        createI_INS(modelRoot, table, parms, rawParms, numParms, pm);
        createI_DIV(modelRoot, table, parms, rawParms, numParms, pm);
        createI_CIN(modelRoot, table, parms, rawParms, numParms, pm);
        createI_EXE(modelRoot, table, parms, rawParms, numParms, pm);
        createI_AVL(modelRoot, table, parms, rawParms, numParms, pm);
        createG_EIS(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GEE(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GEC(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GAR(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GSME(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GPR(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GES(modelRoot, table, parms, rawParms, numParms, pm);
        createE_GEN(modelRoot, table, parms, rawParms, numParms, pm);
        createE_ESS(modelRoot, table, parms, rawParms, numParms, pm);
        createE_CSME(modelRoot, table, parms, rawParms, numParms, pm);
        createE_CEI(modelRoot, table, parms, rawParms, numParms, pm);
        createE_CEE(modelRoot, table, parms, rawParms, numParms, pm);
        createE_CEC(modelRoot, table, parms, rawParms, numParms, pm);
        createE_CEA(modelRoot, table, parms, rawParms, numParms, pm);
        createE_CES(modelRoot, table, parms, rawParms, numParms, pm);
        createEP_SPKG(modelRoot, table, parms, rawParms, numParms, pm);
        createEP_PIP(modelRoot, table, parms, rawParms, numParms, pm);
        createEP_PKG(modelRoot, table, parms, rawParms, numParms, pm);
        createS_UDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SYS(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SIS(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SID(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SS(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_MBR(modelRoot, table, parms, rawParms, numParms, pm);
        createPL_FPID(modelRoot, table, parms, rawParms, numParms, pm);
        createPL_EEPID(modelRoot, table, parms, rawParms, numParms, pm);
        createS_IRDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SPARM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_FPIP(modelRoot, table, parms, rawParms, numParms, pm);
        createS_FPK(modelRoot, table, parms, rawParms, numParms, pm);
        createS_FIP(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SYNC(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEPK(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEIP(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEEDI(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEEDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEDI(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EE(modelRoot, table, parms, rawParms, numParms, pm);
        createS_ENUM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEPIP(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DOM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DIM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DIS(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DPIP(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DPK(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DIP(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_CDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_BPARM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_BRG(modelRoot, table, parms, rawParms, numParms, pm);
        createCNST_SYC(modelRoot, table, parms, rawParms, numParms, pm);
        createCNST_LSC(modelRoot, table, parms, rawParms, numParms, pm);
        createCNST_LFSC(modelRoot, table, parms, rawParms, numParms, pm);
        createCNST_CSP(modelRoot, table, parms, rawParms, numParms, pm);
        createCNST_CIP(modelRoot, table, parms, rawParms, numParms, pm);
        createSPR_RS(modelRoot, table, parms, rawParms, numParms, pm);
        createSPR_RO(modelRoot, table, parms, rawParms, numParms, pm);
        createSPR_REP(modelRoot, table, parms, rawParms, numParms, pm);
        createSPR_PS(modelRoot, table, parms, rawParms, numParms, pm);
        createSPR_PO(modelRoot, table, parms, rawParms, numParms, pm);
        createSPR_PEP(modelRoot, table, parms, rawParms, numParms, pm);
        createC_SF(modelRoot, table, parms, rawParms, numParms, pm);
        createC_R(modelRoot, table, parms, rawParms, numParms, pm);
        createC_P(modelRoot, table, parms, rawParms, numParms, pm);
        createC_PP(modelRoot, table, parms, rawParms, numParms, pm);
        createC_PO(modelRoot, table, parms, rawParms, numParms, pm);
        createC_AS(modelRoot, table, parms, rawParms, numParms, pm);
        createC_RID(modelRoot, table, parms, rawParms, numParms, pm);
        createC_IR(modelRoot, table, parms, rawParms, numParms, pm);
        createC_IO(modelRoot, table, parms, rawParms, numParms, pm);
        createC_I(modelRoot, table, parms, rawParms, numParms, pm);
        createC_EP(modelRoot, table, parms, rawParms, numParms, pm);
        createC_DG(modelRoot, table, parms, rawParms, numParms, pm);
        createCP_CPINP(modelRoot, table, parms, rawParms, numParms, pm);
        createCP_CP(modelRoot, table, parms, rawParms, numParms, pm);
        createCN_DC(modelRoot, table, parms, rawParms, numParms, pm);
        createCN_CIC(modelRoot, table, parms, rawParms, numParms, pm);
        createCL_IR(modelRoot, table, parms, rawParms, numParms, pm);
        createCL_IIR(modelRoot, table, parms, rawParms, numParms, pm);
        createCL_IPINS(modelRoot, table, parms, rawParms, numParms, pm);
        createCL_IP(modelRoot, table, parms, rawParms, numParms, pm);
        createCL_IC(modelRoot, table, parms, rawParms, numParms, pm);
        createC_C(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMSME(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMSMC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMOAA(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMOA(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEEE(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEED(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEEC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEEA(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_EESME(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_EESMC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_COMM(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_ACC(modelRoot, table, parms, rawParms, numParms, pm);
        createCOMM_PIC(modelRoot, table, parms, rawParms, numParms, pm);
        createCOMM_MIC(modelRoot, table, parms, rawParms, numParms, pm);
        createCOMM_LNK(modelRoot, table, parms, rawParms, numParms, pm);
        createCOMM_CIC(modelRoot, table, parms, rawParms, numParms, pm);
        createCOMM_COMM(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_WHL(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_TAB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_SMT(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_SAB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_RSB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_ROB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_PSB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_POB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_OPB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_IF(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_FNB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_FOR(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_EL(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_E(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_DAB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_CTL(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_CON(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_BRB(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_BRK(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_ACT(modelRoot, table, parms, rawParms, numParms, pm);
        createACT_BLK(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SUBSUP(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SIMP(modelRoot, table, parms, rawParms, numParms, pm);
        createR_RGO(modelRoot, table, parms, rawParms, numParms, pm);
        createR_RTO(modelRoot, table, parms, rawParms, numParms, pm);
        createR_ASSOC(modelRoot, table, parms, rawParms, numParms, pm);
        createR_COMP(modelRoot, table, parms, rawParms, numParms, pm);
        createR_OIR(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SUPER(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SUB(modelRoot, table, parms, rawParms, numParms, pm);
        createR_PART(modelRoot, table, parms, rawParms, numParms, pm);
        createR_FORM(modelRoot, table, parms, rawParms, numParms, pm);
        createR_ASSR(modelRoot, table, parms, rawParms, numParms, pm);
        createR_COTH(modelRoot, table, parms, rawParms, numParms, pm);
        createR_CONE(modelRoot, table, parms, rawParms, numParms, pm);
        createR_AOTH(modelRoot, table, parms, rawParms, numParms, pm);
        createR_AONE(modelRoot, table, parms, rawParms, numParms, pm);
        createR_REL(modelRoot, table, parms, rawParms, numParms, pm);
        createA_SS(modelRoot, table, parms, rawParms, numParms, pm);
        createA_OBJ(modelRoot, table, parms, rawParms, numParms, pm);
        createA_INI(modelRoot, table, parms, rawParms, numParms, pm);
        createA_FJ(modelRoot, table, parms, rawParms, numParms, pm);
        createA_FF(modelRoot, table, parms, rawParms, numParms, pm);
        createA_DM(modelRoot, table, parms, rawParms, numParms, pm);
        createA_CTL(modelRoot, table, parms, rawParms, numParms, pm);
        createA_AP(modelRoot, table, parms, rawParms, numParms, pm);
        createA_N(modelRoot, table, parms, rawParms, numParms, pm);
        createA_AIA(modelRoot, table, parms, rawParms, numParms, pm);
        createA_AF(modelRoot, table, parms, rawParms, numParms, pm);
        createA_E(modelRoot, table, parms, rawParms, numParms, pm);
        createA_GA(modelRoot, table, parms, rawParms, numParms, pm);
        createA_A(modelRoot, table, parms, rawParms, numParms, pm);
        createA_ACT(modelRoot, table, parms, rawParms, numParms, pm);
        createA_ATE(modelRoot, table, parms, rawParms, numParms, pm);
        createA_AEA(modelRoot, table, parms, rawParms, numParms, pm);
        createA_AE(modelRoot, table, parms, rawParms, numParms, pm);
        createCP_CPFromCD_CD(modelRoot, table, parms, rawParms, numParms, pm);
        createIP_IPFromID_ID(modelRoot, table, parms, rawParms, numParms, pm);
        storeC_C(modelRoot, table, parms, rawParms, numParms, pm);
        storeC_P(modelRoot, table, parms, rawParms, numParms, pm);
        storeC_R(modelRoot, table, parms, rawParms, numParms, pm);
        storeCD_IC(modelRoot, table, parms, rawParms, numParms, pm);
        storeCD_IID(modelRoot, table, parms, rawParms, numParms, pm);
        storeCD_CID(modelRoot, table, parms, rawParms, numParms, pm);
        storeCD_CDE(modelRoot, table, parms, rawParms, numParms, pm);
        storeCL_IR(modelRoot, table, parms, rawParms, numParms, pm);
        storeCL_IPINS(modelRoot, table, parms, rawParms, numParms, pm);
        storePA_SIC(modelRoot, table, parms, rawParms, numParms, pm);
        storePA_SICP(modelRoot, table, parms, rawParms, numParms, pm);
      if(m_parseGraphics){
      if ( table.equalsIgnoreCase("DIM_WAY") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Waypoint_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Float.parseFloat((String)parms.elementAt(1)), 
           Float.parseFloat((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_TEL") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Textelement_c(getGraphicsModelRoot(),
               removeTics((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_SSME") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Simplesemanticmodelelement_c(getGraphicsModelRoot(),
               removeTics((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_SMB") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Semanticmodelbridge_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_REF") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Reference_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true
);
        }
      } else if ( table.equalsIgnoreCase("DIM_PRP") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Property_c(getGraphicsModelRoot(),
               Integer.parseInt((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_PLN") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Polyline_c(getGraphicsModelRoot(),
               ((String)parms.elementAt(0)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_LEL") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Leafelement_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_IMG") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Image_c(getGraphicsModelRoot(),
               removeTics((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_ND") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Graphnode_c(getGraphicsModelRoot(),
               Float.parseFloat((String)parms.elementAt(0)), 
           Float.parseFloat((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_GRP") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Graphicprimitive_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_GE") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Graphelement_c(getGraphicsModelRoot(),
               Float.parseFloat((String)parms.elementAt(0)), 
           Float.parseFloat((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_ED") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Graphedge_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_CON") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Graphconnector_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Float.parseFloat((String)parms.elementAt(1)), 
           Float.parseFloat((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_ELP") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Ellipse_c(getGraphicsModelRoot(),
               Float.parseFloat((String)parms.elementAt(0)), 
           Float.parseFloat((String)parms.elementAt(1)), 
           Float.parseFloat((String)parms.elementAt(2)), 
           Float.parseFloat((String)parms.elementAt(3)), 
           Float.parseFloat((String)parms.elementAt(4)), 
           Float.parseFloat((String)parms.elementAt(5)), 
           Float.parseFloat((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_ELM") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Element_c(getGraphicsModelRoot(),
               null
);
        }
      } else if ( table.equalsIgnoreCase("DIM_DLK") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Diagramlink_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Float.parseFloat((String)parms.elementAt(1)), 
           Float.parseFloat((String)parms.elementAt(2)), 
           Float.parseFloat((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_ELE") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Diagramelement_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_DIA") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Diagram_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           Float.parseFloat((String)parms.elementAt(2)), 
           Float.parseFloat((String)parms.elementAt(3)), 
           Float.parseFloat((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))
);
        }
      } else if ( table.equalsIgnoreCase("DIM_CSMB") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Coresemanticmodelbridge_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           null
);
        }
      } else if ( table.equalsIgnoreCase("TS_NCS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new NoncontainingShapeSpecification_c(getGraphicsModelRoot(),
               Integer.parseInt((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("TS_CTR") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new ContainingShapeSpecification_c(getGraphicsModelRoot(),
               Integer.parseInt((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("STY_LCS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Linecolorstyle_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))
);
        }
      } else if ( table.equalsIgnoreCase("STY_FS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Fontstyle_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("STY_FCS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Fillcolorstyle_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))
);
        }
      } else if ( table.equalsIgnoreCase("STY_S") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Elementstyle_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))
);
        }
      } else if ( table.equalsIgnoreCase("GD_SHP") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
            helper.parsePreBP7_1Shape(rawParms);
            translated = true;
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Shape_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("GD_NCS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new NoncontainingShape_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("GD_MD") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
            helper.parsePreBP7_1Model(rawParms);
            translated = true;
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Model_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           ((String)parms.elementAt(4)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(5)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           ((String)parms.elementAt(8)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(9)), 
           ((String)parms.elementAt(10)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(11)), 
           Integer.parseInt((String)parms.elementAt(12)), 
           Integer.parseInt((String)parms.elementAt(13)), 
           Integer.parseInt((String)parms.elementAt(14)), 
           null, 
		((parms.size() > 16) && parms.elementAt(16) != null) ? removeTics((String) parms.elementAt(16)):"", 
		((parms.size() > 17) && parms.elementAt(17) != null) ? removeTics((String) parms.elementAt(17)):""
);
        }
      } else if ( table.equalsIgnoreCase("GD_LS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
            helper.parsePreBP7_1LineSegment(rawParms);
            translated = true;
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new LineSegment_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))
);
        }
      } else if ( table.equalsIgnoreCase("GD_LAY") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Layer_c(getGraphicsModelRoot(),
               removeTics((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))
);
        }
      } else if ( table.equalsIgnoreCase("GD_GLAY") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Graphicalelementinlayer_c(getGraphicsModelRoot(),
               removeTics((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("GD_GE") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
            helper.parsePreBP7_1GraphicalElement(rawParms);
            translated = true;
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new GraphicalElement_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           null, 
		((parms.size() > 5) && parms.elementAt(5) != null) ? removeTics((String) parms.elementAt(5)):""
);
        }
      } else if ( table.equalsIgnoreCase("GD_CTXT") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
            helper.storePreBP7_1_1ConnectorText(rawParms);
            translated = true;
        }
        if (!translated) {
         new FloatingText_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Float.parseFloat((String)parms.elementAt(3)), 
           Float.parseFloat((String)parms.elementAt(4))
);
        }
      } else if ( table.equalsIgnoreCase("GD_EIS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new ElementInSuppression_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("GD_CTR") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new ContainingShape_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))
);
        }
      } else if ( table.equalsIgnoreCase("GD_CON") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
            helper.parsePreBP7_1Connector(rawParms);
            translated = true;
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new Connector_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      } else if ( table.equalsIgnoreCase("GD_AOS") ) {   //$NON-NLS-1$
        boolean translated = false;
        if (actualVersion.equals(bp7_0VersionNumber)) {
        }
        if (actualVersion.equals(bp7_0VersionNumber)
            || actualVersion.equals(bp7_1VersionNumber)) {
        }
        if (!translated) {
         new AnchorOnSegment_c(getGraphicsModelRoot(),
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))
);
        }
      }
    }
        pm.worked(1);
        } finally {
                    ModelRoot.enableChangeNotification();
        }
    }

  private void createS_AW (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AutomaticWiring_c newInst = null;
    if(table.equalsIgnoreCase("S_AW")) { //$NON-NLS-1$
        newInst = new AutomaticWiring_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_LOC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    VariableLocation_c newInst = null;
    if(table.equalsIgnoreCase("V_LOC")) { //$NON-NLS-1$
        newInst = new VariableLocation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_VAR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Variable_c newInst = null;
    if(table.equalsIgnoreCase("V_VAR")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new Variable_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          parms.elementAt(4) != null && IdAssigner.isUUID((String)parms.elementAt(4))?IdAssigner
                           .createUUIDFromString((String)parms.elementAt(4)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_VAL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Value_c newInst = null;
    if(table.equalsIgnoreCase("V_VAL")) { //$NON-NLS-1$
        newInst = new Value_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
           Integer.parseInt((String)parms.elementAt(9)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(10)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(11))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_UNY (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UnaryOperation_c newInst = null;
    if(table.equalsIgnoreCase("V_UNY")) { //$NON-NLS-1$
        newInst = new UnaryOperation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_TRN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    TransientVar_c newInst = null;
    if(table.equalsIgnoreCase("V_TRN")) { //$NON-NLS-1$
    parms.setSize(3);
        newInst = new TransientVar_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_TVL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    TransientValueReference_c newInst = null;
    if(table.equalsIgnoreCase("V_TVL")) { //$NON-NLS-1$
        newInst = new TransientValueReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_SCV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SymbolicConstantValue_c newInst = null;
    if(table.equalsIgnoreCase("V_SCV")) { //$NON-NLS-1$
        newInst = new SymbolicConstantValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_SLR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SelectedReference_c newInst = null;
    if(table.equalsIgnoreCase("V_SLR")) { //$NON-NLS-1$
        newInst = new SelectedReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_PVL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ParameterValue_c newInst = null;
    if(table.equalsIgnoreCase("V_PVL")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new ParameterValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           parms.elementAt(4) != null && IdAssigner.isUUID((String)parms.elementAt(4))?IdAssigner
                            .createUUIDFromString((String)parms.elementAt(4)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_TRV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationValue_c newInst = null;
    if(table.equalsIgnoreCase("V_TRV")) { //$NON-NLS-1$
        newInst = new OperationValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_MSV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MessageValue_c newInst = null;
    if(table.equalsIgnoreCase("V_MSV")) { //$NON-NLS-1$
      parms.setSize(7);
      if(parms.elementAt(5) == null) {
		    parms.insertElementAt(Gd_c.Null_unique_id().toString(), 1);
				parms.insertElementAt(Gd_c.Null_unique_id().toString(), 2);
				parms.removeElementAt(6);
				Object elementAt5 = parms.elementAt(5);
				if(((String)elementAt5).equals("true") || ((String)elementAt5).equals("false")) {
					parms.insertElementAt(elementAt5, 3);
					parms.removeElementAt(6);
				}
		  }
        newInst = new MessageValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_MVL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MemberValueReference_c newInst = null;
    if(table.equalsIgnoreCase("V_MVL")) { //$NON-NLS-1$
        newInst = new MemberValueReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_LST (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LiteralString_c newInst = null;
    if(table.equalsIgnoreCase("V_LST")) { //$NON-NLS-1$
        newInst = new LiteralString_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_LRL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LiteralReal_c newInst = null;
    if(table.equalsIgnoreCase("V_LRL")) { //$NON-NLS-1$
        newInst = new LiteralReal_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_LIN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LiteralInteger_c newInst = null;
    if(table.equalsIgnoreCase("V_LIN")) { //$NON-NLS-1$
        newInst = new LiteralInteger_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_LEN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LiteralEnumerator_c newInst = null;
    if(table.equalsIgnoreCase("V_LEN")) { //$NON-NLS-1$
        newInst = new LiteralEnumerator_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_LBO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LiteralBoolean_c newInst = null;
    if(table.equalsIgnoreCase("V_LBO")) { //$NON-NLS-1$
        newInst = new LiteralBoolean_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_ISR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceSetReference_c newInst = null;
    if(table.equalsIgnoreCase("V_ISR")) { //$NON-NLS-1$
        newInst = new InstanceSetReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_INS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceSet_c newInst = null;
    if(table.equalsIgnoreCase("V_INS")) { //$NON-NLS-1$
        newInst = new InstanceSet_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_IRF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceReference_c newInst = null;
    if(table.equalsIgnoreCase("V_IRF")) { //$NON-NLS-1$
        newInst = new InstanceReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_INT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceHandle_c newInst = null;
    if(table.equalsIgnoreCase("V_INT")) { //$NON-NLS-1$
        newInst = new InstanceHandle_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_FNV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionValue_c newInst = null;
    if(table.equalsIgnoreCase("V_FNV")) { //$NON-NLS-1$
        newInst = new FunctionValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_EPR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventParameterReference_c newInst = null;
    if(table.equalsIgnoreCase("V_EPR")) { //$NON-NLS-1$
        newInst = new EventParameterReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_EDV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventDatumValue_c newInst = null;
    if(table.equalsIgnoreCase("V_EDV")) { //$NON-NLS-1$
        newInst = new EventDatumValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_BRV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeValue_c newInst = null;
    if(table.equalsIgnoreCase("V_BRV")) { //$NON-NLS-1$
        newInst = new BridgeValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_BIN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BinaryOperation_c newInst = null;
    if(table.equalsIgnoreCase("V_BIN")) { //$NON-NLS-1$
        newInst = new BinaryOperation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_AVL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AttributeValueReference_c newInst = null;
    if(table.equalsIgnoreCase("V_AVL")) { //$NON-NLS-1$
        newInst = new AttributeValueReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_ALV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ArrayLengthValue_c newInst = null;
    if(table.equalsIgnoreCase("V_ALV")) { //$NON-NLS-1$
        newInst = new ArrayLengthValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_AER (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ArrayElementReference_c newInst = null;
    if(table.equalsIgnoreCase("V_AER")) { //$NON-NLS-1$
        newInst = new ArrayElementReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createV_PAR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActualParameter_c newInst = null;
    if(table.equalsIgnoreCase("V_PAR")) { //$NON-NLS-1$
        newInst = new ActualParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_UIU (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UseCaseInUseCase_c newInst = null;
    if(table.equalsIgnoreCase("UC_UIU")) { //$NON-NLS-1$
        newInst = new UseCaseInUseCase_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_UCC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UseCaseDiagram_c newInst = null;
    if(table.equalsIgnoreCase("UC_UCC")) { //$NON-NLS-1$
    parms.setSize(9);
        newInst = new UseCaseDiagram_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)).trim(), 
           removeTics((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_UCA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UseCaseAssociation_c newInst = null;
    if(table.equalsIgnoreCase("UC_UCA")) { //$NON-NLS-1$
        newInst = new UseCaseAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_PIUC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ParticipantInUseCase_c newInst = null;
    if(table.equalsIgnoreCase("UC_PIUC")) { //$NON-NLS-1$
        newInst = new ParticipantInUseCase_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_I (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Include_c newInst = null;
    if(table.equalsIgnoreCase("UC_I")) { //$NON-NLS-1$
        newInst = new Include_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_G (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Generalization_c newInst = null;
    if(table.equalsIgnoreCase("UC_G")) { //$NON-NLS-1$
        newInst = new Generalization_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_E (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Extend_c newInst = null;
    if(table.equalsIgnoreCase("UC_E")) { //$NON-NLS-1$
        newInst = new Extend_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_BA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BinaryAssociation_c newInst = null;
    if(table.equalsIgnoreCase("UC_BA")) { //$NON-NLS-1$
        newInst = new BinaryAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createUC_AIUC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AssociationInUseCase_c newInst = null;
    if(table.equalsIgnoreCase("UC_AIUC")) { //$NON-NLS-1$
        newInst = new AssociationInUseCase_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSLD_SDP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SystemDatatypePackage_c newInst = null;
    if(table.equalsIgnoreCase("SLD_SDP")) { //$NON-NLS-1$
        newInst = new SystemDatatypePackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSLD_SDINP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SystemDatatypeInPackage_c newInst = null;
    if(table.equalsIgnoreCase("SLD_SDINP")) { //$NON-NLS-1$
        newInst = new SystemDatatypeInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSLD_SCINP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SystemConstantInPackage_c newInst = null;
    if(table.equalsIgnoreCase("SLD_SCINP")) { //$NON-NLS-1$
        newInst = new SystemConstantInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_RTIDA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferredToIdentifierAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_RTIDA")) { //$NON-NLS-1$
        newInst = new ReferredToIdentifierAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_RATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferentialAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_RATTR")) { //$NON-NLS-1$
    parms.setSize(6);
        newInst = new ReferentialAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_TPARM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationParameter_c newInst = null;
    if(table.equalsIgnoreCase("O_TPARM")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new OperationParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           parms.elementAt(6) != null && IdAssigner.isUUID((String)parms.elementAt(6))?IdAssigner.createUUIDFromString((String)parms.elementAt(6)):Gd_c.Null_unique_id(), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_TFR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Operation_c newInst = null;
    if(table.equalsIgnoreCase("O_TFR")) { //$NON-NLS-1$
    parms.setSize(10);
        newInst = new Operation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8)), 
           parms.elementAt(9) != null && IdAssigner.isUUID((String)parms.elementAt(9))?IdAssigner.createUUIDFromString((String)parms.elementAt(9)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_NBATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NewBaseAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_NBATTR")) { //$NON-NLS-1$
        newInst = new NewBaseAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_OBJ (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ModelClass_c newInst = null;
    if(table.equalsIgnoreCase("O_OBJ")) { //$NON-NLS-1$
      parms.setSize(6);
        newInst = new ModelClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_IOBJ (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ImportedClass_c newInst = null;
    if(table.equalsIgnoreCase("O_IOBJ")) { //$NON-NLS-1$
        newInst = new ImportedClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_DBATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DerivedBaseAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_DBATTR")) { //$NON-NLS-1$
        newInst = new DerivedBaseAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_OIDA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassIdentifierAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_OIDA")) { //$NON-NLS-1$
      parms.setSize(4);
        newInst = new ClassIdentifierAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_ID (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassIdentifier_c newInst = null;
    if(table.equalsIgnoreCase("O_ID")) { //$NON-NLS-1$
        newInst = new ClassIdentifier_c(modelRoot,
               Integer.parseInt((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_BATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BaseAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_BATTR")) { //$NON-NLS-1$
        newInst = new BaseAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_REF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AttributeReferenceInClass_c newInst = null;
    if(table.equalsIgnoreCase("O_REF")) { //$NON-NLS-1$
      parms.setSize(15);
        newInst = new AttributeReferenceInClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(9)), 
           ((String)parms.elementAt(10)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(11)), 
           removeTics((String)parms.elementAt(12)), 
           removeTics((String)parms.elementAt(13)), 
           removeTics((String)parms.elementAt(14))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_ATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Attribute_c newInst = null;
    if(table.equalsIgnoreCase("O_ATTR")) { //$NON-NLS-1$
    parms.setSize(11);
        newInst = new Attribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8)), 
           removeTics((String)parms.elementAt(9)), 
           removeTics((String)parms.elementAt(10))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_TAH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    TransitionActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_TAH")) { //$NON-NLS-1$
        newInst = new TransitionActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_TXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Transition_c newInst = null;
    if(table.equalsIgnoreCase("SM_TXN")) { //$NON-NLS-1$
        newInst = new Transition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SupplementalDataItems_c newInst = null;
    if(table.equalsIgnoreCase("SM_SDI")) { //$NON-NLS-1$
        newInst = new SupplementalDataItems_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_STATE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachineState_c newInst = null;
    if(table.equalsIgnoreCase("SM_STATE")) { //$NON-NLS-1$
        newInst = new StateMachineState_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_EVTDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachineEventDataItem_c newInst = null;
    if(table.equalsIgnoreCase("SM_EVTDI")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new StateMachineEventDataItem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           parms.elementAt(6) != null && IdAssigner.isUUID((String)parms.elementAt(6))?IdAssigner
                            .createUUIDFromString((String)parms.elementAt(6)):Gd_c.Null_unique_id(), 
           parms.elementAt(7) != null && IdAssigner.isUUID((String)parms.elementAt(7))?IdAssigner
                            .createUUIDFromString((String)parms.elementAt(7)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_EVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachineEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_EVT")) { //$NON-NLS-1$
        newInst = new StateMachineEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           removeTics((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_SM")) { //$NON-NLS-1$
        newInst = new StateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SEME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateEventMatrixEntry_c newInst = null;
    if(table.equalsIgnoreCase("SM_SEME")) { //$NON-NLS-1$
        newInst = new StateEventMatrixEntry_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SGEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SignalEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_SGEVT")) { //$NON-NLS-1$
      parms.setSize(6);
        newInst = new SignalEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SemEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_SEVT")) { //$NON-NLS-1$
        newInst = new SemEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_PEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PolymorphicEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_PEVT")) { //$NON-NLS-1$
      parms.setSize(6);
        newInst = new PolymorphicEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_NLEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NonLocalEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_NLEVT")) { //$NON-NLS-1$
        newInst = new NonLocalEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_NETXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NoEventTransition_c newInst = null;
    if(table.equalsIgnoreCase("SM_NETXN")) { //$NON-NLS-1$
        newInst = new NoEventTransition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_NSTXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NewStateTransition_c newInst = null;
    if(table.equalsIgnoreCase("SM_NSTXN")) { //$NON-NLS-1$
        newInst = new NewStateTransition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MOORE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MooreStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_MOORE")) { //$NON-NLS-1$
        newInst = new MooreStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MOAH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MooreActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_MOAH")) { //$NON-NLS-1$
        newInst = new MooreActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MEALY (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MealyStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_MEALY")) { //$NON-NLS-1$
        newInst = new MealyStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MEAH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MealyActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_MEAH")) { //$NON-NLS-1$
        newInst = new MealyActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_LEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LocalEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_LEVT")) { //$NON-NLS-1$
        newInst = new LocalEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_ISM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_ISM")) { //$NON-NLS-1$
        newInst = new InstanceStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SUPDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventSupplementalData_c newInst = null;
    if(table.equalsIgnoreCase("SM_SUPDT")) { //$NON-NLS-1$
        newInst = new EventSupplementalData_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_EIGN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventIgnored_c newInst = null;
    if(table.equalsIgnoreCase("SM_EIGN")) { //$NON-NLS-1$
        newInst = new EventIgnored_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_CRTXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreationTransition_c newInst = null;
    if(table.equalsIgnoreCase("SM_CRTXN")) { //$NON-NLS-1$
        newInst = new CreationTransition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_ASM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_ASM")) { //$NON-NLS-1$
        newInst = new ClassStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_CH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CantHappen_c newInst = null;
    if(table.equalsIgnoreCase("SM_CH")) { //$NON-NLS-1$
        newInst = new CantHappen_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_AH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_AH")) { //$NON-NLS-1$
        newInst = new ActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_ACT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Action_c newInst = null;
    if(table.equalsIgnoreCase("SM_ACT")) { //$NON-NLS-1$
        newInst = new Action_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_SIS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SequenceInSequence_c newInst = null;
    if(table.equalsIgnoreCase("SQ_SIS")) { //$NON-NLS-1$
        newInst = new SequenceInSequence_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_S (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Sequence_c newInst = null;
    if(table.equalsIgnoreCase("SQ_S")) { //$NON-NLS-1$
    parms.setSize(9);
        newInst = new Sequence_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_MIS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MessageInSequence_c newInst = null;
    if(table.equalsIgnoreCase("SQ_MIS")) { //$NON-NLS-1$
        newInst = new MessageInSequence_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_SRW (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SelectRelatedWhere_c newInst = null;
    if(table.equalsIgnoreCase("ACT_SRW")) { //$NON-NLS-1$
        newInst = new SelectRelatedWhere_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_SR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SelectRelatedBy_c newInst = null;
    if(table.equalsIgnoreCase("ACT_SR")) { //$NON-NLS-1$
        newInst = new SelectRelatedBy_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_FIW (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SelectFromInstancesWhere_c newInst = null;
    if(table.equalsIgnoreCase("ACT_FIW")) { //$NON-NLS-1$
        newInst = new SelectFromInstancesWhere_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_FIO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SelectFromInstances_c newInst = null;
    if(table.equalsIgnoreCase("ACT_FIO")) { //$NON-NLS-1$
        newInst = new SelectFromInstances_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_SEL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Select_c newInst = null;
    if(table.equalsIgnoreCase("ACT_SEL")) { //$NON-NLS-1$
        newInst = new Select_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_LNK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ChainLink_c newInst = null;
    if(table.equalsIgnoreCase("ACT_LNK")) { //$NON-NLS-1$
        newInst = new ChainLink_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
           Integer.parseInt((String)parms.elementAt(9)), 
           Integer.parseInt((String)parms.elementAt(10)), 
           Integer.parseInt((String)parms.elementAt(11)), 
           Integer.parseInt((String)parms.elementAt(12))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSR_SR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SearchResult_c newInst = null;
    if(table.equalsIgnoreCase("SR_SR")) { //$NON-NLS-1$
        newInst = new SearchResult_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSR_NM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NameMatch_c newInst = null;
    if(table.equalsIgnoreCase("SR_NM")) { //$NON-NLS-1$
        newInst = new NameMatch_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSR_M (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Match_c newInst = null;
    if(table.equalsIgnoreCase("SR_M")) { //$NON-NLS-1$
        newInst = new Match_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSR_CMR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ContentMatchResult_c newInst = null;
    if(table.equalsIgnoreCase("SR_CMR")) { //$NON-NLS-1$
        newInst = new ContentMatchResult_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSR_CM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ContentMatch_c newInst = null;
    if(table.equalsIgnoreCase("SR_CM")) { //$NON-NLS-1$
        newInst = new ContentMatch_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQU_R (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferencesQuery_c newInst = null;
    if(table.equalsIgnoreCase("SQU_R")) { //$NON-NLS-1$
        newInst = new ReferencesQuery_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQU_Q (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Query_c newInst = null;
    if(table.equalsIgnoreCase("SQU_Q")) { //$NON-NLS-1$
        newInst = new Query_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(4)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQU_DE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DescriptionQuery_c newInst = null;
    if(table.equalsIgnoreCase("SQU_DE")) { //$NON-NLS-1$
        newInst = new DescriptionQuery_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQU_D (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DeclarationQuery_c newInst = null;
    if(table.equalsIgnoreCase("SQU_D")) { //$NON-NLS-1$
        newInst = new DeclarationQuery_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQU_A (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActionLanguageQuery_c newInst = null;
    if(table.equalsIgnoreCase("SQU_A")) { //$NON-NLS-1$
        newInst = new ActionLanguageQuery_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSP_SE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SearchableElement_c newInst = null;
    if(table.equalsIgnoreCase("SP_SE")) { //$NON-NLS-1$
        newInst = new SearchableElement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           null        );
    loadedInstances.add(newInst);
      }
  }
  private void createSP_SP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SearchParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SP_SP")) { //$NON-NLS-1$
        newInst = new SearchParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSP_NS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NamedSearchable_c newInst = null;
    if(table.equalsIgnoreCase("SP_NS")) { //$NON-NLS-1$
        newInst = new NamedSearchable_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSP_DS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DescriptionSearchable_c newInst = null;
    if(table.equalsIgnoreCase("SP_DS")) { //$NON-NLS-1$
        newInst = new DescriptionSearchable_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSP_ALS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActionLanguageSearchable_c newInst = null;
    if(table.equalsIgnoreCase("SP_ALS")) { //$NON-NLS-1$
        newInst = new ActionLanguageSearchable_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSEN_E (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SearchEngine_c newInst = null;
    if(table.equalsIgnoreCase("SEN_E")) { //$NON-NLS-1$
        newInst = new SearchEngine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSEN_RE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferencesEngine_c newInst = null;
    if(table.equalsIgnoreCase("SEN_RE")) { //$NON-NLS-1$
        newInst = new ReferencesEngine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSEN_DE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DescriptionEngine_c newInst = null;
    if(table.equalsIgnoreCase("SEN_DE")) { //$NON-NLS-1$
        newInst = new DescriptionEngine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSEN_DCE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DeclarationsEngine_c newInst = null;
    if(table.equalsIgnoreCase("SEN_DCE")) { //$NON-NLS-1$
        newInst = new DeclarationsEngine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSEN_ALE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActionLanguageEngine_c newInst = null;
    if(table.equalsIgnoreCase("SEN_ALE")) { //$NON-NLS-1$
        newInst = new ActionLanguageEngine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_URU (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UnrelateUsing_c newInst = null;
    if(table.equalsIgnoreCase("ACT_URU")) { //$NON-NLS-1$
        newInst = new UnrelateUsing_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
           Integer.parseInt((String)parms.elementAt(9))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_UNR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Unrelate_c newInst = null;
    if(table.equalsIgnoreCase("ACT_UNR")) { //$NON-NLS-1$
        newInst = new Unrelate_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_RU (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    RelateUsing_c newInst = null;
    if(table.equalsIgnoreCase("ACT_RU")) { //$NON-NLS-1$
        newInst = new RelateUsing_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
           Integer.parseInt((String)parms.elementAt(9))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_REL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Relate_c newInst = null;
    if(table.equalsIgnoreCase("ACT_REL")) { //$NON-NLS-1$
        newInst = new Relate_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createPA_SICP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SatisfactionInComponentPackage_c newInst = null;
    if(table.equalsIgnoreCase("PA_SICP")) { //$NON-NLS-1$
    if (!actualVersion.equals(persistenceVersion) && !actualVersion.equals(bp7_1_5VersionNumber)) { return; }
        newInst = new SatisfactionInComponentPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createPA_SIC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SatisfactionInComponent_c newInst = null;
    if(table.equalsIgnoreCase("PA_SIC")) { //$NON-NLS-1$
    if (!actualVersion.equals(persistenceVersion) && !actualVersion.equals(bp7_1_5VersionNumber)) { return; }
        newInst = new SatisfactionInComponent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createPA_DIC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DelegationInComponent_c newInst = null;
    if(table.equalsIgnoreCase("PA_DIC")) { //$NON-NLS-1$
        newInst = new DelegationInComponent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createPE_PE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PackageableElement_c newInst = null;
    if(table.equalsIgnoreCase("PE_PE")) { //$NON-NLS-1$
        newInst = new PackageableElement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_SM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SynchronousMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_SM")) { //$NON-NLS-1$
    if(!actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && (!actualVersion.equals(bp7_1_3VersionNumber)) && (!actualVersion.equals(bp7_1_4VersionNumber))) {
        parms.add("");
    }
	  parms.setSize(9);
	  
        newInst = new SynchronousMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           ((String)parms.elementAt(6)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_SIG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SignalMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_SIG")) { //$NON-NLS-1$
        newInst = new SignalMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_R (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReturnMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_R")) { //$NON-NLS-1$
    if(!actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && (!actualVersion.equals(bp7_1_3VersionNumber)) && (!actualVersion.equals(bp7_1_4VersionNumber))) {
        parms.add("");
    }
	  parms.setSize(7);
	  
        newInst = new ReturnMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_O (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_O")) { //$NON-NLS-1$
        newInst = new OperationMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_OA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_OA")) { //$NON-NLS-1$
        newInst = new OperationArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_A (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MessageArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_A")) { //$NON-NLS-1$
        newInst = new MessageArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           ((String)parms.elementAt(7)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_M (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Message_c newInst = null;
    if(table.equalsIgnoreCase("MSG_M")) { //$NON-NLS-1$
        newInst = new Message_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
		  false        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_IOP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfaceOperationMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_IOP")) { //$NON-NLS-1$
        newInst = new InterfaceOperationMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_ISM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InformalSynchronousMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_ISM")) { //$NON-NLS-1$
        newInst = new InformalSynchronousMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_IAM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InformalAsynchronousMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_IAM")) { //$NON-NLS-1$
        newInst = new InformalAsynchronousMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_IA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InformalArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_IA")) { //$NON-NLS-1$
        newInst = new InformalArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_F (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_F")) { //$NON-NLS-1$
        newInst = new FunctionMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_FA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_FA")) { //$NON-NLS-1$
        newInst = new FunctionArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_EPA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExecutablePropertyArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_EPA")) { //$NON-NLS-1$
        newInst = new ExecutablePropertyArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_E (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_E")) { //$NON-NLS-1$
        newInst = new EventMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          parms.size() == 3 ? IdAssigner.createUUIDFromString((String)parms.elementAt(2)):IdAssigner.createUUIDFromString((String)parms.elementAt(1))
        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_EA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_EA")) { //$NON-NLS-1$
        newInst = new EventArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_B (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_B")) { //$NON-NLS-1$
        newInst = new BridgeMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_BA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeArgument_c newInst = null;
    if(table.equalsIgnoreCase("MSG_BA")) { //$NON-NLS-1$
        newInst = new BridgeArgument_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createMSG_AM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AsynchronousMessage_c newInst = null;
    if(table.equalsIgnoreCase("MSG_AM")) { //$NON-NLS-1$
    if(!actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && (!actualVersion.equals(bp7_1_3VersionNumber)) && (!actualVersion.equals(bp7_1_4VersionNumber))) {
        parms.add("");
    }
	  parms.setSize(9);
	  
        newInst = new AsynchronousMessage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           ((String)parms.elementAt(6)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_SGN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SignalInvocation_c newInst = null;
    if(table.equalsIgnoreCase("ACT_SGN")) { //$NON-NLS-1$
      parms.setSize(8);
      if(parms.elementAt(6) == null) {
		    parms.setElementAt(Gd_c.Null_unique_id().toString(), 1);
				parms.insertElementAt(Gd_c.Null_unique_id().toString(), 2);
		  }
        newInst = new SignalInvocation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_RET (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReturnStmt_c newInst = null;
    if(table.equalsIgnoreCase("ACT_RET")) { //$NON-NLS-1$
        newInst = new ReturnStmt_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_TFM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationInvocation_c newInst = null;
    if(table.equalsIgnoreCase("ACT_TFM")) { //$NON-NLS-1$
        newInst = new OperationInvocation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_IOP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfaceOperationInvocation_c newInst = null;
    if(table.equalsIgnoreCase("ACT_IOP")) { //$NON-NLS-1$
      parms.setSize(8);
      if(parms.elementAt(6) == null) {
		    parms.setElementAt(Gd_c.Null_unique_id().toString(), 1);
				parms.insertElementAt(Gd_c.Null_unique_id().toString(), 2);
		  }
        newInst = new InterfaceOperationInvocation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_FNC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionInvocation_c newInst = null;
    if(table.equalsIgnoreCase("ACT_FNC")) { //$NON-NLS-1$
        newInst = new FunctionInvocation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_BRG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeInvocation_c newInst = null;
    if(table.equalsIgnoreCase("ACT_BRG")) { //$NON-NLS-1$
        newInst = new BridgeInvocation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createIP_IPINIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfacePackageInInterfacePackage_c newInst = null;
    if(table.equalsIgnoreCase("IP_IPINIP") || table.equalsIgnoreCase("ID_IDINID")) { //$NON-NLS-1$//$NON-NLS-2$
        newInst = new InterfacePackageInInterfacePackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createIP_IP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfacePackage_c newInst = null;
    if(table.equalsIgnoreCase("IP_IP")) { //$NON-NLS-1$
        newInst = new InterfacePackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)).trim(), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createIA_UCP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UseCaseParticipant_c newInst = null;
    if(table.equalsIgnoreCase("IA_UCP")) { //$NON-NLS-1$
        newInst = new UseCaseParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_TM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    TimingMark_c newInst = null;
    if(table.equalsIgnoreCase("SQ_TM")) { //$NON-NLS-1$
        newInst = new TimingMark_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_TS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    TimeSpan_c newInst = null;
    if(table.equalsIgnoreCase("SQ_TS")) { //$NON-NLS-1$
        newInst = new TimeSpan_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_PP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PackageParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_PP")) { //$NON-NLS-1$
        newInst = new PackageParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           ((String)parms.elementAt(5)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_LS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Lifespan_c newInst = null;
    if(table.equalsIgnoreCase("SQ_LS")) { //$NON-NLS-1$
        newInst = new Lifespan_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_P (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InteractionParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_P")) { //$NON-NLS-1$
        newInst = new InteractionParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_AV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceAttributeValue_c newInst = null;
    if(table.equalsIgnoreCase("SQ_AV")) { //$NON-NLS-1$
        newInst = new InstanceAttributeValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8)), 
           ((String)parms.elementAt(9)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_IAV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InformalAttributeValue_c newInst = null;
    if(table.equalsIgnoreCase("SQ_IAV")) { //$NON-NLS-1$
        newInst = new InformalAttributeValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_IA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InformalAttribute_c newInst = null;
    if(table.equalsIgnoreCase("SQ_IA")) { //$NON-NLS-1$
        newInst = new InformalAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_FPP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionPackageParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_FPP")) { //$NON-NLS-1$
        newInst = new FunctionPackageParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           ((String)parms.elementAt(5)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_FAV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FormalAttributeValue_c newInst = null;
    if(table.equalsIgnoreCase("SQ_FAV")) { //$NON-NLS-1$
        newInst = new FormalAttributeValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_FA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FormalAttribute_c newInst = null;
    if(table.equalsIgnoreCase("SQ_FA")) { //$NON-NLS-1$
        newInst = new FormalAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_EEP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_EEP")) { //$NON-NLS-1$
        newInst = new ExternalEntityParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           ((String)parms.elementAt(5)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_COP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_COP")) { //$NON-NLS-1$
        newInst = new ComponentParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           ((String)parms.elementAt(5)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_CPA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassParticipantAttribute_c newInst = null;
    if(table.equalsIgnoreCase("SQ_CPA")) { //$NON-NLS-1$
        newInst = new ClassParticipantAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_CP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_CP")) { //$NON-NLS-1$
        newInst = new ClassParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           ((String)parms.elementAt(5)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_CIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassInstanceParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_CIP")) { //$NON-NLS-1$
        newInst = new ClassInstanceParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           ((String)parms.elementAt(6)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSQ_AP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActorParticipant_c newInst = null;
    if(table.equalsIgnoreCase("SQ_AP")) { //$NON-NLS-1$
        newInst = new ActorParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_DEL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Delete_c newInst = null;
    if(table.equalsIgnoreCase("ACT_DEL")) { //$NON-NLS-1$
        newInst = new Delete_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_CNV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateNoVariable_c newInst = null;
    if(table.equalsIgnoreCase("ACT_CNV")) { //$NON-NLS-1$
        newInst = new CreateNoVariable_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_CR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Create_c newInst = null;
    if(table.equalsIgnoreCase("ACT_CR")) { //$NON-NLS-1$
        newInst = new Create_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_AI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AssignToMember_c newInst = null;
    if(table.equalsIgnoreCase("ACT_AI")) { //$NON-NLS-1$
        newInst = new AssignToMember_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_TIM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Timer_c newInst = null;
    if(table.equalsIgnoreCase("I_TIM")) { //$NON-NLS-1$
        newInst = new Timer_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
		  Long.parseLong((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_EVI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PendingEvent_c newInst = null;
    if(table.equalsIgnoreCase("I_EVI")) { //$NON-NLS-1$
        newInst = new PendingEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(9)), 
           removeTics((String)parms.elementAt(10))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_LIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LinkParticipation_c newInst = null;
    if(table.equalsIgnoreCase("I_LIP")) { //$NON-NLS-1$
        newInst = new LinkParticipation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_LNK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Link_c newInst = null;
    if(table.equalsIgnoreCase("I_LNK")) { //$NON-NLS-1$
        newInst = new Link_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_INS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Instance_c newInst = null;
    if(table.equalsIgnoreCase("I_INS")) { //$NON-NLS-1$
        newInst = new Instance_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_DIV (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DataItemValue_c newInst = null;
    if(table.equalsIgnoreCase("I_DIV")) { //$NON-NLS-1$
        newInst = new DataItemValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_CIN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentInstanceContainer_c newInst = null;
    if(table.equalsIgnoreCase("I_CIN")) { //$NON-NLS-1$
        newInst = new ComponentInstanceContainer_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_EXE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentInstance_c newInst = null;
    if(table.equalsIgnoreCase("I_EXE")) { //$NON-NLS-1$
        newInst = new ComponentInstance_c(modelRoot,
               ((String)parms.elementAt(0)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8)), 
           null, 
           null, 
          IdAssigner.createUUIDFromString((String)parms.elementAt(11)), 
           null        );
    loadedInstances.add(newInst);
      }
  }
  private void createI_AVL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AttributeValue_c newInst = null;
    if(table.equalsIgnoreCase("I_AVL")) { //$NON-NLS-1$
        newInst = new AttributeValue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createG_EIS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GlobalElementInSystem_c newInst = null;
    if(table.equalsIgnoreCase("G_EIS")) { //$NON-NLS-1$
        newInst = new GlobalElementInSystem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GEE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GenerateToExternalEntity_c newInst = null;
    if(table.equalsIgnoreCase("E_GEE")) { //$NON-NLS-1$
        newInst = new GenerateToExternalEntity_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GEC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GenerateToCreator_c newInst = null;
    if(table.equalsIgnoreCase("E_GEC")) { //$NON-NLS-1$
        newInst = new GenerateToCreator_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GAR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GenerateToClass_c newInst = null;
    if(table.equalsIgnoreCase("E_GAR")) { //$NON-NLS-1$
        newInst = new GenerateToClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GSME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GenerateSmEventStatement_c newInst = null;
    if(table.equalsIgnoreCase("E_GSME")) { //$NON-NLS-1$
        newInst = new GenerateSmEventStatement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GPR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GeneratePreexistingEvent_c newInst = null;
    if(table.equalsIgnoreCase("E_GPR")) { //$NON-NLS-1$
        newInst = new GeneratePreexistingEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GES (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    GenerateEventStatement_c newInst = null;
    if(table.equalsIgnoreCase("E_GES")) { //$NON-NLS-1$
        newInst = new GenerateEventStatement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_GEN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Generate_c newInst = null;
    if(table.equalsIgnoreCase("E_GEN")) { //$NON-NLS-1$
        newInst = new Generate_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_ESS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventSpecificationStatement_c newInst = null;
    if(table.equalsIgnoreCase("E_ESS")) { //$NON-NLS-1$
        newInst = new EventSpecificationStatement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
           Integer.parseInt((String)parms.elementAt(9)), 
           Integer.parseInt((String)parms.elementAt(10)), 
           Integer.parseInt((String)parms.elementAt(11)), 
           Integer.parseInt((String)parms.elementAt(12))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_CSME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateSmEventStatement_c newInst = null;
    if(table.equalsIgnoreCase("E_CSME")) { //$NON-NLS-1$
        newInst = new CreateSmEventStatement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_CEI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateEventToInstance_c newInst = null;
    if(table.equalsIgnoreCase("E_CEI")) { //$NON-NLS-1$
        newInst = new CreateEventToInstance_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_CEE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateEventToExternalEntity_c newInst = null;
    if(table.equalsIgnoreCase("E_CEE")) { //$NON-NLS-1$
        newInst = new CreateEventToExternalEntity_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_CEC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateEventToCreator_c newInst = null;
    if(table.equalsIgnoreCase("E_CEC")) { //$NON-NLS-1$
        newInst = new CreateEventToCreator_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_CEA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateEventToClass_c newInst = null;
    if(table.equalsIgnoreCase("E_CEA")) { //$NON-NLS-1$
        newInst = new CreateEventToClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createE_CES (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreateEventStatement_c newInst = null;
    if(table.equalsIgnoreCase("E_CES")) { //$NON-NLS-1$
        newInst = new CreateEventStatement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createEP_SPKG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SpecificationPackage_c newInst = null;
    if(table.equalsIgnoreCase("EP_SPKG")) { //$NON-NLS-1$
        newInst = new SpecificationPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createEP_PIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PackageInPackage_c newInst = null;
    if(table.equalsIgnoreCase("EP_PIP")) { //$NON-NLS-1$
        newInst = new PackageInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createEP_PKG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Package_c newInst = null;
    if(table.equalsIgnoreCase("EP_PKG")) { //$NON-NLS-1$
      parms.setSize(6);
        newInst = new Package_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
           removeTics((String)parms.elementAt(4)), 
           parms.elementAt(5) != null && ImportInteger.isInt(parms.elementAt(5)) ?Integer.parseInt((String)parms.elementAt(5)):0
        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_UDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UserDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_UDT")) { //$NON-NLS-1$
        newInst = new UserDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SYS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SystemModel_c newInst = null;
    if(table.equalsIgnoreCase("S_SYS")) { //$NON-NLS-1$
    parms.setSize(3);
        newInst = new SystemModel_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
		  parms.elementAt(2) != null && ((String)parms.elementAt(2)).equals( "true" ) ? true : false        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SIS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SubsystemInSubsystem_c newInst = null;
    if(table.equalsIgnoreCase("S_SIS")) { //$NON-NLS-1$
        newInst = new SubsystemInSubsystem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SID (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SubsystemInDomain_c newInst = null;
    if(table.equalsIgnoreCase("S_SID")) { //$NON-NLS-1$
        newInst = new SubsystemInDomain_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Subsystem_c newInst = null;
    if(table.equalsIgnoreCase("S_SS")) { //$NON-NLS-1$
        newInst = new Subsystem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StructuredDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_SDT")) { //$NON-NLS-1$
        newInst = new StructuredDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_MBR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StructureMember_c newInst = null;
    if(table.equalsIgnoreCase("S_MBR")) { //$NON-NLS-1$
    parms.setSize(7);
        newInst = new StructureMember_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createPL_FPID (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionPackageInDomain_c newInst = null;
    if(table.equalsIgnoreCase("PL_FPID")) { //$NON-NLS-1$
        newInst = new FunctionPackageInDomain_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createPL_EEPID (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityPackageInDomain_c newInst = null;
    if(table.equalsIgnoreCase("PL_EEPID")) { //$NON-NLS-1$
        newInst = new ExternalEntityPackageInDomain_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_IRDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceReferenceDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_IRDT")) { //$NON-NLS-1$
        newInst = new InstanceReferenceDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SPARM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionParameter_c newInst = null;
    if(table.equalsIgnoreCase("S_SPARM")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new FunctionParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           parms.elementAt(6) != null && IdAssigner.isUUID((String)parms.elementAt(6))?IdAssigner.createUUIDFromString((String)parms.elementAt(6)):Gd_c.Null_unique_id(), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_FPIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionPackageInPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_FPIP")) { //$NON-NLS-1$
        newInst = new FunctionPackageInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_FPK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_FPK")) { //$NON-NLS-1$
        newInst = new FunctionPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_FIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionInPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_FIP")) { //$NON-NLS-1$
        newInst = new FunctionInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SYNC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Function_c newInst = null;
    if(table.equalsIgnoreCase("S_SYNC")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new Function_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           Integer.parseInt((String)parms.elementAt(6)), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEPK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_EEPK")) { //$NON-NLS-1$
        newInst = new ExternalEntityPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityInPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_EEIP")) { //$NON-NLS-1$
        newInst = new ExternalEntityInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityInModel_c newInst = null;
    if(table.equalsIgnoreCase("S_EEM")) { //$NON-NLS-1$
        newInst = new ExternalEntityInModel_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEEDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityEventDataItem_c newInst = null;
    if(table.equalsIgnoreCase("S_EEEDI")) { //$NON-NLS-1$
        newInst = new ExternalEntityEventDataItem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEEDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityEventData_c newInst = null;
    if(table.equalsIgnoreCase("S_EEEDT")) { //$NON-NLS-1$
        newInst = new ExternalEntityEventData_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityEvent_c newInst = null;
    if(table.equalsIgnoreCase("S_EEEVT")) { //$NON-NLS-1$
        newInst = new ExternalEntityEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityDataItem_c newInst = null;
    if(table.equalsIgnoreCase("S_EEDI")) { //$NON-NLS-1$
        newInst = new ExternalEntityDataItem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntity_c newInst = null;
    if(table.equalsIgnoreCase("S_EE")) { //$NON-NLS-1$
      boolean addToUpgradeList = false;
      if(parms.size() <= 7) {
        addToUpgradeList = true;
      }
      parms.setSize(8);
        newInst = new ExternalEntity_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          parms.elementAt(5) != null ? removeTics((String)parms.elementAt(5)) : "", 
          parms.elementAt(6) != null ? removeTics((String)parms.elementAt(6)) : "", 
          parms.elementAt(7) != null && ((String)parms.elementAt(7)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      if(addToUpgradeList) {
      	helper.addEEToUpgradeForIsRealized(newInst);
      }
      }
  }
  private void createS_ENUM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Enumerator_c newInst = null;
    if(table.equalsIgnoreCase("S_ENUM")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new Enumerator_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           parms.elementAt(4) != null && IdAssigner.isUUID((String)parms.elementAt(4))?IdAssigner.createUUIDFromString((String)parms.elementAt(4)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EnumerationDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_EDT")) { //$NON-NLS-1$
        newInst = new EnumerationDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEPIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EePackageInPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_EEPIP")) { //$NON-NLS-1$
        newInst = new EePackageInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DOM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Domain_c newInst = null;
    if(table.equalsIgnoreCase("S_DOM")) { //$NON-NLS-1$
        newInst = new Domain_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           m_templateFile ? "" : removeTics((String) parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DIM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Dimensions_c newInst = null;
    if(table.equalsIgnoreCase("S_DIM")) { //$NON-NLS-1$
        newInst = new Dimensions_c(modelRoot,
               Integer.parseInt((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(9)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(10)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(11)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(12)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(13)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(14)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(15)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(16)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(17))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DIS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DatatypeInSuppression_c newInst = null;
    if(table.equalsIgnoreCase("S_DIS")) { //$NON-NLS-1$
        newInst = new DatatypeInSuppression_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DPIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DataTypePackageInPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_DPIP")) { //$NON-NLS-1$
        newInst = new DataTypePackageInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DPK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DataTypePackage_c newInst = null;
    if(table.equalsIgnoreCase("S_DPK")) { //$NON-NLS-1$
        newInst = new DataTypePackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
        dataPkgUUID = IdAssigner.createUUIDFromString((String)parms.elementAt(0));
      }
  }
  private void createS_DIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DataTypeInPackage_c newInst = null;
    if(table.equalsIgnoreCase("S_DIP")) { //$NON-NLS-1$
        newInst = new DataTypeInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DataType_c newInst = null;
    if(table.equalsIgnoreCase("S_DT")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new DataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_CDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CoreDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_CDT")) { //$NON-NLS-1$
        newInst = new CoreDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_BPARM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeParameter_c newInst = null;
    if(table.equalsIgnoreCase("S_BPARM")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new BridgeParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           parms.elementAt(6) != null && IdAssigner.isUUID((String)parms.elementAt(6))?IdAssigner.createUUIDFromString((String)parms.elementAt(6)):Gd_c.Null_unique_id(), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_BRG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Bridge_c newInst = null;
    if(table.equalsIgnoreCase("S_BRG")) { //$NON-NLS-1$
    parms.setSize(9);
        newInst = new Bridge_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCNST_SYC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SymbolicConstant_c newInst = null;
    if(table.equalsIgnoreCase("CNST_SYC")) { //$NON-NLS-1$
        newInst = new SymbolicConstant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCNST_LSC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LiteralSymbolicConstant_c newInst = null;
    if(table.equalsIgnoreCase("CNST_LSC")) { //$NON-NLS-1$
        newInst = new LiteralSymbolicConstant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCNST_LFSC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LeafSymbolicConstant_c newInst = null;
    if(table.equalsIgnoreCase("CNST_LFSC")) { //$NON-NLS-1$
        newInst = new LeafSymbolicConstant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCNST_CSP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ConstantSpecification_c newInst = null;
    if(table.equalsIgnoreCase("CNST_CSP")) { //$NON-NLS-1$
        newInst = new ConstantSpecification_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCNST_CIP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ConstantInPackage_c newInst = null;
    if(table.equalsIgnoreCase("CNST_CIP")) { //$NON-NLS-1$
        newInst = new ConstantInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSPR_RS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    RequiredSignal_c newInst = null;
    if(table.equalsIgnoreCase("SPR_RS")) { //$NON-NLS-1$
        newInst = new RequiredSignal_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSPR_RO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    RequiredOperation_c newInst = null;
    if(table.equalsIgnoreCase("SPR_RO")) { //$NON-NLS-1$
        newInst = new RequiredOperation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSPR_REP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    RequiredExecutableProperty_c newInst = null;
    if(table.equalsIgnoreCase("SPR_REP")) { //$NON-NLS-1$
        newInst = new RequiredExecutableProperty_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSPR_PS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ProvidedSignal_c newInst = null;
    if(table.equalsIgnoreCase("SPR_PS")) { //$NON-NLS-1$
        newInst = new ProvidedSignal_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSPR_PO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ProvidedOperation_c newInst = null;
    if(table.equalsIgnoreCase("SPR_PO")) { //$NON-NLS-1$
        newInst = new ProvidedOperation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSPR_PEP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ProvidedExecutableProperty_c newInst = null;
    if(table.equalsIgnoreCase("SPR_PEP")) { //$NON-NLS-1$
        newInst = new ProvidedExecutableProperty_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_SF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Satisfaction_c newInst = null;
    if(table.equalsIgnoreCase("C_SF")) { //$NON-NLS-1$
      // we need to store the satisfaction before the early return
      helper.addSatisfactionToInstances(null, IdAssigner.createUUIDFromString((String) parms.elementAt(actualVersion.equals(bp7_1_3VersionNumber)?1:0)),  IdAssigner
              .createUUIDFromString((String) parms.elementAt(actualVersion.equals(bp7_1_3VersionNumber)?0:
                  1)));
    if (actualVersion.equals(bp7_1_4VersionNumber) || actualVersion.equals(bp7_1_3VersionNumber)) { return; }
      parms.setSize(5);
        newInst = new Satisfaction_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_R (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Requirement_c newInst = null;
    if(table.equalsIgnoreCase("C_R")) { //$NON-NLS-1$
    if(actualVersion.equals(bp7_1_3VersionNumber)) { return; } // Components before 1.5 are imported using migrateImports()
      parms.setSize(5);
        newInst = new Requirement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_P (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Provision_c newInst = null;
    if(table.equalsIgnoreCase("C_P")) { //$NON-NLS-1$
    if(actualVersion.equals(bp7_1_3VersionNumber)) { return; } // Components before 1.5 are imported using migrateImports()
      parms.setSize(5);
        newInst = new Provision_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_PP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PropertyParameter_c newInst = null;
    if(table.equalsIgnoreCase("C_PP")) { //$NON-NLS-1$
      parms.setSize(8);
        newInst = new PropertyParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
           removeTics((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
        parms.elementAt(7) != null && IdAssigner.isUUID((String)parms.elementAt(7))?IdAssigner.createUUIDFromString((String)parms.elementAt(7)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_PO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Port_c newInst = null;
    if(table.equalsIgnoreCase("C_PO")) { //$NON-NLS-1$
        newInst = new Port_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           Integer.parseInt((String)parms.elementAt(3)), 
           ((String)parms.elementAt(4)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_AS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfaceSignal_c newInst = null;
    if(table.equalsIgnoreCase("C_AS")) { //$NON-NLS-1$
      parms.setSize(5);
        newInst = new InterfaceSignal_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           parms.elementAt(3) != null && ImportInteger.isInt(parms.elementAt(3)) ?Integer.parseInt((String)parms.elementAt(3)):0
, 
          parms.elementAt(4) != null && IdAssigner.isUUID((String)parms.elementAt(4))?IdAssigner.createUUIDFromString((String)parms.elementAt(4)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_RID (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfaceReferenceInDelegation_c newInst = null;
    if(table.equalsIgnoreCase("C_RID")) { //$NON-NLS-1$
        newInst = new InterfaceReferenceInDelegation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_IR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfaceReference_c newInst = null;
    if(table.equalsIgnoreCase("C_IR")) { //$NON-NLS-1$
        newInst = new InterfaceReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_IO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InterfaceOperation_c newInst = null;
    if(table.equalsIgnoreCase("C_IO")) { //$NON-NLS-1$
      parms.setSize(7);
        newInst = new InterfaceOperation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          parms.elementAt(4) != null && ImportInteger.isInt(parms.elementAt(4)) ?Integer.parseInt((String)parms.elementAt(4)):0, 
           removeTics((String)parms.elementAt(5)), 
          parms.elementAt(6) != null && IdAssigner.isUUID((String)parms.elementAt(6))?IdAssigner.createUUIDFromString((String)parms.elementAt(6)):Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_I (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Interface_c newInst = null;
    if(table.equalsIgnoreCase("C_I")) { //$NON-NLS-1$
        newInst = new Interface_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_EP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExecutableProperty_c newInst = null;
    if(table.equalsIgnoreCase("C_EP")) { //$NON-NLS-1$
      parms.setSize(5);
        newInst = new ExecutableProperty_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           parms.elementAt(2) != null && ImportInteger.isInt(parms.elementAt(2)) ?Integer.parseInt((String)parms.elementAt(2)):0, 
          parms.elementAt(3) != null ? removeTics((String) parms.elementAt(3)).trim() : "", 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_DG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Delegation_c newInst = null;
    if(table.equalsIgnoreCase("C_DG")) { //$NON-NLS-1$
      parms.setSize(2);
        newInst = new Delegation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
         parms.elementAt(1) != null ? removeTics((String)parms.elementAt(1)).trim():""
        );
    loadedInstances.add(newInst);
      }
  }
  private void createCP_CPINP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentPackageInPackage_c newInst = null;
    if(table.equalsIgnoreCase("CP_CPINP") || table.equalsIgnoreCase("CD_CDINCD")) { //$NON-NLS-1$//$NON-NLS-2$
        newInst = new ComponentPackageInPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCP_CP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentPackage_c newInst = null;
    if(table.equalsIgnoreCase("CP_CP")) { //$NON-NLS-1$
        newInst = new ComponentPackage_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)).trim(), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCN_DC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DomainAsComponent_c newInst = null;
    if(table.equalsIgnoreCase("CN_DC")) { //$NON-NLS-1$
        newInst = new DomainAsComponent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCN_CIC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentInComponent_c newInst = null;
    if(table.equalsIgnoreCase("CN_CIC")) { //$NON-NLS-1$
        newInst = new ComponentInComponent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCL_IR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ImportedRequirement_c newInst = null;
    if(table.equalsIgnoreCase("CL_IR")) { //$NON-NLS-1$
    if (!actualVersion.equals(persistenceVersion) && !actualVersion.equals(bp7_1_5VersionNumber)) { return; }
        newInst = new ImportedRequirement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCL_IIR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ImportedReference_c newInst = null;
    if(table.equalsIgnoreCase("CL_IIR")) { //$NON-NLS-1$
        newInst = new ImportedReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)).trim(), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCL_IPINS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ImportedProvisionInSatisfaction_c newInst = null;
    if(table.equalsIgnoreCase("CL_IPINS")) { //$NON-NLS-1$
    if (!actualVersion.equals(persistenceVersion) && !actualVersion.equals(bp7_1_5VersionNumber)) { return; }
        newInst = new ImportedProvisionInSatisfaction_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCL_IP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ImportedProvision_c newInst = null;
    if(table.equalsIgnoreCase("CL_IP")) { //$NON-NLS-1$
        newInst = new ImportedProvision_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCL_IC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ComponentReference_c newInst = null;
    if(table.equalsIgnoreCase("CL_IC")) { //$NON-NLS-1$
        newInst = new ComponentReference_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)).trim(), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createC_C (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Component_c newInst = null;
    if(table.equalsIgnoreCase("C_C")) { //$NON-NLS-1$
    if(actualVersion.equals(bp7_1_3VersionNumber)) { return; } // Components before 1.5 are imported using migrateImports()
      parms.setSize(9);
        newInst = new Component_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)).trim(), 
           removeTics((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          parms.elementAt(7) != null && ((String)parms.elementAt(7)).equals( "true" ) ? true : false, 
          parms.elementAt(8) != null ? removeTics((String)parms.elementAt(8)) : ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMSME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToSmEventComm_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMSME")) { //$NON-NLS-1$
        newInst = new SmToSmEventComm_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMSMC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToSmCommPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMSMC")) { //$NON-NLS-1$
        UUID val4 = IdAssigner.NULL_UUID;
    if ( numParms == 5 ) {
        val4 = IdAssigner.createUUIDFromString((String) parms.elementAt(4));
    }
        newInst = new SmToSmCommPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMOAA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToObjAttributeAccess_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMOAA")) { //$NON-NLS-1$
        newInst = new SmToObjAttributeAccess_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMOA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToObjAccessPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMOA")) { //$NON-NLS-1$
        newInst = new SmToObjAccessPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEEE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeEventComm_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEEE")) { //$NON-NLS-1$
        newInst = new SmToEeEventComm_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEED (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeDataItemAccess_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEED")) { //$NON-NLS-1$
        newInst = new SmToEeDataItemAccess_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEEC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeCommPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEEC")) { //$NON-NLS-1$
        newInst = new SmToEeCommPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEEA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeAccessPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEEA")) { //$NON-NLS-1$
        newInst = new SmToEeAccessPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_EESME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EeToSmEventComm_c newInst = null;
    if(table.equalsIgnoreCase("CA_EESME")) { //$NON-NLS-1$
        newInst = new EeToSmEventComm_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_EESMC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EeToSmCommPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_EESMC")) { //$NON-NLS-1$
        newInst = new EeToSmCommPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_COMM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CommunicationPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_COMM")) { //$NON-NLS-1$
        newInst = new CommunicationPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_ACC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AccessPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_ACC")) { //$NON-NLS-1$
        newInst = new AccessPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCOMM_PIC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ParticipantInCommunication_c newInst = null;
    if(table.equalsIgnoreCase("COMM_PIC")) { //$NON-NLS-1$
        newInst = new ParticipantInCommunication_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCOMM_MIC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MessageInCommunication_c newInst = null;
    if(table.equalsIgnoreCase("COMM_MIC")) { //$NON-NLS-1$
        newInst = new MessageInCommunication_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCOMM_LNK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CommunicationLink_c newInst = null;
    if(table.equalsIgnoreCase("COMM_LNK")) { //$NON-NLS-1$
        newInst = new CommunicationLink_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           ((String)parms.elementAt(6)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(9)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(10))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCOMM_CIC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CommunicationInCommunication_c newInst = null;
    if(table.equalsIgnoreCase("COMM_CIC")) { //$NON-NLS-1$
        newInst = new CommunicationInCommunication_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCOMM_COMM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Communication_c newInst = null;
    if(table.equalsIgnoreCase("COMM_COMM")) { //$NON-NLS-1$
    parms.setSize(9);
        newInst = new Communication_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)).trim(), 
           removeTics((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_WHL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    WhileStmt_c newInst = null;
    if(table.equalsIgnoreCase("ACT_WHL")) { //$NON-NLS-1$
        newInst = new WhileStmt_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_TAB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    TransitionActionBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_TAB")) { //$NON-NLS-1$
        newInst = new TransitionActionBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_SMT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Statement_c newInst = null;
    if(table.equalsIgnoreCase("ACT_SMT")) { //$NON-NLS-1$
        newInst = new Statement_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_SAB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateActionBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_SAB")) { //$NON-NLS-1$
        newInst = new StateActionBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_RSB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    RequiredSignalBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_RSB")) { //$NON-NLS-1$
        newInst = new RequiredSignalBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_ROB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    RequiredOperationBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_ROB")) { //$NON-NLS-1$
        newInst = new RequiredOperationBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_PSB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ProvidedSignalBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_PSB")) { //$NON-NLS-1$
        newInst = new ProvidedSignalBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_POB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ProvidedOperationBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_POB")) { //$NON-NLS-1$
        newInst = new ProvidedOperationBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_OPB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_OPB")) { //$NON-NLS-1$
        newInst = new OperationBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_IF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    IfStmt_c newInst = null;
    if(table.equalsIgnoreCase("ACT_IF")) { //$NON-NLS-1$
        newInst = new IfStmt_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_FNB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_FNB")) { //$NON-NLS-1$
        newInst = new FunctionBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_FOR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ForStmt_c newInst = null;
    if(table.equalsIgnoreCase("ACT_FOR")) { //$NON-NLS-1$
        newInst = new ForStmt_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_EL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ElseifStmt_c newInst = null;
    if(table.equalsIgnoreCase("ACT_EL")) { //$NON-NLS-1$
        newInst = new ElseifStmt_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_E (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ElseStmt_c newInst = null;
    if(table.equalsIgnoreCase("ACT_E")) { //$NON-NLS-1$
        newInst = new ElseStmt_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_DAB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DerivedAttributeBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_DAB")) { //$NON-NLS-1$
        newInst = new DerivedAttributeBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_CTL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Control_c newInst = null;
    if(table.equalsIgnoreCase("ACT_CTL")) { //$NON-NLS-1$
        newInst = new Control_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_CON (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Continue_c newInst = null;
    if(table.equalsIgnoreCase("ACT_CON")) { //$NON-NLS-1$
        newInst = new Continue_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_BRB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeBody_c newInst = null;
    if(table.equalsIgnoreCase("ACT_BRB")) { //$NON-NLS-1$
        newInst = new BridgeBody_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_BRK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Break_c newInst = null;
    if(table.equalsIgnoreCase("ACT_BRK")) { //$NON-NLS-1$
        newInst = new Break_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_ACT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Body_c newInst = null;
    if(table.equalsIgnoreCase("ACT_ACT")) { //$NON-NLS-1$
        newInst = new Body_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
           null, 
           removeTics((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createACT_BLK (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Block_c newInst = null;
    if(table.equalsIgnoreCase("ACT_BLK")) { //$NON-NLS-1$
        newInst = new Block_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           ((String)parms.elementAt(1)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           ((String)parms.elementAt(3)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
           Integer.parseInt((String)parms.elementAt(8)), 
           Integer.parseInt((String)parms.elementAt(9)), 
           Integer.parseInt((String)parms.elementAt(10)), 
           Integer.parseInt((String)parms.elementAt(11)), 
           Integer.parseInt((String)parms.elementAt(12)), 
           Integer.parseInt((String)parms.elementAt(13)), 
           Integer.parseInt((String)parms.elementAt(14)), 
           Integer.parseInt((String)parms.elementAt(15)), 
           Integer.parseInt((String)parms.elementAt(16)), 
           Integer.parseInt((String)parms.elementAt(17)), 
           Integer.parseInt((String)parms.elementAt(18)), 
           ((String)parms.elementAt(19)).equals( "false" ) ? false : true,   //$NON-NLS-1$
          IdAssigner.createUUIDFromString((String)parms.elementAt(20)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(21))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SUBSUP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SubtypeSupertypeAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_SUBSUP")) { //$NON-NLS-1$
        newInst = new SubtypeSupertypeAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SIMP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SimpleAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_SIMP")) { //$NON-NLS-1$
        newInst = new SimpleAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_RGO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferringClassInAssoc_c newInst = null;
    if(table.equalsIgnoreCase("R_RGO")) { //$NON-NLS-1$
        newInst = new ReferringClassInAssoc_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_RTO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferredToClassInAssoc_c newInst = null;
    if(table.equalsIgnoreCase("R_RTO")) { //$NON-NLS-1$
        newInst = new ReferredToClassInAssoc_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_ASSOC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LinkedAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_ASSOC")) { //$NON-NLS-1$
        newInst = new LinkedAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_COMP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DerivedAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_COMP")) { //$NON-NLS-1$
        newInst = new DerivedAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_OIR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassInAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_OIR")) { //$NON-NLS-1$
        newInst = new ClassInAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SUPER (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSupertype_c newInst = null;
    if(table.equalsIgnoreCase("R_SUPER")) { //$NON-NLS-1$
        newInst = new ClassAsSupertype_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SUB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSubtype_c newInst = null;
    if(table.equalsIgnoreCase("R_SUB")) { //$NON-NLS-1$
        newInst = new ClassAsSubtype_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_PART (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSimpleParticipant_c newInst = null;
    if(table.equalsIgnoreCase("R_PART")) { //$NON-NLS-1$
        newInst = new ClassAsSimpleParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_FORM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSimpleFormalizer_c newInst = null;
    if(table.equalsIgnoreCase("R_FORM")) { //$NON-NLS-1$
        newInst = new ClassAsSimpleFormalizer_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_ASSR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsLink_c newInst = null;
    if(table.equalsIgnoreCase("R_ASSR")) { //$NON-NLS-1$
        newInst = new ClassAsLink_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_COTH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsDerivedOtherSide_c newInst = null;
    if(table.equalsIgnoreCase("R_COTH")) { //$NON-NLS-1$
        newInst = new ClassAsDerivedOtherSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_CONE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsDerivedOneSide_c newInst = null;
    if(table.equalsIgnoreCase("R_CONE")) { //$NON-NLS-1$
        newInst = new ClassAsDerivedOneSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_AOTH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsAssociatedOtherSide_c newInst = null;
    if(table.equalsIgnoreCase("R_AOTH")) { //$NON-NLS-1$
        newInst = new ClassAsAssociatedOtherSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_AONE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsAssociatedOneSide_c newInst = null;
    if(table.equalsIgnoreCase("R_AONE")) { //$NON-NLS-1$
        newInst = new ClassAsAssociatedOneSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_REL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Association_c newInst = null;
    if(table.equalsIgnoreCase("R_REL")) { //$NON-NLS-1$
        newInst = new Association_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           Integer.parseInt((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_SS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SendSignal_c newInst = null;
    if(table.equalsIgnoreCase("A_SS")) { //$NON-NLS-1$
        newInst = new SendSignal_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_OBJ (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ObjectNode_c newInst = null;
    if(table.equalsIgnoreCase("A_OBJ")) { //$NON-NLS-1$
        newInst = new ObjectNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_INI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InitialNode_c newInst = null;
    if(table.equalsIgnoreCase("A_INI")) { //$NON-NLS-1$
        newInst = new InitialNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_FJ (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ForkJoinNode_c newInst = null;
    if(table.equalsIgnoreCase("A_FJ")) { //$NON-NLS-1$
        newInst = new ForkJoinNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_FF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FlowFinalNode_c newInst = null;
    if(table.equalsIgnoreCase("A_FF")) { //$NON-NLS-1$
        newInst = new FlowFinalNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_DM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DecisionMergeNode_c newInst = null;
    if(table.equalsIgnoreCase("A_DM")) { //$NON-NLS-1$
        newInst = new DecisionMergeNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_CTL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ControlNode_c newInst = null;
    if(table.equalsIgnoreCase("A_CTL")) { //$NON-NLS-1$
        newInst = new ControlNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_AP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActivityPartition_c newInst = null;
    if(table.equalsIgnoreCase("A_AP")) { //$NON-NLS-1$
        newInst = new ActivityPartition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_N (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActivityNode_c newInst = null;
    if(table.equalsIgnoreCase("A_N")) { //$NON-NLS-1$
        newInst = new ActivityNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_AIA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActivityInActivity_c newInst = null;
    if(table.equalsIgnoreCase("A_AIA")) { //$NON-NLS-1$
        newInst = new ActivityInActivity_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_AF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActivityFinalNode_c newInst = null;
    if(table.equalsIgnoreCase("A_AF")) { //$NON-NLS-1$
        newInst = new ActivityFinalNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_E (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActivityEdge_c newInst = null;
    if(table.equalsIgnoreCase("A_E")) { //$NON-NLS-1$
        newInst = new ActivityEdge_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_GA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActivityDiagramAction_c newInst = null;
    if(table.equalsIgnoreCase("A_GA")) { //$NON-NLS-1$
        newInst = new ActivityDiagramAction_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_A (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Activity_c newInst = null;
    if(table.equalsIgnoreCase("A_A")) { //$NON-NLS-1$
    parms.setSize(9);
        newInst = new Activity_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_ACT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActionNode_c newInst = null;
    if(table.equalsIgnoreCase("A_ACT")) { //$NON-NLS-1$
        newInst = new ActionNode_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_ATE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AcceptTimeEventAction_c newInst = null;
    if(table.equalsIgnoreCase("A_ATE")) { //$NON-NLS-1$
        newInst = new AcceptTimeEventAction_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_AEA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AcceptEventAction_c newInst = null;
    if(table.equalsIgnoreCase("A_AEA")) { //$NON-NLS-1$
        newInst = new AcceptEventAction_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createA_AE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AcceptEvent_c newInst = null;
    if(table.equalsIgnoreCase("A_AE")) { //$NON-NLS-1$
        newInst = new AcceptEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCP_CPFromCD_CD(Ooaofooa modelRoot, String table, Vector parms,
                                    Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CD_CD")) { //$NON-NLS-1$
       new ComponentPackage_c(modelRoot,
          IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
          IdAssigner.createUUIDFromString((String) parms.elementAt(3)),
          IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
          IdAssigner.createUUIDFromString((String) parms.elementAt(2)),
          removeTics((String) parms.elementAt(4)).trim(),
          removeTics((String) parms.elementAt(5)));
    }
  }
  private void createIP_IPFromID_ID(Ooaofooa modelRoot, String table, Vector parms,
                                Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("ID_ID")) { //$NON-NLS-1$
       new InterfacePackage_c(modelRoot,
                IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
                IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
                IdAssigner.createUUIDFromString((String) parms.elementAt(2)),
                IdAssigner.createUUIDFromString((String) parms.elementAt(3)),
                Gd_c.Null_unique_id(),
                Gd_c.Null_unique_id(),
                removeTics((String) parms.elementAt(4)).trim(),
                removeTics((String) parms.elementAt(5)));
      }
  }
  private void storeC_C(Ooaofooa modelRoot, String table, Vector parms,
                          Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("C_C") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      // TODO - This code was added to upgrade C_C instances, but only for
      // these instances when created before 1.5
      Component_c component = new Component_c(modelRoot, IdAssigner.createUUIDFromString((String)parms.elementAt(0)), 
          IdAssigner.NULL_UUID,
          IdAssigner.NULL_UUID,
          removeTics((String)parms.elementAt(2)).trim(), 
          removeTics((String)parms.elementAt(3)),
          0, 
          IdAssigner.NULL_UUID, false, "");
      ImportHelper.C_C cc = new ImportHelper.C_C(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        removeTics((String) parms.elementAt(2)),
        removeTics((String) parms.elementAt(3)), component
        );
      helper.old_components.add(cc);
    }
  }
  private void storeC_P(Ooaofooa modelRoot, String table, Vector parms,
                        Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("C_P") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      ImportHelper.C_P cp = new ImportHelper.C_P(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(3)),
        removeTics((String) parms.elementAt(4)),
        removeTics((String) parms.elementAt(5)),
        removeTics((String) parms.elementAt(6))
      );
      ImportHelper.old_provisions.add(cp);
    }
  }
  private void storeC_R(Ooaofooa modelRoot, String table, Vector parms,
                        Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("C_R") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      ImportHelper.C_R cr = new ImportHelper.C_R(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(3)),
        removeTics((String) parms.elementAt(4)),
        removeTics((String) parms.elementAt(5)),
        removeTics((String) parms.elementAt(6))
      );
      ImportHelper.old_requirements.add(cr);
    }
  }
  private void storeCD_IC(Ooaofooa modelRoot, String table, Vector parms,
                          Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CD_IC") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      // TODO - This code was added to upgrade CD_IC instances, but only for
      // these instances when created before 1.5
      ImportHelper.CD_IC cdic = new ImportHelper.CD_IC(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2)),
        Integer.parseInt((String) parms.elementAt(3)),
        removeTics((String) parms.elementAt(4)),
        removeTics((String) parms.elementAt(5)), modelRoot
        );
      ImportHelper.used_components.add(cdic);
    }
  }
  private void storeCD_IID(Ooaofooa modelRoot, String table, Vector parms,
                           Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CD_IID") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      // TODO - This code was added to upgrade CD_IID instances, but only for
      // these instances when created before 1.5
      ImportHelper.CD_IID cdiid = new ImportHelper.CD_IID(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2))
        );
      ImportHelper.interface_in_diagrams.add(cdiid);
    }
  }
  private void storeCD_CID(Ooaofooa modelRoot, String table, Vector parms,
                           Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CD_CID") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      // TODO - This code was added to upgrade CD_CID instances, but only for
      // these instances when created before 1.5
      ImportHelper.CD_CID cdcid = new ImportHelper.CD_CID(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1))
        );
      ImportHelper.component_in_diagrams.add(cdcid);
    }
  }
  private void storeCD_CDE(Ooaofooa modelRoot, String table, Vector parms,
                           Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CD_CDE") && !actualVersion.equals(persistenceVersion) && (!actualVersion.equals(bp7_1_5VersionNumber)) && !actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      // TODO - This code was added to upgrade CD_CDE instances, but only for
      // these instances when created before 1.5
      ImportHelper.CD_CDE cdcde = new ImportHelper.CD_CDE(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1))
        );
      ImportHelper.component_diagram_elements.add(cdcde);
    }
  }
  private void storeCL_IR(Ooaofooa modelRoot, String table, Vector parms,
                          Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CL_IR") && actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      ImportHelper.CL_IR ir = new ImportHelper.CL_IR(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2)),
        removeTics((String) parms.elementAt(3)),
        removeTics((String) parms.elementAt(4))
      );
      helper.old_imported_requirements.add(ir);
    }
  }
  private void storeCL_IPINS(Ooaofooa modelRoot, String table, Vector parms,
                          Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("CL_IPINS") && actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      ImportHelper.CL_IPINS ips = new ImportHelper.CL_IPINS(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2))
      );
      helper.old_imported_provision_satisfactions.add(ips);
    }
  }
  private void storePA_SICP(Ooaofooa modelRoot, String table, Vector parms,
                          Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("PA_SICP") && actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      ImportHelper.PA_SICP sicp = new ImportHelper.PA_SICP(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2))
      );
      helper.old_satisfactions_in_comppackage.add(sicp);
    }
  }
  private void storePA_SIC(Ooaofooa modelRoot, String table, Vector parms,
                          Vector rawParms, int numParms, IProgressMonitor pm) {
    if (table.equalsIgnoreCase("PA_SIC") && actualVersion.equals(bp7_1_4VersionNumber)) { //$NON-NLS-1$
      ImportHelper.PA_SIC sic = new ImportHelper.PA_SIC(
        IdAssigner.createUUIDFromString((String) parms.elementAt(0)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(1)),
        IdAssigner.createUUIDFromString((String) parms.elementAt(2))
      );
      helper.old_satisfactions_in_comp.add(sic);
    }
  }
    public String processValue(String table, int col_num, String val) {
      if ( table.equalsIgnoreCase("V_VAR") && col_num == 3 )   // Declared //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_VAL") && col_num == 1 )   // isLValue //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_VAL") && col_num == 2 )   // isImplicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_TRV") && col_num == 3 )   // ParmListOK //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_MSV") && col_num == 3 )   // ParmListOK //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_INT") && col_num == 1 )   // IsImplicitInFor //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_FNV") && col_num == 2 )   // ParmListOK //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("V_BRV") && col_num == 2 )   // ParmListOK //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("O_REF") && col_num == 10 )   // Is_Cstrd //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SM_SUPDT") && col_num == 2 )   // Non_Local //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_FIW") && col_num == 2 )   // is_implicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_FIO") && col_num == 2 )   // is_implicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_SEL") && col_num == 2 )   // is_implicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQU_Q") && col_num == 3 )   // regEx //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQU_Q") && col_num == 4 )   // caseSensitive //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("MSG_SM") && col_num == 6 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("MSG_A") && col_num == 7 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("MSG_M") && col_num == 3 )   // participatesInCommunication //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("MSG_AM") && col_num == 6 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_PP") && col_num == 5 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_LS") && col_num == 3 )   // Destroyed //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_AV") && col_num == 9 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_FPP") && col_num == 5 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_EEP") && col_num == 5 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_COP") && col_num == 5 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_CP") && col_num == 5 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SQ_CIP") && col_num == 6 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_CR") && col_num == 2 )   // is_implicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("I_TIM") && col_num == 2 )   // running //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("I_TIM") && col_num == 3 )   // recurring //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("I_EVI") && col_num == 1 )   // isExecuting //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("I_EVI") && col_num == 2 )   // isCreation //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("I_EXE") && col_num == 0 )   // Running //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("E_ESS") && col_num == 1 )   // ParmListOK //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("E_ESS") && col_num == 2 )   // PEIndicated //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("E_CES") && col_num == 1 )   // is_implicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("S_SYS") && col_num == 2 )   // useGlobals //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("S_IRDT") && col_num == 1 )   // isSet //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("S_EE") && col_num == 7 )   // isRealized //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("C_PO") && col_num == 4 )   // DoNotShowPortOnCanvas //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("C_C") && col_num == 7 )   // isRealized //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("COMM_LNK") && col_num == 6 )   // isFormal //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_FOR") && col_num == 2 )   // is_implicit //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_DAB") && col_num == 3 )   // AttributeWritten //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_BLK") && col_num == 1 )   // WhereSpecOK //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_BLK") && col_num == 2 )   // InWhereSpec //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_BLK") && col_num == 3 )   // SelectedFound //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("ACT_BLK") && col_num == 19 )   // blockInStackFrameCreated //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("DIM_REF") && col_num == 2 )   // isIndividualRepresentation //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("DIM_PLN") && col_num == 0 )   // closed //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("DIM_ELE") && col_num == 1 )   // isVisible //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 4 )   // UseGlobalPrint //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 5 )   // PrintMode //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 8 )   // IsLandscape //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 10 )   // GridOn //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_LAY") && col_num == 1 )   // visible //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      return val;
    }
}

