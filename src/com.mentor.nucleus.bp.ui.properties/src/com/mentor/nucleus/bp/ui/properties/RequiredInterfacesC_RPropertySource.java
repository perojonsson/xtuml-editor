//======================================================================
//
// File: RequiredInterfacesC_RPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class RequiredInterfacesC_RPropertySource implements IPropertySource {
	private Requirement_c m_inst;
	private Interface_c[] m_InterfacesReferencedInterface;
	private RequiredOperation_c[] m_RequiredInterfaceOperations;
	private RequiredSignal_c[] m_RequiredInterfaceSignals;
	private Delegation_c[] m_DelegatedInterfacesDelegatedRequiredInterfaces;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public RequiredInterfacesC_RPropertySource(Requirement_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		Interface_c[] v_interfacesReferencedInterface = Interface_c
				.getManyC_IsOnR4012(InterfaceReference_c
						.getManyC_IRsOnR4009((Requirement_c) m_inst));

		m_InterfacesReferencedInterface = v_interfacesReferencedInterface;
		num_children += m_InterfacesReferencedInterface.length;

		sorter.sort(v_interfacesReferencedInterface);
		RequiredOperation_c[] v_requiredinterfaceoperations = RequiredOperation_c
				.getManySPR_ROsOnR4502(RequiredExecutableProperty_c
						.getManySPR_REPsOnR4500((Requirement_c) m_inst));

		m_RequiredInterfaceOperations = v_requiredinterfaceoperations;
		num_children += m_RequiredInterfaceOperations.length;

		sorter.sort(v_requiredinterfaceoperations);
		RequiredSignal_c[] v_requiredinterfacesignals = RequiredSignal_c
				.getManySPR_RSsOnR4502(RequiredExecutableProperty_c
						.getManySPR_REPsOnR4500((Requirement_c) m_inst));

		m_RequiredInterfaceSignals = v_requiredinterfacesignals;
		num_children += m_RequiredInterfaceSignals.length;

		sorter.sort(v_requiredinterfacesignals);
		Delegation_c[] v_delegatedinterfacesDelegatedRequiredInterfaces = Delegation_c
				.getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c
						.getManyC_RIDsOnR4013(InterfaceReference_c
								.getManyC_IRsOnR4009((Requirement_c) m_inst)));

		m_DelegatedInterfacesDelegatedRequiredInterfaces = v_delegatedinterfacesDelegatedRequiredInterfaces;
		num_children += m_DelegatedInterfacesDelegatedRequiredInterfaces.length;

		sorter.sort(v_delegatedinterfacesDelegatedRequiredInterfaces);
		if (m_propertyDescriptors == null
				|| 2 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[2 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new DescriptionPropertyDescriptor(
					"Descrip", "Interface Description", m_inst);
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new TextPropertyDescriptor(
					"InformalName", "Informal Interface Name");
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 2;
			for (int i = 0; i < m_InterfacesReferencedInterface.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InterfacesReferencedInterface." + String.valueOf(i),
						"Referenced Interface");
				m_propertyDescriptors[d_index].setCategory("Interfaces");
				++d_index;
			}

			for (int i = 0; i < m_RequiredInterfaceOperations.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"RequiredInterfaceOperations." + String.valueOf(i),
						"Required Operation");
				m_propertyDescriptors[d_index]
						.setCategory("Required Interface Operations");
				++d_index;
			}

			for (int i = 0; i < m_RequiredInterfaceSignals.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"RequiredInterfaceSignals." + String.valueOf(i),
						"Required Signal");
				m_propertyDescriptors[d_index]
						.setCategory("Required Interface Signals");
				++d_index;
			}

			for (int i = 0; i < m_DelegatedInterfacesDelegatedRequiredInterfaces.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"DelegatedInterfacesDelegatedRequiredInterfaces."
								+ String.valueOf(i),
						"Delegated Required Interfaces");
				m_propertyDescriptors[d_index]
						.setCategory("Delegated Interfaces");
				++d_index;
			}

		}
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("InformalName")) {
			return m_inst.getInformalname();
		}
		int d_index = 2;
		for (int i = 0; i < m_InterfacesReferencedInterface.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InterfacesC_IPropertySource(
						m_InterfacesReferencedInterface[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_RequiredInterfaceOperations.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new RequiredInterfaceOperationsSPR_ROPropertySource(
						m_RequiredInterfaceOperations[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_RequiredInterfaceSignals.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new RequiredInterfaceSignalsSPR_RSPropertySource(
						m_RequiredInterfaceSignals[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_DelegatedInterfacesDelegatedRequiredInterfaces.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new DelegatedInterfacesC_DGPropertySource(
						m_DelegatedInterfacesDelegatedRequiredInterfaces[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Requirement";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			} else if (id.equals("InformalName")) {
				if (!value.toString().equals(m_inst.getInformalname())) {
					trans_name = "Change in property: 'InformalName' of Requirement";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setInformalname(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
