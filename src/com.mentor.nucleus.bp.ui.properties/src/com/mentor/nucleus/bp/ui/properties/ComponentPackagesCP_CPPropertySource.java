//======================================================================
//
// File: ComponentPackagesCP_CPPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class ComponentPackagesCP_CPPropertySource implements IPropertySource {
	private ComponentPackage_c m_inst;
	private Component_c[] m_Components;
	private ComponentReference_c[] m_ComponentReferences;
	private ComponentPackage_c[] m_ComponentPackages;
	private InterfacePackage_c[] m_InterfacePackages;
	private Sequence_c[] m_Sequences;
	private UseCaseDiagram_c[] m_UseCaseDiagrams;
	private Activity_c[] m_Activities;
	private Communication_c[] m_Communications;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public ComponentPackagesCP_CPPropertySource(ComponentPackage_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		Component_c[] v_components = Component_c
				.getManyC_CsOnR4604((ComponentPackage_c) m_inst);

		m_Components = v_components;
		num_children += m_Components.length;

		sorter.sort(v_components);
		ComponentReference_c[] v_componentreferences = ComponentReference_c
				.getManyCL_ICsOnR4605((ComponentPackage_c) m_inst);

		m_ComponentReferences = v_componentreferences;
		num_children += m_ComponentReferences.length;

		sorter.sort(v_componentreferences);
		ComponentPackage_c[] v_componentpackages = ComponentPackage_c
				.getManyCP_CPsOnR4601(ComponentPackageInPackage_c
						.getManyCP_CPINPsOnR4600((ComponentPackage_c) m_inst));

		m_ComponentPackages = v_componentpackages;
		num_children += m_ComponentPackages.length;

		sorter.sort(v_componentpackages);
		InterfacePackage_c[] v_interfacepackages = InterfacePackage_c
				.getManyIP_IPsOnR4607((ComponentPackage_c) m_inst);

		m_InterfacePackages = v_interfacepackages;
		num_children += m_InterfacePackages.length;

		sorter.sort(v_interfacepackages);
		Sequence_c[] v_sequences = Sequence_c
				.getManySQ_SsOnR951((ComponentPackage_c) m_inst);

		m_Sequences = v_sequences;
		num_children += m_Sequences.length;

		sorter.sort(v_sequences);
		UseCaseDiagram_c[] v_usecasediagrams = UseCaseDiagram_c
				.getManyUC_UCCsOnR1212((ComponentPackage_c) m_inst);

		m_UseCaseDiagrams = v_usecasediagrams;
		num_children += m_UseCaseDiagrams.length;

		sorter.sort(v_usecasediagrams);
		Activity_c[] v_activities = Activity_c
				.getManyA_AsOnR1114((ComponentPackage_c) m_inst);

		m_Activities = v_activities;
		num_children += m_Activities.length;

		sorter.sort(v_activities);
		Communication_c[] v_communications = Communication_c
				.getManyCOMM_COMMsOnR1137((ComponentPackage_c) m_inst);

		m_Communications = v_communications;
		num_children += m_Communications.length;

		sorter.sort(v_communications);
		if (m_propertyDescriptors == null
				|| 2 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[2 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
					"Package Name");
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new DescriptionPropertyDescriptor(
					"Descrip", "Package Description", m_inst);
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 2;
			for (int i = 0; i < m_Components.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Components." + String.valueOf(i), "Component");
				m_propertyDescriptors[d_index].setCategory("Components");
				++d_index;
			}

			for (int i = 0; i < m_ComponentReferences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentReferences." + String.valueOf(i),
						"Component Reference");
				m_propertyDescriptors[d_index]
						.setCategory("Component References");
				++d_index;
			}

			for (int i = 0; i < m_ComponentPackages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentPackages." + String.valueOf(i),
						"Component Package");
				m_propertyDescriptors[d_index]
						.setCategory("Component Packages");
				++d_index;
			}

			for (int i = 0; i < m_InterfacePackages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InterfacePackages." + String.valueOf(i),
						"Interface Package");
				m_propertyDescriptors[d_index]
						.setCategory("Interface Packages");
				++d_index;
			}

			for (int i = 0; i < m_Sequences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Sequences." + String.valueOf(i), "Sequence");
				m_propertyDescriptors[d_index].setCategory("Sequences");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseDiagrams." + String.valueOf(i),
						"Use Case Diagram");
				m_propertyDescriptors[d_index].setCategory("Use Case Diagrams");
				++d_index;
			}

			for (int i = 0; i < m_Activities.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Activities." + String.valueOf(i), "Activity");
				m_propertyDescriptors[d_index].setCategory("Activities");
				++d_index;
			}

			for (int i = 0; i < m_Communications.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Communications." + String.valueOf(i), "Communication");
				m_propertyDescriptors[d_index].setCategory("Communications");
				++d_index;
			}

		}
		if (m_propertyDescriptors.length > 0)
			m_propertyDescriptors[0]
					.setValidator(new ComponentPackageNameValidator());
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		}
		int d_index = 2;
		for (int i = 0; i < m_Components.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentsC_CPropertySource(m_Components[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentReferences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentReferencesCL_ICPropertySource(
						m_ComponentReferences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentPackages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentPackagesCP_CPPropertySource(
						m_ComponentPackages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InterfacePackages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InterfacePackagesIP_IPPropertySource(
						m_InterfacePackages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Sequences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SequencesSQ_SPropertySource(m_Sequences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseDiagramsUC_UCCPropertySource(
						m_UseCaseDiagrams[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Activities.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivitiesA_APropertySource(m_Activities[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Communications.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new CommunicationsCOMM_COMMPropertySource(
						m_Communications[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of Component Package";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Component Package";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
