//======================================================================
//
// File: InformalMessageArgumentsMSG_APropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class InformalMessageArgumentsMSG_APropertySource
		implements
			IPropertySource {
	private MessageArgument_c m_inst;
	private BridgeParameter_c[] m_BridgeParameterFormalBridgeOperationParameter;
	private OperationParameter_c[] m_OperationParameterFormalClassOperationParameter;
	private FunctionParameter_c[] m_FunctionParameterFormalFunctionParameter;
	private StateMachineEventDataItem_c[] m_EventDataFormalEventDataItem;
	private PropertyParameter_c[] m_ParametersExecutablePropertyParameter;
	private InformalArgument_c[] m_InformalArgumentInformalArgument;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public InformalMessageArgumentsMSG_APropertySource(MessageArgument_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.Get_name();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		BridgeParameter_c[] v_bridgeparameterFormalBridgeOperationParameter = BridgeParameter_c
				.getManyS_BPARMsOnR1014(BridgeArgument_c
						.getManyMSG_BAsOnR1013((MessageArgument_c) m_inst));

		m_BridgeParameterFormalBridgeOperationParameter = v_bridgeparameterFormalBridgeOperationParameter;
		num_children += m_BridgeParameterFormalBridgeOperationParameter.length;

		sorter.sort(v_bridgeparameterFormalBridgeOperationParameter);
		OperationParameter_c[] v_operationparameterFormalClassOperationParameter = OperationParameter_c
				.getManyO_TPARMsOnR1015(OperationArgument_c
						.getManyMSG_OAsOnR1013((MessageArgument_c) m_inst));

		m_OperationParameterFormalClassOperationParameter = v_operationparameterFormalClassOperationParameter;
		num_children += m_OperationParameterFormalClassOperationParameter.length;

		sorter.sort(v_operationparameterFormalClassOperationParameter);
		FunctionParameter_c[] v_functionparameterFormalFunctionParameter = FunctionParameter_c
				.getManyS_SPARMsOnR1016(FunctionArgument_c
						.getManyMSG_FAsOnR1013((MessageArgument_c) m_inst));

		m_FunctionParameterFormalFunctionParameter = v_functionparameterFormalFunctionParameter;
		num_children += m_FunctionParameterFormalFunctionParameter.length;

		sorter.sort(v_functionparameterFormalFunctionParameter);
		StateMachineEventDataItem_c[] v_eventdataFormalEventDataItem = StateMachineEventDataItem_c
				.getManySM_EVTDIsOnR1017(EventArgument_c
						.getManyMSG_EAsOnR1013((MessageArgument_c) m_inst));

		m_EventDataFormalEventDataItem = v_eventdataFormalEventDataItem;
		num_children += m_EventDataFormalEventDataItem.length;

		sorter.sort(v_eventdataFormalEventDataItem);
		PropertyParameter_c[] v_parametersExecutablePropertyParameter = PropertyParameter_c
				.getManyC_PPsOnR1023(ExecutablePropertyArgument_c
						.getManyMSG_EPAsOnR1013((MessageArgument_c) m_inst));

		m_ParametersExecutablePropertyParameter = v_parametersExecutablePropertyParameter;
		num_children += m_ParametersExecutablePropertyParameter.length;

		sorter.sort(v_parametersExecutablePropertyParameter);
		InformalArgument_c[] v_informalargumentInformalArgument = InformalArgument_c
				.getManyMSG_IAsOnR1013((MessageArgument_c) m_inst);

		m_InformalArgumentInformalArgument = v_informalargumentInformalArgument;
		num_children += m_InformalArgumentInformalArgument.length;

		sorter.sort(v_informalargumentInformalArgument);
		if (m_propertyDescriptors == null
				|| 4 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[4 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Value",
					"Argument Value");
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new TextPropertyDescriptor(
					"InformalName", "Informal Argument Name");
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new DescriptionPropertyDescriptor(
					"Descrip", "Message Argument Description", m_inst);
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[3] = new PropertyDescriptor("isFormal",
					"Is Formal");
			m_propertyDescriptors[3]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 4;
			for (int i = 0; i < m_BridgeParameterFormalBridgeOperationParameter.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"BridgeParameterFormalBridgeOperationParameter."
								+ String.valueOf(i),
						"Formal Bridge Operation Parameter");
				m_propertyDescriptors[d_index].setCategory("Bridge Parameter");
				++d_index;
			}

			for (int i = 0; i < m_OperationParameterFormalClassOperationParameter.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"OperationParameterFormalClassOperationParameter."
								+ String.valueOf(i),
						"Formal Class Operation Parameter");
				m_propertyDescriptors[d_index]
						.setCategory("Operation Parameter");
				++d_index;
			}

			for (int i = 0; i < m_FunctionParameterFormalFunctionParameter.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FunctionParameterFormalFunctionParameter."
								+ String.valueOf(i),
						"Formal Function Parameter");
				m_propertyDescriptors[d_index]
						.setCategory("Function Parameter");
				++d_index;
			}

			for (int i = 0; i < m_EventDataFormalEventDataItem.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"EventDataFormalEventDataItem." + String.valueOf(i),
						"Formal Event Data Item");
				m_propertyDescriptors[d_index].setCategory("Event Data");
				++d_index;
			}

			for (int i = 0; i < m_ParametersExecutablePropertyParameter.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ParametersExecutablePropertyParameter."
								+ String.valueOf(i),
						"Executable Property Parameter");
				m_propertyDescriptors[d_index].setCategory("Parameters");
				++d_index;
			}

			for (int i = 0; i < m_InformalArgumentInformalArgument.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InformalArgumentInformalArgument." + String.valueOf(i),
						"Informal Argument");
				m_propertyDescriptors[d_index].setCategory("Informal Argument");
				++d_index;
			}

		}
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Value")) {
			return m_inst.getValue();
		} else if (id.equals("InformalName")) {
			return m_inst.getInformalname();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("isFormal")) {
			return new Boolean(m_inst.getIsformal());
		}
		int d_index = 4;
		for (int i = 0; i < m_BridgeParameterFormalBridgeOperationParameter.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new BridgeParameterS_BPARMPropertySource(
						m_BridgeParameterFormalBridgeOperationParameter[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_OperationParameterFormalClassOperationParameter.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new OperationParameterO_TPARMPropertySource(
						m_OperationParameterFormalClassOperationParameter[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FunctionParameterFormalFunctionParameter.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FunctionParameterS_SPARMPropertySource(
						m_FunctionParameterFormalFunctionParameter[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_EventDataFormalEventDataItem.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new EventDataSM_EVTDIPropertySource(
						m_EventDataFormalEventDataItem[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ParametersExecutablePropertyParameter.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ParametersC_PPPropertySource(
						m_ParametersExecutablePropertyParameter[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InformalArgumentInformalArgument.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InformalArgumentMSG_IAPropertySource(
						m_InformalArgumentInformalArgument[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Value")) {
				if (!value.toString().equals(m_inst.getValue())) {
					trans_name = "Change in property: 'Value' of Message Argument";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setValue(value.toString());
				}
			} else if (id.equals("InformalName")) {
				if (!value.toString().equals(m_inst.getInformalname())) {
					trans_name = "Change in property: 'InformalName' of Message Argument";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setInformalname(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Message Argument";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
