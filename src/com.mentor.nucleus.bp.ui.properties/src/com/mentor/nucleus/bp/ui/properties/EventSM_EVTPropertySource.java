//======================================================================
//
// File: EventSM_EVTPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class EventSM_EVTPropertySource implements IPropertySource {
	private StateMachineEvent_c m_inst;
	private StateMachineEventDataItem_c[] m_EventData;
	private PropertyDescriptor[] m_propertyDescriptors;
	private String[] Is_Lbl_U_vals = {"Class Keyletters", "Custom Keyletters"};
	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public EventSM_EVTPropertySource(StateMachineEvent_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.Get_name();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		StateMachineEventDataItem_c[] v_eventdata = StateMachineEventDataItem_c
				.getManySM_EVTDIsOnR532((StateMachineEvent_c) m_inst);

		m_EventData = v_eventdata;
		num_children += m_EventData.length;

		sorter.sort(v_eventdata);
		if (m_propertyDescriptors == null
				|| 6 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[6 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new IntegerPropertyDescriptor("Numb",
					"Event Number", 0, 9999, readonly);
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new TextPropertyDescriptor("Mning",
					"Event Meaning");
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new EnumPropertyDescriptor("Is_Lbl_U",
					"State Machine Event Label Unique Indicator",
					Is_Lbl_U_vals, readonly);
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[3] = new TextPropertyDescriptor("Unq_Lbl",
					"State Machine Event Unique Label");
			m_propertyDescriptors[3]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[4] = new PropertyDescriptor("Drv_Lbl",
					"State Machine Event Derived Label");
			m_propertyDescriptors[4]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[5] = new DescriptionPropertyDescriptor(
					"Descrip", "Description", m_inst);
			m_propertyDescriptors[5]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 6;
			for (int i = 0; i < m_EventData.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"EventData." + String.valueOf(i),
						"State Machine Event Data Item");
				m_propertyDescriptors[d_index].setCategory("Event Data");
				++d_index;
			}

		}
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Numb")) {
			return String.valueOf(m_inst.getNumb());
		} else if (id.equals("Mning")) {
			return m_inst.getMning();
		} else if (id.equals("Is_Lbl_U")) {
			return Is_Lbl_U_vals[m_inst.getIs_lbl_u()];
		} else if (id.equals("Unq_Lbl")) {
			return m_inst.getUnq_lbl();
		} else if (id.equals("Drv_Lbl")) {
			return m_inst.getDrv_lbl();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		}
		int d_index = 6;
		for (int i = 0; i < m_EventData.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new EventDataSM_EVTDIPropertySource(m_EventData[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Numb")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getNumb()) {
					trans_name = "Change in property: 'Numb' of State Machine Event";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setNumb(new_val);
				}
			} else if (id.equals("Mning")) {
				if (!value.toString().equals(m_inst.getMning())) {
					trans_name = "Change in property: 'Mning' of State Machine Event";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setMning(value.toString());
				}
			} else if (id.equals("Is_Lbl_U")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getIs_lbl_u()) {
					trans_name = "Change in property: 'Is_Lbl_U' of State Machine Event";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setIs_lbl_u(new_val);
				}
			} else if (id.equals("Unq_Lbl")) {
				if (!value.toString().equals(m_inst.getUnq_lbl())) {
					trans_name = "Change in property: 'Unq_Lbl' of State Machine Event";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setUnq_lbl(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of State Machine Event";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
