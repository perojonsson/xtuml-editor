//======================================================================
//
// File: ComponentsC_CPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class ComponentsC_CPropertySource implements IPropertySource {
	private Component_c m_inst;
	private Port_c[] m_Port;
	private ComponentReference_c[] m_ComponentReferencesContainedComponentReferences;
	private Domain_c[] m_xtUMLModel;
	private Component_c[] m_ComponentsSpecializedComponent;
	private InterfacePackage_c[] m_InterfacePackages;
	private Sequence_c[] m_Sequences;
	private UseCaseDiagram_c[] m_UseCaseDiagrams;
	private Activity_c[] m_Activities;
	private Communication_c[] m_Communications;
	private Package_c[] m_Packages;
	private Component_c[] m_ComponentsComponent;
	private ComponentReference_c[] m_ComponentReferences;
	private Interface_c[] m_Interfaces;
	private UserDataType_c[] m_UserDefinedDataType;
	private PropertyDescriptor[] m_propertyDescriptors;
	private String[] Mult_vals = {"One", "Many"};
	private String[] validMult_vals() {
		String[] onlyOne = {"One"};
		if (m_inst.Manymultallowed()) {
			return Mult_vals;
		}
		return onlyOne;
	}

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public ComponentsC_CPropertySource(Component_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		Port_c[] v_port = Port_c.getManyC_POsOnR4010((Component_c) m_inst);

		m_Port = v_port;
		num_children += m_Port.length;

		sorter.sort(v_port);
		ComponentReference_c[] v_componentreferencesContainedComponentReferences = ComponentReference_c
				.getManyCL_ICsOnR4205((Component_c) m_inst);

		m_ComponentReferencesContainedComponentReferences = v_componentreferencesContainedComponentReferences;
		num_children += m_ComponentReferencesContainedComponentReferences.length;

		sorter.sort(v_componentreferencesContainedComponentReferences);
		Domain_c[] v_xtumlmodel = Domain_c
				.getManyS_DOMsOnR4204(DomainAsComponent_c
						.getManyCN_DCsOnR4204((Component_c) m_inst));

		m_xtUMLModel = v_xtumlmodel;
		num_children += m_xtUMLModel.length;

		sorter.sort(v_xtumlmodel);
		Component_c[] v_componentsSpecializedComponent = Component_c
				.getManyC_CsOnR4203(ComponentInComponent_c
						.getManyCN_CICsOnR4202((Component_c) m_inst));

		m_ComponentsSpecializedComponent = v_componentsSpecializedComponent;
		num_children += m_ComponentsSpecializedComponent.length;

		sorter.sort(v_componentsSpecializedComponent);
		InterfacePackage_c[] v_interfacepackages = InterfacePackage_c
				.getManyIP_IPsOnR4206((Component_c) m_inst);

		m_InterfacePackages = v_interfacepackages;
		num_children += m_InterfacePackages.length;

		sorter.sort(v_interfacepackages);
		Sequence_c[] v_sequences = Sequence_c
				.getManySQ_SsOnR952((Component_c) m_inst);

		m_Sequences = v_sequences;
		num_children += m_Sequences.length;

		sorter.sort(v_sequences);
		UseCaseDiagram_c[] v_usecasediagrams = UseCaseDiagram_c
				.getManyUC_UCCsOnR1213((Component_c) m_inst);

		m_UseCaseDiagrams = v_usecasediagrams;
		num_children += m_UseCaseDiagrams.length;

		sorter.sort(v_usecasediagrams);
		Activity_c[] v_activities = Activity_c
				.getManyA_AsOnR1115((Component_c) m_inst);

		m_Activities = v_activities;
		num_children += m_Activities.length;

		sorter.sort(v_activities);
		Communication_c[] v_communications = Communication_c
				.getManyCOMM_COMMsOnR1138((Component_c) m_inst);

		m_Communications = v_communications;
		num_children += m_Communications.length;

		sorter.sort(v_communications);
		Package_c[] v_packages = Package_c
				.getManyEP_PKGsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8003((Component_c) m_inst));

		m_Packages = v_packages;
		num_children += m_Packages.length;

		sorter.sort(v_packages);
		Component_c[] v_componentsComponent = Component_c
				.getManyC_CsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8003((Component_c) m_inst));

		m_ComponentsComponent = v_componentsComponent;
		num_children += m_ComponentsComponent.length;

		sorter.sort(v_componentsComponent);
		ComponentReference_c[] v_componentreferences = ComponentReference_c
				.getManyCL_ICsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8003((Component_c) m_inst));

		m_ComponentReferences = v_componentreferences;
		num_children += m_ComponentReferences.length;

		sorter.sort(v_componentreferences);
		Interface_c[] v_interfaces = Interface_c
				.getManyC_IsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8003((Component_c) m_inst));

		m_Interfaces = v_interfaces;
		num_children += m_Interfaces.length;

		sorter.sort(v_interfaces);
		UserDataType_c[] v_userdefineddatatype = UserDataType_c
				.getManyS_UDTsOnR17(DataType_c
						.getManyS_DTsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8003((Component_c) m_inst)));

		m_UserDefinedDataType = v_userdefineddatatype;
		num_children += m_UserDefinedDataType.length;

		sorter.sort(v_userdefineddatatype);
		if (m_propertyDescriptors == null
				|| 5 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[5 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
					"Component Name");
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new DescriptionPropertyDescriptor(
					"Descrip", "Component Description", m_inst);
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new EnumPropertyDescriptor("Mult",
					"Multiplicity", validMult_vals(), readonly);
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[3] = new BooleanPropertyDescriptor(
					"isRealized", "Realized Component", readonly);
			m_propertyDescriptors[3]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[4] = new TextPropertyDescriptor(
					"Realized_Class_Path", "Realized Component Path");
			m_propertyDescriptors[4]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 5;
			for (int i = 0; i < m_Port.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor("Port."
						+ String.valueOf(i), "Port");
				m_propertyDescriptors[d_index].setCategory("Port");
				++d_index;
			}

			for (int i = 0; i < m_ComponentReferencesContainedComponentReferences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentReferencesContainedComponentReferences."
								+ String.valueOf(i),
						"Contained Component References");
				m_propertyDescriptors[d_index]
						.setCategory("Component References");
				++d_index;
			}

			for (int i = 0; i < m_xtUMLModel.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"xtUMLModel." + String.valueOf(i), "Domain");
				m_propertyDescriptors[d_index].setCategory("xtUML Model");
				++d_index;
			}

			for (int i = 0; i < m_ComponentsSpecializedComponent.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentsSpecializedComponent." + String.valueOf(i),
						"Component");
				m_propertyDescriptors[d_index].setCategory("Components");
				++d_index;
			}

			for (int i = 0; i < m_InterfacePackages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InterfacePackages." + String.valueOf(i),
						"Interface Package");
				m_propertyDescriptors[d_index]
						.setCategory("Interface Packages");
				++d_index;
			}

			for (int i = 0; i < m_Sequences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Sequences." + String.valueOf(i), "Sequence");
				m_propertyDescriptors[d_index].setCategory("Sequences");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseDiagrams." + String.valueOf(i),
						"Use Case Diagram");
				m_propertyDescriptors[d_index].setCategory("Use Case Diagrams");
				++d_index;
			}

			for (int i = 0; i < m_Activities.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Activities." + String.valueOf(i), "Activity");
				m_propertyDescriptors[d_index].setCategory("Activities");
				++d_index;
			}

			for (int i = 0; i < m_Communications.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Communications." + String.valueOf(i), "Communication");
				m_propertyDescriptors[d_index].setCategory("Communications");
				++d_index;
			}

			for (int i = 0; i < m_Packages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Packages." + String.valueOf(i), "Package");
				m_propertyDescriptors[d_index].setCategory("Packages");
				++d_index;
			}

			for (int i = 0; i < m_ComponentsComponent.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentsComponent." + String.valueOf(i), "Component");
				m_propertyDescriptors[d_index].setCategory("Components");
				++d_index;
			}

			for (int i = 0; i < m_ComponentReferences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentReferences." + String.valueOf(i),
						"Component Reference");
				m_propertyDescriptors[d_index]
						.setCategory("Component References");
				++d_index;
			}

			for (int i = 0; i < m_Interfaces.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Interfaces." + String.valueOf(i), "Interface");
				m_propertyDescriptors[d_index].setCategory("Interfaces");
				++d_index;
			}

			for (int i = 0; i < m_UserDefinedDataType.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UserDefinedDataType." + String.valueOf(i),
						"User Data Type");
				m_propertyDescriptors[d_index]
						.setCategory("User Defined Data Type");
				++d_index;
			}

		}
		if (m_propertyDescriptors.length > 0)
			m_propertyDescriptors[0].setValidator(new ComponentNameValidator());
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("Mult")) {
			return Mult_vals[m_inst.getMult()];
		} else if (id.equals("isRealized")) {
			return new Boolean(m_inst.getIsrealized());
		} else if (id.equals("Realized_Class_Path")) {
			return m_inst.getRealized_class_path();
		}
		int d_index = 5;
		for (int i = 0; i < m_Port.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new PortC_POPropertySource(m_Port[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentReferencesContainedComponentReferences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentReferencesCL_ICPropertySource(
						m_ComponentReferencesContainedComponentReferences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_xtUMLModel.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new xtUMLModelS_DOMPropertySource(m_xtUMLModel[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentsSpecializedComponent.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentsC_CPropertySource(
						m_ComponentsSpecializedComponent[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InterfacePackages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InterfacePackagesIP_IPPropertySource(
						m_InterfacePackages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Sequences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SequencesSQ_SPropertySource(m_Sequences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseDiagramsUC_UCCPropertySource(
						m_UseCaseDiagrams[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Activities.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivitiesA_APropertySource(m_Activities[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Communications.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new CommunicationsCOMM_COMMPropertySource(
						m_Communications[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Packages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new PackagesEP_PKGPropertySource(m_Packages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentsComponent.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentsC_CPropertySource(m_ComponentsComponent[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentReferences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentReferencesCL_ICPropertySource(
						m_ComponentReferences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Interfaces.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InterfacesC_IPropertySource(m_Interfaces[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UserDefinedDataType.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UserDefinedDataTypeS_UDTPropertySource(
						m_UserDefinedDataType[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of Component";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Component";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			} else if (id.equals("Mult")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getMult()) {
					trans_name = "Change in property: 'Mult' of Component";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setMult(new_val);
				}
			} else if (id.equals("isRealized")) {
				boolean new_val = ((Boolean) value).booleanValue();
				if (new_val != m_inst.getIsrealized()) {
					trans_name = "Change in property: 'isRealized' of Component"; //$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setIsrealized(new_val);
				}
			} else if (id.equals("Realized_Class_Path")) {
				if (!value.toString().equals(m_inst.getRealized_class_path())) {
					trans_name = "Change in property: 'Realized_Class_Path' of Component";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setRealized_class_path(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
