//======================================================================
//
// File: SubsystemS_SSPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class SubsystemS_SSPropertySource implements IPropertySource {
	private Subsystem_c m_inst;
	private ModelClass_c[] m_Class;
	private Association_c[] m_Association;
	private ImportedClass_c[] m_ImportedClass;
	private Activity_c[] m_Activities;
	private Sequence_c[] m_Sequences;
	private Communication_c[] m_Communications;
	private UseCaseDiagram_c[] m_UseCaseDiagrams;
	private Subsystem_c[] m_Subsystem;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public SubsystemS_SSPropertySource(Subsystem_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		ModelClass_c[] v_class = ModelClass_c
				.getManyO_OBJsOnR2((Subsystem_c) m_inst);

		m_Class = v_class;
		num_children += m_Class.length;

		sorter.sort(v_class);
		Association_c[] v_association = Association_c
				.getManyR_RELsOnR4((Subsystem_c) m_inst);

		m_Association = v_association;
		num_children += m_Association.length;

		sorter.sort(v_association);
		ImportedClass_c[] v_importedclass = ImportedClass_c
				.getManyO_IOBJsOnR3((Subsystem_c) m_inst);

		m_ImportedClass = v_importedclass;
		num_children += m_ImportedClass.length;

		sorter.sort(v_importedclass);
		Activity_c[] v_activities = Activity_c
				.getManyA_AsOnR1108((Subsystem_c) m_inst);

		m_Activities = v_activities;
		num_children += m_Activities.length;

		sorter.sort(v_activities);
		Sequence_c[] v_sequences = Sequence_c
				.getManySQ_SsOnR914((Subsystem_c) m_inst);

		m_Sequences = v_sequences;
		num_children += m_Sequences.length;

		sorter.sort(v_sequences);
		Communication_c[] v_communications = Communication_c
				.getManyCOMM_COMMsOnR1131((Subsystem_c) m_inst);

		m_Communications = v_communications;
		num_children += m_Communications.length;

		sorter.sort(v_communications);
		UseCaseDiagram_c[] v_usecasediagrams = UseCaseDiagram_c
				.getManyUC_UCCsOnR1202((Subsystem_c) m_inst);

		m_UseCaseDiagrams = v_usecasediagrams;
		num_children += m_UseCaseDiagrams.length;

		sorter.sort(v_usecasediagrams);
		Subsystem_c[] v_subsystem = Subsystem_c
				.getManyS_SSsOnR42(SubsystemInSubsystem_c
						.getManyS_SISsOnR41((Subsystem_c) m_inst));

		m_Subsystem = v_subsystem;
		num_children += m_Subsystem.length;

		sorter.sort(v_subsystem);
		if (m_propertyDescriptors == null
				|| 4 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[4 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
					"Subsystem Name");
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new DescriptionPropertyDescriptor(
					"Descrip", "Subsystem Description", m_inst);
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new TextPropertyDescriptor("Prefix",
					"Subsystem Prefix");
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[3] = new IntegerPropertyDescriptor("Num_Rng",
					"Number Range", 0, 9999, readonly);
			m_propertyDescriptors[3]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 4;
			for (int i = 0; i < m_Class.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Class." + String.valueOf(i), "Model Class");
				m_propertyDescriptors[d_index].setCategory("Class");
				++d_index;
			}

			for (int i = 0; i < m_Association.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Association." + String.valueOf(i), "Association");
				m_propertyDescriptors[d_index].setCategory("Association");
				++d_index;
			}

			for (int i = 0; i < m_ImportedClass.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ImportedClass." + String.valueOf(i), "Imported Class");
				m_propertyDescriptors[d_index].setCategory("Imported Class");
				++d_index;
			}

			for (int i = 0; i < m_Activities.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Activities." + String.valueOf(i), "Activity");
				m_propertyDescriptors[d_index].setCategory("Activities");
				++d_index;
			}

			for (int i = 0; i < m_Sequences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Sequences." + String.valueOf(i), "Sequence");
				m_propertyDescriptors[d_index].setCategory("Sequences");
				++d_index;
			}

			for (int i = 0; i < m_Communications.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Communications." + String.valueOf(i), "Communication");
				m_propertyDescriptors[d_index].setCategory("Communications");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseDiagrams." + String.valueOf(i),
						"Use Case Diagram");
				m_propertyDescriptors[d_index].setCategory("Use Case Diagrams");
				++d_index;
			}

			for (int i = 0; i < m_Subsystem.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Subsystem." + String.valueOf(i), "Subsystem");
				m_propertyDescriptors[d_index].setCategory("Subsystem");
				++d_index;
			}

		}
		if (m_propertyDescriptors.length > 0)
			m_propertyDescriptors[0].setValidator(new SubsystemNameValidator());
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("Prefix")) {
			return m_inst.getPrefix();
		} else if (id.equals("Num_Rng")) {
			return String.valueOf(m_inst.getNum_rng());
		}
		int d_index = 4;
		for (int i = 0; i < m_Class.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ClassO_OBJPropertySource(m_Class[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Association.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new AssociationR_RELPropertySource(m_Association[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ImportedClass.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ImportedClassO_IOBJPropertySource(m_ImportedClass[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Activities.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivitiesA_APropertySource(m_Activities[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Sequences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SequencesSQ_SPropertySource(m_Sequences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Communications.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new CommunicationsCOMM_COMMPropertySource(
						m_Communications[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseDiagramsUC_UCCPropertySource(
						m_UseCaseDiagrams[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Subsystem.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SubsystemS_SSPropertySource(m_Subsystem[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of Subsystem";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Subsystem";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			} else if (id.equals("Prefix")) {
				if (!value.toString().equals(m_inst.getPrefix())) {
					trans_name = "Change in property: 'Prefix' of Subsystem";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setPrefix(value.toString());
				}
			} else if (id.equals("Num_Rng")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getNum_rng()) {
					trans_name = "Change in property: 'Num_Rng' of Subsystem";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setNum_rng(new_val);
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
