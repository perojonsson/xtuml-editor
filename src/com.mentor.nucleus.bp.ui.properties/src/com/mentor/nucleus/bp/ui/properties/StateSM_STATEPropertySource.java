//======================================================================
//
// File: StateSM_STATEPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class StateSM_STATEPropertySource implements IPropertySource {
	private StateMachineState_c m_inst;
	private StateEventMatrixEntry_c[] m_StateEventMatrixEntryEventIgnored;
	private StateEventMatrixEntry_c[] m_StateEventMatrixEntryCantHappen;
	private Action_c[] m_Action;
	private Transition_c[] m_TransitionsNewStateTransitions;
	private Transition_c[] m_TransitionsNoEventTransitions;
	private PropertyDescriptor[] m_propertyDescriptors;
	private String[] Final_vals = {"Non-final state", "Final state"};
	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public StateSM_STATEPropertySource(StateMachineState_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		StateEventMatrixEntry_c[] v_stateeventmatrixentryEventIgnored = StateEventMatrixEntry_c
				.getManySM_SEMEsOnR504(EventIgnored_c.getManySM_EIGNsOnR504(StateEventMatrixEntry_c
						.getManySM_SEMEsOnR503((StateMachineState_c) m_inst)));

		m_StateEventMatrixEntryEventIgnored = v_stateeventmatrixentryEventIgnored;
		num_children += m_StateEventMatrixEntryEventIgnored.length;

		sorter.sort(v_stateeventmatrixentryEventIgnored);
		StateEventMatrixEntry_c[] v_stateeventmatrixentryCantHappen = StateEventMatrixEntry_c
				.getManySM_SEMEsOnR504(CantHappen_c.getManySM_CHsOnR504(StateEventMatrixEntry_c
						.getManySM_SEMEsOnR503((StateMachineState_c) m_inst)));

		m_StateEventMatrixEntryCantHappen = v_stateeventmatrixentryCantHappen;
		num_children += m_StateEventMatrixEntryCantHappen.length;

		sorter.sort(v_stateeventmatrixentryCantHappen);
		Action_c[] v_action = Action_c.getManySM_ACTsOnR514(ActionHome_c
				.getManySM_AHsOnR513(MooreActionHome_c
						.getManySM_MOAHsOnR511((StateMachineState_c) m_inst)));

		m_Action = v_action;
		num_children += m_Action.length;

		sorter.sort(v_action);
		Transition_c[] v_transitionsNewStateTransitions = Transition_c
				.getManySM_TXNsOnR507(NewStateTransition_c.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c
						.getManySM_SEMEsOnR503((StateMachineState_c) m_inst)));

		m_TransitionsNewStateTransitions = v_transitionsNewStateTransitions;
		num_children += m_TransitionsNewStateTransitions.length;

		sorter.sort(v_transitionsNewStateTransitions);
		Transition_c[] v_transitionsNoEventTransitions = Transition_c
				.getManySM_TXNsOnR507(NoEventTransition_c
						.getManySM_NETXNsOnR508((StateMachineState_c) m_inst));

		m_TransitionsNoEventTransitions = v_transitionsNoEventTransitions;
		num_children += m_TransitionsNoEventTransitions.length;

		sorter.sort(v_transitionsNoEventTransitions);
		if (m_propertyDescriptors == null
				|| 3 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[3 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
					"State Name");
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new IntegerPropertyDescriptor("Numb",
					"State Number", 0, 9999, readonly);
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new EnumPropertyDescriptor("Final",
					"Final State Indicator", Final_vals, readonly);
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 3;
			for (int i = 0; i < m_StateEventMatrixEntryEventIgnored.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"StateEventMatrixEntryEventIgnored."
								+ String.valueOf(i), "Event Ignored");
				m_propertyDescriptors[d_index]
						.setCategory("State Event Matrix Entry");
				++d_index;
			}

			for (int i = 0; i < m_StateEventMatrixEntryCantHappen.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"StateEventMatrixEntryCantHappen." + String.valueOf(i),
						"Cant Happen");
				m_propertyDescriptors[d_index]
						.setCategory("State Event Matrix Entry");
				++d_index;
			}

			for (int i = 0; i < m_Action.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Action." + String.valueOf(i), "Action");
				m_propertyDescriptors[d_index].setCategory("Action");
				++d_index;
			}

			for (int i = 0; i < m_TransitionsNewStateTransitions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"TransitionsNewStateTransitions." + String.valueOf(i),
						"New State Transitions");
				m_propertyDescriptors[d_index].setCategory("Transitions");
				++d_index;
			}

			for (int i = 0; i < m_TransitionsNoEventTransitions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"TransitionsNoEventTransitions." + String.valueOf(i),
						"No Event Transitions");
				m_propertyDescriptors[d_index].setCategory("Transitions");
				++d_index;
			}

		}
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		} else if (id.equals("Numb")) {
			return String.valueOf(m_inst.getNumb());
		} else if (id.equals("Final")) {
			return Final_vals[m_inst.getFinal()];
		}
		int d_index = 3;
		for (int i = 0; i < m_StateEventMatrixEntryEventIgnored.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new StateEventMatrixEntrySM_SEMEPropertySource(
						m_StateEventMatrixEntryEventIgnored[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_StateEventMatrixEntryCantHappen.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new StateEventMatrixEntrySM_SEMEPropertySource(
						m_StateEventMatrixEntryCantHappen[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Action.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActionSM_ACTPropertySource(m_Action[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_TransitionsNewStateTransitions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new TransitionsSM_TXNPropertySource(
						m_TransitionsNewStateTransitions[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_TransitionsNoEventTransitions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new TransitionsSM_TXNPropertySource(
						m_TransitionsNoEventTransitions[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of State Machine State";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			} else if (id.equals("Numb")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getNumb()) {
					trans_name = "Change in property: 'Numb' of State Machine State";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setNumb(new_val);
				}
			} else if (id.equals("Final")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getFinal()) {
					trans_name = "Change in property: 'Final' of State Machine State";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setFinal(new_val);
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
