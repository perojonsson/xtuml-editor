//======================================================================
//
// File: SynchronousMessagesMSG_SMPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class SynchronousMessagesMSG_SMPropertySource implements IPropertySource {
	private SynchronousMessage_c m_inst;
	private MessageArgument_c[] m_InformalMessageArguments;
	private MessageArgument_c[] m_MessageArguments;
	private InformalSynchronousMessage_c[] m_InformalMessageInformalMessage;
	private BridgeMessage_c[] m_FormalBridgeOperationFormalBridgeOperation;
	private OperationMessage_c[] m_FormalOperationFormalOperation;
	private FunctionMessage_c[] m_FormalFunctionFormalFunction;
	private InterfaceOperationMessage_c[] m_FormalInterfaceOperationFormalInterfaceOperation;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public SynchronousMessagesMSG_SMPropertySource(SynchronousMessage_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.Get_name();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		MessageArgument_c[] v_informalmessagearguments = MessageArgument_c
				.getManyMSG_AsOnR1013(InformalArgument_c.getManyMSG_IAsOnR1013(MessageArgument_c.getManyMSG_AsOnR1000(Message_c
						.getManyMSG_MsOnR1018((SynchronousMessage_c) m_inst))));

		m_InformalMessageArguments = v_informalmessagearguments;
		num_children += m_InformalMessageArguments.length;

		sorter.sort(v_informalmessagearguments);
		MessageArgument_c[] v_messagearguments = MessageArgument_c
				.getManyMSG_AsOnR1001(Message_c
						.getManyMSG_MsOnR1018((SynchronousMessage_c) m_inst));

		m_MessageArguments = v_messagearguments;
		num_children += m_MessageArguments.length;

		sorter.sort(v_messagearguments);
		InformalSynchronousMessage_c[] v_informalmessageInformalMessage = InformalSynchronousMessage_c
				.getManyMSG_ISMsOnR1020((SynchronousMessage_c) m_inst);

		m_InformalMessageInformalMessage = v_informalmessageInformalMessage;
		num_children += m_InformalMessageInformalMessage.length;

		sorter.sort(v_informalmessageInformalMessage);
		BridgeMessage_c[] v_formalbridgeoperationFormalBridgeOperation = BridgeMessage_c
				.getManyMSG_BsOnR1020((SynchronousMessage_c) m_inst);

		m_FormalBridgeOperationFormalBridgeOperation = v_formalbridgeoperationFormalBridgeOperation;
		num_children += m_FormalBridgeOperationFormalBridgeOperation.length;

		sorter.sort(v_formalbridgeoperationFormalBridgeOperation);
		OperationMessage_c[] v_formaloperationFormalOperation = OperationMessage_c
				.getManyMSG_OsOnR1020((SynchronousMessage_c) m_inst);

		m_FormalOperationFormalOperation = v_formaloperationFormalOperation;
		num_children += m_FormalOperationFormalOperation.length;

		sorter.sort(v_formaloperationFormalOperation);
		FunctionMessage_c[] v_formalfunctionFormalFunction = FunctionMessage_c
				.getManyMSG_FsOnR1020((SynchronousMessage_c) m_inst);

		m_FormalFunctionFormalFunction = v_formalfunctionFormalFunction;
		num_children += m_FormalFunctionFormalFunction.length;

		sorter.sort(v_formalfunctionFormalFunction);
		InterfaceOperationMessage_c[] v_formalinterfaceoperationFormalInterfaceOperation = InterfaceOperationMessage_c
				.getManyMSG_IOPsOnR1020((SynchronousMessage_c) m_inst);

		m_FormalInterfaceOperationFormalInterfaceOperation = v_formalinterfaceoperationFormalInterfaceOperation;
		num_children += m_FormalInterfaceOperationFormalInterfaceOperation.length;

		sorter.sort(v_formalinterfaceoperationFormalInterfaceOperation);
		if (m_propertyDescriptors == null
				|| 7 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[7 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor(
					"ResultTarget", "Result Target");
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new TextPropertyDescriptor(
					"ReturnValue", "Return Value");
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new TextPropertyDescriptor(
					"GuardCondition", "Guard Condition");
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[3] = new DescriptionPropertyDescriptor(
					"Descrip", "Message Description", m_inst);
			m_propertyDescriptors[3]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[4] = new PropertyDescriptor("isFormal",
					"Is Formal");
			m_propertyDescriptors[4]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[5] = new TextPropertyDescriptor(
					"InformalName", "Informal Name");
			m_propertyDescriptors[5]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[6] = new TextPropertyDescriptor(
					"SequenceNumb", "Sequence Number");
			m_propertyDescriptors[6]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 7;
			for (int i = 0; i < m_InformalMessageArguments.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InformalMessageArguments." + String.valueOf(i),
						"Message Argument");
				m_propertyDescriptors[d_index]
						.setCategory("Informal Message Arguments");
				++d_index;
			}

			for (int i = 0; i < m_MessageArguments.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"MessageArguments." + String.valueOf(i),
						"Message Argument");
				m_propertyDescriptors[d_index].setCategory("Message Arguments");
				++d_index;
			}

			for (int i = 0; i < m_InformalMessageInformalMessage.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InformalMessageInformalMessage." + String.valueOf(i),
						"Informal Message");
				m_propertyDescriptors[d_index].setCategory("Informal Message");
				++d_index;
			}

			for (int i = 0; i < m_FormalBridgeOperationFormalBridgeOperation.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FormalBridgeOperationFormalBridgeOperation."
								+ String.valueOf(i), "Formal Bridge Operation");
				m_propertyDescriptors[d_index]
						.setCategory("Formal Bridge Operation");
				++d_index;
			}

			for (int i = 0; i < m_FormalOperationFormalOperation.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FormalOperationFormalOperation." + String.valueOf(i),
						"Formal Operation");
				m_propertyDescriptors[d_index].setCategory("Formal Operation");
				++d_index;
			}

			for (int i = 0; i < m_FormalFunctionFormalFunction.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FormalFunctionFormalFunction." + String.valueOf(i),
						"Formal Function");
				m_propertyDescriptors[d_index].setCategory("Formal Function");
				++d_index;
			}

			for (int i = 0; i < m_FormalInterfaceOperationFormalInterfaceOperation.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FormalInterfaceOperationFormalInterfaceOperation."
								+ String.valueOf(i),
						"Formal Interface Operation");
				m_propertyDescriptors[d_index]
						.setCategory("Formal Interface Operation");
				++d_index;
			}

		}
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("ResultTarget")) {
			return m_inst.getResulttarget();
		} else if (id.equals("ReturnValue")) {
			return m_inst.getReturnvalue();
		} else if (id.equals("GuardCondition")) {
			return m_inst.getGuardcondition();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("isFormal")) {
			return new Boolean(m_inst.getIsformal());
		} else if (id.equals("InformalName")) {
			return m_inst.getInformalname();
		} else if (id.equals("SequenceNumb")) {
			return m_inst.getSequencenumb();
		}
		int d_index = 7;
		for (int i = 0; i < m_InformalMessageArguments.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InformalMessageArgumentsMSG_APropertySource(
						m_InformalMessageArguments[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_MessageArguments.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new MessageArgumentsMSG_APropertySource(
						m_MessageArguments[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InformalMessageInformalMessage.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InformalMessageMSG_ISMPropertySource(
						m_InformalMessageInformalMessage[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FormalBridgeOperationFormalBridgeOperation.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FormalBridgeOperationMSG_BPropertySource(
						m_FormalBridgeOperationFormalBridgeOperation[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FormalOperationFormalOperation.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FormalOperationMSG_OPropertySource(
						m_FormalOperationFormalOperation[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FormalFunctionFormalFunction.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FormalFunctionMSG_FPropertySource(
						m_FormalFunctionFormalFunction[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FormalInterfaceOperationFormalInterfaceOperation.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FormalInterfaceOperationMSG_IOPPropertySource(
						m_FormalInterfaceOperationFormalInterfaceOperation[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("ResultTarget")) {
				if (!value.toString().equals(m_inst.getResulttarget())) {
					trans_name = "Change in property: 'ResultTarget' of Synchronous Message";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setResulttarget(value.toString());
				}
			} else if (id.equals("ReturnValue")) {
				if (!value.toString().equals(m_inst.getReturnvalue())) {
					trans_name = "Change in property: 'ReturnValue' of Synchronous Message";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setReturnvalue(value.toString());
				}
			} else if (id.equals("GuardCondition")) {
				if (!value.toString().equals(m_inst.getGuardcondition())) {
					trans_name = "Change in property: 'GuardCondition' of Synchronous Message";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setGuardcondition(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Synchronous Message";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			} else if (id.equals("InformalName")) {
				if (!value.toString().equals(m_inst.getInformalname())) {
					trans_name = "Change in property: 'InformalName' of Synchronous Message";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setInformalname(value.toString());
				}
			} else if (id.equals("SequenceNumb")) {
				if (!value.toString().equals(m_inst.getSequencenumb())) {
					trans_name = "Change in property: 'SequenceNumb' of Synchronous Message";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setSequencenumb(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
