//======================================================================
//
// File: InstancesSQ_CIPPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class InstancesSQ_CIPPropertySource implements IPropertySource {
	private ClassInstanceParticipant_c m_inst;
	private Lifespan_c[] m_Lifespans;
	private InstanceAttributeValue_c[] m_InformalInstanceAttributeValues;
	private InstanceAttributeValue_c[] m_FormalInstanceAttributeValues;
	private SynchronousMessage_c[] m_SynchronousMessages;
	private AsynchronousMessage_c[] m_AsynchronousMessages;
	private ReturnMessage_c[] m_ReturnMessages;
	private ModelClass_c[] m_ClassFormalInstance;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public InstancesSQ_CIPPropertySource(ClassInstanceParticipant_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		Lifespan_c[] v_lifespans = Lifespan_c
				.getManySQ_LSsOnR940(InteractionParticipant_c
						.getManySQ_PsOnR930((ClassInstanceParticipant_c) m_inst));

		m_Lifespans = v_lifespans;
		num_children += m_Lifespans.length;

		sorter.sort(v_lifespans);
		InstanceAttributeValue_c[] v_informalinstanceattributevalues = InstanceAttributeValue_c
				.getManySQ_AVsOnR948(InformalAttributeValue_c.getManySQ_IAVsOnR948(InstanceAttributeValue_c
						.getManySQ_AVsOnR936((ClassInstanceParticipant_c) m_inst)));

		m_InformalInstanceAttributeValues = v_informalinstanceattributevalues;
		num_children += m_InformalInstanceAttributeValues.length;

		sorter.sort(v_informalinstanceattributevalues);
		InstanceAttributeValue_c[] v_formalinstanceattributevalues = InstanceAttributeValue_c
				.getManySQ_AVsOnR948(FormalAttributeValue_c.getManySQ_FAVsOnR948(InstanceAttributeValue_c
						.getManySQ_AVsOnR937((ClassInstanceParticipant_c) m_inst)));

		m_FormalInstanceAttributeValues = v_formalinstanceattributevalues;
		num_children += m_FormalInstanceAttributeValues.length;

		sorter.sort(v_formalinstanceattributevalues);
		SynchronousMessage_c[] v_synchronousmessages = SynchronousMessage_c
				.getManyMSG_SMsOnR1018(Message_c.getManyMSG_MsOnR1007(InteractionParticipant_c
						.getManySQ_PsOnR930((ClassInstanceParticipant_c) m_inst)));

		m_SynchronousMessages = v_synchronousmessages;
		num_children += m_SynchronousMessages.length;

		sorter.sort(v_synchronousmessages);
		AsynchronousMessage_c[] v_asynchronousmessages = AsynchronousMessage_c
				.getManyMSG_AMsOnR1018(Message_c.getManyMSG_MsOnR1007(InteractionParticipant_c
						.getManySQ_PsOnR930((ClassInstanceParticipant_c) m_inst)));

		m_AsynchronousMessages = v_asynchronousmessages;
		num_children += m_AsynchronousMessages.length;

		sorter.sort(v_asynchronousmessages);
		ReturnMessage_c[] v_returnmessages = ReturnMessage_c
				.getManyMSG_RsOnR1018(Message_c.getManyMSG_MsOnR1007(InteractionParticipant_c
						.getManySQ_PsOnR930((ClassInstanceParticipant_c) m_inst)));

		m_ReturnMessages = v_returnmessages;
		num_children += m_ReturnMessages.length;

		sorter.sort(v_returnmessages);
		ModelClass_c[] v_classFormalInstance = ModelClass_c
				.getManyO_OBJsOnR934((ClassInstanceParticipant_c) m_inst);

		m_ClassFormalInstance = v_classFormalInstance;
		num_children += m_ClassFormalInstance.length;

		sorter.sort(v_classFormalInstance);
		if (m_propertyDescriptors == null
				|| 4 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[4 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
					"Instance Name");
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new TextPropertyDescriptor(
					"InformalClassName", "Informal Class Name");
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new DescriptionPropertyDescriptor(
					"Descrip", "Instance Description", m_inst);
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[3] = new PropertyDescriptor("isFormal",
					"Is Formal");
			m_propertyDescriptors[3]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 4;
			for (int i = 0; i < m_Lifespans.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Lifespans." + String.valueOf(i), "Lifespan");
				m_propertyDescriptors[d_index].setCategory("Lifespans");
				++d_index;
			}

			for (int i = 0; i < m_InformalInstanceAttributeValues.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InformalInstanceAttributeValues." + String.valueOf(i),
						"Instance Attribute Value");
				m_propertyDescriptors[d_index]
						.setCategory("Informal Instance Attribute Values");
				++d_index;
			}

			for (int i = 0; i < m_FormalInstanceAttributeValues.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FormalInstanceAttributeValues." + String.valueOf(i),
						"Instance Attribute Value");
				m_propertyDescriptors[d_index]
						.setCategory("Formal Instance Attribute Values");
				++d_index;
			}

			for (int i = 0; i < m_SynchronousMessages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"SynchronousMessages." + String.valueOf(i),
						"Synchronous Message");
				m_propertyDescriptors[d_index]
						.setCategory("Synchronous Messages");
				++d_index;
			}

			for (int i = 0; i < m_AsynchronousMessages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"AsynchronousMessages." + String.valueOf(i),
						"Asynchronous Message");
				m_propertyDescriptors[d_index]
						.setCategory("Asynchronous Messages");
				++d_index;
			}

			for (int i = 0; i < m_ReturnMessages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ReturnMessages." + String.valueOf(i), "Return Message");
				m_propertyDescriptors[d_index].setCategory("Return Messages");
				++d_index;
			}

			for (int i = 0; i < m_ClassFormalInstance.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ClassFormalInstance." + String.valueOf(i),
						"Formal Instance");
				m_propertyDescriptors[d_index].setCategory("Class");
				++d_index;
			}

		}
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		} else if (id.equals("InformalClassName")) {
			return m_inst.getInformalclassname();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("isFormal")) {
			return new Boolean(m_inst.getIsformal());
		}
		int d_index = 4;
		for (int i = 0; i < m_Lifespans.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new LifespansSQ_LSPropertySource(m_Lifespans[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InformalInstanceAttributeValues.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InformalInstanceAttributeValuesSQ_AVPropertySource(
						m_InformalInstanceAttributeValues[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FormalInstanceAttributeValues.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FormalInstanceAttributeValuesSQ_AVPropertySource(
						m_FormalInstanceAttributeValues[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_SynchronousMessages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SynchronousMessagesMSG_SMPropertySource(
						m_SynchronousMessages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_AsynchronousMessages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new AsynchronousMessagesMSG_AMPropertySource(
						m_AsynchronousMessages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ReturnMessages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ReturnMessagesMSG_RPropertySource(
						m_ReturnMessages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ClassFormalInstance.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ClassO_OBJPropertySource(m_ClassFormalInstance[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of Class Instance Participant";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			} else if (id.equals("InformalClassName")) {
				if (!value.toString().equals(m_inst.getInformalclassname())) {
					trans_name = "Change in property: 'InformalClassName' of Class Instance Participant";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setInformalclassname(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Class Instance Participant";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
