//======================================================================
//
// File: DataTypePackageS_DPKPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class DataTypePackageS_DPKPropertySource implements IPropertySource {
	private DataTypePackage_c m_inst;
	private CoreDataType_c[] m_CoreDataType;
	private UserDataType_c[] m_UserDefinedDataType;
	private EnumerationDataType_c[] m_Enumeration;
	private StructuredDataType_c[] m_StructuredDataType;
	private DataTypePackage_c[] m_DataTypePackage;
	private ConstantSpecification_c[] m_ConstantSpecification;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public DataTypePackageS_DPKPropertySource(DataTypePackage_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		CoreDataType_c[] v_coredatatype = CoreDataType_c
				.getManyS_CDTsOnR17(DataType_c.getManyS_DTsOnR39(DataTypeInPackage_c
						.getManyS_DIPsOnR39((DataTypePackage_c) m_inst)));

		m_CoreDataType = v_coredatatype;
		num_children += m_CoreDataType.length;

		sorter.sort(v_coredatatype);
		UserDataType_c[] v_userdefineddatatype = UserDataType_c
				.getManyS_UDTsOnR17(DataType_c.getManyS_DTsOnR39(DataTypeInPackage_c
						.getManyS_DIPsOnR39((DataTypePackage_c) m_inst)));

		m_UserDefinedDataType = v_userdefineddatatype;
		num_children += m_UserDefinedDataType.length;

		sorter.sort(v_userdefineddatatype);
		EnumerationDataType_c[] v_enumeration = EnumerationDataType_c
				.getManyS_EDTsOnR17(DataType_c.getManyS_DTsOnR39(DataTypeInPackage_c
						.getManyS_DIPsOnR39((DataTypePackage_c) m_inst)));

		m_Enumeration = v_enumeration;
		num_children += m_Enumeration.length;

		sorter.sort(v_enumeration);
		StructuredDataType_c[] v_structureddatatype = StructuredDataType_c
				.getManyS_SDTsOnR17(DataType_c.getManyS_DTsOnR39(DataTypeInPackage_c
						.getManyS_DIPsOnR39((DataTypePackage_c) m_inst)));

		m_StructuredDataType = v_structureddatatype;
		num_children += m_StructuredDataType.length;

		sorter.sort(v_structureddatatype);
		DataTypePackage_c[] v_datatypepackage = DataTypePackage_c
				.getManyS_DPKsOnR38(DataTypePackageInPackage_c
						.getManyS_DPIPsOnR37((DataTypePackage_c) m_inst));

		m_DataTypePackage = v_datatypepackage;
		num_children += m_DataTypePackage.length;

		sorter.sort(v_datatypepackage);
		ConstantSpecification_c[] v_constantspecification = ConstantSpecification_c
				.getManyCNST_CSPsOnR1506(ConstantInPackage_c
						.getManyCNST_CIPsOnR1506((DataTypePackage_c) m_inst));

		m_ConstantSpecification = v_constantspecification;
		num_children += m_ConstantSpecification.length;

		sorter.sort(v_constantspecification);
		if (m_propertyDescriptors == null
				|| 1 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[1 + num_children];
			boolean readonly = false;

			if (m_inst.Canrename()) {
				m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
						"Data Type Package Name");
			} else {
				m_propertyDescriptors[0] = new PropertyDescriptor("Name",
						"Data Type Package Name");
			}
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 1;
			for (int i = 0; i < m_CoreDataType.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"CoreDataType." + String.valueOf(i), "Core Data Type");
				m_propertyDescriptors[d_index].setCategory("Core Data Type");
				++d_index;
			}

			for (int i = 0; i < m_UserDefinedDataType.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UserDefinedDataType." + String.valueOf(i),
						"User Data Type");
				m_propertyDescriptors[d_index]
						.setCategory("User Defined Data Type");
				++d_index;
			}

			for (int i = 0; i < m_Enumeration.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Enumeration." + String.valueOf(i),
						"Enumeration Data Type");
				m_propertyDescriptors[d_index].setCategory("Enumeration");
				++d_index;
			}

			for (int i = 0; i < m_StructuredDataType.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"StructuredDataType." + String.valueOf(i),
						"Structured Data Type");
				m_propertyDescriptors[d_index]
						.setCategory("Structured Data Type");
				++d_index;
			}

			for (int i = 0; i < m_DataTypePackage.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"DataTypePackage." + String.valueOf(i),
						"Data Type Package");
				m_propertyDescriptors[d_index].setCategory("Data Type Package");
				++d_index;
			}

			for (int i = 0; i < m_ConstantSpecification.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ConstantSpecification." + String.valueOf(i),
						"Constant Specification");
				m_propertyDescriptors[d_index]
						.setCategory("Constant Specification");
				++d_index;
			}

		}
		if (m_propertyDescriptors.length > 0)
			m_propertyDescriptors[0]
					.setValidator(new DataTypePackageNameValidator());
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		}
		int d_index = 1;
		for (int i = 0; i < m_CoreDataType.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new CoreDataTypeS_CDTPropertySource(m_CoreDataType[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UserDefinedDataType.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UserDefinedDataTypeS_UDTPropertySource(
						m_UserDefinedDataType[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Enumeration.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new EnumerationS_EDTPropertySource(m_Enumeration[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_StructuredDataType.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new StructuredDataTypeS_SDTPropertySource(
						m_StructuredDataType[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_DataTypePackage.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new DataTypePackageS_DPKPropertySource(
						m_DataTypePackage[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ConstantSpecification.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ConstantSpecificationCNST_CSPPropertySource(
						m_ConstantSpecification[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of Data Type Package";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
