//======================================================================
//
// File: PackagesEP_PKGPropertySource.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/BuildPropertySource.arc
// Version:      $Revision: 1.66 $
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================

package com.mentor.nucleus.bp.ui.properties;
import org.eclipse.ui.views.properties.*;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.DimensionsUtil;

public class PackagesEP_PKGPropertySource implements IPropertySource {
	private Package_c m_inst;
	private Activity_c[] m_Activities;
	private Communication_c[] m_Communications;
	private ComponentPackage_c[] m_ComponentPackages;
	private DataTypePackage_c[] m_DataTypePackage;
	private InterfacePackage_c[] m_InterfacePackages;
	private Sequence_c[] m_Sequences;
	private UseCaseDiagram_c[] m_UseCaseDiagrams;
	private UserDataType_c[] m_UserDefinedDataType;
	private EnumerationDataType_c[] m_Enumeration;
	private StructuredDataType_c[] m_StructuredDataType;
	private ConstantSpecification_c[] m_ConstantSpecification;
	private ClassInstanceParticipant_c[] m_Instances;
	private ExternalEntityParticipant_c[] m_ImportedExternalEntities;
	private PackageParticipant_c[] m_ImportedPackages;
	private ClassParticipant_c[] m_ImportedClasses;
	private ComponentParticipant_c[] m_ComponentParticipants;
	private ActorParticipant_c[] m_Actors;
	private CommunicationLink_c[] m_CommunicationLinks;
	private UseCaseParticipant_c[] m_UseCases;
	private Association_c[] m_Association;
	private BinaryAssociation_c[] m_UseCaseAssociations;
	private Generalization_c[] m_UseCaseGeneralizations;
	private Include_c[] m_UseCaseIncludes;
	private Extend_c[] m_UseCaseExtends;
	private ForkJoinNode_c[] m_ForkJoins;
	private InitialNode_c[] m_InitialNodes;
	private ActivityEdge_c[] m_ActivityEdges;
	private ActivityFinalNode_c[] m_ActivityFinalNodes;
	private FlowFinalNode_c[] m_FlowFinalNodes;
	private ActivityDiagramAction_c[] m_ActivityDiagramActions;
	private DecisionMergeNode_c[] m_DecisionMergeNodes;
	private ObjectNode_c[] m_ObjectNodes;
	private AcceptEventAction_c[] m_AcceptEventActions;
	private SendSignal_c[] m_SendSignalActions;
	private AcceptTimeEventAction_c[] m_AcceptTimeEventActions;
	private ModelClass_c[] m_Class;
	private ImportedClass_c[] m_ImportedClass;
	private Component_c[] m_Components;
	private ComponentReference_c[] m_ComponentReferences;
	private Interface_c[] m_Interfaces;
	private ExternalEntity_c[] m_ExternalEntity;
	private Function_c[] m_Function;
	private ActivityPartition_c[] m_ActivityPartitions;
	private SynchronousMessage_c[] m_SynchronousMessages;
	private AsynchronousMessage_c[] m_AsynchronousMessages;
	private ReturnMessage_c[] m_ReturnMessages;
	private Package_c[] m_Packages;
	private Satisfaction_c[] m_Satisfactions;
	private PropertyDescriptor[] m_propertyDescriptors;

	MetadataSortingManager sorter = MetadataSortingManager.createDefault();

	public PackagesEP_PKGPropertySource(Package_c inst) {
		m_inst = inst;
	}
	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return false;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	public String toString() {
		return m_inst.getName();
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		if (m_inst == null || m_inst.isOrphaned())
			return new IPropertyDescriptor[0];
		int num_children = 0;
		Activity_c[] v_activities = Activity_c
				.getManyA_AsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_Activities = v_activities;
		num_children += m_Activities.length;

		sorter.sort(v_activities);
		Communication_c[] v_communications = Communication_c
				.getManyCOMM_COMMsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_Communications = v_communications;
		num_children += m_Communications.length;

		sorter.sort(v_communications);
		ComponentPackage_c[] v_componentpackages = ComponentPackage_c
				.getManyCP_CPsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_ComponentPackages = v_componentpackages;
		num_children += m_ComponentPackages.length;

		sorter.sort(v_componentpackages);
		DataTypePackage_c[] v_datatypepackage = DataTypePackage_c
				.getManyS_DPKsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_DataTypePackage = v_datatypepackage;
		num_children += m_DataTypePackage.length;

		sorter.sort(v_datatypepackage);
		InterfacePackage_c[] v_interfacepackages = InterfacePackage_c
				.getManyIP_IPsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_InterfacePackages = v_interfacepackages;
		num_children += m_InterfacePackages.length;

		sorter.sort(v_interfacepackages);
		Sequence_c[] v_sequences = Sequence_c
				.getManySQ_SsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_Sequences = v_sequences;
		num_children += m_Sequences.length;

		sorter.sort(v_sequences);
		UseCaseDiagram_c[] v_usecasediagrams = UseCaseDiagram_c
				.getManyUC_UCCsOnR1402(SpecificationPackage_c
						.getManyEP_SPKGsOnR1400((Package_c) m_inst));

		m_UseCaseDiagrams = v_usecasediagrams;
		num_children += m_UseCaseDiagrams.length;

		sorter.sort(v_usecasediagrams);
		UserDataType_c[] v_userdefineddatatype = UserDataType_c
				.getManyS_UDTsOnR17(DataType_c
						.getManyS_DTsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_UserDefinedDataType = v_userdefineddatatype;
		num_children += m_UserDefinedDataType.length;

		sorter.sort(v_userdefineddatatype);
		EnumerationDataType_c[] v_enumeration = EnumerationDataType_c
				.getManyS_EDTsOnR17(DataType_c
						.getManyS_DTsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_Enumeration = v_enumeration;
		num_children += m_Enumeration.length;

		sorter.sort(v_enumeration);
		StructuredDataType_c[] v_structureddatatype = StructuredDataType_c
				.getManyS_SDTsOnR17(DataType_c
						.getManyS_DTsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_StructuredDataType = v_structureddatatype;
		num_children += m_StructuredDataType.length;

		sorter.sort(v_structureddatatype);
		ConstantSpecification_c[] v_constantspecification = ConstantSpecification_c
				.getManyCNST_CSPsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_ConstantSpecification = v_constantspecification;
		num_children += m_ConstantSpecification.length;

		sorter.sort(v_constantspecification);
		ClassInstanceParticipant_c[] v_instances = ClassInstanceParticipant_c
				.getManySQ_CIPsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_Instances = v_instances;
		num_children += m_Instances.length;

		sorter.sort(v_instances);
		ExternalEntityParticipant_c[] v_importedexternalentities = ExternalEntityParticipant_c
				.getManySQ_EEPsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_ImportedExternalEntities = v_importedexternalentities;
		num_children += m_ImportedExternalEntities.length;

		sorter.sort(v_importedexternalentities);
		PackageParticipant_c[] v_importedpackages = PackageParticipant_c
				.getManySQ_PPsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_ImportedPackages = v_importedpackages;
		num_children += m_ImportedPackages.length;

		sorter.sort(v_importedpackages);
		ClassParticipant_c[] v_importedclasses = ClassParticipant_c
				.getManySQ_CPsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_ImportedClasses = v_importedclasses;
		num_children += m_ImportedClasses.length;

		sorter.sort(v_importedclasses);
		ComponentParticipant_c[] v_componentparticipants = ComponentParticipant_c
				.getManySQ_COPsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_ComponentParticipants = v_componentparticipants;
		num_children += m_ComponentParticipants.length;

		sorter.sort(v_componentparticipants);
		ActorParticipant_c[] v_actors = ActorParticipant_c
				.getManySQ_APsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_Actors = v_actors;
		num_children += m_Actors.length;

		sorter.sort(v_actors);
		CommunicationLink_c[] v_communicationlinks = CommunicationLink_c
				.getManyCOMM_LNKsOnR1133(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_CommunicationLinks = v_communicationlinks;
		num_children += m_CommunicationLinks.length;

		sorter.sort(v_communicationlinks);
		UseCaseParticipant_c[] v_usecases = UseCaseParticipant_c
				.getManyIA_UCPsOnR930(InteractionParticipant_c
						.getManySQ_PsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_UseCases = v_usecases;
		num_children += m_UseCases.length;

		sorter.sort(v_usecases);
		Association_c[] v_association = Association_c
				.getManyR_RELsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_Association = v_association;
		num_children += m_Association.length;

		sorter.sort(v_association);
		BinaryAssociation_c[] v_usecaseassociations = BinaryAssociation_c
				.getManyUC_BAsOnR1210(UseCaseAssociation_c
						.getManyUC_UCAsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_UseCaseAssociations = v_usecaseassociations;
		num_children += m_UseCaseAssociations.length;

		sorter.sort(v_usecaseassociations);
		Generalization_c[] v_usecasegeneralizations = Generalization_c
				.getManyUC_GsOnR1210(UseCaseAssociation_c
						.getManyUC_UCAsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_UseCaseGeneralizations = v_usecasegeneralizations;
		num_children += m_UseCaseGeneralizations.length;

		sorter.sort(v_usecasegeneralizations);
		Include_c[] v_usecaseincludes = Include_c
				.getManyUC_IsOnR1210(UseCaseAssociation_c
						.getManyUC_UCAsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_UseCaseIncludes = v_usecaseincludes;
		num_children += m_UseCaseIncludes.length;

		sorter.sort(v_usecaseincludes);
		Extend_c[] v_usecaseextends = Extend_c
				.getManyUC_EsOnR1210(UseCaseAssociation_c
						.getManyUC_UCAsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_UseCaseExtends = v_usecaseextends;
		num_children += m_UseCaseExtends.length;

		sorter.sort(v_usecaseextends);
		ForkJoinNode_c[] v_forkjoins = ForkJoinNode_c
				.getManyA_FJsOnR1106(ControlNode_c.getManyA_CTLsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_ForkJoins = v_forkjoins;
		num_children += m_ForkJoins.length;

		sorter.sort(v_forkjoins);
		InitialNode_c[] v_initialnodes = InitialNode_c
				.getManyA_INIsOnR1106(ControlNode_c.getManyA_CTLsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_InitialNodes = v_initialnodes;
		num_children += m_InitialNodes.length;

		sorter.sort(v_initialnodes);
		ActivityEdge_c[] v_activityedges = ActivityEdge_c
				.getManyA_EsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_ActivityEdges = v_activityedges;
		num_children += m_ActivityEdges.length;

		sorter.sort(v_activityedges);
		ActivityFinalNode_c[] v_activityfinalnodes = ActivityFinalNode_c
				.getManyA_AFsOnR1106(ControlNode_c.getManyA_CTLsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_ActivityFinalNodes = v_activityfinalnodes;
		num_children += m_ActivityFinalNodes.length;

		sorter.sort(v_activityfinalnodes);
		FlowFinalNode_c[] v_flowfinalnodes = FlowFinalNode_c
				.getManyA_FFsOnR1106(ControlNode_c.getManyA_CTLsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_FlowFinalNodes = v_flowfinalnodes;
		num_children += m_FlowFinalNodes.length;

		sorter.sort(v_flowfinalnodes);
		ActivityDiagramAction_c[] v_activitydiagramactions = ActivityDiagramAction_c
				.getManyA_GAsOnR1107(ActionNode_c.getManyA_ACTsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_ActivityDiagramActions = v_activitydiagramactions;
		num_children += m_ActivityDiagramActions.length;

		sorter.sort(v_activitydiagramactions);
		DecisionMergeNode_c[] v_decisionmergenodes = DecisionMergeNode_c
				.getManyA_DMsOnR1106(ControlNode_c.getManyA_CTLsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_DecisionMergeNodes = v_decisionmergenodes;
		num_children += m_DecisionMergeNodes.length;

		sorter.sort(v_decisionmergenodes);
		ObjectNode_c[] v_objectnodes = ObjectNode_c
				.getManyA_OBJsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_ObjectNodes = v_objectnodes;
		num_children += m_ObjectNodes.length;

		sorter.sort(v_objectnodes);
		AcceptEventAction_c[] v_accepteventactions = AcceptEventAction_c
				.getManyA_AEAsOnR1112(AcceptEvent_c.getManyA_AEsOnR1107(ActionNode_c.getManyA_ACTsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)))));

		m_AcceptEventActions = v_accepteventactions;
		num_children += m_AcceptEventActions.length;

		sorter.sort(v_accepteventactions);
		SendSignal_c[] v_sendsignalactions = SendSignal_c
				.getManyA_SSsOnR1107(ActionNode_c.getManyA_ACTsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst))));

		m_SendSignalActions = v_sendsignalactions;
		num_children += m_SendSignalActions.length;

		sorter.sort(v_sendsignalactions);
		AcceptTimeEventAction_c[] v_accepttimeeventactions = AcceptTimeEventAction_c
				.getManyA_ATEsOnR1112(AcceptEvent_c.getManyA_AEsOnR1107(ActionNode_c.getManyA_ACTsOnR1105(ActivityNode_c
						.getManyA_NsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)))));

		m_AcceptTimeEventActions = v_accepttimeeventactions;
		num_children += m_AcceptTimeEventActions.length;

		sorter.sort(v_accepttimeeventactions);
		ModelClass_c[] v_class = ModelClass_c
				.getManyO_OBJsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_Class = v_class;
		num_children += m_Class.length;

		sorter.sort(v_class);
		ImportedClass_c[] v_importedclass = ImportedClass_c
				.getManyO_IOBJsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_ImportedClass = v_importedclass;
		num_children += m_ImportedClass.length;

		sorter.sort(v_importedclass);
		Component_c[] v_components = Component_c
				.getManyC_CsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_Components = v_components;
		num_children += m_Components.length;

		sorter.sort(v_components);
		ComponentReference_c[] v_componentreferences = ComponentReference_c
				.getManyCL_ICsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_ComponentReferences = v_componentreferences;
		num_children += m_ComponentReferences.length;

		sorter.sort(v_componentreferences);
		Interface_c[] v_interfaces = Interface_c
				.getManyC_IsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_Interfaces = v_interfaces;
		num_children += m_Interfaces.length;

		sorter.sort(v_interfaces);
		ExternalEntity_c[] v_externalentity = ExternalEntity_c
				.getManyS_EEsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_ExternalEntity = v_externalentity;
		num_children += m_ExternalEntity.length;

		sorter.sort(v_externalentity);
		Function_c[] v_function = Function_c
				.getManyS_SYNCsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_Function = v_function;
		num_children += m_Function.length;

		sorter.sort(v_function);
		ActivityPartition_c[] v_activitypartitions = ActivityPartition_c
				.getManyA_APsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_ActivityPartitions = v_activitypartitions;
		num_children += m_ActivityPartitions.length;

		sorter.sort(v_activitypartitions);
		SynchronousMessage_c[] v_synchronousmessages = SynchronousMessage_c
				.getManyMSG_SMsOnR1018(Message_c
						.getManyMSG_MsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_SynchronousMessages = v_synchronousmessages;
		num_children += m_SynchronousMessages.length;

		sorter.sort(v_synchronousmessages);
		AsynchronousMessage_c[] v_asynchronousmessages = AsynchronousMessage_c
				.getManyMSG_AMsOnR1018(Message_c
						.getManyMSG_MsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_AsynchronousMessages = v_asynchronousmessages;
		num_children += m_AsynchronousMessages.length;

		sorter.sort(v_asynchronousmessages);
		ReturnMessage_c[] v_returnmessages = ReturnMessage_c
				.getManyMSG_RsOnR1018(Message_c
						.getManyMSG_MsOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000((Package_c) m_inst)));

		m_ReturnMessages = v_returnmessages;
		num_children += m_ReturnMessages.length;

		sorter.sort(v_returnmessages);
		Package_c[] v_packages = Package_c
				.getManyEP_PKGsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));
		m_Packages = v_packages;
		num_children += v_packages.length;

		sorter.sort(v_packages);
		Satisfaction_c[] v_satisfactions = Satisfaction_c
				.getManyC_SFsOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000((Package_c) m_inst));

		m_Satisfactions = v_satisfactions;
		num_children += m_Satisfactions.length;

		sorter.sort(v_satisfactions);
		if (m_propertyDescriptors == null
				|| 3 + num_children != m_propertyDescriptors.length) {
			m_propertyDescriptors = new PropertyDescriptor[3 + num_children];
			boolean readonly = false;

			m_propertyDescriptors[0] = new TextPropertyDescriptor("Name",
					"Package Name");
			m_propertyDescriptors[0]
					.setValidator(new ModelElementNameValidator(m_inst));
			m_propertyDescriptors[0]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[1] = new DescriptionPropertyDescriptor(
					"Descrip", "Package Description", m_inst);
			m_propertyDescriptors[1]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);
			m_propertyDescriptors[2] = new IntegerPropertyDescriptor("Num_Rng",
					"Number Range", 0, 9999, readonly);
			m_propertyDescriptors[2]
					.setCategory(BridgepointPropertySheetPage.basicCategoryName);

			int d_index = 3;
			for (int i = 0; i < m_Activities.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Activities." + String.valueOf(i), "Activity");
				m_propertyDescriptors[d_index].setCategory("Activities");
				++d_index;
			}

			for (int i = 0; i < m_Communications.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Communications." + String.valueOf(i), "Communication");
				m_propertyDescriptors[d_index].setCategory("Communications");
				++d_index;
			}

			for (int i = 0; i < m_ComponentPackages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentPackages." + String.valueOf(i),
						"Component Package");
				m_propertyDescriptors[d_index]
						.setCategory("Component Packages");
				++d_index;
			}

			for (int i = 0; i < m_DataTypePackage.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"DataTypePackage." + String.valueOf(i),
						"Data Type Package");
				m_propertyDescriptors[d_index].setCategory("Data Type Package");
				++d_index;
			}

			for (int i = 0; i < m_InterfacePackages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InterfacePackages." + String.valueOf(i),
						"Interface Package");
				m_propertyDescriptors[d_index]
						.setCategory("Interface Packages");
				++d_index;
			}

			for (int i = 0; i < m_Sequences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Sequences." + String.valueOf(i), "Sequence");
				m_propertyDescriptors[d_index].setCategory("Sequences");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseDiagrams." + String.valueOf(i),
						"Use Case Diagram");
				m_propertyDescriptors[d_index].setCategory("Use Case Diagrams");
				++d_index;
			}

			for (int i = 0; i < m_UserDefinedDataType.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UserDefinedDataType." + String.valueOf(i),
						"User Data Type");
				m_propertyDescriptors[d_index]
						.setCategory("User Defined Data Type");
				++d_index;
			}

			for (int i = 0; i < m_Enumeration.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Enumeration." + String.valueOf(i),
						"Enumeration Data Type");
				m_propertyDescriptors[d_index].setCategory("Enumeration");
				++d_index;
			}

			for (int i = 0; i < m_StructuredDataType.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"StructuredDataType." + String.valueOf(i),
						"Structured Data Type");
				m_propertyDescriptors[d_index]
						.setCategory("Structured Data Type");
				++d_index;
			}

			for (int i = 0; i < m_ConstantSpecification.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ConstantSpecification." + String.valueOf(i),
						"Constant Specification");
				m_propertyDescriptors[d_index]
						.setCategory("Constant Specification");
				++d_index;
			}

			for (int i = 0; i < m_Instances.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Instances." + String.valueOf(i),
						"Class Instance Participant");
				m_propertyDescriptors[d_index].setCategory("Instances");
				++d_index;
			}

			for (int i = 0; i < m_ImportedExternalEntities.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ImportedExternalEntities." + String.valueOf(i),
						"External Entity Participant");
				m_propertyDescriptors[d_index]
						.setCategory("Imported External Entities");
				++d_index;
			}

			for (int i = 0; i < m_ImportedPackages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ImportedPackages." + String.valueOf(i),
						"Package Participant");
				m_propertyDescriptors[d_index].setCategory("Imported Packages");
				++d_index;
			}

			for (int i = 0; i < m_ImportedClasses.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ImportedClasses." + String.valueOf(i),
						"Class Participant");
				m_propertyDescriptors[d_index].setCategory("Imported Classes");
				++d_index;
			}

			for (int i = 0; i < m_ComponentParticipants.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentParticipants." + String.valueOf(i),
						"Component Participant");
				m_propertyDescriptors[d_index]
						.setCategory("Component Participants");
				++d_index;
			}

			for (int i = 0; i < m_Actors.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Actors." + String.valueOf(i), "Actor Participant");
				m_propertyDescriptors[d_index].setCategory("Actors");
				++d_index;
			}

			for (int i = 0; i < m_CommunicationLinks.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"CommunicationLinks." + String.valueOf(i),
						"Communication Link");
				m_propertyDescriptors[d_index]
						.setCategory("Communication Links");
				++d_index;
			}

			for (int i = 0; i < m_UseCases.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCases." + String.valueOf(i), "Use Case Participant");
				m_propertyDescriptors[d_index].setCategory("Use Cases");
				++d_index;
			}

			for (int i = 0; i < m_Association.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Association." + String.valueOf(i), "Association");
				m_propertyDescriptors[d_index].setCategory("Association");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseAssociations.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseAssociations." + String.valueOf(i),
						"Binary Association");
				m_propertyDescriptors[d_index]
						.setCategory("Use Case Associations");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseGeneralizations.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseGeneralizations." + String.valueOf(i),
						"Generalization");
				m_propertyDescriptors[d_index]
						.setCategory("Use Case Generalizations");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseIncludes.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseIncludes." + String.valueOf(i), "Include");
				m_propertyDescriptors[d_index].setCategory("Use Case Includes");
				++d_index;
			}

			for (int i = 0; i < m_UseCaseExtends.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"UseCaseExtends." + String.valueOf(i), "Extend");
				m_propertyDescriptors[d_index].setCategory("Use Case Extends");
				++d_index;
			}

			for (int i = 0; i < m_ForkJoins.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ForkJoins." + String.valueOf(i), "Fork Join Node");
				m_propertyDescriptors[d_index].setCategory("ForkJoins");
				++d_index;
			}

			for (int i = 0; i < m_InitialNodes.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"InitialNodes." + String.valueOf(i), "Initial Node");
				m_propertyDescriptors[d_index].setCategory("InitialNodes");
				++d_index;
			}

			for (int i = 0; i < m_ActivityEdges.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ActivityEdges." + String.valueOf(i), "Activity Edge");
				m_propertyDescriptors[d_index].setCategory("ActivityEdges");
				++d_index;
			}

			for (int i = 0; i < m_ActivityFinalNodes.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ActivityFinalNodes." + String.valueOf(i),
						"Activity Final Node");
				m_propertyDescriptors[d_index]
						.setCategory("ActivityFinalNodes");
				++d_index;
			}

			for (int i = 0; i < m_FlowFinalNodes.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"FlowFinalNodes." + String.valueOf(i),
						"Flow Final Node");
				m_propertyDescriptors[d_index].setCategory("FlowFinalNodes");
				++d_index;
			}

			for (int i = 0; i < m_ActivityDiagramActions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ActivityDiagramActions." + String.valueOf(i),
						"Activity Diagram Action");
				m_propertyDescriptors[d_index]
						.setCategory("ActivityDiagramActions");
				++d_index;
			}

			for (int i = 0; i < m_DecisionMergeNodes.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"DecisionMergeNodes." + String.valueOf(i),
						"Decision Merge Node");
				m_propertyDescriptors[d_index]
						.setCategory("DecisionMergeNodes");
				++d_index;
			}

			for (int i = 0; i < m_ObjectNodes.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ObjectNodes." + String.valueOf(i), "Object Node");
				m_propertyDescriptors[d_index].setCategory("ObjectNodes");
				++d_index;
			}

			for (int i = 0; i < m_AcceptEventActions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"AcceptEventActions." + String.valueOf(i),
						"Accept Event Action");
				m_propertyDescriptors[d_index]
						.setCategory("AcceptEventActions");
				++d_index;
			}

			for (int i = 0; i < m_SendSignalActions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"SendSignalActions." + String.valueOf(i), "Send Signal");
				m_propertyDescriptors[d_index].setCategory("SendSignalActions");
				++d_index;
			}

			for (int i = 0; i < m_AcceptTimeEventActions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"AcceptTimeEventActions." + String.valueOf(i),
						"Accept Time Event Action");
				m_propertyDescriptors[d_index]
						.setCategory("AcceptTimeEventActions");
				++d_index;
			}

			for (int i = 0; i < m_Class.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Class." + String.valueOf(i), "Model Class");
				m_propertyDescriptors[d_index].setCategory("Class");
				++d_index;
			}

			for (int i = 0; i < m_ImportedClass.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ImportedClass." + String.valueOf(i), "Imported Class");
				m_propertyDescriptors[d_index].setCategory("Imported Class");
				++d_index;
			}

			for (int i = 0; i < m_Components.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Components." + String.valueOf(i), "Component");
				m_propertyDescriptors[d_index].setCategory("Components");
				++d_index;
			}

			for (int i = 0; i < m_ComponentReferences.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ComponentReferences." + String.valueOf(i),
						"Component Reference");
				m_propertyDescriptors[d_index]
						.setCategory("Component References");
				++d_index;
			}

			for (int i = 0; i < m_Interfaces.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Interfaces." + String.valueOf(i), "Interface");
				m_propertyDescriptors[d_index].setCategory("Interfaces");
				++d_index;
			}

			for (int i = 0; i < m_ExternalEntity.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ExternalEntity." + String.valueOf(i),
						"External Entity");
				m_propertyDescriptors[d_index].setCategory("External Entity");
				++d_index;
			}

			for (int i = 0; i < m_Function.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Function." + String.valueOf(i), "Function");
				m_propertyDescriptors[d_index].setCategory("Function");
				++d_index;
			}

			for (int i = 0; i < m_ActivityPartitions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ActivityPartitions." + String.valueOf(i),
						"Activity Partition");
				m_propertyDescriptors[d_index]
						.setCategory("ActivityPartitions");
				++d_index;
			}

			for (int i = 0; i < m_SynchronousMessages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"SynchronousMessages." + String.valueOf(i),
						"Synchronous Message");
				m_propertyDescriptors[d_index]
						.setCategory("Synchronous Messages");
				++d_index;
			}

			for (int i = 0; i < m_AsynchronousMessages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"AsynchronousMessages." + String.valueOf(i),
						"Asynchronous Message");
				m_propertyDescriptors[d_index]
						.setCategory("Asynchronous Messages");
				++d_index;
			}

			for (int i = 0; i < m_ReturnMessages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"ReturnMessages." + String.valueOf(i), "Return Message");
				m_propertyDescriptors[d_index].setCategory("Return Messages");
				++d_index;
			}

			for (int i = 0; i < m_Packages.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Packages." + String.valueOf(i), "Package");
				m_propertyDescriptors[d_index].setCategory("Packages");
				++d_index;
			}

			for (int i = 0; i < m_Satisfactions.length; ++i) {
				m_propertyDescriptors[d_index] = new PropertyDescriptor(
						"Satisfactions." + String.valueOf(i), "Satisfaction");
				m_propertyDescriptors[d_index].setCategory("Satisfactions");
				++d_index;
			}

		}
		if (m_propertyDescriptors.length > 0)
			m_propertyDescriptors[0].setValidator(new PackageNameValidator());
		return m_propertyDescriptors;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {
		if (m_inst.isOrphaned()) {
			return "";
		}
		if (id.equals("Name")) {
			return m_inst.getName();
		} else if (id.equals("Descrip")) {
			return m_inst.getDescrip().replace('\n', '/');
		} else if (id.equals("Num_Rng")) {
			return String.valueOf(m_inst.getNum_rng());
		}
		int d_index = 3;
		for (int i = 0; i < m_Activities.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivitiesA_APropertySource(m_Activities[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Communications.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new CommunicationsCOMM_COMMPropertySource(
						m_Communications[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentPackages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentPackagesCP_CPPropertySource(
						m_ComponentPackages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_DataTypePackage.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new DataTypePackageS_DPKPropertySource(
						m_DataTypePackage[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InterfacePackages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InterfacePackagesIP_IPPropertySource(
						m_InterfacePackages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Sequences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SequencesSQ_SPropertySource(m_Sequences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseDiagrams.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseDiagramsUC_UCCPropertySource(
						m_UseCaseDiagrams[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UserDefinedDataType.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UserDefinedDataTypeS_UDTPropertySource(
						m_UserDefinedDataType[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Enumeration.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new EnumerationS_EDTPropertySource(m_Enumeration[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_StructuredDataType.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new StructuredDataTypeS_SDTPropertySource(
						m_StructuredDataType[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ConstantSpecification.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ConstantSpecificationCNST_CSPPropertySource(
						m_ConstantSpecification[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Instances.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InstancesSQ_CIPPropertySource(m_Instances[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ImportedExternalEntities.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ImportedExternalEntitiesSQ_EEPPropertySource(
						m_ImportedExternalEntities[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ImportedPackages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ImportedPackagesSQ_PPPropertySource(
						m_ImportedPackages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ImportedClasses.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ImportedClassesSQ_CPPropertySource(
						m_ImportedClasses[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentParticipants.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentParticipantsSQ_COPPropertySource(
						m_ComponentParticipants[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Actors.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActorsSQ_APPropertySource(m_Actors[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_CommunicationLinks.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new CommunicationLinksCOMM_LNKPropertySource(
						m_CommunicationLinks[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCases.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCasesIA_UCPPropertySource(m_UseCases[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Association.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new AssociationR_RELPropertySource(m_Association[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseAssociations.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseAssociationsUC_BAPropertySource(
						m_UseCaseAssociations[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseGeneralizations.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseGeneralizationsUC_GPropertySource(
						m_UseCaseGeneralizations[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseIncludes.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseIncludesUC_IPropertySource(
						m_UseCaseIncludes[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_UseCaseExtends.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new UseCaseExtendsUC_EPropertySource(m_UseCaseExtends[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ForkJoins.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ForkJoinsA_FJPropertySource(m_ForkJoins[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_InitialNodes.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InitialNodesA_INIPropertySource(m_InitialNodes[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ActivityEdges.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivityEdgesA_EPropertySource(m_ActivityEdges[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ActivityFinalNodes.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivityFinalNodesA_AFPropertySource(
						m_ActivityFinalNodes[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_FlowFinalNodes.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FlowFinalNodesA_FFPropertySource(m_FlowFinalNodes[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ActivityDiagramActions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivityDiagramActionsA_GAPropertySource(
						m_ActivityDiagramActions[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_DecisionMergeNodes.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new DecisionMergeNodesA_DMPropertySource(
						m_DecisionMergeNodes[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ObjectNodes.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ObjectNodesA_OBJPropertySource(m_ObjectNodes[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_AcceptEventActions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new AcceptEventActionsA_AEAPropertySource(
						m_AcceptEventActions[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_SendSignalActions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SendSignalActionsA_SSPropertySource(
						m_SendSignalActions[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_AcceptTimeEventActions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new AcceptTimeEventActionsA_ATEPropertySource(
						m_AcceptTimeEventActions[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Class.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ClassO_OBJPropertySource(m_Class[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ImportedClass.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ImportedClassO_IOBJPropertySource(m_ImportedClass[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Components.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentsC_CPropertySource(m_Components[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ComponentReferences.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ComponentReferencesCL_ICPropertySource(
						m_ComponentReferences[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Interfaces.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new InterfacesC_IPropertySource(m_Interfaces[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ExternalEntity.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ExternalEntityS_EEPropertySource(m_ExternalEntity[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Function.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new FunctionS_SYNCPropertySource(m_Function[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ActivityPartitions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ActivityPartitionsA_APPropertySource(
						m_ActivityPartitions[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_SynchronousMessages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SynchronousMessagesMSG_SMPropertySource(
						m_SynchronousMessages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_AsynchronousMessages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new AsynchronousMessagesMSG_AMPropertySource(
						m_AsynchronousMessages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_ReturnMessages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new ReturnMessagesMSG_RPropertySource(
						m_ReturnMessages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Packages.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new PackagesEP_PKGPropertySource(m_Packages[i]);
			}
			++d_index;
		}

		for (int i = 0; i < m_Satisfactions.length; ++i) {
			if (m_propertyDescriptors[d_index].getId().equals(id)) {
				return new SatisfactionsC_SFPropertySource(m_Satisfactions[i]);
			}
			++d_index;
		}

		return null;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object, java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		boolean value_changed = false;
		String trans_name = "";
		Transaction tr = null;
		Ooaofooa modelRoot = (Ooaofooa) m_inst.getModelRoot();
		TransactionManager tm = TransactionManager.getSingleton();
		try {
			if (id.equals("Name")) {
				if (!value.toString().equals(m_inst.getName())) {
					trans_name = "Change in property: 'Name' of Package";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setName(value.toString());
				}
			} else if (id.equals("Descrip")) {
				if (!value.toString().equals(m_inst.getDescrip())) {
					trans_name = "Change in property: 'Descrip' of Package";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setDescrip(value.toString());
				}
			} else if (id.equals("Num_Rng")) {
				int new_val = Integer.parseInt(value.toString());
				if (new_val != m_inst.getNum_rng()) {
					trans_name = "Change in property: 'Num_Rng' of Package";//$NON-NLS-1$
					tr = tm.startTransaction(trans_name,
							Ooaofooa.getDefaultInstance());
					value_changed = true;
					m_inst.setNum_rng(new_val);
				}
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			// this can be null if there was
			// an exception starting the
			// transaction
			if (tr != null) {
				tm.cancelTransaction(tr, e);
				tr = null;
			}
			CorePlugin.logError("Transaction: " + trans_name
					+ " could not complete", e);
		}
		if (tr != null) {
			if (value_changed)
				tm.endTransaction(tr);
			else
				tm.cancelTransaction(tr);
		}
	}
}
