//======================================================================
//
// File: com/mentor/nucleus/bp/ui/properties/test/PropertiesViewTestData.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.47 $$
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
///
// This class is responsible for determing the dependency between
// classes for displaying property changes.
//
package com.mentor.nucleus.bp.ui.properties.test;

import org.eclipse.ui.views.properties.PropertyDescriptor;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;

import com.mentor.nucleus.bp.ui.properties.ActivityPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.BooleanPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.DescriptionPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.DimensionsPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.ChooserPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.EnumPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.IntegerPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.ConstantValuePropertyDescriptor;

public class PropertiesViewTestData
{
	public static final String[][] SystemModel_System =
      {
  .select any S_SYSclass from instances of S_SYS
  .print "Generating class System Model for System"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"System Name",
				"${S_SYSclass.Name}" },
  .select many S_DOMclass_set related by S_SYSclass->S_DOM[R28]
  .assign count = 0
    //Skipping special case for System Model
  .select many CP_CPclass_set related by S_SYSclass->CP_CP[R4602]
  .assign count = 0
    //Skipping special case for System Model
  .select many IP_IPclass_set related by S_SYSclass->IP_IP[R4302]
  .assign count = 0
    //Skipping special case for System Model
  .select many S_DPKclass_set related by S_SYSclass->SLD_SDP[R4400]->S_DPK[R4400]
  .assign count = 0
    //Skipping special case for System Model
  .select many SQ_Sclass_set related by S_SYSclass->SQ_S[R950]
  .assign count = 0
    //Skipping special case for System Model
  .select many UC_UCCclass_set related by S_SYSclass->UC_UCC[R1211]
  .assign count = 0
    //Skipping special case for System Model
  .select many A_Aclass_set related by S_SYSclass->A_A[R1113]
  .assign count = 0
    //Skipping special case for System Model
  .select many COMM_COMMclass_set related by S_SYSclass->COMM_COMM[R1136]
  .assign count = 0
    //Skipping special case for System Model
  .select many EP_PKGclass_set related by S_SYSclass->EP_PKG[R1401]
  .assign count = 0
    //Skipping special case for System Model
      };
	public static final String[][] Function_Function =
      {
  .select any S_SYNCclass from instances of S_SYNC
  .print "Generating class Function for Function"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Name",
				"${S_SYNCclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
			{
               ActivityPropertyDescriptor.class.getName(),
				"Action_Semantics",
				"Action Semantics Field",
				"" },
			{
                EnumPropertyDescriptor.class.getName(),
				"Suc_Pars",
				"Successful Parse Indicator",
				EnumRangeTest.Suc_Pars_vals[${S_SYNCclass.Suc_Pars}] },
			{
               DimensionsPropertyDescriptor.class.getName(),
				"Return_Dimensions",
				"Return Array Dimensions",
				"${S_SYNCclass.Return_Dimensions}" },
  .select many S_DTclass_set related by S_SYNCclass->S_DT[R25]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Return Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_SPARMclass_set related by S_SYNCclass->S_SPARM[R24]
  .assign count = 0
  .for each S_SPARMclass in S_SPARMclass_set
            { PropertyDescriptor.class.getName(),
            "FunctionParameter.${count}",
            "Function Parameter",
            "${S_SPARMclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] FunctionParameter_FunctionParameter =
      {
  .select any S_SPARMclass from instances of S_SPARM
  .print "Generating class Function Parameter for FunctionParameter"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Parameter Name",
				"${S_SPARMclass.Name}" },
			{
                EnumPropertyDescriptor.class.getName(),
				"By_Ref",
				"By Reference Indicator",
				EnumRangeTest.By_Ref_vals[${S_SPARMclass.By_Ref}] },
			{
               DimensionsPropertyDescriptor.class.getName(),
				"Dimensions",
				"Array Dimensions",
				"${S_SPARMclass.Dimensions}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
  .select many S_DTclass_set related by S_SPARMclass->S_DT[R26]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassStateMachine_ClassStateChart =
      {
  .select any SM_ASMclass from instances of SM_ASM
  .print "Generating class Class State Machine for ClassStateChart"
  .select many SM_STATEclass_set related by SM_ASMclass->SM_SM[R517]->SM_STATE[R501]
  .assign count = 0
  .for each SM_STATEclass in SM_STATEclass_set
            { PropertyDescriptor.class.getName(),
            "State.${count}",
            "State Machine State",
            "${SM_STATEclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SM_EVTclass_set related by SM_ASMclass->SM_SM[R517]->SM_EVT[R502]
  .assign count = 0
  .for each SM_EVTclass in SM_EVTclass_set
            { PropertyDescriptor.class.getName(),
            "Event.${count}",
            "State Machine Event",
    .select one nlevt related by SM_EVTclass->SM_SEVT[R525]->SM_NLEVT[R526]
    .if(not_empty nlevt)
      .select one obj related by nlevt->SM_PEVT[R527]->SM_EVT[R525]->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
            "${SM_EVTclass.Mning}::${obj.Name}" },
    .else
      .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
      .if ( not_empty obj )
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .else
        .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519]
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .end if
    .end if
    .assign count = count + 1
  .end for
      };
	public static final String[][] StateMachineState_State =
      {
  .select any SM_STATEclass from instances of SM_STATE
  .print "Generating class State Machine State for State"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"State Name",
				"${SM_STATEclass.Name}" },
			{
               IntegerPropertyDescriptor.class.getName(),
				"Numb",
				"State Number",
				"${SM_STATEclass.Numb}" },
			{
                EnumPropertyDescriptor.class.getName(),
				"Final",
				"Final State Indicator",
				EnumRangeTest.Final_vals[${SM_STATEclass.Final}] },
  .select many SM_SEMEclass_set related by SM_STATEclass->SM_SEME[R503]->SM_EIGN[R504]->SM_SEME[R504]
  .assign count = 0
  .for each SM_SEMEclass in SM_SEMEclass_set
            { PropertyDescriptor.class.getName(),
            "StateEventMatrixEntryEventIgnored.${count}",
            "Event Ignored",
      .select one evt related by SM_SEMEclass->SM_SEVT[R503]->SM_EVT[R525]
      .select one state related by SM_SEMEclass->SM_STATE[R503]
            "State Event Matrix Entry (test_poly::B Class)" },
    .assign count = count + 1
  .end for
  .select many SM_SEMEclass_set related by SM_STATEclass->SM_SEME[R503]->SM_CH[R504]->SM_SEME[R504]
  .assign count = 0
  .for each SM_SEMEclass in SM_SEMEclass_set
            { PropertyDescriptor.class.getName(),
            "StateEventMatrixEntryCantHappen.${count}",
            "Cant Happen",
      .select one evt related by SM_SEMEclass->SM_SEVT[R503]->SM_EVT[R525]
      .select one state related by SM_SEMEclass->SM_STATE[R503]
            "State Event Matrix Entry (test_poly::B Class)" },
    .assign count = count + 1
  .end for
  .select many SM_ACTclass_set related by SM_STATEclass->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514]
  .assign count = 0
  .for each SM_ACTclass in SM_ACTclass_set
            { PropertyDescriptor.class.getName(),
            "Action.${count}",
            "Action",
      .select one state related by SM_ACTclass->SM_AH[R514]->SM_MOAH[R513]->SM_STATE[R511]
      .if(empty state)
            "Transition Action" },
      .else
            "State Action" },
      .end if
    .assign count = count + 1
  .end for
  .select many SM_TXNclass_set related by SM_STATEclass->SM_SEME[R503]->SM_NSTXN[R504]->SM_TXN[R507]
  .assign count = 0
  .for each SM_TXNclass in SM_TXNclass_set
            { PropertyDescriptor.class.getName(),
            "TransitionsNewStateTransitions.${count}",
            "New State Transitions",
            "test_sm::B Class" },
    .assign count = count + 1
  .end for
  .select many SM_TXNclass_set related by SM_STATEclass->SM_NETXN[R508]->SM_TXN[R507]
  .assign count = 0
  .for each SM_TXNclass in SM_TXNclass_set
            { PropertyDescriptor.class.getName(),
            "TransitionsNoEventTransitions.${count}",
            "No Event Transitions",
            "test_sm::B Class" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] DataType_DataType =
      {
  .select any S_DTclass from instances of S_DT where (selected.Name == "void")
  .print "Generating class Data Type for DataType"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Data Type Name",
				"${S_DTclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Data Type Description",
				"" },
			{
               TextPropertyDescriptor.class.getName(),
				"DefaultValue",
				"Default Value",
				"${S_DTclass.DefaultValue}" },
      };
	public static final String[][] Enumerator_Enumerator =
      {
  .select any S_ENUMclass from instances of S_ENUM
  .print "Generating class Enumerator for Enumerator"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Enumerator Name",
				"${S_ENUMclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Enumerator Description",
				"" },
      };
	public static final String[][] ExternalEntity_ExternalEntity =
      {
  .select any S_EEclass from instances of S_EE
  .print "Generating class External Entity for ExternalEntity"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"External Entity Name",
				"${S_EEclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"External Entity Description",
				"" },
			{
               TextPropertyDescriptor.class.getName(),
				"Key_Lett",
				"External Entity Key Letters",
				"${S_EEclass.Key_Lett}" },
			{
               TextPropertyDescriptor.class.getName(),
				"Realized_Class_Path",
				"Realized External Entity Path",
				"${S_EEclass.Realized_Class_Path}" },
			{
                PropertyDescriptor.class.getName(),
				"Label",
				"External Entity Label",
				"${S_EEclass.Label}" },
			{
               BooleanPropertyDescriptor.class.getName(),
				"isRealized",
				"Realized External Entity",
				"true" },            
  .select many S_BRGclass_set related by S_EEclass->S_BRG[R19]
  .assign count = 0
  .for each S_BRGclass in S_BRGclass_set
            { PropertyDescriptor.class.getName(),
            "Bridge.${count}",
            "Bridge",
            "${S_BRGclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Bridge_Bridge =
      {
  .select any S_BRGclass from instances of S_BRG
  .print "Generating class Bridge for Bridge"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Bridge Name",
				"${S_BRGclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Bridge Description",
				"" },
			{
                EnumPropertyDescriptor.class.getName(),
				"Brg_Typ",
				"Bridge Type",
				EnumRangeTest.Brg_Typ_vals[${S_BRGclass.Brg_Typ}] },
			{
               ActivityPropertyDescriptor.class.getName(),
				"Action_Semantics",
				"Action Semantics Field",
				"" },
			{
                EnumPropertyDescriptor.class.getName(),
				"Suc_Pars",
				"Successful Parse Indicator",
				EnumRangeTest.Suc_Pars_vals[${S_BRGclass.Suc_Pars}] },
			{
               DimensionsPropertyDescriptor.class.getName(),
				"Return_Dimensions",
				"Return Array Dimensions",
				"${S_BRGclass.Return_Dimensions}" },
  .select many S_DTclass_set related by S_BRGclass->S_DT[R20]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Return Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_BPARMclass_set related by S_BRGclass->S_BPARM[R21]
  .assign count = 0
  .for each S_BPARMclass in S_BPARMclass_set
            { PropertyDescriptor.class.getName(),
            "BridgeParameter.${count}",
            "Bridge Parameter",
            "${S_BPARMclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] BridgeParameter_BridgeParameter =
      {
  .select any S_BPARMclass from instances of S_BPARM
  .print "Generating class Bridge Parameter for BridgeParameter"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Bridge Parameter Name",
				"${S_BPARMclass.Name}" },
			{
                EnumPropertyDescriptor.class.getName(),
				"By_Ref",
				"By Reference Indicator",
				EnumRangeTest.By_Ref_vals[${S_BPARMclass.By_Ref}] },
			{
               DimensionsPropertyDescriptor.class.getName(),
				"Dimensions",
				"Array Dimensions",
				"${S_BPARMclass.Dimensions}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
  .select many S_DTclass_set related by S_BPARMclass->S_DT[R22]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Association_Association =
      {
  .select any R_RELclass from instances of R_REL
  .print "Generating class Association for Association"
			{
               IntegerPropertyDescriptor.class.getName(),
				"Numb",
				"Association Number",
				"${R_RELclass.Numb}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Association Description",
				"" },
  .select many R_PARTclass_set related by R_RELclass->R_OIR[R201]->R_RTO[R203]->R_PART[R204]
  .assign count = 0
  .for each R_PARTclass in R_PARTclass_set
            { PropertyDescriptor.class.getName(),
            "AssociationParticipantEnd.${count}",
            "Class As Simple Participant",
      .select one obj related by R_PARTclass->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
            "${obj.Name}" },
    .assign count = count + 1
  .end for
  .select many R_FORMclass_set related by R_RELclass->R_OIR[R201]->R_RGO[R203]->R_FORM[R205]
  .assign count = 0
  .for each R_FORMclass in R_FORMclass_set
            { PropertyDescriptor.class.getName(),
            "AssociationFormalizerEnd.${count}",
            "Class As Simple Formalizer",
      .select one obj related by R_FORMclass->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
            "${obj.Name}" },
    .assign count = count + 1
  .end for
  .select many R_AONEclass_set related by R_RELclass->R_OIR[R201]->R_RTO[R203]->R_AONE[R204]
  .assign count = 0
  .for each R_AONEclass in R_AONEclass_set
            { PropertyDescriptor.class.getName(),
            "AssociativeOneEnd.${count}",
            "Class As Associated One Side",
            "${R_AONEclass.Name}" },
    .assign count = count + 1
  .end for
  .select many R_AOTHclass_set related by R_RELclass->R_OIR[R201]->R_RTO[R203]->R_AOTH[R204]
  .assign count = 0
  .for each R_AOTHclass in R_AOTHclass_set
            { PropertyDescriptor.class.getName(),
            "AssociativeOtherEnd.${count}",
            "Class As Associated Other Side",
            "${R_AOTHclass.Name}" },
    .assign count = count + 1
  .end for
  .select many R_ASSRclass_set related by R_RELclass->R_OIR[R201]->R_RGO[R203]->R_ASSR[R205]
  .assign count = 0
  .for each R_ASSRclass in R_ASSRclass_set
            { PropertyDescriptor.class.getName(),
            "Associative.${count}",
            "Class As Link",
            "${R_ASSRclass.Name}" },
    .assign count = count + 1
  .end for
  .select many R_SUPERclass_set related by R_RELclass->R_OIR[R201]->R_RTO[R203]->R_SUPER[R204]
  .assign count = 0
  .for each R_SUPERclass in R_SUPERclass_set
            { PropertyDescriptor.class.getName(),
            "Supertype.${count}",
            "Class As Supertype",
            "${R_SUPERclass.Name}" },
    .assign count = count + 1
  .end for
  .select many R_SUBclass_set related by R_RELclass->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]
  .assign count = 0
  .for each R_SUBclass in R_SUBclass_set
            { PropertyDescriptor.class.getName(),
            "Subtype.${count}",
            "Class As Subtype",
            "${R_SUBclass.Name}" },
    .assign count = count + 1
  .end for
  .select many R_COMPclass_set related by R_RELclass->R_COMP[R206]
  .assign count = 0
  .for each R_COMPclass in R_COMPclass_set
            { PropertyDescriptor.class.getName(),
            "DerivedAssociation.${count}",
            "Derived Association",
            "${R_COMPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ImportedClass_ImportedClass =
      {
  .select any O_IOBJclass from instances of O_IOBJ
  .print "Generating class Imported Class for ImportedClass"
			{
                PropertyDescriptor.class.getName(),
				"Obj_Name",
				"Class Name",
				"${O_IOBJclass.Obj_Name}" },
			{
                PropertyDescriptor.class.getName(),
				"Obj_KL",
				"Class Key Letter",
				"${O_IOBJclass.Obj_KL}" },
  .select many O_OBJclass_set related by O_IOBJclass->O_OBJ[R101]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassClassReference.${count}",
            "Class Reference",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] DerivedBaseAttribute_DerivedAttribute =
      {
  .select any O_DBATTRclass from instances of O_DBATTR
  .print "Generating class Derived Base Attribute for DerivedAttribute"
			{
               ActivityPropertyDescriptor.class.getName(),
				"Action_Semantics",
				"Action Semantics Field",
				"" },
			{
                EnumPropertyDescriptor.class.getName(),
				"Suc_Pars",
				"Successful Parse Indicator",
				EnumRangeTest.Suc_Pars_vals[${O_DBATTRclass.Suc_Pars}] },
      };
	public static final String[][] ClassAsSimpleParticipant_AssociationParticipantEnd =
      {
  .select any R_PARTclass from instances of R_PART
  .print "Generating class Class As Simple Participant for AssociationParticipantEnd"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_PARTclass.Mult}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"Cond",
				"Conditionality",
				EnumRangeTest.Cond_vals[${R_PARTclass.Cond}] },
			{
               TextPropertyDescriptor.class.getName(),
				"Txt_Phrs",
				"Text Phrase",
				"${R_PARTclass.Txt_Phrs}" },
  .select many O_OBJclass_set related by R_PARTclass->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
  .select many O_RTIDAclass_set related by R_PARTclass->R_RTO[R204]->O_RTIDA[R110]
  .assign count = 0
  .for each O_RTIDAclass in O_RTIDAclass_set
            { PropertyDescriptor.class.getName(),
            "ReferencedIdentifier.${count}",
            "Referred To Identifier Attribute",
     .select one cia related by O_RTIDAclass->O_OIDA[R110]
     .select one assoc related by O_RTIDAclass->R_RTO[R110]->R_OIR[R203]->R_REL[R201]
     .assign attrName = cia.localAttributeName;
     .if(attrName == "")
       .assign attrName = "id"
     .end if
     .assign result = attrName + " {R"
     .assign result = result + "${assoc.Numb}"
     .assign result = result + "}"
            "${result}" },  
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsSimpleFormalizer_AssociationFormalizerEnd =
      {
  .select any R_FORMclass from instances of R_FORM
  .print "Generating class Class As Simple Formalizer for AssociationFormalizerEnd"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_FORMclass.Mult}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"Cond",
				"Conditionality",
				EnumRangeTest.Cond_vals[${R_FORMclass.Cond}] },
			{
               TextPropertyDescriptor.class.getName(),
				"Txt_Phrs",
				"Text Phrase",
				"${R_FORMclass.Txt_Phrs}" },
  .select many O_OBJclass_set related by R_FORMclass->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsAssociatedOneSide_AssociativeOneEnd =
      {
  .select any R_AONEclass from instances of R_AONE
  .print "Generating class Class As Associated One Side for AssociativeOneEnd"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_AONEclass.Mult}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"Cond",
				"Conditionality",
				EnumRangeTest.Cond_vals[${R_AONEclass.Cond}] },
			{
               TextPropertyDescriptor.class.getName(),
				"Txt_Phrs",
				"Text Phrase",
				"${R_AONEclass.Txt_Phrs}" },
  .select many O_OBJclass_set related by R_AONEclass->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
  .select many O_RTIDAclass_set related by R_AONEclass->R_RTO[R204]->O_RTIDA[R110]
  .assign count = 0
  .for each O_RTIDAclass in O_RTIDAclass_set
            { PropertyDescriptor.class.getName(),
            "ReferencedIdentifier.${count}",
            "Referred To Identifier Attribute",
     .select one cia related by O_RTIDAclass->O_OIDA[R110]
     .select one assoc related by O_RTIDAclass->R_RTO[R110]->R_OIR[R203]->R_REL[R201]
     .assign attrName = cia.localAttributeName;
     .if(attrName == "")
       .assign attrName = "id"
     .end if
     .assign result = attrName + " {R"
     .assign result = result + "${assoc.Numb}"
     .assign result = result + "}"
            "${result}" },  
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsAssociatedOtherSide_AssociativeOtherEnd =
      {
  .select any R_AOTHclass from instances of R_AOTH
  .print "Generating class Class As Associated Other Side for AssociativeOtherEnd"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_AOTHclass.Mult}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"Cond",
				"Conditionality",
				EnumRangeTest.Cond_vals[${R_AOTHclass.Cond}] },
			{
               TextPropertyDescriptor.class.getName(),
				"Txt_Phrs",
				"Text Phrase",
				"${R_AOTHclass.Txt_Phrs}" },
  .select many O_OBJclass_set related by R_AOTHclass->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
  .select many O_RTIDAclass_set related by R_AOTHclass->R_RTO[R204]->O_RTIDA[R110]
  .assign count = 0
  .for each O_RTIDAclass in O_RTIDAclass_set
            { PropertyDescriptor.class.getName(),
            "ReferencedIdentifier.${count}",
            "Referred To Identifier Attribute",
     .select one cia related by O_RTIDAclass->O_OIDA[R110]
     .select one assoc related by O_RTIDAclass->R_RTO[R110]->R_OIR[R203]->R_REL[R201]
     .assign attrName = cia.localAttributeName;
     .if(attrName == "")
       .assign attrName = "id"
     .end if
     .assign result = attrName + " {R"
     .assign result = result + "${assoc.Numb}"
     .assign result = result + "}"
            "${result}" },  
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsLink_Associative =
      {
  .select any R_ASSRclass from instances of R_ASSR
  .print "Generating class Class As Link for Associative"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_ASSRclass.Mult}] },
  .select many O_OBJclass_set related by R_ASSRclass->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsSupertype_Supertype =
      {
  .select any R_SUPERclass from instances of R_SUPER
  .print "Generating class Class As Supertype for Supertype"
  .select many O_OBJclass_set related by R_SUPERclass->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
  .select many O_RTIDAclass_set related by R_SUPERclass->R_RTO[R204]->O_RTIDA[R110]
  .assign count = 0
  .for each O_RTIDAclass in O_RTIDAclass_set
            { PropertyDescriptor.class.getName(),
            "ReferencedIdentifier.${count}",
            "Referred To Identifier Attribute",
     .select one cia related by O_RTIDAclass->O_OIDA[R110]
     .select one assoc related by O_RTIDAclass->R_RTO[R110]->R_OIR[R203]->R_REL[R201]
     .assign attrName = cia.localAttributeName;
     .if(attrName == "")
       .assign attrName = "id"
     .end if
     .assign result = attrName + " {R"
     .assign result = result + "${assoc.Numb}"
     .assign result = result + "}"
            "${result}" },  
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsSubtype_Subtype =
      {
  .select any R_SUBclass from instances of R_SUB
  .print "Generating class Class As Subtype for Subtype"
  .select many O_OBJclass_set related by R_SUBclass->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsDerivedOneSide_DerivedOneEnd =
      {
  .select any R_CONEclass from instances of R_CONE
  .print "Generating class Class As Derived One Side for DerivedOneEnd"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_CONEclass.Mult}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"Cond",
				"Conditionality",
				EnumRangeTest.Cond_vals[${R_CONEclass.Cond}] },
			{
               TextPropertyDescriptor.class.getName(),
				"Txt_Phrs",
				"Text Phrase",
				"${R_CONEclass.Txt_Phrs}" },
  .select many O_OBJclass_set related by R_CONEclass->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassAsDerivedOtherSide_DerivedOtherEnd =
      {
  .select any R_COTHclass from instances of R_COTH
  .print "Generating class Class As Derived Other Side for DerivedOtherEnd"
			{
                EnumPropertyDescriptor.class.getName(),
				"Mult",
				"Multiplicity",
				EnumRangeTest.Mult_vals[${R_COTHclass.Mult}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"Cond",
				"Conditionality",
				EnumRangeTest.Cond_vals[${R_COTHclass.Cond}] },
			{
               TextPropertyDescriptor.class.getName(),
				"Txt_Phrs",
				"Text Phrase",
				"${R_COTHclass.Txt_Phrs}" },
  .select many O_OBJclass_set related by R_COTHclass->R_OIR[R203]->O_OBJ[R201]
  .assign count = 0
  .for each O_OBJclass in O_OBJclass_set
            { PropertyDescriptor.class.getName(),
            "ClassRelated.${count}",
            "Related",
            "${O_OBJclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Action_Action =
      {
  .select any SM_ACTclass from instances of SM_ACT
  .print "Generating class Action for Action"
			{
                EnumPropertyDescriptor.class.getName(),
				"Suc_Pars",
				"Successful Parse Indicator",
				EnumRangeTest.Suc_Pars_vals[${SM_ACTclass.Suc_Pars}] },
			{
               ActivityPropertyDescriptor.class.getName(),
				"Action_Semantics",
				"Action Semantics Field",
				"" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
      };
	public static final String[][] EventIgnored_EventIgnored =
      {
  .select any SM_EIGNclass from instances of SM_EIGN
  .print "Generating class Event Ignored for EventIgnored"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
      };
	public static final String[][] CantHappen_EventCantHappen =
      {
  .select any SM_CHclass from instances of SM_CH
  .print "Generating class Cant Happen for EventCantHappen"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
      };
	public static final String[][] UserDataType_UserDefinedDataType =
      {
  .select any dt from instances of S_DT where (selected.Name == "date")
  .select one S_UDTclass related by dt->S_UDT[R17];
  .print "Generating class User Data Type for UserDefinedDataType"
			{
                EnumPropertyDescriptor.class.getName(),
				"Gen_Type",
				"User Defined Type Type",
				EnumRangeTest.Gen_Type_vals[${S_UDTclass.Gen_Type}] },
  .select many S_DTclass_set related by S_UDTclass->S_DT[R17]
  .assign count = 0
    //Skipping special case for core data types and user data types.
  .select many S_DTclass_set related by S_UDTclass->S_DT[R18]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Core Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] CoreDataType_CoreDataType =
      {
  .select any S_CDTclass from instances of S_CDT
  .print "Generating class Core Data Type for CoreDataType"
			{
                EnumPropertyDescriptor.class.getName(),
				"Core_Typ",
				"Core Type",
				EnumRangeTest.Core_Typ_vals[${S_CDTclass.Core_Typ}] },
  .select many S_DTclass_set related by S_CDTclass->S_DT[R17]
  .assign count = 0
    //Skipping special case for core data types and user data types.
      };
	public static final String[][] EnumerationDataType_Enumeration =
      {
  .select any S_EDTclass from instances of S_EDT
  .print "Generating class Enumeration Data Type for Enumeration"
  .select many S_DTclass_set related by S_EDTclass->S_DT[R17]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { PropertyDescriptor.class.getName(),
            "DataType.${count}",
            "Data Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_ENUMclass_set related by S_EDTclass->S_ENUM[R27]
  .assign count = 0
  .for each S_ENUMclass in S_ENUMclass_set
            { PropertyDescriptor.class.getName(),
            "Enumerator.${count}",
            "Enumerator",
            "${S_ENUMclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] DerivedAssociation_DerivedAssociation =
      {
  .select any R_COMPclass from instances of R_COMP
  .print "Generating class Derived Association for DerivedAssociation"
			{
               TextPropertyDescriptor.class.getName(),
				"Rel_Chn",
				"Association Chain",
				"${R_COMPclass.Rel_Chn}" },
  .select many R_CONEclass_set related by R_COMPclass->R_CONE[R214]
  .assign count = 0
  .for each R_CONEclass in R_CONEclass_set
            { PropertyDescriptor.class.getName(),
            "DerivedOneEnd.${count}",
            "Class As Derived One Side",
      .select one obj related by R_CONEclass->R_OIR[R203]->O_OBJ[R201]
            "${obj.Name}" },
    .assign count = count + 1
  .end for
  .select many R_COTHclass_set related by R_COMPclass->R_COTH[R215]
  .assign count = 0
  .for each R_COTHclass in R_COTHclass_set
            { PropertyDescriptor.class.getName(),
            "DerivedOtherEnd.${count}",
            "Class As Derived Other Side",
      .select one obj related by R_COTHclass->R_OIR[R203]->O_OBJ[R201]
            "${obj.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ReferentialAttribute_ReferentialAttribute =
      {
  .select any O_RATTRclass from instances of O_RATTR
  .print "Generating class Referential Attribute for ReferentialAttribute"
			{
                EnumPropertyDescriptor.class.getName(),
				"Ref_Mode",
				"Referential Attribute Referred to Mode",
				EnumRangeTest.Ref_Mode_vals[${O_RATTRclass.Ref_Mode}] },
      };
	public static final String[][] NonLocalEvent_InheritedEvent =
      {
  .select any SM_NLEVTclass from instances of SM_NLEVT
  .print "Generating class Non Local Event for InheritedEvent"
			{
                PropertyDescriptor.class.getName(),
				"Name",
				"Name",
        .select one polyClass related by SM_NLEVTclass->SM_PEVT[R527]->SM_EVT[R525]->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
        .select one evt related by SM_NLEVTclass->SM_SEVT[R526]->SM_EVT[R525]
				"${evt.Mning}::${polyClass.Name}" },
  .select many SM_PEVTclass_set related by SM_NLEVTclass->SM_PEVT[R527]
  .assign count = 0
  .for each SM_PEVTclass in SM_PEVTclass_set
            { PropertyDescriptor.class.getName(),
            "PolymorphicEventDeclaredEvent.${count}",
            "Declared Event",
     .assign result = SM_PEVTclass.localEventMning; 
     .if(result == "")
       .assign result = "test_poly"
     .end if
            "${result}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ExternalEntityEventData_ExternalEntityEventData =
      {
  .select any S_EEEDTclass from instances of S_EEEDT
  .print "Generating class External Entity Event Data for ExternalEntityEventData"
      };
	public static final String[][] InstanceAttributeValue_FormalInstanceAttributeValues =
      {
  .select any SQ_AVclass from instances of SQ_AV
  .print "Generating class Instance Attribute Value for FormalInstanceAttributeValues"
			{
               TextPropertyDescriptor.class.getName(),
				"Value",
				"Attribute Value",
				"${SQ_AVclass.Value}" },
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal Attribute Name",
				"${SQ_AVclass.InformalName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Instance Attribute Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{SQ_AVclass.isFormal}" },
  .select many O_ATTRclass_set related by SQ_AVclass->O_ATTR[R938]
  .assign count = 0
  .for each O_ATTRclass in O_ATTRclass_set
            { PropertyDescriptor.class.getName(),
            "AttributeFormalAttribute.${count}",
            "Formal Attribute",
            "${O_ATTRclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ExternalEntityParticipant_ImportedExternalEntities =
      {
  .select any SQ_EEPclass from instances of SQ_EEP
  .print "Generating class External Entity Participant for ImportedExternalEntities"
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal External Entity Name",
				"${SQ_EEPclass.InformalName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"External Entity Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{SQ_EEPclass.isFormal}" },
  .select many SQ_LSclass_set related by SQ_EEPclass->SQ_P[R930]->SQ_LS[R940]
  .assign count = 0
  .for each SQ_LSclass in SQ_LSclass_set
            { PropertyDescriptor.class.getName(),
            "Lifespans.${count}",
            "Lifespan",
            "${SQ_LSclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_SMclass_set related by SQ_EEPclass->SQ_P[R930]->MSG_M[R1007]->MSG_SM[R1018]
  .assign count = 0
  .for each MSG_SMclass in MSG_SMclass_set
            { PropertyDescriptor.class.getName(),
            "SynchronousMessages.${count}",
            "Synchronous Message",
        "${MSG_SMclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Rclass_set related by SQ_EEPclass->SQ_P[R930]->MSG_M[R1007]->MSG_R[R1018]
  .assign count = 0
  .for each MSG_Rclass in MSG_Rclass_set
            { PropertyDescriptor.class.getName(),
            "ReturnMessages.${count}",
            "Return Message",
            "${MSG_Rclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_EEclass_set related by SQ_EEPclass->S_EE[R933]
  .assign count = 0
  .for each S_EEclass in S_EEclass_set
            { PropertyDescriptor.class.getName(),
            "ExternalEntityFormalExternalEntity.${count}",
            "Formal External Entity",
            "${S_EEclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Lifespan_Lifespans =
      {
  .select any SQ_LSclass from instances of SQ_LS
  .print "Generating class Lifespan for Lifespans"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Communication Line Description",
				"" },
			{
               BooleanPropertyDescriptor.class.getName(),
				"Destroyed",
				"Is Destructed",
				"$l{SQ_LSclass.Destroyed}" },
  .select many SQ_TMclass_set related by SQ_LSclass->SQ_TM[R931]
  .assign count = 0
  .for each SQ_TMclass in SQ_TMclass_set
            { PropertyDescriptor.class.getName(),
            "TimingMarks.${count}",
            "Timing Mark",
            "${SQ_TMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_SMclass_set related by SQ_LSclass->SQ_P[R930]->MSG_M[R1007]->MSG_SM[R1018]
  .assign count = 0
  .for each MSG_SMclass in MSG_SMclass_set
            { PropertyDescriptor.class.getName(),
            "SynchronousMessages.${count}",
            "Synchronous Message",
        "${MSG_SMclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_AMclass_set related by SQ_LSclass->SQ_P[R930]->MSG_M[R1007]->MSG_AM[R1018]
  .assign count = 0
  .for each MSG_AMclass in MSG_AMclass_set
            { PropertyDescriptor.class.getName(),
            "AsynchronousMessages.${count}",
            "Asynchronous Message",
        "${MSG_AMclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Rclass_set related by SQ_LSclass->SQ_P[R930]->MSG_M[R1007]->MSG_R[R1018]
  .assign count = 0
  .for each MSG_Rclass in MSG_Rclass_set
            { PropertyDescriptor.class.getName(),
            "ReturnMessages.${count}",
            "Return Message",
            "${MSG_Rclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ClassParticipantAttribute_InformalAttributes =
      {
  .select any SQ_CPAclass from instances of SQ_CPA
  .print "Generating class Class Participant Attribute for InformalAttributes"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Informal Attribute Name",
				"${SQ_CPAclass.Name}" },
			{
               TextPropertyDescriptor.class.getName(),
				"Type",
				"Informal Attribute Type",
				"${SQ_CPAclass.Type}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Informal Attribute Description",
				"" },
      };
	public static final String[][] TimingMark_TimingMarks =
      {
  .select any SQ_TMclass from instances of SQ_TM
  .print "Generating class Timing Mark for TimingMarks"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Timing Mark Label",
				"${SQ_TMclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Timing Mark Description",
				"" },
  .select many SQ_TSclass_set related by SQ_TMclass->SQ_TS[R941]
  .assign count = 0
  .for each SQ_TSclass in SQ_TSclass_set
            { PropertyDescriptor.class.getName(),
            "TimeSpans.${count}",
            "Time Span",
            "${SQ_TSclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] TimeSpan_TimeSpans =
      {
  .select any SQ_TSclass from instances of SQ_TS
  .print "Generating class Time Span for TimeSpans"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Time Span Label",
				"${SQ_TSclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Time Span Description",
				"" },
      };
	public static final String[][] SynchronousMessage_SynchronousMessages =
      {
  .select any MSG_SMclass from instances of MSG_SM
  .print "Generating class Synchronous Message for SynchronousMessages"
			{
               TextPropertyDescriptor.class.getName(),
				"ResultTarget",
				"Result Target",
				"${MSG_SMclass.ResultTarget}" },
			{
               TextPropertyDescriptor.class.getName(),
				"ReturnValue",
				"Return Value",
				"${MSG_SMclass.ReturnValue}" },
			{
               TextPropertyDescriptor.class.getName(),
				"GuardCondition",
				"Guard Condition",
				"${MSG_SMclass.GuardCondition}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Message Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{MSG_SMclass.isFormal}" },
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal Name",
				"${MSG_SMclass.InformalName}" },
			{
               TextPropertyDescriptor.class.getName(),
				"SequenceNumb",
				"Sequence Number",
				"${MSG_SMclass.SequenceNumb}" },
  .select many MSG_Aclass_set related by MSG_SMclass->MSG_M[R1018]->MSG_A[R1000]->MSG_IA[R1013]->MSG_A[R1013]
  .assign count = 0
  .for each MSG_Aclass in MSG_Aclass_set
            { PropertyDescriptor.class.getName(),
            "InformalMessageArguments.${count}",
            "Message Argument",
    				"${MSG_Aclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Aclass_set related by MSG_SMclass->MSG_M[R1018]->MSG_A[R1001]
  .assign count = 0
  .for each MSG_Aclass in MSG_Aclass_set
            { PropertyDescriptor.class.getName(),
            "MessageArguments.${count}",
            "Message Argument",
    				"${MSG_Aclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_ISMclass_set related by MSG_SMclass->MSG_ISM[R1020]
  .assign count = 0
  .for each MSG_ISMclass in MSG_ISMclass_set
            { PropertyDescriptor.class.getName(),
            "InformalMessageInformalMessage.${count}",
            "Informal Message",
    .select one sm related by MSG_ISMclass->MSG_SM[R1020]  
        "${sm.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Bclass_set related by MSG_SMclass->MSG_B[R1020]
  .assign count = 0
  .for each MSG_Bclass in MSG_Bclass_set
            { PropertyDescriptor.class.getName(),
            "FormalBridgeOperationFormalBridgeOperation.${count}",
            "Formal Bridge Operation",
            "${MSG_Bclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_Oclass_set related by MSG_SMclass->MSG_O[R1020]
  .assign count = 0
  .for each MSG_Oclass in MSG_Oclass_set
            { PropertyDescriptor.class.getName(),
            "FormalOperationFormalOperation.${count}",
            "Formal Operation",
            "${MSG_Oclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_Fclass_set related by MSG_SMclass->MSG_F[R1020]
  .assign count = 0
  .for each MSG_Fclass in MSG_Fclass_set
            { PropertyDescriptor.class.getName(),
            "FormalFunctionFormalFunction.${count}",
            "Formal Function",
            "${MSG_Fclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_IOPclass_set related by MSG_SMclass->MSG_IOP[R1020]
  .assign count = 0
  .for each MSG_IOPclass in MSG_IOPclass_set
            { PropertyDescriptor.class.getName(),
            "FormalInterfaceOperationFormalInterfaceOperation.${count}",
            "Formal Interface Operation",
            "${MSG_IOPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] AsynchronousMessage_AsynchronousMessages =
      {
  .select any MSG_AMclass from instances of MSG_AM
  .print "Generating class Asynchronous Message for AsynchronousMessages"
			{
               TextPropertyDescriptor.class.getName(),
				"GuardCondition",
				"Guard Condition",
				"${MSG_AMclass.GuardCondition}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Message Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{MSG_AMclass.isFormal}" },
			{
               TextPropertyDescriptor.class.getName(),
				"DurationConstraint",
				"Duration Constraint",
				"${MSG_AMclass.DurationConstraint}" },
			{
               TextPropertyDescriptor.class.getName(),
				"DurationObservation",
				"Duration Observation",
				"${MSG_AMclass.DurationObservation}" },
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal Name",
				"${MSG_AMclass.InformalName}" },
			{
               TextPropertyDescriptor.class.getName(),
				"SequenceNumb",
				"Sequence Number",
				"${MSG_AMclass.SequenceNumb}" },
  .select many MSG_Aclass_set related by MSG_AMclass->MSG_M[R1018]->MSG_A[R1000]->MSG_IA[R1013]->MSG_A[R1013]
  .assign count = 0
  .for each MSG_Aclass in MSG_Aclass_set
            { PropertyDescriptor.class.getName(),
            "InformalMessageArguments.${count}",
            "Message Argument",
    				"${MSG_Aclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Aclass_set related by MSG_AMclass->MSG_M[R1018]->MSG_A[R1001]
  .assign count = 0
  .for each MSG_Aclass in MSG_Aclass_set
            { PropertyDescriptor.class.getName(),
            "MessageArguments.${count}",
            "Message Argument",
    				"${MSG_Aclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_IAMclass_set related by MSG_AMclass->MSG_IAM[R1019]
  .assign count = 0
  .for each MSG_IAMclass in MSG_IAMclass_set
            { PropertyDescriptor.class.getName(),
            "InformalMessageInformalMessage.${count}",
            "Informal Message",
    .select one am related by MSG_IAMclass->MSG_AM[R1019]  
        "${am.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Eclass_set related by MSG_AMclass->MSG_E[R1019]
  .assign count = 0
  .for each MSG_Eclass in MSG_Eclass_set
            { PropertyDescriptor.class.getName(),
            "FormalEventFormalEvent.${count}",
            "Formal Event",
            "${MSG_Eclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_SIGclass_set related by MSG_AMclass->MSG_SIG[R1019]
  .assign count = 0
  .for each MSG_SIGclass in MSG_SIGclass_set
            { PropertyDescriptor.class.getName(),
            "FormalSignalFormalSignalEvent.${count}",
            "Formal Signal Event",
            "${MSG_SIGclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] MessageArgument_InformalMessageArguments =
      {
  .select any MSG_Aclass from instances of MSG_A
  .print "Generating class Message Argument for InformalMessageArguments"
			{
               TextPropertyDescriptor.class.getName(),
				"Value",
				"Argument Value",
				"${MSG_Aclass.Value}" },
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal Argument Name",
				"${MSG_Aclass.InformalName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Message Argument Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{MSG_Aclass.isFormal}" },
  .select many S_BPARMclass_set related by MSG_Aclass->MSG_BA[R1013]->S_BPARM[R1014]
  .assign count = 0
  .for each S_BPARMclass in S_BPARMclass_set
            { PropertyDescriptor.class.getName(),
            "BridgeParameterFormalBridgeOperationParameter.${count}",
            "Formal Bridge Operation Parameter",
            "${S_BPARMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many O_TPARMclass_set related by MSG_Aclass->MSG_OA[R1013]->O_TPARM[R1015]
  .assign count = 0
  .for each O_TPARMclass in O_TPARMclass_set
            { PropertyDescriptor.class.getName(),
            "OperationParameterFormalClassOperationParameter.${count}",
            "Formal Class Operation Parameter",
            "${O_TPARMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_SPARMclass_set related by MSG_Aclass->MSG_FA[R1013]->S_SPARM[R1016]
  .assign count = 0
  .for each S_SPARMclass in S_SPARMclass_set
            { PropertyDescriptor.class.getName(),
            "FunctionParameterFormalFunctionParameter.${count}",
            "Formal Function Parameter",
            "${S_SPARMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SM_EVTDIclass_set related by MSG_Aclass->MSG_EA[R1013]->SM_EVTDI[R1017]
  .assign count = 0
  .for each SM_EVTDIclass in SM_EVTDIclass_set
            { PropertyDescriptor.class.getName(),
            "EventDataFormalEventDataItem.${count}",
            "Formal Event Data Item",
            "${SM_EVTDIclass.Name}" },
    .assign count = count + 1
  .end for
  .select many C_PPclass_set related by MSG_Aclass->MSG_EPA[R1013]->C_PP[R1023]
  .assign count = 0
  .for each C_PPclass in C_PPclass_set
            { PropertyDescriptor.class.getName(),
            "ParametersExecutablePropertyParameter.${count}",
            "Executable Property Parameter",
            "${C_PPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_IAclass_set related by MSG_Aclass->MSG_IA[R1013]
  .assign count = 0
  .for each MSG_IAclass in MSG_IAclass_set
            { PropertyDescriptor.class.getName(),
            "InformalArgumentInformalArgument.${count}",
            "Informal Argument",
            "${MSG_IAclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] MessageArgument_MessageArguments =
      {
  .select any MSG_Aclass from instances of MSG_A
  .print "Generating class Message Argument for MessageArguments"
			{
               TextPropertyDescriptor.class.getName(),
				"Value",
				"Argument Value",
				"${MSG_Aclass.Value}" },
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal Argument Name",
				"${MSG_Aclass.InformalName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Message Argument Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{MSG_Aclass.isFormal}" },
  .select many S_BPARMclass_set related by MSG_Aclass->MSG_BA[R1013]->S_BPARM[R1014]
  .assign count = 0
  .for each S_BPARMclass in S_BPARMclass_set
            { PropertyDescriptor.class.getName(),
            "BridgeParameterFormalBridgeOperationParameter.${count}",
            "Formal Bridge Operation Parameter",
            "${S_BPARMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many O_TPARMclass_set related by MSG_Aclass->MSG_OA[R1013]->O_TPARM[R1015]
  .assign count = 0
  .for each O_TPARMclass in O_TPARMclass_set
            { PropertyDescriptor.class.getName(),
            "OperationParameterFormalClassOperationParameter.${count}",
            "Formal Class Operation Parameter",
            "${O_TPARMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_SPARMclass_set related by MSG_Aclass->MSG_FA[R1013]->S_SPARM[R1016]
  .assign count = 0
  .for each S_SPARMclass in S_SPARMclass_set
            { PropertyDescriptor.class.getName(),
            "FunctionParameterFormalFunctionParameter.${count}",
            "Formal Function Parameter",
            "${S_SPARMclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SM_EVTDIclass_set related by MSG_Aclass->MSG_EA[R1013]->SM_EVTDI[R1017]
  .assign count = 0
  .for each SM_EVTDIclass in SM_EVTDIclass_set
            { PropertyDescriptor.class.getName(),
            "EventDataFormalEventDataItem.${count}",
            "Formal Event Data Item",
            "${SM_EVTDIclass.Name}" },
    .assign count = count + 1
  .end for
  .select many C_PPclass_set related by MSG_Aclass->MSG_EPA[R1013]->C_PP[R1023]
  .assign count = 0
  .for each C_PPclass in C_PPclass_set
            { PropertyDescriptor.class.getName(),
            "ParametersExecutablePropertyParameter.${count}",
            "Executable Property Parameter",
            "${C_PPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_IAclass_set related by MSG_Aclass->MSG_IA[R1013]
  .assign count = 0
  .for each MSG_IAclass in MSG_IAclass_set
            { PropertyDescriptor.class.getName(),
            "InformalArgumentInformalArgument.${count}",
            "Informal Argument",
            "${MSG_IAclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] InstanceAttributeValue_InformalInstanceAttributeValues =
      {
  .select any SQ_AVclass from instances of SQ_AV
  .print "Generating class Instance Attribute Value for InformalInstanceAttributeValues"
			{
               TextPropertyDescriptor.class.getName(),
				"Value",
				"Attribute Value",
				"${SQ_AVclass.Value}" },
			{
               TextPropertyDescriptor.class.getName(),
				"InformalName",
				"Informal Attribute Name",
				"${SQ_AVclass.InformalName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Instance Attribute Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{SQ_AVclass.isFormal}" },
      };
	public static final String[][] ActorParticipant_Actors =
      {
  .select any SQ_APclass from instances of SQ_AP
  .print "Generating class Actor Participant for Actors"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Actor Name",
				"${SQ_APclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Actor Description",
				"" },
  .select many SQ_LSclass_set related by SQ_APclass->SQ_P[R930]->SQ_LS[R940]
  .assign count = 0
  .for each SQ_LSclass in SQ_LSclass_set
            { PropertyDescriptor.class.getName(),
            "Lifespans.${count}",
            "Lifespan",
            "${SQ_LSclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ReturnMessage_ReturnMessages =
      {
  .select any MSG_Rclass from instances of MSG_R
  .print "Generating class Return Message for ReturnMessages"
			{
               TextPropertyDescriptor.class.getName(),
				"ReturnValue",
				"Return Value",
				"${MSG_Rclass.ReturnValue}" },
			{
               TextPropertyDescriptor.class.getName(),
				"ResultTarget",
				"Result Target",
				"${MSG_Rclass.ResultTarget}" },
			{
               TextPropertyDescriptor.class.getName(),
				"GuardCondition",
				"Guard Condition",
				"${MSG_Rclass.GuardCondition}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Message Description",
				"" },
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Name",
				"${MSG_Rclass.Name}" },
			{
               TextPropertyDescriptor.class.getName(),
				"SequenceNumb",
				"Sequence Number",
				"${MSG_Rclass.SequenceNumb}" },
  .select many MSG_Aclass_set related by MSG_Rclass->MSG_M[R1018]->MSG_A[R1000]->MSG_IA[R1013]->MSG_A[R1013]
  .assign count = 0
  .for each MSG_Aclass in MSG_Aclass_set
            { PropertyDescriptor.class.getName(),
            "InformalMessageArguments.${count}",
            "Message Argument",
    				"${MSG_Aclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Aclass_set related by MSG_Rclass->MSG_M[R1018]->MSG_A[R1001]
  .assign count = 0
  .for each MSG_Aclass in MSG_Aclass_set
            { PropertyDescriptor.class.getName(),
            "MessageArguments.${count}",
            "Message Argument",
    				"${MSG_Aclass.InformalName}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] CommunicationLink_CommunicationLinks =
      {
  .select any COMM_LNKclass from instances of COMM_LNK
  .print "Generating class Communication Link for CommunicationLinks"
			{
               TextPropertyDescriptor.class.getName(),
				"Numb",
				"Association Number",
				"${COMM_LNKclass.Numb}" },
			{
               TextPropertyDescriptor.class.getName(),
				"StartText",
				"Start Text Phrase",
				"${COMM_LNKclass.StartText}" },
			{
               TextPropertyDescriptor.class.getName(),
				"EndText",
				"End Text Phrase",
				"${COMM_LNKclass.EndText}" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{COMM_LNKclass.isFormal}" },
			{
                EnumPropertyDescriptor.class.getName(),
				"StartVisibility",
				"Start Visibility",
				EnumRangeTest.StartVisibility_vals[${COMM_LNKclass.StartVisibility}] },
			{
                EnumPropertyDescriptor.class.getName(),
				"EndVisibility",
				"End Visibility",
				EnumRangeTest.EndVisibility_vals[${COMM_LNKclass.EndVisibility}] },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Link Description",
				"" },
  .select many SQ_CIPclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_CIP[R930]
  .assign count = 0
  .for each SQ_CIPclass in SQ_CIPclass_set
            { PropertyDescriptor.class.getName(),
            "InstancesLinkStart.${count}",
            "Link Start",
            "${SQ_CIPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_CIPclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_CIP[R930]
  .assign count = 0
  .for each SQ_CIPclass in SQ_CIPclass_set
            { PropertyDescriptor.class.getName(),
            "InstancesLinkEnd.${count}",
            "Link End",
            "${SQ_CIPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_CPclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_CP[R930]
  .assign count = 0
  .for each SQ_CPclass in SQ_CPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedClassesLinkStart.${count}",
            "Link Start",
    				"${SQ_CPclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many SQ_CPclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_CP[R930]
  .assign count = 0
  .for each SQ_CPclass in SQ_CPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedClassesLinkEnd.${count}",
            "Link End",
    				"${SQ_CPclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many SQ_EEPclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_EEP[R930]
  .assign count = 0
  .for each SQ_EEPclass in SQ_EEPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedExternalEntitiesLinkStart.${count}",
            "Link Start",
            "${SQ_EEPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_EEPclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_EEP[R930]
  .assign count = 0
  .for each SQ_EEPclass in SQ_EEPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedExternalEntitiesLinkEnd.${count}",
            "Link End",
            "${SQ_EEPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_FPPclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_FPP[R930]
  .assign count = 0
  .for each SQ_FPPclass in SQ_FPPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedFunctionPackagesLinkStart.${count}",
            "Link Start",
            "${SQ_FPPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_FPPclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_FPP[R930]
  .assign count = 0
  .for each SQ_FPPclass in SQ_FPPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedFunctionPackagesLinkEnd.${count}",
            "Link End",
            "${SQ_FPPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_APclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_AP[R930]
  .assign count = 0
  .for each SQ_APclass in SQ_APclass_set
            { PropertyDescriptor.class.getName(),
            "ActorsLinkStart.${count}",
            "Link Start",
            "${SQ_APclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_APclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_AP[R930]
  .assign count = 0
  .for each SQ_APclass in SQ_APclass_set
            { PropertyDescriptor.class.getName(),
            "ActorsLinkEnd.${count}",
            "Link End",
            "${SQ_APclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_COPclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_COP[R930]
  .assign count = 0
  .for each SQ_COPclass in SQ_COPclass_set
            { PropertyDescriptor.class.getName(),
            "ComponentParticipantsLinkStart.${count}",
            "Link Start",
            "${SQ_COPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_COPclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_COP[R930]
  .assign count = 0
  .for each SQ_COPclass in SQ_COPclass_set
            { PropertyDescriptor.class.getName(),
            "ComponentParticipantsLinkEnd.${count}",
            "Link End",
            "${SQ_COPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_PPclass_set related by COMM_LNKclass->SQ_P[R1133]->SQ_PP[R930]
  .assign count = 0
  .for each SQ_PPclass in SQ_PPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedPackagesLinkStart.${count}",
            "Link Start",
            "${SQ_PPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SQ_PPclass_set related by COMM_LNKclass->SQ_P[R1134]->SQ_PP[R930]
  .assign count = 0
  .for each SQ_PPclass in SQ_PPclass_set
            { PropertyDescriptor.class.getName(),
            "ImportedPackagesLinkEnd.${count}",
            "Link End",
            "${SQ_PPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] UseCaseParticipant_UseCases =
      {
  .select any IA_UCPclass from instances of IA_UCP
  .print "Generating class Use Case Participant for UseCases"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Use Case Name",
				"${IA_UCPclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Use Case Description",
				"" },
      };
	public static final String[][] BinaryAssociation_UseCaseAssociations =
      {
  .select any UC_BAclass from instances of UC_BA
  .print "Generating class Binary Association for UseCaseAssociations"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Association Description",
				"" },
  .select many SQ_APclass_set related by UC_BAclass->UC_UCA[R1210]->SQ_P[R1206]->SQ_AP[R930]
  .assign count = 0
  .for each SQ_APclass in SQ_APclass_set
            { PropertyDescriptor.class.getName(),
            "ActorsAssociationOneSide.${count}",
            "Association One Side",
            "${SQ_APclass.Name}" },
    .assign count = count + 1
  .end for
  .select many IA_UCPclass_set related by UC_BAclass->UC_UCA[R1210]->SQ_P[R1207]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOtherSide.${count}",
            "Association Other Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Generalization_UseCaseGeneralizations =
      {
  .select any UC_Gclass from instances of UC_G
  .print "Generating class Generalization for UseCaseGeneralizations"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Generalization Description",
				"" },
  .select many IA_UCPclass_set related by UC_Gclass->UC_UCA[R1210]->SQ_P[R1206]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOneSide.${count}",
            "Association One Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many IA_UCPclass_set related by UC_Gclass->UC_UCA[R1210]->SQ_P[R1207]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOtherSide.${count}",
            "Association Other Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Include_UseCaseIncludes =
      {
  .select any UC_Iclass from instances of UC_I
  .print "Generating class Include for UseCaseIncludes"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Include Description",
				"" },
  .select many IA_UCPclass_set related by UC_Iclass->UC_UCA[R1210]->SQ_P[R1206]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOneSide.${count}",
            "Association One Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many IA_UCPclass_set related by UC_Iclass->UC_UCA[R1210]->SQ_P[R1207]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOtherSide.${count}",
            "Association Other Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Extend_UseCaseExtends =
      {
  .select any UC_Eclass from instances of UC_E
  .print "Generating class Extend for UseCaseExtends"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Extend Description",
				"" },
  .select many IA_UCPclass_set related by UC_Eclass->UC_UCA[R1210]->SQ_P[R1206]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOneSide.${count}",
            "Association One Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
  .select many IA_UCPclass_set related by UC_Eclass->UC_UCA[R1210]->SQ_P[R1207]->IA_UCP[R930]
  .assign count = 0
  .for each IA_UCPclass in IA_UCPclass_set
            { PropertyDescriptor.class.getName(),
            "UseCasesAssociationOtherSide.${count}",
            "Association Other Side",
            "${IA_UCPclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ForkJoinNode_ForkJoins =
      {
  .select any A_FJclass from instances of A_FJ
  .print "Generating class Fork Join Node for ForkJoins"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Fork Join Description",
				"" },
			{
               TextPropertyDescriptor.class.getName(),
				"GuardCondition",
				"Guard Condition",
				"${A_FJclass.GuardCondition}" },
      };
	public static final String[][] InitialNode_InitialNodes =
      {
  .select any A_INIclass from instances of A_INI
  .print "Generating class Initial Node for InitialNodes"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Initial Node Description",
				"" },
      };
	public static final String[][] ActivityEdge_ActivityEdges =
      {
  .select any A_Eclass from instances of A_E
  .print "Generating class Activity Edge for ActivityEdges"
			{
               TextPropertyDescriptor.class.getName(),
				"Guard",
				"Guard Condition",
				"${A_Eclass.Guard}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Edge Description",
				"" },
      };
	public static final String[][] ActivityFinalNode_ActivityFinalNodes =
      {
  .select any A_AFclass from instances of A_AF
  .print "Generating class Activity Final Node for ActivityFinalNodes"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Final Activity Description",
				"" },
      };
	public static final String[][] FlowFinalNode_FlowFinalNodes =
      {
  .select any A_FFclass from instances of A_FF
  .print "Generating class Flow Final Node for FlowFinalNodes"
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Final Flow Description",
				"" },
      };
	public static final String[][] ActivityDiagramAction_ActivityDiagramActions =
      {
  .select any A_GAclass from instances of A_GA
  .print "Generating class Activity Diagram Action for ActivityDiagramActions"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Action Name",
				"${A_GAclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Action Description",
				"" },
      };
	public static final String[][] DecisionMergeNode_DecisionMergeNodes =
      {
  .select any A_DMclass from instances of A_DM
  .print "Generating class Decision Merge Node for DecisionMergeNodes"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Name",
				"${A_DMclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Decision Merge Description",
				"" },
      };
	public static final String[][] ObjectNode_ObjectNodes =
      {
  .select any A_OBJclass from instances of A_OBJ
  .print "Generating class Object Node for ObjectNodes"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Object Name",
				"${A_OBJclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Object Node Description",
				"" },
      };
	public static final String[][] AcceptEventAction_AcceptEventActions =
      {
  .select any A_AEAclass from instances of A_AEA
  .print "Generating class Accept Event Action for AcceptEventActions"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Accept Event Action Name",
				"${A_AEAclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Accept Event Action Description",
				"" },
      };
	public static final String[][] SendSignal_SendSignalActions =
      {
  .select any A_SSclass from instances of A_SS
  .print "Generating class Send Signal for SendSignalActions"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Signal Name",
				"${A_SSclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Signal Description",
				"" },
      };
	public static final String[][] ActivityPartition_ActivityPartitions =
      {
  .select any A_APclass from instances of A_AP
  .print "Generating class Activity Partition for ActivityPartitions"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Partition Name",
				"${A_APclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Partition Description",
				"" },
      };
	public static final String[][] AcceptTimeEventAction_AcceptTimeEventActions =
      {
  .select any A_ATEclass from instances of A_ATE
  .print "Generating class Accept Time Event Action for AcceptTimeEventActions"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Accept Time Event Name",
				"${A_ATEclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Accept Time Event Description",
				"" },
      };
	public static final String[][] StructuredDataType_StructuredDataType =
      {
  .select any S_SDTclass from instances of S_SDT
  .print "Generating class Structured Data Type for StructuredDataType"
  .select many S_MBRclass_set related by S_SDTclass->S_MBR[R44]
  .assign count = 0
  .for each S_MBRclass in S_MBRclass_set
            { PropertyDescriptor.class.getName(),
            "StructureMember.${count}",
            "Structure Member",
            "${S_MBRclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_DTclass_set related by S_SDTclass->S_DT[R17]
  .assign count = 0
    //Skipping special case for core data types and user data types.
      };
	public static final String[][] StructureMember_StructureMember =
      {
  .select any S_MBRclass from instances of S_MBR
  .print "Generating class Structure Member for StructureMember"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Name",
				"${S_MBRclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
			{
               DimensionsPropertyDescriptor.class.getName(),
				"Dimensions",
				"Array Dimensions",
				"${S_MBRclass.Dimensions}" },
  .select many S_DTclass_set related by S_MBRclass->S_DT[R45]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] Transition_Transitions =
      {
  .select any SM_TXNclass from instances of SM_TXN
  .print "Generating class Transition for Transitions"
  .select many SM_EVTclass_set related by SM_TXNclass->SM_NSTXN[R507]->SM_SEME[R504]->SM_SEVT[R503]->SM_EVT[R525]
  .assign count = 0
  .for each SM_EVTclass in SM_EVTclass_set
            { PropertyDescriptor.class.getName(),
            "EventAssignedLocalEvent.${count}",
            "Assigned Local Event",
    .select one nlevt related by SM_EVTclass->SM_SEVT[R525]->SM_NLEVT[R526]
    .if(not_empty nlevt)
      .select one obj related by nlevt->SM_PEVT[R527]->SM_EVT[R525]->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
            "${SM_EVTclass.Mning}::${obj.Name}" },
    .else
      .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
      .if ( not_empty obj )
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .else
        .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519]
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .end if
    .end if
    .assign count = count + 1
  .end for
  .select many SM_NLEVTclass_set related by SM_TXNclass->SM_NSTXN[R507]->SM_SEME[R504]->SM_SEVT[R503]->SM_NLEVT[R526]
  .assign count = 0
  .for each SM_NLEVTclass in SM_NLEVTclass_set
            { PropertyDescriptor.class.getName(),
            "InheritedEventAssignedPolymorphicEvent.${count}",
            "Assigned Polymorphic Event",
            "test_sm::B Class" },
    .assign count = count + 1
  .end for
  .select many SM_EVTclass_set related by SM_TXNclass->SM_NSTXN[R507]->SM_SEME[R504]->SM_SEVT[R503]->SM_SGEVT[R526]->SM_SEVT[R526]->SM_EVT[R525]
  .assign count = 0
  .for each SM_EVTclass in SM_EVTclass_set
            { PropertyDescriptor.class.getName(),
            "EventAssignedSignal.${count}",
            "Assigned Signal",
    .select one nlevt related by SM_EVTclass->SM_SEVT[R525]->SM_NLEVT[R526]
    .if(not_empty nlevt)
      .select one obj related by nlevt->SM_PEVT[R527]->SM_EVT[R525]->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
            "${SM_EVTclass.Mning}::${obj.Name}" },
    .else
      .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
      .if ( not_empty obj )
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .else
        .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519]
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .end if
    .end if
    .assign count = count + 1
  .end for
  .select many SM_EVTclass_set related by SM_TXNclass->SM_CRTXN[R507]->SM_LEVT[R509]->SM_SEVT[R526]->SM_EVT[R525]
  .assign count = 0
  .for each SM_EVTclass in SM_EVTclass_set
            { PropertyDescriptor.class.getName(),
            "EventCreationEvent.${count}",
            "Creation Event",
    .select one nlevt related by SM_EVTclass->SM_SEVT[R525]->SM_NLEVT[R526]
    .if(not_empty nlevt)
      .select one obj related by nlevt->SM_PEVT[R527]->SM_EVT[R525]->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
            "${SM_EVTclass.Mning}::${obj.Name}" },
    .else
      .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]
      .if ( not_empty obj )
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .else
        .select one obj related by SM_EVTclass->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519]
            "${SM_EVTclass.Drv_Lbl}: ${SM_EVTclass.Mning}" },
      .end if
    .end if
    .assign count = count + 1
  .end for
  .select many SM_STATEclass_set related by SM_TXNclass->SM_STATE[R506]
  .assign count = 0
  .for each SM_STATEclass in SM_STATEclass_set
            { PropertyDescriptor.class.getName(),
            "StateTo.${count}",
            "To",
            "${SM_STATEclass.Name}" },
    .assign count = count + 1
  .end for
  .select many SM_ACTclass_set related by SM_TXNclass->SM_TAH[R530]->SM_AH[R513]->SM_ACT[R514]
  .assign count = 0
  .for each SM_ACTclass in SM_ACTclass_set
            { PropertyDescriptor.class.getName(),
            "Action.${count}",
            "Action",
      .select one state related by SM_ACTclass->SM_AH[R514]->SM_MOAH[R513]->SM_STATE[R511]
      .if(empty state)
            "Transition Action" },
      .else
            "State Action" },
      .end if
    .assign count = count + 1
  .end for
      };
	public static final String[][] ComponentParticipant_ComponentParticipants =
      {
  .select any SQ_COPclass from instances of SQ_COP
  .print "Generating class Component Participant for ComponentParticipants"
			{
               TextPropertyDescriptor.class.getName(),
				"InformalComponentName",
				"Informal Component Name",
				"${SQ_COPclass.InformalComponentName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Component Description",
				"" },
			{
                PropertyDescriptor.class.getName(),
				"isFormal",
				"Is Formal",
				"$l{SQ_COPclass.isFormal}" },
  .select many SQ_LSclass_set related by SQ_COPclass->SQ_P[R930]->SQ_LS[R940]
  .assign count = 0
  .for each SQ_LSclass in SQ_LSclass_set
            { PropertyDescriptor.class.getName(),
            "Lifespans.${count}",
            "Lifespan",
            "${SQ_LSclass.Name}" },
    .assign count = count + 1
  .end for
  .select many MSG_SMclass_set related by SQ_COPclass->SQ_P[R930]->MSG_M[R1007]->MSG_SM[R1018]
  .assign count = 0
  .for each MSG_SMclass in MSG_SMclass_set
            { PropertyDescriptor.class.getName(),
            "SynchronousMessages.${count}",
            "Synchronous Message",
        "${MSG_SMclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_AMclass_set related by SQ_COPclass->SQ_P[R930]->MSG_M[R1007]->MSG_AM[R1018]
  .assign count = 0
  .for each MSG_AMclass in MSG_AMclass_set
            { PropertyDescriptor.class.getName(),
            "AsynchronousMessages.${count}",
            "Asynchronous Message",
        "${MSG_AMclass.InformalName}" },
    .assign count = count + 1
  .end for
  .select many MSG_Rclass_set related by SQ_COPclass->SQ_P[R930]->MSG_M[R1007]->MSG_R[R1018]
  .assign count = 0
  .for each MSG_Rclass in MSG_Rclass_set
            { PropertyDescriptor.class.getName(),
            "ReturnMessages.${count}",
            "Return Message",
            "${MSG_Rclass.Name}" },
    .assign count = count + 1
  .end for
  .select many C_Cclass_set related by SQ_COPclass->C_C[R955]
  .assign count = 0
  .for each C_Cclass in C_Cclass_set
            { PropertyDescriptor.class.getName(),
            "ComponentsFormalComponent.${count}",
            "Formal Component",
            "${C_Cclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] ConstantSpecification_ConstantSpecification =
      {
  .select any CNST_CSPclass from instances of CNST_CSP
  .print "Generating class Constant Specification for ConstantSpecification"
			{
               TextPropertyDescriptor.class.getName(),
				"InformalGroupName",
				"Constant Specification Informal Name",
				"${CNST_CSPclass.InformalGroupName}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
  .select many CNST_LSCclass_set related by CNST_CSPclass->CNST_SYC[R1504]->CNST_LFSC[R1502]->CNST_LSC[R1503]
  .assign count = 0
    //Skipping special case for constants
      };
	public static final String[][] LiteralSymbolicConstant_LiteralSymbolicConstant =
      {
  .select any CNST_LSCclass from instances of CNST_LSC
  .print "Generating class Literal Symbolic Constant for LiteralSymbolicConstant"
			{
               ConstantValuePropertyDescriptor.class.getName(),
				"Value",
				"Value",
				"${CNST_LSCclass.Value}" },
  .select many CNST_SYCclass_set related by CNST_LSCclass->CNST_LFSC[R1503]->CNST_SYC[R1502]
  .assign count = 0
  .for each CNST_SYCclass in CNST_SYCclass_set
            { PropertyDescriptor.class.getName(),
            "SymbolicConstant.${count}",
            "Symbolic Constant",
            "${CNST_SYCclass.Name}" },
    .assign count = count + 1
  .end for
  .select many S_DTclass_set related by CNST_LSCclass->CNST_LFSC[R1503]->CNST_SYC[R1502]->S_DT[R1500]
  .assign count = 0
  .for each S_DTclass in S_DTclass_set
            { ChooserPropertyDescriptor.class.getName(),
            "DataType",
            "Type",
            "${S_DTclass.Name}" },
    .assign count = count + 1
  .end for
      };
	public static final String[][] SymbolicConstant_SymbolicConstant =
      {
  .select any CNST_SYCclass from instances of CNST_SYC
  .print "Generating class Symbolic Constant for SymbolicConstant"
			{
               TextPropertyDescriptor.class.getName(),
				"Name",
				"Name",
				"${CNST_SYCclass.Name}" },
			{
               DescriptionPropertyDescriptor.class.getName(),
				"Descrip",
				"Description",
				"" },
      };
	public static final String[][] NewBaseAttribute_NonDerivedAttribute =
      {
  .select any O_NBATTRclass from instances of O_NBATTR
  .print "Generating class New Base Attribute for NonDerivedAttribute"
      };
	public static final String[][] PolymorphicEvent_PolymorphicEvent =
      {
  .select any SM_PEVTclass from instances of SM_PEVT
  .print "Generating class Polymorphic Event for PolymorphicEvent"
      };
	public static final String[][] ReferredToIdentifierAttribute_ReferencedIdentifier =
      {
  .select any O_RTIDAclass from instances of O_RTIDA
  .print "Generating class Referred To Identifier Attribute for ReferencedIdentifier"
      };
	public static final String[][] SEMEvent_Event =
      {
  .select any SM_SEVTclass from instances of SM_SEVT
  .print "Generating class SEM Event for Event"
      };
	public static final String[][] InformalSynchronousMessage_InformalMessage =
      {
  .select any MSG_ISMclass from instances of MSG_ISM
  .print "Generating class Informal Synchronous Message for InformalMessage"
      };
	public static final String[][] InformalAsynchronousMessage_InformalMessage =
      {
  .select any MSG_IAMclass from instances of MSG_IAM
  .print "Generating class Informal Asynchronous Message for InformalMessage"
      };
	public static final String[][] FunctionMessage_FormalFunction =
      {
  .select any MSG_Fclass from instances of MSG_F
  .print "Generating class Function Message for FormalFunction"
      };
	public static final String[][] BridgeMessage_FormalBridgeOperation =
      {
  .select any MSG_Bclass from instances of MSG_B
  .print "Generating class Bridge Message for FormalBridgeOperation"
      };
	public static final String[][] OperationMessage_FormalOperation =
      {
  .select any MSG_Oclass from instances of MSG_O
  .print "Generating class Operation Message for FormalOperation"
      };
	public static final String[][] InterfaceOperationMessage_FormalInterfaceOperation =
      {
  .select any MSG_IOPclass from instances of MSG_IOP
  .print "Generating class Interface Operation Message for FormalInterfaceOperation"
      };
	public static final String[][] EventMessage_FormalEvent =
      {
  .select any MSG_Eclass from instances of MSG_E
  .print "Generating class Event Message for FormalEvent"
      };
	public static final String[][] SignalMessage_FormalSignal =
      {
  .select any MSG_SIGclass from instances of MSG_SIG
  .print "Generating class Signal Message for FormalSignal"
      };
	public static final String[][] InformalArgument_InformalArgument =
      {
  .select any MSG_IAclass from instances of MSG_IA
  .print "Generating class Informal Argument for InformalArgument"
      };
}
.emit to file "src/com/mentor/nucleus/bp/ui/properties/test/PropertiesViewTestData.java"
