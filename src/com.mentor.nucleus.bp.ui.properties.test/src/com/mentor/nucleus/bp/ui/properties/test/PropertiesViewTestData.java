//======================================================================
//
// File: com/mentor/nucleus/bp/ui/properties/test/PropertiesViewTestData.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_view_test_data.arc
// Version:      $Revision: 1.47 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
///
// This class is responsible for determing the dependency between
// classes for displaying property changes.
//
package com.mentor.nucleus.bp.ui.properties.test;

import org.eclipse.ui.views.properties.PropertyDescriptor;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;

import com.mentor.nucleus.bp.ui.properties.ActivityPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.BooleanPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.DescriptionPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.DimensionsPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.ChooserPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.EnumPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.IntegerPropertyDescriptor;
import com.mentor.nucleus.bp.ui.properties.ConstantValuePropertyDescriptor;

public class PropertiesViewTestData {
	public static final String[][] SystemModel_System = {{
			TextPropertyDescriptor.class.getName(), "Name", "System Name",
			"com.mentor.nucleus.bp.ui.properties.test"},
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	//Skipping special case for System Model
	};
	public static final String[][] Function_Function = {
			{TextPropertyDescriptor.class.getName(), "Name", "Name", "test"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},
			{ActivityPropertyDescriptor.class.getName(), "Action_Semantics",
					"Action Semantics Field", ""},
			{EnumPropertyDescriptor.class.getName(), "Suc_Pars",
					"Successful Parse Indicator",
					EnumRangeTest.Suc_Pars_vals[1]},
			{DimensionsPropertyDescriptor.class.getName(), "Return_Dimensions",
					"Return Array Dimensions", ""},
			{ChooserPropertyDescriptor.class.getName(), "DataType",
					"Return Type", "void"},
			{PropertyDescriptor.class.getName(), "FunctionParameter.0",
					"Function Parameter", "test"},};
	public static final String[][] FunctionParameter_FunctionParameter = {
			{TextPropertyDescriptor.class.getName(), "Name", "Parameter Name",
					"test"},
			{EnumPropertyDescriptor.class.getName(), "By_Ref",
					"By Reference Indicator", EnumRangeTest.By_Ref_vals[0]},
			{DimensionsPropertyDescriptor.class.getName(), "Dimensions",
					"Array Dimensions", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},
			{ChooserPropertyDescriptor.class.getName(), "DataType", "Type",
					"integer"},};
	public static final String[][] ClassStateMachine_ClassStateChart = {
			{PropertyDescriptor.class.getName(), "State.0",
					"State Machine State", "State Name"},
			{PropertyDescriptor.class.getName(), "Event.0",
					"State Machine Event", "IMP_A1: test_asm"},};
	public static final String[][] StateMachineState_State = {
			{TextPropertyDescriptor.class.getName(), "Name", "State Name",
					"State Name"},
			{IntegerPropertyDescriptor.class.getName(), "Numb", "State Number",
					"1"},
			{EnumPropertyDescriptor.class.getName(), "Final",
					"Final State Indicator", EnumRangeTest.Final_vals[0]},
			{PropertyDescriptor.class.getName(),
					"StateEventMatrixEntryEventIgnored.0", "Event Ignored",
					"State Event Matrix Entry (test_poly::B Class)"},
			{PropertyDescriptor.class.getName(), "Action.0", "Action",
					"State Action"},
			{PropertyDescriptor.class.getName(),
					"TransitionsNewStateTransitions.0",
					"New State Transitions", "test_sm::B Class"},};
	public static final String[][] DataType_DataType = {
			{TextPropertyDescriptor.class.getName(), "Name", "Data Type Name",
					"void"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Data Type Description", ""},
			{TextPropertyDescriptor.class.getName(), "DefaultValue",
					"Default Value", ""},};
	public static final String[][] Enumerator_Enumerator = {
			{TextPropertyDescriptor.class.getName(), "Name", "Enumerator Name",
					"a"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Enumerator Description", ""},};
	public static final String[][] ExternalEntity_ExternalEntity = {
			{TextPropertyDescriptor.class.getName(), "Name",
					"External Entity Name", "External Entity Name"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"External Entity Description", ""},
			{TextPropertyDescriptor.class.getName(), "Key_Lett",
					"External Entity Key Letters", "KEY"},
			{TextPropertyDescriptor.class.getName(), "Realized_Class_Path",
					"Realized External Entity Path", ""},
			{PropertyDescriptor.class.getName(), "Label",
					"External Entity Label", "External Entity Name"},
			{BooleanPropertyDescriptor.class.getName(), "isRealized",
					"Realized External Entity", "true"},
			{PropertyDescriptor.class.getName(), "Bridge.0", "Bridge", "test"},};
	public static final String[][] Bridge_Bridge = {
			{TextPropertyDescriptor.class.getName(), "Name", "Bridge Name",
					"test"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Bridge Description", ""},
			{EnumPropertyDescriptor.class.getName(), "Brg_Typ", "Bridge Type",
					EnumRangeTest.Brg_Typ_vals[0]},
			{ActivityPropertyDescriptor.class.getName(), "Action_Semantics",
					"Action Semantics Field", ""},
			{EnumPropertyDescriptor.class.getName(), "Suc_Pars",
					"Successful Parse Indicator",
					EnumRangeTest.Suc_Pars_vals[1]},
			{DimensionsPropertyDescriptor.class.getName(), "Return_Dimensions",
					"Return Array Dimensions", ""},
			{ChooserPropertyDescriptor.class.getName(), "DataType",
					"Return Type", "void"},
			{PropertyDescriptor.class.getName(), "BridgeParameter.0",
					"Bridge Parameter", "test"},};
	public static final String[][] BridgeParameter_BridgeParameter = {
			{TextPropertyDescriptor.class.getName(), "Name",
					"Bridge Parameter Name", "test"},
			{EnumPropertyDescriptor.class.getName(), "By_Ref",
					"By Reference Indicator", EnumRangeTest.By_Ref_vals[0]},
			{DimensionsPropertyDescriptor.class.getName(), "Dimensions",
					"Array Dimensions", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},
			{ChooserPropertyDescriptor.class.getName(), "DataType", "Type",
					"integer"},};
	public static final String[][] Association_Association = {
			{IntegerPropertyDescriptor.class.getName(), "Numb",
					"Association Number", "1"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Association Description", ""},
			{PropertyDescriptor.class.getName(), "AssociationParticipantEnd.0",
					"Class As Simple Participant", "A class"},
			{PropertyDescriptor.class.getName(), "AssociationFormalizerEnd.0",
					"Class As Simple Formalizer", "B Class"},};
	public static final String[][] ImportedClass_ImportedClass = {
			{PropertyDescriptor.class.getName(), "Obj_Name", "Class Name",
					"Imported Class"},
			{PropertyDescriptor.class.getName(), "Obj_KL", "Class Key Letter",
					"IMP"},
			{PropertyDescriptor.class.getName(), "ClassClassReference.0",
					"Class Reference", "Imported Class"},};
	public static final String[][] DerivedBaseAttribute_DerivedAttribute = {
			{ActivityPropertyDescriptor.class.getName(), "Action_Semantics",
					"Action Semantics Field", ""},
			{EnumPropertyDescriptor.class.getName(), "Suc_Pars",
					"Successful Parse Indicator",
					EnumRangeTest.Suc_Pars_vals[1]},};
	public static final String[][] ClassAsSimpleParticipant_AssociationParticipantEnd = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "Cond", "Conditionality",
					EnumRangeTest.Cond_vals[0]},
			{TextPropertyDescriptor.class.getName(), "Txt_Phrs", "Text Phrase",
					""},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"A class"},
			{PropertyDescriptor.class.getName(), "ReferencedIdentifier.0",
					"Referred To Identifier Attribute", "id {R1}"},};
	public static final String[][] ClassAsSimpleFormalizer_AssociationFormalizerEnd = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "Cond", "Conditionality",
					EnumRangeTest.Cond_vals[0]},
			{TextPropertyDescriptor.class.getName(), "Txt_Phrs", "Text Phrase",
					""},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"B Class"},};
	public static final String[][] ClassAsAssociatedOneSide_AssociativeOneEnd = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "Cond", "Conditionality",
					EnumRangeTest.Cond_vals[0]},
			{TextPropertyDescriptor.class.getName(), "Txt_Phrs", "Text Phrase",
					""},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"A class"},
			{PropertyDescriptor.class.getName(), "ReferencedIdentifier.0",
					"Referred To Identifier Attribute", "id {R2}"},};
	public static final String[][] ClassAsAssociatedOtherSide_AssociativeOtherEnd = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "Cond", "Conditionality",
					EnumRangeTest.Cond_vals[0]},
			{TextPropertyDescriptor.class.getName(), "Txt_Phrs", "Text Phrase",
					""},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"B Class"},
			{PropertyDescriptor.class.getName(), "ReferencedIdentifier.0",
					"Referred To Identifier Attribute", "id {R2}"},};
	public static final String[][] ClassAsLink_Associative = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"C class"},};
	public static final String[][] ClassAsSupertype_Supertype = {
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"B Class"},
			{PropertyDescriptor.class.getName(), "ReferencedIdentifier.0",
					"Referred To Identifier Attribute", "id {R4}"},};
	public static final String[][] ClassAsSubtype_Subtype = {{
			PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
			"C class"},};
	public static final String[][] ClassAsDerivedOneSide_DerivedOneEnd = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "Cond", "Conditionality",
					EnumRangeTest.Cond_vals[0]},
			{TextPropertyDescriptor.class.getName(), "Txt_Phrs", "Text Phrase",
					""},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"B Class"},};
	public static final String[][] ClassAsDerivedOtherSide_DerivedOtherEnd = {
			{EnumPropertyDescriptor.class.getName(), "Mult", "Multiplicity",
					EnumRangeTest.Mult_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "Cond", "Conditionality",
					EnumRangeTest.Cond_vals[0]},
			{TextPropertyDescriptor.class.getName(), "Txt_Phrs", "Text Phrase",
					""},
			{PropertyDescriptor.class.getName(), "ClassRelated.0", "Related",
					"A class"},};
	public static final String[][] Action_Action = {
			{EnumPropertyDescriptor.class.getName(), "Suc_Pars",
					"Successful Parse Indicator",
					EnumRangeTest.Suc_Pars_vals[1]},
			{ActivityPropertyDescriptor.class.getName(), "Action_Semantics",
					"Action Semantics Field", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},};
	public static final String[][] EventIgnored_EventIgnored = {{
			DescriptionPropertyDescriptor.class.getName(), "Descrip",
			"Description", ""},};
	public static final String[][] CantHappen_EventCantHappen = {{
			DescriptionPropertyDescriptor.class.getName(), "Descrip",
			"Description", ""},};
	public static final String[][] UserDataType_UserDefinedDataType = {
			{EnumPropertyDescriptor.class.getName(), "Gen_Type",
					"User Defined Type Type", EnumRangeTest.Gen_Type_vals[1]},
			//Skipping special case for core data types and user data types.
			{ChooserPropertyDescriptor.class.getName(), "DataType",
					"Core Type", "inst<Mapping>"},};
	public static final String[][] CoreDataType_CoreDataType = {{
			EnumPropertyDescriptor.class.getName(), "Core_Typ", "Core Type",
			EnumRangeTest.Core_Typ_vals[0]},
	//Skipping special case for core data types and user data types.
	};
	public static final String[][] EnumerationDataType_Enumeration = {
			{PropertyDescriptor.class.getName(), "DataType.0", "Data Type",
					"test_enum"},
			{PropertyDescriptor.class.getName(), "Enumerator.0", "Enumerator",
					"a"},};
	public static final String[][] DerivedAssociation_DerivedAssociation = {
			{TextPropertyDescriptor.class.getName(), "Rel_Chn",
					"Association Chain", "test"},
			{PropertyDescriptor.class.getName(), "DerivedOneEnd.0",
					"Class As Derived One Side", "B Class"},
			{PropertyDescriptor.class.getName(), "DerivedOtherEnd.0",
					"Class As Derived Other Side", "A class"},};
	public static final String[][] ReferentialAttribute_ReferentialAttribute = {{
			EnumPropertyDescriptor.class.getName(), "Ref_Mode",
			"Referential Attribute Referred to Mode",
			EnumRangeTest.Ref_Mode_vals[1]},};
	public static final String[][] NonLocalEvent_InheritedEvent = {
			{PropertyDescriptor.class.getName(), "Name", "Name",
					"test_sm::B Class"},
			{PropertyDescriptor.class.getName(),
					"PolymorphicEventDeclaredEvent.0", "Declared Event",
					"test_sm"},};
	public static final String[][] ExternalEntityEventData_ExternalEntityEventData = {};
	public static final String[][] InstanceAttributeValue_FormalInstanceAttributeValues = {
			{TextPropertyDescriptor.class.getName(), "Value",
					"Attribute Value", ""},
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal Attribute Name", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Instance Attribute Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"true"},
			{PropertyDescriptor.class.getName(), "AttributeFormalAttribute.0",
					"Formal Attribute", "id"},};
	public static final String[][] ExternalEntityParticipant_ImportedExternalEntities = {
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal External Entity Name", "Informal External Entity"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"External Entity Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},};
	public static final String[][] Lifespan_Lifespans = {
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Communication Line Description", ""},
			{BooleanPropertyDescriptor.class.getName(), "Destroyed",
					"Is Destructed", "false"},
			{PropertyDescriptor.class.getName(), "TimingMarks.0",
					"Timing Mark", ""},
			{PropertyDescriptor.class.getName(), "TimingMarks.1",
					"Timing Mark", ""},};
	public static final String[][] ClassParticipantAttribute_InformalAttributes = {
			{TextPropertyDescriptor.class.getName(), "Name",
					"Informal Attribute Name", "Informal Attribute"},
			{TextPropertyDescriptor.class.getName(), "Type",
					"Informal Attribute Type", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Informal Attribute Description", ""},};
	public static final String[][] TimingMark_TimingMarks = {
			{TextPropertyDescriptor.class.getName(), "Name",
					"Timing Mark Label", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Timing Mark Description", ""},
			{PropertyDescriptor.class.getName(), "TimeSpans.0", "Time Span", ""},};
	public static final String[][] TimeSpan_TimeSpans = {
			{TextPropertyDescriptor.class.getName(), "Name", "Time Span Label",
					""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Time Span Description", ""},};
	public static final String[][] SynchronousMessage_SynchronousMessages = {
			{TextPropertyDescriptor.class.getName(), "ResultTarget",
					"Result Target", ""},
			{TextPropertyDescriptor.class.getName(), "ReturnValue",
					"Return Value", ""},
			{TextPropertyDescriptor.class.getName(), "GuardCondition",
					"Guard Condition", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Message Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal Name", "Informal Message"},
			{TextPropertyDescriptor.class.getName(), "SequenceNumb",
					"Sequence Number", ""},
			{PropertyDescriptor.class.getName(),
					"InformalMessageInformalMessage.0", "Informal Message",
					"Informal Message"},};
	public static final String[][] AsynchronousMessage_AsynchronousMessages = {
			{TextPropertyDescriptor.class.getName(), "GuardCondition",
					"Guard Condition", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Message Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},
			{TextPropertyDescriptor.class.getName(), "DurationConstraint",
					"Duration Constraint", ""},
			{TextPropertyDescriptor.class.getName(), "DurationObservation",
					"Duration Observation", ""},
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal Name", "Informal Message"},
			{TextPropertyDescriptor.class.getName(), "SequenceNumb",
					"Sequence Number", ""},
			{PropertyDescriptor.class.getName(),
					"InformalMessageInformalMessage.0", "Informal Message",
					"Informal Message"},};
	public static final String[][] MessageArgument_InformalMessageArguments = {
			{TextPropertyDescriptor.class.getName(), "Value", "Argument Value",
					""},
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal Argument Name", "Informal Argument"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Message Argument Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},};
	public static final String[][] MessageArgument_MessageArguments = {
			{TextPropertyDescriptor.class.getName(), "Value", "Argument Value",
					""},
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal Argument Name", "Informal Argument"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Message Argument Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},};
	public static final String[][] InstanceAttributeValue_InformalInstanceAttributeValues = {
			{TextPropertyDescriptor.class.getName(), "Value",
					"Attribute Value", ""},
			{TextPropertyDescriptor.class.getName(), "InformalName",
					"Informal Attribute Name", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Instance Attribute Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"true"},};
	public static final String[][] ActorParticipant_Actors = {
			{TextPropertyDescriptor.class.getName(), "Name", "Actor Name",
					"Unnamed Actor"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Actor Description", ""},};
	public static final String[][] ReturnMessage_ReturnMessages = {
			{TextPropertyDescriptor.class.getName(), "ReturnValue",
					"Return Value", ""},
			{TextPropertyDescriptor.class.getName(), "ResultTarget",
					"Result Target", ""},
			{TextPropertyDescriptor.class.getName(), "GuardCondition",
					"Guard Condition", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Message Description", ""},
			{TextPropertyDescriptor.class.getName(), "Name", "Name", ""},
			{TextPropertyDescriptor.class.getName(), "SequenceNumb",
					"Sequence Number", ""},};
	public static final String[][] CommunicationLink_CommunicationLinks = {
			{TextPropertyDescriptor.class.getName(), "Numb",
					"Association Number", ""},
			{TextPropertyDescriptor.class.getName(), "StartText",
					"Start Text Phrase", ""},
			{TextPropertyDescriptor.class.getName(), "EndText",
					"End Text Phrase", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},
			{EnumPropertyDescriptor.class.getName(), "StartVisibility",
					"Start Visibility", EnumRangeTest.StartVisibility_vals[0]},
			{EnumPropertyDescriptor.class.getName(), "EndVisibility",
					"End Visibility", EnumRangeTest.EndVisibility_vals[0]},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Link Description", ""},
			{PropertyDescriptor.class.getName(), "InstancesLinkStart.0",
					"Link Start", "inst A"},
			{PropertyDescriptor.class.getName(), "ImportedClassesLinkEnd.0",
					"Link End", "Informal Class"},};
	public static final String[][] UseCaseParticipant_UseCases = {
			{TextPropertyDescriptor.class.getName(), "Name", "Use Case Name",
					"Unnamed Use Case"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Use Case Description", ""},};
	public static final String[][] BinaryAssociation_UseCaseAssociations = {
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Association Description", ""},
			{PropertyDescriptor.class.getName(), "ActorsAssociationOneSide.0",
					"Association One Side", "Unnamed Actor"},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOtherSide.0", "Association Other Side",
					"Unnamed Use Case"},};
	public static final String[][] Generalization_UseCaseGeneralizations = {
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Generalization Description", ""},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOneSide.0", "Association One Side",
					"Unnamed Use Case"},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOtherSide.0", "Association Other Side",
					"Unnamed Use Case"},};
	public static final String[][] Include_UseCaseIncludes = {
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Include Description", ""},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOneSide.0", "Association One Side",
					"Unnamed Use Case"},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOtherSide.0", "Association Other Side",
					"Unnamed Use Case"},};
	public static final String[][] Extend_UseCaseExtends = {
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Extend Description", ""},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOneSide.0", "Association One Side",
					"Unnamed Use Case"},
			{PropertyDescriptor.class.getName(),
					"UseCasesAssociationOtherSide.0", "Association Other Side",
					"Unnamed Use Case"},};
	public static final String[][] ForkJoinNode_ForkJoins = {
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Fork Join Description", ""},
			{TextPropertyDescriptor.class.getName(), "GuardCondition",
					"Guard Condition", ""},};
	public static final String[][] InitialNode_InitialNodes = {{
			DescriptionPropertyDescriptor.class.getName(), "Descrip",
			"Initial Node Description", ""},};
	public static final String[][] ActivityEdge_ActivityEdges = {
			{TextPropertyDescriptor.class.getName(), "Guard",
					"Guard Condition", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Edge Description", ""},};
	public static final String[][] ActivityFinalNode_ActivityFinalNodes = {{
			DescriptionPropertyDescriptor.class.getName(), "Descrip",
			"Final Activity Description", ""},};
	public static final String[][] FlowFinalNode_FlowFinalNodes = {{
			DescriptionPropertyDescriptor.class.getName(), "Descrip",
			"Final Flow Description", ""},};
	public static final String[][] ActivityDiagramAction_ActivityDiagramActions = {
			{TextPropertyDescriptor.class.getName(), "Name", "Action Name",
					"Unnamed Action"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Action Description", ""},};
	public static final String[][] DecisionMergeNode_DecisionMergeNodes = {
			{TextPropertyDescriptor.class.getName(), "Name", "Name", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Decision Merge Description", ""},};
	public static final String[][] ObjectNode_ObjectNodes = {
			{TextPropertyDescriptor.class.getName(), "Name", "Object Name",
					"Unnamed Object"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Object Node Description", ""},};
	public static final String[][] AcceptEventAction_AcceptEventActions = {
			{TextPropertyDescriptor.class.getName(), "Name",
					"Accept Event Action Name", "Unnamed Accept Event"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Accept Event Action Description", ""},};
	public static final String[][] SendSignal_SendSignalActions = {
			{TextPropertyDescriptor.class.getName(), "Name", "Signal Name",
					"Unnamed Send Signal"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Signal Description", ""},};
	public static final String[][] ActivityPartition_ActivityPartitions = {
			{TextPropertyDescriptor.class.getName(), "Name", "Partition Name",
					""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Partition Description", ""},};
	public static final String[][] AcceptTimeEventAction_AcceptTimeEventActions = {
			{TextPropertyDescriptor.class.getName(), "Name",
					"Accept Time Event Name", "Unnamed Accept Time Event"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Accept Time Event Description", ""},};
	public static final String[][] StructuredDataType_StructuredDataType = {{
			PropertyDescriptor.class.getName(), "StructureMember.0",
			"Structure Member", "member1"},
	//Skipping special case for core data types and user data types.
	};
	public static final String[][] StructureMember_StructureMember = {
			{TextPropertyDescriptor.class.getName(), "Name", "Name", "member1"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},
			{DimensionsPropertyDescriptor.class.getName(), "Dimensions",
					"Array Dimensions", ""},
			{ChooserPropertyDescriptor.class.getName(), "DataType", "Type",
					"integer"},};
	public static final String[][] Transition_Transitions = {
			{PropertyDescriptor.class.getName(), "EventAssignedLocalEvent.0",
					"Assigned Local Event", "test_sm::B Class"},
			{PropertyDescriptor.class.getName(),
					"InheritedEventAssignedPolymorphicEvent.0",
					"Assigned Polymorphic Event", "test_sm::B Class"},
			{PropertyDescriptor.class.getName(), "StateTo.0", "To",
					"State Name"},
			{PropertyDescriptor.class.getName(), "Action.0", "Action",
					"Transition Action"},};
	public static final String[][] ComponentParticipant_ComponentParticipants = {
			{TextPropertyDescriptor.class.getName(), "InformalComponentName",
					"Informal Component Name", "Informal Component"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Component Description", ""},
			{PropertyDescriptor.class.getName(), "isFormal", "Is Formal",
					"false"},};
	public static final String[][] ConstantSpecification_ConstantSpecification = {
			{TextPropertyDescriptor.class.getName(), "InformalGroupName",
					"Constant Specification Informal Name", ""},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},
	//Skipping special case for constants
	};
	public static final String[][] LiteralSymbolicConstant_LiteralSymbolicConstant = {
			{ConstantValuePropertyDescriptor.class.getName(), "Value", "Value",
					"1"},
			{PropertyDescriptor.class.getName(), "SymbolicConstant.0",
					"Symbolic Constant", "a_const"},
			{ChooserPropertyDescriptor.class.getName(), "DataType", "Type",
					"integer"},};
	public static final String[][] SymbolicConstant_SymbolicConstant = {
			{TextPropertyDescriptor.class.getName(), "Name", "Name", "a_const"},
			{DescriptionPropertyDescriptor.class.getName(), "Descrip",
					"Description", ""},};
	public static final String[][] NewBaseAttribute_NonDerivedAttribute = {};
	public static final String[][] PolymorphicEvent_PolymorphicEvent = {};
	public static final String[][] ReferredToIdentifierAttribute_ReferencedIdentifier = {};
	public static final String[][] SEMEvent_Event = {};
	public static final String[][] InformalSynchronousMessage_InformalMessage = {};
	public static final String[][] InformalAsynchronousMessage_InformalMessage = {};
	public static final String[][] FunctionMessage_FormalFunction = {};
	public static final String[][] BridgeMessage_FormalBridgeOperation = {};
	public static final String[][] OperationMessage_FormalOperation = {};
	public static final String[][] InterfaceOperationMessage_FormalInterfaceOperation = {};
	public static final String[][] EventMessage_FormalEvent = {};
	public static final String[][] SignalMessage_FormalSignal = {};
	public static final String[][] InformalArgument_InformalArgument = {};
}
