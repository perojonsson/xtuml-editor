//======================================================================
//
// File: com/mentor/nucleus/bp/ui/properties/test/PropertiesViewTest.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_view_test.arc
// Version:      $Revision: 1.47 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for determing the dependency between
// classes for displaying property changes.
//
package com.mentor.nucleus.bp.ui.properties.test;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.ui.properties.*;

public class PropertiesViewTest extends BaseTest {
	public PropertiesViewTest(String name) {
		super(null, name);
	}
	public void testSystemModel_SystemProperties() throws Exception {
		SystemModel_c inst = SystemModel_c.SystemModelInstance(Ooaofooa
				.getDefaultInstance());
		SystemS_SYSPropertySource ps = new SystemS_SYSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.SystemModel_System.length; ++i) {
			assertEquals(PropertiesViewTestData.SystemModel_System[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.SystemModel_System[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.SystemModel_System[i][2],
					pd_set[i].getDisplayName());
			assertEquals(PropertiesViewTestData.SystemModel_System[i][3], ps
					.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testFunction_FunctionProperties() throws Exception {
		Function_c inst = Function_c.FunctionInstance(modelRoot);
		FunctionS_SYNCPropertySource ps = new FunctionS_SYNCPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Function_Function.length; ++i) {
			assertEquals(PropertiesViewTestData.Function_Function[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Function_Function[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Function_Function[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Function_Function[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else if (PropertiesViewTestData.Function_Function[i][1]
					.equals("Action_Semantics")) {
				assertEquals(inst.getAction_semantics().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(PropertiesViewTestData.Function_Function[i][3], ps
						.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testFunctionParameter_FunctionParameterProperties()
			throws Exception {
		FunctionParameter_c inst = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		FunctionParameterS_SPARMPropertySource ps = new FunctionParameterS_SPARMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.FunctionParameter_FunctionParameter.length; ++i) {
			assertEquals(
					PropertiesViewTestData.FunctionParameter_FunctionParameter[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.FunctionParameter_FunctionParameter[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.FunctionParameter_FunctionParameter[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.FunctionParameter_FunctionParameter[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.FunctionParameter_FunctionParameter[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testClassStateMachine_ClassStateChartProperties()
			throws Exception {
		ClassStateMachine_c inst = ClassStateMachine_c
				.ClassStateMachineInstance(modelRoot);
		ClassStateChartSM_ASMPropertySource ps = new ClassStateChartSM_ASMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassStateMachine_ClassStateChart.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassStateMachine_ClassStateChart[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassStateMachine_ClassStateChart[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassStateMachine_ClassStateChart[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassStateMachine_ClassStateChart[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testStateMachineState_StateProperties() throws Exception
    {
		StateMachineState_c inst = StateMachineState_c
				.StateMachineStateInstance(modelRoot, new ClassQueryInterface_c() {
					
					@Override
					public boolean evaluate(Object candidate) {
								ModelClass_c clazz = ModelClass_c
										.getOneO_OBJOnR518(InstanceStateMachine_c
												.getOneSM_ISMOnR517(StateMachine_c
														.getOneSM_SMOnR501((StateMachineState_c) candidate)));
								if(clazz != null && clazz.getName().equals("C class"))
									return true;
								return false;
					}
				});
        StateSM_STATEPropertySource ps = new StateSM_STATEPropertySource(inst);
        IPropertyDescriptor [] pd_set = ps.getPropertyDescriptors();
        for ( int i = 0; i < PropertiesViewTestData.StateMachineState_State.length; ++i )
        {
            assertEquals( PropertiesViewTestData.StateMachineState_State[i][0], pd_set[i].getClass().getName() );
            assertEquals( PropertiesViewTestData.StateMachineState_State[i][1], pd_set[i].getId() );
            assertEquals( PropertiesViewTestData.StateMachineState_State[i][2], pd_set[i].getDisplayName() );
            assertEquals( PropertiesViewTestData.StateMachineState_State[i][3], ps.getPropertyValue(pd_set[i].getId()).toString());
        }
    }
	public void testDataType_DataTypeProperties() throws Exception {
		DataType_c inst = DataType_c.DataTypeInstance(
				Ooaofooa.getDefaultInstance(), new ClassQueryInterface_c() {
					public boolean evaluate(Object candidate) {
						DataType_c selected = (DataType_c) candidate;
						return selected.getName().equals("void");
					}
				});
		DataTypeS_DTPropertySource ps = new DataTypeS_DTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.DataType_DataType.length; ++i) {
			assertEquals(PropertiesViewTestData.DataType_DataType[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.DataType_DataType[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.DataType_DataType[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.DataType_DataType[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(PropertiesViewTestData.DataType_DataType[i][3], ps
						.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testEnumerator_EnumeratorProperties() throws Exception {
		Enumerator_c inst = Enumerator_c.EnumeratorInstance(modelRoot);
		EnumeratorS_ENUMPropertySource ps = new EnumeratorS_ENUMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Enumerator_Enumerator.length; ++i) {
			assertEquals(PropertiesViewTestData.Enumerator_Enumerator[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Enumerator_Enumerator[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Enumerator_Enumerator[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Enumerator_Enumerator[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.Enumerator_Enumerator[i][3], ps
								.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testExternalEntity_ExternalEntityProperties() throws Exception {
		ExternalEntity_c inst = ExternalEntity_c
				.ExternalEntityInstance(modelRoot);
		ExternalEntityS_EEPropertySource ps = new ExternalEntityS_EEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ExternalEntity_ExternalEntity.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ExternalEntity_ExternalEntity[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ExternalEntity_ExternalEntity[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ExternalEntity_ExternalEntity[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ExternalEntity_ExternalEntity[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ExternalEntity_ExternalEntity[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testBridge_BridgeProperties() throws Exception {
		Bridge_c inst = Bridge_c.BridgeInstance(modelRoot);
		BridgeS_BRGPropertySource ps = new BridgeS_BRGPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Bridge_Bridge.length; ++i) {
			assertEquals(PropertiesViewTestData.Bridge_Bridge[i][0], pd_set[i]
					.getClass().getName());
			assertEquals(PropertiesViewTestData.Bridge_Bridge[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Bridge_Bridge[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Bridge_Bridge[i][1].equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else if (PropertiesViewTestData.Bridge_Bridge[i][1]
					.equals("Action_Semantics")) {
				assertEquals(inst.getAction_semantics().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(PropertiesViewTestData.Bridge_Bridge[i][3], ps
						.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testBridgeParameter_BridgeParameterProperties()
			throws Exception {
		BridgeParameter_c inst = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		BridgeParameterS_BPARMPropertySource ps = new BridgeParameterS_BPARMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.BridgeParameter_BridgeParameter.length; ++i) {
			assertEquals(
					PropertiesViewTestData.BridgeParameter_BridgeParameter[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.BridgeParameter_BridgeParameter[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.BridgeParameter_BridgeParameter[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.BridgeParameter_BridgeParameter[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.BridgeParameter_BridgeParameter[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testAssociation_AssociationProperties() throws Exception {
		Association_c inst = Association_c.AssociationInstance(modelRoot);
		AssociationR_RELPropertySource ps = new AssociationR_RELPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Association_Association.length; ++i) {
			assertEquals(PropertiesViewTestData.Association_Association[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Association_Association[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Association_Association[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Association_Association[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.Association_Association[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testImportedClass_ImportedClassProperties() throws Exception {
		ImportedClass_c inst = ImportedClass_c.ImportedClassInstance(modelRoot);
		ImportedClassO_IOBJPropertySource ps = new ImportedClassO_IOBJPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ImportedClass_ImportedClass.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ImportedClass_ImportedClass[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ImportedClass_ImportedClass[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ImportedClass_ImportedClass[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ImportedClass_ImportedClass[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testDerivedBaseAttribute_DerivedAttributeProperties()
			throws Exception {
		DerivedBaseAttribute_c inst = DerivedBaseAttribute_c
				.DerivedBaseAttributeInstance(modelRoot);
		DerivedAttributeO_DBATTRPropertySource ps = new DerivedAttributeO_DBATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.DerivedBaseAttribute_DerivedAttribute.length; ++i) {
			assertEquals(
					PropertiesViewTestData.DerivedBaseAttribute_DerivedAttribute[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.DerivedBaseAttribute_DerivedAttribute[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.DerivedBaseAttribute_DerivedAttribute[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.DerivedBaseAttribute_DerivedAttribute[i][1]
					.equals("Action_Semantics")) {
				assertEquals(inst.getAction_semantics().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.DerivedBaseAttribute_DerivedAttribute[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testClassAsSimpleParticipant_AssociationParticipantEndProperties()
			throws Exception {
		ClassAsSimpleParticipant_c inst = ClassAsSimpleParticipant_c
				.ClassAsSimpleParticipantInstance(modelRoot);
		AssociationParticipantEndR_PARTPropertySource ps = new AssociationParticipantEndR_PARTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsSimpleParticipant_AssociationParticipantEnd.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleParticipant_AssociationParticipantEnd[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleParticipant_AssociationParticipantEnd[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleParticipant_AssociationParticipantEnd[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleParticipant_AssociationParticipantEnd[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsSimpleFormalizer_AssociationFormalizerEndProperties()
			throws Exception {
		ClassAsSimpleFormalizer_c inst = ClassAsSimpleFormalizer_c
				.ClassAsSimpleFormalizerInstance(modelRoot);
		AssociationFormalizerEndR_FORMPropertySource ps = new AssociationFormalizerEndR_FORMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsSimpleFormalizer_AssociationFormalizerEnd.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleFormalizer_AssociationFormalizerEnd[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleFormalizer_AssociationFormalizerEnd[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleFormalizer_AssociationFormalizerEnd[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsSimpleFormalizer_AssociationFormalizerEnd[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsAssociatedOneSide_AssociativeOneEndProperties()
			throws Exception {
		ClassAsAssociatedOneSide_c inst = ClassAsAssociatedOneSide_c
				.ClassAsAssociatedOneSideInstance(modelRoot);
		AssociativeOneEndR_AONEPropertySource ps = new AssociativeOneEndR_AONEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsAssociatedOneSide_AssociativeOneEnd.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOneSide_AssociativeOneEnd[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOneSide_AssociativeOneEnd[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOneSide_AssociativeOneEnd[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOneSide_AssociativeOneEnd[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsAssociatedOtherSide_AssociativeOtherEndProperties()
			throws Exception {
		ClassAsAssociatedOtherSide_c inst = ClassAsAssociatedOtherSide_c
				.ClassAsAssociatedOtherSideInstance(modelRoot);
		AssociativeOtherEndR_AOTHPropertySource ps = new AssociativeOtherEndR_AOTHPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsAssociatedOtherSide_AssociativeOtherEnd.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOtherSide_AssociativeOtherEnd[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOtherSide_AssociativeOtherEnd[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOtherSide_AssociativeOtherEnd[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsAssociatedOtherSide_AssociativeOtherEnd[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsLink_AssociativeProperties() throws Exception {
		ClassAsLink_c inst = ClassAsLink_c.ClassAsLinkInstance(modelRoot);
		AssociativeR_ASSRPropertySource ps = new AssociativeR_ASSRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsLink_Associative.length; ++i) {
			assertEquals(PropertiesViewTestData.ClassAsLink_Associative[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.ClassAsLink_Associative[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.ClassAsLink_Associative[i][2],
					pd_set[i].getDisplayName());
			assertEquals(PropertiesViewTestData.ClassAsLink_Associative[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsSupertype_SupertypeProperties() throws Exception {
		ClassAsSupertype_c inst = ClassAsSupertype_c
				.ClassAsSupertypeInstance(modelRoot);
		SupertypeR_SUPERPropertySource ps = new SupertypeR_SUPERPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsSupertype_Supertype.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsSupertype_Supertype[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsSupertype_Supertype[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsSupertype_Supertype[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsSupertype_Supertype[i][3], ps
							.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsSubtype_SubtypeProperties() throws Exception {
		ClassAsSubtype_c inst = ClassAsSubtype_c
				.ClassAsSubtypeInstance(modelRoot);
		SubtypeR_SUBPropertySource ps = new SubtypeR_SUBPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsSubtype_Subtype.length; ++i) {
			assertEquals(PropertiesViewTestData.ClassAsSubtype_Subtype[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.ClassAsSubtype_Subtype[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.ClassAsSubtype_Subtype[i][2],
					pd_set[i].getDisplayName());
			assertEquals(PropertiesViewTestData.ClassAsSubtype_Subtype[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsDerivedOneSide_DerivedOneEndProperties()
			throws Exception {
		ClassAsDerivedOneSide_c inst = ClassAsDerivedOneSide_c
				.ClassAsDerivedOneSideInstance(modelRoot);
		DerivedOneEndR_CONEPropertySource ps = new DerivedOneEndR_CONEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsDerivedOneSide_DerivedOneEnd.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOneSide_DerivedOneEnd[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOneSide_DerivedOneEnd[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOneSide_DerivedOneEnd[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOneSide_DerivedOneEnd[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testClassAsDerivedOtherSide_DerivedOtherEndProperties()
			throws Exception {
		ClassAsDerivedOtherSide_c inst = ClassAsDerivedOtherSide_c
				.ClassAsDerivedOtherSideInstance(modelRoot);
		DerivedOtherEndR_COTHPropertySource ps = new DerivedOtherEndR_COTHPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassAsDerivedOtherSide_DerivedOtherEnd.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOtherSide_DerivedOtherEnd[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOtherSide_DerivedOtherEnd[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOtherSide_DerivedOtherEnd[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ClassAsDerivedOtherSide_DerivedOtherEnd[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testAction_ActionProperties() throws Exception {
		Action_c inst = Action_c.ActionInstance(modelRoot);
		ActionSM_ACTPropertySource ps = new ActionSM_ACTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Action_Action.length; ++i) {
			assertEquals(PropertiesViewTestData.Action_Action[i][0], pd_set[i]
					.getClass().getName());
			assertEquals(PropertiesViewTestData.Action_Action[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Action_Action[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Action_Action[i][1].equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else if (PropertiesViewTestData.Action_Action[i][1]
					.equals("Action_Semantics")) {
				assertEquals(inst.getAction_semantics().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(PropertiesViewTestData.Action_Action[i][3], ps
						.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testEventIgnored_EventIgnoredProperties() throws Exception {
		EventIgnored_c inst = EventIgnored_c.EventIgnoredInstance(modelRoot);
		EventIgnoredSM_EIGNPropertySource ps = new EventIgnoredSM_EIGNPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.EventIgnored_EventIgnored.length; ++i) {
			assertEquals(
					PropertiesViewTestData.EventIgnored_EventIgnored[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.EventIgnored_EventIgnored[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.EventIgnored_EventIgnored[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.EventIgnored_EventIgnored[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.EventIgnored_EventIgnored[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testCantHappen_EventCantHappenProperties() throws Exception {
		CantHappen_c inst = CantHappen_c.CantHappenInstance(modelRoot);
		EventCantHappenSM_CHPropertySource ps = new EventCantHappenSM_CHPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.CantHappen_EventCantHappen.length; ++i) {
			assertEquals(
					PropertiesViewTestData.CantHappen_EventCantHappen[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.CantHappen_EventCantHappen[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.CantHappen_EventCantHappen[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.CantHappen_EventCantHappen[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.CantHappen_EventCantHappen[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testUserDataType_UserDefinedDataTypeProperties()
			throws Exception {
		UserDataType_c inst = UserDataType_c.UserDataTypeInstance(Ooaofooa
				.getDefaultInstance());
		UserDefinedDataTypeS_UDTPropertySource ps = new UserDefinedDataTypeS_UDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.UserDataType_UserDefinedDataType.length; ++i) {
			assertEquals(
					PropertiesViewTestData.UserDataType_UserDefinedDataType[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.UserDataType_UserDefinedDataType[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.UserDataType_UserDefinedDataType[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.UserDataType_UserDefinedDataType[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testCoreDataType_CoreDataTypeProperties() throws Exception {
		CoreDataType_c inst = CoreDataType_c.CoreDataTypeInstance(Ooaofooa
				.getDefaultInstance());
		CoreDataTypeS_CDTPropertySource ps = new CoreDataTypeS_CDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.CoreDataType_CoreDataType.length; ++i) {
			assertEquals(
					PropertiesViewTestData.CoreDataType_CoreDataType[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.CoreDataType_CoreDataType[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.CoreDataType_CoreDataType[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.CoreDataType_CoreDataType[i][3], ps
							.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testEnumerationDataType_EnumerationProperties()
			throws Exception {
		EnumerationDataType_c inst = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		EnumerationS_EDTPropertySource ps = new EnumerationS_EDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.EnumerationDataType_Enumeration.length; ++i) {
			assertEquals(
					PropertiesViewTestData.EnumerationDataType_Enumeration[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.EnumerationDataType_Enumeration[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.EnumerationDataType_Enumeration[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.EnumerationDataType_Enumeration[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testDerivedAssociation_DerivedAssociationProperties()
			throws Exception {
		DerivedAssociation_c inst = DerivedAssociation_c
				.DerivedAssociationInstance(modelRoot);
		DerivedAssociationR_COMPPropertySource ps = new DerivedAssociationR_COMPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.DerivedAssociation_DerivedAssociation.length; ++i) {
			assertEquals(
					PropertiesViewTestData.DerivedAssociation_DerivedAssociation[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.DerivedAssociation_DerivedAssociation[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.DerivedAssociation_DerivedAssociation[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.DerivedAssociation_DerivedAssociation[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testReferentialAttribute_ReferentialAttributeProperties()
			throws Exception {
		ReferentialAttribute_c inst = ReferentialAttribute_c
				.ReferentialAttributeInstance(modelRoot);
		ReferentialAttributeO_RATTRPropertySource ps = new ReferentialAttributeO_RATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ReferentialAttribute_ReferentialAttribute.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ReferentialAttribute_ReferentialAttribute[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ReferentialAttribute_ReferentialAttribute[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ReferentialAttribute_ReferentialAttribute[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ReferentialAttribute_ReferentialAttribute[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testNonLocalEvent_InheritedEventProperties() throws Exception {
		NonLocalEvent_c inst = NonLocalEvent_c.NonLocalEventInstance(modelRoot);
		InheritedEventSM_NLEVTPropertySource ps = new InheritedEventSM_NLEVTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.NonLocalEvent_InheritedEvent.length; ++i) {
			assertEquals(
					PropertiesViewTestData.NonLocalEvent_InheritedEvent[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.NonLocalEvent_InheritedEvent[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.NonLocalEvent_InheritedEvent[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.NonLocalEvent_InheritedEvent[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testExternalEntityEventData_ExternalEntityEventDataProperties()
			throws Exception {
		ExternalEntityEventData_c inst = ExternalEntityEventData_c
				.ExternalEntityEventDataInstance(modelRoot);
		ExternalEntityEventDataS_EEEDTPropertySource ps = new ExternalEntityEventDataS_EEEDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ExternalEntityEventData_ExternalEntityEventData.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ExternalEntityEventData_ExternalEntityEventData[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ExternalEntityEventData_ExternalEntityEventData[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ExternalEntityEventData_ExternalEntityEventData[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ExternalEntityEventData_ExternalEntityEventData[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testInstanceAttributeValue_FormalInstanceAttributeValuesProperties()
			throws Exception {
		InstanceAttributeValue_c inst = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		FormalInstanceAttributeValuesSQ_AVPropertySource ps = new FormalInstanceAttributeValuesSQ_AVPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InstanceAttributeValue_FormalInstanceAttributeValues.length; ++i) {
			assertEquals(
					PropertiesViewTestData.InstanceAttributeValue_FormalInstanceAttributeValues[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.InstanceAttributeValue_FormalInstanceAttributeValues[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.InstanceAttributeValue_FormalInstanceAttributeValues[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.InstanceAttributeValue_FormalInstanceAttributeValues[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.InstanceAttributeValue_FormalInstanceAttributeValues[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testExternalEntityParticipant_ImportedExternalEntitiesProperties()
			throws Exception {
		ExternalEntityParticipant_c inst = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		ImportedExternalEntitiesSQ_EEPPropertySource ps = new ImportedExternalEntitiesSQ_EEPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ExternalEntityParticipant_ImportedExternalEntities.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ExternalEntityParticipant_ImportedExternalEntities[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ExternalEntityParticipant_ImportedExternalEntities[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ExternalEntityParticipant_ImportedExternalEntities[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ExternalEntityParticipant_ImportedExternalEntities[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ExternalEntityParticipant_ImportedExternalEntities[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testLifespan_LifespansProperties() throws Exception {
		Lifespan_c inst = Lifespan_c.LifespanInstance(modelRoot);
		LifespansSQ_LSPropertySource ps = new LifespansSQ_LSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Lifespan_Lifespans.length; ++i) {
			assertEquals(PropertiesViewTestData.Lifespan_Lifespans[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Lifespan_Lifespans[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Lifespan_Lifespans[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Lifespan_Lifespans[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(PropertiesViewTestData.Lifespan_Lifespans[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testClassParticipantAttribute_InformalAttributesProperties()
			throws Exception {
		ClassParticipantAttribute_c inst = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstance(modelRoot);
		InformalAttributesSQ_CPAPropertySource ps = new InformalAttributesSQ_CPAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ClassParticipantAttribute_InformalAttributes.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ClassParticipantAttribute_InformalAttributes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ClassParticipantAttribute_InformalAttributes[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ClassParticipantAttribute_InformalAttributes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ClassParticipantAttribute_InformalAttributes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ClassParticipantAttribute_InformalAttributes[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testTimingMark_TimingMarksProperties() throws Exception {
		TimingMark_c inst = TimingMark_c.TimingMarkInstance(modelRoot);
		TimingMarksSQ_TMPropertySource ps = new TimingMarksSQ_TMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.TimingMark_TimingMarks.length; ++i) {
			assertEquals(PropertiesViewTestData.TimingMark_TimingMarks[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.TimingMark_TimingMarks[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.TimingMark_TimingMarks[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.TimingMark_TimingMarks[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.TimingMark_TimingMarks[i][3], ps
								.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testTimeSpan_TimeSpansProperties() throws Exception {
		TimeSpan_c inst = TimeSpan_c.TimeSpanInstance(modelRoot);
		TimeSpansSQ_TSPropertySource ps = new TimeSpansSQ_TSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.TimeSpan_TimeSpans.length; ++i) {
			assertEquals(PropertiesViewTestData.TimeSpan_TimeSpans[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.TimeSpan_TimeSpans[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.TimeSpan_TimeSpans[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.TimeSpan_TimeSpans[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(PropertiesViewTestData.TimeSpan_TimeSpans[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testSynchronousMessage_SynchronousMessagesProperties()
			throws Exception {
		SynchronousMessage_c inst = SynchronousMessage_c
				.SynchronousMessageInstance(modelRoot);
		SynchronousMessagesMSG_SMPropertySource ps = new SynchronousMessagesMSG_SMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.SynchronousMessage_SynchronousMessages.length; ++i) {
			assertEquals(
					PropertiesViewTestData.SynchronousMessage_SynchronousMessages[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.SynchronousMessage_SynchronousMessages[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.SynchronousMessage_SynchronousMessages[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.SynchronousMessage_SynchronousMessages[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.SynchronousMessage_SynchronousMessages[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testAsynchronousMessage_AsynchronousMessagesProperties()
			throws Exception {
		AsynchronousMessage_c inst = AsynchronousMessage_c
				.AsynchronousMessageInstance(modelRoot);
		AsynchronousMessagesMSG_AMPropertySource ps = new AsynchronousMessagesMSG_AMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.AsynchronousMessage_AsynchronousMessages.length; ++i) {
			assertEquals(
					PropertiesViewTestData.AsynchronousMessage_AsynchronousMessages[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.AsynchronousMessage_AsynchronousMessages[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.AsynchronousMessage_AsynchronousMessages[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.AsynchronousMessage_AsynchronousMessages[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.AsynchronousMessage_AsynchronousMessages[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testMessageArgument_InformalMessageArgumentsProperties()
			throws Exception {
		MessageArgument_c inst = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		InformalMessageArgumentsMSG_APropertySource ps = new InformalMessageArgumentsMSG_APropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.MessageArgument_InformalMessageArguments.length; ++i) {
			assertEquals(
					PropertiesViewTestData.MessageArgument_InformalMessageArguments[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.MessageArgument_InformalMessageArguments[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.MessageArgument_InformalMessageArguments[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.MessageArgument_InformalMessageArguments[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.MessageArgument_InformalMessageArguments[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testMessageArgument_MessageArgumentsProperties()
			throws Exception {
		MessageArgument_c inst = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		MessageArgumentsMSG_APropertySource ps = new MessageArgumentsMSG_APropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.MessageArgument_MessageArguments.length; ++i) {
			assertEquals(
					PropertiesViewTestData.MessageArgument_MessageArguments[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.MessageArgument_MessageArguments[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.MessageArgument_MessageArguments[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.MessageArgument_MessageArguments[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.MessageArgument_MessageArguments[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testInstanceAttributeValue_InformalInstanceAttributeValuesProperties()
			throws Exception {
		InstanceAttributeValue_c inst = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		InformalInstanceAttributeValuesSQ_AVPropertySource ps = new InformalInstanceAttributeValuesSQ_AVPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InstanceAttributeValue_InformalInstanceAttributeValues.length; ++i) {
			assertEquals(
					PropertiesViewTestData.InstanceAttributeValue_InformalInstanceAttributeValues[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.InstanceAttributeValue_InformalInstanceAttributeValues[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.InstanceAttributeValue_InformalInstanceAttributeValues[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.InstanceAttributeValue_InformalInstanceAttributeValues[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.InstanceAttributeValue_InformalInstanceAttributeValues[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testActorParticipant_ActorsProperties() throws Exception {
		ActorParticipant_c inst = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		ActorsSQ_APPropertySource ps = new ActorsSQ_APPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ActorParticipant_Actors.length; ++i) {
			assertEquals(PropertiesViewTestData.ActorParticipant_Actors[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.ActorParticipant_Actors[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.ActorParticipant_Actors[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ActorParticipant_Actors[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ActorParticipant_Actors[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testReturnMessage_ReturnMessagesProperties() throws Exception {
		ReturnMessage_c inst = ReturnMessage_c.ReturnMessageInstance(modelRoot);
		ReturnMessagesMSG_RPropertySource ps = new ReturnMessagesMSG_RPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ReturnMessage_ReturnMessages.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ReturnMessage_ReturnMessages[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ReturnMessage_ReturnMessages[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ReturnMessage_ReturnMessages[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ReturnMessage_ReturnMessages[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ReturnMessage_ReturnMessages[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testCommunicationLink_CommunicationLinksProperties()
			throws Exception {
		CommunicationLink_c inst = CommunicationLink_c
				.CommunicationLinkInstance(modelRoot);
		CommunicationLinksCOMM_LNKPropertySource ps = new CommunicationLinksCOMM_LNKPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.CommunicationLink_CommunicationLinks.length; ++i) {
			assertEquals(
					PropertiesViewTestData.CommunicationLink_CommunicationLinks[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.CommunicationLink_CommunicationLinks[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.CommunicationLink_CommunicationLinks[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.CommunicationLink_CommunicationLinks[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.CommunicationLink_CommunicationLinks[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testUseCaseParticipant_UseCasesProperties() throws Exception {
		UseCaseParticipant_c inst = UseCaseParticipant_c
				.UseCaseParticipantInstance(modelRoot);
		UseCasesIA_UCPPropertySource ps = new UseCasesIA_UCPPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.UseCaseParticipant_UseCases.length; ++i) {
			assertEquals(
					PropertiesViewTestData.UseCaseParticipant_UseCases[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.UseCaseParticipant_UseCases[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.UseCaseParticipant_UseCases[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.UseCaseParticipant_UseCases[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.UseCaseParticipant_UseCases[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testBinaryAssociation_UseCaseAssociationsProperties()
			throws Exception {
		BinaryAssociation_c inst = BinaryAssociation_c
				.BinaryAssociationInstance(modelRoot);
		UseCaseAssociationsUC_BAPropertySource ps = new UseCaseAssociationsUC_BAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.BinaryAssociation_UseCaseAssociations.length; ++i) {
			assertEquals(
					PropertiesViewTestData.BinaryAssociation_UseCaseAssociations[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.BinaryAssociation_UseCaseAssociations[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.BinaryAssociation_UseCaseAssociations[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.BinaryAssociation_UseCaseAssociations[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.BinaryAssociation_UseCaseAssociations[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testGeneralization_UseCaseGeneralizationsProperties()
			throws Exception {
		Generalization_c inst = Generalization_c
				.GeneralizationInstance(modelRoot);
		UseCaseGeneralizationsUC_GPropertySource ps = new UseCaseGeneralizationsUC_GPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Generalization_UseCaseGeneralizations.length; ++i) {
			assertEquals(
					PropertiesViewTestData.Generalization_UseCaseGeneralizations[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.Generalization_UseCaseGeneralizations[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.Generalization_UseCaseGeneralizations[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Generalization_UseCaseGeneralizations[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.Generalization_UseCaseGeneralizations[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testInclude_UseCaseIncludesProperties() throws Exception {
		Include_c inst = Include_c.IncludeInstance(modelRoot);
		UseCaseIncludesUC_IPropertySource ps = new UseCaseIncludesUC_IPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Include_UseCaseIncludes.length; ++i) {
			assertEquals(PropertiesViewTestData.Include_UseCaseIncludes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Include_UseCaseIncludes[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Include_UseCaseIncludes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Include_UseCaseIncludes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.Include_UseCaseIncludes[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testExtend_UseCaseExtendsProperties() throws Exception {
		Extend_c inst = Extend_c.ExtendInstance(modelRoot);
		UseCaseExtendsUC_EPropertySource ps = new UseCaseExtendsUC_EPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Extend_UseCaseExtends.length; ++i) {
			assertEquals(PropertiesViewTestData.Extend_UseCaseExtends[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Extend_UseCaseExtends[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Extend_UseCaseExtends[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.Extend_UseCaseExtends[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.Extend_UseCaseExtends[i][3], ps
								.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testForkJoinNode_ForkJoinsProperties() throws Exception {
		ForkJoinNode_c inst = ForkJoinNode_c.ForkJoinNodeInstance(modelRoot);
		ForkJoinsA_FJPropertySource ps = new ForkJoinsA_FJPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ForkJoinNode_ForkJoins.length; ++i) {
			assertEquals(PropertiesViewTestData.ForkJoinNode_ForkJoins[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.ForkJoinNode_ForkJoins[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.ForkJoinNode_ForkJoins[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ForkJoinNode_ForkJoins[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ForkJoinNode_ForkJoins[i][3], ps
								.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testInitialNode_InitialNodesProperties() throws Exception {
		InitialNode_c inst = InitialNode_c.InitialNodeInstance(modelRoot);
		InitialNodesA_INIPropertySource ps = new InitialNodesA_INIPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InitialNode_InitialNodes.length; ++i) {
			assertEquals(PropertiesViewTestData.InitialNode_InitialNodes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.InitialNode_InitialNodes[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.InitialNode_InitialNodes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.InitialNode_InitialNodes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.InitialNode_InitialNodes[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testActivityEdge_ActivityEdgesProperties() throws Exception {
		ActivityEdge_c inst = ActivityEdge_c.ActivityEdgeInstance(modelRoot);
		ActivityEdgesA_EPropertySource ps = new ActivityEdgesA_EPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ActivityEdge_ActivityEdges.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ActivityEdge_ActivityEdges[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ActivityEdge_ActivityEdges[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ActivityEdge_ActivityEdges[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ActivityEdge_ActivityEdges[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ActivityEdge_ActivityEdges[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testActivityFinalNode_ActivityFinalNodesProperties()
			throws Exception {
		ActivityFinalNode_c inst = ActivityFinalNode_c
				.ActivityFinalNodeInstance(modelRoot);
		ActivityFinalNodesA_AFPropertySource ps = new ActivityFinalNodesA_AFPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ActivityFinalNode_ActivityFinalNodes.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ActivityFinalNode_ActivityFinalNodes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ActivityFinalNode_ActivityFinalNodes[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ActivityFinalNode_ActivityFinalNodes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ActivityFinalNode_ActivityFinalNodes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ActivityFinalNode_ActivityFinalNodes[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testFlowFinalNode_FlowFinalNodesProperties() throws Exception {
		FlowFinalNode_c inst = FlowFinalNode_c.FlowFinalNodeInstance(modelRoot);
		FlowFinalNodesA_FFPropertySource ps = new FlowFinalNodesA_FFPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.FlowFinalNode_FlowFinalNodes.length; ++i) {
			assertEquals(
					PropertiesViewTestData.FlowFinalNode_FlowFinalNodes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.FlowFinalNode_FlowFinalNodes[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.FlowFinalNode_FlowFinalNodes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.FlowFinalNode_FlowFinalNodes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.FlowFinalNode_FlowFinalNodes[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testActivityDiagramAction_ActivityDiagramActionsProperties()
			throws Exception {
		ActivityDiagramAction_c inst = ActivityDiagramAction_c
				.ActivityDiagramActionInstance(modelRoot);
		ActivityDiagramActionsA_GAPropertySource ps = new ActivityDiagramActionsA_GAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ActivityDiagramAction_ActivityDiagramActions.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ActivityDiagramAction_ActivityDiagramActions[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ActivityDiagramAction_ActivityDiagramActions[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ActivityDiagramAction_ActivityDiagramActions[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ActivityDiagramAction_ActivityDiagramActions[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ActivityDiagramAction_ActivityDiagramActions[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testDecisionMergeNode_DecisionMergeNodesProperties()
			throws Exception {
		DecisionMergeNode_c inst = DecisionMergeNode_c
				.DecisionMergeNodeInstance(modelRoot);
		DecisionMergeNodesA_DMPropertySource ps = new DecisionMergeNodesA_DMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.DecisionMergeNode_DecisionMergeNodes.length; ++i) {
			assertEquals(
					PropertiesViewTestData.DecisionMergeNode_DecisionMergeNodes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.DecisionMergeNode_DecisionMergeNodes[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.DecisionMergeNode_DecisionMergeNodes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.DecisionMergeNode_DecisionMergeNodes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.DecisionMergeNode_DecisionMergeNodes[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testObjectNode_ObjectNodesProperties() throws Exception {
		ObjectNode_c inst = ObjectNode_c.ObjectNodeInstance(modelRoot);
		ObjectNodesA_OBJPropertySource ps = new ObjectNodesA_OBJPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ObjectNode_ObjectNodes.length; ++i) {
			assertEquals(PropertiesViewTestData.ObjectNode_ObjectNodes[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.ObjectNode_ObjectNodes[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.ObjectNode_ObjectNodes[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ObjectNode_ObjectNodes[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ObjectNode_ObjectNodes[i][3], ps
								.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testAcceptEventAction_AcceptEventActionsProperties()
			throws Exception {
		AcceptEventAction_c inst = AcceptEventAction_c
				.AcceptEventActionInstance(modelRoot);
		AcceptEventActionsA_AEAPropertySource ps = new AcceptEventActionsA_AEAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.AcceptEventAction_AcceptEventActions.length; ++i) {
			assertEquals(
					PropertiesViewTestData.AcceptEventAction_AcceptEventActions[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.AcceptEventAction_AcceptEventActions[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.AcceptEventAction_AcceptEventActions[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.AcceptEventAction_AcceptEventActions[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.AcceptEventAction_AcceptEventActions[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testSendSignal_SendSignalActionsProperties() throws Exception {
		SendSignal_c inst = SendSignal_c.SendSignalInstance(modelRoot);
		SendSignalActionsA_SSPropertySource ps = new SendSignalActionsA_SSPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.SendSignal_SendSignalActions.length; ++i) {
			assertEquals(
					PropertiesViewTestData.SendSignal_SendSignalActions[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.SendSignal_SendSignalActions[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.SendSignal_SendSignalActions[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.SendSignal_SendSignalActions[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.SendSignal_SendSignalActions[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testActivityPartition_ActivityPartitionsProperties()
			throws Exception {
		ActivityPartition_c inst = ActivityPartition_c
				.ActivityPartitionInstance(modelRoot);
		ActivityPartitionsA_APPropertySource ps = new ActivityPartitionsA_APPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ActivityPartition_ActivityPartitions.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ActivityPartition_ActivityPartitions[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ActivityPartition_ActivityPartitions[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ActivityPartition_ActivityPartitions[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ActivityPartition_ActivityPartitions[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ActivityPartition_ActivityPartitions[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testAcceptTimeEventAction_AcceptTimeEventActionsProperties()
			throws Exception {
		AcceptTimeEventAction_c inst = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstance(modelRoot);
		AcceptTimeEventActionsA_ATEPropertySource ps = new AcceptTimeEventActionsA_ATEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.AcceptTimeEventAction_AcceptTimeEventActions.length; ++i) {
			assertEquals(
					PropertiesViewTestData.AcceptTimeEventAction_AcceptTimeEventActions[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.AcceptTimeEventAction_AcceptTimeEventActions[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.AcceptTimeEventAction_AcceptTimeEventActions[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.AcceptTimeEventAction_AcceptTimeEventActions[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.AcceptTimeEventAction_AcceptTimeEventActions[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testStructuredDataType_StructuredDataTypeProperties()
			throws Exception {
		StructuredDataType_c inst = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		StructuredDataTypeS_SDTPropertySource ps = new StructuredDataTypeS_SDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.StructuredDataType_StructuredDataType.length; ++i) {
			assertEquals(
					PropertiesViewTestData.StructuredDataType_StructuredDataType[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.StructuredDataType_StructuredDataType[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.StructuredDataType_StructuredDataType[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.StructuredDataType_StructuredDataType[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testStructureMember_StructureMemberProperties()
			throws Exception {
		StructureMember_c inst = StructureMember_c
				.StructureMemberInstance(modelRoot);
		StructureMemberS_MBRPropertySource ps = new StructureMemberS_MBRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.StructureMember_StructureMember.length; ++i) {
			assertEquals(
					PropertiesViewTestData.StructureMember_StructureMember[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.StructureMember_StructureMember[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.StructureMember_StructureMember[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.StructureMember_StructureMember[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.StructureMember_StructureMember[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testTransition_TransitionsProperties() throws Exception {
		Transition_c inst = Transition_c.TransitionInstance(modelRoot);
		TransitionsSM_TXNPropertySource ps = new TransitionsSM_TXNPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.Transition_Transitions.length; ++i) {
			assertEquals(PropertiesViewTestData.Transition_Transitions[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.Transition_Transitions[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.Transition_Transitions[i][2],
					pd_set[i].getDisplayName());
			assertEquals(PropertiesViewTestData.Transition_Transitions[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testComponentParticipant_ComponentParticipantsProperties()
			throws Exception {
		ComponentParticipant_c inst = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		ComponentParticipantsSQ_COPPropertySource ps = new ComponentParticipantsSQ_COPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ComponentParticipant_ComponentParticipants.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ComponentParticipant_ComponentParticipants[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ComponentParticipant_ComponentParticipants[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ComponentParticipant_ComponentParticipants[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ComponentParticipant_ComponentParticipants[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ComponentParticipant_ComponentParticipants[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testConstantSpecification_ConstantSpecificationProperties()
			throws Exception {
		ConstantSpecification_c inst = ConstantSpecification_c
				.ConstantSpecificationInstance(modelRoot);
		ConstantSpecificationCNST_CSPPropertySource ps = new ConstantSpecificationCNST_CSPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ConstantSpecification_ConstantSpecification.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ConstantSpecification_ConstantSpecification[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ConstantSpecification_ConstantSpecification[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ConstantSpecification_ConstantSpecification[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.ConstantSpecification_ConstantSpecification[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.ConstantSpecification_ConstantSpecification[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testLiteralSymbolicConstant_LiteralSymbolicConstantProperties()
			throws Exception {
		LiteralSymbolicConstant_c inst = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		LiteralSymbolicConstantCNST_LSCPropertySource ps = new LiteralSymbolicConstantCNST_LSCPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.LiteralSymbolicConstant_LiteralSymbolicConstant.length; ++i) {
			assertEquals(
					PropertiesViewTestData.LiteralSymbolicConstant_LiteralSymbolicConstant[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.LiteralSymbolicConstant_LiteralSymbolicConstant[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.LiteralSymbolicConstant_LiteralSymbolicConstant[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.LiteralSymbolicConstant_LiteralSymbolicConstant[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testSymbolicConstant_SymbolicConstantProperties()
			throws Exception {
		SymbolicConstant_c inst = SymbolicConstant_c
				.SymbolicConstantInstance(modelRoot);
		SymbolicConstantCNST_SYCPropertySource ps = new SymbolicConstantCNST_SYCPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.SymbolicConstant_SymbolicConstant.length; ++i) {
			assertEquals(
					PropertiesViewTestData.SymbolicConstant_SymbolicConstant[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.SymbolicConstant_SymbolicConstant[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.SymbolicConstant_SymbolicConstant[i][2],
					pd_set[i].getDisplayName());
			if (PropertiesViewTestData.SymbolicConstant_SymbolicConstant[i][1]
					.equals("Descrip")) {
				assertEquals(inst.getDescrip().replace('\n', '/'),
						ps.getPropertyValue(pd_set[i].getId()));
			} else {
				assertEquals(
						PropertiesViewTestData.SymbolicConstant_SymbolicConstant[i][3],
						ps.getPropertyValue(pd_set[i].getId()).toString());
			}
		}
	}
	public void testNewBaseAttribute_NonDerivedAttributeProperties()
			throws Exception {
		NewBaseAttribute_c inst = NewBaseAttribute_c
				.NewBaseAttributeInstance(modelRoot);
		NonDerivedAttributeO_NBATTRPropertySource ps = new NonDerivedAttributeO_NBATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.NewBaseAttribute_NonDerivedAttribute.length; ++i) {
			assertEquals(
					PropertiesViewTestData.NewBaseAttribute_NonDerivedAttribute[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.NewBaseAttribute_NonDerivedAttribute[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.NewBaseAttribute_NonDerivedAttribute[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.NewBaseAttribute_NonDerivedAttribute[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testPolymorphicEvent_PolymorphicEventProperties()
			throws Exception {
		PolymorphicEvent_c inst = PolymorphicEvent_c
				.PolymorphicEventInstance(modelRoot);
		PolymorphicEventSM_PEVTPropertySource ps = new PolymorphicEventSM_PEVTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.PolymorphicEvent_PolymorphicEvent.length; ++i) {
			assertEquals(
					PropertiesViewTestData.PolymorphicEvent_PolymorphicEvent[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.PolymorphicEvent_PolymorphicEvent[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.PolymorphicEvent_PolymorphicEvent[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.PolymorphicEvent_PolymorphicEvent[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testReferredToIdentifierAttribute_ReferencedIdentifierProperties()
			throws Exception {
		ReferredToIdentifierAttribute_c inst = ReferredToIdentifierAttribute_c
				.ReferredToIdentifierAttributeInstance(modelRoot);
		ReferencedIdentifierO_RTIDAPropertySource ps = new ReferencedIdentifierO_RTIDAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.ReferredToIdentifierAttribute_ReferencedIdentifier.length; ++i) {
			assertEquals(
					PropertiesViewTestData.ReferredToIdentifierAttribute_ReferencedIdentifier[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.ReferredToIdentifierAttribute_ReferencedIdentifier[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.ReferredToIdentifierAttribute_ReferencedIdentifier[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.ReferredToIdentifierAttribute_ReferencedIdentifier[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testSEMEvent_EventProperties() throws Exception {
		SemEvent_c inst = SemEvent_c.SemEventInstance(modelRoot);
		EventSM_SEVTPropertySource ps = new EventSM_SEVTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.SEMEvent_Event.length; ++i) {
			assertEquals(PropertiesViewTestData.SEMEvent_Event[i][0], pd_set[i]
					.getClass().getName());
			assertEquals(PropertiesViewTestData.SEMEvent_Event[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.SEMEvent_Event[i][2],
					pd_set[i].getDisplayName());
			assertEquals(PropertiesViewTestData.SEMEvent_Event[i][3], ps
					.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testInformalSynchronousMessage_InformalMessageProperties()
			throws Exception {
		InformalSynchronousMessage_c inst = InformalSynchronousMessage_c
				.InformalSynchronousMessageInstance(modelRoot);
		InformalMessageMSG_ISMPropertySource ps = new InformalMessageMSG_ISMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InformalSynchronousMessage_InformalMessage.length; ++i) {
			assertEquals(
					PropertiesViewTestData.InformalSynchronousMessage_InformalMessage[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.InformalSynchronousMessage_InformalMessage[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.InformalSynchronousMessage_InformalMessage[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.InformalSynchronousMessage_InformalMessage[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testInformalAsynchronousMessage_InformalMessageProperties()
			throws Exception {
		InformalAsynchronousMessage_c inst = InformalAsynchronousMessage_c
				.InformalAsynchronousMessageInstance(modelRoot);
		InformalMessageMSG_IAMPropertySource ps = new InformalMessageMSG_IAMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InformalAsynchronousMessage_InformalMessage.length; ++i) {
			assertEquals(
					PropertiesViewTestData.InformalAsynchronousMessage_InformalMessage[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.InformalAsynchronousMessage_InformalMessage[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.InformalAsynchronousMessage_InformalMessage[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.InformalAsynchronousMessage_InformalMessage[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testFunctionMessage_FormalFunctionProperties() throws Exception {
		FunctionMessage_c inst = FunctionMessage_c
				.FunctionMessageInstance(modelRoot);
		FormalFunctionMSG_FPropertySource ps = new FormalFunctionMSG_FPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.FunctionMessage_FormalFunction.length; ++i) {
			assertEquals(
					PropertiesViewTestData.FunctionMessage_FormalFunction[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.FunctionMessage_FormalFunction[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.FunctionMessage_FormalFunction[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.FunctionMessage_FormalFunction[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testBridgeMessage_FormalBridgeOperationProperties()
			throws Exception {
		BridgeMessage_c inst = BridgeMessage_c.BridgeMessageInstance(modelRoot);
		FormalBridgeOperationMSG_BPropertySource ps = new FormalBridgeOperationMSG_BPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.BridgeMessage_FormalBridgeOperation.length; ++i) {
			assertEquals(
					PropertiesViewTestData.BridgeMessage_FormalBridgeOperation[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.BridgeMessage_FormalBridgeOperation[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.BridgeMessage_FormalBridgeOperation[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.BridgeMessage_FormalBridgeOperation[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testOperationMessage_FormalOperationProperties()
			throws Exception {
		OperationMessage_c inst = OperationMessage_c
				.OperationMessageInstance(modelRoot);
		FormalOperationMSG_OPropertySource ps = new FormalOperationMSG_OPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.OperationMessage_FormalOperation.length; ++i) {
			assertEquals(
					PropertiesViewTestData.OperationMessage_FormalOperation[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.OperationMessage_FormalOperation[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.OperationMessage_FormalOperation[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.OperationMessage_FormalOperation[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testInterfaceOperationMessage_FormalInterfaceOperationProperties()
			throws Exception {
		InterfaceOperationMessage_c inst = InterfaceOperationMessage_c
				.InterfaceOperationMessageInstance(modelRoot);
		FormalInterfaceOperationMSG_IOPPropertySource ps = new FormalInterfaceOperationMSG_IOPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InterfaceOperationMessage_FormalInterfaceOperation.length; ++i) {
			assertEquals(
					PropertiesViewTestData.InterfaceOperationMessage_FormalInterfaceOperation[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.InterfaceOperationMessage_FormalInterfaceOperation[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.InterfaceOperationMessage_FormalInterfaceOperation[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.InterfaceOperationMessage_FormalInterfaceOperation[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testEventMessage_FormalEventProperties() throws Exception {
		EventMessage_c inst = EventMessage_c.EventMessageInstance(modelRoot);
		FormalEventMSG_EPropertySource ps = new FormalEventMSG_EPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.EventMessage_FormalEvent.length; ++i) {
			assertEquals(PropertiesViewTestData.EventMessage_FormalEvent[i][0],
					pd_set[i].getClass().getName());
			assertEquals(PropertiesViewTestData.EventMessage_FormalEvent[i][1],
					pd_set[i].getId());
			assertEquals(PropertiesViewTestData.EventMessage_FormalEvent[i][2],
					pd_set[i].getDisplayName());
			assertEquals(PropertiesViewTestData.EventMessage_FormalEvent[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testSignalMessage_FormalSignalProperties() throws Exception {
		SignalMessage_c inst = SignalMessage_c.SignalMessageInstance(modelRoot);
		FormalSignalMSG_SIGPropertySource ps = new FormalSignalMSG_SIGPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.SignalMessage_FormalSignal.length; ++i) {
			assertEquals(
					PropertiesViewTestData.SignalMessage_FormalSignal[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.SignalMessage_FormalSignal[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.SignalMessage_FormalSignal[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.SignalMessage_FormalSignal[i][3], ps
							.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
	public void testInformalArgument_InformalArgumentProperties()
			throws Exception {
		InformalArgument_c inst = InformalArgument_c
				.InformalArgumentInstance(modelRoot);
		InformalArgumentMSG_IAPropertySource ps = new InformalArgumentMSG_IAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < PropertiesViewTestData.InformalArgument_InformalArgument.length; ++i) {
			assertEquals(
					PropertiesViewTestData.InformalArgument_InformalArgument[i][0],
					pd_set[i].getClass().getName());
			assertEquals(
					PropertiesViewTestData.InformalArgument_InformalArgument[i][1],
					pd_set[i].getId());
			assertEquals(
					PropertiesViewTestData.InformalArgument_InformalArgument[i][2],
					pd_set[i].getDisplayName());
			assertEquals(
					PropertiesViewTestData.InformalArgument_InformalArgument[i][3],
					ps.getPropertyValue(pd_set[i].getId()).toString());
		}
	}
}
