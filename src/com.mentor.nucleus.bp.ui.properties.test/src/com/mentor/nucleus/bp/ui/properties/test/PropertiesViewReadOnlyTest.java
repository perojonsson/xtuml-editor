//======================================================================
//
// File: com/mentor/nucleus/bp/ui/properties/test/PropertiesViewReadOnlyTest.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_readonly_view_test.arc
// Version:      $Revision: 1.11 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for determing the dependency between
// classes for displaying property changes.
//
package com.mentor.nucleus.bp.ui.properties.test;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.views.properties.IPropertyDescriptor;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.core.common.PersistableModelComponent;
import com.mentor.nucleus.bp.ui.properties.*;
import com.mentor.nucleus.bp.test.*;
import com.mentor.nucleus.bp.test.TestUtil.Result1;

public class PropertiesViewReadOnlyTest extends BaseTest {
	public PropertiesViewReadOnlyTest(String name) {
		super(null, name);
	}
	static private boolean firstTime = true;
	public void setUp() throws Exception {
		if (firstTime) {
			PersistableModelComponent domain_pmc = ensureAvailableAndLoaded(
					"testProp", false, false);
			setResourceToReadonly(domain_pmc);
			firstTime = false;
		}
		while (PlatformUI.getWorkbench().getDisplay().readAndDispatch());
	}
	public void testDomain_xtUMLModelProperties() throws Exception {
		Domain_c inst = Domain_c.DomainInstance(modelRoot,
				new ClassQueryInterface_c() {

					public boolean evaluate(Object candidate) {
						if (((Domain_c) candidate).getName().equals("testProp")) {
							return true;
						}
						return false;
					}

				});
		xtUMLModelS_DOMPropertySource ps = new xtUMLModelS_DOMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSubsystem_SubsystemProperties() throws Exception {
		Subsystem_c inst = Subsystem_c.SubsystemInstance(modelRoot);
		SubsystemS_SSPropertySource ps = new SubsystemS_SSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testModelClass_ClassProperties() throws Exception {
		ModelClass_c inst = ModelClass_c.ModelClassInstance(modelRoot);
		ClassO_OBJPropertySource ps = new ClassO_OBJPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testFunctionPackage_FunctionPackageProperties()
			throws Exception {
		FunctionPackage_c inst = FunctionPackage_c
				.FunctionPackageInstance(modelRoot);
		FunctionPackageS_FPKPropertySource ps = new FunctionPackageS_FPKPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testFunction_FunctionProperties() throws Exception {
		Function_c inst = Function_c.FunctionInstance(modelRoot);
		FunctionS_SYNCPropertySource ps = new FunctionS_SYNCPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testFunctionParameter_FunctionParameterProperties()
			throws Exception {
		FunctionParameter_c inst = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		FunctionParameterS_SPARMPropertySource ps = new FunctionParameterS_SPARMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testOperation_OperationProperties() throws Exception {
		Operation_c inst = Operation_c.OperationInstance(modelRoot);
		OperationO_TFRPropertySource ps = new OperationO_TFRPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testOperationParameter_OperationParameterProperties()
			throws Exception {
		OperationParameter_c inst = OperationParameter_c
				.OperationParameterInstance(modelRoot);
		OperationParameterO_TPARMPropertySource ps = new OperationParameterO_TPARMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInstanceStateMachine_InstanceStateChartProperties()
			throws Exception {
		InstanceStateMachine_c inst = InstanceStateMachine_c
				.InstanceStateMachineInstance(modelRoot);
		InstanceStateChartSM_ISMPropertySource ps = new InstanceStateChartSM_ISMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassStateMachine_ClassStateChartProperties()
			throws Exception {
		ClassStateMachine_c inst = ClassStateMachine_c
				.ClassStateMachineInstance(modelRoot);
		ClassStateChartSM_ASMPropertySource ps = new ClassStateChartSM_ASMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testStateMachineState_StateProperties() throws Exception {
		StateMachineState_c inst = StateMachineState_c
				.StateMachineStateInstance(modelRoot);
		StateSM_STATEPropertySource ps = new StateSM_STATEPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testStateMachineEvent_EventProperties() throws Exception {
		StateMachineEvent_c inst = StateMachineEvent_c
				.StateMachineEventInstance(modelRoot);
		EventSM_EVTPropertySource ps = new EventSM_EVTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testStateMachineEventDataItem_EventDataProperties()
			throws Exception {
		StateMachineEventDataItem_c inst = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstance(modelRoot);
		EventDataSM_EVTDIPropertySource ps = new EventDataSM_EVTDIPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAttribute_AttributeProperties() throws Exception {
		Attribute_c inst = Attribute_c.AttributeInstance(modelRoot);
		AttributeO_ATTRPropertySource ps = new AttributeO_ATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testDataType_DataTypeProperties() throws Exception {
		DataType_c inst = DataType_c.DataTypeInstance(modelRoot);
		DataTypeS_DTPropertySource ps = new DataTypeS_DTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testEnumerator_EnumeratorProperties() throws Exception {
		Enumerator_c inst = Enumerator_c.EnumeratorInstance(modelRoot);
		EnumeratorS_ENUMPropertySource ps = new EnumeratorS_ENUMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testExternalEntity_ExternalEntityProperties() throws Exception {
		ExternalEntity_c inst = ExternalEntity_c
				.ExternalEntityInstance(modelRoot);
		ExternalEntityS_EEPropertySource ps = new ExternalEntityS_EEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testBridge_BridgeProperties() throws Exception {
		Bridge_c inst = Bridge_c.BridgeInstance(modelRoot);
		BridgeS_BRGPropertySource ps = new BridgeS_BRGPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testBridgeParameter_BridgeParameterProperties()
			throws Exception {
		BridgeParameter_c inst = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		BridgeParameterS_BPARMPropertySource ps = new BridgeParameterS_BPARMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAssociation_AssociationProperties() throws Exception {
		Association_c inst = Association_c.AssociationInstance(modelRoot);
		AssociationR_RELPropertySource ps = new AssociationR_RELPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testImportedClass_ImportedClassProperties() throws Exception {
		ImportedClass_c inst = ImportedClass_c.ImportedClassInstance(modelRoot);
		ImportedClassO_IOBJPropertySource ps = new ImportedClassO_IOBJPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassIdentifierAttribute_IdentifierProperties()
			throws Exception {
		ClassIdentifierAttribute_c inst = ClassIdentifierAttribute_c
				.ClassIdentifierAttributeInstance(modelRoot);
		IdentifierO_OIDAPropertySource ps = new IdentifierO_OIDAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testDerivedBaseAttribute_DerivedAttributeProperties()
			throws Exception {
		DerivedBaseAttribute_c inst = DerivedBaseAttribute_c
				.DerivedBaseAttributeInstance(modelRoot);
		DerivedAttributeO_DBATTRPropertySource ps = new DerivedAttributeO_DBATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAttributeReferenceinClass_ReferenceProperties()
			throws Exception {
		AttributeReferenceInClass_c inst = AttributeReferenceInClass_c
				.AttributeReferenceInClassInstance(modelRoot);
		ReferenceO_REFPropertySource ps = new ReferenceO_REFPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsSimpleParticipant_AssociationParticipantEndProperties()
			throws Exception {
		ClassAsSimpleParticipant_c inst = ClassAsSimpleParticipant_c
				.ClassAsSimpleParticipantInstance(modelRoot);
		AssociationParticipantEndR_PARTPropertySource ps = new AssociationParticipantEndR_PARTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsSimpleFormalizer_AssociationFormalizerEndProperties()
			throws Exception {
		ClassAsSimpleFormalizer_c inst = ClassAsSimpleFormalizer_c
				.ClassAsSimpleFormalizerInstance(modelRoot);
		AssociationFormalizerEndR_FORMPropertySource ps = new AssociationFormalizerEndR_FORMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsAssociatedOneSide_AssociativeOneEndProperties()
			throws Exception {
		ClassAsAssociatedOneSide_c inst = ClassAsAssociatedOneSide_c
				.ClassAsAssociatedOneSideInstance(modelRoot);
		AssociativeOneEndR_AONEPropertySource ps = new AssociativeOneEndR_AONEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsAssociatedOtherSide_AssociativeOtherEndProperties()
			throws Exception {
		ClassAsAssociatedOtherSide_c inst = ClassAsAssociatedOtherSide_c
				.ClassAsAssociatedOtherSideInstance(modelRoot);
		AssociativeOtherEndR_AOTHPropertySource ps = new AssociativeOtherEndR_AOTHPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsLink_AssociativeProperties() throws Exception {
		ClassAsLink_c inst = ClassAsLink_c.ClassAsLinkInstance(modelRoot);
		AssociativeR_ASSRPropertySource ps = new AssociativeR_ASSRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsSupertype_SupertypeProperties() throws Exception {
		ClassAsSupertype_c inst = ClassAsSupertype_c
				.ClassAsSupertypeInstance(modelRoot);
		SupertypeR_SUPERPropertySource ps = new SupertypeR_SUPERPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsSubtype_SubtypeProperties() throws Exception {
		ClassAsSubtype_c inst = ClassAsSubtype_c
				.ClassAsSubtypeInstance(modelRoot);
		SubtypeR_SUBPropertySource ps = new SubtypeR_SUBPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsDerivedOneSide_DerivedOneEndProperties()
			throws Exception {
		ClassAsDerivedOneSide_c inst = ClassAsDerivedOneSide_c
				.ClassAsDerivedOneSideInstance(modelRoot);
		DerivedOneEndR_CONEPropertySource ps = new DerivedOneEndR_CONEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassAsDerivedOtherSide_DerivedOtherEndProperties()
			throws Exception {
		ClassAsDerivedOtherSide_c inst = ClassAsDerivedOtherSide_c
				.ClassAsDerivedOtherSideInstance(modelRoot);
		DerivedOtherEndR_COTHPropertySource ps = new DerivedOtherEndR_COTHPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAction_ActionProperties() throws Exception {
		Action_c inst = Action_c.ActionInstance(modelRoot);
		ActionSM_ACTPropertySource ps = new ActionSM_ACTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testEventIgnored_EventIgnoredProperties() throws Exception {
		EventIgnored_c inst = EventIgnored_c.EventIgnoredInstance(modelRoot);
		EventIgnoredSM_EIGNPropertySource ps = new EventIgnoredSM_EIGNPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testCantHappen_EventCantHappenProperties() throws Exception {
		CantHappen_c inst = CantHappen_c.CantHappenInstance(modelRoot);
		EventCantHappenSM_CHPropertySource ps = new EventCantHappenSM_CHPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testStateEventMatrixEntry_StateEventMatrixEntryProperties()
			throws Exception {
		StateEventMatrixEntry_c inst = StateEventMatrixEntry_c
				.StateEventMatrixEntryInstance(modelRoot);
		StateEventMatrixEntrySM_SEMEPropertySource ps = new StateEventMatrixEntrySM_SEMEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testDataTypePackage_DataTypePackageProperties()
			throws Exception {
		DataTypePackage_c inst = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		DataTypePackageS_DPKPropertySource ps = new DataTypePackageS_DPKPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testExternalEntityPackage_ExternalEntityPackageProperties()
			throws Exception {
		ExternalEntityPackage_c inst = ExternalEntityPackage_c
				.ExternalEntityPackageInstance(modelRoot);
		ExternalEntityPackageS_EEPKPropertySource ps = new ExternalEntityPackageS_EEPKPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testUserDataType_UserDefinedDataTypeProperties()
			throws Exception {
		UserDataType_c inst = UserDataType_c.UserDataTypeInstance(modelRoot);
		UserDefinedDataTypeS_UDTPropertySource ps = new UserDefinedDataTypeS_UDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testCoreDataType_CoreDataTypeProperties() throws Exception {
		CoreDataType_c inst = CoreDataType_c.CoreDataTypeInstance(modelRoot);
		CoreDataTypeS_CDTPropertySource ps = new CoreDataTypeS_CDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testEnumerationDataType_EnumerationProperties()
			throws Exception {
		EnumerationDataType_c inst = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		EnumerationS_EDTPropertySource ps = new EnumerationS_EDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testDerivedAssociation_DerivedAssociationProperties()
			throws Exception {
		DerivedAssociation_c inst = DerivedAssociation_c
				.DerivedAssociationInstance(modelRoot);
		DerivedAssociationR_COMPPropertySource ps = new DerivedAssociationR_COMPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testReferentialAttribute_ReferentialAttributeProperties()
			throws Exception {
		ReferentialAttribute_c inst = ReferentialAttribute_c
				.ReferentialAttributeInstance(modelRoot);
		ReferentialAttributeO_RATTRPropertySource ps = new ReferentialAttributeO_RATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testNonLocalEvent_InheritedEventProperties() throws Exception {
		NonLocalEvent_c inst = NonLocalEvent_c.NonLocalEventInstance(modelRoot);
		InheritedEventSM_NLEVTPropertySource ps = new InheritedEventSM_NLEVTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testExternalEntityEventData_ExternalEntityEventDataProperties()
			throws Exception {
		ExternalEntityEventData_c inst = ExternalEntityEventData_c
				.ExternalEntityEventDataInstance(modelRoot);
		ExternalEntityEventDataS_EEEDTPropertySource ps = new ExternalEntityEventDataS_EEEDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSequence_SequencesProperties() throws Exception {
		Sequence_c inst = Sequence_c.SequenceInstance(modelRoot);
		SequencesSQ_SPropertySource ps = new SequencesSQ_SPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassInstanceParticipant_InstancesProperties()
			throws Exception {
		ClassInstanceParticipant_c inst = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstance(modelRoot);
		InstancesSQ_CIPPropertySource ps = new InstancesSQ_CIPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInstanceAttributeValue_FormalInstanceAttributeValuesProperties()
			throws Exception {
		InstanceAttributeValue_c inst = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		FormalInstanceAttributeValuesSQ_AVPropertySource ps = new FormalInstanceAttributeValuesSQ_AVPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testExternalEntityParticipant_ImportedExternalEntitiesProperties()
			throws Exception {
		ExternalEntityParticipant_c inst = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		ImportedExternalEntitiesSQ_EEPPropertySource ps = new ImportedExternalEntitiesSQ_EEPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testFunctionPackageParticipant_ImportedFunctionPackagesProperties()
			throws Exception {
		FunctionPackageParticipant_c inst = FunctionPackageParticipant_c
				.FunctionPackageParticipantInstance(modelRoot);
		ImportedFunctionPackagesSQ_FPPPropertySource ps = new ImportedFunctionPackagesSQ_FPPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testPackageParticipant_ImportedPackagesProperties()
			throws Exception {
		PackageParticipant_c inst = PackageParticipant_c
				.PackageParticipantInstance(modelRoot);
		ImportedPackagesSQ_PPPropertySource ps = new ImportedPackagesSQ_PPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassParticipant_ImportedClassesProperties()
			throws Exception {
		ClassParticipant_c inst = ClassParticipant_c
				.ClassParticipantInstance(modelRoot);
		ImportedClassesSQ_CPPropertySource ps = new ImportedClassesSQ_CPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testLifespan_LifespansProperties() throws Exception {
		Lifespan_c inst = Lifespan_c.LifespanInstance(modelRoot);
		LifespansSQ_LSPropertySource ps = new LifespansSQ_LSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testClassParticipantAttribute_InformalAttributesProperties()
			throws Exception {
		ClassParticipantAttribute_c inst = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstance(modelRoot);
		InformalAttributesSQ_CPAPropertySource ps = new InformalAttributesSQ_CPAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testTimingMark_TimingMarksProperties() throws Exception {
		TimingMark_c inst = TimingMark_c.TimingMarkInstance(modelRoot);
		TimingMarksSQ_TMPropertySource ps = new TimingMarksSQ_TMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testTimeSpan_TimeSpansProperties() throws Exception {
		TimeSpan_c inst = TimeSpan_c.TimeSpanInstance(modelRoot);
		TimeSpansSQ_TSPropertySource ps = new TimeSpansSQ_TSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSynchronousMessage_SynchronousMessagesProperties()
			throws Exception {
		SynchronousMessage_c inst = SynchronousMessage_c
				.SynchronousMessageInstance(modelRoot);
		SynchronousMessagesMSG_SMPropertySource ps = new SynchronousMessagesMSG_SMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAsynchronousMessage_AsynchronousMessagesProperties()
			throws Exception {
		AsynchronousMessage_c inst = AsynchronousMessage_c
				.AsynchronousMessageInstance(modelRoot);
		AsynchronousMessagesMSG_AMPropertySource ps = new AsynchronousMessagesMSG_AMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testMessageArgument_InformalMessageArgumentsProperties()
			throws Exception {
		MessageArgument_c inst = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		InformalMessageArgumentsMSG_APropertySource ps = new InformalMessageArgumentsMSG_APropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testMessageArgument_MessageArgumentsProperties()
			throws Exception {
		MessageArgument_c inst = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		MessageArgumentsMSG_APropertySource ps = new MessageArgumentsMSG_APropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInstanceAttributeValue_InformalInstanceAttributeValuesProperties()
			throws Exception {
		InstanceAttributeValue_c inst = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		InformalInstanceAttributeValuesSQ_AVPropertySource ps = new InformalInstanceAttributeValuesSQ_AVPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testActorParticipant_ActorsProperties() throws Exception {
		ActorParticipant_c inst = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		ActorsSQ_APPropertySource ps = new ActorsSQ_APPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testReturnMessage_ReturnMessagesProperties() throws Exception {
		ReturnMessage_c inst = ReturnMessage_c.ReturnMessageInstance(modelRoot);
		ReturnMessagesMSG_RPropertySource ps = new ReturnMessagesMSG_RPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testCommunication_CommunicationsProperties() throws Exception {
		Communication_c inst = Communication_c.CommunicationInstance(modelRoot);
		CommunicationsCOMM_COMMPropertySource ps = new CommunicationsCOMM_COMMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testCommunicationLink_CommunicationLinksProperties()
			throws Exception {
		CommunicationLink_c inst = CommunicationLink_c
				.CommunicationLinkInstance(modelRoot);
		CommunicationLinksCOMM_LNKPropertySource ps = new CommunicationLinksCOMM_LNKPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testUseCaseDiagram_UseCaseDiagramsProperties() throws Exception {
		UseCaseDiagram_c inst = UseCaseDiagram_c
				.UseCaseDiagramInstance(modelRoot);
		UseCaseDiagramsUC_UCCPropertySource ps = new UseCaseDiagramsUC_UCCPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testUseCaseParticipant_UseCasesProperties() throws Exception {
		UseCaseParticipant_c inst = UseCaseParticipant_c
				.UseCaseParticipantInstance(modelRoot);
		UseCasesIA_UCPPropertySource ps = new UseCasesIA_UCPPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testBinaryAssociation_UseCaseAssociationsProperties()
			throws Exception {
		BinaryAssociation_c inst = BinaryAssociation_c
				.BinaryAssociationInstance(modelRoot);
		UseCaseAssociationsUC_BAPropertySource ps = new UseCaseAssociationsUC_BAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testGeneralization_UseCaseGeneralizationsProperties()
			throws Exception {
		Generalization_c inst = Generalization_c
				.GeneralizationInstance(modelRoot);
		UseCaseGeneralizationsUC_GPropertySource ps = new UseCaseGeneralizationsUC_GPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInclude_UseCaseIncludesProperties() throws Exception {
		Include_c inst = Include_c.IncludeInstance(modelRoot);
		UseCaseIncludesUC_IPropertySource ps = new UseCaseIncludesUC_IPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testExtend_UseCaseExtendsProperties() throws Exception {
		Extend_c inst = Extend_c.ExtendInstance(modelRoot);
		UseCaseExtendsUC_EPropertySource ps = new UseCaseExtendsUC_EPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testActivity_ActivitiesProperties() throws Exception {
		Activity_c inst = Activity_c.ActivityInstance(modelRoot);
		ActivitiesA_APropertySource ps = new ActivitiesA_APropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testForkJoinNode_ForkJoinsProperties() throws Exception {
		ForkJoinNode_c inst = ForkJoinNode_c.ForkJoinNodeInstance(modelRoot);
		ForkJoinsA_FJPropertySource ps = new ForkJoinsA_FJPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInitialNode_InitialNodesProperties() throws Exception {
		InitialNode_c inst = InitialNode_c.InitialNodeInstance(modelRoot);
		InitialNodesA_INIPropertySource ps = new InitialNodesA_INIPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testActivityEdge_ActivityEdgesProperties() throws Exception {
		ActivityEdge_c inst = ActivityEdge_c.ActivityEdgeInstance(modelRoot);
		ActivityEdgesA_EPropertySource ps = new ActivityEdgesA_EPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testActivityFinalNode_ActivityFinalNodesProperties()
			throws Exception {
		ActivityFinalNode_c inst = ActivityFinalNode_c
				.ActivityFinalNodeInstance(modelRoot);
		ActivityFinalNodesA_AFPropertySource ps = new ActivityFinalNodesA_AFPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testFlowFinalNode_FlowFinalNodesProperties() throws Exception {
		FlowFinalNode_c inst = FlowFinalNode_c.FlowFinalNodeInstance(modelRoot);
		FlowFinalNodesA_FFPropertySource ps = new FlowFinalNodesA_FFPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testActivityDiagramAction_ActivityDiagramActionsProperties()
			throws Exception {
		ActivityDiagramAction_c inst = ActivityDiagramAction_c
				.ActivityDiagramActionInstance(modelRoot);
		ActivityDiagramActionsA_GAPropertySource ps = new ActivityDiagramActionsA_GAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testDecisionMergeNode_DecisionMergeNodesProperties()
			throws Exception {
		DecisionMergeNode_c inst = DecisionMergeNode_c
				.DecisionMergeNodeInstance(modelRoot);
		DecisionMergeNodesA_DMPropertySource ps = new DecisionMergeNodesA_DMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testObjectNode_ObjectNodesProperties() throws Exception {
		ObjectNode_c inst = ObjectNode_c.ObjectNodeInstance(modelRoot);
		ObjectNodesA_OBJPropertySource ps = new ObjectNodesA_OBJPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAcceptEventAction_AcceptEventActionsProperties()
			throws Exception {
		AcceptEventAction_c inst = AcceptEventAction_c
				.AcceptEventActionInstance(modelRoot);
		AcceptEventActionsA_AEAPropertySource ps = new AcceptEventActionsA_AEAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSendSignal_SendSignalActionsProperties() throws Exception {
		SendSignal_c inst = SendSignal_c.SendSignalInstance(modelRoot);
		SendSignalActionsA_SSPropertySource ps = new SendSignalActionsA_SSPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testActivityPartition_ActivityPartitionsProperties()
			throws Exception {
		ActivityPartition_c inst = ActivityPartition_c
				.ActivityPartitionInstance(modelRoot);
		ActivityPartitionsA_APPropertySource ps = new ActivityPartitionsA_APPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAcceptTimeEventAction_AcceptTimeEventActionsProperties()
			throws Exception {
		AcceptTimeEventAction_c inst = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstance(modelRoot);
		AcceptTimeEventActionsA_ATEPropertySource ps = new AcceptTimeEventActionsA_ATEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testComponentPackage_ComponentPackagesProperties()
			throws Exception {
		ComponentPackage_c inst = ComponentPackage_c
				.ComponentPackageInstance(modelRoot);
		ComponentPackagesCP_CPPropertySource ps = new ComponentPackagesCP_CPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testComponent_ComponentsProperties() throws Exception {
		Component_c inst = Component_c.ComponentInstance(modelRoot);
		ComponentsC_CPropertySource ps = new ComponentsC_CPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testComponentReference_ComponentReferencesProperties()
			throws Exception {
		ComponentReference_c inst = ComponentReference_c
				.ComponentReferenceInstance(modelRoot);
		ComponentReferencesCL_ICPropertySource ps = new ComponentReferencesCL_ICPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testProvision_ProvidedInterfacesProperties() throws Exception {
		Provision_c inst = Provision_c.ProvisionInstance(modelRoot);
		ProvidedInterfacesC_PPropertySource ps = new ProvidedInterfacesC_PPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testRequirement_RequiredInterfacesProperties() throws Exception {
		Requirement_c inst = Requirement_c.RequirementInstance(modelRoot);
		RequiredInterfacesC_RPropertySource ps = new RequiredInterfacesC_RPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInterfacePackage_InterfacePackagesProperties()
			throws Exception {
		InterfacePackage_c inst = InterfacePackage_c
				.InterfacePackageInstance(modelRoot);
		InterfacePackagesIP_IPPropertySource ps = new InterfacePackagesIP_IPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInterface_InterfacesProperties() throws Exception {
		Interface_c inst = Interface_c.InterfaceInstance(modelRoot);
		InterfacesC_IPropertySource ps = new InterfacesC_IPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInterfaceSignal_SignalsProperties() throws Exception {
		InterfaceSignal_c inst = InterfaceSignal_c
				.InterfaceSignalInstance(modelRoot);
		SignalsC_ASPropertySource ps = new SignalsC_ASPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInterfaceOperation_OperationsProperties() throws Exception {
		InterfaceOperation_c inst = InterfaceOperation_c
				.InterfaceOperationInstance(modelRoot);
		OperationsC_IOPropertySource ps = new OperationsC_IOPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testPropertyParameter_ParametersProperties() throws Exception {
		PropertyParameter_c inst = PropertyParameter_c
				.PropertyParameterInstance(modelRoot);
		ParametersC_PPPropertySource ps = new ParametersC_PPPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testRequiredOperation_RequiredInterfaceOperationsProperties()
			throws Exception {
		RequiredOperation_c inst = RequiredOperation_c
				.RequiredOperationInstance(modelRoot);
		RequiredInterfaceOperationsSPR_ROPropertySource ps = new RequiredInterfaceOperationsSPR_ROPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testRequiredSignal_RequiredInterfaceSignalsProperties()
			throws Exception {
		RequiredSignal_c inst = RequiredSignal_c
				.RequiredSignalInstance(modelRoot);
		RequiredInterfaceSignalsSPR_RSPropertySource ps = new RequiredInterfaceSignalsSPR_RSPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testProvidedOperation_ProvidedInterfaceOperationsProperties()
			throws Exception {
		ProvidedOperation_c inst = ProvidedOperation_c
				.ProvidedOperationInstance(modelRoot);
		ProvidedInterfaceOperationsSPR_POPropertySource ps = new ProvidedInterfaceOperationsSPR_POPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testProvidedSignal_ProvidedInterfaceSignalsProperties()
			throws Exception {
		ProvidedSignal_c inst = ProvidedSignal_c
				.ProvidedSignalInstance(modelRoot);
		ProvidedInterfaceSignalsSPR_PSPropertySource ps = new ProvidedInterfaceSignalsSPR_PSPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInstance_InstancesProperties() throws Exception {
		Instance_c inst = Instance_c.InstanceInstance(modelRoot);
		InstancesI_INSPropertySource ps = new InstancesI_INSPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testAttributeValue_ValuesProperties() throws Exception {
		AttributeValue_c inst = AttributeValue_c
				.AttributeValueInstance(modelRoot);
		ValuesI_AVLPropertySource ps = new ValuesI_AVLPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testPendingEvent_PendingEventsProperties() throws Exception {
		PendingEvent_c inst = PendingEvent_c.PendingEventInstance(modelRoot);
		PendingEventsI_EVIPropertySource ps = new PendingEventsI_EVIPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testStructuredDataType_StructuredDataTypeProperties()
			throws Exception {
		StructuredDataType_c inst = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		StructuredDataTypeS_SDTPropertySource ps = new StructuredDataTypeS_SDTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testStructureMember_StructureMemberProperties()
			throws Exception {
		StructureMember_c inst = StructureMember_c
				.StructureMemberInstance(modelRoot);
		StructureMemberS_MBRPropertySource ps = new StructureMemberS_MBRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testPort_PortProperties() throws Exception {
		Port_c inst = Port_c.PortInstance(modelRoot);
		PortC_POPropertySource ps = new PortC_POPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testImportedProvision_ImportedProvidedInterfacesProperties()
			throws Exception {
		ImportedProvision_c inst = ImportedProvision_c
				.ImportedProvisionInstance(modelRoot);
		ImportedProvidedInterfacesCL_IPPropertySource ps = new ImportedProvidedInterfacesCL_IPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testImportedRequirement_ImportedRequiredInterfacesProperties()
			throws Exception {
		ImportedRequirement_c inst = ImportedRequirement_c
				.ImportedRequirementInstance(modelRoot);
		ImportedRequiredInterfacesCL_IRPropertySource ps = new ImportedRequiredInterfacesCL_IRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testTransition_TransitionsProperties() throws Exception {
		Transition_c inst = Transition_c.TransitionInstance(modelRoot);
		TransitionsSM_TXNPropertySource ps = new TransitionsSM_TXNPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testComponentInstance_ComponentInstancesProperties()
			throws Exception {
		ComponentInstance_c inst = ComponentInstance_c
				.ComponentInstanceInstance(modelRoot);
		ComponentInstancesI_EXEPropertySource ps = new ComponentInstancesI_EXEPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testComponentParticipant_ComponentParticipantsProperties()
			throws Exception {
		ComponentParticipant_c inst = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		ComponentParticipantsSQ_COPPropertySource ps = new ComponentParticipantsSQ_COPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testPackage_PackagesProperties() throws Exception {
		Package_c inst = Package_c.PackageInstance(modelRoot);
		PackagesEP_PKGPropertySource ps = new PackagesEP_PKGPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testLinkParticipation_AssociationProperties() throws Exception {
		LinkParticipation_c inst = LinkParticipation_c
				.LinkParticipationInstance(modelRoot);
		AssociationI_LIPPropertySource ps = new AssociationI_LIPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testConstantSpecification_ConstantSpecificationProperties()
			throws Exception {
		ConstantSpecification_c inst = ConstantSpecification_c
				.ConstantSpecificationInstance(modelRoot);
		ConstantSpecificationCNST_CSPPropertySource ps = new ConstantSpecificationCNST_CSPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testLiteralSymbolicConstant_LiteralSymbolicConstantProperties()
			throws Exception {
		LiteralSymbolicConstant_c inst = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		LiteralSymbolicConstantCNST_LSCPropertySource ps = new LiteralSymbolicConstantCNST_LSCPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSymbolicConstant_SymbolicConstantProperties()
			throws Exception {
		SymbolicConstant_c inst = SymbolicConstant_c
				.SymbolicConstantInstance(modelRoot);
		SymbolicConstantCNST_SYCPropertySource ps = new SymbolicConstantCNST_SYCPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSatisfaction_SatisfactionsProperties() throws Exception {
		Satisfaction_c inst = Satisfaction_c.SatisfactionInstance(modelRoot);
		SatisfactionsC_SFPropertySource ps = new SatisfactionsC_SFPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testNewBaseAttribute_NonDerivedAttributeProperties()
			throws Exception {
		NewBaseAttribute_c inst = NewBaseAttribute_c
				.NewBaseAttributeInstance(modelRoot);
		NonDerivedAttributeO_NBATTRPropertySource ps = new NonDerivedAttributeO_NBATTRPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testPolymorphicEvent_PolymorphicEventProperties()
			throws Exception {
		PolymorphicEvent_c inst = PolymorphicEvent_c
				.PolymorphicEventInstance(modelRoot);
		PolymorphicEventSM_PEVTPropertySource ps = new PolymorphicEventSM_PEVTPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testReferredToIdentifierAttribute_ReferencedIdentifierProperties()
			throws Exception {
		ReferredToIdentifierAttribute_c inst = ReferredToIdentifierAttribute_c
				.ReferredToIdentifierAttributeInstance(modelRoot);
		ReferencedIdentifierO_RTIDAPropertySource ps = new ReferencedIdentifierO_RTIDAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testDelegation_DelegatedInterfacesProperties() throws Exception {
		Delegation_c inst = Delegation_c.DelegationInstance(modelRoot);
		DelegatedInterfacesC_DGPropertySource ps = new DelegatedInterfacesC_DGPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSEMEvent_EventProperties() throws Exception {
		SemEvent_c inst = SemEvent_c.SemEventInstance(modelRoot);
		EventSM_SEVTPropertySource ps = new EventSM_SEVTPropertySource(inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInformalSynchronousMessage_InformalMessageProperties()
			throws Exception {
		InformalSynchronousMessage_c inst = InformalSynchronousMessage_c
				.InformalSynchronousMessageInstance(modelRoot);
		InformalMessageMSG_ISMPropertySource ps = new InformalMessageMSG_ISMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInformalAsynchronousMessage_InformalMessageProperties()
			throws Exception {
		InformalAsynchronousMessage_c inst = InformalAsynchronousMessage_c
				.InformalAsynchronousMessageInstance(modelRoot);
		InformalMessageMSG_IAMPropertySource ps = new InformalMessageMSG_IAMPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testFunctionMessage_FormalFunctionProperties() throws Exception {
		FunctionMessage_c inst = FunctionMessage_c
				.FunctionMessageInstance(modelRoot);
		FormalFunctionMSG_FPropertySource ps = new FormalFunctionMSG_FPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testBridgeMessage_FormalBridgeOperationProperties()
			throws Exception {
		BridgeMessage_c inst = BridgeMessage_c.BridgeMessageInstance(modelRoot);
		FormalBridgeOperationMSG_BPropertySource ps = new FormalBridgeOperationMSG_BPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testOperationMessage_FormalOperationProperties()
			throws Exception {
		OperationMessage_c inst = OperationMessage_c
				.OperationMessageInstance(modelRoot);
		FormalOperationMSG_OPropertySource ps = new FormalOperationMSG_OPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInterfaceOperationMessage_FormalInterfaceOperationProperties()
			throws Exception {
		InterfaceOperationMessage_c inst = InterfaceOperationMessage_c
				.InterfaceOperationMessageInstance(modelRoot);
		FormalInterfaceOperationMSG_IOPPropertySource ps = new FormalInterfaceOperationMSG_IOPPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testEventMessage_FormalEventProperties() throws Exception {
		EventMessage_c inst = EventMessage_c.EventMessageInstance(modelRoot);
		FormalEventMSG_EPropertySource ps = new FormalEventMSG_EPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testSignalMessage_FormalSignalProperties() throws Exception {
		SignalMessage_c inst = SignalMessage_c.SignalMessageInstance(modelRoot);
		FormalSignalMSG_SIGPropertySource ps = new FormalSignalMSG_SIGPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testInformalArgument_InformalArgumentProperties()
			throws Exception {
		InformalArgument_c inst = InformalArgument_c
				.InformalArgumentInstance(modelRoot);
		InformalArgumentMSG_IAPropertySource ps = new InformalArgumentMSG_IAPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
	public void testCreationTransition_CreationTransitionsProperties()
			throws Exception {
		CreationTransition_c inst = CreationTransition_c
				.CreationTransitionInstance(modelRoot);
		CreationTransitionsSM_CRTXNPropertySource ps = new CreationTransitionsSM_CRTXNPropertySource(
				inst);
		IPropertyDescriptor[] pd_set = ps.getPropertyDescriptors();
		for (int i = 0; i < pd_set.length; i++) {
			String pkg = pd_set[i].getClass().getPackage().getName();
			String className = pd_set[i].getClass().getName()
					.replaceFirst(pkg + ".", "");
			if ((!className.equals("DescriptionPropertyDescriptor"))
					&& (!className.equals("ActivityPropertyDescriptor"))) {
				CellEditor editor = pd_set[i].createPropertyEditor(new Shell());
				assertNull(editor);
			}
		}
	}
}
