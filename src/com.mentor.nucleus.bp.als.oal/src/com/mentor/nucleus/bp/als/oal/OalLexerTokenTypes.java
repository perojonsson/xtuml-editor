// $ANTLR : "oal_lex.g" -> "OalLexer.java"$

   package com.mentor.nucleus.bp.als.oal;

public interface OalLexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int Semicolon = 4;
	int LITERAL_assign = 5;
	int LITERAL_break = 6;
	int LITERAL_bridge = 7;
	int TOK_EQUAL = 8;
	int LITERAL_send = 9;
	int LITERAL_control = 10;
	int LITERAL_stop = 11;
	int LITERAL_continue = 12;
	int LITERAL_create = 13;
	int LITERAL_event = 14;
	int LITERAL_instance = 15;
	int LITERAL_of = 16;
	int LITERAL_object = 17;
	int LITERAL__debug = 18;
	int LITERAL_delete = 19;
	int LITERAL_for = 20;
	int LITERAL_each = 21;
	int LITERAL_in = 22;
	int LITERAL_end = 23;
	int LITERAL_generate = 24;
	int LITERAL_if = 25;
	int LITERAL_elif = 26;
	int LITERAL_else = 27;
	int LITERAL_relate = 28;
	int LITERAL_to = 29;
	int LITERAL_across = 30;
	int TOK_DOT = 31;
	int LITERAL_using = 32;
	int LITERAL_return = 33;
	int LITERAL_select = 34;
	int LITERAL_one = 35;
	int LITERAL_any = 36;
	int LITERAL_many = 37;
	int LITERAL_transform = 38;
	int TOK_DOUBLECOLON = 39;
	int LITERAL_unrelate = 40;
	int LITERAL_from = 41;
	int LITERAL_while = 42;
	int LITERAL_param = 43;
	int TOK_LPAREN = 44;
	int TOK_RPAREN = 45;
	int LITERAL__trace = 46;
	int LITERAL__off = 47;
	int LITERAL__on = 48;
	int LITERAL__dump = 49;
	int LITERAL__sor = 50;
	int LITERAL__stat = 51;
	int TOK_TIMES = 52;
	int TOK_COLON = 53;
	int LITERAL_assigner = 54;
	int LITERAL_class = 55;
	int LITERAL_creator = 56;
	int TOK_COMMA = 57;
	int TOK_GENERAL_NAME = 58;
	int TOK_ARROW = 59;
	int TOK_LSQBR = 60;
	int TOK_RSQBR = 61;
	int LITERAL_related = 62;
	int LITERAL_by = 63;
	int LITERAL_instances = 64;
	int LITERAL_where = 65;
	int TOK_ID = 66;
	int TOK_RELID = 67;
	int LITERAL_cardinality = 68;
	int LITERAL_empty = 69;
	int LITERAL_false = 70;
	int LITERAL_not = 71;
	int LITERAL_not_empty = 72;
	int LITERAL_true = 73;
	int LITERAL_rcvd_evt = 74;
	int LITERAL_selected = 75;
	int LITERAL_self = 76;
	int LITERAL_and = 77;
	int LITERAL_or = 78;
	int TICKED_PHRASE = 79;
	int TOK_QMARK = 80;
	int TOK_FRACTION = 81;
	int TOK_NUMBER = 82;
	int TOK_STRING = 83;
	int TOK_DOUBLEEQUAL = 84;
	int TOK_NOTEQUAL = 85;
	int TOK_LESSTHAN = 86;
	int TOK_LE = 87;
	int TOK_GT = 88;
	int TOK_GE = 89;
	int TOK_PLUS = 90;
	int TOK_MINUS = 91;
	int TOK_DIV = 92;
	int TOK_MOD = 93;
	int WS = 94;
	int WS1 = 95;
	int WS2 = 96;
	int DIGIT = 97;
	int ID_START_LETTER = 98;
	int ID_LETTER = 99;
	int NON_ID_LETTER = 100;
	int GENERAL_NAME_MORE_START_LETTERS = 101;
	int GENERAL_NAME_MORE_LETTERS = 102;
	int EXPONENT = 103;
	int FLOAT_SUFFIX = 104;
	int FLOAT = 105;
	int TOK_UNDEFINED = 106;
	int ML_COMMENT = 107;
	int SL_STRING = 108;
}
