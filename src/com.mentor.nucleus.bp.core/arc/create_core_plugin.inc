.//=====================================================================
.//
.// File:      $RCSfile: create_core_plugin.inc,v $
.// Version:   $Revision: 1.131 $
.// Modified:  $Date: 2013/06/24 14:47:52 $
.//
.// Copyright (c) 2004-2014 Mentor Graphics Corporation.  All rights reserved.
.//
.//=====================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=====================================================================
.//
.// The function declared below is responsible for creating the core
.// plugin.xml file. It declares all of the object contributions
.// to be shown by the other plugins in their context menus.
.//
.function create_core_plugin
  .param string path
  .//
<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>
<!--
===================================================================

File: ${path}/plugin.xml

WARNING:      Do not edit this generated file
Generated by: ${info.arch_file_name}
Version:      $$Revision: 1.131 $$

Copyright (c) 2004-2014 Mentor Graphics Corporation.  All rights reserved.

===================================================================
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License.  You may obtain a copy
of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
License for the specific language governing permissions and limitations under
the License.
===================================================================

This file is the plugin manifest for the BridgePoint core plugin.

===================================================================
-->
<plugin
   id="com.mentor.nucleus.bp.core"
   name="BridgePoint Core Plug-in"
   version="4.1.16"
   provider-name="Mentor Graphics"
   class="com.mentor.nucleus.bp.core.CorePlugin">

   <runtime>
      <library name="core.jar">
        <export name="*"/>
      </library>
      <library name="jlc_2013_2.jar">
        <export
               name="*">
        </export>
      </library>
   </runtime>
   <requires>
      <import plugin="org.eclipse.core.runtime"/>
      <import plugin="org.eclipse.ui"/>
      <import plugin="org.eclipse.core.resources"/>
      <import plugin="org.eclipse.ui.views"/>
      <import plugin="org.eclipse.jface.text"/>
      <import plugin="org.eclipse.ui.ide"/>
      <import plugin="org.eclipse.core.variables"/>
   </requires>

   <extension-point
         id="editors"
         name="BridgePoint Editors"
         schema="schema/com.mentor.nucleus.bp.core.editors.exsd"/>

   <extension
         id="com.mentor.nucleus.bp.ui.explorer.viewer"
         name="Model Explorer"
         point="org.eclipse.ui.popupMenus">
.select many menu_entries from instances of CME
  .for each menu_entry in menu_entries
    .// Delete and Rename are retargetable actions,
    .// we dont want them apearing elsewhere in the menus.
    .if (menu_entry.Global == false)
      .select one class related by menu_entry->O_OBJ[R2000]
      .invoke cn = get_class_name(class)
      .invoke acn = get_action_class_name(menu_entry)
      .assign action_class_name = "com.mentor.nucleus.bp.core.ui.${acn.body}"
      .if(menu_entry.UsesSelectionDialog)
        .assign action_class_name = "com.mentor.nucleus.bp.core.ui.actions.${acn.body}"
      .end if
      .assign menubar_path = "com.mentor.nucleus.bp.ui.context-internal"
      .if ("$lr{menu_entry.Specialism}" == "new")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.newmenu"
      .elif  ("$lr{menu_entry.Specialism}" == "classes")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.classroot/com.mentor.nucleus.bp.ui.newclassmenu"
      .elif  ("$lr{menu_entry.Specialism}" == "components")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.componentroot/com.mentor.nucleus.bp.ui.newcomponentmenu"
      .elif  ("$lr{menu_entry.Specialism}" == "external")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.externalroot/com.mentor.nucleus.bp.ui.newexternalmenu"
      .elif  ("$lr{menu_entry.Specialism}" == "interaction")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.interactionroot/com.mentor.nucleus.bp.ui.newinteractionmenu"
      .elif  ("$lr{menu_entry.Specialism}" == "activity")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.activityroot/com.mentor.nucleus.bp.ui.newactivitymenu"
      .elif  ("$lr{menu_entry.Specialism}" == "types")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.typeroot/com.mentor.nucleus.bp.ui.newtypemenu"
      .elif  ("$lr{menu_entry.Specialism}" == "usecase")
        .assign menubar_path = "com.mentor.nucleus.bp.ui.newroot/com.mentor.nucleus.bp.ui.usecaseroot/com.mentor.nucleus.bp.ui.newusecasemenu"
      .end if
      .assign has_wizard = ""
      .select one wfl related by menu_entry->W_WOF[R2012]
      .if (not_empty wfl)
        .select any field related by wfl->W_STEP[R2005]->W_FLD[R2009]
        .if ( not_empty field )
          .assign has_wizard = "..."
        .end if
      .end if
      .// if the current menu entry requires the
      .// the selection to contain elements of
      .// different types, we must use the common
      .// supertype of all elements as the object class
      .assign objectClass = cn.body
      .if(menu_entry.requiresHeterogeneousSelection)
        .assign objectClass = "common.NonRootModelElement"
      .end if
      <objectContribution
            adaptable="true"
            objectClass="com.mentor.nucleus.bp.core.${objectClass}"
            id="${action_class_name}">
         <action
               .if(menu_entry.extraEntryText != "")
                 .if(not menu_entry.UsesSelectionDialog)
               label="${menu_entry.Label}${menu_entry.extraEntryText}"
                 .end if
               .else
                 .if(not menu_entry.UsesSelectionDialog)
               label="${menu_entry.Label}${has_wizard}"
               .end if
               .end if
               .if(menu_entry.UsesSelectionDialog)
                    .if (menu_entry.Specialism == "Generic Package")
                       label="${menu_entry.Label}..."
                    .else
                       label="${menu_entry.Specialism} ${menu_entry.Label}..."
                    .end if
               .end if
               class="${action_class_name}"
               menubarPath="${menubar_path}"
               .// if the required selection count
               .// is defined use that value for the
               .// enablesFor attribute, otherwise
               .// default to 1
               .if(menu_entry.requiredSelectionCount != "")
               enablesFor="${menu_entry.requiredSelectionCount}"
               .else
               enablesFor="1"
               .end if
               id="${action_class_name}">
         </action>
      .select many filter_set related by menu_entry->MEF[R2013]
      .for each filter in filter_set
         <filter name="${filter.name}" value="${filter.value}" />
      .end for
      </objectContribution>
    .end if
  .end for
      <objectContribution
            adaptable="true"
            objectClass="com.mentor.nucleus.bp.core.LiteralSymbolicConstant_c"
            id="com.mentor.nucleus.bp.core.ui.SetValueOnConstantAction">
         <action
               label="Set Value..."
               class="com.mentor.nucleus.bp.core.ui.SetValueOnConstantAction"
               menubarPath="com.mentor.nucleus.bp.ui.context-internal"
               enablesFor="1"
               id="com.mentor.nucleus.bp.core.ui.SetValueOnConstantAction">
         </action>
      </objectContribution>
      <objectContribution
            adaptable="true"
            objectClass="com.mentor.nucleus.bp.core.SystemModel_c"
            id="com.mentor.nucleus.bp.core.ui.setprojectprefs">
         <action
               label="Project Preferences"
               class="com.mentor.nucleus.bp.core.ui.SetBPProjectPreferencesAction"
               menubarPath="com.mentor.nucleus.bp.ui.context-internal"
               enablesFor="1"
               id="com.mentor.nucleus.bp.core.ui.SetBPProjectPreferencesAction">
         </action>
      </objectContribution>
      <objectContribution
            adaptable="false"
            id="com.mentor.nucleus.bp.core.pullContribution"
            objectClass="com.mentor.nucleus.bp.core.SystemModel_c">
         <action
               class="com.mentor.nucleus.bp.core.ui.actions.PullSynchronizationChanges"
               id="com.mentor.nucleus.bp.core.actions.pullAction"
               icon="icons/checkout_action.gif"
               label="Synchronize with library"
               menubarPath="com.mentor.nucleus.bp.ui.context-internal">
         </action>
      </objectContribution>
      <objectContribution
            adaptable="true"
            id="com.mentor.nucleus.bp.core.pushContribution"
            objectClass="com.mentor.nucleus.bp.core.SystemModel_c">
         <action
               class="com.mentor.nucleus.bp.core.ui.actions.PublishSynchronizationChanges"
               id="com.mentor.nucleus.bp.core.actions.pushAction"
               icon="icons/checkin_action.gif"
               label="Synchronize references"
               menubarPath="com.mentor.nucleus.bp.ui.context-internal">
         </action>
      </objectContribution>
      <objectContribution
            adaptable="true"
            id="com.mentor.nucleus.bp.core.builtinEEContribution"
            objectClass="com.mentor.nucleus.bp.core.Package_c">
         <action
               class="com.mentor.nucleus.bp.core.ui.actions.CreateBuiltInExternalEntitiesAction"
               enablesFor="*"
               id="com.mentor.nucleus.bp.core.action1"
               label="Add Built-in External Entities"
               menubarPath="com.mentor.nucleus.bp.ui.context-internal">
         </action>
      </objectContribution>
   </extension>
   <extension
      point="org.eclipse.ui.perspectives">
      <perspective
            name="xtUML Modeling"
            class="com.mentor.nucleus.bp.core.ui.perspective.BridgePointPerspective"
            icon="icons/green-bp.gif"
            id="com.mentor.nucleus.bp.core.perspective">
      </perspective>
   </extension>
   <extension point="org.eclipse.ui.perspectiveExtensions">
     <perspectiveExtension
       targetID="org.eclipse.ui.resourcePerspective">
           <perspectiveShortcut id="com.mentor.nucleus.bp.core.perspective"/>
       </perspectiveExtension>
   </extension>
    <extension point="org.eclipse.ui.perspectiveExtensions">
     <perspectiveExtension
       targetID="com.mentor.nucleus.builder.PerspectiveFactory">
           <perspectiveShortcut id="com.mentor.nucleus.bp.core.perspective"/>
       </perspectiveExtension>
   </extension>
   <extension point="org.eclipse.ui.perspectiveExtensions">
     <perspectiveExtension
       targetID="com.mentor.nucleus.debug.ui.DebugPerspective">
           <perspectiveShortcut id="com.mentor.nucleus.bp.core.perspective"/>
       </perspectiveExtension>
   </extension>
   <extension point="org.eclipse.ui.preferencePages">
     <page id="com.mentor.nucleus.bp.core.root"
           name="xtUML"
           class="com.mentor.nucleus.bp.core.ui.preferences.BridgePointPreferences">
     </page>
     <page class="com.mentor.nucleus.bp.core.ui.preferences.ActionLanguagePreferences"
           id="com.mentor.nucleus.bp.core.ui.preferences.ActionLanguagePreferences"
           name="Action Language"
           category="com.mentor.nucleus.bp.core.root">
     </page>
     <page class="com.mentor.nucleus.bp.core.ui.preferences.ExportPreferences"
           id="com.mentor.nucleus.bp.core.ui.preferences.ExportPreferences"
           name="Model Export"
           category="com.mentor.nucleus.bp.core.root">
     </page>
     <page class="com.mentor.nucleus.bp.core.ui.preferences.MessageDirectionPreferences"
           id="com.mentor.nucleus.bp.core.ui.preferences.MessageDirectionPreferences"
           name="Message Direction"
           category="com.mentor.nucleus.bp.core.root">
     </page>       
     <page class="com.mentor.nucleus.bp.core.ui.preferences.BuildTranslationPreferences"
           id="com.mentor.nucleus.bp.core.ui.preferences.BuildTranslationPreferences"
           name="xtUML Translate"
           category="com.mentor.nucleus.bp.core.root">
     </page>
     <page class="com.mentor.nucleus.bp.core.ui.preferences.VerifierPreferences"
           id="com.mentor.nucleus.bp.core.ui.preferences.VerifierPreferences"
           name="xtUML eXecute"
           category="com.mentor.nucleus.bp.core.root">
     </page>       
   </extension>
   <extension id="com.mentor.nucleus.bp.core.ui.viewcats"
              name="BridgePoint"
              point="org.eclipse.ui.views">
     <category name="BridgePoint"
               id="com.mentor.nucleus.bp.core.ui.viewcats.bp"/>
   </extension>
   <extension
         id="xtumlnature"
         name="BridgePoint xtUML"
         point="org.eclipse.core.resources.natures">
      <runtime>
         <run class="com.mentor.nucleus.bp.core.XtUMLNature"/>
      </runtime>
   </extension>
   <extension
         point="org.eclipse.ui.ide.projectNatureImages">
      <image
            natureId="com.mentor.nucleus.bp.core.xtumlnature"
            icon="icons/xtuml-nature.gif"
            id="com.mentor.nucleus.bp.core.natureimage"/>
   </extension>
   <extension
         point="org.eclipse.ui.newWizards">
      <category
            name="xtUML"
            id="com.mentor.nucleus.bp.xtUML"/>
      <wizard
            icon="icons/newsystem.gif"
            class="com.mentor.nucleus.bp.core.ui.NewSystemWizard"
            category="com.mentor.nucleus.bp.xtUML"
            project="true"
            name="xtUML Project"
            id="com.mentor.nucleus.bp.NewWizardSystem">
         <description>
            Create a new xtUML project
         </description>
      </wizard>
   </extension>
   <extension point="org.eclipse.help.contexts">
      <contexts file="contexts/contexts.xml"/>
   </extension>
   <extension point="org.eclipse.help.contexts">
       <contexts file="contexts/contexts.xml" plugin="org.eclipse.ui.ide"/>
   </extension>
      <extension point="org.eclipse.help.contexts">
       <contexts file="contexts/contexts.xml" plugin="org.eclipse.ui"/>
   </extension>
   <extension point="org.eclipse.team.core.fileTypes">
      <fileTypes extension="xtuml" type="binary" />
   </extension>
- <!--  Inter-Product Extension Declarations 
  --> 
  <extension-point id="model-compilers" name="xtUML Model Compilers" schema="schema/model-compilers.exsd" /> 
  <extension-point id="code-builders" name="xtUML Code Builders" schema="schema/code-builders.exsd" /> 

</plugin>
.end function
.//
.//
.//
