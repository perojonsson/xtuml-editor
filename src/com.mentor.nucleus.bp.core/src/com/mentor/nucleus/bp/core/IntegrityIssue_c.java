package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.IntegrityIssue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_INTEGRITY_ISSUE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class IntegrityIssue_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public IntegrityIssue_c(ModelRoot modelRoot, int p_m_ii_id,
			java.util.UUID p_m_im_id, String p_m_description, int p_m_severity,
			String p_m_elementname, String p_m_elementpath,
			java.util.UUID p_m_elementid, Object p_m_element, long p_m_markerid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_im_id = IdAssigner.preprocessUUID(p_m_im_id);
		m_description = p_m_description;
		m_severity = p_m_severity;
		m_elementname = p_m_elementname;
		m_elementpath = p_m_elementpath;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
		//extract 28 bit value only            
		m_elementidLongBased = 0xfffffff & p_m_elementid
				.getLeastSignificantBits();
		m_element = p_m_element;
		m_ii_id = p_m_ii_id;
		m_markerid = p_m_markerid;

		Object[] key = {new UUID(0, new Long(m_ii_id))};
		addInstanceToMap(key);
	}
	static public IntegrityIssue_c createProxy(ModelRoot modelRoot,
			int p_m_ii_id, java.util.UUID p_m_im_id, String p_m_description,
			int p_m_severity, String p_m_elementname, String p_m_elementpath,
			java.util.UUID p_m_elementid, Object p_m_element,
			long p_m_markerid, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(IntegrityIssue_c.class);
		IntegrityIssue_c new_inst = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_ii_id))};
			new_inst = (IntegrityIssue_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_im_id = IdAssigner.preprocessUUID(p_m_im_id);
				new_inst.m_description = p_m_description;
				new_inst.m_severity = p_m_severity;
				new_inst.m_elementname = p_m_elementname;
				new_inst.m_elementpath = p_m_elementpath;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
				//extract 28 bit value only            
				new_inst.m_elementidLongBased = 0xfffffff & p_m_elementid
						.getLeastSignificantBits();
				new_inst.m_element = p_m_element;
				new_inst.m_ii_id = p_m_ii_id;
				new_inst.m_markerid = p_m_markerid;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new IntegrityIssue_c(modelRoot, p_m_ii_id, p_m_im_id,
					p_m_description, p_m_severity, p_m_elementname,
					p_m_elementpath, p_m_elementid, p_m_element, p_m_markerid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public IntegrityIssue_c resolveInstance(ModelRoot modelRoot,
			int p_m_ii_id, java.util.UUID p_m_im_id, String p_m_description,
			int p_m_severity, String p_m_elementname, String p_m_elementpath,
			java.util.UUID p_m_elementid, Object p_m_element, long p_m_markerid) {
		InstanceList instances = modelRoot
				.getInstanceList(IntegrityIssue_c.class);
		IntegrityIssue_c source = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_ii_id))};
			source = (IntegrityIssue_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_im_id = IdAssigner.preprocessUUID(p_m_im_id);
				source.m_description = p_m_description;
				source.m_severity = p_m_severity;
				source.m_elementname = p_m_elementname;
				source.m_elementpath = p_m_elementpath;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);
				//extract 28 bit value only            
				source.m_elementidLongBased = 0xfffffff & p_m_elementid
						.getLeastSignificantBits();
				source.m_element = p_m_element;
				source.m_ii_id = p_m_ii_id;
				source.m_markerid = p_m_markerid;

				return source;
			}
		}
		// there is no instance matching the id
		IntegrityIssue_c new_inst = new IntegrityIssue_c(modelRoot, p_m_ii_id,
				p_m_im_id, p_m_description, p_m_severity, p_m_elementname,
				p_m_elementpath, p_m_elementid, p_m_element, p_m_markerid);
		return new_inst;
	}
	public IntegrityIssue_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_im_id = IdAssigner.NULL_UUID;
		m_description = "";
		m_severity = Severity_c.OOA_UNINITIALIZED_ENUM;
		m_elementname = "";
		m_elementpath = "";
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {new UUID(0, new Long(m_ii_id))};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {new UUID(0, new Long(m_ii_id))};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p6
		// round p7
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof IntegrityIssue_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof IntegrityIssue_c)) {
			return false;
		}

		IntegrityIssue_c me = (IntegrityIssue_c) elem;
		if (getIi_id() != ((IntegrityIssue_c) elem).getIi_id())
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof IntegrityIssue_c)) {
			return false;
		}

		IntegrityIssue_c me = (IntegrityIssue_c) elem;
		if (getIi_id() != ((IntegrityIssue_c) elem).getIi_id())
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_im_id;
	private String m_description;
	private int m_severity;
	private String m_elementname;
	private String m_elementpath;
	private java.util.UUID m_elementid;
	private long m_elementidLongBased;
	private Object m_element;
	private int m_ii_id;
	private long m_markerid;

	// declare association references from this class

	// referring navigation

	IntegrityManager_c ManagedByIntegrityManager;
	public void relateAcrossR1300To(IntegrityManager_c target) {
		relateAcrossR1300To(target, true);
	}
	public void relateAcrossR1300To(IntegrityManager_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ManagedByIntegrityManager)
			return; // already related

		if (ManagedByIntegrityManager != target) {

			Object oldKey = getInstanceKey();

			if (ManagedByIntegrityManager != null) {

				ManagedByIntegrityManager.clearBackPointerR1300To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"IntegrityIssue_c.relateAcrossR1300To(IntegrityManager_c target)",
									"Relate performed across R1300 from Integrity Issue to Integrity Manager without unrelate of prior instance.");
				}
			}

			ManagedByIntegrityManager = target;
			m_im_id = target.getIm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1300To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1300", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1300From(IntegrityManager_c target) {
		unrelateAcrossR1300From(target, true);
	}
	public void unrelateAcrossR1300From(IntegrityManager_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ManagedByIntegrityManager == null)
			return; // already unrelated

		if (target != ManagedByIntegrityManager) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1300",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1300To(this);
		}

		if (ManagedByIntegrityManager != null) {

			m_im_id = ManagedByIntegrityManager.getIm_id();
			ManagedByIntegrityManager = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1300", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(
			IntegrityManager_c[] targets) {
		return getOneMI_IIOnR1300(targets, null);
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(
			IntegrityManager_c[] targets, ClassQueryInterface_c test) {
		IntegrityIssue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMI_IIOnR1300(targets[i], test);
			}
		}

		return ret_val;
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(IntegrityManager_c target) {
		return getOneMI_IIOnR1300(target, null);
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(
			IntegrityManager_c target, boolean loadComponent) {
		return getOneMI_IIOnR1300(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(
			IntegrityManager_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMI_IIOnR1300(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(ModelRoot modelRoot,
			IntegrityManager_c target, ClassQueryInterface_c test) {
		return getOneMI_IIOnR1300(modelRoot, target, test, true);
	}

	public static IntegrityIssue_c getOneMI_IIOnR1300(ModelRoot modelRoot,
			IntegrityManager_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneMI_IIOnR1300(modelRoot, target, test);
	}
	private static IntegrityIssue_c find_getOneMI_IIOnR1300(
			ModelRoot modelRoot, IntegrityManager_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ManagesIntegrityIssueManages_R1300) {
				for (int i = 0; i < target.backPointer_ManagesIntegrityIssueManages_R1300
						.size(); ++i) {
					IntegrityIssue_c source = (IntegrityIssue_c) target.backPointer_ManagesIntegrityIssueManages_R1300
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c[] targets) {
		return getManyMI_IIsOnR1300(targets, null);
	}
	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c[] targets, boolean loadComponent) {
		return getManyMI_IIsOnR1300(targets, null, loadComponent);
	}
	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c[] targets, ClassQueryInterface_c test) {
		return getManyMI_IIsOnR1300(targets, test, true);
	}

	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new IntegrityIssue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(IntegrityIssue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ManagesIntegrityIssueManages_R1300) {
				for (int j = 0; j < targets[i].backPointer_ManagesIntegrityIssueManages_R1300
						.size(); ++j) {
					IntegrityIssue_c source = (IntegrityIssue_c) targets[i].backPointer_ManagesIntegrityIssueManages_R1300
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			IntegrityIssue_c[] ret_set = new IntegrityIssue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new IntegrityIssue_c[0];
		}
	}

	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c target) {
		return getManyMI_IIsOnR1300(target, null);
	}

	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c target, boolean loadComponent) {
		return getManyMI_IIsOnR1300(target, null, loadComponent);
	}

	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c target, ClassQueryInterface_c test) {
		return getManyMI_IIsOnR1300(target, test, true);
	}

	public static IntegrityIssue_c[] getManyMI_IIsOnR1300(
			IntegrityManager_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new IntegrityIssue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ManagesIntegrityIssueManages_R1300) {
			for (int i = 0; i < target.backPointer_ManagesIntegrityIssueManages_R1300
					.size(); ++i) {
				IntegrityIssue_c source = (IntegrityIssue_c) target.backPointer_ManagesIntegrityIssueManages_R1300
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			IntegrityIssue_c[] ret_set = new IntegrityIssue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new IntegrityIssue_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ManagedByIntegrityManager == null) {
			// R1300
			IntegrityManager_c relInst39992 = (IntegrityManager_c) baseRoot
					.getInstanceList(IntegrityManager_c.class).get(
							new Object[]{m_im_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39992 == null) {
				relInst39992 = (IntegrityManager_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(IntegrityManager_c.class)
						.get(new Object[]{m_im_id});
			}
			if (relInst39992 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39992 = (IntegrityManager_c) roots[i]
							.getInstanceList(IntegrityManager_c.class).get(
									new Object[]{m_im_id});
					if (relInst39992 != null)
						break;
				}
			}
			//synchronized
			if (relInst39992 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39992) && !isProxy())) {
					relInst39992.relateAcrossR1300To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1300
		// MI_IM
		inst = ManagedByIntegrityManager;
		unrelateAcrossR1300From(ManagedByIntegrityManager, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(IntegrityIssue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final IntegrityIssue_c inst = (IntegrityIssue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(IntegrityIssue_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static IntegrityIssue_c IntegrityIssueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		IntegrityIssue_c result = findIntegrityIssueInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static IntegrityIssue_c findIntegrityIssueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(IntegrityIssue_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				IntegrityIssue_c x = (IntegrityIssue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static IntegrityIssue_c IntegrityIssueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return IntegrityIssueInstance(modelRoot, test, true);
	}

	public static IntegrityIssue_c IntegrityIssueInstance(ModelRoot modelRoot) {
		return IntegrityIssueInstance(modelRoot, null, true);
	}

	public static IntegrityIssue_c[] IntegrityIssueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(IntegrityIssue_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				IntegrityIssue_c x = (IntegrityIssue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				IntegrityIssue_c[] ret_set = new IntegrityIssue_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new IntegrityIssue_c[0];
			}
		}
	}
	public static IntegrityIssue_c[] IntegrityIssueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return IntegrityIssueInstances(modelRoot, test, true);
	}
	public static IntegrityIssue_c[] IntegrityIssueInstances(ModelRoot modelRoot) {
		return IntegrityIssueInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Integrity Issue.dispose call: ";
		IntegrityManager_c testR1300Inst = IntegrityManager_c
				.getOneMI_IMOnR1300(this, false);

		if (testR1300Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1300 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Integrity Issue",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("im_id")) {
			return true;
		}
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getIm_idLongBased() {
		if (ManagedByIntegrityManager != null) {
			return ManagedByIntegrityManager.getIm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getIm_id() {
		if (ManagedByIntegrityManager != null) {
			return ManagedByIntegrityManager.getIm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_im_id))
			return m_im_id;
		else
			return getIm_id();
	}

	public void setIm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_im_id)) {
				return;
			}
		} else if (m_im_id != null) {
			if (m_im_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Im_id",
				m_im_id, newValue, false);
		m_im_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescription() {
		return m_description;
	}

	public void setDescription(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_description)) {
				return;
			}
		} else if (m_description != null) {
			if (m_description.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Description", m_description, newValue, false);
		m_description = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getSeverity() {
		return m_severity;
	}

	public void setSeverity(int newValue) {
		if (m_severity == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Severity", new Integer(m_severity), new Integer(newValue),
				false);

		m_severity = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getElementname() {
		return m_elementname;
	}

	public void setElementname(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementname)) {
				return;
			}
		} else if (m_elementname != null) {
			if (m_elementname.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementname", m_elementname, newValue, false);
		m_elementname = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getElementpath() {
		return m_elementpath;
	}

	public void setElementpath(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementpath)) {
				return;
			}
		} else if (m_elementpath != null) {
			if (m_elementpath.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementpath", m_elementpath, newValue, false);
		m_elementpath = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getElementidLongBased() {
		if (m_elementidLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_elementid)) {
			return 0xfffffff & m_elementid.getLeastSignificantBits();
		}
		return m_elementidLongBased;
	}
	public java.util.UUID getElementid() {
		return m_elementid;
	}

	public void setElementid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_elementid)) {
				return;
			}
		} else if (m_elementid != null) {
			if (m_elementid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, false);
		m_elementid = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public Object getElement() {
		return m_element;
	}

	public void setElement(Object newValue) {
		if (m_element == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Element", m_element, newValue, false);
		m_element = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getIi_id() {
		return m_ii_id;
	}

	public void setIi_id(int newValue) {
		if (m_ii_id == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ii_id",
				new Integer(m_ii_id), new Integer(newValue), false);

		m_ii_id = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getMarkerid() {
		return m_markerid;
	}

	public void setMarkerid(long newValue) {
		if (m_markerid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Markerid", new Long(m_markerid), new Long(newValue), false);

		m_markerid = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Integrity Issue", //$NON-NLS-1$
				" Operation entered: Integrity Issue::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		IntegrityIssue_c[] objs = IntegrityIssue_c.IntegrityIssueInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Integrity Issue", //$NON-NLS-1$
				" Operation entered: Integrity Issue::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class IntegrityIssue_c_test39994_c implements ClassQueryInterface_c {
			IntegrityIssue_c_test39994_c(int p39995) {
				m_p39995 = p39995;
			}
			private int m_p39995;
			public boolean evaluate(Object candidate) {
				IntegrityIssue_c selected = (IntegrityIssue_c) candidate;
				boolean retval = false;
				retval = (selected.getIi_id() == (m_p39995));
				return retval;
			}
		}

		IntegrityIssue_c[] objs39993 = IntegrityIssue_c
				.IntegrityIssueInstances(modelRoot,
						new IntegrityIssue_c_test39994_c(getIi_id()));

		if (((objs39993.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Integrity Issue", //$NON-NLS-1$
								"Consistency: Object: Integrity Issue: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39993.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Integrity Issue: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39993.length), e);
			}
			retval = false;

		}

		if (((objs39993.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Integrity Issue", //$NON-NLS-1$
								"Consistency: Object: Integrity Issue: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39993.length)
										+ " II_ID: " + Integer.toString(getIi_id())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Integrity Issue: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39993.length)
										+ " II_ID: " + Integer.toString(getIi_id()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Integrity Issue is a referring class in association: rel.Numb = 1300
		// The participating class is: Integrity Manager
		class IntegrityManager_c_test39999_c implements ClassQueryInterface_c {
			IntegrityManager_c_test39999_c(java.util.UUID p40000) {
				m_p40000 = p40000;
			}
			private java.util.UUID m_p40000;
			public boolean evaluate(Object candidate) {
				IntegrityManager_c selected = (IntegrityManager_c) candidate;
				boolean retval = false;
				retval = (selected.getIm_id().equals(m_p40000));
				return retval;
			}
		}

		IntegrityManager_c[] objs39998 = IntegrityManager_c
				.IntegrityManagerInstances(modelRoot,
						new IntegrityManager_c_test39999_c(getIm_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39998.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Integrity Issue", //$NON-NLS-1$
								"Consistency: Object: Integrity Issue: Association: 1300: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39998.length)
										+ " IM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Integrity Issue: Association: 1300: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39998.length)
										+ " IM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Recheckintegrity() {
		Ooaofooa.log.println(ILogger.OPERATION, "Integrity Issue",
				" Operation entered: IntegrityIssue::Recheckintegrity");
		final ModelRoot modelRoot = getModelRoot();
		Dispose();

	} // End recheckIntegrity
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Integrity Issue",
				" Operation entered: IntegrityIssue::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		IntegrityManager_c v_manager = IntegrityManager_c
				.getOneMI_IMOnR1300(this);

		this.unrelateAcrossR1300From(v_manager);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Integrity Issue
