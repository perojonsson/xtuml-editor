package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ExecutablePropertyArgument_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_EXECUTABLE_PROPERTY_ARGUMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ExecutablePropertyArgument_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ExecutablePropertyArgument_c(ModelRoot modelRoot,
			java.util.UUID p_m_arg_id, java.util.UUID p_m_pp_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_arg_id = IdAssigner.preprocessUUID(p_m_arg_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

		Object[] key = {m_arg_id};
		addInstanceToMap(key);
	}
	static public ExecutablePropertyArgument_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_arg_id, java.util.UUID p_m_pp_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);
		ExecutablePropertyArgument_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_arg_id};
			new_inst = (ExecutablePropertyArgument_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_arg_id = IdAssigner.preprocessUUID(p_m_arg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ExecutablePropertyArgument_c(modelRoot, p_m_arg_id,
					p_m_pp_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ExecutablePropertyArgument_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_arg_id,
			java.util.UUID p_m_pp_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);
		ExecutablePropertyArgument_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_arg_id};
			source = (ExecutablePropertyArgument_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_arg_id = IdAssigner.preprocessUUID(p_m_arg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

				return source;
			}
		}
		// there is no instance matching the id
		ExecutablePropertyArgument_c new_inst = new ExecutablePropertyArgument_c(
				modelRoot, p_m_arg_id, p_m_pp_id);
		return new_inst;
	}
	public ExecutablePropertyArgument_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_arg_id = IdAssigner.NULL_UUID;
		m_pp_id = IdAssigner.NULL_UUID;
		Object[] key = {m_arg_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_arg_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_arg_id != p_newKey) {

			m_arg_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ExecutablePropertyArgument_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ExecutablePropertyArgument_c)) {
			return false;
		}

		ExecutablePropertyArgument_c me = (ExecutablePropertyArgument_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getArg_id()) || IdAssigner.NULL_UUID
						.equals(((ExecutablePropertyArgument_c) elem)
								.getArg_id())) && this != elem)) {
			return false;
		}
		if (!getArg_id().equals(
				((ExecutablePropertyArgument_c) elem).getArg_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ExecutablePropertyArgument_c)) {
			return false;
		}

		ExecutablePropertyArgument_c me = (ExecutablePropertyArgument_c) elem;
		if (!getArg_idCachedValue().equals(
				((ExecutablePropertyArgument_c) elem).getArg_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_arg_id;
	private java.util.UUID m_pp_id;

	// declare association references from this class

	// referring navigation

	MessageArgument_c IsSupertypeMessageArgument;
	public void relateAcrossR1013To(MessageArgument_c target) {
		relateAcrossR1013To(target, true);
	}
	public void relateAcrossR1013To(MessageArgument_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeMessageArgument)
			return; // already related

		if (IsSupertypeMessageArgument != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeMessageArgument != null) {

				IsSupertypeMessageArgument.clearBackPointerR1013To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ExecutablePropertyArgument_c.relateAcrossR1013To(MessageArgument_c target)",
									"Relate performed across R1013 from Executable Property Argument to Message Argument without unrelate of prior instance.");
				}
			}

			IsSupertypeMessageArgument = target;
			m_arg_id = target.getArg_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1013To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1013", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1013From(MessageArgument_c target) {
		unrelateAcrossR1013From(target, true);
	}
	public void unrelateAcrossR1013From(MessageArgument_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeMessageArgument == null)
			return; // already unrelated

		if (target != IsSupertypeMessageArgument) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1013",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1013To(this);
		}

		if (IsSupertypeMessageArgument != null) {

			m_arg_id = IsSupertypeMessageArgument.getArg_id();
			IsSupertypeMessageArgument = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1013", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			MessageArgument_c[] targets) {
		return getOneMSG_EPAOnR1013(targets, null);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			MessageArgument_c[] targets, ClassQueryInterface_c test) {
		ExecutablePropertyArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_EPAOnR1013(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			MessageArgument_c target) {
		return getOneMSG_EPAOnR1013(target, null);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			MessageArgument_c target, boolean loadComponent) {
		return getOneMSG_EPAOnR1013(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			MessageArgument_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_EPAOnR1013(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			ModelRoot modelRoot, MessageArgument_c target,
			ClassQueryInterface_c test) {
		return getOneMSG_EPAOnR1013(modelRoot, target, test, true);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1013(
			ModelRoot modelRoot, MessageArgument_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneMSG_EPAOnR1013(modelRoot, target, test);
	}
	private static ExecutablePropertyArgument_c find_getOneMSG_EPAOnR1013(
			ModelRoot modelRoot, MessageArgument_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ExecutablePropertyArgument_c source = (ExecutablePropertyArgument_c) target.backPointer_IsSubtypeExecutablePropertyArgumentIsSubtype_R1013;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1013(
			MessageArgument_c[] targets) {
		return getManyMSG_EPAsOnR1013(targets, null);
	}
	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1013(
			MessageArgument_c[] targets, boolean loadComponent) {
		return getManyMSG_EPAsOnR1013(targets, null, loadComponent);
	}
	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1013(
			MessageArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_EPAsOnR1013(targets, test, true);
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1013(
			MessageArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ExecutablePropertyArgument_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ExecutablePropertyArgument_c source = (ExecutablePropertyArgument_c) targets[i].backPointer_IsSubtypeExecutablePropertyArgumentIsSubtype_R1013;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ExecutablePropertyArgument_c[] ret_set = new ExecutablePropertyArgument_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExecutablePropertyArgument_c[0];
		}
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1013(
			MessageArgument_c target) {
		if (target != null) {
			MessageArgument_c[] targetArray = new MessageArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_EPAsOnR1013(targetArray);
		} else {
			ExecutablePropertyArgument_c[] result = new ExecutablePropertyArgument_c[0];
			return result;
		}
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1013(
			MessageArgument_c target, boolean loadComponent) {
		if (target != null) {
			MessageArgument_c[] targetArray = new MessageArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_EPAsOnR1013(targetArray, loadComponent);
		} else {
			ExecutablePropertyArgument_c[] result = new ExecutablePropertyArgument_c[0];
			return result;
		}
	}

	// referring navigation

	PropertyParameter_c IsRepresentedByPropertyParameter;
	public void relateAcrossR1023To(PropertyParameter_c target) {
		relateAcrossR1023To(target, true);
	}
	public void relateAcrossR1023To(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsRepresentedByPropertyParameter)
			return; // already related

		if (IsRepresentedByPropertyParameter != target) {

			Object oldKey = getInstanceKey();

			if (IsRepresentedByPropertyParameter != null) {
				UmlProblem.removeXtUMLProblem(this,
						IsRepresentedByPropertyParameter);

				IsRepresentedByPropertyParameter.clearBackPointerR1023To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ExecutablePropertyArgument_c.relateAcrossR1023To(PropertyParameter_c target)",
									"Relate performed across R1023 from Executable Property Argument to Property Parameter without unrelate of prior instance.");
				}
			}

			IsRepresentedByPropertyParameter = target;
			m_pp_id = target.getPp_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1023To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1023", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1023From(PropertyParameter_c target) {
		unrelateAcrossR1023From(target, true);
	}
	public void unrelateAcrossR1023From(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsRepresentedByPropertyParameter == null)
			return; // already unrelated

		if (target != IsRepresentedByPropertyParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1023",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1023To(this);
		}

		if (IsRepresentedByPropertyParameter != null) {

			m_pp_id = IsRepresentedByPropertyParameter.getPp_id();
			IsRepresentedByPropertyParameter = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1023", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			PropertyParameter_c[] targets) {
		return getOneMSG_EPAOnR1023(targets, null);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		ExecutablePropertyArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_EPAOnR1023(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			PropertyParameter_c target) {
		return getOneMSG_EPAOnR1023(target, null);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			PropertyParameter_c target, boolean loadComponent) {
		return getOneMSG_EPAOnR1023(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_EPAOnR1023(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			ModelRoot modelRoot, PropertyParameter_c target,
			ClassQueryInterface_c test) {
		return getOneMSG_EPAOnR1023(modelRoot, target, test, true);
	}

	public static ExecutablePropertyArgument_c getOneMSG_EPAOnR1023(
			ModelRoot modelRoot, PropertyParameter_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		ExecutablePropertyArgument_c result = null;

		result = find_getOneMSG_EPAOnR1023(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ExecutablePropertyArgument_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneMSG_EPAOnR1023(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ExecutablePropertyArgument_c find_getOneMSG_EPAOnR1023(
			ModelRoot modelRoot, PropertyParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023) {
				for (int i = 0; i < target.backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023
						.size(); ++i) {
					ExecutablePropertyArgument_c source = (ExecutablePropertyArgument_c) target.backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c[] targets) {
		return getManyMSG_EPAsOnR1023(targets, null);
	}
	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c[] targets, boolean loadComponent) {
		return getManyMSG_EPAsOnR1023(targets, null, loadComponent);
	}
	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_EPAsOnR1023(targets, test, true);
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ExecutablePropertyArgument_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ExecutablePropertyArgument_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023) {
				for (int j = 0; j < targets[i].backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023
						.size(); ++j) {
					ExecutablePropertyArgument_c source = (ExecutablePropertyArgument_c) targets[i].backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ExecutablePropertyArgument_c[] ret_set = new ExecutablePropertyArgument_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExecutablePropertyArgument_c[0];
		}
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c target) {
		return getManyMSG_EPAsOnR1023(target, null);
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c target, boolean loadComponent) {
		return getManyMSG_EPAsOnR1023(target, null, loadComponent);
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getManyMSG_EPAsOnR1023(target, test, true);
	}

	public static ExecutablePropertyArgument_c[] getManyMSG_EPAsOnR1023(
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ExecutablePropertyArgument_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ExecutablePropertyArgument_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023) {
			for (int i = 0; i < target.backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023
					.size(); ++i) {
				ExecutablePropertyArgument_c source = (ExecutablePropertyArgument_c) target.backPointer_RepresentsExecutablePropertyArgumentRepresents_R1023
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ExecutablePropertyArgument_c[] ret_set = new ExecutablePropertyArgument_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExecutablePropertyArgument_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1013
		MessageArgument_c relInst40202 = (MessageArgument_c) baseRoot
				.getInstanceList(MessageArgument_c.class).get(
						new Object[]{m_arg_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40202 == null) {
			relInst40202 = (MessageArgument_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(MessageArgument_c.class)
					.get(new Object[]{m_arg_id});
		}
		if (relInst40202 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40202 = (MessageArgument_c) roots[i].getInstanceList(
						MessageArgument_c.class).get(new Object[]{m_arg_id});
				if (relInst40202 != null)
					break;
			}
		}
		//synchronized
		if (relInst40202 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40202) && !isProxy())) {
				relInst40202.relateAcrossR1013To(this, notifyChanges);
			}
		}

		if (IsRepresentedByPropertyParameter == null) {
			// R1023
			PropertyParameter_c relInst40203 = (PropertyParameter_c) baseRoot
					.getInstanceList(PropertyParameter_c.class).get(
							new Object[]{m_pp_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40203 == null) {
				relInst40203 = (PropertyParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(PropertyParameter_c.class)
						.get(new Object[]{m_pp_id});
			}
			if (relInst40203 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40203 = (PropertyParameter_c) roots[i]
							.getInstanceList(PropertyParameter_c.class).get(
									new Object[]{m_pp_id});
					if (relInst40203 != null)
						break;
				}
			}
			//synchronized
			if (relInst40203 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40203) && !isProxy())) {
					relInst40203.relateAcrossR1023To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1013
		// MSG_A
		inst = IsSupertypeMessageArgument;
		unrelateAcrossR1013From(IsSupertypeMessageArgument, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1023
		// C_PP
		inst = IsRepresentedByPropertyParameter;
		unrelateAcrossR1023From(IsRepresentedByPropertyParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ExecutablePropertyArgument_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ExecutablePropertyArgument_c inst = (ExecutablePropertyArgument_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ExecutablePropertyArgument_c ExecutablePropertyArgumentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ExecutablePropertyArgument_c result = findExecutablePropertyArgumentInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ExecutablePropertyArgument_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findExecutablePropertyArgumentInstance(
								modelRoot, test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ExecutablePropertyArgument_c findExecutablePropertyArgumentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ExecutablePropertyArgument_c x = (ExecutablePropertyArgument_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ExecutablePropertyArgument_c ExecutablePropertyArgumentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ExecutablePropertyArgumentInstance(modelRoot, test, true);
	}

	public static ExecutablePropertyArgument_c ExecutablePropertyArgumentInstance(
			ModelRoot modelRoot) {
		return ExecutablePropertyArgumentInstance(modelRoot, null, true);
	}

	public static ExecutablePropertyArgument_c[] ExecutablePropertyArgumentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ExecutablePropertyArgument_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ExecutablePropertyArgument_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ExecutablePropertyArgument_c x = (ExecutablePropertyArgument_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ExecutablePropertyArgument_c[] ret_set = new ExecutablePropertyArgument_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ExecutablePropertyArgument_c[0];
			}
		}
	}
	public static ExecutablePropertyArgument_c[] ExecutablePropertyArgumentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ExecutablePropertyArgumentInstances(modelRoot, test, true);
	}
	public static ExecutablePropertyArgument_c[] ExecutablePropertyArgumentInstances(
			ModelRoot modelRoot) {
		return ExecutablePropertyArgumentInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Executable Property Argument.dispose call: ";
		MessageArgument_c testR1013Inst6 = MessageArgument_c
				.getOneMSG_AOnR1013(this, false);

		if (testR1013Inst6 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		PropertyParameter_c testR1023Inst = PropertyParameter_c
				.getOneC_PPOnR1023(this, false);

		if (testR1023Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1023 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Executable Property Argument", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("arg_id")) {
			return true;
		}
		if (attributeName.equals("pp_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getArg_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getArg_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getArg_idLongBased() {
		if (IsSupertypeMessageArgument != null) {
			return IsSupertypeMessageArgument.getArg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getArg_id() {
		if (IsSupertypeMessageArgument != null) {
			return IsSupertypeMessageArgument.getArg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeMessageArgument != null);

	}

	public java.util.UUID getArg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_arg_id))
			return m_arg_id;
		else
			return getArg_id();
	}

	public void setArg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_arg_id)) {
				return;
			}
		} else if (m_arg_id != null) {
			if (m_arg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Arg_id", m_arg_id, newValue, true);
		m_arg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPp_idLongBased() {
		if (IsRepresentedByPropertyParameter != null) {
			return IsRepresentedByPropertyParameter.getPp_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPp_id() {
		if (IsRepresentedByPropertyParameter != null) {
			return IsRepresentedByPropertyParameter.getPp_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPp_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_pp_id))
			return m_pp_id;
		else
			return getPp_id();
	}

	public void setPp_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_pp_id)) {
				return;
			}
		} else if (m_pp_id != null) {
			if (m_pp_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Pp_id",
				m_pp_id, newValue, true);
		m_pp_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Executable Property Argument", //$NON-NLS-1$
						" Operation entered: Executable Property Argument::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ExecutablePropertyArgument_c[] objs = ExecutablePropertyArgument_c
				.ExecutablePropertyArgumentInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Executable Property Argument", //$NON-NLS-1$
						" Operation entered: Executable Property Argument::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ExecutablePropertyArgument_c_test40205_c
				implements
					ClassQueryInterface_c {
			ExecutablePropertyArgument_c_test40205_c(java.util.UUID p40206) {
				m_p40206 = p40206;
			}
			private java.util.UUID m_p40206;
			public boolean evaluate(Object candidate) {
				ExecutablePropertyArgument_c selected = (ExecutablePropertyArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40206));
				return retval;
			}
		}

		ExecutablePropertyArgument_c[] objs40204 = ExecutablePropertyArgument_c
				.ExecutablePropertyArgumentInstances(modelRoot,
						new ExecutablePropertyArgument_c_test40205_c(
								getArg_id()));

		if (((objs40204.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Executable Property Argument", //$NON-NLS-1$
								"Consistency: Object: Executable Property Argument: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40204.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Executable Property Argument: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40204.length), e);
			}
			retval = false;

		}

		if (((objs40204.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Executable Property Argument", //$NON-NLS-1$
								"Consistency: Object: Executable Property Argument: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40204.length)
										+ " Arg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Executable Property Argument: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40204.length)
										+ " Arg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Executable Property Argument is a subtype in association: rel.Numb = 1013
		// The supertype class is: Message Argument
		class MessageArgument_c_test40210_c implements ClassQueryInterface_c {
			MessageArgument_c_test40210_c(java.util.UUID p40211) {
				m_p40211 = p40211;
			}
			private java.util.UUID m_p40211;
			public boolean evaluate(Object candidate) {
				MessageArgument_c selected = (MessageArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40211));
				return retval;
			}
		}

		MessageArgument_c[] objs40209 = MessageArgument_c
				.MessageArgumentInstances(modelRoot,
						new MessageArgument_c_test40210_c(getArg_id()));

		if (((objs40209.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Executable Property Argument", //$NON-NLS-1$
								"Consistency: Object: Executable Property Argument: Association: 1013: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40209.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Executable Property Argument: Association: 1013: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40209.length), e);
			}
			retval = false;

		}

		// Executable Property Argument is a referring class in association: rel.Numb = 1023
		// The participating class is: Property Parameter
		class PropertyParameter_c_test40213_c implements ClassQueryInterface_c {
			PropertyParameter_c_test40213_c(java.util.UUID p40214) {
				m_p40214 = p40214;
			}
			private java.util.UUID m_p40214;
			public boolean evaluate(Object candidate) {
				PropertyParameter_c selected = (PropertyParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getPp_id().equals(m_p40214));
				return retval;
			}
		}

		PropertyParameter_c[] objs40212 = PropertyParameter_c
				.PropertyParameterInstances(modelRoot,
						new PropertyParameter_c_test40213_c(getPp_id()));

		if (((objs40212.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Executable Property Argument", //$NON-NLS-1$
								"Consistency: Object: Executable Property Argument: Association: 1023: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40212.length)
										+ " PP_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Executable Property Argument: Association: 1023: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40212.length)
										+ " PP_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Executable Property Argument",
				" Operation entered: ExecutablePropertyArgument::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		PropertyParameter_c v_pp = PropertyParameter_c.getOneC_PPOnR1023(this);

		if ((v_pp != null)) {

			this.unrelateAcrossR1023From(v_pp);

		}

		MessageArgument_c v_ma = MessageArgument_c.getOneMSG_AOnR1013(this);

		if (((v_ma != null))) {

			if (v_ma != null) {
				v_ma.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Executable Property Argument
