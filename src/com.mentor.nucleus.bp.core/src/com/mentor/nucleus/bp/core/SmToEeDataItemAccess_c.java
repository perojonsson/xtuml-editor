package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToEeDataItemAccess_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SM_TO_EE_DATA_ITEM_ACCESS extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SmToEeDataItemAccess_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SmToEeDataItemAccess_c(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_eedi_id,
			java.util.UUID p_m_ee_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_eedi_id = IdAssigner.preprocessUUID(p_m_eedi_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

		Object[] key = {m_eedi_id, m_apath_id, m_ee_id};
		addInstanceToMap(key);
	}
	static public SmToEeDataItemAccess_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_eedi_id,
			java.util.UUID p_m_ee_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);
		SmToEeDataItemAccess_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_eedi_id, p_m_apath_id, p_m_ee_id};
			new_inst = (SmToEeDataItemAccess_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_eedi_id = IdAssigner.preprocessUUID(p_m_eedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SmToEeDataItemAccess_c(modelRoot, p_m_apath_id,
					p_m_eedi_id, p_m_ee_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SmToEeDataItemAccess_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_eedi_id,
			java.util.UUID p_m_ee_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);
		SmToEeDataItemAccess_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_eedi_id, p_m_apath_id, p_m_ee_id};
			source = (SmToEeDataItemAccess_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_eedi_id = IdAssigner.preprocessUUID(p_m_eedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

				return source;
			}
		}
		// there is no instance matching the id
		SmToEeDataItemAccess_c new_inst = new SmToEeDataItemAccess_c(modelRoot,
				p_m_apath_id, p_m_eedi_id, p_m_ee_id);
		return new_inst;
	}
	public SmToEeDataItemAccess_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_apath_id = IdAssigner.NULL_UUID;
		m_eedi_id = IdAssigner.NULL_UUID;
		m_ee_id = IdAssigner.NULL_UUID;
		Object[] key = {m_eedi_id, m_apath_id, m_ee_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_eedi_id, m_apath_id, m_ee_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_eedi_id != p_newKey) {

			m_eedi_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SmToEeDataItemAccess_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SmToEeDataItemAccess_c)) {
			return false;
		}

		SmToEeDataItemAccess_c me = (SmToEeDataItemAccess_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEedi_id()) || IdAssigner.NULL_UUID
						.equals(((SmToEeDataItemAccess_c) elem).getEedi_id())) && this != elem)) {
			return false;
		}
		if (!getEedi_id().equals(((SmToEeDataItemAccess_c) elem).getEedi_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getApath_id()) || IdAssigner.NULL_UUID
						.equals(((SmToEeDataItemAccess_c) elem).getApath_id())) && this != elem)) {
			return false;
		}
		if (!getApath_id()
				.equals(((SmToEeDataItemAccess_c) elem).getApath_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEe_id()) || IdAssigner.NULL_UUID
						.equals(((SmToEeDataItemAccess_c) elem).getEe_id())) && this != elem)) {
			return false;
		}
		if (!getEe_id().equals(((SmToEeDataItemAccess_c) elem).getEe_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SmToEeDataItemAccess_c)) {
			return false;
		}

		SmToEeDataItemAccess_c me = (SmToEeDataItemAccess_c) elem;
		if (!getEedi_idCachedValue().equals(
				((SmToEeDataItemAccess_c) elem).getEedi_idCachedValue()))
			return false;
		if (!getApath_idCachedValue().equals(
				((SmToEeDataItemAccess_c) elem).getApath_idCachedValue()))
			return false;
		if (!getEe_idCachedValue().equals(
				((SmToEeDataItemAccess_c) elem).getEe_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_apath_id;
	private java.util.UUID m_eedi_id;
	private java.util.UUID m_ee_id;

	// declare association references from this class

	// referring navigation

	ExternalEntityDataItem_c RepresentsAccessOfExternalEntityDataItem;
	public void relateAcrossR423To(ExternalEntityDataItem_c target) {
		relateAcrossR423To(target, true);
	}
	public void relateAcrossR423To(ExternalEntityDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == RepresentsAccessOfExternalEntityDataItem)
			return; // already related

		if (RepresentsAccessOfExternalEntityDataItem != target) {

			Object oldKey = getInstanceKey();

			if (RepresentsAccessOfExternalEntityDataItem != null) {

				RepresentsAccessOfExternalEntityDataItem
						.clearBackPointerR423To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToEeDataItemAccess_c.relateAcrossR423To(ExternalEntityDataItem_c target)",
									"Relate performed across R423 from SM to EE Data Item Access to External Entity Data Item without unrelate of prior instance.");
				}
			}

			RepresentsAccessOfExternalEntityDataItem = target;
			m_eedi_id = target.getEedi_id();
			if (IdAssigner.NULL_UUID.equals(target.getEe_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ee_id = target.getEe_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR423To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "423", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR423From(ExternalEntityDataItem_c target) {
		unrelateAcrossR423From(target, true);
	}
	public void unrelateAcrossR423From(ExternalEntityDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (RepresentsAccessOfExternalEntityDataItem == null)
			return; // already unrelated

		if (target != RepresentsAccessOfExternalEntityDataItem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R423",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR423To(this);
		}

		if (RepresentsAccessOfExternalEntityDataItem != null) {

			m_eedi_id = RepresentsAccessOfExternalEntityDataItem.getEedi_id();
			m_ee_id = RepresentsAccessOfExternalEntityDataItem.getEe_id();
			if (IdAssigner.NULL_UUID.equals(m_ee_id)) {
				m_ee_id = RepresentsAccessOfExternalEntityDataItem
						.getEe_idCachedValue();
			}
			RepresentsAccessOfExternalEntityDataItem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "423", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ExternalEntityDataItem_c[] targets) {
		return getOneCA_SMEEDOnR423(targets, null);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ExternalEntityDataItem_c[] targets, ClassQueryInterface_c test) {
		SmToEeDataItemAccess_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMEEDOnR423(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ExternalEntityDataItem_c target) {
		return getOneCA_SMEEDOnR423(target, null);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ExternalEntityDataItem_c target, boolean loadComponent) {
		return getOneCA_SMEEDOnR423(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ExternalEntityDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMEEDOnR423(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ModelRoot modelRoot, ExternalEntityDataItem_c target,
			ClassQueryInterface_c test) {
		return getOneCA_SMEEDOnR423(modelRoot, target, test, true);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR423(
			ModelRoot modelRoot, ExternalEntityDataItem_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCA_SMEEDOnR423(modelRoot, target, test);
	}
	private static SmToEeDataItemAccess_c find_getOneCA_SMEEDOnR423(
			ModelRoot modelRoot, ExternalEntityDataItem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423) {
				for (int i = 0; i < target.backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423
						.size(); ++i) {
					SmToEeDataItemAccess_c source = (SmToEeDataItemAccess_c) target.backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c[] targets) {
		return getManyCA_SMEEDsOnR423(targets, null);
	}
	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c[] targets, boolean loadComponent) {
		return getManyCA_SMEEDsOnR423(targets, null, loadComponent);
	}
	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMEEDsOnR423(targets, test, true);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToEeDataItemAccess_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423) {
				for (int j = 0; j < targets[i].backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423
						.size(); ++j) {
					SmToEeDataItemAccess_c source = (SmToEeDataItemAccess_c) targets[i].backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToEeDataItemAccess_c[] ret_set = new SmToEeDataItemAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeDataItemAccess_c[0];
		}
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c target) {
		return getManyCA_SMEEDsOnR423(target, null);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c target, boolean loadComponent) {
		return getManyCA_SMEEDsOnR423(target, null, loadComponent);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c target, ClassQueryInterface_c test) {
		return getManyCA_SMEEDsOnR423(target, test, true);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR423(
			ExternalEntityDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToEeDataItemAccess_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423) {
			for (int i = 0; i < target.backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423
					.size(); ++i) {
				SmToEeDataItemAccess_c source = (SmToEeDataItemAccess_c) target.backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToEeDataItemAccess_c[] ret_set = new SmToEeDataItemAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeDataItemAccess_c[0];
		}
	}

	// referring navigation

	SmToEeAccessPath_c IsCarriedBySmToEeAccessPath;
	public void relateAcrossR422To(SmToEeAccessPath_c target) {
		relateAcrossR422To(target, true);
	}
	public void relateAcrossR422To(SmToEeAccessPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsCarriedBySmToEeAccessPath)
			return; // already related

		if (IsCarriedBySmToEeAccessPath != target) {

			Object oldKey = getInstanceKey();

			if (IsCarriedBySmToEeAccessPath != null) {

				IsCarriedBySmToEeAccessPath.clearBackPointerR422To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToEeDataItemAccess_c.relateAcrossR422To(SmToEeAccessPath_c target)",
									"Relate performed across R422 from SM to EE Data Item Access to SM to EE Access Path without unrelate of prior instance.");
				}
			}

			IsCarriedBySmToEeAccessPath = target;
			if (IdAssigner.NULL_UUID.equals(target.getApath_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_apath_id = target.getApath_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getEe_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ee_id = target.getEe_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR422To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "422", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR422From(SmToEeAccessPath_c target) {
		unrelateAcrossR422From(target, true);
	}
	public void unrelateAcrossR422From(SmToEeAccessPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsCarriedBySmToEeAccessPath == null)
			return; // already unrelated

		if (target != IsCarriedBySmToEeAccessPath) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R422",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR422To(this);
		}

		if (IsCarriedBySmToEeAccessPath != null) {

			m_apath_id = IsCarriedBySmToEeAccessPath.getApath_id();
			if (IdAssigner.NULL_UUID.equals(m_apath_id)) {
				m_apath_id = IsCarriedBySmToEeAccessPath
						.getApath_idCachedValue();
			}
			m_ee_id = IsCarriedBySmToEeAccessPath.getEe_id();
			if (IdAssigner.NULL_UUID.equals(m_ee_id)) {
				m_ee_id = IsCarriedBySmToEeAccessPath.getEe_idCachedValue();
			}
			IsCarriedBySmToEeAccessPath = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "422", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			SmToEeAccessPath_c[] targets) {
		return getOneCA_SMEEDOnR422(targets, null);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			SmToEeAccessPath_c[] targets, ClassQueryInterface_c test) {
		SmToEeDataItemAccess_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMEEDOnR422(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			SmToEeAccessPath_c target) {
		return getOneCA_SMEEDOnR422(target, null);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			SmToEeAccessPath_c target, boolean loadComponent) {
		return getOneCA_SMEEDOnR422(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			SmToEeAccessPath_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMEEDOnR422(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			ModelRoot modelRoot, SmToEeAccessPath_c target,
			ClassQueryInterface_c test) {
		return getOneCA_SMEEDOnR422(modelRoot, target, test, true);
	}

	public static SmToEeDataItemAccess_c getOneCA_SMEEDOnR422(
			ModelRoot modelRoot, SmToEeAccessPath_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCA_SMEEDOnR422(modelRoot, target, test);
	}
	private static SmToEeDataItemAccess_c find_getOneCA_SMEEDOnR422(
			ModelRoot modelRoot, SmToEeAccessPath_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CarriesSmToEeDataItemAccessCarries_R422) {
				for (int i = 0; i < target.backPointer_CarriesSmToEeDataItemAccessCarries_R422
						.size(); ++i) {
					SmToEeDataItemAccess_c source = (SmToEeDataItemAccess_c) target.backPointer_CarriesSmToEeDataItemAccessCarries_R422
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c[] targets) {
		return getManyCA_SMEEDsOnR422(targets, null);
	}
	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c[] targets, boolean loadComponent) {
		return getManyCA_SMEEDsOnR422(targets, null, loadComponent);
	}
	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMEEDsOnR422(targets, test, true);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToEeDataItemAccess_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CarriesSmToEeDataItemAccessCarries_R422) {
				for (int j = 0; j < targets[i].backPointer_CarriesSmToEeDataItemAccessCarries_R422
						.size(); ++j) {
					SmToEeDataItemAccess_c source = (SmToEeDataItemAccess_c) targets[i].backPointer_CarriesSmToEeDataItemAccessCarries_R422
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToEeDataItemAccess_c[] ret_set = new SmToEeDataItemAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeDataItemAccess_c[0];
		}
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c target) {
		return getManyCA_SMEEDsOnR422(target, null);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c target, boolean loadComponent) {
		return getManyCA_SMEEDsOnR422(target, null, loadComponent);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c target, ClassQueryInterface_c test) {
		return getManyCA_SMEEDsOnR422(target, test, true);
	}

	public static SmToEeDataItemAccess_c[] getManyCA_SMEEDsOnR422(
			SmToEeAccessPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToEeDataItemAccess_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CarriesSmToEeDataItemAccessCarries_R422) {
			for (int i = 0; i < target.backPointer_CarriesSmToEeDataItemAccessCarries_R422
					.size(); ++i) {
				SmToEeDataItemAccess_c source = (SmToEeDataItemAccess_c) target.backPointer_CarriesSmToEeDataItemAccessCarries_R422
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToEeDataItemAccess_c[] ret_set = new SmToEeDataItemAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeDataItemAccess_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (RepresentsAccessOfExternalEntityDataItem == null) {          
      // R423
      ExternalEntityDataItem_c relInst57409 = (ExternalEntityDataItem_c) baseRoot.getInstanceList(ExternalEntityDataItem_c.class).get(new Object[] {m_eedi_id,m_ee_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57409 == null) {
      			relInst57409 = (ExternalEntityDataItem_c) Ooaofooa.getDefaultInstance().getInstanceList(ExternalEntityDataItem_c.class).get(new Object[] {m_eedi_id,m_ee_id});
      		}
			if (relInst57409 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57409 = (ExternalEntityDataItem_c) roots[i].getInstanceList(ExternalEntityDataItem_c.class).get(new Object[] {m_eedi_id,m_ee_id});
					if (relInst57409 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57409 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57409) && !isProxy())) {
	      relInst57409.relateAcrossR423To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsCarriedBySmToEeAccessPath == null) {          
      // R422
	  instances = baseRoot.getInstanceList(SmToEeAccessPath_c.class);
      SmToEeAccessPath_c relInst57410 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           SmToEeAccessPath_c source = (SmToEeAccessPath_c)cursor.next() ;
           if (     source.getApath_idCachedValue().equals(m_apath_id) && 
     source.getEe_idCachedValue().equals(m_ee_id) 		){
  		relInst57410 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst57410 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57410) && !isProxy())) {
	      relInst57410.relateAcrossR422To(this, notifyChanges);
	  }
	  }
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R423
		// S_EEDI
		inst = RepresentsAccessOfExternalEntityDataItem;
		unrelateAcrossR423From(RepresentsAccessOfExternalEntityDataItem,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R422
		// CA_SMEEA
		inst = IsCarriedBySmToEeAccessPath;
		unrelateAcrossR422From(IsCarriedBySmToEeAccessPath, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToEeDataItemAccess_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToEeDataItemAccess_c inst = (SmToEeDataItemAccess_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SmToEeDataItemAccess_c SmToEeDataItemAccessInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SmToEeDataItemAccess_c result = findSmToEeDataItemAccessInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SmToEeDataItemAccess_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSmToEeDataItemAccessInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SmToEeDataItemAccess_c findSmToEeDataItemAccessInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToEeDataItemAccess_c x = (SmToEeDataItemAccess_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SmToEeDataItemAccess_c SmToEeDataItemAccessInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToEeDataItemAccessInstance(modelRoot, test, true);
	}

	public static SmToEeDataItemAccess_c SmToEeDataItemAccessInstance(
			ModelRoot modelRoot) {
		return SmToEeDataItemAccessInstance(modelRoot, null, true);
	}

	public static SmToEeDataItemAccess_c[] SmToEeDataItemAccessInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SmToEeDataItemAccess_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeDataItemAccess_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToEeDataItemAccess_c x = (SmToEeDataItemAccess_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SmToEeDataItemAccess_c[] ret_set = new SmToEeDataItemAccess_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToEeDataItemAccess_c[0];
			}
		}
	}
	public static SmToEeDataItemAccess_c[] SmToEeDataItemAccessInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToEeDataItemAccessInstances(modelRoot, test, true);
	}
	public static SmToEeDataItemAccess_c[] SmToEeDataItemAccessInstances(
			ModelRoot modelRoot) {
		return SmToEeDataItemAccessInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the SM to EE Data Item Access.dispose call: ";
		ExternalEntityDataItem_c testR423Inst = ExternalEntityDataItem_c
				.getOneS_EEDIOnR423(this, false);

		if (testR423Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "423 ";
		}
		SmToEeAccessPath_c testR422Inst = SmToEeAccessPath_c
				.getOneCA_SMEEAOnR422(this, false);

		if (testR422Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "422 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"SM to EE Data Item Access", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("apath_id")) {
			return true;
		}
		if (attributeName.equals("eedi_id")) {
			return true;
		}
		if (attributeName.equals("ee_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getEedi_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEedi_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getApath_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getApath_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getEe_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEe_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getApath_idLongBased() {
		if (IsCarriedBySmToEeAccessPath != null) {
			return IsCarriedBySmToEeAccessPath.getApath_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getApath_id() {
		if (IsCarriedBySmToEeAccessPath != null) {
			return IsCarriedBySmToEeAccessPath.getApath_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getApath_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_apath_id))
			return m_apath_id;
		else
			return getApath_id();
	}

	public void setApath_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_apath_id)) {
				return;
			}
		} else if (m_apath_id != null) {
			if (m_apath_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Apath_id", m_apath_id, newValue, true);
		m_apath_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEedi_idLongBased() {
		if (RepresentsAccessOfExternalEntityDataItem != null) {
			return RepresentsAccessOfExternalEntityDataItem
					.getEedi_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEedi_id() {
		if (RepresentsAccessOfExternalEntityDataItem != null) {
			return RepresentsAccessOfExternalEntityDataItem.getEedi_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEedi_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_eedi_id))
			return m_eedi_id;
		else
			return getEedi_id();
	}

	public void setEedi_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_eedi_id)) {
				return;
			}
		} else if (m_eedi_id != null) {
			if (m_eedi_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Eedi_id", m_eedi_id, newValue, true);
		m_eedi_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEe_idLongBased() {
		if (RepresentsAccessOfExternalEntityDataItem != null) {
			return RepresentsAccessOfExternalEntityDataItem.getEe_idLongBased();
		}
		if (IsCarriedBySmToEeAccessPath != null) {
			return IsCarriedBySmToEeAccessPath.getEe_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEe_id() {
		if (RepresentsAccessOfExternalEntityDataItem != null) {
			return RepresentsAccessOfExternalEntityDataItem.getEe_id();
		}
		if (IsCarriedBySmToEeAccessPath != null) {
			return IsCarriedBySmToEeAccessPath.getEe_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEe_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ee_id))
			return m_ee_id;
		else
			return getEe_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SM to EE Data Item Access", //$NON-NLS-1$
						" Operation entered: SM to EE Data Item Access::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SmToEeDataItemAccess_c[] objs = SmToEeDataItemAccess_c
				.SmToEeDataItemAccessInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SM to EE Data Item Access", //$NON-NLS-1$
						" Operation entered: SM to EE Data Item Access::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SmToEeDataItemAccess_c_test57412_c
				implements
					ClassQueryInterface_c {
			SmToEeDataItemAccess_c_test57412_c(java.util.UUID p57413,
					java.util.UUID p57414, java.util.UUID p57415) {
				m_p57413 = p57413;
				m_p57414 = p57414;
				m_p57415 = p57415;
			}
			private java.util.UUID m_p57413;
			private java.util.UUID m_p57414;
			private java.util.UUID m_p57415;
			public boolean evaluate(Object candidate) {
				SmToEeDataItemAccess_c selected = (SmToEeDataItemAccess_c) candidate;
				boolean retval = false;
				retval = (selected.getEedi_id().equals(m_p57413))
						& (selected.getApath_id().equals(m_p57414))
						& (selected.getEe_id().equals(m_p57415));
				return retval;
			}
		}

		SmToEeDataItemAccess_c[] objs57411 = SmToEeDataItemAccess_c
				.SmToEeDataItemAccessInstances(modelRoot,
						new SmToEeDataItemAccess_c_test57412_c(getEedi_id(),
								getApath_id(), getEe_id()));

		if (((objs57411.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to EE Data Item Access", //$NON-NLS-1$
								"Consistency: Object: SM to EE Data Item Access: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57411.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Data Item Access: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57411.length), e);
			}
			retval = false;

		}

		if (((objs57411.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to EE Data Item Access", //$NON-NLS-1$
								"Consistency: Object: SM to EE Data Item Access: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57411.length)
										+ " EEdi_ID: " + "Not Printable" + " APath_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Data Item Access: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57411.length)
										+ " EEdi_ID: " + "Not Printable" + " APath_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to EE Data Item Access is a referring class in association: rel.Numb = 422
		// The participating class is: SM to EE Access Path
		class SmToEeAccessPath_c_test57419_c implements ClassQueryInterface_c {
			SmToEeAccessPath_c_test57419_c(java.util.UUID p57420,
					java.util.UUID p57421) {
				m_p57420 = p57420;
				m_p57421 = p57421;
			}
			private java.util.UUID m_p57420;
			private java.util.UUID m_p57421;
			public boolean evaluate(Object candidate) {
				SmToEeAccessPath_c selected = (SmToEeAccessPath_c) candidate;
				boolean retval = false;
				retval = (selected.getApath_id().equals(m_p57420))
						& (selected.getEe_id().equals(m_p57421));
				return retval;
			}
		}

		SmToEeAccessPath_c[] objs57418 = SmToEeAccessPath_c
				.SmToEeAccessPathInstances(modelRoot,
						new SmToEeAccessPath_c_test57419_c(getApath_id(),
								getEe_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57418.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to EE Data Item Access", //$NON-NLS-1$
								"Consistency: Object: SM to EE Data Item Access: Association: 422: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57418.length)
										+ " APath_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Data Item Access: Association: 422: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57418.length)
										+ " APath_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to EE Data Item Access is a referring class in association: rel.Numb = 423
		// The participating class is: External Entity Data Item
		class ExternalEntityDataItem_c_test57423_c
				implements
					ClassQueryInterface_c {
			ExternalEntityDataItem_c_test57423_c(java.util.UUID p57424,
					java.util.UUID p57425) {
				m_p57424 = p57424;
				m_p57425 = p57425;
			}
			private java.util.UUID m_p57424;
			private java.util.UUID m_p57425;
			public boolean evaluate(Object candidate) {
				ExternalEntityDataItem_c selected = (ExternalEntityDataItem_c) candidate;
				boolean retval = false;
				retval = (selected.getEedi_id().equals(m_p57424))
						& (selected.getEe_id().equals(m_p57425));
				return retval;
			}
		}

		ExternalEntityDataItem_c[] objs57422 = ExternalEntityDataItem_c
				.ExternalEntityDataItemInstances(modelRoot,
						new ExternalEntityDataItem_c_test57423_c(getEedi_id(),
								getEe_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57422.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to EE Data Item Access", //$NON-NLS-1$
								"Consistency: Object: SM to EE Data Item Access: Association: 423: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57422.length)
										+ " EEdi_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Data Item Access: Association: 423: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57422.length)
										+ " EEdi_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "SM to EE Data Item Access",
				" Operation entered: SmToEeDataItemAccess::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SmToEeDataItemAccess_c[] v_peers = SmToEeDataItemAccess_c
				.getManyCA_SMEEDsOnR422(SmToEeAccessPath_c
						.getManyCA_SMEEAsOnR422(this));

		if (((v_peers.length) == 1)) {

			AccessPath_c v_path = AccessPath_c
					.getOneCA_ACCOnR415(SmToEeAccessPath_c
							.getOneCA_SMEEAOnR422(this));

			if (v_path != null) {
				v_path.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			SmToEeAccessPath_c v_smeea = SmToEeAccessPath_c
					.getOneCA_SMEEAOnR422(this);

			this.unrelateAcrossR422From(v_smeea);

			ExternalEntityDataItem_c v_eedi = ExternalEntityDataItem_c
					.getOneS_EEDIOnR423(this);

			this.unrelateAcrossR423From(v_eedi);

			if (delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end SM to EE Data Item Access
