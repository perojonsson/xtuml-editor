      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Subsystem_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SUBSYSTEM extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Subsystem_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Subsystem_c(ModelRoot modelRoot,
       java.util.UUID         p_m_ss_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_prefix,
       int          p_m_num_rng,
       java.util.UUID         p_m_dom_id,
       java.util.UUID         p_m_config_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       //extract 28 bit value only            
       m_ss_idLongBased = 0xfffffff & p_m_ss_id.getLeastSignificantBits();
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       m_prefix = p_m_prefix;
       m_num_rng = p_m_num_rng;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_config_id = IdAssigner.preprocessUUID(p_m_config_id);
       //extract 28 bit value only            
       m_config_idLongBased = 0xfffffff & p_m_config_id.getLeastSignificantBits();
        
    setUniqueId(m_ss_id);
    Object [] key = {m_ss_id};
    addInstanceToMap(key);
  }
  static public Subsystem_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_ss_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_prefix,
       int          p_m_num_rng,
       java.util.UUID         p_m_dom_id,
       java.util.UUID         p_m_config_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);
      Subsystem_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_ss_id};
          new_inst = (Subsystem_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       //extract 28 bit value only            
       new_inst.m_ss_idLongBased = 0xfffffff & p_m_ss_id.getLeastSignificantBits();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       new_inst.m_prefix = p_m_prefix;
       new_inst.m_num_rng = p_m_num_rng;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_config_id = IdAssigner.preprocessUUID(p_m_config_id);
       //extract 28 bit value only            
       new_inst.m_config_idLongBased = 0xfffffff & p_m_config_id.getLeastSignificantBits();
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Subsystem_c(modelRoot,
p_m_ss_id,
p_m_name,
p_m_descrip,
p_m_prefix,
p_m_num_rng,
p_m_dom_id,
p_m_config_id
);
		new_inst.m_contentPath = contentPath;
    new_inst.setComponent(null);
	}
    return new_inst;
  }

  static public Subsystem_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_ss_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_prefix,
       int          p_m_num_rng,
       java.util.UUID         p_m_dom_id,
       java.util.UUID         p_m_config_id){
    InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);
    Subsystem_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_ss_id
            };
        source = (Subsystem_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       //extract 28 bit value only            
       source.m_ss_idLongBased = 0xfffffff & p_m_ss_id.getLeastSignificantBits();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       source.m_prefix = p_m_prefix;
       source.m_num_rng = p_m_num_rng;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_config_id = IdAssigner.preprocessUUID(p_m_config_id);
       //extract 28 bit value only            
       source.m_config_idLongBased = 0xfffffff & p_m_config_id.getLeastSignificantBits();
        
           return source ;
        }
      }
      // there is no instance matching the id
    Subsystem_c new_inst = new Subsystem_c(modelRoot,
p_m_ss_id,
p_m_name,
p_m_descrip,
p_m_prefix,
p_m_num_rng,
p_m_dom_id,
p_m_config_id
);
    return new_inst;
  }
  public Subsystem_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_ss_id = idAssigner.createUUID();
     m_name = "";   
     m_descrip = "";   
     m_prefix = "";   
     m_dom_id = IdAssigner.NULL_UUID;   
     m_config_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_ss_id);
    Object [] key = {m_ss_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_ss_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_ss_id !=  p_newKey ){
	
		m_ss_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Subsystem_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Subsystem_c)) {
           return false;
       }
       
       Subsystem_c me = (Subsystem_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getSs_id()) || IdAssigner.NULL_UUID.equals(((Subsystem_c)elem).getSs_id())) && this != elem)) {
      	return false;
      }
      if (!getSs_id().equals(((Subsystem_c)elem).getSs_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Subsystem_c)) {
           return false;
       }
       
       Subsystem_c me = (Subsystem_c)elem;
      if (!getSs_id().equals(((Subsystem_c)elem).getSs_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_ss_id ;
  private long m_ss_idLongBased ;
  private String       m_name ;
  private String       m_descrip ;
  private String       m_prefix ;
  private int          m_num_rng ;
  private java.util.UUID         m_dom_id ;
  private java.util.UUID         m_config_id ;
  private long m_config_idLongBased ;
      
// declare association references from this class
  
  
    
// referring navigation

Domain_c IsFirstLevelOfPartitioningForDomain ;
public void relateAcrossR1To(Domain_c target)
{
	relateAcrossR1To(target, true);
}
public void relateAcrossR1To(Domain_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsFirstLevelOfPartitioningForDomain) return;  // already related

    if ( IsFirstLevelOfPartitioningForDomain != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsFirstLevelOfPartitioningForDomain != null) {
        UmlProblem.removeXtUMLProblem(this, IsFirstLevelOfPartitioningForDomain);
    
        IsFirstLevelOfPartitioningForDomain.clearBackPointerR1To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Subsystem_c.relateAcrossR1To(Domain_c target)", 
			"Relate performed across R1 from Subsystem to Domain without unrelate of prior instance.");  
		}
    }
                
    	IsFirstLevelOfPartitioningForDomain = target ;
        m_dom_id = target.getDom_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1From(Domain_c target)
{
	unrelateAcrossR1From(target, true);
}
public void unrelateAcrossR1From(Domain_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsFirstLevelOfPartitioningForDomain == null) return;  // already unrelated
	
	if (target != IsFirstLevelOfPartitioningForDomain) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1To(this);
    }
    

      if(IsFirstLevelOfPartitioningForDomain != null) {
      
        m_dom_id = IsFirstLevelOfPartitioningForDomain.getDom_id();
        IsFirstLevelOfPartitioningForDomain = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Subsystem_c getOneS_SSOnR1(Domain_c [] targets)
{
    return getOneS_SSOnR1(targets, null);
}

public static Subsystem_c getOneS_SSOnR1(Domain_c [] targets, ClassQueryInterface_c test)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_SSOnR1(targets[i], test);
        }
    }

    return ret_val;
}

public static Subsystem_c getOneS_SSOnR1(Domain_c target)
{
  return getOneS_SSOnR1(target, null);
}

public static Subsystem_c getOneS_SSOnR1(Domain_c target, boolean loadComponent)
{
    return getOneS_SSOnR1(target.getModelRoot(), target, null, loadComponent);
}

public static Subsystem_c getOneS_SSOnR1(Domain_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_SSOnR1(target.getModelRoot(), target, test);
  }
  return null;
}

public static Subsystem_c getOneS_SSOnR1(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test)
{
	return getOneS_SSOnR1(modelRoot, target, test, true);
}

public static Subsystem_c getOneS_SSOnR1(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  Subsystem_c result = null;
  
  result=find_getOneS_SSOnR1(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,Subsystem_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneS_SSOnR1(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static Subsystem_c find_getOneS_SSOnR1(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1) {
	    for ( int i = 0; i < target.backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1.size(); ++i ) {
	      Subsystem_c source = (Subsystem_c)target.backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Subsystem_c [] getManyS_SSsOnR1(Domain_c [] targets)
{
  return getManyS_SSsOnR1(targets, null);
}
public static Subsystem_c [] getManyS_SSsOnR1(Domain_c [] targets, boolean loadComponent)
{
  return getManyS_SSsOnR1(targets, null, loadComponent);
}
public static Subsystem_c [] getManyS_SSsOnR1(Domain_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_SSsOnR1(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR1(Domain_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Subsystem_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Subsystem_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1) {
	    for (int j = 0; j < targets[i].backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1.size(); ++j) {
	      Subsystem_c source = (Subsystem_c)targets[i].backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Subsystem_c[] ret_set = new Subsystem_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Subsystem_c[0];
  }
  }

public static Subsystem_c [] getManyS_SSsOnR1(Domain_c target)
{
  return getManyS_SSsOnR1(target, null);
}

public static Subsystem_c [] getManyS_SSsOnR1(Domain_c target, boolean loadComponent)
{
  return getManyS_SSsOnR1(target, null, loadComponent);
}

public static Subsystem_c [] getManyS_SSsOnR1(Domain_c target, ClassQueryInterface_c test)
{
	return getManyS_SSsOnR1(target, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR1(Domain_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Subsystem_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Subsystem_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1) {
    for (int i = 0; i < target.backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1.size(); ++i) {
      Subsystem_c source = (Subsystem_c)target.backPointer_IsPartitionedIntoSubsystemIsPartitionedInto_R1.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Subsystem_c[] ret_set = new Subsystem_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Subsystem_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

SubsystemInSubsystem_c backPointer_IsChildViaSubsystemInSubsystemIsChildVia_R42;

public void setSubsystemInSubsystemOrderInChildListR42(SubsystemInSubsystem_c target, int index) {
	unrelateAcrossR42From(target);
	SubsystemInSubsystem_c[] elements = SubsystemInSubsystem_c.getManyS_SISsOnR42(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR42From((SubsystemInSubsystem_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR42To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR42To((SubsystemInSubsystem_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR42To(SubsystemInSubsystem_c target)
{
  if (target != null) {
    target.relateAcrossR42To(this, true) ;
  }
}

public void relateAcrossR42To(SubsystemInSubsystem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR42To(this, notifyChanges) ;
  }
}

public void setBackPointerR42To(SubsystemInSubsystem_c target)
{
    backPointer_IsChildViaSubsystemInSubsystemIsChildVia_R42 = target;
}

public void unrelateAcrossR42From(SubsystemInSubsystem_c target)
{
  if (target != null) {
    target.unrelateAcrossR42From(this, true) ;
  }
}

public void unrelateAcrossR42From(SubsystemInSubsystem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR42From(this, notifyChanges) ;
  }
}

public void clearBackPointerR42To(SubsystemInSubsystem_c target)
{
	if (target == backPointer_IsChildViaSubsystemInSubsystemIsChildVia_R42) {
		backPointer_IsChildViaSubsystemInSubsystemIsChildVia_R42 = null;
	}
}

public static Subsystem_c getOneS_SSOnR42(SubsystemInSubsystem_c [] targets)
{
    return getOneS_SSOnR42(targets, null);
}

public static Subsystem_c getOneS_SSOnR42(SubsystemInSubsystem_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR42(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR42(SubsystemInSubsystem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR42(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR42(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR42(SubsystemInSubsystem_c target)
{
	return getOneS_SSOnR42(target, true);
}
public static Subsystem_c getOneS_SSOnR42(SubsystemInSubsystem_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainsSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR42(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainsSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].ContainsSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c [] targets)
{
  return getManyS_SSsOnR42(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SubsystemInSubsystem_c [] targetArray = new SubsystemInSubsystem_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR42(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR42(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c target)
{
    return getManyS_SSsOnR42(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR42(SubsystemInSubsystem_c target, boolean loadComponent)
{
    return getManyS_SSsOnR42(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SubsystemInSubsystem_c> backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41 = new ArrayList<SubsystemInSubsystem_c>();

public void setSubsystemInSubsystemOrderInChildListR41(SubsystemInSubsystem_c target, int index) {
	unrelateAcrossR41From(target);
	SubsystemInSubsystem_c[] elements = SubsystemInSubsystem_c.getManyS_SISsOnR41(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR41From((SubsystemInSubsystem_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR41To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR41To((SubsystemInSubsystem_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR41To(SubsystemInSubsystem_c target)
{
  if (target != null) {
    target.relateAcrossR41To(this, true) ;
  }
}

public void relateAcrossR41To(SubsystemInSubsystem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR41To(this, notifyChanges) ;
  }
}

public void setBackPointerR41To(SubsystemInSubsystem_c target)
{
  	synchronized (backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41) {
		backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41.add(target);
	}
}

public void unrelateAcrossR41From(SubsystemInSubsystem_c target)
{
  if (target != null) {
    target.unrelateAcrossR41From(this, true) ;
  }
}

public void unrelateAcrossR41From(SubsystemInSubsystem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR41From(this, notifyChanges) ;
  }
}

public void clearBackPointerR41To(SubsystemInSubsystem_c target)
{
  synchronized (backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41) {
	    backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR41(SubsystemInSubsystem_c [] targets)
{
    return getOneS_SSOnR41(targets, null);
}

public static Subsystem_c getOneS_SSOnR41(SubsystemInSubsystem_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR41(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR41(SubsystemInSubsystem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR41(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR41(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR41(SubsystemInSubsystem_c target)
{
	return getOneS_SSOnR41(target, true);
}
public static Subsystem_c getOneS_SSOnR41(SubsystemInSubsystem_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ContainsChildrenOfSubsystem != null){
		target.ContainsChildrenOfSubsystem.loadProxy();
	}
	}
    return target.ContainsChildrenOfSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR41(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainsChildrenOfSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].ContainsChildrenOfSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c [] targets)
{
  return getManyS_SSsOnR41(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SubsystemInSubsystem_c [] targetArray = new SubsystemInSubsystem_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR41(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR41(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c target)
{
    return getManyS_SSsOnR41(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR41(SubsystemInSubsystem_c target, boolean loadComponent)
{
    return getManyS_SSsOnR41(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SubsystemInDomain_c> backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43 = new ArrayList<SubsystemInDomain_c>();

public void setSubsystemInDomainOrderInChildListR43(SubsystemInDomain_c target, int index) {
	unrelateAcrossR43From(target);
	SubsystemInDomain_c[] elements = SubsystemInDomain_c.getManyS_SIDsOnR43(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR43From((SubsystemInDomain_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR43To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR43To((SubsystemInDomain_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR43To(SubsystemInDomain_c target)
{
  if (target != null) {
    target.relateAcrossR43To(this, true) ;
  }
}

public void relateAcrossR43To(SubsystemInDomain_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR43To(this, notifyChanges) ;
  }
}

public void setBackPointerR43To(SubsystemInDomain_c target)
{
  	synchronized (backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43) {
		backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43.add(target);
	}
}

public void unrelateAcrossR43From(SubsystemInDomain_c target)
{
  if (target != null) {
    target.unrelateAcrossR43From(this, true) ;
  }
}

public void unrelateAcrossR43From(SubsystemInDomain_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR43From(this, notifyChanges) ;
  }
}

public void clearBackPointerR43To(SubsystemInDomain_c target)
{
  synchronized (backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43) {
	    backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR43(SubsystemInDomain_c [] targets)
{
    return getOneS_SSOnR43(targets, null);
}

public static Subsystem_c getOneS_SSOnR43(SubsystemInDomain_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR43(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR43(SubsystemInDomain_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR43(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR43(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR43(SubsystemInDomain_c target)
{
	return getOneS_SSOnR43(target, true);
}
public static Subsystem_c getOneS_SSOnR43(SubsystemInDomain_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.HasTopLevelSubsystemsSubsystem != null){
		target.HasTopLevelSubsystemsSubsystem.loadProxy();
	}
	}
    return target.HasTopLevelSubsystemsSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR43(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HasTopLevelSubsystemsSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].HasTopLevelSubsystemsSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c [] targets)
{
  return getManyS_SSsOnR43(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SubsystemInDomain_c [] targetArray = new SubsystemInDomain_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR43(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR43(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c target)
{
    return getManyS_SSsOnR43(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR43(SubsystemInDomain_c target, boolean loadComponent)
{
    return getManyS_SSsOnR43(target, null, loadComponent);
}

public static Subsystem_c getOneS_SSOnR43(Domain_c target)
{
  return Subsystem_c.getOneS_SSOnR43(SubsystemInDomain_c.getOneS_SIDOnR43(target)) ;
}

public static Subsystem_c getOneS_SSOnR43(Domain_c target,
    ClassQueryInterface_c test)
{
  return Subsystem_c.getOneS_SSOnR43(SubsystemInDomain_c.getManyS_SIDsOnR43(target), test) ;
}

public static Subsystem_c [] getManyS_SSsOnR43(Domain_c target,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR43(target, test, true);
}
public static Subsystem_c [] getManyS_SSsOnR43(Domain_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  SubsystemInDomain_c [] associators = SubsystemInDomain_c.getManyS_SIDsOnR43(target, loadComponent) ;
    return Subsystem_c.getManyS_SSsOnR43(associators, test, loadComponent) ;
}
public static Subsystem_c [] getManyS_SSsOnR43(Domain_c target)
{
    return getManyS_SSsOnR43(target, null, true);
}
public static Subsystem_c [] getManyS_SSsOnR43(Domain_c target, boolean loadComponent)
{
    return getManyS_SSsOnR43(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<UseCaseDiagram_c> backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202 = new ArrayList<UseCaseDiagram_c>();

public void setUseCaseDiagramOrderInChildListR1202(UseCaseDiagram_c target, int index) {
	unrelateAcrossR1202From(target);
	UseCaseDiagram_c[] elements = UseCaseDiagram_c.getManyUC_UCCsOnR1202(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1202From((UseCaseDiagram_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1202To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1202To((UseCaseDiagram_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1202To(UseCaseDiagram_c target)
{
  if (target != null) {
    target.relateAcrossR1202To(this, true) ;
  }
}

public void relateAcrossR1202To(UseCaseDiagram_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1202To(this, notifyChanges) ;
  }
}

public void setBackPointerR1202To(UseCaseDiagram_c target)
{
  	synchronized (backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202) {
		backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.add(target);
	}
}

public void unrelateAcrossR1202From(UseCaseDiagram_c target)
{
  if (target != null) {
    target.unrelateAcrossR1202From(this, true) ;
  }
}

public void unrelateAcrossR1202From(UseCaseDiagram_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1202From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1202To(UseCaseDiagram_c target)
{
  synchronized (backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202) {
	    backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR1202(UseCaseDiagram_c [] targets)
{
    return getOneS_SSOnR1202(targets, null);
}

public static Subsystem_c getOneS_SSOnR1202(UseCaseDiagram_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR1202(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR1202(UseCaseDiagram_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR1202(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR1202(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR1202(UseCaseDiagram_c target)
{
	return getOneS_SSOnR1202(target, true);
}
public static Subsystem_c getOneS_SSOnR1202(UseCaseDiagram_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.CanBeDisplayedInSubsystem != null){
		target.CanBeDisplayedInSubsystem.loadProxy();
	}
	}
    return target.CanBeDisplayedInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR1202(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].CanBeDisplayedInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].CanBeDisplayedInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c [] targets)
{
  return getManyS_SSsOnR1202(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UseCaseDiagram_c [] targetArray = new UseCaseDiagram_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR1202(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR1202(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c target)
{
    return getManyS_SSsOnR1202(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR1202(UseCaseDiagram_c target, boolean loadComponent)
{
    return getManyS_SSsOnR1202(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Sequence_c> backPointer_CanShowSequenceCanShow_R914 = new ArrayList<Sequence_c>();

public void setSequenceOrderInChildListR914(Sequence_c target, int index) {
	unrelateAcrossR914From(target);
	Sequence_c[] elements = Sequence_c.getManySQ_SsOnR914(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR914From((Sequence_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR914To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR914To((Sequence_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR914To(Sequence_c target)
{
  if (target != null) {
    target.relateAcrossR914To(this, true) ;
  }
}

public void relateAcrossR914To(Sequence_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR914To(this, notifyChanges) ;
  }
}

public void setBackPointerR914To(Sequence_c target)
{
  	synchronized (backPointer_CanShowSequenceCanShow_R914) {
		backPointer_CanShowSequenceCanShow_R914.add(target);
	}
}

public void unrelateAcrossR914From(Sequence_c target)
{
  if (target != null) {
    target.unrelateAcrossR914From(this, true) ;
  }
}

public void unrelateAcrossR914From(Sequence_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR914From(this, notifyChanges) ;
  }
}

public void clearBackPointerR914To(Sequence_c target)
{
  synchronized (backPointer_CanShowSequenceCanShow_R914) {
	    backPointer_CanShowSequenceCanShow_R914.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR914(Sequence_c [] targets)
{
    return getOneS_SSOnR914(targets, null);
}

public static Subsystem_c getOneS_SSOnR914(Sequence_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR914(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR914(Sequence_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR914(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR914(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR914(Sequence_c target)
{
	return getOneS_SSOnR914(target, true);
}
public static Subsystem_c getOneS_SSOnR914(Sequence_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsShownInSubsystem != null){
		target.IsShownInSubsystem.loadProxy();
	}
	}
    return target.IsShownInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR914(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsShownInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].IsShownInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c [] targets)
{
  return getManyS_SSsOnR914(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Sequence_c [] targetArray = new Sequence_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR914(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR914(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c target)
{
    return getManyS_SSsOnR914(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR914(Sequence_c target, boolean loadComponent)
{
    return getManyS_SSsOnR914(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ExternalEntityInModel_c> backPointer_ContainsExternalEntityInModelContains_R7 = new ArrayList<ExternalEntityInModel_c>();

public void setExternalEntityInModelOrderInChildListR7(ExternalEntityInModel_c target, int index) {
	unrelateAcrossR7From(target);
	ExternalEntityInModel_c[] elements = ExternalEntityInModel_c.getManyS_EEMsOnR7(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR7From((ExternalEntityInModel_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR7To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR7To((ExternalEntityInModel_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR7To(ExternalEntityInModel_c target)
{
  if (target != null) {
    target.relateAcrossR7To(this, true) ;
  }
}

public void relateAcrossR7To(ExternalEntityInModel_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR7To(this, notifyChanges) ;
  }
}

public void setBackPointerR7To(ExternalEntityInModel_c target)
{
  	synchronized (backPointer_ContainsExternalEntityInModelContains_R7) {
		backPointer_ContainsExternalEntityInModelContains_R7.add(target);
	}
}

public void unrelateAcrossR7From(ExternalEntityInModel_c target)
{
  if (target != null) {
    target.unrelateAcrossR7From(this, true) ;
  }
}

public void unrelateAcrossR7From(ExternalEntityInModel_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR7From(this, notifyChanges) ;
  }
}

public void clearBackPointerR7To(ExternalEntityInModel_c target)
{
  synchronized (backPointer_ContainsExternalEntityInModelContains_R7) {
	    backPointer_ContainsExternalEntityInModelContains_R7.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR7(ExternalEntityInModel_c [] targets)
{
    return getOneS_SSOnR7(targets, null);
}

public static Subsystem_c getOneS_SSOnR7(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR7(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR7(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR7(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR7(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR7(ExternalEntityInModel_c target)
{
	return getOneS_SSOnR7(target, true);
}
public static Subsystem_c getOneS_SSOnR7(ExternalEntityInModel_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsAPresenceOfAnAnExternalEntityInSubsystem != null){
		target.IsAPresenceOfAnAnExternalEntityInSubsystem.loadProxy();
	}
	}
    return target.IsAPresenceOfAnAnExternalEntityInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR7(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsAPresenceOfAnAnExternalEntityInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].IsAPresenceOfAnAnExternalEntityInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c [] targets)
{
  return getManyS_SSsOnR7(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ExternalEntityInModel_c [] targetArray = new ExternalEntityInModel_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR7(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR7(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c target)
{
    return getManyS_SSsOnR7(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR7(ExternalEntityInModel_c target, boolean loadComponent)
{
    return getManyS_SSsOnR7(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ModelClass_c> backPointer_IsDecomposedIntoModelClassIsDecomposedInto_R2 = new ArrayList<ModelClass_c>();

public void setModelClassOrderInChildListR2(ModelClass_c target, int index) {
	unrelateAcrossR2From(target);
	ModelClass_c[] elements = ModelClass_c.getManyO_OBJsOnR2(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2From((ModelClass_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2To((ModelClass_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2To(ModelClass_c target)
{
  if (target != null) {
    target.relateAcrossR2To(this, true) ;
  }
}

public void relateAcrossR2To(ModelClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2To(this, notifyChanges) ;
  }
}

public void setBackPointerR2To(ModelClass_c target)
{
  	synchronized (backPointer_IsDecomposedIntoModelClassIsDecomposedInto_R2) {
		backPointer_IsDecomposedIntoModelClassIsDecomposedInto_R2.add(target);
	}
}

public void unrelateAcrossR2From(ModelClass_c target)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, true) ;
  }
}

public void unrelateAcrossR2From(ModelClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2To(ModelClass_c target)
{
  synchronized (backPointer_IsDecomposedIntoModelClassIsDecomposedInto_R2) {
	    backPointer_IsDecomposedIntoModelClassIsDecomposedInto_R2.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR2(ModelClass_c [] targets)
{
    return getOneS_SSOnR2(targets, null);
}

public static Subsystem_c getOneS_SSOnR2(ModelClass_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR2(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR2(ModelClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR2(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR2(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR2(ModelClass_c target)
{
	return getOneS_SSOnR2(target, true);
}
public static Subsystem_c getOneS_SSOnR2(ModelClass_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsContainedInSubsystem != null){
		target.IsContainedInSubsystem.loadProxy();
	}
	}
    return target.IsContainedInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR2(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsContainedInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].IsContainedInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c [] targets)
{
  return getManyS_SSsOnR2(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ModelClass_c [] targetArray = new ModelClass_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR2(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR2(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c target)
{
    return getManyS_SSsOnR2(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR2(ModelClass_c target, boolean loadComponent)
{
    return getManyS_SSsOnR2(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Association_c> backPointer_ContainsAssociationContains_R4 = new ArrayList<Association_c>();

public void setAssociationOrderInChildListR4(Association_c target, int index) {
	unrelateAcrossR4From(target);
	Association_c[] elements = Association_c.getManyR_RELsOnR4(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4From((Association_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4To((Association_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4To(Association_c target)
{
  if (target != null) {
    target.relateAcrossR4To(this, true) ;
  }
}

public void relateAcrossR4To(Association_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4To(this, notifyChanges) ;
  }
}

public void setBackPointerR4To(Association_c target)
{
  	synchronized (backPointer_ContainsAssociationContains_R4) {
		backPointer_ContainsAssociationContains_R4.add(target);
	}
}

public void unrelateAcrossR4From(Association_c target)
{
  if (target != null) {
    target.unrelateAcrossR4From(this, true) ;
  }
}

public void unrelateAcrossR4From(Association_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4To(Association_c target)
{
  synchronized (backPointer_ContainsAssociationContains_R4) {
	    backPointer_ContainsAssociationContains_R4.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR4(Association_c [] targets)
{
    return getOneS_SSOnR4(targets, null);
}

public static Subsystem_c getOneS_SSOnR4(Association_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR4(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR4(Association_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR4(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR4(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR4(Association_c target)
{
	return getOneS_SSOnR4(target, true);
}
public static Subsystem_c getOneS_SSOnR4(Association_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.AbstractsAssociationsBetweenClassesInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR4(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AbstractsAssociationsBetweenClassesInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].AbstractsAssociationsBetweenClassesInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c [] targets)
{
  return getManyS_SSsOnR4(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Association_c [] targetArray = new Association_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR4(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR4(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c target)
{
    return getManyS_SSsOnR4(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR4(Association_c target, boolean loadComponent)
{
    return getManyS_SSsOnR4(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<CommunicationPath_c> backPointer_ContainsCommunicationPathContains_R5 = new ArrayList<CommunicationPath_c>();

public void setCommunicationPathOrderInChildListR5(CommunicationPath_c target, int index) {
	unrelateAcrossR5From(target);
	CommunicationPath_c[] elements = CommunicationPath_c.getManyCA_COMMsOnR5(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR5From((CommunicationPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR5To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR5To((CommunicationPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR5To(CommunicationPath_c target)
{
  if (target != null) {
    target.relateAcrossR5To(this, true) ;
  }
}

public void relateAcrossR5To(CommunicationPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR5To(this, notifyChanges) ;
  }
}

public void setBackPointerR5To(CommunicationPath_c target)
{
  	synchronized (backPointer_ContainsCommunicationPathContains_R5) {
		backPointer_ContainsCommunicationPathContains_R5.add(target);
	}
}

public void unrelateAcrossR5From(CommunicationPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR5From(this, true) ;
  }
}

public void unrelateAcrossR5From(CommunicationPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR5From(this, notifyChanges) ;
  }
}

public void clearBackPointerR5To(CommunicationPath_c target)
{
  synchronized (backPointer_ContainsCommunicationPathContains_R5) {
	    backPointer_ContainsCommunicationPathContains_R5.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR5(CommunicationPath_c [] targets)
{
    return getOneS_SSOnR5(targets, null);
}

public static Subsystem_c getOneS_SSOnR5(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR5(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR5(CommunicationPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR5(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR5(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR5(CommunicationPath_c target)
{
	return getOneS_SSOnR5(target, true);
}
public static Subsystem_c getOneS_SSOnR5(CommunicationPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.AbstractsAsynchronousCommunicationBetweenClassesInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR5(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AbstractsAsynchronousCommunicationBetweenClassesInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].AbstractsAsynchronousCommunicationBetweenClassesInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c [] targets)
{
  return getManyS_SSsOnR5(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR5(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR5(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c target)
{
    return getManyS_SSsOnR5(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR5(CommunicationPath_c target, boolean loadComponent)
{
    return getManyS_SSsOnR5(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<AccessPath_c> backPointer_ContainsAccessPathContains_R6 = new ArrayList<AccessPath_c>();

public void setAccessPathOrderInChildListR6(AccessPath_c target, int index) {
	unrelateAcrossR6From(target);
	AccessPath_c[] elements = AccessPath_c.getManyCA_ACCsOnR6(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR6From((AccessPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR6To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR6To((AccessPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR6To(AccessPath_c target)
{
  if (target != null) {
    target.relateAcrossR6To(this, true) ;
  }
}

public void relateAcrossR6To(AccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR6To(this, notifyChanges) ;
  }
}

public void setBackPointerR6To(AccessPath_c target)
{
  	synchronized (backPointer_ContainsAccessPathContains_R6) {
		backPointer_ContainsAccessPathContains_R6.add(target);
	}
}

public void unrelateAcrossR6From(AccessPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR6From(this, true) ;
  }
}

public void unrelateAcrossR6From(AccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR6From(this, notifyChanges) ;
  }
}

public void clearBackPointerR6To(AccessPath_c target)
{
  synchronized (backPointer_ContainsAccessPathContains_R6) {
	    backPointer_ContainsAccessPathContains_R6.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR6(AccessPath_c [] targets)
{
    return getOneS_SSOnR6(targets, null);
}

public static Subsystem_c getOneS_SSOnR6(AccessPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR6(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR6(AccessPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR6(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR6(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR6(AccessPath_c target)
{
	return getOneS_SSOnR6(target, true);
}
public static Subsystem_c getOneS_SSOnR6(AccessPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.AbstractsSynchronousDataAccessBetweenClassesInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR6(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AbstractsSynchronousDataAccessBetweenClassesInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].AbstractsSynchronousDataAccessBetweenClassesInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c [] targets)
{
  return getManyS_SSsOnR6(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AccessPath_c [] targetArray = new AccessPath_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR6(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR6(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c target)
{
    return getManyS_SSsOnR6(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR6(AccessPath_c target, boolean loadComponent)
{
    return getManyS_SSsOnR6(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ImportedClass_c> backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3 = new ArrayList<ImportedClass_c>();

public void setImportedClassOrderInChildListR3(ImportedClass_c target, int index) {
	unrelateAcrossR3From(target);
	ImportedClass_c[] elements = ImportedClass_c.getManyO_IOBJsOnR3(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR3From((ImportedClass_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR3To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR3To((ImportedClass_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR3To(ImportedClass_c target)
{
  if (target != null) {
    target.relateAcrossR3To(this, true) ;
  }
}

public void relateAcrossR3To(ImportedClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR3To(this, notifyChanges) ;
  }
}

public void setBackPointerR3To(ImportedClass_c target)
{
  	synchronized (backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3) {
		backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.add(target);
	}
}

public void unrelateAcrossR3From(ImportedClass_c target)
{
  if (target != null) {
    target.unrelateAcrossR3From(this, true) ;
  }
}

public void unrelateAcrossR3From(ImportedClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR3From(this, notifyChanges) ;
  }
}

public void clearBackPointerR3To(ImportedClass_c target)
{
  synchronized (backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3) {
	    backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR3(ImportedClass_c [] targets)
{
    return getOneS_SSOnR3(targets, null);
}

public static Subsystem_c getOneS_SSOnR3(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR3(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR3(ImportedClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR3(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR3(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR3(ImportedClass_c target)
{
	return getOneS_SSOnR3(target, true);
}
public static Subsystem_c getOneS_SSOnR3(ImportedClass_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.RepresentsAClassFromAnotherSubsystemInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR3(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].RepresentsAClassFromAnotherSubsystemInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].RepresentsAClassFromAnotherSubsystemInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c [] targets)
{
  return getManyS_SSsOnR3(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ImportedClass_c [] targetArray = new ImportedClass_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR3(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR3(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c target)
{
    return getManyS_SSsOnR3(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR3(ImportedClass_c target, boolean loadComponent)
{
    return getManyS_SSsOnR3(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Communication_c> backPointer_CanDisplayCommunicationCanDisplay_R1131 = new ArrayList<Communication_c>();

public void setCommunicationOrderInChildListR1131(Communication_c target, int index) {
	unrelateAcrossR1131From(target);
	Communication_c[] elements = Communication_c.getManyCOMM_COMMsOnR1131(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1131From((Communication_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1131To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1131To((Communication_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1131To(Communication_c target)
{
  if (target != null) {
    target.relateAcrossR1131To(this, true) ;
  }
}

public void relateAcrossR1131To(Communication_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1131To(this, notifyChanges) ;
  }
}

public void setBackPointerR1131To(Communication_c target)
{
  	synchronized (backPointer_CanDisplayCommunicationCanDisplay_R1131) {
		backPointer_CanDisplayCommunicationCanDisplay_R1131.add(target);
	}
}

public void unrelateAcrossR1131From(Communication_c target)
{
  if (target != null) {
    target.unrelateAcrossR1131From(this, true) ;
  }
}

public void unrelateAcrossR1131From(Communication_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1131From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1131To(Communication_c target)
{
  synchronized (backPointer_CanDisplayCommunicationCanDisplay_R1131) {
	    backPointer_CanDisplayCommunicationCanDisplay_R1131.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR1131(Communication_c [] targets)
{
    return getOneS_SSOnR1131(targets, null);
}

public static Subsystem_c getOneS_SSOnR1131(Communication_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR1131(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR1131(Communication_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR1131(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR1131(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR1131(Communication_c target)
{
	return getOneS_SSOnR1131(target, true);
}
public static Subsystem_c getOneS_SSOnR1131(Communication_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.CanBeDisplayedInSubsystem != null){
		target.CanBeDisplayedInSubsystem.loadProxy();
	}
	}
    return target.CanBeDisplayedInSubsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR1131(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].CanBeDisplayedInSubsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].CanBeDisplayedInSubsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c [] targets)
{
  return getManyS_SSsOnR1131(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Communication_c [] targetArray = new Communication_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR1131(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR1131(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c target)
{
    return getManyS_SSsOnR1131(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR1131(Communication_c target, boolean loadComponent)
{
    return getManyS_SSsOnR1131(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Activity_c> backPointer_ContainsActivityContains_R1108 = new ArrayList<Activity_c>();

public void setActivityOrderInChildListR1108(Activity_c target, int index) {
	unrelateAcrossR1108From(target);
	Activity_c[] elements = Activity_c.getManyA_AsOnR1108(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1108From((Activity_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1108To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1108To((Activity_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1108To(Activity_c target)
{
  if (target != null) {
    target.relateAcrossR1108To(this, true) ;
  }
}

public void relateAcrossR1108To(Activity_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1108To(this, notifyChanges) ;
  }
}

public void setBackPointerR1108To(Activity_c target)
{
  	synchronized (backPointer_ContainsActivityContains_R1108) {
		backPointer_ContainsActivityContains_R1108.add(target);
	}
}

public void unrelateAcrossR1108From(Activity_c target)
{
  if (target != null) {
    target.unrelateAcrossR1108From(this, true) ;
  }
}

public void unrelateAcrossR1108From(Activity_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1108From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1108To(Activity_c target)
{
  synchronized (backPointer_ContainsActivityContains_R1108) {
	    backPointer_ContainsActivityContains_R1108.remove(target);
	}
}

public static Subsystem_c getOneS_SSOnR1108(Activity_c [] targets)
{
    return getOneS_SSOnR1108(targets, null);
}

public static Subsystem_c getOneS_SSOnR1108(Activity_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SSOnR1108(targets, test, true);
}

public static Subsystem_c getOneS_SSOnR1108(Activity_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Subsystem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Subsystem_c candidate_val = getOneS_SSOnR1108(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SSOnR1108(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Subsystem_c getOneS_SSOnR1108(Activity_c target)
{
	return getOneS_SSOnR1108(target, true);
}
public static Subsystem_c getOneS_SSOnR1108(Activity_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.Subsystem != null){
		target.Subsystem.loadProxy();
	}
	}
    return target.Subsystem ;
  } else {
    return null;
  }
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SSsOnR1108(targets, test, true);
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Subsystem_c[0];
  
  
  LinkedHashSet<Subsystem_c> elementsSet = new LinkedHashSet<Subsystem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].Subsystem == null)
	  targets[i].loadProxy();
    Subsystem_c associate = targets[i].Subsystem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Subsystem_c[] result = new Subsystem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c [] targets)
{
  return getManyS_SSsOnR1108(targets, null);
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Activity_c [] targetArray = new Activity_c[1];
    targetArray[0] = target;
    return getManyS_SSsOnR1108(targetArray, test, loadComponent);
  } else {
    Subsystem_c [] result = new Subsystem_c [0] ;
    return result ;
  }
  
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SSsOnR1108(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c target)
{
    return getManyS_SSsOnR1108(target, null, true);
}

public static Subsystem_c [] getManyS_SSsOnR1108(Activity_c target, boolean loadComponent)
{
    return getManyS_SSsOnR1108(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsFirstLevelOfPartitioningForDomain == null) {          
      // R1
      Domain_c relInst56315 = (Domain_c) baseRoot.getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56315 == null) {
      			relInst56315 = (Domain_c) Ooaofooa.getDefaultInstance().getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
      		}
			if (relInst56315 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56315 = (Domain_c) roots[i].getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
					if (relInst56315 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56315 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56315) && !isProxy())) {
	      relInst56315.relateAcrossR1To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R1
      // S_DOM
		  inst=IsFirstLevelOfPartitioningForDomain;
			unrelateAcrossR1From(IsFirstLevelOfPartitioningForDomain, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Subsystem_c inst = (Subsystem_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Subsystem_c SubsystemInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Subsystem_c result=findSubsystemInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Subsystem_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSubsystemInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Subsystem_c findSubsystemInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Subsystem_c x = (Subsystem_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Subsystem_c SubsystemInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SubsystemInstance(modelRoot,test,true);
  }
  
  public static Subsystem_c SubsystemInstance(ModelRoot modelRoot)
  {
	 return SubsystemInstance(modelRoot,null,true);
  }

  public static Subsystem_c [] SubsystemInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Subsystem_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Subsystem_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Subsystem_c x = (Subsystem_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Subsystem_c[] ret_set = new Subsystem_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Subsystem_c[0];
			}		
		} 
  }
  public static Subsystem_c [] SubsystemInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SubsystemInstances(modelRoot,test,true);
  }
  public static Subsystem_c [] SubsystemInstances(ModelRoot modelRoot)
  {
	return SubsystemInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Subsystem.dispose call: ";
	SubsystemInSubsystem_c testR42Inst = SubsystemInSubsystem_c.getOneS_SISOnR42(this, false);

	if ( testR42Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "42 ";	
	}
	SubsystemInSubsystem_c testR41Inst = SubsystemInSubsystem_c.getOneS_SISOnR41(this, false);

	if ( testR41Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "41 ";	
	}
	SubsystemInDomain_c testR43Inst = SubsystemInDomain_c.getOneS_SIDOnR43(this, false);

	if ( testR43Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "43 ";
	}
	UseCaseDiagram_c testR1202Inst = UseCaseDiagram_c.getOneUC_UCCOnR1202(this, false);

	if ( testR1202Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1202 ";	
	}
	Sequence_c testR914Inst = Sequence_c.getOneSQ_SOnR914(this, false);

	if ( testR914Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "914 ";	
	}
	Domain_c testR1Inst = Domain_c.getOneS_DOMOnR1(this, false);

	if ( testR1Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1 ";
	}
	ExternalEntityInModel_c testR7Inst = ExternalEntityInModel_c.getOneS_EEMOnR7(this, false);

	if ( testR7Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "7 ";	
	}
	ModelClass_c testR2Inst = ModelClass_c.getOneO_OBJOnR2(this, false);

	if ( testR2Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2 ";	
	}
	Association_c testR4Inst = Association_c.getOneR_RELOnR4(this, false);

	if ( testR4Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4 ";	
	}
	CommunicationPath_c testR5Inst = CommunicationPath_c.getOneCA_COMMOnR5(this, false);

	if ( testR5Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "5 ";	
	}
	AccessPath_c testR6Inst = AccessPath_c.getOneCA_ACCOnR6(this, false);

	if ( testR6Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "6 ";	
	}
	ImportedClass_c testR3Inst = ImportedClass_c.getOneO_IOBJOnR3(this, false);

	if ( testR3Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "3 ";	
	}
	Communication_c testR1131Inst = Communication_c.getOneCOMM_COMMOnR1131(this, false);

	if ( testR1131Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1131 ";	
	}
	Activity_c testR1108Inst = Activity_c.getOneA_AOnR1108(this, false);

	if ( testR1108Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1108 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Subsystem", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("ss_id")){
         return true;
      }
      if(attributeName.equals("dom_id")){
         return true;
      }
      if(attributeName.equals("config_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getSs_id();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getSs_idLongBased()
  {
    if(m_ss_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_ss_id)){
    	return 0xfffffff & m_ss_id.getLeastSignificantBits();
    }
    return m_ss_idLongBased ;
  }
  public java.util.UUID getSs_id()
  {
    return m_ss_id ;
  }


  public void setSs_id(java.util.UUID newValue)
  {
   m_ss_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getPrefix()
  {
    return m_prefix ;
  }


  public void setPrefix(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_prefix)){
	        return;
	    }
	}else if(m_prefix != null){
	    if(m_prefix.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Prefix", m_prefix, newValue,true); 
   m_prefix = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getNum_rng()
  {
    return m_num_rng ;
  }


  public void setNum_rng(int newValue)
  {
    if(m_num_rng == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Num_rng", new Integer(m_num_rng), new Integer(newValue),true);

   m_num_rng = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDom_idLongBased()
  {
    if ( IsFirstLevelOfPartitioningForDomain != null )
    {
      return IsFirstLevelOfPartitioningForDomain.getDom_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDom_id()
  {
    if ( IsFirstLevelOfPartitioningForDomain != null )
    {
      return IsFirstLevelOfPartitioningForDomain.getDom_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDom_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dom_id) )
      return m_dom_id;
    else
      return getDom_id();
  }
  
  public void setDom_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dom_id)){
	        return;
	    }
	}else if(m_dom_id != null){
	    if(m_dom_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dom_id", m_dom_id, newValue,true); 
   m_dom_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getConfig_idLongBased()
  {
    if(m_config_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_config_id)){
    	return 0xfffffff & m_config_id.getLeastSignificantBits();
    }
    return m_config_idLongBased ;
  }
  public java.util.UUID getConfig_id()
  {
    return m_config_id ;
  }


  public void setConfig_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_config_id)){
	        return;
	    }
	}else if(m_config_id != null){
	    if(m_config_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Config_id", m_config_id, newValue,true); 
   m_config_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Subsystem", //$NON-NLS-1$
	  " Operation entered: Subsystem::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Subsystem_c [] objs = Subsystem_c.SubsystemInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Subsystem", //$NON-NLS-1$
	  " Operation entered: Subsystem::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Subsystem_c_test56317_c implements ClassQueryInterface_c
    {
	  Subsystem_c_test56317_c( java.util.UUID            p56318 ) {
	  m_p56318 = p56318;
	  }
	  private java.util.UUID             m_p56318; 
	  public boolean evaluate (Object candidate)
	  {
	      Subsystem_c selected = (Subsystem_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSs_id().equals(m_p56318));
	      return retval;
	  }
    }

    Subsystem_c [] objs56316 = 
    Subsystem_c.SubsystemInstances(modelRoot, new Subsystem_c_test56317_c(getSs_id())) ;

    if ( (  (objs56316.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Subsystem", //$NON-NLS-1$
           "Consistency: Object: Subsystem: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56316.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Subsystem: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56316.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56316.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Subsystem", //$NON-NLS-1$
           "Consistency: Object: Subsystem: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56316.length )  + " SS_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Subsystem: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56316.length )  + " SS_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Subsystem is a referring class in association: rel.Numb = 1
          // The participating class is: Domain
    class Domain_c_test56322_c implements ClassQueryInterface_c
    {
	  Domain_c_test56322_c( java.util.UUID            p56323 ) {
	  m_p56323 = p56323;
	  }
	  private java.util.UUID             m_p56323; 
	  public boolean evaluate (Object candidate)
	  {
	      Domain_c selected = (Domain_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDom_id().equals(m_p56323));
	      return retval;
	  }
    }

    Domain_c [] objs56321 = 
    Domain_c.DomainInstances(modelRoot, new Domain_c_test56322_c(getDom_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56321.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Subsystem", //$NON-NLS-1$
           "Consistency: Object: Subsystem: Association: 1: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56321.length )  + " Dom_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Subsystem: Association: 1: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56321.length )  + " Dom_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Subsystem is a participating class in association: rel.Numb = 41
             // Object: Subsystem in Subsystem
          // Subsystem is a participating class in association: rel.Numb = 42
             // Object: Subsystem in Subsystem
    class SubsystemInSubsystem_c_test56325_c implements ClassQueryInterface_c
    {
	  SubsystemInSubsystem_c_test56325_c( java.util.UUID            p56326 ) {
	  m_p56326 = p56326;
	  }
	  private java.util.UUID             m_p56326; 
	  public boolean evaluate (Object candidate)
	  {
	      SubsystemInSubsystem_c selected = (SubsystemInSubsystem_c) candidate;
	      boolean retval = false;
	      retval = (selected.getChild_ss_id().equals(m_p56326));
	      return retval;
	  }
    }

    SubsystemInSubsystem_c [] objs56324 = 
    SubsystemInSubsystem_c.SubsystemInSubsystemInstances(modelRoot, new SubsystemInSubsystem_c_test56325_c(getSs_id())) ;

    if ( (  (objs56324.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Subsystem", //$NON-NLS-1$
           "Consistency: Object: Subsystem: Association: 42: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56324.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Subsystem: Association: 42: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56324.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 43
            // Link Object: Subsystem in Domain
            // Other Side Class: Domain
          // Subsystem is a participating class in association: rel.Numb = 1202
             // Object: Use Case Diagram
          // Subsystem is a participating class in association: rel.Numb = 914
             // Object: Sequence
          // Subsystem is a participating class in association: rel.Numb = 7
             // Object: External Entity in Model
          // Subsystem is a participating class in association: rel.Numb = 2
             // Object: Model Class
          // Subsystem is a participating class in association: rel.Numb = 4
             // Object: Association
          // Subsystem is a participating class in association: rel.Numb = 5
             // Object: Communication Path
          // Subsystem is a participating class in association: rel.Numb = 6
             // Object: Access Path
          // Subsystem is a participating class in association: rel.Numb = 3
             // Object: Imported Class
          // Subsystem is a participating class in association: rel.Numb = 1131
             // Object: Communication
          // Subsystem is a participating class in association: rel.Numb = 1108
             // Object: Activity
    return retval;
  }


  // declare transform functions
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


if ( (p_At == Justification_c.Center_in_X) )
{

v_result = "«subsystem»" ;



}

else if ( (p_At == Justification_c.Center) )
{

v_result = getName() ;


ModelClass_c [] v_objs = ModelClass_c.getManyO_OBJsOnR2(this);


if ( (! getPrefix().equals("") ||   (v_objs.length != 0)) )
{

v_result = v_result + Gd_c.Newline() + "{" ;



}

if ( (! getPrefix().equals("")) )
{

v_result = v_result + getPrefix() ;



}

int          v_max = 0 ;


int          v_min = Gd_c.Max_number() ;


ModelClass_c  v_obj = null;
for ( int i54942 = 0; i54942 < v_objs.length; i54942++)
{
  v_obj = v_objs[i54942] ;

if ( (v_obj.getNumb() > v_max) )
{

v_max = v_obj.getNumb() ;



}

if ( (v_obj.getNumb() < v_min) )
{

v_min = v_obj.getNumb() ;



}


}

if ( (v_max != 0) )
{

if ( (! getPrefix().equals("")) )
{

v_result = v_result + ", " ;



}

if ( (v_max == v_min) )
{

v_result = v_result + Gd_c.Int_to_string(			    
v_max) ;



}

else
{

v_result = v_result + Gd_c.Int_to_string(			    
v_min) + " - " + Gd_c.Int_to_string(			    
v_max) ;



}


}

if ( (! getPrefix().equals("") ||   (v_objs.length != 0)) )
{

v_result = v_result + "}" ;



}


}

return v_result;



   } // End get_compartment_text
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
return 1;



   } // End get_compartments
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.Folder;



   } // End get_style
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
return 1;



   } // End get_entries
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.None;



   } // End get_text_style
  public  void Newclass()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newclass") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_cl = new ModelClass_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_cl));


  this.relateAcrossR2To(v_cl);


if (v_cl != null) {
v_cl.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newClass
  public  void Newiclass()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newiclass") ; 
               final ModelRoot modelRoot = getModelRoot();
ImportedClass_c v_icl = new ImportedClass_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_icl));


  this.relateAcrossR3To(v_icl);



   } // End newIClass
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getSs_id();



   } // End get_ooa_id
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
setName( Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed Subsystem"			    
,Converttoinstance())) ;



   } // End initialize
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_dom = Domain_c.getOneS_DOMOnR1(this);


if ( (  (v_dom != null)) )
{

this.unrelateAcrossR1From(v_dom);



}

SubsystemInDomain_c v_sid = SubsystemInDomain_c.getOneS_SIDOnR43(this);


if (   (v_sid != null) )
{

Domain_c v_tdom = Domain_c.getOneS_DOMOnR43(v_sid);


if (   (v_tdom != null) )
{

if (v_sid != null) {
v_sid.unrelateAcrossR43From( this ) ; v_sid.unrelateAcrossR43From( v_tdom ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}



}

if (v_sid != null) {
// get the location of this element in the instance list
// before deleting
if ( v_sid.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_sid));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

Subsystem_c [] v_csss = Subsystem_c.getManyS_SSsOnR42(SubsystemInSubsystem_c.getManyS_SISsOnR41(this));


Subsystem_c  v_css = null;
for ( int i54943 = 0; i54943 < v_csss.length; i54943++)
{
  v_css = v_csss[i54943] ;

if (v_css != null) {
v_css.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Association_c [] v_rels = Association_c.getManyR_RELsOnR4(this);


Association_c  v_rel = null;
for ( int i54944 = 0; i54944 < v_rels.length; i54944++)
{
  v_rel = v_rels[i54944] ;

if (v_rel != null) {
v_rel.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ImportedClass_c [] v_iobjs = ImportedClass_c.getManyO_IOBJsOnR3(this);


ImportedClass_c  v_iobj = null;
for ( int i54945 = 0; i54945 < v_iobjs.length; i54945++)
{
  v_iobj = v_iobjs[i54945] ;

if (v_iobj != null) {
v_iobj.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_cps = CommunicationPath_c.getManyCA_COMMsOnR5(this);


CommunicationPath_c  v_cp = null;
for ( int i54946 = 0; i54946 < v_cps.length; i54946++)
{
  v_cp = v_cps[i54946] ;

if (v_cp != null) {
v_cp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

AccessPath_c [] v_aps = AccessPath_c.getManyCA_ACCsOnR6(this);


AccessPath_c  v_ap = null;
for ( int i54947 = 0; i54947 < v_aps.length; i54947++)
{
  v_ap = v_aps[i54947] ;

if (v_ap != null) {
v_ap.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ExternalEntityInModel_c [] v_eems = ExternalEntityInModel_c.getManyS_EEMsOnR7(this);


ExternalEntityInModel_c  v_eem = null;
for ( int i54948 = 0; i54948 < v_eems.length; i54948++)
{
  v_eem = v_eems[i54948] ;

if (v_eem != null) {
v_eem.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ModelClass_c [] v_objs = ModelClass_c.getManyO_OBJsOnR2(this);


ModelClass_c  v_obj = null;
for ( int i54949 = 0; i54949 < v_objs.length; i54949++)
{
  v_obj = v_objs[i54949] ;

if (v_obj != null) {
v_obj.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SubsystemInSubsystem_c v_sis = SubsystemInSubsystem_c.getOneS_SISOnR42(this);


if ( (  (v_sis != null)) )
{

if (v_sis != null) {
v_sis.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Sequence_c [] v_sequences = Sequence_c.getManySQ_SsOnR914(this);


Sequence_c  v_sequence = null;
for ( int i54950 = 0; i54950 < v_sequences.length; i54950++)
{
  v_sequence = v_sequences[i54950] ;

if (v_sequence != null) {
v_sequence.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Communication_c [] v_comms = Communication_c.getManyCOMM_COMMsOnR1131(this);


Communication_c  v_comm = null;
for ( int i54951 = 0; i54951 < v_comms.length; i54951++)
{
  v_comm = v_comms[i54951] ;

if (v_comm != null) {
v_comm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

UseCaseDiagram_c [] v_uccs = UseCaseDiagram_c.getManyUC_UCCsOnR1202(this);


UseCaseDiagram_c  v_ucc = null;
for ( int i54952 = 0; i54952 < v_uccs.length; i54952++)
{
  v_ucc = v_uccs[i54952] ;

if (v_ucc != null) {
v_ucc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Activity_c [] v_acts = Activity_c.getManyA_AsOnR1108(this);


Activity_c  v_act = null;
for ( int i54953 = 0; i54953 < v_acts.length; i54953++)
{
  v_act = v_acts[i54953] ;

if (v_act != null) {
v_act.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Newsubsystem()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newsubsystem") ; 
               final ModelRoot modelRoot = getModelRoot();
SubsystemInSubsystem_c v_sis = new SubsystemInSubsystem_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sis));


Subsystem_c v_child = new Subsystem_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_child));


if (v_sis != null) {
  v_sis.relateAcrossR42To(v_child);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR41To(v_sis);


Domain_c v_dom = Domain_c.getOneS_DOMOnR1(this);


if (v_dom != null) {
  v_dom.relateAcrossR1To(v_child);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_child != null) {
v_child.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newSubsystem
  public  boolean      Newassociation(final java.util.UUID         p_From,final boolean      p_Fromisimportedclass,final java.util.UUID         p_To,final boolean      p_Toisimportedclass)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newassociation") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ModelClass_test55626_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_From)) ;
	}
  }
ModelClass_c v_fromClass = ModelClass_c.getOneO_OBJOnR2(this, new ModelClass_test55626_c());


  class ImportedClass_test55627_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return (selected.getIobj_id().equals(p_From)) ;
	}
  }
ImportedClass_c v_fromIClass = ImportedClass_c.getOneO_IOBJOnR3(this, new ImportedClass_test55627_c());


if ( (p_Fromisimportedclass) )
{

if ( (  (v_fromIClass != null)) )
{

v_fromClass = ModelClass_c.getOneO_OBJOnR101(v_fromIClass);



}


}

  class ModelClass_test55628_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_To)) ;
	}
  }
ModelClass_c v_toClass = ModelClass_c.getOneO_OBJOnR2(this, new ModelClass_test55628_c());


  class ImportedClass_test55629_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return (selected.getIobj_id().equals(p_To)) ;
	}
  }
ImportedClass_c v_toIClass = ImportedClass_c.getOneO_IOBJOnR3(this, new ImportedClass_test55629_c());


if ( (p_Toisimportedclass) )
{

if ( (  (v_toIClass != null)) )
{

v_toClass = ModelClass_c.getOneO_OBJOnR101(v_toIClass);



}


}

if ( (  (v_fromClass != null) &&   (v_toClass != null)) )
{

Association_c v_assoc = new Association_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_assoc));


  this.relateAcrossR4To(v_assoc);


if (v_assoc != null) {
v_assoc.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


SimpleAssociation_c v_simp = new SimpleAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_simp));


if (v_simp != null) {
  v_simp.relateAcrossR206To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassInAssociation_c v_fromOIR = new ClassInAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_fromOIR));


if (v_fromOIR != null) {
  v_fromOIR.relateAcrossR201To( v_fromClass ) ;   v_fromOIR.relateAcrossR201To( v_assoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


ReferredToClassInAssoc_c v_fromRTO = new ReferredToClassInAssoc_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_fromRTO));


if (v_fromOIR != null) {
  v_fromOIR.relateAcrossR203To(v_fromRTO);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsSimpleParticipant_c v_fromPART = new ClassAsSimpleParticipant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_fromPART));


if (v_fromPART != null) {
  v_fromPART.relateAcrossR204To(v_fromRTO);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_fromPART != null) {
  v_fromPART.relateAcrossR207To(v_simp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (p_Fromisimportedclass) )
{

if ( (  (v_fromIClass != null)) )
{

if (v_fromOIR != null) {
  v_fromOIR.relateAcrossR202To(v_fromIClass);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

ClassInAssociation_c v_toOIR = new ClassInAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_toOIR));


if (v_toOIR != null) {
  v_toOIR.relateAcrossR201To( v_toClass ) ;   v_toOIR.relateAcrossR201To( v_assoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


ReferredToClassInAssoc_c v_toRTO = new ReferredToClassInAssoc_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_toRTO));


if (v_toOIR != null) {
  v_toOIR.relateAcrossR203To(v_toRTO);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsSimpleParticipant_c v_toPART = new ClassAsSimpleParticipant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_toPART));


if (v_toPART != null) {
  v_toPART.relateAcrossR204To(v_toRTO);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_toPART != null) {
  v_toPART.relateAcrossR207To(v_simp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (p_Toisimportedclass) )
{

if ( (  (v_toIClass != null)) )
{

if (v_toOIR != null) {
  v_toOIR.relateAcrossR202To(v_toIClass);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

return true;



}

return false;



   } // End newAssociation
  public  boolean      Newassociative(final java.util.UUID         p_From,final boolean      p_Fromisimportedclass,final java.util.UUID         p_To,final boolean      p_Toisimportedclass)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newassociative") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ModelClass_test55630_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_From)) ;
	}
  }
ModelClass_c v_fromClass = ModelClass_c.getOneO_OBJOnR2(this, new ModelClass_test55630_c());


if ( (p_Fromisimportedclass) )
{

  class ImportedClass_test55631_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return (selected.getIobj_id().equals(p_From)) ;
	}
  }
ImportedClass_c v_fromIClass = ImportedClass_c.getOneO_IOBJOnR3(this, new ImportedClass_test55631_c());


if ( (  (v_fromIClass != null)) )
{

v_fromClass = ModelClass_c.getOneO_OBJOnR101(v_fromIClass);



}


}

  class Association_test55632_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Association_c selected = (Association_c)candidate;
		return (selected.getRel_id().equals(p_To)) ;
	}
  }
Association_c v_toAssoc = Association_c.getOneR_RELOnR4(this, new Association_test55632_c());


ModelClass_c [] v_classes = ModelClass_c.getManyO_OBJsOnR201(ClassInAssociation_c.getManyR_OIRsOnR201(v_toAssoc));


ModelClass_c  v_clazz = null;
for ( int i54954 = 0; i54954 < v_classes.length; i54954++)
{
  v_clazz = v_classes[i54954] ;

if ( (v_clazz == v_fromClass) )
{

return false;



}


}

if ( (  (v_fromClass == null) ||   (v_toAssoc == null)) )
{

return false;



}

SimpleAssociation_c v_simp = SimpleAssociation_c.getOneR_SIMPOnR206(v_toAssoc);


if ( (  (v_simp == null)) )
{

return false;



}

else
{

if ( (p_Fromisimportedclass) )
{

if (v_simp != null) {
v_simp.Migratetolinked(			    
p_From			    
,v_fromClass.getObj_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if (v_simp != null) {
v_simp.Migratetolinked(			    
Gd_c.Null_unique_id()			    
,v_fromClass.getObj_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

return true;



}


   } // End newAssociative
  public  boolean      Newsubtype(final java.util.UUID         p_From,final boolean      p_Fromisimportedclass,final java.util.UUID         p_To,final boolean      p_Toisimportedclass)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newsubtype") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ModelClass_test55633_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_From)) ;
	}
  }
ModelClass_c v_fromClass = ModelClass_c.getOneO_OBJOnR2(this, new ModelClass_test55633_c());


if ( (p_Fromisimportedclass) )
{

  class ImportedClass_test55634_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return (selected.getIobj_id().equals(p_From)) ;
	}
  }
ImportedClass_c v_fromIClass = ImportedClass_c.getOneO_IOBJOnR3(this, new ImportedClass_test55634_c());


if ( (  (v_fromIClass != null)) )
{

v_fromClass = ModelClass_c.getOneO_OBJOnR101(v_fromIClass);



}


}

if ( (  (v_fromClass != null)) )
{

  class Association_test55635_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Association_c selected = (Association_c)candidate;
		return (selected.getRel_id().equals(p_To)) ;
	}
  }
Association_c v_toAssoc = Association_c.getOneR_RELOnR4(this, new Association_test55635_c());


if ( (  (v_toAssoc != null)) )
{

SubtypeSupertypeAssociation_c v_subsup = SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206(v_toAssoc);


if ( (  (v_subsup != null)) )
{

ModelClass_c v_superClass = ModelClass_c.getOneO_OBJOnR201(ClassInAssociation_c.getOneR_OIROnR203(ReferredToClassInAssoc_c.getOneR_RTOOnR204(ClassAsSupertype_c.getOneR_SUPEROnR212(v_subsup))));


if ( (v_fromClass != v_superClass) )
{

boolean      v_isAlreadySubClass = false ;


ModelClass_c [] v_subClasses = ModelClass_c.getManyO_OBJsOnR201(ClassInAssociation_c.getManyR_OIRsOnR203(ReferringClassInAssoc_c.getManyR_RGOsOnR205(ClassAsSubtype_c.getManyR_SUBsOnR213(v_subsup))));


ModelClass_c  v_subClass = null;
for ( int i54955 = 0; i54955 < v_subClasses.length; i54955++)
{
  v_subClass = v_subClasses[i54955] ;

if ( (v_fromClass == v_subClass) )
{

v_isAlreadySubClass = true ;


break;



}


}

if ( (  !v_isAlreadySubClass) )
{

ClassInAssociation_c v_cir = new ClassInAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_cir));


if (v_cir != null) {
  v_cir.relateAcrossR201To( v_fromClass ) ;   v_cir.relateAcrossR201To( v_toAssoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if ( (p_Fromisimportedclass) )
{

  class ImportedClass_test55636_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return (selected.getIobj_id().equals(p_From)) ;
	}
  }
ImportedClass_c v_fromIClass = ImportedClass_c.getOneO_IOBJOnR3(this, new ImportedClass_test55636_c());


if (v_cir != null) {
  v_cir.relateAcrossR202To(v_fromIClass);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

ReferringClassInAssoc_c v_rgo = new ReferringClassInAssoc_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_rgo));


if (v_cir != null) {
  v_cir.relateAcrossR203To(v_rgo);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsSubtype_c v_subtype = new ClassAsSubtype_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_subtype));


if (v_rgo != null) {
  v_rgo.relateAcrossR205To(v_subtype);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_subtype != null) {
  v_subtype.relateAcrossR213To(v_subsup);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (v_toAssoc.Isformalized()) )
{

int          v_unused_oid = v_fromClass.Findunusedidentifier() ;


ReferredToClassInAssoc_c v_sup_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(ClassAsSupertype_c.getOneR_SUPEROnR212(v_subsup));


ClassIdentifierAttribute_c [] v_oida_set = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(ClassIdentifier_c.getManyO_IDsOnR109(v_sup_rto));


ClassIdentifierAttribute_c  v_oida = null;
for ( int i54956 = 0; i54956 < v_oida_set.length; i54956++)
{
  v_oida = v_oida_set[i54956] ;

java.util.UUID         v_newAttr_id = v_oida.Addreference(			    
v_unused_oid			    
,v_toAssoc.getRel_id()			    
,v_rgo.getObj_id()			    
,v_rgo.getOir_id()			    
,v_sup_rto.getObj_id()			    
,v_sup_rto.getOir_id()) ;



}


}

return true;



}


}


}


}


}

return false;



   } // End newSubtype
  public  boolean      Newsupertype(final java.util.UUID         p_From,final boolean      p_Fromisimportedclass,final java.util.UUID         p_To,final boolean      p_Toisimportedclass)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newsupertype") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ModelClass_test55637_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_From)) ;
	}
  }
ModelClass_c v_fromClass = ModelClass_c.getOneO_OBJOnR2(this, new ModelClass_test55637_c());


  class ImportedClass_test55638_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return (selected.getIobj_id().equals(p_From)) ;
	}
  }
ImportedClass_c v_fromIClass = ImportedClass_c.getOneO_IOBJOnR3(this, new ImportedClass_test55638_c());


if ( (p_Fromisimportedclass) )
{

if ( (  (v_fromIClass != null)) )
{

v_fromClass = ModelClass_c.getOneO_OBJOnR101(v_fromIClass);



}


}

if ( (  (v_fromClass != null)) )
{

Association_c v_assoc = new Association_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_assoc));


  this.relateAcrossR4To(v_assoc);


if (v_assoc != null) {
v_assoc.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


ClassInAssociation_c v_oir = new ClassInAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_oir));


if (v_oir != null) {
  v_oir.relateAcrossR201To( v_assoc ) ;   v_oir.relateAcrossR201To( v_fromClass ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


ReferredToClassInAssoc_c v_rto = new ReferredToClassInAssoc_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_rto));


if (v_oir != null) {
  v_oir.relateAcrossR203To(v_rto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


SubtypeSupertypeAssociation_c v_subsup = new SubtypeSupertypeAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_subsup));


if (v_subsup != null) {
  v_subsup.relateAcrossR206To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsSupertype_c v_supertype = new ClassAsSupertype_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_supertype));


if (v_supertype != null) {
  v_supertype.relateAcrossR212To(v_subsup);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_supertype != null) {
  v_supertype.relateAcrossR204To(v_rto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (p_Fromisimportedclass) )
{

if ( (  (v_fromIClass != null)) )
{

if (v_oir != null) {
  v_oir.relateAcrossR202To(v_fromIClass);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

return true;



}

return false;



   } // End newSuperType
  public  void Newsequence()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newsequence") ; 
               final ModelRoot modelRoot = getModelRoot();
Sequence_c v_sequence = new Sequence_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sequence));


SpecificationPackage_c v_sp = new SpecificationPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sp));


if (v_sequence != null) {
  v_sequence.relateAcrossR1402To(v_sp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR914To(v_sequence);


if (v_sequence != null) {
v_sequence.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newSequence
  public  String       Getpath(final String       p_Path)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getpath") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_path = getName() ;


if ( (! p_Path.equals("")) )
{

v_path = v_path + "::" + p_Path ;



}

Domain_c v_domain = Domain_c.getOneS_DOMOnR43(SubsystemInDomain_c.getOneS_SIDOnR43(this));


if ( (  (v_domain != null)) )
{

return v_domain.Getpath(			    
v_path);



}

else
{

Subsystem_c v_spkg = Subsystem_c.getOneS_SSOnR41(SubsystemInSubsystem_c.getOneS_SISOnR42(this));


if ( (  (v_spkg != null)) )
{

return v_spkg.Getpath(			    
v_path);



}


}

return v_path;



   } // End getPath
  public  void Newcommunication()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newcommunication") ; 
               final ModelRoot modelRoot = getModelRoot();
Communication_c v_communication = new Communication_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_communication));


SpecificationPackage_c v_sp = new SpecificationPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sp));


if (v_communication != null) {
  v_communication.relateAcrossR1402To(v_sp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1131To(v_communication);


if (v_communication != null) {
v_communication.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newCommunication
  public  void Newusecasepackage()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newusecasepackage") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseDiagram_c v_ucc = new UseCaseDiagram_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ucc));


SpecificationPackage_c v_sp = new SpecificationPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sp));


if (v_ucc != null) {
  v_ucc.relateAcrossR1402To(v_sp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1202To(v_ucc);


if (v_ucc != null) {
v_ucc.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newUseCasePackage
  public  void Newactivity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Newactivity") ; 
               final ModelRoot modelRoot = getModelRoot();
Activity_c v_a = new Activity_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_a));


SpecificationPackage_c v_sp = new SpecificationPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sp));


if (v_a != null) {
  v_a.relateAcrossR1402To(v_sp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1108To(v_a);


if (v_a != null) {
v_a.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newActivity
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  void Pastemodelclass(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pastemodelclass") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = (ModelClass_c) modelRoot.getInstanceList(ModelClass_c.class).getGlobal(null, p_Id);


if ( (  (v_clazz != null)) )
{

Subsystem_c v_existingSS = Subsystem_c.getOneS_SSOnR2(v_clazz);


if ( (  (v_existingSS != null)) )
{

if (v_clazz != null) {
v_clazz.unrelateAcrossR2From(v_existingSS);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_clazz != null) {
  v_clazz.relateAcrossR2To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Attribute_c [] v_attributes = Attribute_c.getManyO_ATTRsOnR102(v_clazz);


Attribute_c  v_attribute = null;
for ( int i54957 = 0; i54957 < v_attributes.length; i54957++)
{
  v_attribute = v_attributes[i54957] ;

boolean      v_result = v_clazz.Removeincompletereferential(			    
v_attribute.getAttr_id()) ;



}

if (v_clazz != null) {
v_clazz.Rename(			    
Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_clazz.Converttoinstance()			    
,v_clazz.getName()			    
,Converttoinstance()) ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_clazz != null) {
v_clazz.Removeincompletenonlocalevents() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteModelClass
  public  void Pasteassociation(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pasteassociation") ; 
               final ModelRoot modelRoot = getModelRoot();
Association_c v_association = (Association_c) modelRoot.getInstanceList(Association_c.class).getGlobal(null, p_Id);


if ( (  (v_association != null)) )
{

boolean      v_relateToSS = true ;


Subsystem_c v_subsystem = Subsystem_c.getOneS_SSOnR4(v_association);


if ( (  (v_subsystem != null)) )
{

if ( (v_subsystem != this) )
{

if (v_association != null) {
v_association.unrelateAcrossR4From(v_subsystem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

else
{

v_relateToSS = false ;



}


}

if ( (v_relateToSS) )
{

  class Association_test55639_c implements ClassQueryInterface_c
  {
	Association_test55639_c( int          p55640 ) {
		m_p55640 = p55640;
	}
	private int          m_p55640;
	public boolean evaluate (Object candidate)
	{
		Association_c selected = (Association_c)candidate;
		return (selected.getNumb() == m_p55640) ;
	}
  }
Association_c v_existingAssoc = Association_c.getOneR_RELOnR4(this, new Association_test55639_c(v_association.getNumb()));


if ( (  (v_existingAssoc != null)) )
{

Association_c [] v_assocs = Association_c.getManyR_RELsOnR4(this);


Association_c  v_assoc = null;
for ( int i54958 = 0; i54958 < v_assocs.length; i54958++)
{
  v_assoc = v_assocs[i54958] ;

if ( (v_assoc.getNumb() >= v_association.getNumb()) )
{

if (v_association != null) {
  v_association.setNumb( v_assoc.getNumb() + 1) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}


}

  this.relateAcrossR4To(v_association);



}


}


   } // End pasteAssociation
  public  void Pasteclassaslink(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pasteclassaslink") ; 
               final ModelRoot modelRoot = getModelRoot();
Pasteassociation(			    
p_Id ) ;



   } // End pasteClassAsLink
  public  void Pasteclassassubtype(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pasteclassassubtype") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ClassAsSubtype_test55474_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassAsSubtype_c selected = (ClassAsSubtype_c)candidate;
		return (selected.getOir_id().equals(p_Id)) ;
	}
  }
ClassAsSubtype_c v_subtype = ClassAsSubtype_c.ClassAsSubtypeInstance(modelRoot, new ClassAsSubtype_test55474_c()) ;


if ( (  (v_subtype != null)) )
{

Association_c v_assoc = Association_c.getOneR_RELOnR206(SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR213(v_subtype));


Pasteassociation(			    
v_assoc.getRel_id() ) ;



}


   } // End pasteClassAsSubtype
  public  void Pasteimportedclass(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pasteimportedclass") ; 
               final ModelRoot modelRoot = getModelRoot();
ImportedClass_c v_iobj = (ImportedClass_c) modelRoot.getInstanceList(ImportedClass_c.class).getGlobal(null, p_Id);


if ( (  (v_iobj != null)) )
{

Subsystem_c v_existingSS = Subsystem_c.getOneS_SSOnR3(v_iobj);


if ( (  (v_existingSS != null)) )
{

if (v_iobj != null) {
v_iobj.unrelateAcrossR3From(v_existingSS);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

  this.relateAcrossR3To(v_iobj);



}


   } // End pasteImportedClass
  public  void Pastesubsystem(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pastesubsystem") ; 
               final ModelRoot modelRoot = getModelRoot();
Subsystem_c v_subsystem = (Subsystem_c) modelRoot.getInstanceList(Subsystem_c.class).getGlobal(null, p_Id);


if ( (  (v_subsystem != null)) )
{

Domain_c v_existingDOM = Domain_c.getOneS_DOMOnR1(v_subsystem);


if ( (  (v_existingDOM != null)) )
{

if (v_subsystem != null) {
v_subsystem.unrelateAcrossR1From(v_existingDOM);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

SubsystemInSubsystem_c v_existingSIS = SubsystemInSubsystem_c.getOneS_SISOnR42(v_subsystem);


if ( (  (v_existingSIS != null)) )
{

Subsystem_c v_existingSS = Subsystem_c.getOneS_SSOnR41(v_existingSIS);


if ( (  (v_existingSS != null)) )
{

if (v_existingSIS != null) {
v_existingSIS.unrelateAcrossR41From(v_existingSS);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}


}

if (v_subsystem != null) {
  v_subsystem.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_subsystem.Converttoinstance()			    
,v_subsystem.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Domain_c v_domain = Domain_c.getOneS_DOMOnR1(this);


if (v_subsystem != null) {
v_subsystem.Associatechildsubsystemstodomain(			    
v_domain.getDom_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if ( (  (v_existingSIS == null)) )
{

v_existingSIS = new SubsystemInSubsystem_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_existingSIS));


SubsystemInDomain_c v_sid = SubsystemInDomain_c.getOneS_SIDOnR43(v_subsystem);


if ( (  (v_sid != null)) )
{

v_existingDOM = Domain_c.getOneS_DOMOnR43(v_sid);


if (v_sid != null) {
v_sid.unrelateAcrossR43From( v_subsystem ) ; v_sid.unrelateAcrossR43From( v_existingDOM ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_sid != null) {
// get the location of this element in the instance list
// before deleting
if ( v_sid.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_sid));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}


}

  this.relateAcrossR41To(v_existingSIS);


if (v_subsystem != null) {
  v_subsystem.relateAcrossR42To(v_existingSIS);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_subsystem != null) {
  v_subsystem.relateAcrossR1To(v_domain);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_subsystem != null) {
v_subsystem.Removeincompletenonlocalevents() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteSubsystem
  public  void Associatechildsubsystemstodomain(final java.util.UUID         p_Dom_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Associatechildsubsystemstodomain") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_domain = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, p_Dom_id);


if ( (  (v_domain != null)) )
{

Subsystem_c [] v_childSSs = Subsystem_c.getManyS_SSsOnR42(SubsystemInSubsystem_c.getManyS_SISsOnR41(this));


Subsystem_c  v_childSS = null;
for ( int i54959 = 0; i54959 < v_childSSs.length; i54959++)
{
  v_childSS = v_childSSs[i54959] ;

Domain_c v_existingDom = Domain_c.getOneS_DOMOnR1(v_childSS);


if (v_childSS != null) {
v_childSS.unrelateAcrossR1From(v_existingDom);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_childSS != null) {
  v_childSS.relateAcrossR1To(v_domain);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_childSS != null) {
v_childSS.Associatechildsubsystemstodomain(			    
p_Dom_id ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End associateChildSubsystemsToDomain
  public  void Removeincompletenonlocalevents()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Removeincompletenonlocalevents") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c [] v_clazzes = ModelClass_c.getManyO_OBJsOnR2(this);


ModelClass_c  v_clazz = null;
for ( int i54960 = 0; i54960 < v_clazzes.length; i54960++)
{
  v_clazz = v_clazzes[i54960] ;

if (v_clazz != null) {
v_clazz.Removeincompletenonlocalevents() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Subsystem_c [] v_subsystems = Subsystem_c.getManyS_SSsOnR42(SubsystemInSubsystem_c.getManyS_SISsOnR41(this));


Subsystem_c  v_subsystem = null;
for ( int i54961 = 0; i54961 < v_subsystems.length; i54961++)
{
  v_subsystem = v_subsystems[i54961] ;

if (v_subsystem != null) {
v_subsystem.Removeincompletenonlocalevents() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End removeIncompleteNonLocalEvents
  public  void Pasteactivity(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pasteactivity") ; 
               final ModelRoot modelRoot = getModelRoot();
Activity_c v_activity = (Activity_c) modelRoot.getInstanceList(Activity_c.class).getGlobal(null, p_Id);


if ( (  (v_activity != null)) )
{

if (v_activity != null) {
  v_activity.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_activity.Converttoinstance()			    
,v_activity.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_activity != null) {
v_activity.Associatewithsubsystem(			    
getSs_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteActivity
  public  void Pastecommunication(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pastecommunication") ; 
               final ModelRoot modelRoot = getModelRoot();
Communication_c v_comm = (Communication_c) modelRoot.getInstanceList(Communication_c.class).getGlobal(null, p_Id);


if ( (  (v_comm != null)) )
{

if (v_comm != null) {
  v_comm.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_comm.Converttoinstance()			    
,v_comm.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_comm != null) {
v_comm.Associatewithsubsystem(			    
getSs_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteCommunication
  public  void Pastesequence(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pastesequence") ; 
               final ModelRoot modelRoot = getModelRoot();
Sequence_c v_seq = (Sequence_c) modelRoot.getInstanceList(Sequence_c.class).getGlobal(null, p_Id);


if ( (  (v_seq != null)) )
{

if (v_seq != null) {
  v_seq.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_seq.Converttoinstance()			    
,v_seq.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_seq != null) {
v_seq.Associatewithsubsystem(			    
getSs_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteSequence
  public  void Pasteusecasediagram(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Pasteusecasediagram") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseDiagram_c v_ucd = (UseCaseDiagram_c) modelRoot.getInstanceList(UseCaseDiagram_c.class).getGlobal(null, p_Id);


if ( (  (v_ucd != null)) )
{

if (v_ucd != null) {
  v_ucd.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_ucd.Converttoinstance()			    
,v_ucd.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_ucd != null) {
v_ucd.Associatewithsubsystem(			    
getSs_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteUseCaseDiagram
  public  java.util.UUID         Getcontainingcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getcontainingcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_domain = Domain_c.getOneS_DOMOnR1(this);


return v_domain.Getcontainingcomponentid();



   } // End getContainingComponentId
  public  int          Getclasscount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getclasscount") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c [] v_classes = ModelClass_c.getManyO_OBJsOnR2(this);


return   (v_classes.length);



   } // End getClassCount
  public  java.util.UUID         Getclassid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getclassid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


ModelClass_c [] v_classes = ModelClass_c.getManyO_OBJsOnR2(this);


int          v_count = -1 ;


ModelClass_c  v_modelClass = null;
for ( int i54962 = 0; i54962 < v_classes.length; i54962++)
{
  v_modelClass = v_classes[i54962] ;

if ( (  (v_modelClass != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_modelClass.Get_ooa_id();



}


}

return v_id;



   } // End getClassId
  public  int          Getimportedclasscount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getimportedclasscount") ; 
               final ModelRoot modelRoot = getModelRoot();
ImportedClass_c [] v_importedClasses = ImportedClass_c.getManyO_IOBJsOnR3(this);


return   (v_importedClasses.length);



   } // End getImportedClassCount
  public  java.util.UUID         Getimportedclassid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getimportedclassid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


ImportedClass_c [] v_importedClasses = ImportedClass_c.getManyO_IOBJsOnR3(this);


int          v_count = -1 ;


ImportedClass_c  v_importedClass = null;
for ( int i54963 = 0; i54963 < v_importedClasses.length; i54963++)
{
  v_importedClass = v_importedClasses[i54963] ;

if ( (  (v_importedClass != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_importedClass.Get_ooa_id();



}


}

return v_id;



   } // End getImportedClassId
  public  int          Getsubsystemcount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getsubsystemcount") ; 
               final ModelRoot modelRoot = getModelRoot();
Subsystem_c [] v_subsystems = Subsystem_c.getManyS_SSsOnR42(SubsystemInSubsystem_c.getManyS_SISsOnR41(this));


return   (v_subsystems.length);



   } // End getSubsystemCount
  public  java.util.UUID         Getsubsystemid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getsubsystemid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


Subsystem_c [] v_subsystems = Subsystem_c.getManyS_SSsOnR42(SubsystemInSubsystem_c.getManyS_SISsOnR41(this));


int          v_count = -1 ;


Subsystem_c  v_subsystem = null;
for ( int i54964 = 0; i54964 < v_subsystems.length; i54964++)
{
  v_subsystem = v_subsystems[i54964] ;

if ( (  (v_subsystem != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_subsystem.Get_ooa_id();



}


}

return v_id;



   } // End getSubsystemId
  public  int          Getsequencecount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getsequencecount") ; 
               final ModelRoot modelRoot = getModelRoot();
Sequence_c [] v_sequences = Sequence_c.getManySQ_SsOnR914(this);


return   (v_sequences.length);



   } // End getSequenceCount
  public  java.util.UUID         Getsequenceid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getsequenceid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


Sequence_c [] v_sequences = Sequence_c.getManySQ_SsOnR914(this);


int          v_count = -1 ;


Sequence_c  v_sequence = null;
for ( int i54965 = 0; i54965 < v_sequences.length; i54965++)
{
  v_sequence = v_sequences[i54965] ;

if ( (  (v_sequence != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_sequence.Get_ooa_id();



}


}

return v_id;



   } // End getSequenceId
  public  int          Getcommunicationcount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getcommunicationcount") ; 
               final ModelRoot modelRoot = getModelRoot();
Communication_c [] v_communications = Communication_c.getManyCOMM_COMMsOnR1131(this);


return   (v_communications.length);



   } // End getCommunicationCount
  public  java.util.UUID         Getcommunicationid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getcommunicationid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


Communication_c [] v_communications = Communication_c.getManyCOMM_COMMsOnR1131(this);


int          v_count = -1 ;


Communication_c  v_communication = null;
for ( int i54966 = 0; i54966 < v_communications.length; i54966++)
{
  v_communication = v_communications[i54966] ;

if ( (  (v_communication != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_communication.Get_ooa_id();



}


}

return v_id;



   } // End getCommunicationId
  public  int          Getusecasecount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getusecasecount") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseDiagram_c [] v_useCases = UseCaseDiagram_c.getManyUC_UCCsOnR1202(this);


return   (v_useCases.length);



   } // End getUseCaseCount
  public  java.util.UUID         Getusecaseid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getusecaseid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


UseCaseDiagram_c [] v_usecases = UseCaseDiagram_c.getManyUC_UCCsOnR1202(this);


int          v_count = -1 ;


UseCaseDiagram_c  v_usecase = null;
for ( int i54967 = 0; i54967 < v_usecases.length; i54967++)
{
  v_usecase = v_usecases[i54967] ;

if ( (  (v_usecase != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_usecase.Get_ooa_id();



}


}

return v_id;



   } // End getUseCaseId
  public  int          Getactivitycount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getactivitycount") ; 
               final ModelRoot modelRoot = getModelRoot();
Activity_c [] v_activities = Activity_c.getManyA_AsOnR1108(this);


return   (v_activities.length);



   } // End getActivityCount
  public  java.util.UUID         Getactivityid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getactivityid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


Activity_c [] v_activities = Activity_c.getManyA_AsOnR1108(this);


int          v_count = -1 ;


Activity_c  v_activity = null;
for ( int i54968 = 0; i54968 < v_activities.length; i54968++)
{
  v_activity = v_activities[i54968] ;

if ( (  (v_activity != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_activity.Get_ooa_id();



}


}

return v_id;



   } // End getActivityId
  public  java.util.UUID         Getsystemid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Getsystemid") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_domain = Domain_c.getOneS_DOMOnR1(this);


if (   (v_domain != null) )
{

return v_domain.Getsystemid();



}

User_c.Logerror(			    
"Subsystem.getSystemId()::No domain found."			    
,Getpath(			    
getName()) ) ;


return Gd_c.Null_unique_id();



   } // End getSystemId
  public  void Removeincompletesignalevents()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Subsystem", " Operation entered: Subsystem::Removeincompletesignalevents") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c [] v_clazzes = ModelClass_c.getManyO_OBJsOnR2(this);


ModelClass_c  v_clazz = null;
for ( int i54969 = 0; i54969 < v_clazzes.length; i54969++)
{
  v_clazz = v_clazzes[i54969] ;

if (v_clazz != null) {
v_clazz.Removeincompletesignalevents() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Subsystem_c [] v_subsystems = Subsystem_c.getManyS_SSsOnR42(SubsystemInSubsystem_c.getManyS_SISsOnR41(this));


Subsystem_c  v_subsystem = null;
for ( int i54970 = 0; i54970 < v_subsystems.length; i54970++)
{
  v_subsystem = v_subsystems[i54970] ;

if (v_subsystem != null) {
v_subsystem.Removeincompletesignalevents() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End removeIncompleteSignalEvents

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	if (adapter == org.eclipse.core.resources.IResource.class) {
        PersistableModelComponent comp = getPersistableComponent(false);
        if ( comp != null )
        {
        	return comp.getFile().getParent();
        }
	}else if(adapter == org.eclipse.core.resources.IFile.class) {
        PersistableModelComponent comp = getPersistableComponent(false);
        if ( comp != null )
        {
            return comp.getFile();
        }
	}
	  return null;
  }
} // end Subsystem
