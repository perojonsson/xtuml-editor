      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Enumerator_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_ENUMERATOR extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Enumerator_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Enumerator_c(ModelRoot modelRoot,
       java.util.UUID         p_m_enum_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_edt_dt_id,
       java.util.UUID         p_m_previous_enum_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_enum_id = IdAssigner.preprocessUUID(p_m_enum_id);
       //extract 28 bit value only            
       m_enum_idLongBased = 0xfffffff & p_m_enum_id.getLeastSignificantBits();
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_enum_id = IdAssigner.preprocessUUID(p_m_previous_enum_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_edt_dt_id = IdAssigner.preprocessUUID(p_m_edt_dt_id);
        
    setUniqueId(m_enum_id);
    Object [] key = {m_enum_id};
    addInstanceToMap(key);
  }
  static public Enumerator_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_enum_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_edt_dt_id,
       java.util.UUID         p_m_previous_enum_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);
      Enumerator_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_enum_id};
          new_inst = (Enumerator_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_enum_id = IdAssigner.preprocessUUID(p_m_enum_id);
       //extract 28 bit value only            
       new_inst.m_enum_idLongBased = 0xfffffff & p_m_enum_id.getLeastSignificantBits();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_enum_id = IdAssigner.preprocessUUID(p_m_previous_enum_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_edt_dt_id = IdAssigner.preprocessUUID(p_m_edt_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Enumerator_c(modelRoot,
p_m_enum_id,
p_m_name,
p_m_descrip,
p_m_edt_dt_id,
p_m_previous_enum_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Enumerator_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_enum_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_edt_dt_id,
       java.util.UUID         p_m_previous_enum_id){
    InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);
    Enumerator_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_enum_id
            };
        source = (Enumerator_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_enum_id = IdAssigner.preprocessUUID(p_m_enum_id);
       //extract 28 bit value only            
       source.m_enum_idLongBased = 0xfffffff & p_m_enum_id.getLeastSignificantBits();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_enum_id = IdAssigner.preprocessUUID(p_m_previous_enum_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_edt_dt_id = IdAssigner.preprocessUUID(p_m_edt_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Enumerator_c new_inst = new Enumerator_c(modelRoot,
p_m_enum_id,
p_m_name,
p_m_descrip,
p_m_edt_dt_id,
p_m_previous_enum_id
);
    return new_inst;
  }
  public Enumerator_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_enum_id = idAssigner.createUUID();
     m_name = "";   
     m_descrip = "";   
     m_previous_enum_id = IdAssigner.NULL_UUID;   
     m_edt_dt_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_enum_id);
    Object [] key = {m_enum_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_enum_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_enum_id !=  p_newKey ){
	
		m_enum_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Enumerator_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Enumerator_c)) {
           return false;
       }
       
       Enumerator_c me = (Enumerator_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getEnum_id()) || IdAssigner.NULL_UUID.equals(((Enumerator_c)elem).getEnum_id())) && this != elem)) {
      	return false;
      }
      if (!getEnum_id().equals(((Enumerator_c)elem).getEnum_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Enumerator_c)) {
           return false;
       }
       
       Enumerator_c me = (Enumerator_c)elem;
      if (!getEnum_id().equals(((Enumerator_c)elem).getEnum_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_enum_id ;
  private long m_enum_idLongBased ;
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_previous_enum_id ;
  private java.util.UUID         m_edt_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

EnumerationDataType_c IsDefinedByEnumerationDataType ;
public void relateAcrossR27To(EnumerationDataType_c target)
{
	relateAcrossR27To(target, true);
}
public void relateAcrossR27To(EnumerationDataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDefinedByEnumerationDataType) return;  // already related

    if ( IsDefinedByEnumerationDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDefinedByEnumerationDataType != null) {
    
        IsDefinedByEnumerationDataType.clearBackPointerR27To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Enumerator_c.relateAcrossR27To(EnumerationDataType_c target)", 
			"Relate performed across R27 from Enumerator to Enumeration Data Type without unrelate of prior instance.");  
		}
    }
                
    	IsDefinedByEnumerationDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_edt_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR27To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "27", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR27From(EnumerationDataType_c target)
{
	unrelateAcrossR27From(target, true);
}
public void unrelateAcrossR27From(EnumerationDataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDefinedByEnumerationDataType == null) return;  // already unrelated
	
	if (target != IsDefinedByEnumerationDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R27", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR27To(this);
    }
    

      if(IsDefinedByEnumerationDataType != null) {
      
        m_edt_dt_id = IsDefinedByEnumerationDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_edt_dt_id))
        {
          m_edt_dt_id = IsDefinedByEnumerationDataType.getDt_idCachedValue();
        }       
        IsDefinedByEnumerationDataType = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "27", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Enumerator_c getOneS_ENUMOnR27(EnumerationDataType_c [] targets)
{
    return getOneS_ENUMOnR27(targets, null);
}

public static Enumerator_c getOneS_ENUMOnR27(EnumerationDataType_c [] targets, ClassQueryInterface_c test)
{
    Enumerator_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_ENUMOnR27(targets[i], test);
        }
    }

    return ret_val;
}

public static Enumerator_c getOneS_ENUMOnR27(EnumerationDataType_c target)
{
  return getOneS_ENUMOnR27(target, null);
}

public static Enumerator_c getOneS_ENUMOnR27(EnumerationDataType_c target, boolean loadComponent)
{
    return getOneS_ENUMOnR27(target.getModelRoot(), target, null, loadComponent);
}

public static Enumerator_c getOneS_ENUMOnR27(EnumerationDataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_ENUMOnR27(target.getModelRoot(), target, test);
  }
  return null;
}

public static Enumerator_c getOneS_ENUMOnR27(ModelRoot modelRoot, EnumerationDataType_c target, ClassQueryInterface_c test)
{
	return getOneS_ENUMOnR27(modelRoot, target, test, true);
}

public static Enumerator_c getOneS_ENUMOnR27(ModelRoot modelRoot, EnumerationDataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneS_ENUMOnR27(modelRoot,target,test);
}
private static Enumerator_c find_getOneS_ENUMOnR27(ModelRoot modelRoot, EnumerationDataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesEnumeratorDefines_R27) {
	    for ( int i = 0; i < target.backPointer_DefinesEnumeratorDefines_R27.size(); ++i ) {
	      Enumerator_c source = (Enumerator_c)target.backPointer_DefinesEnumeratorDefines_R27.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c [] targets)
{
  return getManyS_ENUMsOnR27(targets, null);
}
public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c [] targets, boolean loadComponent)
{
  return getManyS_ENUMsOnR27(targets, null, loadComponent);
}
public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_ENUMsOnR27(targets, test, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Enumerator_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesEnumeratorDefines_R27) {
	    for (int j = 0; j < targets[i].backPointer_DefinesEnumeratorDefines_R27.size(); ++j) {
	      Enumerator_c source = (Enumerator_c)targets[i].backPointer_DefinesEnumeratorDefines_R27.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Enumerator_c[] ret_set = new Enumerator_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Enumerator_c[0];
  }
  }

public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c target)
{
  return getManyS_ENUMsOnR27(target, null);
}

public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c target, boolean loadComponent)
{
  return getManyS_ENUMsOnR27(target, null, loadComponent);
}

public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c target, ClassQueryInterface_c test)
{
	return getManyS_ENUMsOnR27(target, test, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR27(EnumerationDataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Enumerator_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesEnumeratorDefines_R27) {
    for (int i = 0; i < target.backPointer_DefinesEnumeratorDefines_R27.size(); ++i) {
      Enumerator_c source = (Enumerator_c)target.backPointer_DefinesEnumeratorDefines_R27.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Enumerator_c[] ret_set = new Enumerator_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Enumerator_c[0];
	}
  }


  
    
// referring navigation

Enumerator_c SucceedsEnumerator ;
public void relateAcrossR56ToSucceeds(Enumerator_c target)
{
	relateAcrossR56ToSucceeds(target, true);
}
public void relateAcrossR56ToSucceeds(Enumerator_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SucceedsEnumerator) return;  // already related

    if ( SucceedsEnumerator != target ) {
    
    Object oldKey = getInstanceKey();

    if (SucceedsEnumerator != null) {
    
        SucceedsEnumerator.clearBackPointerR56ToPrecedes(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Enumerator_c.relateAcrossR56ToSucceeds(Enumerator_c target)", 
			"Relate performed across R56 from Enumerator to Enumerator without unrelate of prior instance.");  
		}
    }
                
    	SucceedsEnumerator = target ;
        m_previous_enum_id = target.getEnum_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR56ToPrecedes(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "56", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR56FromSucceeds(Enumerator_c target)
{
	unrelateAcrossR56FromSucceeds(target, true);
}
public void unrelateAcrossR56FromSucceeds(Enumerator_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SucceedsEnumerator == null) return;  // already unrelated
	
	if (target != SucceedsEnumerator) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R56", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR56ToPrecedes(this);
    }
    

      if(SucceedsEnumerator != null) {
      
        m_previous_enum_id = SucceedsEnumerator.getEnum_id();
        SucceedsEnumerator = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "56", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Enumerator_c getOneS_ENUMOnR56Precedes(Enumerator_c [] targets)
{
    return getOneS_ENUMOnR56Precedes(targets, null);
}

public static Enumerator_c getOneS_ENUMOnR56Precedes(Enumerator_c [] targets, ClassQueryInterface_c test)
{
    Enumerator_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_ENUMOnR56Precedes(targets[i], test);
        }
    }

    return ret_val;
}

public static Enumerator_c getOneS_ENUMOnR56Precedes(Enumerator_c target)
{
  return getOneS_ENUMOnR56Precedes(target, null);
}

public static Enumerator_c getOneS_ENUMOnR56Precedes(Enumerator_c target, boolean loadComponent)
{
    return getOneS_ENUMOnR56Precedes(target.getModelRoot(), target, null, loadComponent);
}

public static Enumerator_c getOneS_ENUMOnR56Precedes(Enumerator_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_ENUMOnR56Precedes(target.getModelRoot(), target, test);
  }
  return null;
}

public static Enumerator_c getOneS_ENUMOnR56Precedes(ModelRoot modelRoot, Enumerator_c target, ClassQueryInterface_c test)
{
	return getOneS_ENUMOnR56Precedes(modelRoot, target, test, true);
}

public static Enumerator_c getOneS_ENUMOnR56Precedes(ModelRoot modelRoot, Enumerator_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneS_ENUMOnR56Precedes(modelRoot,target,test);
}
private static Enumerator_c find_getOneS_ENUMOnR56Precedes(ModelRoot modelRoot, Enumerator_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Enumerator_c source = (Enumerator_c)target.backPointer_PrecedesEnumeratorPrecedes_R56;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Enumerator_c [] getManyS_ENUMsOnR56Precedes(Enumerator_c [] targets)
{
  return getManyS_ENUMsOnR56Precedes(targets, null);
}
public static Enumerator_c [] getManyS_ENUMsOnR56Precedes(Enumerator_c [] targets, boolean loadComponent)
{
  return getManyS_ENUMsOnR56Precedes(targets, null, loadComponent);
}
public static Enumerator_c [] getManyS_ENUMsOnR56Precedes(Enumerator_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_ENUMsOnR56Precedes(targets, test, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR56Precedes(Enumerator_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Enumerator_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Enumerator_c source = (Enumerator_c)targets[i].backPointer_PrecedesEnumeratorPrecedes_R56;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Enumerator_c[] ret_set = new Enumerator_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Enumerator_c[0];
  }
  }

public static Enumerator_c [] getManyS_ENUMsOnR56Precedes(Enumerator_c target)
{
  if (target != null) {
    Enumerator_c [] targetArray = new Enumerator_c[1];
    targetArray[0] = target;
    return getManyS_ENUMsOnR56Precedes(targetArray);
  } else {
    Enumerator_c [] result = new Enumerator_c [0] ;
  return result ;
}
}

public static Enumerator_c [] getManyS_ENUMsOnR56Precedes(Enumerator_c target, boolean loadComponent)
{
  if (target != null) {
    Enumerator_c [] targetArray = new Enumerator_c[1];
    targetArray[0] = target;
    return getManyS_ENUMsOnR56Precedes(targetArray, loadComponent);
  } else {
    Enumerator_c [] result = new Enumerator_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<LiteralEnumerator_c> backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824 = new ArrayList<LiteralEnumerator_c>();

public void setLiteralEnumeratorOrderInChildListR824(LiteralEnumerator_c target, int index) {
	unrelateAcrossR824From(target);
	LiteralEnumerator_c[] elements = LiteralEnumerator_c.getManyV_LENsOnR824(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR824From((LiteralEnumerator_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR824To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR824To((LiteralEnumerator_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR824To(LiteralEnumerator_c target)
{
  if (target != null) {
    target.relateAcrossR824To(this, true) ;
  }
}

public void relateAcrossR824To(LiteralEnumerator_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR824To(this, notifyChanges) ;
  }
}

public void setBackPointerR824To(LiteralEnumerator_c target)
{
  	synchronized (backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824) {
		backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824.add(target);
	}
}

public void unrelateAcrossR824From(LiteralEnumerator_c target)
{
  if (target != null) {
    target.unrelateAcrossR824From(this, true) ;
  }
}

public void unrelateAcrossR824From(LiteralEnumerator_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR824From(this, notifyChanges) ;
  }
}

public void clearBackPointerR824To(LiteralEnumerator_c target)
{
  synchronized (backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824) {
	    backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824.remove(target);
	}
}

public static Enumerator_c getOneS_ENUMOnR824(LiteralEnumerator_c [] targets)
{
    return getOneS_ENUMOnR824(targets, null);
}

public static Enumerator_c getOneS_ENUMOnR824(LiteralEnumerator_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_ENUMOnR824(targets, test, true);
}

public static Enumerator_c getOneS_ENUMOnR824(LiteralEnumerator_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Enumerator_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Enumerator_c candidate_val = getOneS_ENUMOnR824(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_ENUMOnR824(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Enumerator_c getOneS_ENUMOnR824(LiteralEnumerator_c target)
{
	return getOneS_ENUMOnR824(target, true);
}
public static Enumerator_c getOneS_ENUMOnR824(LiteralEnumerator_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasValueEnumerator ;
  } else {
    return null;
  }
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_ENUMsOnR824(targets, test, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Enumerator_c[0];
  
  
  LinkedHashSet<Enumerator_c> elementsSet = new LinkedHashSet<Enumerator_c>();
  for (int i = 0; i < targets.length; i++) {
    Enumerator_c associate = targets[i].HasValueEnumerator;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Enumerator_c[] result = new Enumerator_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c [] targets)
{
  return getManyS_ENUMsOnR824(targets, null);
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LiteralEnumerator_c [] targetArray = new LiteralEnumerator_c[1];
    targetArray[0] = target;
    return getManyS_ENUMsOnR824(targetArray, test, loadComponent);
  } else {
    Enumerator_c [] result = new Enumerator_c [0] ;
    return result ;
  }
  
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c target,
    ClassQueryInterface_c test)
{
    return getManyS_ENUMsOnR824(target, null, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c target)
{
    return getManyS_ENUMsOnR824(target, null, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR824(LiteralEnumerator_c target, boolean loadComponent)
{
    return getManyS_ENUMsOnR824(target, null, loadComponent);
}


    
  
  
// referred to navigation

Enumerator_c backPointer_PrecedesEnumeratorPrecedes_R56;

public void setEnumeratorOrderInChildListR56(Enumerator_c target, int index) {
	unrelateAcrossR56FromPrecedes(target);
	Enumerator_c[] elements = Enumerator_c.getManyS_ENUMsOnR56Precedes(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR56FromPrecedes((Enumerator_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR56ToPrecedes(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR56ToPrecedes((Enumerator_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR56ToPrecedes(Enumerator_c target)
{
  if (target != null) {
    target.relateAcrossR56ToSucceeds(this, true) ;
  }
}

public void relateAcrossR56ToPrecedes(Enumerator_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR56ToSucceeds(this, notifyChanges) ;
  }
}

public void setBackPointerR56ToPrecedes(Enumerator_c target)
{
    backPointer_PrecedesEnumeratorPrecedes_R56 = target;
}

public void unrelateAcrossR56FromPrecedes(Enumerator_c target)
{
  if (target != null) {
    target.unrelateAcrossR56FromSucceeds(this, true) ;
  }
}

public void unrelateAcrossR56FromPrecedes(Enumerator_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR56FromSucceeds(this, notifyChanges) ;
  }
}

public void clearBackPointerR56ToPrecedes(Enumerator_c target)
{
	if (target == backPointer_PrecedesEnumeratorPrecedes_R56) {
		backPointer_PrecedesEnumeratorPrecedes_R56 = null;
	}
}

public static Enumerator_c getOneS_ENUMOnR56Succeeds(Enumerator_c [] targets)
{
    return getOneS_ENUMOnR56Succeeds(targets, null);
}

public static Enumerator_c getOneS_ENUMOnR56Succeeds(Enumerator_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_ENUMOnR56Succeeds(targets, test, true);
}

public static Enumerator_c getOneS_ENUMOnR56Succeeds(Enumerator_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Enumerator_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Enumerator_c candidate_val = getOneS_ENUMOnR56Succeeds(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_ENUMOnR56Succeeds(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Enumerator_c getOneS_ENUMOnR56Succeeds(Enumerator_c target)
{
	return getOneS_ENUMOnR56Succeeds(target, true);
}
public static Enumerator_c getOneS_ENUMOnR56Succeeds(Enumerator_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.SucceedsEnumerator ;
  } else {
    return null;
  }
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_ENUMsOnR56Succeeds(targets, test, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Enumerator_c[0];
  
  
  LinkedHashSet<Enumerator_c> elementsSet = new LinkedHashSet<Enumerator_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SucceedsEnumerator == null)
	  targets[i].loadProxy();
    Enumerator_c associate = targets[i].SucceedsEnumerator;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Enumerator_c[] result = new Enumerator_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c [] targets)
{
  return getManyS_ENUMsOnR56Succeeds(targets, null);
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Enumerator_c [] targetArray = new Enumerator_c[1];
    targetArray[0] = target;
    return getManyS_ENUMsOnR56Succeeds(targetArray, test, loadComponent);
  } else {
    Enumerator_c [] result = new Enumerator_c [0] ;
    return result ;
  }
  
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c target,
    ClassQueryInterface_c test)
{
    return getManyS_ENUMsOnR56Succeeds(target, null, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c target)
{
    return getManyS_ENUMsOnR56Succeeds(target, null, true);
}

public static Enumerator_c [] getManyS_ENUMsOnR56Succeeds(Enumerator_c target, boolean loadComponent)
{
    return getManyS_ENUMsOnR56Succeeds(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsDefinedByEnumerationDataType == null) {          
      // R27
      EnumerationDataType_c relInst56563 = (EnumerationDataType_c) baseRoot.getInstanceList(EnumerationDataType_c.class).get(new Object[] {m_edt_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56563 == null) {
      			relInst56563 = (EnumerationDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(EnumerationDataType_c.class).get(new Object[] {m_edt_dt_id});
      		}
			if (relInst56563 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56563 = (EnumerationDataType_c) roots[i].getInstanceList(EnumerationDataType_c.class).get(new Object[] {m_edt_dt_id});
					if (relInst56563 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56563 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56563) && !isProxy())) {
	      relInst56563.relateAcrossR27To(this, notifyChanges);
	  }
	  }
	}
	          

	if (SucceedsEnumerator == null) {          
      // R56
      Enumerator_c relInst56564 = (Enumerator_c) baseRoot.getInstanceList(Enumerator_c.class).get(new Object[] {m_previous_enum_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56564 == null) {
      			relInst56564 = (Enumerator_c) Ooaofooa.getDefaultInstance().getInstanceList(Enumerator_c.class).get(new Object[] {m_previous_enum_id});
      		}
			if (relInst56564 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56564 = (Enumerator_c) roots[i].getInstanceList(Enumerator_c.class).get(new Object[] {m_previous_enum_id});
					if (relInst56564 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56564 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56564) && !isProxy())) {
	      relInst56564.relateAcrossR56ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R27
      // S_EDT
		  inst=IsDefinedByEnumerationDataType;
			unrelateAcrossR27From(IsDefinedByEnumerationDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R56
      // S_ENUM
		  inst=SucceedsEnumerator;
			unrelateAcrossR56FromSucceeds(SucceedsEnumerator, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Enumerator_c inst = (Enumerator_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Enumerator_c EnumeratorInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Enumerator_c result=findEnumeratorInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Enumerator_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findEnumeratorInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Enumerator_c findEnumeratorInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Enumerator_c x = (Enumerator_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Enumerator_c EnumeratorInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return EnumeratorInstance(modelRoot,test,true);
  }
  
  public static Enumerator_c EnumeratorInstance(ModelRoot modelRoot)
  {
	 return EnumeratorInstance(modelRoot,null,true);
  }

  public static Enumerator_c [] EnumeratorInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Enumerator_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Enumerator_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Enumerator_c x = (Enumerator_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Enumerator_c[] ret_set = new Enumerator_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Enumerator_c[0];
			}		
		} 
  }
  public static Enumerator_c [] EnumeratorInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  EnumeratorInstances(modelRoot,test,true);
  }
  public static Enumerator_c [] EnumeratorInstances(ModelRoot modelRoot)
  {
	return EnumeratorInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Enumerator.dispose call: ";
	LiteralEnumerator_c testR824Inst = LiteralEnumerator_c.getOneV_LENOnR824(this, false);

	if ( testR824Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "824 ";	
	}
	EnumerationDataType_c testR27Inst = EnumerationDataType_c.getOneS_EDTOnR27(this, false);

	if ( testR27Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "27 ";
	}
	Enumerator_c testR56Inst = Enumerator_c.getOneS_ENUMOnR56Precedes(this, false);

	if ( testR56Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "56 ";	
	}
	 testR56Inst = Enumerator_c.getOneS_ENUMOnR56Succeeds(this, false);

	if ( testR56Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "56 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Enumerator", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("enum_id")){
         return true;
      }
      if(attributeName.equals("previous_enum_id")){
         return true;
      }
      if(attributeName.equals("edt_dt_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getEnum_id();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getEnum_idLongBased()
  {
    if(m_enum_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_enum_id)){
    	return 0xfffffff & m_enum_id.getLeastSignificantBits();
    }
    return m_enum_idLongBased ;
  }
  public java.util.UUID getEnum_id()
  {
    return m_enum_id ;
  }


  public void setEnum_id(java.util.UUID newValue)
  {
   m_enum_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPrevious_enum_idLongBased()
  {
    if ( SucceedsEnumerator != null )
    {
      return SucceedsEnumerator.getEnum_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_enum_id()
  {
    if ( SucceedsEnumerator != null )
    {
      return SucceedsEnumerator.getEnum_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_enum_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_enum_id) )
      return m_previous_enum_id;
    else
      return getPrevious_enum_id();
  }
  
  public void setPrevious_enum_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_enum_id)){
	        return;
	    }
	}else if(m_previous_enum_id != null){
	    if(m_previous_enum_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_enum_id", m_previous_enum_id, newValue,true); 
   m_previous_enum_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEdt_dt_idLongBased()
  {
    if ( IsDefinedByEnumerationDataType != null )
    {
      return IsDefinedByEnumerationDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEdt_dt_id()
  {
    if ( IsDefinedByEnumerationDataType != null )
    {
      return IsDefinedByEnumerationDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEdt_dt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_edt_dt_id) )
      return m_edt_dt_id;
    else
      return getEdt_dt_id();
  }
  
  public void setEdt_dt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_edt_dt_id)){
	        return;
	    }
	}else if(m_edt_dt_id != null){
	    if(m_edt_dt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Edt_dt_id", m_edt_dt_id, newValue,true); 
   m_edt_dt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Enumerator", //$NON-NLS-1$
	  " Operation entered: Enumerator::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Enumerator_c [] objs = Enumerator_c.EnumeratorInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Enumerator", //$NON-NLS-1$
	  " Operation entered: Enumerator::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Enumerator_c_test56566_c implements ClassQueryInterface_c
    {
	  Enumerator_c_test56566_c( java.util.UUID            p56567 ) {
	  m_p56567 = p56567;
	  }
	  private java.util.UUID             m_p56567; 
	  public boolean evaluate (Object candidate)
	  {
	      Enumerator_c selected = (Enumerator_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEnum_id().equals(m_p56567));
	      return retval;
	  }
    }

    Enumerator_c [] objs56565 = 
    Enumerator_c.EnumeratorInstances(modelRoot, new Enumerator_c_test56566_c(getEnum_id())) ;

    if ( (  (objs56565.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Enumerator", //$NON-NLS-1$
           "Consistency: Object: Enumerator: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56565.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Enumerator: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56565.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56565.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Enumerator", //$NON-NLS-1$
           "Consistency: Object: Enumerator: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56565.length )  + " Enum_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Enumerator: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56565.length )  + " Enum_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Enumerator is a referring class in association: rel.Numb = 56
          // The participating class is: Enumerator
    class Enumerator_c_test56571_c implements ClassQueryInterface_c
    {
	  Enumerator_c_test56571_c( java.util.UUID            p56572 ) {
	  m_p56572 = p56572;
	  }
	  private java.util.UUID             m_p56572; 
	  public boolean evaluate (Object candidate)
	  {
	      Enumerator_c selected = (Enumerator_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEnum_id().equals(m_p56572));
	      return retval;
	  }
    }

    Enumerator_c [] objs56570 = 
    Enumerator_c.EnumeratorInstances(modelRoot, new Enumerator_c_test56571_c(getPrevious_enum_id())) ;

    if ( (  (objs56570.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Enumerator", //$NON-NLS-1$
           "Consistency: Object: Enumerator: Association: 56: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56570.length )  + " Previous_Enum_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Enumerator: Association: 56: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56570.length )  + " Previous_Enum_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Enumerator is a referring class in association: rel.Numb = 27
          // The participating class is: Enumeration Data Type
    class EnumerationDataType_c_test56574_c implements ClassQueryInterface_c
    {
	  EnumerationDataType_c_test56574_c( java.util.UUID            p56575 ) {
	  m_p56575 = p56575;
	  }
	  private java.util.UUID             m_p56575; 
	  public boolean evaluate (Object candidate)
	  {
	      EnumerationDataType_c selected = (EnumerationDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56575));
	      return retval;
	  }
    }

    EnumerationDataType_c [] objs56573 = 
    EnumerationDataType_c.EnumerationDataTypeInstances(modelRoot, new EnumerationDataType_c_test56574_c(getEdt_dt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56573.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Enumerator", //$NON-NLS-1$
           "Consistency: Object: Enumerator: Association: 27: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56573.length )  + " EDT_DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Enumerator: Association: 27: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56573.length )  + " EDT_DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Enumerator is a participating class in association: rel.Numb = 56
             // Object: Enumerator
    class Enumerator_c_test56577_c implements ClassQueryInterface_c
    {
	  Enumerator_c_test56577_c( java.util.UUID            p56578 ) {
	  m_p56578 = p56578;
	  }
	  private java.util.UUID             m_p56578; 
	  public boolean evaluate (Object candidate)
	  {
	      Enumerator_c selected = (Enumerator_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPrevious_enum_id().equals(m_p56578));
	      return retval;
	  }
    }

    Enumerator_c [] objs56576 = 
    Enumerator_c.EnumeratorInstances(modelRoot, new Enumerator_c_test56577_c(getEnum_id())) ;

    if ( (  (objs56576.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Enumerator", //$NON-NLS-1$
           "Consistency: Object: Enumerator: Association: 56: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56576.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Enumerator: Association: 56: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56576.length )  , e); 
      }
      retval = false;

    }

          // Enumerator is a participating class in association: rel.Numb = 824
             // Object: Literal Enumerator
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
EnumerationDataType_c v_edt = EnumerationDataType_c.getOneS_EDTOnR27(this);


this.unrelateAcrossR27From(v_edt);


Enumerator_c v_successor = Enumerator_c.getOneS_ENUMOnR56Precedes(this);


Enumerator_c v_predecessor = Enumerator_c.getOneS_ENUMOnR56Succeeds(this);


if ( (  !  (v_successor == null)) )
{

this.unrelateAcrossR56FromPrecedes(v_successor);



}

if ( (  !  (v_predecessor == null)) )
{

this.unrelateAcrossR56FromSucceeds(v_predecessor);



}

if ( (  (v_successor != null) &&   (v_predecessor != null)) )
{

if (v_successor != null) {
  v_successor.relateAcrossR56ToSucceeds(v_predecessor);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

LiteralEnumerator_c [] v_litEnums = LiteralEnumerator_c.getManyV_LENsOnR824(this);


LiteralEnumerator_c  v_litEnum = null;
for ( int i55024 = 0; i55024 < v_litEnums.length; i55024++)
{
  v_litEnum = v_litEnums[i55024] ;

this.unrelateAcrossR824From(v_litEnum);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
EnumerationDataType_c v_edt = EnumerationDataType_c.getOneS_EDTOnR27(this);


if (v_edt != null) {
v_edt.Addenumeratortoorder(			    
getEnum_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


String       v_name = Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed Enumerator"			    
,Converttoinstance()) ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}


   } // End initialize
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  void Moveup()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Moveup") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


Enumerator_c v_prev_attr = Enumerator_c.getOneS_ENUMOnR56Succeeds(this);


Enumerator_c v_prev_prev_attr = Enumerator_c.getOneS_ENUMOnR56Succeeds(v_prev_attr);


Enumerator_c v_next_attr = Enumerator_c.getOneS_ENUMOnR56Precedes(this);


if ( (  (v_prev_prev_attr != null)) )
{

if (v_prev_attr != null) {
v_prev_attr.unrelateAcrossR56FromSucceeds(v_prev_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_attr != null)) )
{

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR56FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

this.unrelateAcrossR56FromSucceeds(v_prev_attr);


if ( (  (v_prev_prev_attr != null)) )
{

  this.relateAcrossR56ToSucceeds(v_prev_prev_attr);



}

if ( (  (v_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

if (v_prev_attr != null) {
  v_prev_attr.relateAcrossR56ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_attr != null) {
  v_next_attr.relateAcrossR56ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveUp
  public  void Movedown()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Movedown") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


Enumerator_c v_next_attr = Enumerator_c.getOneS_ENUMOnR56Precedes(this);


Enumerator_c v_prev_attr = Enumerator_c.getOneS_ENUMOnR56Succeeds(this);


Enumerator_c v_next_next_attr = Enumerator_c.getOneS_ENUMOnR56Precedes(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

if (v_next_next_attr != null) {
v_next_next_attr.unrelateAcrossR56FromSucceeds(v_next_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_prev_attr != null)) )
{

this.unrelateAcrossR56FromSucceeds(v_prev_attr);



}

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR56FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if ( (  (v_prev_attr != null)) )
{

if (v_next_attr != null) {
  v_next_attr.relateAcrossR56ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

  this.relateAcrossR56ToSucceeds(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_next_attr != null) {
  v_next_next_attr.relateAcrossR56ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveDown
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( (p_Value.equals("move up")) )
{

Enumerator_c v_prev_attr = Enumerator_c.getOneS_ENUMOnR56Succeeds(this);


return   (v_prev_attr != null);



}

else if ( (p_Value.equals("move down")) )
{

Enumerator_c v_next_attr = Enumerator_c.getOneS_ENUMOnR56Precedes(this);


return   (v_next_attr != null);



}


}

return false;



   } // End actionFilter
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Enumerator", " Operation entered: Enumerator::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
EnumerationDataType_c v_edt = EnumerationDataType_c.getOneS_EDTOnR27(this);


DataType_c v_dt = DataType_c.getOneS_DTOnR17(v_edt);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_dt));


Component_c v_component = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(v_dt));


if ( (  !  (v_component == null)) )
{

java.util.UUID         v_pkgId = v_component.Getpackageid() ;


v_package = (Package_c) modelRoot.getInstanceList(Package_c.class).getGlobal(null, v_pkgId);



}

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);


java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

Enumerator_c [] v_enumerators = Enumerator_c.getManyS_ENUMsOnR27(v_edt);


Enumerator_c  v_enumerator = null;
for ( int i55025 = 0; i55025 < v_enumerators.length; i55025++)
{
  v_enumerator = v_enumerators[i55025] ;

if ( (v_enumerator != this && v_enumerator.getName().equals(getName())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another enumerator under the same enumeration data type with a" + " matching name."			    
,Converttoinstance()			    
,getEnum_id()			    
,getName()			    
,v_dt.Getpath(			    
true			    
,"") + "::" + getName()			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return EnumeratorActionFilter.getSingleton();
    }
	  return null;
  }
} // end Enumerator
