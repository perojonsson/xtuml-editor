package com.mentor.nucleus.bp.core.util;
//========================================================================
//
// File: com.mentor.nucleus.bp.core/src/com/mentor/nucleus/bp/core/util/GlobalsUtil.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/generate_globals_util.arc
// Version:      $Revision: 1.10 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.swt.widgets.Display;

/**
 *  This class holds a utility method to determine
 *  all elements that refer to a core data type,
 *  migrates them to the global equivalent and
 *  removes the old system level data type.
 *  After completion, any empty system level DT packages are also removed.
 *  It is generated, so that if new Datatype associations are introduced
 *  to the tool, they will be automatically added here.
 */
public class GlobalsUtil {
  public static void upgradeToGlobals(SystemModel_c system, IProgressMonitor monitor) {
    DataType_c[] newDts = DataType_c.getManyS_DTsOnR8001(PackageableElement_c
        .getManyPE_PEsOnR9100(GlobalElementInSystem_c
            .getManyG_EISsOnR9100(system)));
	  for(int i=0; i < newDts.length; i++) {
      DataType_c[] oldDts = DataType_c
          .getManyS_DTsOnR4401(SystemDatatypeInPackage_c
              .getManySLD_SDINPsOnR4402(system));
      // the domains will soon be converted to generics (only way for this code
      // to be called)
      DataType_c[] oldDomainDts = DataType_c.getManyS_DTsOnR14(Domain_c.getManyS_DOMsOnR28(system));
      DataType_c[] allDts = new DataType_c[oldDts.length + oldDomainDts.length];
      System.arraycopy(oldDts, 0, allDts, 0, oldDts.length);
      System.arraycopy(oldDomainDts, 0, allDts, oldDts.length, oldDomainDts.length);
      monitor.worked(20);
      if(!Ooaofooa.inUnitTest()) {
      	while(Display.getCurrent().readAndDispatch()) {};
      }
		  for (int j=0; j< allDts.length; j++) {
			  if (allDts[j].getName().equals(newDts[i].getName())) {
			    upgradeDTToGlobal(allDts[j], newDts[i]);
			    allDts[j].Dispose();
			    break;
			  }
		  }
 	  }
    DataTypePackage_c[] dtps = DataTypePackage_c
        .getManyS_DPKsOnR4400(SystemDatatypePackage_c
            .getManySLD_SDPsOnR4400(system));
      for (int i=0; i < dtps.length; i++) {
      SystemDatatypeInPackage_c[] sdinps = SystemDatatypeInPackage_c
          .getManySLD_SDINPsOnR4401(dtps[i]);
      DataTypePackageInPackage_c[] dtpip = DataTypePackageInPackage_c.
                                                   getManyS_DPIPsOnR37(dtps[i]);
      ConstantInPackage_c[] cip = ConstantInPackage_c.
                                               getManyCNST_CIPsOnR1506(dtps[i]);
          if (sdinps.length == 0 && dtpip.length == 0 && cip.length == 0) {
              // fire a model element about to be deleted 
              Ooaofooa.getDefaultInstance().fireModelElementAboutToBeDeleted(dtps[i]);
        SpecificationPackage_c spPkg = SpecificationPackage_c
            .getOneEP_SPKGOnR1402(dtps[i]);
              if (spPkg != null) {
                spPkg.Dispose();
        } else {
                dtps[i].Dispose();
              }
          }
      }
		// gather all default DT packages
		DataTypePackage_c[] systemPackages = DataTypePackage_c
				.getManyS_DPKsOnR4400(SystemDatatypePackage_c
						.getManySLD_SDPsOnR4400(system), new ClassQueryInterface_c() {
							
							@Override
							public boolean evaluate(Object candidate) {
								return ((DataTypePackage_c) candidate)
										.getName()
										.equals(Ooaofooa
												.Getcoredatatypespackagename(Ooaofooa
														.getDefaultInstance()));
							}
						});
		for(DataTypePackage_c dtPkg : systemPackages) {
			boolean unused = isPackageUnused(dtPkg);
			if(unused) {
				try {
					dtPkg.Dispose();
					dtPkg.getPersistableComponent().deleteSelfAndChildren();
					dtPkg.getFile().getParent().delete(true, monitor);
				} catch (CoreException e) {
					CorePlugin.logError("Unable to delete unused Data Type Package.", e);
				}
			}
		}
		DataTypePackage_c[] domainPackages = DataTypePackage_c
				.getManyS_DPKsOnR40(Domain_c.getManyS_DOMsOnR28(system), new ClassQueryInterface_c() {
					
					@Override
					public boolean evaluate(Object candidate) {
						return ((DataTypePackage_c) candidate)
								.getName()
								.equals(Ooaofooa
										.Getcoredatatypespackagename(Ooaofooa
												.getDefaultInstance()));
					}
				});
		for(DataTypePackage_c dtPkg : domainPackages) {
			boolean unused = isPackageUnused(dtPkg);
			if(unused) {
				try {
					dtPkg.Dispose();
					dtPkg.getPersistableComponent().deleteSelfAndChildren();
					dtPkg.getFile().getParent().delete(true, monitor);
				} catch (CoreException e) {
					CorePlugin.logError("Unable to delete unused Data Type Package.", e);
				}
			}
		}
	  system.setUseglobals(true);
 	}
 	
	private static boolean isPackageUnused(DataTypePackage_c pkg) {
		boolean foundUDT = false;
		DataType_c[] oldDts = DataType_c
				.getManyS_DTsOnR4401(SystemDatatypeInPackage_c
						.getManySLD_SDINPsOnR4401(pkg));
		for(DataType_c dt : oldDts) {
			CoreDataType_c cdt = CoreDataType_c.getOneS_CDTOnR17(dt);
			if(cdt == null) {
				foundUDT = true;
				break;
			}
			UserDataType_c udt = UserDataType_c.getOneS_UDTOnR17(dt);
			if(udt != null) {
				if(udt.getGen_type() == 0) {
					foundUDT = true;
					break;
				}
			}
		}
		oldDts = DataType_c.getManyS_DTsOnR39(DataTypeInPackage_c.getManyS_DIPsOnR39(pkg));
		for(DataType_c dt : oldDts) {
			CoreDataType_c cdt = CoreDataType_c.getOneS_CDTOnR17(dt);
			if(cdt == null) {
				foundUDT = true;
				break;
			}
			UserDataType_c udt = UserDataType_c.getOneS_UDTOnR17(dt);
			if(udt != null) {
				if(udt.getGen_type() == 0) {
					foundUDT = true;
					break;
				}
			}
		}
		ConstantSpecification_c[] specs = ConstantSpecification_c
				.getManyCNST_CSPsOnR1506(ConstantInPackage_c
						.getManyCNST_CIPsOnR1506(pkg));
		if(specs.length != 0) {
			foundUDT = true;
		}
		if(foundUDT) {
			return false;
		} else {
			// check any child packages
			DataTypePackage_c[] children = DataTypePackage_c
					.getManyS_DPKsOnR38(DataTypePackageInPackage_c
							.getManyS_DPIPsOnR37(pkg));
			if(children.length != 0) {
				return false;
			}
		}
		return true;
	}

 	public static void upgradeDTToGlobal(DataType_c oldDt, DataType_c newDt) {
 	      // Value - R820
 	      Value_c [] values = Value_c.getManyV_VALsOnR820(oldDt);
 	      for(int i1=0; i1 < values.length; i1++) {
 	        values[i1].unrelateAcrossR820From(oldDt);
 	        values[i1].relateAcrossR820To(newDt);
 	      }
 	      // Transient Var - R821
 	      TransientVar_c [] transient_vars = TransientVar_c.getManyV_TRNsOnR821(oldDt);
 	      for(int i2=0; i2 < transient_vars.length; i2++) {
 	        transient_vars[i2].unrelateAcrossR821From(oldDt);
 	        transient_vars[i2].relateAcrossR821To(newDt);
 	      }
 	      // Variable - R848
 	      Variable_c [] variables = Variable_c.getManyV_VARsOnR848(oldDt);
 	      for(int i3=0; i3 < variables.length; i3++) {
 	        variables[i3].unrelateAcrossR848From(oldDt);
 	        variables[i3].relateAcrossR848To(newDt);
 	      }
 	      // Operation Parameter - R118
 	      OperationParameter_c [] operation_parameters = OperationParameter_c.getManyO_TPARMsOnR118(oldDt);
 	      for(int i4=0; i4 < operation_parameters.length; i4++) {
 	        operation_parameters[i4].unrelateAcrossR118From(oldDt);
 	        operation_parameters[i4].relateAcrossR118To(newDt);
 	      }
 	      // Operation - R116
 	      Operation_c [] operations = Operation_c.getManyO_TFRsOnR116(oldDt);
 	      for(int i5=0; i5 < operations.length; i5++) {
 	        operations[i5].unrelateAcrossR116From(oldDt);
 	        operations[i5].relateAcrossR116To(newDt);
 	      }
 	      // Attribute - R114
 	      Attribute_c [] attributes = Attribute_c.getManyO_ATTRsOnR114(oldDt);
 	      for(int i6=0; i6 < attributes.length; i6++) {
 	        attributes[i6].unrelateAcrossR114From(oldDt);
 	        attributes[i6].relateAcrossR114To(newDt);
 	      }
 	      // State Machine Event Data Item - R524
 	      StateMachineEventDataItem_c [] state_machine_event_data_items = StateMachineEventDataItem_c.getManySM_EVTDIsOnR524(oldDt);
 	      for(int i7=0; i7 < state_machine_event_data_items.length; i7++) {
 	        state_machine_event_data_items[i7].unrelateAcrossR524From(oldDt);
 	        state_machine_event_data_items[i7].relateAcrossR524To(newDt);
 	      }
 	      // External Entity Event Data Item - R16
 	      ExternalEntityEventDataItem_c [] external_entity_event_data_items = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR16(oldDt);
 	      for(int i8=0; i8 < external_entity_event_data_items.length; i8++) {
 	        external_entity_event_data_items[i8].unrelateAcrossR16From(oldDt);
 	        external_entity_event_data_items[i8].relateAcrossR16To(newDt);
 	      }
 	      // Bridge - R20
 	      Bridge_c [] bridges = Bridge_c.getManyS_BRGsOnR20(oldDt);
 	      for(int i9=0; i9 < bridges.length; i9++) {
 	        bridges[i9].unrelateAcrossR20From(oldDt);
 	        bridges[i9].relateAcrossR20To(newDt);
 	      }
 	      // External Entity Data Item - R15
 	      ExternalEntityDataItem_c [] external_entity_data_items = ExternalEntityDataItem_c.getManyS_EEDIsOnR15(oldDt);
 	      for(int i10=0; i10 < external_entity_data_items.length; i10++) {
 	        external_entity_data_items[i10].unrelateAcrossR15From(oldDt);
 	        external_entity_data_items[i10].relateAcrossR15To(newDt);
 	      }
 	      // Bridge Parameter - R22
 	      BridgeParameter_c [] bridge_parameters = BridgeParameter_c.getManyS_BPARMsOnR22(oldDt);
 	      for(int i11=0; i11 < bridge_parameters.length; i11++) {
 	        bridge_parameters[i11].unrelateAcrossR22From(oldDt);
 	        bridge_parameters[i11].relateAcrossR22To(newDt);
 	      }
 	      // Function - R25
 	      Function_c [] functions = Function_c.getManyS_SYNCsOnR25(oldDt);
 	      for(int i12=0; i12 < functions.length; i12++) {
 	        functions[i12].unrelateAcrossR25From(oldDt);
 	        functions[i12].relateAcrossR25To(newDt);
 	      }
 	      // Function Parameter - R26
 	      FunctionParameter_c [] function_parameters = FunctionParameter_c.getManyS_SPARMsOnR26(oldDt);
 	      for(int i13=0; i13 < function_parameters.length; i13++) {
 	        function_parameters[i13].unrelateAcrossR26From(oldDt);
 	        function_parameters[i13].relateAcrossR26To(newDt);
 	      }
 	      // Structure Member - R45
 	      StructureMember_c [] structure_members = StructureMember_c.getManyS_MBRsOnR45(oldDt);
 	      for(int i14=0; i14 < structure_members.length; i14++) {
 	        structure_members[i14].unrelateAcrossR45From(oldDt);
 	        structure_members[i14].relateAcrossR45To(newDt);
 	      }
 	      // User Data Type - R18
 	      UserDataType_c [] user_data_types = UserDataType_c.getManyS_UDTsOnR18(oldDt);
 	      for(int i15=0; i15 < user_data_types.length; i15++) {
 	        user_data_types[i15].unrelateAcrossR18From(oldDt);
 	        user_data_types[i15].relateAcrossR18To(newDt);
 	      }
 	      // Symbolic Constant - R1500
 	      SymbolicConstant_c [] symbolic_constants = SymbolicConstant_c.getManyCNST_SYCsOnR1500(oldDt);
 	      for(int i16=0; i16 < symbolic_constants.length; i16++) {
 	        symbolic_constants[i16].unrelateAcrossR1500From(oldDt);
 	        symbolic_constants[i16].relateAcrossR1500To(newDt);
 	      }
 	      // Property Parameter - R4007
 	      PropertyParameter_c [] property_parameters = PropertyParameter_c.getManyC_PPsOnR4007(oldDt);
 	      for(int i17=0; i17 < property_parameters.length; i17++) {
 	        property_parameters[i17].unrelateAcrossR4007From(oldDt);
 	        property_parameters[i17].relateAcrossR4007To(newDt);
 	      }
 	      // Interface Operation - R4008
 	      InterfaceOperation_c [] interface_operations = InterfaceOperation_c.getManyC_IOsOnR4008(oldDt);
 	      for(int i18=0; i18 < interface_operations.length; i18++) {
 	        interface_operations[i18].unrelateAcrossR4008From(oldDt);
 	        interface_operations[i18].relateAcrossR4008To(newDt);
 	      }
 	      // User defined Data Type - R18
 	      CoreDataType_c oldCdt = CoreDataType_c.getOneS_CDTOnR17(oldDt);
		  if(oldCdt != null) {
 	      	UserDataType_c [] user_defined_dts = UserDataType_c.
 	                                                 getManyS_UDTsOnR18(oldDt);
 	      	for(int i=0; i < user_defined_dts.length; i++) {
 	 	      user_defined_dts[i].unrelateAcrossR18From(oldDt);
 	 	      user_defined_dts[i].relateAcrossR18To(newDt);
 	      	}
 	      }
	}
}
