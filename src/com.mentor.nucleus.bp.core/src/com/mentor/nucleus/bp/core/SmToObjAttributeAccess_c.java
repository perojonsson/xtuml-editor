package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToObjAttributeAccess_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SM_TO_OBJ_ATTRIBUTE_ACCESS extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SmToObjAttributeAccess_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SmToObjAttributeAccess_c(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_attr_id,
			java.util.UUID p_m_obj_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_attr_id, m_apath_id, m_obj_id};
		addInstanceToMap(key);
	}
	static public SmToObjAttributeAccess_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_attr_id,
			java.util.UUID p_m_obj_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);
		SmToObjAttributeAccess_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_attr_id, p_m_apath_id, p_m_obj_id};
			new_inst = (SmToObjAttributeAccess_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SmToObjAttributeAccess_c(modelRoot, p_m_apath_id,
					p_m_attr_id, p_m_obj_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SmToObjAttributeAccess_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_attr_id,
			java.util.UUID p_m_obj_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);
		SmToObjAttributeAccess_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_attr_id, p_m_apath_id, p_m_obj_id};
			source = (SmToObjAttributeAccess_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		SmToObjAttributeAccess_c new_inst = new SmToObjAttributeAccess_c(
				modelRoot, p_m_apath_id, p_m_attr_id, p_m_obj_id);
		return new_inst;
	}
	public SmToObjAttributeAccess_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_apath_id = IdAssigner.NULL_UUID;
		m_attr_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_attr_id, m_apath_id, m_obj_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_attr_id, m_apath_id, m_obj_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_attr_id != p_newKey) {

			m_attr_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SmToObjAttributeAccess_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SmToObjAttributeAccess_c)) {
			return false;
		}

		SmToObjAttributeAccess_c me = (SmToObjAttributeAccess_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAttr_id()) || IdAssigner.NULL_UUID
						.equals(((SmToObjAttributeAccess_c) elem).getAttr_id())) && this != elem)) {
			return false;
		}
		if (!getAttr_id()
				.equals(((SmToObjAttributeAccess_c) elem).getAttr_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getApath_id()) || IdAssigner.NULL_UUID
						.equals(((SmToObjAttributeAccess_c) elem).getApath_id())) && this != elem)) {
			return false;
		}
		if (!getApath_id().equals(
				((SmToObjAttributeAccess_c) elem).getApath_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID
						.equals(((SmToObjAttributeAccess_c) elem).getObj_id())) && this != elem)) {
			return false;
		}
		if (!getObj_id().equals(((SmToObjAttributeAccess_c) elem).getObj_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SmToObjAttributeAccess_c)) {
			return false;
		}

		SmToObjAttributeAccess_c me = (SmToObjAttributeAccess_c) elem;
		if (!getAttr_idCachedValue().equals(
				((SmToObjAttributeAccess_c) elem).getAttr_idCachedValue()))
			return false;
		if (!getApath_idCachedValue().equals(
				((SmToObjAttributeAccess_c) elem).getApath_idCachedValue()))
			return false;
		if (!getObj_idCachedValue().equals(
				((SmToObjAttributeAccess_c) elem).getObj_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_apath_id;
	private java.util.UUID m_attr_id;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	SmToObjAccessPath_c IsCarriedBySmToObjAccessPath;
	public void relateAcrossR418To(SmToObjAccessPath_c target) {
		relateAcrossR418To(target, true);
	}
	public void relateAcrossR418To(SmToObjAccessPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsCarriedBySmToObjAccessPath)
			return; // already related

		if (IsCarriedBySmToObjAccessPath != target) {

			Object oldKey = getInstanceKey();

			if (IsCarriedBySmToObjAccessPath != null) {

				IsCarriedBySmToObjAccessPath.clearBackPointerR418To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToObjAttributeAccess_c.relateAcrossR418To(SmToObjAccessPath_c target)",
									"Relate performed across R418 from SM to OBJ Attribute Access to SM to OBJ Access Path without unrelate of prior instance.");
				}
			}

			IsCarriedBySmToObjAccessPath = target;
			if (IdAssigner.NULL_UUID.equals(target.getApath_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_apath_id = target.getApath_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR418To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "418", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR418From(SmToObjAccessPath_c target) {
		unrelateAcrossR418From(target, true);
	}
	public void unrelateAcrossR418From(SmToObjAccessPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsCarriedBySmToObjAccessPath == null)
			return; // already unrelated

		if (target != IsCarriedBySmToObjAccessPath) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R418",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR418To(this);
		}

		if (IsCarriedBySmToObjAccessPath != null) {

			m_apath_id = IsCarriedBySmToObjAccessPath.getApath_id();
			if (IdAssigner.NULL_UUID.equals(m_apath_id)) {
				m_apath_id = IsCarriedBySmToObjAccessPath
						.getApath_idCachedValue();
			}
			m_obj_id = IsCarriedBySmToObjAccessPath.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IsCarriedBySmToObjAccessPath.getObj_idCachedValue();
			}
			IsCarriedBySmToObjAccessPath = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "418", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			SmToObjAccessPath_c[] targets) {
		return getOneCA_SMOAAOnR418(targets, null);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			SmToObjAccessPath_c[] targets, ClassQueryInterface_c test) {
		SmToObjAttributeAccess_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMOAAOnR418(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			SmToObjAccessPath_c target) {
		return getOneCA_SMOAAOnR418(target, null);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			SmToObjAccessPath_c target, boolean loadComponent) {
		return getOneCA_SMOAAOnR418(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			SmToObjAccessPath_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMOAAOnR418(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			ModelRoot modelRoot, SmToObjAccessPath_c target,
			ClassQueryInterface_c test) {
		return getOneCA_SMOAAOnR418(modelRoot, target, test, true);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR418(
			ModelRoot modelRoot, SmToObjAccessPath_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCA_SMOAAOnR418(modelRoot, target, test);
	}
	private static SmToObjAttributeAccess_c find_getOneCA_SMOAAOnR418(
			ModelRoot modelRoot, SmToObjAccessPath_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CarriesSmToObjAttributeAccessCarries_R418) {
				for (int i = 0; i < target.backPointer_CarriesSmToObjAttributeAccessCarries_R418
						.size(); ++i) {
					SmToObjAttributeAccess_c source = (SmToObjAttributeAccess_c) target.backPointer_CarriesSmToObjAttributeAccessCarries_R418
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c[] targets) {
		return getManyCA_SMOAAsOnR418(targets, null);
	}
	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c[] targets, boolean loadComponent) {
		return getManyCA_SMOAAsOnR418(targets, null, loadComponent);
	}
	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMOAAsOnR418(targets, test, true);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToObjAttributeAccess_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CarriesSmToObjAttributeAccessCarries_R418) {
				for (int j = 0; j < targets[i].backPointer_CarriesSmToObjAttributeAccessCarries_R418
						.size(); ++j) {
					SmToObjAttributeAccess_c source = (SmToObjAttributeAccess_c) targets[i].backPointer_CarriesSmToObjAttributeAccessCarries_R418
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToObjAttributeAccess_c[] ret_set = new SmToObjAttributeAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToObjAttributeAccess_c[0];
		}
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c target) {
		return getManyCA_SMOAAsOnR418(target, null);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c target, boolean loadComponent) {
		return getManyCA_SMOAAsOnR418(target, null, loadComponent);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c target, ClassQueryInterface_c test) {
		return getManyCA_SMOAAsOnR418(target, test, true);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR418(
			SmToObjAccessPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToObjAttributeAccess_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CarriesSmToObjAttributeAccessCarries_R418) {
			for (int i = 0; i < target.backPointer_CarriesSmToObjAttributeAccessCarries_R418
					.size(); ++i) {
				SmToObjAttributeAccess_c source = (SmToObjAttributeAccess_c) target.backPointer_CarriesSmToObjAttributeAccessCarries_R418
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToObjAttributeAccess_c[] ret_set = new SmToObjAttributeAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToObjAttributeAccess_c[0];
		}
	}

	// referring navigation

	Attribute_c RepresentsAccessOfAttribute;
	public void relateAcrossR419To(Attribute_c target) {
		relateAcrossR419To(target, true);
	}
	public void relateAcrossR419To(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == RepresentsAccessOfAttribute)
			return; // already related

		if (RepresentsAccessOfAttribute != target) {

			Object oldKey = getInstanceKey();

			if (RepresentsAccessOfAttribute != null) {

				RepresentsAccessOfAttribute.clearBackPointerR419To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToObjAttributeAccess_c.relateAcrossR419To(Attribute_c target)",
									"Relate performed across R419 from SM to OBJ Attribute Access to Attribute without unrelate of prior instance.");
				}
			}

			RepresentsAccessOfAttribute = target;
			m_attr_id = target.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR419To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "419", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR419From(Attribute_c target) {
		unrelateAcrossR419From(target, true);
	}
	public void unrelateAcrossR419From(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (RepresentsAccessOfAttribute == null)
			return; // already unrelated

		if (target != RepresentsAccessOfAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R419",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR419To(this);
		}

		if (RepresentsAccessOfAttribute != null) {

			m_attr_id = RepresentsAccessOfAttribute.getAttr_id();
			m_obj_id = RepresentsAccessOfAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = RepresentsAccessOfAttribute.getObj_idCachedValue();
			}
			RepresentsAccessOfAttribute = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "419", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			Attribute_c[] targets) {
		return getOneCA_SMOAAOnR419(targets, null);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			Attribute_c[] targets, ClassQueryInterface_c test) {
		SmToObjAttributeAccess_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMOAAOnR419(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			Attribute_c target) {
		return getOneCA_SMOAAOnR419(target, null);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			Attribute_c target, boolean loadComponent) {
		return getOneCA_SMOAAOnR419(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMOAAOnR419(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test) {
		return getOneCA_SMOAAOnR419(modelRoot, target, test, true);
	}

	public static SmToObjAttributeAccess_c getOneCA_SMOAAOnR419(
			ModelRoot modelRoot, Attribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCA_SMOAAOnR419(modelRoot, target, test);
	}
	private static SmToObjAttributeAccess_c find_getOneCA_SMOAAOnR419(
			ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419) {
				for (int i = 0; i < target.backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419
						.size(); ++i) {
					SmToObjAttributeAccess_c source = (SmToObjAttributeAccess_c) target.backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c[] targets) {
		return getManyCA_SMOAAsOnR419(targets, null);
	}
	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c[] targets, boolean loadComponent) {
		return getManyCA_SMOAAsOnR419(targets, null, loadComponent);
	}
	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMOAAsOnR419(targets, test, true);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToObjAttributeAccess_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419) {
				for (int j = 0; j < targets[i].backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419
						.size(); ++j) {
					SmToObjAttributeAccess_c source = (SmToObjAttributeAccess_c) targets[i].backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToObjAttributeAccess_c[] ret_set = new SmToObjAttributeAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToObjAttributeAccess_c[0];
		}
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c target) {
		return getManyCA_SMOAAsOnR419(target, null);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c target, boolean loadComponent) {
		return getManyCA_SMOAAsOnR419(target, null, loadComponent);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c target, ClassQueryInterface_c test) {
		return getManyCA_SMOAAsOnR419(target, test, true);
	}

	public static SmToObjAttributeAccess_c[] getManyCA_SMOAAsOnR419(
			Attribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToObjAttributeAccess_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419) {
			for (int i = 0; i < target.backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419
					.size(); ++i) {
				SmToObjAttributeAccess_c source = (SmToObjAttributeAccess_c) target.backPointer_IsAccessedBySmToObjAttributeAccessIsAccessedBy_R419
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToObjAttributeAccess_c[] ret_set = new SmToObjAttributeAccess_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToObjAttributeAccess_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsCarriedBySmToObjAccessPath == null) {          
      // R418
	  instances = baseRoot.getInstanceList(SmToObjAccessPath_c.class);
      SmToObjAccessPath_c relInst57356 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           SmToObjAccessPath_c source = (SmToObjAccessPath_c)cursor.next() ;
           if (     source.getApath_idCachedValue().equals(m_apath_id) && 
     source.getObj_idCachedValue().equals(m_obj_id) 		){
  		relInst57356 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst57356 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57356) && !isProxy())) {
	      relInst57356.relateAcrossR418To(this, notifyChanges);
	  }
	  }
	}
	          

	if (RepresentsAccessOfAttribute == null) {          
      // R419
      Attribute_c relInst57357 = (Attribute_c) baseRoot.getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57357 == null) {
      			relInst57357 = (Attribute_c) Ooaofooa.getDefaultInstance().getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
      		}
			if (relInst57357 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57357 = (Attribute_c) roots[i].getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
					if (relInst57357 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57357 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57357) && !isProxy())) {
	      relInst57357.relateAcrossR419To(this, notifyChanges);
	  }
	  }
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R418
		// CA_SMOA
		inst = IsCarriedBySmToObjAccessPath;
		unrelateAcrossR418From(IsCarriedBySmToObjAccessPath, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R419
		// O_ATTR
		inst = RepresentsAccessOfAttribute;
		unrelateAcrossR419From(RepresentsAccessOfAttribute, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToObjAttributeAccess_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToObjAttributeAccess_c inst = (SmToObjAttributeAccess_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SmToObjAttributeAccess_c SmToObjAttributeAccessInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SmToObjAttributeAccess_c result = findSmToObjAttributeAccessInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SmToObjAttributeAccess_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSmToObjAttributeAccessInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SmToObjAttributeAccess_c findSmToObjAttributeAccessInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToObjAttributeAccess_c x = (SmToObjAttributeAccess_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SmToObjAttributeAccess_c SmToObjAttributeAccessInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToObjAttributeAccessInstance(modelRoot, test, true);
	}

	public static SmToObjAttributeAccess_c SmToObjAttributeAccessInstance(
			ModelRoot modelRoot) {
		return SmToObjAttributeAccessInstance(modelRoot, null, true);
	}

	public static SmToObjAttributeAccess_c[] SmToObjAttributeAccessInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SmToObjAttributeAccess_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SmToObjAttributeAccess_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToObjAttributeAccess_c x = (SmToObjAttributeAccess_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SmToObjAttributeAccess_c[] ret_set = new SmToObjAttributeAccess_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToObjAttributeAccess_c[0];
			}
		}
	}
	public static SmToObjAttributeAccess_c[] SmToObjAttributeAccessInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToObjAttributeAccessInstances(modelRoot, test, true);
	}
	public static SmToObjAttributeAccess_c[] SmToObjAttributeAccessInstances(
			ModelRoot modelRoot) {
		return SmToObjAttributeAccessInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the SM to OBJ Attribute Access.dispose call: ";
		SmToObjAccessPath_c testR418Inst = SmToObjAccessPath_c
				.getOneCA_SMOAOnR418(this, false);

		if (testR418Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "418 ";
		}
		Attribute_c testR419Inst = Attribute_c.getOneO_ATTROnR419(this, false);

		if (testR419Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "419 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"SM to OBJ Attribute Access", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("apath_id")) {
			return true;
		}
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAttr_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getAttr_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getApath_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getApath_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getObj_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getObj_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getApath_idLongBased() {
		if (IsCarriedBySmToObjAccessPath != null) {
			return IsCarriedBySmToObjAccessPath.getApath_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getApath_id() {
		if (IsCarriedBySmToObjAccessPath != null) {
			return IsCarriedBySmToObjAccessPath.getApath_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getApath_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_apath_id))
			return m_apath_id;
		else
			return getApath_id();
	}

	public void setApath_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_apath_id)) {
				return;
			}
		} else if (m_apath_id != null) {
			if (m_apath_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Apath_id", m_apath_id, newValue, true);
		m_apath_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getAttr_idLongBased() {
		if (RepresentsAccessOfAttribute != null) {
			return RepresentsAccessOfAttribute.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (RepresentsAccessOfAttribute != null) {
			return RepresentsAccessOfAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_attr_id)) {
				return;
			}
		} else if (m_attr_id != null) {
			if (m_attr_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Attr_id", m_attr_id, newValue, true);
		m_attr_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (RepresentsAccessOfAttribute != null) {
			return RepresentsAccessOfAttribute.getObj_idLongBased();
		}
		if (IsCarriedBySmToObjAccessPath != null) {
			return IsCarriedBySmToObjAccessPath.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (RepresentsAccessOfAttribute != null) {
			return RepresentsAccessOfAttribute.getObj_id();
		}
		if (IsCarriedBySmToObjAccessPath != null) {
			return IsCarriedBySmToObjAccessPath.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SM to OBJ Attribute Access", //$NON-NLS-1$
						" Operation entered: SM to OBJ Attribute Access::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SmToObjAttributeAccess_c[] objs = SmToObjAttributeAccess_c
				.SmToObjAttributeAccessInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SM to OBJ Attribute Access", //$NON-NLS-1$
						" Operation entered: SM to OBJ Attribute Access::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SmToObjAttributeAccess_c_test57359_c
				implements
					ClassQueryInterface_c {
			SmToObjAttributeAccess_c_test57359_c(java.util.UUID p57360,
					java.util.UUID p57361, java.util.UUID p57362) {
				m_p57360 = p57360;
				m_p57361 = p57361;
				m_p57362 = p57362;
			}
			private java.util.UUID m_p57360;
			private java.util.UUID m_p57361;
			private java.util.UUID m_p57362;
			public boolean evaluate(Object candidate) {
				SmToObjAttributeAccess_c selected = (SmToObjAttributeAccess_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p57360))
						& (selected.getApath_id().equals(m_p57361))
						& (selected.getObj_id().equals(m_p57362));
				return retval;
			}
		}

		SmToObjAttributeAccess_c[] objs57358 = SmToObjAttributeAccess_c
				.SmToObjAttributeAccessInstances(modelRoot,
						new SmToObjAttributeAccess_c_test57359_c(getAttr_id(),
								getApath_id(), getObj_id()));

		if (((objs57358.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to OBJ Attribute Access", //$NON-NLS-1$
								"Consistency: Object: SM to OBJ Attribute Access: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57358.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to OBJ Attribute Access: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57358.length), e);
			}
			retval = false;

		}

		if (((objs57358.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to OBJ Attribute Access", //$NON-NLS-1$
								"Consistency: Object: SM to OBJ Attribute Access: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57358.length)
										+ " Attr_ID: " + "Not Printable" + " APath_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to OBJ Attribute Access: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57358.length)
										+ " Attr_ID: " + "Not Printable" + " APath_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to OBJ Attribute Access is a referring class in association: rel.Numb = 418
		// The participating class is: SM to OBJ Access Path
		class SmToObjAccessPath_c_test57366_c implements ClassQueryInterface_c {
			SmToObjAccessPath_c_test57366_c(java.util.UUID p57367,
					java.util.UUID p57368) {
				m_p57367 = p57367;
				m_p57368 = p57368;
			}
			private java.util.UUID m_p57367;
			private java.util.UUID m_p57368;
			public boolean evaluate(Object candidate) {
				SmToObjAccessPath_c selected = (SmToObjAccessPath_c) candidate;
				boolean retval = false;
				retval = (selected.getApath_id().equals(m_p57367))
						& (selected.getObj_id().equals(m_p57368));
				return retval;
			}
		}

		SmToObjAccessPath_c[] objs57365 = SmToObjAccessPath_c
				.SmToObjAccessPathInstances(modelRoot,
						new SmToObjAccessPath_c_test57366_c(getApath_id(),
								getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57365.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to OBJ Attribute Access", //$NON-NLS-1$
								"Consistency: Object: SM to OBJ Attribute Access: Association: 418: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57365.length)
										+ " APath_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to OBJ Attribute Access: Association: 418: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57365.length)
										+ " APath_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to OBJ Attribute Access is a referring class in association: rel.Numb = 419
		// The participating class is: Attribute
		class Attribute_c_test57370_c implements ClassQueryInterface_c {
			Attribute_c_test57370_c(java.util.UUID p57371, java.util.UUID p57372) {
				m_p57371 = p57371;
				m_p57372 = p57372;
			}
			private java.util.UUID m_p57371;
			private java.util.UUID m_p57372;
			public boolean evaluate(Object candidate) {
				Attribute_c selected = (Attribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p57371))
						& (selected.getObj_id().equals(m_p57372));
				return retval;
			}
		}

		Attribute_c[] objs57369 = Attribute_c.AttributeInstances(modelRoot,
				new Attribute_c_test57370_c(getAttr_id(), getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57369.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"SM to OBJ Attribute Access", //$NON-NLS-1$
								"Consistency: Object: SM to OBJ Attribute Access: Association: 419: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57369.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to OBJ Attribute Access: Association: 419: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57369.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "SM to OBJ Attribute Access",
				" Operation entered: SmToObjAttributeAccess::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SmToObjAttributeAccess_c[] v_peers = SmToObjAttributeAccess_c
				.getManyCA_SMOAAsOnR418(SmToObjAccessPath_c
						.getManyCA_SMOAsOnR418(this));

		if (((v_peers.length) == 1)) {

			AccessPath_c v_path = AccessPath_c
					.getOneCA_ACCOnR415(SmToObjAccessPath_c
							.getOneCA_SMOAOnR418(this));

			if (v_path != null) {
				v_path.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			SmToObjAccessPath_c v_smoa = SmToObjAccessPath_c
					.getOneCA_SMOAOnR418(this);

			this.unrelateAcrossR418From(v_smoa);

			Attribute_c v_attr = Attribute_c.getOneO_ATTROnR419(this);

			this.unrelateAcrossR419From(v_attr);

			if (delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end SM to OBJ Attribute Access
