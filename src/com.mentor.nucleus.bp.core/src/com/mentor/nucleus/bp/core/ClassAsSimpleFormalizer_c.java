package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassAsSimpleFormalizer_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLASS_AS_SIMPLE_FORMALIZER extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClassAsSimpleFormalizer_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClassAsSimpleFormalizer_c(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id, int p_m_mult, int p_m_cond,
			String p_m_txt_phrs) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
		m_mult = p_m_mult;
		m_cond = p_m_cond;
		m_txt_phrs = p_m_txt_phrs;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}
	static public ClassAsSimpleFormalizer_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id, int p_m_mult, int p_m_cond,
			String p_m_txt_phrs, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);
		ClassAsSimpleFormalizer_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			new_inst = (ClassAsSimpleFormalizer_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				new_inst.m_mult = p_m_mult;
				new_inst.m_cond = p_m_cond;
				new_inst.m_txt_phrs = p_m_txt_phrs;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClassAsSimpleFormalizer_c(modelRoot, p_m_obj_id,
					p_m_rel_id, p_m_oir_id, p_m_mult, p_m_cond, p_m_txt_phrs);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ClassAsSimpleFormalizer_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_rel_id, java.util.UUID p_m_oir_id, int p_m_mult,
			int p_m_cond, String p_m_txt_phrs) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);
		ClassAsSimpleFormalizer_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			source = (ClassAsSimpleFormalizer_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				source.m_mult = p_m_mult;
				source.m_cond = p_m_cond;
				source.m_txt_phrs = p_m_txt_phrs;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		ClassAsSimpleFormalizer_c new_inst = new ClassAsSimpleFormalizer_c(
				modelRoot, p_m_obj_id, p_m_rel_id, p_m_oir_id, p_m_mult,
				p_m_cond, p_m_txt_phrs);
		return new_inst;
	}
	public ClassAsSimpleFormalizer_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_oir_id = IdAssigner.NULL_UUID;
		m_txt_phrs = "";
		m_obj_id = IdAssigner.NULL_UUID;
		m_rel_id = IdAssigner.NULL_UUID;
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_oir_id != p_newKey) {

			m_oir_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClassAsSimpleFormalizer_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClassAsSimpleFormalizer_c)) {
			return false;
		}

		ClassAsSimpleFormalizer_c me = (ClassAsSimpleFormalizer_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getOir_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSimpleFormalizer_c) elem).getOir_id())) && this != elem)) {
			return false;
		}
		if (!getOir_id().equals(((ClassAsSimpleFormalizer_c) elem).getOir_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSimpleFormalizer_c) elem).getObj_id())) && this != elem)) {
			return false;
		}
		if (!getObj_id().equals(((ClassAsSimpleFormalizer_c) elem).getObj_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSimpleFormalizer_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((ClassAsSimpleFormalizer_c) elem).getRel_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClassAsSimpleFormalizer_c)) {
			return false;
		}

		ClassAsSimpleFormalizer_c me = (ClassAsSimpleFormalizer_c) elem;
		if (!getOir_idCachedValue().equals(
				((ClassAsSimpleFormalizer_c) elem).getOir_idCachedValue()))
			return false;
		if (!getObj_idCachedValue().equals(
				((ClassAsSimpleFormalizer_c) elem).getObj_idCachedValue()))
			return false;
		if (!getRel_idCachedValue().equals(
				((ClassAsSimpleFormalizer_c) elem).getRel_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_oir_id;
	private int m_mult;
	private int m_cond;
	private String m_txt_phrs;
	private java.util.UUID m_obj_id;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	SimpleAssociation_c IsRelatedToParticipantViaSimpleAssociation;
	public void relateAcrossR208To(SimpleAssociation_c target) {
		relateAcrossR208To(target, true);
	}
	public void relateAcrossR208To(SimpleAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsRelatedToParticipantViaSimpleAssociation)
			return; // already related

		if (IsRelatedToParticipantViaSimpleAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsRelatedToParticipantViaSimpleAssociation != null) {

				IsRelatedToParticipantViaSimpleAssociation
						.clearBackPointerR208To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassAsSimpleFormalizer_c.relateAcrossR208To(SimpleAssociation_c target)",
									"Relate performed across R208 from Class As Simple Formalizer to Simple Association without unrelate of prior instance.");
				}
			}

			IsRelatedToParticipantViaSimpleAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR208To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "208", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR208From(SimpleAssociation_c target) {
		unrelateAcrossR208From(target, true);
	}
	public void unrelateAcrossR208From(SimpleAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsRelatedToParticipantViaSimpleAssociation == null)
			return; // already unrelated

		if (target != IsRelatedToParticipantViaSimpleAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R208",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR208To(this);
		}

		if (IsRelatedToParticipantViaSimpleAssociation != null) {

			m_rel_id = IsRelatedToParticipantViaSimpleAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsRelatedToParticipantViaSimpleAssociation
						.getRel_idCachedValue();
			}
			IsRelatedToParticipantViaSimpleAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "208", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			SimpleAssociation_c[] targets) {
		return getOneR_FORMOnR208(targets, null);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			SimpleAssociation_c[] targets, ClassQueryInterface_c test) {
		ClassAsSimpleFormalizer_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_FORMOnR208(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			SimpleAssociation_c target) {
		return getOneR_FORMOnR208(target, null);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			SimpleAssociation_c target, boolean loadComponent) {
		return getOneR_FORMOnR208(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			SimpleAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_FORMOnR208(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			ModelRoot modelRoot, SimpleAssociation_c target,
			ClassQueryInterface_c test) {
		return getOneR_FORMOnR208(modelRoot, target, test, true);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR208(
			ModelRoot modelRoot, SimpleAssociation_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneR_FORMOnR208(modelRoot, target, test);
	}
	private static ClassAsSimpleFormalizer_c find_getOneR_FORMOnR208(
			ModelRoot modelRoot, SimpleAssociation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ClassAsSimpleFormalizer_c source = (ClassAsSimpleFormalizer_c) target.backPointer_RelatesClassAsSimpleFormalizerRelates_R208;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR208(
			SimpleAssociation_c[] targets) {
		return getManyR_FORMsOnR208(targets, null);
	}
	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR208(
			SimpleAssociation_c[] targets, boolean loadComponent) {
		return getManyR_FORMsOnR208(targets, null, loadComponent);
	}
	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR208(
			SimpleAssociation_c[] targets, ClassQueryInterface_c test) {
		return getManyR_FORMsOnR208(targets, test, true);
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR208(
			SimpleAssociation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassAsSimpleFormalizer_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassAsSimpleFormalizer_c source = (ClassAsSimpleFormalizer_c) targets[i].backPointer_RelatesClassAsSimpleFormalizerRelates_R208;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassAsSimpleFormalizer_c[] ret_set = new ClassAsSimpleFormalizer_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSimpleFormalizer_c[0];
		}
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR208(
			SimpleAssociation_c target) {
		if (target != null) {
			SimpleAssociation_c[] targetArray = new SimpleAssociation_c[1];
			targetArray[0] = target;
			return getManyR_FORMsOnR208(targetArray);
		} else {
			ClassAsSimpleFormalizer_c[] result = new ClassAsSimpleFormalizer_c[0];
			return result;
		}
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR208(
			SimpleAssociation_c target, boolean loadComponent) {
		if (target != null) {
			SimpleAssociation_c[] targetArray = new SimpleAssociation_c[1];
			targetArray[0] = target;
			return getManyR_FORMsOnR208(targetArray, loadComponent);
		} else {
			ClassAsSimpleFormalizer_c[] result = new ClassAsSimpleFormalizer_c[0];
			return result;
		}
	}

	// referring navigation

	ReferringClassInAssoc_c IsSupertypeReferringClassInAssoc;
	public void relateAcrossR205To(ReferringClassInAssoc_c target) {
		relateAcrossR205To(target, true);
	}
	public void relateAcrossR205To(ReferringClassInAssoc_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeReferringClassInAssoc)
			return; // already related

		if (IsSupertypeReferringClassInAssoc != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeReferringClassInAssoc != null) {

				IsSupertypeReferringClassInAssoc.clearBackPointerR205To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassAsSimpleFormalizer_c.relateAcrossR205To(ReferringClassInAssoc_c target)",
									"Relate performed across R205 from Class As Simple Formalizer to Referring Class In Assoc without unrelate of prior instance.");
				}
			}

			IsSupertypeReferringClassInAssoc = target;
			if (IdAssigner.NULL_UUID.equals(target.getOir_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_oir_id = target.getOir_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR205To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "205", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR205From(ReferringClassInAssoc_c target) {
		unrelateAcrossR205From(target, true);
	}
	public void unrelateAcrossR205From(ReferringClassInAssoc_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeReferringClassInAssoc == null)
			return; // already unrelated

		if (target != IsSupertypeReferringClassInAssoc) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R205",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR205To(this);
		}

		if (IsSupertypeReferringClassInAssoc != null) {

			m_oir_id = IsSupertypeReferringClassInAssoc.getOir_id();
			if (IdAssigner.NULL_UUID.equals(m_oir_id)) {
				m_oir_id = IsSupertypeReferringClassInAssoc
						.getOir_idCachedValue();
			}
			m_obj_id = IsSupertypeReferringClassInAssoc.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IsSupertypeReferringClassInAssoc
						.getObj_idCachedValue();
			}
			m_rel_id = IsSupertypeReferringClassInAssoc.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsSupertypeReferringClassInAssoc
						.getRel_idCachedValue();
			}
			IsSupertypeReferringClassInAssoc = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "205", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ReferringClassInAssoc_c[] targets) {
		return getOneR_FORMOnR205(targets, null);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		ClassAsSimpleFormalizer_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_FORMOnR205(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ReferringClassInAssoc_c target) {
		return getOneR_FORMOnR205(target, null);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ReferringClassInAssoc_c target, boolean loadComponent) {
		return getOneR_FORMOnR205(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ReferringClassInAssoc_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_FORMOnR205(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ModelRoot modelRoot, ReferringClassInAssoc_c target,
			ClassQueryInterface_c test) {
		return getOneR_FORMOnR205(modelRoot, target, test, true);
	}

	public static ClassAsSimpleFormalizer_c getOneR_FORMOnR205(
			ModelRoot modelRoot, ReferringClassInAssoc_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneR_FORMOnR205(modelRoot, target, test);
	}
	private static ClassAsSimpleFormalizer_c find_getOneR_FORMOnR205(
			ModelRoot modelRoot, ReferringClassInAssoc_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ClassAsSimpleFormalizer_c source = (ClassAsSimpleFormalizer_c) target.backPointer_IsSubtypeClassAsSimpleFormalizerIsSubtype_R205;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR205(
			ReferringClassInAssoc_c[] targets) {
		return getManyR_FORMsOnR205(targets, null);
	}
	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR205(
			ReferringClassInAssoc_c[] targets, boolean loadComponent) {
		return getManyR_FORMsOnR205(targets, null, loadComponent);
	}
	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR205(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getManyR_FORMsOnR205(targets, test, true);
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR205(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassAsSimpleFormalizer_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassAsSimpleFormalizer_c source = (ClassAsSimpleFormalizer_c) targets[i].backPointer_IsSubtypeClassAsSimpleFormalizerIsSubtype_R205;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassAsSimpleFormalizer_c[] ret_set = new ClassAsSimpleFormalizer_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSimpleFormalizer_c[0];
		}
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR205(
			ReferringClassInAssoc_c target) {
		if (target != null) {
			ReferringClassInAssoc_c[] targetArray = new ReferringClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_FORMsOnR205(targetArray);
		} else {
			ClassAsSimpleFormalizer_c[] result = new ClassAsSimpleFormalizer_c[0];
			return result;
		}
	}

	public static ClassAsSimpleFormalizer_c[] getManyR_FORMsOnR205(
			ReferringClassInAssoc_c target, boolean loadComponent) {
		if (target != null) {
			ReferringClassInAssoc_c[] targetArray = new ReferringClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_FORMsOnR205(targetArray, loadComponent);
		} else {
			ClassAsSimpleFormalizer_c[] result = new ClassAsSimpleFormalizer_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (IsRelatedToParticipantViaSimpleAssociation == null) {
			// R208
			SimpleAssociation_c relInst58328 = (SimpleAssociation_c) baseRoot
					.getInstanceList(SimpleAssociation_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58328 == null) {
				relInst58328 = (SimpleAssociation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(SimpleAssociation_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst58328 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58328 = (SimpleAssociation_c) roots[i]
							.getInstanceList(SimpleAssociation_c.class).get(
									new Object[]{m_rel_id});
					if (relInst58328 != null)
						break;
				}
			}
			//synchronized
			if (relInst58328 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58328) && !isProxy())) {
					relInst58328.relateAcrossR208To(this, notifyChanges);
				}
			}
		}

		// R205
		ReferringClassInAssoc_c relInst58329 = (ReferringClassInAssoc_c) baseRoot
				.getInstanceList(ReferringClassInAssoc_c.class).get(
						new Object[]{m_oir_id, m_obj_id, m_rel_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58329 == null) {
			relInst58329 = (ReferringClassInAssoc_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(ReferringClassInAssoc_c.class)
					.get(new Object[]{m_oir_id, m_obj_id, m_rel_id});
		}
		if (relInst58329 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58329 = (ReferringClassInAssoc_c) roots[i]
						.getInstanceList(ReferringClassInAssoc_c.class).get(
								new Object[]{m_oir_id, m_obj_id, m_rel_id});
				if (relInst58329 != null)
					break;
			}
		}
		//synchronized
		if (relInst58329 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58329) && !isProxy())) {
				relInst58329.relateAcrossR205To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R208
		// R_SIMP
		inst = IsRelatedToParticipantViaSimpleAssociation;
		unrelateAcrossR208From(IsRelatedToParticipantViaSimpleAssociation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R205
		// R_RGO
		inst = IsSupertypeReferringClassInAssoc;
		unrelateAcrossR205From(IsSupertypeReferringClassInAssoc, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassAsSimpleFormalizer_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassAsSimpleFormalizer_c inst = (ClassAsSimpleFormalizer_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClassAsSimpleFormalizer_c ClassAsSimpleFormalizerInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassAsSimpleFormalizer_c result = findClassAsSimpleFormalizerInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ClassAsSimpleFormalizer_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findClassAsSimpleFormalizerInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ClassAsSimpleFormalizer_c findClassAsSimpleFormalizerInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassAsSimpleFormalizer_c x = (ClassAsSimpleFormalizer_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ClassAsSimpleFormalizer_c ClassAsSimpleFormalizerInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassAsSimpleFormalizerInstance(modelRoot, test, true);
	}

	public static ClassAsSimpleFormalizer_c ClassAsSimpleFormalizerInstance(
			ModelRoot modelRoot) {
		return ClassAsSimpleFormalizerInstance(modelRoot, null, true);
	}

	public static ClassAsSimpleFormalizer_c[] ClassAsSimpleFormalizerInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassAsSimpleFormalizer_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSimpleFormalizer_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassAsSimpleFormalizer_c x = (ClassAsSimpleFormalizer_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClassAsSimpleFormalizer_c[] ret_set = new ClassAsSimpleFormalizer_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassAsSimpleFormalizer_c[0];
			}
		}
	}
	public static ClassAsSimpleFormalizer_c[] ClassAsSimpleFormalizerInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassAsSimpleFormalizerInstances(modelRoot, test, true);
	}
	public static ClassAsSimpleFormalizer_c[] ClassAsSimpleFormalizerInstances(
			ModelRoot modelRoot) {
		return ClassAsSimpleFormalizerInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Class As Simple Formalizer.dispose call: ";
		SimpleAssociation_c testR208Inst = SimpleAssociation_c
				.getOneR_SIMPOnR208(this, false);

		if (testR208Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "208 ";
		}
		ReferringClassInAssoc_c testR205Inst2 = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(this, false);

		if (testR205Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "205 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Class As Simple Formalizer", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("oir_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getOir_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getOir_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getObj_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getObj_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getRel_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getRel_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getOir_idLongBased() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getOir_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getOir_id() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getOir_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeReferringClassInAssoc != null);

	}

	public java.util.UUID getOir_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_oir_id))
			return m_oir_id;
		else
			return getOir_id();
	}

	public void setOir_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_oir_id)) {
				return;
			}
		} else if (m_oir_id != null) {
			if (m_oir_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Oir_id", m_oir_id, newValue, true);
		m_oir_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getMult() {
		return m_mult;
	}

	public void setMult(int newValue) {
		if (m_mult == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Mult",
				new Integer(m_mult), new Integer(newValue), true);

		m_mult = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getCond() {
		return m_cond;
	}

	public void setCond(int newValue) {
		if (m_cond == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Cond",
				new Integer(m_cond), new Integer(newValue), true);

		m_cond = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getTxt_phrs() {
		return m_txt_phrs;
	}

	public void setTxt_phrs(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_txt_phrs)) {
				return;
			}
		} else if (m_txt_phrs != null) {
			if (m_txt_phrs.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Txt_phrs", m_txt_phrs, newValue, true);
		m_txt_phrs = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getRel_idLongBased() {
		if (IsRelatedToParticipantViaSimpleAssociation != null) {
			return IsRelatedToParticipantViaSimpleAssociation
					.getRel_idLongBased();
		}
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (IsRelatedToParticipantViaSimpleAssociation != null) {
			return IsRelatedToParticipantViaSimpleAssociation.getRel_id();
		}
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class As Simple Formalizer", //$NON-NLS-1$
						" Operation entered: Class As Simple Formalizer::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClassAsSimpleFormalizer_c[] objs = ClassAsSimpleFormalizer_c
				.ClassAsSimpleFormalizerInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class As Simple Formalizer", //$NON-NLS-1$
						" Operation entered: Class As Simple Formalizer::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClassAsSimpleFormalizer_c_test58331_c
				implements
					ClassQueryInterface_c {
			ClassAsSimpleFormalizer_c_test58331_c(java.util.UUID p58332,
					java.util.UUID p58333, java.util.UUID p58334) {
				m_p58332 = p58332;
				m_p58333 = p58333;
				m_p58334 = p58334;
			}
			private java.util.UUID m_p58332;
			private java.util.UUID m_p58333;
			private java.util.UUID m_p58334;
			public boolean evaluate(Object candidate) {
				ClassAsSimpleFormalizer_c selected = (ClassAsSimpleFormalizer_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58332))
						& (selected.getObj_id().equals(m_p58333))
						& (selected.getRel_id().equals(m_p58334));
				return retval;
			}
		}

		ClassAsSimpleFormalizer_c[] objs58330 = ClassAsSimpleFormalizer_c
				.ClassAsSimpleFormalizerInstances(modelRoot,
						new ClassAsSimpleFormalizer_c_test58331_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58330.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class As Simple Formalizer", //$NON-NLS-1$
								"Consistency: Object: Class As Simple Formalizer: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58330.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Simple Formalizer: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58330.length), e);
			}
			retval = false;

		}

		if (((objs58330.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class As Simple Formalizer", //$NON-NLS-1$
								"Consistency: Object: Class As Simple Formalizer: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58330.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Simple Formalizer: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58330.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Class As Simple Formalizer is a subtype in association: rel.Numb = 205
		// The supertype class is: Referring Class In Assoc
		class ReferringClassInAssoc_c_test58338_c
				implements
					ClassQueryInterface_c {
			ReferringClassInAssoc_c_test58338_c(java.util.UUID p58339,
					java.util.UUID p58340, java.util.UUID p58341) {
				m_p58339 = p58339;
				m_p58340 = p58340;
				m_p58341 = p58341;
			}
			private java.util.UUID m_p58339;
			private java.util.UUID m_p58340;
			private java.util.UUID m_p58341;
			public boolean evaluate(Object candidate) {
				ReferringClassInAssoc_c selected = (ReferringClassInAssoc_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58339))
						& (selected.getObj_id().equals(m_p58340))
						& (selected.getRel_id().equals(m_p58341));
				return retval;
			}
		}

		ReferringClassInAssoc_c[] objs58337 = ReferringClassInAssoc_c
				.ReferringClassInAssocInstances(modelRoot,
						new ReferringClassInAssoc_c_test58338_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58337.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class As Simple Formalizer", //$NON-NLS-1$
								"Consistency: Object: Class As Simple Formalizer: Association: 205: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58337.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Simple Formalizer: Association: 205: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58337.length), e);
			}
			retval = false;

		}

		// Class As Simple Formalizer is a referring class in association: rel.Numb = 208
		// The participating class is: Simple Association
		class SimpleAssociation_c_test58343_c implements ClassQueryInterface_c {
			SimpleAssociation_c_test58343_c(java.util.UUID p58344) {
				m_p58344 = p58344;
			}
			private java.util.UUID m_p58344;
			public boolean evaluate(Object candidate) {
				SimpleAssociation_c selected = (SimpleAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58344));
				return retval;
			}
		}

		SimpleAssociation_c[] objs58342 = SimpleAssociation_c
				.SimpleAssociationInstances(modelRoot,
						new SimpleAssociation_c_test58343_c(getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs58342.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class As Simple Formalizer", //$NON-NLS-1$
								"Consistency: Object: Class As Simple Formalizer: Association: 208: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58342.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Simple Formalizer: Association: 208: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58342.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final int p_At) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class As Simple Formalizer",
						" Operation entered: ClassAsSimpleFormalizer::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		if ((p_At == End_c.Start || p_At == End_c.End)) {

			v_result = getTxt_phrs();

		}

		else if ((p_At == End_c.Start_Fixed || p_At == End_c.End_Fixed)) {

			v_result = Association_c.Get_cardinality_text(modelRoot, getCond(),
					getMult());

		}

		return v_result;

	} // End get_connector_text
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Simple Formalizer",
				" Operation entered: ClassAsSimpleFormalizer::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SimpleAssociation_c v_rsimp = SimpleAssociation_c
				.getOneR_SIMPOnR208(this);

		this.unrelateAcrossR208From(v_rsimp);

		ReferringClassInAssoc_c v_rto = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(this);

		this.unrelateAcrossR205From(v_rto);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Simple Formalizer",
				" Operation entered: ClassAsSimpleFormalizer::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(ReferringClassInAssoc_c
								.getOneR_RGOOnR205(this)));

		return v_obj.getName();

	} // End get_name
	public void Migratetoparticipant() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class As Simple Formalizer",
						" Operation entered: ClassAsSimpleFormalizer::Migratetoparticipant");
		final ModelRoot modelRoot = getModelRoot();
		ReferredToClassInAssoc_c v_rto = new ReferredToClassInAssoc_c(modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_rto));

		ClassAsSimpleParticipant_c v_part = new ClassAsSimpleParticipant_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_part));

		if (v_part != null) {
			v_part.setMult(getMult());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_part != null) {
			v_part.setCond(getCond());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_part != null) {
			v_part.setTxt_phrs(getTxt_phrs());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		ReferringClassInAssoc_c v_rgo = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(this);

		ClassInAssociation_c v_oir = ClassInAssociation_c
				.getOneR_OIROnR203(v_rgo);

		SimpleAssociation_c v_simp = SimpleAssociation_c
				.getOneR_SIMPOnR208(this);

		if (v_oir != null) {
			v_oir.relateAcrossR203To(v_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_rto != null) {
			v_rto.relateAcrossR204To(v_part);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_part != null) {
			v_part.relateAcrossR207To(v_simp);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_rgo != null) {
			v_rgo.Dispose();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End migrateToParticipant
	public boolean Manymultallowed() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Simple Formalizer",
				" Operation entered: ClassAsSimpleFormalizer::Manymultallowed");
		final ModelRoot modelRoot = getModelRoot();
		ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c
				.getOneR_PARTOnR207(SimpleAssociation_c
						.getManyR_SIMPsOnR208(this));

		return v_part.getMult() == 0;

	} // End manyMultAllowed
	public void Mergedispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Simple Formalizer",
				" Operation entered: ClassAsSimpleFormalizer::Mergedispose");
		final ModelRoot modelRoot = getModelRoot();
		SimpleAssociation_c v_rsimp = SimpleAssociation_c
				.getOneR_SIMPOnR208(this);

		this.unrelateAcrossR208From(v_rsimp);

		ReferringClassInAssoc_c v_rgo = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(this);

		ClassInAssociation_c v_cia = ClassInAssociation_c
				.getOneR_OIROnR203(v_rgo);

		if (((v_rgo != null))) {

			this.unrelateAcrossR205From(v_rgo);

			if (((v_cia != null))) {

				if (v_cia != null) {
					v_cia.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

		ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsSimpleParticipant_c
						.getManyR_PARTsOnR207(v_rsimp));

		if (((v_rto != null))) {

			ClassIdentifier_c v_oid = ClassIdentifier_c.getOneO_IDOnR109(v_rto);

			if (((v_oid != null))) {

				if (v_rto != null) {
					v_rto.unrelateAcrossR109From(v_oid);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Unrelate attempted on null left hand instance.",
									t);
				}

			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End mergeDispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Class As Simple Formalizer
