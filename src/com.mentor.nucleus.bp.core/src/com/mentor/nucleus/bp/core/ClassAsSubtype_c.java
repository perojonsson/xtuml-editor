package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassAsSubtype_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLASS_AS_SUBTYPE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClassAsSubtype_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClassAsSubtype_c(ModelRoot modelRoot, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_rel_id, java.util.UUID p_m_oir_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}
	static public ClassAsSubtype_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);
		ClassAsSubtype_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			new_inst = (ClassAsSubtype_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClassAsSubtype_c(modelRoot, p_m_obj_id, p_m_rel_id,
					p_m_oir_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ClassAsSubtype_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);
		ClassAsSubtype_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			source = (ClassAsSubtype_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		ClassAsSubtype_c new_inst = new ClassAsSubtype_c(modelRoot, p_m_obj_id,
				p_m_rel_id, p_m_oir_id);
		return new_inst;
	}
	public ClassAsSubtype_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_oir_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		m_rel_id = IdAssigner.NULL_UUID;
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_oir_id != p_newKey) {

			m_oir_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClassAsSubtype_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClassAsSubtype_c)) {
			return false;
		}

		ClassAsSubtype_c me = (ClassAsSubtype_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getOir_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSubtype_c) elem).getOir_id())) && this != elem)) {
			return false;
		}
		if (!getOir_id().equals(((ClassAsSubtype_c) elem).getOir_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSubtype_c) elem).getObj_id())) && this != elem)) {
			return false;
		}
		if (!getObj_id().equals(((ClassAsSubtype_c) elem).getObj_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSubtype_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((ClassAsSubtype_c) elem).getRel_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClassAsSubtype_c)) {
			return false;
		}

		ClassAsSubtype_c me = (ClassAsSubtype_c) elem;
		if (!getOir_idCachedValue().equals(
				((ClassAsSubtype_c) elem).getOir_idCachedValue()))
			return false;
		if (!getObj_idCachedValue().equals(
				((ClassAsSubtype_c) elem).getObj_idCachedValue()))
			return false;
		if (!getRel_idCachedValue().equals(
				((ClassAsSubtype_c) elem).getRel_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_oir_id;
	private java.util.UUID m_obj_id;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	SubtypeSupertypeAssociation_c IsRelatedToSupertypeViaSubtypeSupertypeAssociation;
	public void relateAcrossR213To(SubtypeSupertypeAssociation_c target) {
		relateAcrossR213To(target, true);
	}
	public void relateAcrossR213To(SubtypeSupertypeAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsRelatedToSupertypeViaSubtypeSupertypeAssociation)
			return; // already related

		if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation != null) {

				IsRelatedToSupertypeViaSubtypeSupertypeAssociation
						.clearBackPointerR213To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassAsSubtype_c.relateAcrossR213To(SubtypeSupertypeAssociation_c target)",
									"Relate performed across R213 from Class As Subtype to Subtype Supertype Association without unrelate of prior instance.");
				}
			}

			IsRelatedToSupertypeViaSubtypeSupertypeAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR213To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "213", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR213From(SubtypeSupertypeAssociation_c target) {
		unrelateAcrossR213From(target, true);
	}
	public void unrelateAcrossR213From(SubtypeSupertypeAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation == null)
			return; // already unrelated

		if (target != IsRelatedToSupertypeViaSubtypeSupertypeAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R213",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR213To(this);
		}

		if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation != null) {

			m_rel_id = IsRelatedToSupertypeViaSubtypeSupertypeAssociation
					.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsRelatedToSupertypeViaSubtypeSupertypeAssociation
						.getRel_idCachedValue();
			}
			IsRelatedToSupertypeViaSubtypeSupertypeAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "213", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(
			SubtypeSupertypeAssociation_c[] targets) {
		return getOneR_SUBOnR213(targets, null);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(
			SubtypeSupertypeAssociation_c[] targets, ClassQueryInterface_c test) {
		ClassAsSubtype_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_SUBOnR213(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(
			SubtypeSupertypeAssociation_c target) {
		return getOneR_SUBOnR213(target, null);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(
			SubtypeSupertypeAssociation_c target, boolean loadComponent) {
		return getOneR_SUBOnR213(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_SUBOnR213(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(ModelRoot modelRoot,
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test) {
		return getOneR_SUBOnR213(modelRoot, target, test, true);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR213(ModelRoot modelRoot,
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneR_SUBOnR213(modelRoot, target, test);
	}
	private static ClassAsSubtype_c find_getOneR_SUBOnR213(ModelRoot modelRoot,
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_RelatesClassAsSubtypeRelates_R213) {
				for (int i = 0; i < target.backPointer_RelatesClassAsSubtypeRelates_R213
						.size(); ++i) {
					ClassAsSubtype_c source = (ClassAsSubtype_c) target.backPointer_RelatesClassAsSubtypeRelates_R213
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c[] targets) {
		return getManyR_SUBsOnR213(targets, null);
	}
	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c[] targets, boolean loadComponent) {
		return getManyR_SUBsOnR213(targets, null, loadComponent);
	}
	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c[] targets, ClassQueryInterface_c test) {
		return getManyR_SUBsOnR213(targets, test, true);
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassAsSubtype_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_RelatesClassAsSubtypeRelates_R213) {
				for (int j = 0; j < targets[i].backPointer_RelatesClassAsSubtypeRelates_R213
						.size(); ++j) {
					ClassAsSubtype_c source = (ClassAsSubtype_c) targets[i].backPointer_RelatesClassAsSubtypeRelates_R213
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ClassAsSubtype_c[] ret_set = new ClassAsSubtype_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSubtype_c[0];
		}
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c target) {
		return getManyR_SUBsOnR213(target, null);
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c target, boolean loadComponent) {
		return getManyR_SUBsOnR213(target, null, loadComponent);
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test) {
		return getManyR_SUBsOnR213(target, test, true);
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR213(
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ClassAsSubtype_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_RelatesClassAsSubtypeRelates_R213) {
			for (int i = 0; i < target.backPointer_RelatesClassAsSubtypeRelates_R213
					.size(); ++i) {
				ClassAsSubtype_c source = (ClassAsSubtype_c) target.backPointer_RelatesClassAsSubtypeRelates_R213
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ClassAsSubtype_c[] ret_set = new ClassAsSubtype_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSubtype_c[0];
		}
	}

	// referring navigation

	ReferringClassInAssoc_c IsSupertypeReferringClassInAssoc;
	public void relateAcrossR205To(ReferringClassInAssoc_c target) {
		relateAcrossR205To(target, true);
	}
	public void relateAcrossR205To(ReferringClassInAssoc_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeReferringClassInAssoc)
			return; // already related

		if (IsSupertypeReferringClassInAssoc != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeReferringClassInAssoc != null) {

				IsSupertypeReferringClassInAssoc.clearBackPointerR205To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassAsSubtype_c.relateAcrossR205To(ReferringClassInAssoc_c target)",
									"Relate performed across R205 from Class As Subtype to Referring Class In Assoc without unrelate of prior instance.");
				}
			}

			IsSupertypeReferringClassInAssoc = target;
			if (IdAssigner.NULL_UUID.equals(target.getOir_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_oir_id = target.getOir_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR205To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "205", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR205From(ReferringClassInAssoc_c target) {
		unrelateAcrossR205From(target, true);
	}
	public void unrelateAcrossR205From(ReferringClassInAssoc_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeReferringClassInAssoc == null)
			return; // already unrelated

		if (target != IsSupertypeReferringClassInAssoc) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R205",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR205To(this);
		}

		if (IsSupertypeReferringClassInAssoc != null) {

			m_oir_id = IsSupertypeReferringClassInAssoc.getOir_id();
			if (IdAssigner.NULL_UUID.equals(m_oir_id)) {
				m_oir_id = IsSupertypeReferringClassInAssoc
						.getOir_idCachedValue();
			}
			m_obj_id = IsSupertypeReferringClassInAssoc.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IsSupertypeReferringClassInAssoc
						.getObj_idCachedValue();
			}
			m_rel_id = IsSupertypeReferringClassInAssoc.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsSupertypeReferringClassInAssoc
						.getRel_idCachedValue();
			}
			IsSupertypeReferringClassInAssoc = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "205", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(
			ReferringClassInAssoc_c[] targets) {
		return getOneR_SUBOnR205(targets, null);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		ClassAsSubtype_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_SUBOnR205(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(
			ReferringClassInAssoc_c target) {
		return getOneR_SUBOnR205(target, null);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(
			ReferringClassInAssoc_c target, boolean loadComponent) {
		return getOneR_SUBOnR205(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(
			ReferringClassInAssoc_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_SUBOnR205(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(ModelRoot modelRoot,
			ReferringClassInAssoc_c target, ClassQueryInterface_c test) {
		return getOneR_SUBOnR205(modelRoot, target, test, true);
	}

	public static ClassAsSubtype_c getOneR_SUBOnR205(ModelRoot modelRoot,
			ReferringClassInAssoc_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneR_SUBOnR205(modelRoot, target, test);
	}
	private static ClassAsSubtype_c find_getOneR_SUBOnR205(ModelRoot modelRoot,
			ReferringClassInAssoc_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ClassAsSubtype_c source = (ClassAsSubtype_c) target.backPointer_IsSubtypeClassAsSubtypeIsSubtype_R205;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR205(
			ReferringClassInAssoc_c[] targets) {
		return getManyR_SUBsOnR205(targets, null);
	}
	public static ClassAsSubtype_c[] getManyR_SUBsOnR205(
			ReferringClassInAssoc_c[] targets, boolean loadComponent) {
		return getManyR_SUBsOnR205(targets, null, loadComponent);
	}
	public static ClassAsSubtype_c[] getManyR_SUBsOnR205(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getManyR_SUBsOnR205(targets, test, true);
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR205(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassAsSubtype_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassAsSubtype_c source = (ClassAsSubtype_c) targets[i].backPointer_IsSubtypeClassAsSubtypeIsSubtype_R205;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassAsSubtype_c[] ret_set = new ClassAsSubtype_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSubtype_c[0];
		}
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR205(
			ReferringClassInAssoc_c target) {
		if (target != null) {
			ReferringClassInAssoc_c[] targetArray = new ReferringClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_SUBsOnR205(targetArray);
		} else {
			ClassAsSubtype_c[] result = new ClassAsSubtype_c[0];
			return result;
		}
	}

	public static ClassAsSubtype_c[] getManyR_SUBsOnR205(
			ReferringClassInAssoc_c target, boolean loadComponent) {
		if (target != null) {
			ReferringClassInAssoc_c[] targetArray = new ReferringClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_SUBsOnR205(targetArray, loadComponent);
		} else {
			ClassAsSubtype_c[] result = new ClassAsSubtype_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation == null) {
			// R213
			SubtypeSupertypeAssociation_c relInst58294 = (SubtypeSupertypeAssociation_c) baseRoot
					.getInstanceList(SubtypeSupertypeAssociation_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58294 == null) {
				relInst58294 = (SubtypeSupertypeAssociation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(SubtypeSupertypeAssociation_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst58294 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58294 = (SubtypeSupertypeAssociation_c) roots[i]
							.getInstanceList(
									SubtypeSupertypeAssociation_c.class).get(
									new Object[]{m_rel_id});
					if (relInst58294 != null)
						break;
				}
			}
			//synchronized
			if (relInst58294 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58294) && !isProxy())) {
					relInst58294.relateAcrossR213To(this, notifyChanges);
				}
			}
		}

		// R205
		ReferringClassInAssoc_c relInst58295 = (ReferringClassInAssoc_c) baseRoot
				.getInstanceList(ReferringClassInAssoc_c.class).get(
						new Object[]{m_oir_id, m_obj_id, m_rel_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58295 == null) {
			relInst58295 = (ReferringClassInAssoc_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(ReferringClassInAssoc_c.class)
					.get(new Object[]{m_oir_id, m_obj_id, m_rel_id});
		}
		if (relInst58295 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58295 = (ReferringClassInAssoc_c) roots[i]
						.getInstanceList(ReferringClassInAssoc_c.class).get(
								new Object[]{m_oir_id, m_obj_id, m_rel_id});
				if (relInst58295 != null)
					break;
			}
		}
		//synchronized
		if (relInst58295 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58295) && !isProxy())) {
				relInst58295.relateAcrossR205To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R213
		// R_SUBSUP
		inst = IsRelatedToSupertypeViaSubtypeSupertypeAssociation;
		unrelateAcrossR213From(
				IsRelatedToSupertypeViaSubtypeSupertypeAssociation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R205
		// R_RGO
		inst = IsSupertypeReferringClassInAssoc;
		unrelateAcrossR205From(IsSupertypeReferringClassInAssoc, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassAsSubtype_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassAsSubtype_c inst = (ClassAsSubtype_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClassAsSubtype_c ClassAsSubtypeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ClassAsSubtype_c result = findClassAsSubtypeInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ClassAsSubtype_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findClassAsSubtypeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ClassAsSubtype_c findClassAsSubtypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassAsSubtype_c x = (ClassAsSubtype_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ClassAsSubtype_c ClassAsSubtypeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ClassAsSubtypeInstance(modelRoot, test, true);
	}

	public static ClassAsSubtype_c ClassAsSubtypeInstance(ModelRoot modelRoot) {
		return ClassAsSubtypeInstance(modelRoot, null, true);
	}

	public static ClassAsSubtype_c[] ClassAsSubtypeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassAsSubtype_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSubtype_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassAsSubtype_c x = (ClassAsSubtype_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClassAsSubtype_c[] ret_set = new ClassAsSubtype_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassAsSubtype_c[0];
			}
		}
	}
	public static ClassAsSubtype_c[] ClassAsSubtypeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassAsSubtypeInstances(modelRoot, test, true);
	}
	public static ClassAsSubtype_c[] ClassAsSubtypeInstances(ModelRoot modelRoot) {
		return ClassAsSubtypeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Class As Subtype.dispose call: ";
		SubtypeSupertypeAssociation_c testR213Inst = SubtypeSupertypeAssociation_c
				.getOneR_SUBSUPOnR213(this, false);

		if (testR213Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "213 ";
		}
		ReferringClassInAssoc_c testR205Inst1 = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(this, false);

		if (testR205Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "205 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Class As Subtype",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("oir_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getOir_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getOir_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getObj_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getObj_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getRel_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getRel_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getOir_idLongBased() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getOir_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getOir_id() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getOir_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeReferringClassInAssoc != null);

	}

	public java.util.UUID getOir_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_oir_id))
			return m_oir_id;
		else
			return getOir_id();
	}

	public void setOir_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_oir_id)) {
				return;
			}
		} else if (m_oir_id != null) {
			if (m_oir_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Oir_id", m_oir_id, newValue, true);
		m_oir_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getRel_idLongBased() {
		if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation != null) {
			return IsRelatedToSupertypeViaSubtypeSupertypeAssociation
					.getRel_idLongBased();
		}
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (IsRelatedToSupertypeViaSubtypeSupertypeAssociation != null) {
			return IsRelatedToSupertypeViaSubtypeSupertypeAssociation
					.getRel_id();
		}
		if (IsSupertypeReferringClassInAssoc != null) {
			return IsSupertypeReferringClassInAssoc.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype", //$NON-NLS-1$
				" Operation entered: Class As Subtype::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClassAsSubtype_c[] objs = ClassAsSubtype_c.ClassAsSubtypeInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype", //$NON-NLS-1$
				" Operation entered: Class As Subtype::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClassAsSubtype_c_test58297_c implements ClassQueryInterface_c {
			ClassAsSubtype_c_test58297_c(java.util.UUID p58298,
					java.util.UUID p58299, java.util.UUID p58300) {
				m_p58298 = p58298;
				m_p58299 = p58299;
				m_p58300 = p58300;
			}
			private java.util.UUID m_p58298;
			private java.util.UUID m_p58299;
			private java.util.UUID m_p58300;
			public boolean evaluate(Object candidate) {
				ClassAsSubtype_c selected = (ClassAsSubtype_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58298))
						& (selected.getObj_id().equals(m_p58299))
						& (selected.getRel_id().equals(m_p58300));
				return retval;
			}
		}

		ClassAsSubtype_c[] objs58296 = ClassAsSubtype_c
				.ClassAsSubtypeInstances(modelRoot,
						new ClassAsSubtype_c_test58297_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58296.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Subtype", //$NON-NLS-1$
								"Consistency: Object: Class As Subtype: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58296.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Class As Subtype: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs58296.length), e);
			}
			retval = false;

		}

		if (((objs58296.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Subtype", //$NON-NLS-1$
								"Consistency: Object: Class As Subtype: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58296.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Subtype: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58296.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Class As Subtype is a subtype in association: rel.Numb = 205
		// The supertype class is: Referring Class In Assoc
		class ReferringClassInAssoc_c_test58304_c
				implements
					ClassQueryInterface_c {
			ReferringClassInAssoc_c_test58304_c(java.util.UUID p58305,
					java.util.UUID p58306, java.util.UUID p58307) {
				m_p58305 = p58305;
				m_p58306 = p58306;
				m_p58307 = p58307;
			}
			private java.util.UUID m_p58305;
			private java.util.UUID m_p58306;
			private java.util.UUID m_p58307;
			public boolean evaluate(Object candidate) {
				ReferringClassInAssoc_c selected = (ReferringClassInAssoc_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58305))
						& (selected.getObj_id().equals(m_p58306))
						& (selected.getRel_id().equals(m_p58307));
				return retval;
			}
		}

		ReferringClassInAssoc_c[] objs58303 = ReferringClassInAssoc_c
				.ReferringClassInAssocInstances(modelRoot,
						new ReferringClassInAssoc_c_test58304_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58303.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Subtype", //$NON-NLS-1$
								"Consistency: Object: Class As Subtype: Association: 205: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58303.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Subtype: Association: 205: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58303.length), e);
			}
			retval = false;

		}

		// Class As Subtype is a referring class in association: rel.Numb = 213
		// The participating class is: Subtype Supertype Association
		class SubtypeSupertypeAssociation_c_test58309_c
				implements
					ClassQueryInterface_c {
			SubtypeSupertypeAssociation_c_test58309_c(java.util.UUID p58310) {
				m_p58310 = p58310;
			}
			private java.util.UUID m_p58310;
			public boolean evaluate(Object candidate) {
				SubtypeSupertypeAssociation_c selected = (SubtypeSupertypeAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58310));
				return retval;
			}
		}

		SubtypeSupertypeAssociation_c[] objs58308 = SubtypeSupertypeAssociation_c
				.SubtypeSupertypeAssociationInstances(modelRoot,
						new SubtypeSupertypeAssociation_c_test58309_c(
								getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs58308.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Subtype", //$NON-NLS-1$
								"Consistency: Object: Class As Subtype: Association: 213: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58308.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Subtype: Association: 213: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58308.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype",
				" Operation entered: ClassAsSubtype::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SubtypeSupertypeAssociation_c v_rsubsup = SubtypeSupertypeAssociation_c
				.getOneR_SUBSUPOnR213(this);

		ModelClass_c v_subtypeClass = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(ReferringClassInAssoc_c
								.getOneR_RGOOnR205(this)));

		ModelClass_c v_supertypeClass = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(ReferredToClassInAssoc_c
								.getOneR_RTOOnR204(ClassAsSupertype_c
										.getOneR_SUPEROnR212(v_rsubsup))));

		this.unrelateAcrossR213From(v_rsubsup);

		if (v_subtypeClass != null) {
			v_subtypeClass.Disposelowernonlocalevents(true,
					v_subtypeClass.getObj_id(), v_supertypeClass.getObj_id(),
					Gd_c.Null_unique_id());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		ReferringClassInAssoc_c v_rgo = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(this);

		ClassInAssociation_c v_cia = ClassInAssociation_c
				.getOneR_OIROnR203(v_rgo);

		if (((v_cia != null))) {

			this.unrelateAcrossR205From(v_rgo);

			if (v_cia != null) {
				v_cia.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype",
				" Operation entered: ClassAsSubtype::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		return Style_c.Solid;

	} // End get_style
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype",
				" Operation entered: ClassAsSubtype::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getOir_id();

	} // End get_ooa_id
	public String Get_connector_text(final java.util.UUID p_Ooa_id,
			final boolean p_Ooa_typeisimportedclass, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype",
				" Operation entered: ClassAsSubtype::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		return "";

	} // End get_connector_text
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype",
				" Operation entered: ClassAsSubtype::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(ReferringClassInAssoc_c
								.getOneR_RGOOnR205(this)));

		return v_obj.getName();

	} // End get_name
	public boolean Actionfilter(final String p_Name, final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Subtype",
				" Operation entered: ClassAsSubtype::Actionfilter");
		final ModelRoot modelRoot = getModelRoot();
		Association_c v_rel = Association_c
				.getOneR_RELOnR206(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR213(this));

		return v_rel.Actionfilter(p_Name, p_Value);

	} // End actionFilter

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		if (adapter == IActionFilter.class) {
			return ClassAsSubtypeActionFilter.getSingleton();
		}
		return null;
	}
} // end Class As Subtype
