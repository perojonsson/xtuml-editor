package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    CommunicationClassEventFormalizeOnMSG_AMWizard.java
//
// WARNING: Do not edit this generated file
// Generated by arc/wizard.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import java.util.Iterator;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.wizard.*;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.TransactionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * CommunicationClassEventFormalizeOnMSG_AMWizard class
 */
public class CommunicationClassEventFormalizeOnMSG_AMWizard extends Wizard {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	// workbench selection when the wizard was started
	protected IStructuredSelection m_selection;

	// the workbench instance
	protected IWorkbench m_workbench;

	// the viewer the wizard was started from. This must be replaced with a listener system
	protected Viewer m_viewer;

	// Pages stack
	protected Stack m_pagesStack = new Stack();

	// wizard pages
	CommunicationClassEventFormalizeOnMSG_AMWizardPage4 MSG_AM_CommunicationClassEventFormalizePage4;

	// wizard state
	// constants
	protected static final int INITIAL_WIZARD_STATE = -1;
	protected static final int MSG_AM_COMMUNICATIONCLASSEVENTFORMALIZE0_WIZARD_STATE = 0;
	// member
	protected int m_state = INITIAL_WIZARD_STATE;
	// end wizard state

	// cache for contextual selections (public for use by unit tests)
	public AsynchronousMessage_c v_asyncMessage = null;
	public ClassParticipant_c v_cp = null;

	// cache for the users selections (public for use by unit tests)
	public StateMachineEvent_c v_Message = null;

	/**
	 * Constructor for CommunicationClassEventFormalizeOnMSG_AMWizard.
	 */
	public CommunicationClassEventFormalizeOnMSG_AMWizard() {
		super();
	}

	/**
	 * See field.
	 */
	public IStructuredSelection getSelection() {
		return m_selection;
	}

	public void addPages() {
		MSG_AM_CommunicationClassEventFormalizePage4 = new CommunicationClassEventFormalizeOnMSG_AMWizardPage4(
				"CommunicationClassEventFormalizeOnMSG_AMWizardPage4");
		addPage(MSG_AM_CommunicationClassEventFormalizePage4);
	}

	/**
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection,
			Viewer viewer) {
		this.m_workbench = workbench;
		this.m_selection = selection;
		this.m_viewer = viewer;
		for (Iterator iterator = selection.iterator(); iterator.hasNext();) {
			Object context = iterator.next();
			if (context instanceof AsynchronousMessage_c) {
				v_asyncMessage = (AsynchronousMessage_c) context;
			}
			if (context instanceof ClassParticipant_c) {
				v_cp = (ClassParticipant_c) context;
			}
		}
	}

	public boolean canFinish() {
		boolean pagesComplete = true;
		pagesComplete = pagesComplete
				&& MSG_AM_CommunicationClassEventFormalizePage4
						.isPageComplete();
		return pagesComplete;
	}

	public IWizardPage getNextPage(IWizardPage page) {
		List pages = new ArrayList(getPages().length);
		for (int i = 0; i < getPages().length; i++) {
			pages.add(getPages()[i]);
		}
		switch (pages.indexOf(page)) {
			case MSG_AM_COMMUNICATIONCLASSEVENTFORMALIZE0_WIZARD_STATE :
				return null;
		}
		return null;
	}

	public IWizardPage getPreviousPage(IWizardPage page) {
		if (m_pagesStack.empty()) {
			return null;
		} else {
			List pages = new ArrayList(getPages().length);
			for (int i = 0; i < getPages().length; i++) {
				pages.add(getPages()[i]);
			}
			m_state = pages.indexOf((IWizardPage) m_pagesStack.peek());
			((PtWizardPage) m_pagesStack.peek()).onPageEntry();
			return (IWizardPage) m_pagesStack.pop();
		}
	}

	public boolean performFinish() 
	{
		TransactionUtil.TransactionGroup transactionGroup = null;
		ModelRoot modelRoot = v_cp.getModelRoot();
		try {
			transactionGroup = TransactionUtil.startTransactionsOnSelectedModelRoots(
				"Communication Class Event Formalize"); //$NON-NLS-1$
if ( (  (v_asyncMessage != null)) )
{

if ( (  (v_cp != null)) )
{

Message_c v_message = Message_c.getOneMSG_MOnR1018(v_asyncMessage);


InteractionParticipant_c v_participant = InteractionParticipant_c.getOneSQ_POnR930(v_cp);


if (v_message != null) {
  v_message.relateAcrossR1007To(v_participant);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ModelClass_c v_mclass = ModelClass_c.getOneO_OBJOnR939(v_cp);


if ( (  (v_mclass != null)) )
{

StateMachine_c v_stateMachine = StateMachine_c.getOneSM_SMOnR517(ClassStateMachine_c.getOneSM_ASMOnR519(v_mclass));


ClassStateMachine_c v_asm = ClassStateMachine_c.getOneSM_ASMOnR519(v_mclass);


InstanceStateMachine_c v_ism = InstanceStateMachine_c.getOneSM_ISMOnR518(v_mclass);


java.util.UUID         v_asmId = Gd_c.Null_unique_id() ;


java.util.UUID         v_ismId = Gd_c.Null_unique_id() ;


if ( (  (v_asm != null)) )
{

v_asmId = v_asm.getSm_id() ;



}

if ( (  (v_ism != null)) )
{

v_ismId = v_ism.getSm_id() ;



}

StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR1009(EventMessage_c.getOneMSG_EOnR1019(v_asyncMessage));


java.util.UUID         v_existingId = Gd_c.Null_unique_id() ;


if ( (  (v_evt != null)) )
{

v_existingId = v_evt.getSmevt_id() ;



}

StateMachine_c v_machines1 = (StateMachine_c) modelRoot.getInstanceList(StateMachine_c.class).getGlobal(null, v_asmId);
List<StateMachine_c> v_machinesList = new ArrayList<StateMachine_c>();
if(v_machines1 != null) {
	v_machinesList.add(v_machines1);
}
StateMachine_c[] v_machines = v_machinesList.toArray(new StateMachine_c[v_machinesList.size()]);
StateMachine_c v_machines2 = (StateMachine_c) modelRoot.getInstanceList(StateMachine_c.class).getGlobal(null, v_ismId);
if(v_machines2 != null) {
	v_machinesList.add(v_machines2);
}
v_machines = v_machinesList.toArray(new StateMachine_c[v_machinesList.size()]);


if ( (  (v_Message != null)) )
{

if (v_asyncMessage != null) {
v_asyncMessage.Formalizewithevent(			    
v_Message.getSmevt_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


Sel_c.Clearselection() ;



}


}


}


}


    // catch all exceptions and cancel the transaction
		} catch (Exception e) {
			if (transactionGroup != null) TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError("Transaction: Communication Class Event Formalize failed", e);//$NON-NLS-1$
			// return true so that the wizard will
			// close
			return true;
		}
		if (transactionGroup != null) TransactionUtil.endTransactions(transactionGroup);
    if (m_viewer != null) {
      if (m_viewer instanceof StructuredViewer) {
		((StructuredViewer)m_viewer).refresh(v_cp);
      }
      else {
      	m_viewer.refresh();
      }
    }
    return true;
  }
}
