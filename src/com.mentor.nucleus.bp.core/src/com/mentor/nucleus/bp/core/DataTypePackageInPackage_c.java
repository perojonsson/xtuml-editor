      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.DataTypePackageInPackage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_DATA_TYPE_PACKAGE_IN_PACKAGE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class DataTypePackageInPackage_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public DataTypePackageInPackage_c(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
        
    Object [] key = {m_package_id};
    addInstanceToMap(key);
  }
  static public DataTypePackageInPackage_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);
      DataTypePackageInPackage_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_package_id};
          new_inst = (DataTypePackageInPackage_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new DataTypePackageInPackage_c(modelRoot,
p_m_package_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public DataTypePackageInPackage_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id){
    InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);
    DataTypePackageInPackage_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_package_id
            };
        source = (DataTypePackageInPackage_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    DataTypePackageInPackage_c new_inst = new DataTypePackageInPackage_c(modelRoot,
p_m_package_id
);
    return new_inst;
  }
  public DataTypePackageInPackage_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_package_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_package_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_package_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_package_id !=  p_newKey ){
	
		m_package_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof DataTypePackageInPackage_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof DataTypePackageInPackage_c)) {
           return false;
       }
       
       DataTypePackageInPackage_c me = (DataTypePackageInPackage_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getPackage_id()) || IdAssigner.NULL_UUID.equals(((DataTypePackageInPackage_c)elem).getPackage_id())) && this != elem)) {
      	return false;
      }
      if (!getPackage_id().equals(((DataTypePackageInPackage_c)elem).getPackage_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof DataTypePackageInPackage_c)) {
           return false;
       }
       
       DataTypePackageInPackage_c me = (DataTypePackageInPackage_c)elem;
      if (!getPackage_idCachedValue().equals(((DataTypePackageInPackage_c)elem).getPackage_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_package_id ;
      
// declare association references from this class
  
  
    
// referring navigation

DataTypePackage_c ContainsChildrenOfDataTypePackage ;
public void relateAcrossR37To(DataTypePackage_c target)
{
	relateAcrossR37To(target, true);
}
public void relateAcrossR37To(DataTypePackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ContainsChildrenOfDataTypePackage) return;  // already related

    if ( ContainsChildrenOfDataTypePackage != target ) {
    
    Object oldKey = getInstanceKey();

    if (ContainsChildrenOfDataTypePackage != null) {
    
        ContainsChildrenOfDataTypePackage.clearBackPointerR37To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"DataTypePackageInPackage_c.relateAcrossR37To(DataTypePackage_c target)", 
			"Relate performed across R37 from Data Type Package in Package to Data Type Package without unrelate of prior instance.");  
		}
    }
                
    	ContainsChildrenOfDataTypePackage = target ;
        if(IdAssigner.NULL_UUID.equals(target.getPackage_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_package_id = target.getPackage_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR37To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "37", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR37From(DataTypePackage_c target)
{
	unrelateAcrossR37From(target, true);
}
public void unrelateAcrossR37From(DataTypePackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ContainsChildrenOfDataTypePackage == null) return;  // already unrelated
	
	if (target != ContainsChildrenOfDataTypePackage) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R37", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR37To(this);
    }
    

      if(ContainsChildrenOfDataTypePackage != null) {
      
        m_package_id = ContainsChildrenOfDataTypePackage.getPackage_id();
        if(IdAssigner.NULL_UUID.equals(m_package_id))
        {
          m_package_id = ContainsChildrenOfDataTypePackage.getPackage_idCachedValue();
        }       
        ContainsChildrenOfDataTypePackage = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "37", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static DataTypePackageInPackage_c getOneS_DPIPOnR37(DataTypePackage_c [] targets)
{
    return getOneS_DPIPOnR37(targets, null);
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR37(DataTypePackage_c [] targets, ClassQueryInterface_c test)
{
    DataTypePackageInPackage_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_DPIPOnR37(targets[i], test);
        }
    }

    return ret_val;
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR37(DataTypePackage_c target)
{
  return getOneS_DPIPOnR37(target, null);
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR37(DataTypePackage_c target, boolean loadComponent)
{
    return getOneS_DPIPOnR37(target.getModelRoot(), target, null, loadComponent);
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR37(DataTypePackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_DPIPOnR37(target.getModelRoot(), target, test);
  }
  return null;
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR37(ModelRoot modelRoot, DataTypePackage_c target, ClassQueryInterface_c test)
{
	return getOneS_DPIPOnR37(modelRoot, target, test, true);
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR37(ModelRoot modelRoot, DataTypePackage_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneS_DPIPOnR37(modelRoot,target,test);
}
private static DataTypePackageInPackage_c find_getOneS_DPIPOnR37(ModelRoot modelRoot, DataTypePackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    DataTypePackageInPackage_c source = (DataTypePackageInPackage_c)target.backPointer_IsParentToOtherPackagesViaDataTypePackageInPackageIsParentToOtherPackagesVia_R37;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR37(DataTypePackage_c [] targets)
{
  return getManyS_DPIPsOnR37(targets, null);
}
public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR37(DataTypePackage_c [] targets, boolean loadComponent)
{
  return getManyS_DPIPsOnR37(targets, null, loadComponent);
}
public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR37(DataTypePackage_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_DPIPsOnR37(targets, test, true);
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR37(DataTypePackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new DataTypePackageInPackage_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      DataTypePackageInPackage_c source = (DataTypePackageInPackage_c)targets[i].backPointer_IsParentToOtherPackagesViaDataTypePackageInPackageIsParentToOtherPackagesVia_R37;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	DataTypePackageInPackage_c[] ret_set = new DataTypePackageInPackage_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new DataTypePackageInPackage_c[0];
  }
  }

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR37(DataTypePackage_c target)
{
  if (target != null) {
    DataTypePackage_c [] targetArray = new DataTypePackage_c[1];
    targetArray[0] = target;
    return getManyS_DPIPsOnR37(targetArray);
  } else {
    DataTypePackageInPackage_c [] result = new DataTypePackageInPackage_c [0] ;
  return result ;
}
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR37(DataTypePackage_c target, boolean loadComponent)
{
  if (target != null) {
    DataTypePackage_c [] targetArray = new DataTypePackage_c[1];
    targetArray[0] = target;
    return getManyS_DPIPsOnR37(targetArray, loadComponent);
  } else {
    DataTypePackageInPackage_c [] result = new DataTypePackageInPackage_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<DataTypePackage_c> backPointer_ContainsDataTypePackageContains_R38 = new ArrayList<DataTypePackage_c>();

public void setDataTypePackageOrderInChildListR38(DataTypePackage_c target, int index) {
	unrelateAcrossR38From(target);
	DataTypePackage_c[] elements = DataTypePackage_c.getManyS_DPKsOnR38(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR38From((DataTypePackage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR38To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR38To((DataTypePackage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR38To(DataTypePackage_c target)
{
  if (target != null) {
    target.relateAcrossR38To(this, true) ;
  }
}

public void relateAcrossR38To(DataTypePackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR38To(this, notifyChanges) ;
  }
}

public void setBackPointerR38To(DataTypePackage_c target)
{
  	synchronized (backPointer_ContainsDataTypePackageContains_R38) {
		backPointer_ContainsDataTypePackageContains_R38.add(target);
	}
}

public void unrelateAcrossR38From(DataTypePackage_c target)
{
  if (target != null) {
    target.unrelateAcrossR38From(this, true) ;
  }
}

public void unrelateAcrossR38From(DataTypePackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR38From(this, notifyChanges) ;
  }
}

public void clearBackPointerR38To(DataTypePackage_c target)
{
  synchronized (backPointer_ContainsDataTypePackageContains_R38) {
	    backPointer_ContainsDataTypePackageContains_R38.remove(target);
	}
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR38(DataTypePackage_c [] targets)
{
    return getOneS_DPIPOnR38(targets, null);
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR38(DataTypePackage_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DPIPOnR38(targets, test, true);
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR38(DataTypePackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataTypePackageInPackage_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataTypePackageInPackage_c candidate_val = getOneS_DPIPOnR38(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DPIPOnR38(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataTypePackageInPackage_c getOneS_DPIPOnR38(DataTypePackage_c target)
{
	return getOneS_DPIPOnR38(target, true);
}
public static DataTypePackageInPackage_c getOneS_DPIPOnR38(DataTypePackage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsChildViaDataTypePackageInPackage != null){
		target.IsChildViaDataTypePackageInPackage.loadProxy();
	}
	}
    return target.IsChildViaDataTypePackageInPackage ;
  } else {
    return null;
  }
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DPIPsOnR38(targets, test, true);
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataTypePackageInPackage_c[0];
  
  
  LinkedHashSet<DataTypePackageInPackage_c> elementsSet = new LinkedHashSet<DataTypePackageInPackage_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsChildViaDataTypePackageInPackage == null)
	  targets[i].loadProxy();
    DataTypePackageInPackage_c associate = targets[i].IsChildViaDataTypePackageInPackage;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataTypePackageInPackage_c[] result = new DataTypePackageInPackage_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c [] targets)
{
  return getManyS_DPIPsOnR38(targets, null);
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    DataTypePackage_c [] targetArray = new DataTypePackage_c[1];
    targetArray[0] = target;
    return getManyS_DPIPsOnR38(targetArray, test, loadComponent);
  } else {
    DataTypePackageInPackage_c [] result = new DataTypePackageInPackage_c [0] ;
    return result ;
  }
  
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DPIPsOnR38(target, null, true);
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c target)
{
    return getManyS_DPIPsOnR38(target, null, true);
}

public static DataTypePackageInPackage_c [] getManyS_DPIPsOnR38(DataTypePackage_c target, boolean loadComponent)
{
    return getManyS_DPIPsOnR38(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ContainsChildrenOfDataTypePackage == null) {          
      // R37
      DataTypePackage_c relInst56677 = (DataTypePackage_c) baseRoot.getInstanceList(DataTypePackage_c.class).get(new Object[] {m_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56677 == null) {
      			relInst56677 = (DataTypePackage_c) Ooaofooa.getDefaultInstance().getInstanceList(DataTypePackage_c.class).get(new Object[] {m_package_id});
      		}
			if (relInst56677 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56677 = (DataTypePackage_c) roots[i].getInstanceList(DataTypePackage_c.class).get(new Object[] {m_package_id});
					if (relInst56677 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56677 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56677) && !isProxy())) {
	      relInst56677.relateAcrossR37To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R37
      // S_DPK
		  inst=ContainsChildrenOfDataTypePackage;
			unrelateAcrossR37From(ContainsChildrenOfDataTypePackage, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final DataTypePackageInPackage_c inst = (DataTypePackageInPackage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static DataTypePackageInPackage_c DataTypePackageInPackageInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		DataTypePackageInPackage_c result=findDataTypePackageInPackageInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,DataTypePackageInPackage_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findDataTypePackageInPackageInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static DataTypePackageInPackage_c findDataTypePackageInPackageInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				DataTypePackageInPackage_c x = (DataTypePackageInPackage_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static DataTypePackageInPackage_c DataTypePackageInPackageInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return DataTypePackageInPackageInstance(modelRoot,test,true);
  }
  
  public static DataTypePackageInPackage_c DataTypePackageInPackageInstance(ModelRoot modelRoot)
  {
	 return DataTypePackageInPackageInstance(modelRoot,null,true);
  }

  public static DataTypePackageInPackage_c [] DataTypePackageInPackageInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, DataTypePackageInPackage_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(DataTypePackageInPackage_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					DataTypePackageInPackage_c x = (DataTypePackageInPackage_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				DataTypePackageInPackage_c[] ret_set = new DataTypePackageInPackage_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new DataTypePackageInPackage_c[0];
			}		
		} 
  }
  public static DataTypePackageInPackage_c [] DataTypePackageInPackageInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  DataTypePackageInPackageInstances(modelRoot,test,true);
  }
  public static DataTypePackageInPackage_c [] DataTypePackageInPackageInstances(ModelRoot modelRoot)
  {
	return DataTypePackageInPackageInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Data Type Package in Package.dispose call: ";
	DataTypePackage_c testR37Inst = DataTypePackage_c.getOneS_DPKOnR37(this, false);

	if ( testR37Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "37 ";
	}
	DataTypePackage_c testR38Inst = DataTypePackage_c.getOneS_DPKOnR38(this, false);

	if ( testR38Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "38 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Data Type Package in Package", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("package_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getPackage_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getPackage_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getPackage_idLongBased()
  {
    if ( ContainsChildrenOfDataTypePackage != null )
    {
      return ContainsChildrenOfDataTypePackage.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPackage_id()
  {
    if ( ContainsChildrenOfDataTypePackage != null )
    {
      return ContainsChildrenOfDataTypePackage.getPackage_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPackage_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_package_id) )
      return m_package_id;
    else
      return getPackage_id();
  }
  
  public void setPackage_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_package_id)){
	        return;
	    }
	}else if(m_package_id != null){
	    if(m_package_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Package_id", m_package_id, newValue,true); 
   m_package_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Data Type Package in Package", //$NON-NLS-1$
	  " Operation entered: Data Type Package in Package::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     DataTypePackageInPackage_c [] objs = DataTypePackageInPackage_c.DataTypePackageInPackageInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Data Type Package in Package", //$NON-NLS-1$
	  " Operation entered: Data Type Package in Package::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class DataTypePackageInPackage_c_test56679_c implements ClassQueryInterface_c
    {
	  DataTypePackageInPackage_c_test56679_c( java.util.UUID            p56680 ) {
	  m_p56680 = p56680;
	  }
	  private java.util.UUID             m_p56680; 
	  public boolean evaluate (Object candidate)
	  {
	      DataTypePackageInPackage_c selected = (DataTypePackageInPackage_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p56680));
	      return retval;
	  }
    }

    DataTypePackageInPackage_c [] objs56678 = 
    DataTypePackageInPackage_c.DataTypePackageInPackageInstances(modelRoot, new DataTypePackageInPackage_c_test56679_c(getPackage_id())) ;

    if ( (  (objs56678.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type Package in Package", //$NON-NLS-1$
           "Consistency: Object: Data Type Package in Package: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56678.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type Package in Package: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56678.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56678.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type Package in Package", //$NON-NLS-1$
           "Consistency: Object: Data Type Package in Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56678.length )  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type Package in Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56678.length )  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Data Type Package in Package is a referring class in association: rel.Numb = 37
          // The participating class is: Data Type Package
    class DataTypePackage_c_test56684_c implements ClassQueryInterface_c
    {
	  DataTypePackage_c_test56684_c( java.util.UUID            p56685 ) {
	  m_p56685 = p56685;
	  }
	  private java.util.UUID             m_p56685; 
	  public boolean evaluate (Object candidate)
	  {
	      DataTypePackage_c selected = (DataTypePackage_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p56685));
	      return retval;
	  }
    }

    DataTypePackage_c [] objs56683 = 
    DataTypePackage_c.DataTypePackageInstances(modelRoot, new DataTypePackage_c_test56684_c(getPackage_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56683.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type Package in Package", //$NON-NLS-1$
           "Consistency: Object: Data Type Package in Package: Association: 37: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56683.length )  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type Package in Package: Association: 37: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56683.length )  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Data Type Package in Package is a participating class in association: rel.Numb = 38
             // Object: Data Type Package
    return retval;
  }



  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Data Type Package in Package
