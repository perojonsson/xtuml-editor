package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.DerivedAssociation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_DERIVED_ASSOCIATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class DerivedAssociation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public DerivedAssociation_c(ModelRoot modelRoot, java.util.UUID p_m_rel_id,
			String p_m_rel_chn) {
		super(modelRoot);
		m_rel_chn = p_m_rel_chn;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		Object[] key = {m_rel_id};
		addInstanceToMap(key);
	}
	static public DerivedAssociation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_rel_id, String p_m_rel_chn,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAssociation_c.class);
		DerivedAssociation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_rel_id};
			new_inst = (DerivedAssociation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_rel_chn = p_m_rel_chn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new DerivedAssociation_c(modelRoot, p_m_rel_id,
					p_m_rel_chn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public DerivedAssociation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_rel_id, String p_m_rel_chn) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAssociation_c.class);
		DerivedAssociation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_rel_id};
			source = (DerivedAssociation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_rel_chn = p_m_rel_chn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		DerivedAssociation_c new_inst = new DerivedAssociation_c(modelRoot,
				p_m_rel_id, p_m_rel_chn);
		return new_inst;
	}
	public DerivedAssociation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_rel_chn = "";
		m_rel_id = IdAssigner.NULL_UUID;
		Object[] key = {m_rel_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_rel_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_rel_id != p_newKey) {

			m_rel_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof DerivedAssociation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof DerivedAssociation_c)) {
			return false;
		}

		DerivedAssociation_c me = (DerivedAssociation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((DerivedAssociation_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((DerivedAssociation_c) elem).getRel_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof DerivedAssociation_c)) {
			return false;
		}

		DerivedAssociation_c me = (DerivedAssociation_c) elem;
		if (!getRel_idCachedValue().equals(
				((DerivedAssociation_c) elem).getRel_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_rel_chn;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	Association_c IsSupertypeAssociation;
	public void relateAcrossR206To(Association_c target) {
		relateAcrossR206To(target, true);
	}
	public void relateAcrossR206To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeAssociation)
			return; // already related

		if (IsSupertypeAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeAssociation != null) {

				IsSupertypeAssociation.clearBackPointerR206To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DerivedAssociation_c.relateAcrossR206To(Association_c target)",
									"Relate performed across R206 from Derived Association to Association without unrelate of prior instance.");
				}
			}

			IsSupertypeAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR206To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "206", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR206From(Association_c target) {
		unrelateAcrossR206From(target, true);
	}
	public void unrelateAcrossR206From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeAssociation == null)
			return; // already unrelated

		if (target != IsSupertypeAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R206",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR206To(this);
		}

		if (IsSupertypeAssociation != null) {

			m_rel_id = IsSupertypeAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsSupertypeAssociation.getRel_idCachedValue();
			}
			IsSupertypeAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "206", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(
			Association_c[] targets) {
		return getOneR_COMPOnR206(targets, null);
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(
			Association_c[] targets, ClassQueryInterface_c test) {
		DerivedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_COMPOnR206(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(Association_c target) {
		return getOneR_COMPOnR206(target, null);
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(Association_c target,
			boolean loadComponent) {
		return getOneR_COMPOnR206(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_COMPOnR206(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneR_COMPOnR206(modelRoot, target, test, true);
	}

	public static DerivedAssociation_c getOneR_COMPOnR206(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneR_COMPOnR206(modelRoot, target, test);
	}
	private static DerivedAssociation_c find_getOneR_COMPOnR206(
			ModelRoot modelRoot, Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			DerivedAssociation_c source = (DerivedAssociation_c) target.backPointer_IsSubtypeDerivedAssociationIsSubtype_R206;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR206(
			Association_c[] targets) {
		return getManyR_COMPsOnR206(targets, null);
	}
	public static DerivedAssociation_c[] getManyR_COMPsOnR206(
			Association_c[] targets, boolean loadComponent) {
		return getManyR_COMPsOnR206(targets, null, loadComponent);
	}
	public static DerivedAssociation_c[] getManyR_COMPsOnR206(
			Association_c[] targets, ClassQueryInterface_c test) {
		return getManyR_COMPsOnR206(targets, test, true);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR206(
			Association_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DerivedAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DerivedAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			DerivedAssociation_c source = (DerivedAssociation_c) targets[i].backPointer_IsSubtypeDerivedAssociationIsSubtype_R206;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			DerivedAssociation_c[] ret_set = new DerivedAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DerivedAssociation_c[0];
		}
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR206(
			Association_c target) {
		if (target != null) {
			Association_c[] targetArray = new Association_c[1];
			targetArray[0] = target;
			return getManyR_COMPsOnR206(targetArray);
		} else {
			DerivedAssociation_c[] result = new DerivedAssociation_c[0];
			return result;
		}
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR206(
			Association_c target, boolean loadComponent) {
		if (target != null) {
			Association_c[] targetArray = new Association_c[1];
			targetArray[0] = target;
			return getManyR_COMPsOnR206(targetArray, loadComponent);
		} else {
			DerivedAssociation_c[] result = new DerivedAssociation_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ClassAsDerivedOneSide_c backPointer_RelatesClassAsDerivedOneSideRelates_R214;

	public void setClassAsDerivedOneSideOrderInChildListR214(
			ClassAsDerivedOneSide_c target, int index) {
		unrelateAcrossR214From(target);
		ClassAsDerivedOneSide_c[] elements = ClassAsDerivedOneSide_c
				.getManyR_CONEsOnR214(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR214From((ClassAsDerivedOneSide_c) elements[i]);
			}
			count++;
		}
		relateAcrossR214To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR214To((ClassAsDerivedOneSide_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR214To(ClassAsDerivedOneSide_c target) {
		if (target != null) {
			target.relateAcrossR214To(this, true);
		}
	}

	public void relateAcrossR214To(ClassAsDerivedOneSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR214To(this, notifyChanges);
		}
	}

	public void setBackPointerR214To(ClassAsDerivedOneSide_c target) {
		backPointer_RelatesClassAsDerivedOneSideRelates_R214 = target;
	}

	public void unrelateAcrossR214From(ClassAsDerivedOneSide_c target) {
		if (target != null) {
			target.unrelateAcrossR214From(this, true);
		}
	}

	public void unrelateAcrossR214From(ClassAsDerivedOneSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR214From(this, notifyChanges);
		}
	}

	public void clearBackPointerR214To(ClassAsDerivedOneSide_c target) {
		if (target == backPointer_RelatesClassAsDerivedOneSideRelates_R214) {
			backPointer_RelatesClassAsDerivedOneSideRelates_R214 = null;
		}
	}

	public static DerivedAssociation_c getOneR_COMPOnR214(
			ClassAsDerivedOneSide_c[] targets) {
		return getOneR_COMPOnR214(targets, null);
	}

	public static DerivedAssociation_c getOneR_COMPOnR214(
			ClassAsDerivedOneSide_c[] targets, ClassQueryInterface_c test) {
		return getOneR_COMPOnR214(targets, test, true);
	}

	public static DerivedAssociation_c getOneR_COMPOnR214(
			ClassAsDerivedOneSide_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		DerivedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					DerivedAssociation_c candidate_val = getOneR_COMPOnR214(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_COMPOnR214(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static DerivedAssociation_c getOneR_COMPOnR214(
			ClassAsDerivedOneSide_c target) {
		return getOneR_COMPOnR214(target, true);
	}
	public static DerivedAssociation_c getOneR_COMPOnR214(
			ClassAsDerivedOneSide_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsRelatedToOtherTypeViaDerivedAssociation;
		} else {
			return null;
		}
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR214(
			ClassAsDerivedOneSide_c[] targets, ClassQueryInterface_c test) {
		return getManyR_COMPsOnR214(targets, test, true);
	}

	public static DerivedAssociation_c [] getManyR_COMPsOnR214(ClassAsDerivedOneSide_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DerivedAssociation_c[0];
  
  
  LinkedHashSet<DerivedAssociation_c> elementsSet = new LinkedHashSet<DerivedAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsRelatedToOtherTypeViaDerivedAssociation == null)
	  targets[i].loadProxy();
    DerivedAssociation_c associate = targets[i].IsRelatedToOtherTypeViaDerivedAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DerivedAssociation_c[] result = new DerivedAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static DerivedAssociation_c[] getManyR_COMPsOnR214(
			ClassAsDerivedOneSide_c[] targets) {
		return getManyR_COMPsOnR214(targets, null);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR214(
			ClassAsDerivedOneSide_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsDerivedOneSide_c[] targetArray = new ClassAsDerivedOneSide_c[1];
			targetArray[0] = target;
			return getManyR_COMPsOnR214(targetArray, test, loadComponent);
		} else {
			DerivedAssociation_c[] result = new DerivedAssociation_c[0];
			return result;
		}

	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR214(
			ClassAsDerivedOneSide_c target, ClassQueryInterface_c test) {
		return getManyR_COMPsOnR214(target, null, true);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR214(
			ClassAsDerivedOneSide_c target) {
		return getManyR_COMPsOnR214(target, null, true);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR214(
			ClassAsDerivedOneSide_c target, boolean loadComponent) {
		return getManyR_COMPsOnR214(target, null, loadComponent);
	}

	// referred to navigation

	ClassAsDerivedOtherSide_c backPointer_RelatesClassAsDerivedOtherSideRelates_R215;

	public void setClassAsDerivedOtherSideOrderInChildListR215(
			ClassAsDerivedOtherSide_c target, int index) {
		unrelateAcrossR215From(target);
		ClassAsDerivedOtherSide_c[] elements = ClassAsDerivedOtherSide_c
				.getManyR_COTHsOnR215(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR215From((ClassAsDerivedOtherSide_c) elements[i]);
			}
			count++;
		}
		relateAcrossR215To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR215To((ClassAsDerivedOtherSide_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR215To(ClassAsDerivedOtherSide_c target) {
		if (target != null) {
			target.relateAcrossR215To(this, true);
		}
	}

	public void relateAcrossR215To(ClassAsDerivedOtherSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR215To(this, notifyChanges);
		}
	}

	public void setBackPointerR215To(ClassAsDerivedOtherSide_c target) {
		backPointer_RelatesClassAsDerivedOtherSideRelates_R215 = target;
	}

	public void unrelateAcrossR215From(ClassAsDerivedOtherSide_c target) {
		if (target != null) {
			target.unrelateAcrossR215From(this, true);
		}
	}

	public void unrelateAcrossR215From(ClassAsDerivedOtherSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR215From(this, notifyChanges);
		}
	}

	public void clearBackPointerR215To(ClassAsDerivedOtherSide_c target) {
		if (target == backPointer_RelatesClassAsDerivedOtherSideRelates_R215) {
			backPointer_RelatesClassAsDerivedOtherSideRelates_R215 = null;
		}
	}

	public static DerivedAssociation_c getOneR_COMPOnR215(
			ClassAsDerivedOtherSide_c[] targets) {
		return getOneR_COMPOnR215(targets, null);
	}

	public static DerivedAssociation_c getOneR_COMPOnR215(
			ClassAsDerivedOtherSide_c[] targets, ClassQueryInterface_c test) {
		return getOneR_COMPOnR215(targets, test, true);
	}

	public static DerivedAssociation_c getOneR_COMPOnR215(
			ClassAsDerivedOtherSide_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		DerivedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					DerivedAssociation_c candidate_val = getOneR_COMPOnR215(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_COMPOnR215(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static DerivedAssociation_c getOneR_COMPOnR215(
			ClassAsDerivedOtherSide_c target) {
		return getOneR_COMPOnR215(target, true);
	}
	public static DerivedAssociation_c getOneR_COMPOnR215(
			ClassAsDerivedOtherSide_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsRelatedToOneSideViaDerivedAssociation;
		} else {
			return null;
		}
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR215(
			ClassAsDerivedOtherSide_c[] targets, ClassQueryInterface_c test) {
		return getManyR_COMPsOnR215(targets, test, true);
	}

	public static DerivedAssociation_c [] getManyR_COMPsOnR215(ClassAsDerivedOtherSide_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DerivedAssociation_c[0];
  
  
  LinkedHashSet<DerivedAssociation_c> elementsSet = new LinkedHashSet<DerivedAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsRelatedToOneSideViaDerivedAssociation == null)
	  targets[i].loadProxy();
    DerivedAssociation_c associate = targets[i].IsRelatedToOneSideViaDerivedAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DerivedAssociation_c[] result = new DerivedAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static DerivedAssociation_c[] getManyR_COMPsOnR215(
			ClassAsDerivedOtherSide_c[] targets) {
		return getManyR_COMPsOnR215(targets, null);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR215(
			ClassAsDerivedOtherSide_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsDerivedOtherSide_c[] targetArray = new ClassAsDerivedOtherSide_c[1];
			targetArray[0] = target;
			return getManyR_COMPsOnR215(targetArray, test, loadComponent);
		} else {
			DerivedAssociation_c[] result = new DerivedAssociation_c[0];
			return result;
		}

	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR215(
			ClassAsDerivedOtherSide_c target, ClassQueryInterface_c test) {
		return getManyR_COMPsOnR215(target, null, true);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR215(
			ClassAsDerivedOtherSide_c target) {
		return getManyR_COMPsOnR215(target, null, true);
	}

	public static DerivedAssociation_c[] getManyR_COMPsOnR215(
			ClassAsDerivedOtherSide_c target, boolean loadComponent) {
		return getManyR_COMPsOnR215(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R206
		Association_c relInst58225 = (Association_c) baseRoot.getInstanceList(
				Association_c.class).get(new Object[]{m_rel_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58225 == null) {
			relInst58225 = (Association_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Association_c.class)
					.get(new Object[]{m_rel_id});
		}
		if (relInst58225 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58225 = (Association_c) roots[i].getInstanceList(
						Association_c.class).get(new Object[]{m_rel_id});
				if (relInst58225 != null)
					break;
			}
		}
		//synchronized
		if (relInst58225 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58225) && !isProxy())) {
				relInst58225.relateAcrossR206To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R206
		// R_REL
		inst = IsSupertypeAssociation;
		unrelateAcrossR206From(IsSupertypeAssociation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(DerivedAssociation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final DerivedAssociation_c inst = (DerivedAssociation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAssociation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static DerivedAssociation_c DerivedAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		DerivedAssociation_c result = findDerivedAssociationInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					DerivedAssociation_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findDerivedAssociationInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static DerivedAssociation_c findDerivedAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAssociation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DerivedAssociation_c x = (DerivedAssociation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static DerivedAssociation_c DerivedAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return DerivedAssociationInstance(modelRoot, test, true);
	}

	public static DerivedAssociation_c DerivedAssociationInstance(
			ModelRoot modelRoot) {
		return DerivedAssociationInstance(modelRoot, null, true);
	}

	public static DerivedAssociation_c[] DerivedAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					DerivedAssociation_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAssociation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DerivedAssociation_c x = (DerivedAssociation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				DerivedAssociation_c[] ret_set = new DerivedAssociation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new DerivedAssociation_c[0];
			}
		}
	}
	public static DerivedAssociation_c[] DerivedAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return DerivedAssociationInstances(modelRoot, test, true);
	}
	public static DerivedAssociation_c[] DerivedAssociationInstances(
			ModelRoot modelRoot) {
		return DerivedAssociationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Derived Association.dispose call: ";
		Association_c testR206Inst3 = Association_c.getOneR_RELOnR206(this,
				false);

		if (testR206Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "206 ";
		}
		ClassAsDerivedOneSide_c testR214Inst = ClassAsDerivedOneSide_c
				.getOneR_CONEOnR214(this, false);

		if (testR214Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "214 ";
		}
		ClassAsDerivedOtherSide_c testR215Inst = ClassAsDerivedOtherSide_c
				.getOneR_COTHOnR215(this, false);

		if (testR215Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "215 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Derived Association",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getRel_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getRel_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getRel_chn() {
		return m_rel_chn;
	}

	public void setRel_chn(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_rel_chn)) {
				return;
			}
		} else if (m_rel_chn != null) {
			if (m_rel_chn.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Rel_chn", m_rel_chn, newValue, true);
		m_rel_chn = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getRel_idLongBased() {
		if (IsSupertypeAssociation != null) {
			return IsSupertypeAssociation.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (IsSupertypeAssociation != null) {
			return IsSupertypeAssociation.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeAssociation != null);

	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public void setRel_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_rel_id)) {
				return;
			}
		} else if (m_rel_id != null) {
			if (m_rel_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Rel_id", m_rel_id, newValue, true);
		m_rel_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Derived Association", //$NON-NLS-1$
						" Operation entered: Derived Association::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		DerivedAssociation_c[] objs = DerivedAssociation_c
				.DerivedAssociationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Association", //$NON-NLS-1$
				" Operation entered: Derived Association::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class DerivedAssociation_c_test58227_c implements ClassQueryInterface_c {
			DerivedAssociation_c_test58227_c(java.util.UUID p58228) {
				m_p58228 = p58228;
			}
			private java.util.UUID m_p58228;
			public boolean evaluate(Object candidate) {
				DerivedAssociation_c selected = (DerivedAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58228));
				return retval;
			}
		}

		DerivedAssociation_c[] objs58226 = DerivedAssociation_c
				.DerivedAssociationInstances(modelRoot,
						new DerivedAssociation_c_test58227_c(getRel_id()));

		if (((objs58226.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Association", //$NON-NLS-1$
								"Consistency: Object: Derived Association: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58226.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Association: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58226.length), e);
			}
			retval = false;

		}

		if (((objs58226.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Association", //$NON-NLS-1$
								"Consistency: Object: Derived Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58226.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58226.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Derived Association is a subtype in association: rel.Numb = 206
		// The supertype class is: Association
		class Association_c_test58232_c implements ClassQueryInterface_c {
			Association_c_test58232_c(java.util.UUID p58233) {
				m_p58233 = p58233;
			}
			private java.util.UUID m_p58233;
			public boolean evaluate(Object candidate) {
				Association_c selected = (Association_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58233));
				return retval;
			}
		}

		Association_c[] objs58231 = Association_c.AssociationInstances(
				modelRoot, new Association_c_test58232_c(getRel_id()));

		if (((objs58231.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Association", //$NON-NLS-1$
								"Consistency: Object: Derived Association: Association: 206: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58231.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Association: Association: 206: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58231.length), e);
			}
			retval = false;

		}

		// Derived Association is a participating class in association: rel.Numb = 214
		// Object: Class As Derived One Side
		class ClassAsDerivedOneSide_c_test58235_c
				implements
					ClassQueryInterface_c {
			ClassAsDerivedOneSide_c_test58235_c(java.util.UUID p58236) {
				m_p58236 = p58236;
			}
			private java.util.UUID m_p58236;
			public boolean evaluate(Object candidate) {
				ClassAsDerivedOneSide_c selected = (ClassAsDerivedOneSide_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58236));
				return retval;
			}
		}

		ClassAsDerivedOneSide_c[] objs58234 = ClassAsDerivedOneSide_c
				.ClassAsDerivedOneSideInstances(modelRoot,
						new ClassAsDerivedOneSide_c_test58235_c(getRel_id()));

		if (((objs58234.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Association", //$NON-NLS-1$
								"Consistency: Object: Derived Association: Association: 214: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58234.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Association: Association: 214: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58234.length), e);
			}
			retval = false;

		}

		// Derived Association is a participating class in association: rel.Numb = 215
		// Object: Class As Derived Other Side
		class ClassAsDerivedOtherSide_c_test58238_c
				implements
					ClassQueryInterface_c {
			ClassAsDerivedOtherSide_c_test58238_c(java.util.UUID p58239) {
				m_p58239 = p58239;
			}
			private java.util.UUID m_p58239;
			public boolean evaluate(Object candidate) {
				ClassAsDerivedOtherSide_c selected = (ClassAsDerivedOtherSide_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58239));
				return retval;
			}
		}

		ClassAsDerivedOtherSide_c[] objs58237 = ClassAsDerivedOtherSide_c
				.ClassAsDerivedOtherSideInstances(modelRoot,
						new ClassAsDerivedOtherSide_c_test58238_c(getRel_id()));

		if (((objs58237.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Association", //$NON-NLS-1$
								"Consistency: Object: Derived Association: Association: 215: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58237.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Association: Association: 215: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58237.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Association",
				" Operation entered: DerivedAssociation::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		Association_c v_rel = Association_c.getOneR_RELOnR206(this);

		boolean v_isReflexive = false;

		if (((v_rel != null))) {

			v_isReflexive = v_rel.Is_reflexive();

		}

		if ((v_isReflexive)) {

			if ((p_At == End_c.Start || p_At == End_c.Start_Fixed)) {

				ClassAsDerivedOneSide_c v_cone = ClassAsDerivedOneSide_c
						.getOneR_CONEOnR214(this);

				if (((v_cone != null))) {

					v_result = v_cone.Get_connector_text(p_At);

				}

			}

			else if ((p_At == End_c.End || p_At == End_c.End_Fixed)) {

				ClassAsDerivedOtherSide_c v_coth = ClassAsDerivedOtherSide_c
						.getOneR_COTHOnR215(this);

				if (((v_coth != null))) {

					v_result = v_coth.Get_connector_text(p_At);

				}

			}

		}

		else {

			class ClassAsDerivedOneSide_test55994_c
					implements
						ClassQueryInterface_c {
				public boolean evaluate(Object candidate) {
					ClassAsDerivedOneSide_c selected = (ClassAsDerivedOneSide_c) candidate;
					return (selected.getObj_id().equals(p_Obj_id));
				}
			}
			ClassAsDerivedOneSide_c v_cone = ClassAsDerivedOneSide_c
					.getOneR_CONEOnR214(this,
							new ClassAsDerivedOneSide_test55994_c());

			if (((v_cone != null))) {

				v_result = v_cone.Get_connector_text(p_At);

			}

			else {

				class ClassAsDerivedOtherSide_test55995_c
						implements
							ClassQueryInterface_c {
					public boolean evaluate(Object candidate) {
						ClassAsDerivedOtherSide_c selected = (ClassAsDerivedOtherSide_c) candidate;
						return (selected.getObj_id().equals(p_Obj_id));
					}
				}
				ClassAsDerivedOtherSide_c v_coth = ClassAsDerivedOtherSide_c
						.getOneR_COTHOnR215(this,
								new ClassAsDerivedOtherSide_test55995_c());

				if (((v_coth != null))) {

					v_result = v_coth.Get_connector_text(p_At);

				}

			}

		}

		return v_result;

	} // End get_connector_text
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Association",
				" Operation entered: DerivedAssociation::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Association_c v_assoc = Association_c.getOneR_RELOnR206(this);

		this.unrelateAcrossR206From(v_assoc);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Association",
				" Operation entered: DerivedAssociation::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		Association_c v_rel = Association_c.getOneR_RELOnR206(this);

		return v_rel.Get_name();

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Derived Association
