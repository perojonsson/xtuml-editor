package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.LeafSymbolicConstant_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LEAF_SYMBOLIC_CONSTANT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class LeafSymbolicConstant_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public LeafSymbolicConstant_c(ModelRoot modelRoot,
			java.util.UUID p_m_const_id, java.util.UUID p_m_dt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);

		Object[] key = {m_const_id, m_dt_id};
		addInstanceToMap(key);
	}
	static public LeafSymbolicConstant_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_const_id, java.util.UUID p_m_dt_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(LeafSymbolicConstant_c.class);
		LeafSymbolicConstant_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_const_id, p_m_dt_id};
			new_inst = (LeafSymbolicConstant_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new LeafSymbolicConstant_c(modelRoot, p_m_const_id,
					p_m_dt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public LeafSymbolicConstant_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_const_id, java.util.UUID p_m_dt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(LeafSymbolicConstant_c.class);
		LeafSymbolicConstant_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_const_id, p_m_dt_id};
			source = (LeafSymbolicConstant_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);

				return source;
			}
		}
		// there is no instance matching the id
		LeafSymbolicConstant_c new_inst = new LeafSymbolicConstant_c(modelRoot,
				p_m_const_id, p_m_dt_id);
		return new_inst;
	}
	public LeafSymbolicConstant_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_const_id = IdAssigner.NULL_UUID;
		m_dt_id = IdAssigner.NULL_UUID;
		Object[] key = {m_const_id, m_dt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_const_id, m_dt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_const_id != p_newKey) {

			m_const_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof LeafSymbolicConstant_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof LeafSymbolicConstant_c)) {
			return false;
		}

		LeafSymbolicConstant_c me = (LeafSymbolicConstant_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getConst_id()) || IdAssigner.NULL_UUID
						.equals(((LeafSymbolicConstant_c) elem).getConst_id())) && this != elem)) {
			return false;
		}
		if (!getConst_id()
				.equals(((LeafSymbolicConstant_c) elem).getConst_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDt_id()) || IdAssigner.NULL_UUID
						.equals(((LeafSymbolicConstant_c) elem).getDt_id())) && this != elem)) {
			return false;
		}
		if (!getDt_id().equals(((LeafSymbolicConstant_c) elem).getDt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof LeafSymbolicConstant_c)) {
			return false;
		}

		LeafSymbolicConstant_c me = (LeafSymbolicConstant_c) elem;
		if (!getConst_idCachedValue().equals(
				((LeafSymbolicConstant_c) elem).getConst_idCachedValue()))
			return false;
		if (!getDt_idCachedValue().equals(
				((LeafSymbolicConstant_c) elem).getDt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_const_id;
	private java.util.UUID m_dt_id;

	// declare association references from this class

	// referring navigation

	SymbolicConstant_c IsSupertypeSymbolicConstant;
	public void relateAcrossR1502To(SymbolicConstant_c target) {
		relateAcrossR1502To(target, true);
	}
	public void relateAcrossR1502To(SymbolicConstant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeSymbolicConstant)
			return; // already related

		if (IsSupertypeSymbolicConstant != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeSymbolicConstant != null) {

				IsSupertypeSymbolicConstant.clearBackPointerR1502To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LeafSymbolicConstant_c.relateAcrossR1502To(SymbolicConstant_c target)",
									"Relate performed across R1502 from Leaf Symbolic Constant to Symbolic Constant without unrelate of prior instance.");
				}
			}

			IsSupertypeSymbolicConstant = target;
			m_const_id = target.getConst_id();
			if (IdAssigner.NULL_UUID.equals(target.getDt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_dt_id = target.getDt_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1502To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1502", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1502From(SymbolicConstant_c target) {
		unrelateAcrossR1502From(target, true);
	}
	public void unrelateAcrossR1502From(SymbolicConstant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeSymbolicConstant == null)
			return; // already unrelated

		if (target != IsSupertypeSymbolicConstant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1502",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1502To(this);
		}

		if (IsSupertypeSymbolicConstant != null) {

			m_const_id = IsSupertypeSymbolicConstant.getConst_id();
			m_dt_id = IsSupertypeSymbolicConstant.getDt_id();
			if (IdAssigner.NULL_UUID.equals(m_dt_id)) {
				m_dt_id = IsSupertypeSymbolicConstant.getDt_idCachedValue();
			}
			IsSupertypeSymbolicConstant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1502", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			SymbolicConstant_c[] targets) {
		return getOneCNST_LFSCOnR1502(targets, null);
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			SymbolicConstant_c[] targets, ClassQueryInterface_c test) {
		LeafSymbolicConstant_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCNST_LFSCOnR1502(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			SymbolicConstant_c target) {
		return getOneCNST_LFSCOnR1502(target, null);
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			SymbolicConstant_c target, boolean loadComponent) {
		return getOneCNST_LFSCOnR1502(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			SymbolicConstant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCNST_LFSCOnR1502(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			ModelRoot modelRoot, SymbolicConstant_c target,
			ClassQueryInterface_c test) {
		return getOneCNST_LFSCOnR1502(modelRoot, target, test, true);
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1502(
			ModelRoot modelRoot, SymbolicConstant_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCNST_LFSCOnR1502(modelRoot, target, test);
	}
	private static LeafSymbolicConstant_c find_getOneCNST_LFSCOnR1502(
			ModelRoot modelRoot, SymbolicConstant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			LeafSymbolicConstant_c source = (LeafSymbolicConstant_c) target.backPointer_IsSubtypeLeafSymbolicConstantIsSubtype_R1502;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1502(
			SymbolicConstant_c[] targets) {
		return getManyCNST_LFSCsOnR1502(targets, null);
	}
	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1502(
			SymbolicConstant_c[] targets, boolean loadComponent) {
		return getManyCNST_LFSCsOnR1502(targets, null, loadComponent);
	}
	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1502(
			SymbolicConstant_c[] targets, ClassQueryInterface_c test) {
		return getManyCNST_LFSCsOnR1502(targets, test, true);
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1502(
			SymbolicConstant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LeafSymbolicConstant_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LeafSymbolicConstant_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			LeafSymbolicConstant_c source = (LeafSymbolicConstant_c) targets[i].backPointer_IsSubtypeLeafSymbolicConstantIsSubtype_R1502;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			LeafSymbolicConstant_c[] ret_set = new LeafSymbolicConstant_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LeafSymbolicConstant_c[0];
		}
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1502(
			SymbolicConstant_c target) {
		if (target != null) {
			SymbolicConstant_c[] targetArray = new SymbolicConstant_c[1];
			targetArray[0] = target;
			return getManyCNST_LFSCsOnR1502(targetArray);
		} else {
			LeafSymbolicConstant_c[] result = new LeafSymbolicConstant_c[0];
			return result;
		}
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1502(
			SymbolicConstant_c target, boolean loadComponent) {
		if (target != null) {
			SymbolicConstant_c[] targetArray = new SymbolicConstant_c[1];
			targetArray[0] = target;
			return getManyCNST_LFSCsOnR1502(targetArray, loadComponent);
		} else {
			LeafSymbolicConstant_c[] result = new LeafSymbolicConstant_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	LiteralSymbolicConstant_c backPointer_IsSubtypeLiteralSymbolicConstantIsSubtype_R1503;

	public void setLiteralSymbolicConstantOrderInChildListR1503(
			LiteralSymbolicConstant_c target, int index) {
		unrelateAcrossR1503From(target);
		LiteralSymbolicConstant_c[] elements = LiteralSymbolicConstant_c
				.getManyCNST_LSCsOnR1503(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1503From((LiteralSymbolicConstant_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1503To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1503To((LiteralSymbolicConstant_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1503To(LiteralSymbolicConstant_c target) {
		if (target != null) {
			target.relateAcrossR1503To(this, true);
		}
	}

	public void relateAcrossR1503To(LiteralSymbolicConstant_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1503To(this, notifyChanges);
		}
	}

	public void setBackPointerR1503To(LiteralSymbolicConstant_c target) {
		backPointer_IsSubtypeLiteralSymbolicConstantIsSubtype_R1503 = target;
	}

	public void unrelateAcrossR1503From(LiteralSymbolicConstant_c target) {
		if (target != null) {
			target.unrelateAcrossR1503From(this, true);
		}
	}

	public void unrelateAcrossR1503From(LiteralSymbolicConstant_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1503From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1503To(LiteralSymbolicConstant_c target) {
		if (target == backPointer_IsSubtypeLiteralSymbolicConstantIsSubtype_R1503) {
			backPointer_IsSubtypeLiteralSymbolicConstantIsSubtype_R1503 = null;
		}
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1503(
			LiteralSymbolicConstant_c[] targets) {
		return getOneCNST_LFSCOnR1503(targets, null);
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1503(
			LiteralSymbolicConstant_c[] targets, ClassQueryInterface_c test) {
		return getOneCNST_LFSCOnR1503(targets, test, true);
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1503(
			LiteralSymbolicConstant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		LeafSymbolicConstant_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LeafSymbolicConstant_c candidate_val = getOneCNST_LFSCOnR1503(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCNST_LFSCOnR1503(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1503(
			LiteralSymbolicConstant_c target) {
		return getOneCNST_LFSCOnR1503(target, true);
	}
	public static LeafSymbolicConstant_c getOneCNST_LFSCOnR1503(
			LiteralSymbolicConstant_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeLeafSymbolicConstant;
		} else {
			return null;
		}
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1503(
			LiteralSymbolicConstant_c[] targets, ClassQueryInterface_c test) {
		return getManyCNST_LFSCsOnR1503(targets, test, true);
	}

	public static LeafSymbolicConstant_c [] getManyCNST_LFSCsOnR1503(LiteralSymbolicConstant_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LeafSymbolicConstant_c[0];
  
  
  LinkedHashSet<LeafSymbolicConstant_c> elementsSet = new LinkedHashSet<LeafSymbolicConstant_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeLeafSymbolicConstant == null)
	  targets[i].loadProxy();
    LeafSymbolicConstant_c associate = targets[i].IsSupertypeLeafSymbolicConstant;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LeafSymbolicConstant_c[] result = new LeafSymbolicConstant_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1503(
			LiteralSymbolicConstant_c[] targets) {
		return getManyCNST_LFSCsOnR1503(targets, null);
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1503(
			LiteralSymbolicConstant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			LiteralSymbolicConstant_c[] targetArray = new LiteralSymbolicConstant_c[1];
			targetArray[0] = target;
			return getManyCNST_LFSCsOnR1503(targetArray, test, loadComponent);
		} else {
			LeafSymbolicConstant_c[] result = new LeafSymbolicConstant_c[0];
			return result;
		}

	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1503(
			LiteralSymbolicConstant_c target, ClassQueryInterface_c test) {
		return getManyCNST_LFSCsOnR1503(target, null, true);
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1503(
			LiteralSymbolicConstant_c target) {
		return getManyCNST_LFSCsOnR1503(target, null, true);
	}

	public static LeafSymbolicConstant_c[] getManyCNST_LFSCsOnR1503(
			LiteralSymbolicConstant_c target, boolean loadComponent) {
		return getManyCNST_LFSCsOnR1503(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1502
		SymbolicConstant_c relInst56857 = (SymbolicConstant_c) baseRoot
				.getInstanceList(SymbolicConstant_c.class).get(
						new Object[]{m_const_id, m_dt_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56857 == null) {
			relInst56857 = (SymbolicConstant_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(SymbolicConstant_c.class)
					.get(new Object[]{m_const_id, m_dt_id});
		}
		if (relInst56857 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56857 = (SymbolicConstant_c) roots[i].getInstanceList(
						SymbolicConstant_c.class).get(
						new Object[]{m_const_id, m_dt_id});
				if (relInst56857 != null)
					break;
			}
		}
		//synchronized
		if (relInst56857 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56857) && !isProxy())) {
				relInst56857.relateAcrossR1502To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1502
		// CNST_SYC
		inst = IsSupertypeSymbolicConstant;
		unrelateAcrossR1502From(IsSupertypeSymbolicConstant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LeafSymbolicConstant_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LeafSymbolicConstant_c inst = (LeafSymbolicConstant_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(LeafSymbolicConstant_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static LeafSymbolicConstant_c LeafSymbolicConstantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		LeafSymbolicConstant_c result = findLeafSymbolicConstantInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					LeafSymbolicConstant_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findLeafSymbolicConstantInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static LeafSymbolicConstant_c findLeafSymbolicConstantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LeafSymbolicConstant_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LeafSymbolicConstant_c x = (LeafSymbolicConstant_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static LeafSymbolicConstant_c LeafSymbolicConstantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LeafSymbolicConstantInstance(modelRoot, test, true);
	}

	public static LeafSymbolicConstant_c LeafSymbolicConstantInstance(
			ModelRoot modelRoot) {
		return LeafSymbolicConstantInstance(modelRoot, null, true);
	}

	public static LeafSymbolicConstant_c[] LeafSymbolicConstantInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					LeafSymbolicConstant_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(LeafSymbolicConstant_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LeafSymbolicConstant_c x = (LeafSymbolicConstant_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				LeafSymbolicConstant_c[] ret_set = new LeafSymbolicConstant_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LeafSymbolicConstant_c[0];
			}
		}
	}
	public static LeafSymbolicConstant_c[] LeafSymbolicConstantInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LeafSymbolicConstantInstances(modelRoot, test, true);
	}
	public static LeafSymbolicConstant_c[] LeafSymbolicConstantInstances(
			ModelRoot modelRoot) {
		return LeafSymbolicConstantInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Leaf Symbolic Constant.dispose call: ";
		SymbolicConstant_c testR1502Inst1 = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(this, false);

		if (testR1502Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1502 ";
		}
		LiteralSymbolicConstant_c testR1503Inst1 = LiteralSymbolicConstant_c
				.getOneCNST_LSCOnR1503(this, false);

		if (testR1503Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1503 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Leaf Symbolic Constant",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("const_id")) {
			return true;
		}
		if (attributeName.equals("dt_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getConst_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getConst_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getDt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getDt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getConst_idLongBased() {
		if (IsSupertypeSymbolicConstant != null) {
			return IsSupertypeSymbolicConstant.getConst_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getConst_id() {
		if (IsSupertypeSymbolicConstant != null) {
			return IsSupertypeSymbolicConstant.getConst_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeSymbolicConstant != null);

	}

	public java.util.UUID getConst_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_const_id))
			return m_const_id;
		else
			return getConst_id();
	}

	public void setConst_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_const_id)) {
				return;
			}
		} else if (m_const_id != null) {
			if (m_const_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Const_id", m_const_id, newValue, true);
		m_const_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDt_idLongBased() {
		if (IsSupertypeSymbolicConstant != null) {
			return IsSupertypeSymbolicConstant.getDt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDt_id() {
		if (IsSupertypeSymbolicConstant != null) {
			return IsSupertypeSymbolicConstant.getDt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dt_id))
			return m_dt_id;
		else
			return getDt_id();
	}

	public void setDt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_dt_id)) {
				return;
			}
		} else if (m_dt_id != null) {
			if (m_dt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id",
				m_dt_id, newValue, true);
		m_dt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Leaf Symbolic Constant", //$NON-NLS-1$
						" Operation entered: Leaf Symbolic Constant::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		LeafSymbolicConstant_c[] objs = LeafSymbolicConstant_c
				.LeafSymbolicConstantInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Leaf Symbolic Constant", //$NON-NLS-1$
				" Operation entered: Leaf Symbolic Constant::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class LeafSymbolicConstant_c_test56859_c
				implements
					ClassQueryInterface_c {
			LeafSymbolicConstant_c_test56859_c(java.util.UUID p56860,
					java.util.UUID p56861) {
				m_p56860 = p56860;
				m_p56861 = p56861;
			}
			private java.util.UUID m_p56860;
			private java.util.UUID m_p56861;
			public boolean evaluate(Object candidate) {
				LeafSymbolicConstant_c selected = (LeafSymbolicConstant_c) candidate;
				boolean retval = false;
				retval = (selected.getConst_id().equals(m_p56860))
						& (selected.getDt_id().equals(m_p56861));
				return retval;
			}
		}

		LeafSymbolicConstant_c[] objs56858 = LeafSymbolicConstant_c
				.LeafSymbolicConstantInstances(modelRoot,
						new LeafSymbolicConstant_c_test56859_c(getConst_id(),
								getDt_id()));

		if (((objs56858.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Leaf Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Leaf Symbolic Constant: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56858.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Leaf Symbolic Constant: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56858.length), e);
			}
			retval = false;

		}

		if (((objs56858.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Leaf Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Leaf Symbolic Constant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56858.length)
										+ " Const_ID: " + "Not Printable" + " DT_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Leaf Symbolic Constant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56858.length)
										+ " Const_ID: " + "Not Printable" + " DT_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Leaf Symbolic Constant is a subtype in association: rel.Numb = 1502
		// The supertype class is: Symbolic Constant
		class SymbolicConstant_c_test56865_c implements ClassQueryInterface_c {
			SymbolicConstant_c_test56865_c(java.util.UUID p56866,
					java.util.UUID p56867) {
				m_p56866 = p56866;
				m_p56867 = p56867;
			}
			private java.util.UUID m_p56866;
			private java.util.UUID m_p56867;
			public boolean evaluate(Object candidate) {
				SymbolicConstant_c selected = (SymbolicConstant_c) candidate;
				boolean retval = false;
				retval = (selected.getConst_id().equals(m_p56866))
						& (selected.getDt_id().equals(m_p56867));
				return retval;
			}
		}

		SymbolicConstant_c[] objs56864 = SymbolicConstant_c
				.SymbolicConstantInstances(modelRoot,
						new SymbolicConstant_c_test56865_c(getConst_id(),
								getDt_id()));

		if (((objs56864.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Leaf Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Leaf Symbolic Constant: Association: 1502: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56864.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Leaf Symbolic Constant: Association: 1502: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56864.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 1503
		int objs56868 = 0;
		// Subtype Object: Literal Symbolic Constant
		class LiteralSymbolicConstant_c_test56869_c
				implements
					ClassQueryInterface_c {
			LiteralSymbolicConstant_c_test56869_c(java.util.UUID p56870,
					java.util.UUID p56871) {
				m_p56870 = p56870;
				m_p56871 = p56871;
			}
			private java.util.UUID m_p56870;
			private java.util.UUID m_p56871;
			public boolean evaluate(Object candidate) {
				LiteralSymbolicConstant_c selected = (LiteralSymbolicConstant_c) candidate;
				boolean retval = false;
				retval = (selected.getConst_id().equals(m_p56870))
						& (selected.getDt_id().equals(m_p56871));
				return retval;
			}
		}

		LiteralSymbolicConstant_c[] objs56872 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstances(modelRoot,
						new LiteralSymbolicConstant_c_test56869_c(
								getConst_id(), getDt_id()));

		objs56868 = objs56868 + objs56872.length;
		if (objs56868 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Leaf Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Leaf Symbolic Constant: Association: 1503: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56868)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Leaf Symbolic Constant: Association: 1503: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56868), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Leaf Symbolic Constant",
				" Operation entered: LeafSymbolicConstant::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		LiteralSymbolicConstant_c v_lsc = LiteralSymbolicConstant_c
				.getOneCNST_LSCOnR1503(this);

		if ((v_lsc != null)) {

			if (v_lsc != null) {
				v_lsc.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		SymbolicConstant_c v_syc = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(this);

		this.unrelateAcrossR1502From(v_syc);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Leaf Symbolic Constant
