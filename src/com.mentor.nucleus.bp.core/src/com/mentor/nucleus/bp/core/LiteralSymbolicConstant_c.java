package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.LiteralSymbolicConstant_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LITERAL_SYMBOLIC_CONSTANT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class LiteralSymbolicConstant_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public LiteralSymbolicConstant_c(ModelRoot modelRoot,
			java.util.UUID p_m_const_id, java.util.UUID p_m_dt_id,
			String p_m_value) {
		super(modelRoot);
		m_value = p_m_value;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);

		Object[] key = {m_const_id, m_dt_id};
		addInstanceToMap(key);
	}
	static public LiteralSymbolicConstant_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_const_id, java.util.UUID p_m_dt_id,
			String p_m_value, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(LiteralSymbolicConstant_c.class);
		LiteralSymbolicConstant_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_const_id, p_m_dt_id};
			new_inst = (LiteralSymbolicConstant_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_value = p_m_value;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new LiteralSymbolicConstant_c(modelRoot, p_m_const_id,
					p_m_dt_id, p_m_value);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public LiteralSymbolicConstant_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_const_id,
			java.util.UUID p_m_dt_id, String p_m_value) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralSymbolicConstant_c.class);
		LiteralSymbolicConstant_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_const_id, p_m_dt_id};
			source = (LiteralSymbolicConstant_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_value = p_m_value;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);

				return source;
			}
		}
		// there is no instance matching the id
		LiteralSymbolicConstant_c new_inst = new LiteralSymbolicConstant_c(
				modelRoot, p_m_const_id, p_m_dt_id, p_m_value);
		return new_inst;
	}
	public LiteralSymbolicConstant_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value = "";
		m_const_id = IdAssigner.NULL_UUID;
		m_dt_id = IdAssigner.NULL_UUID;
		Object[] key = {m_const_id, m_dt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_const_id, m_dt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_const_id != p_newKey) {

			m_const_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof LiteralSymbolicConstant_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof LiteralSymbolicConstant_c)) {
			return false;
		}

		LiteralSymbolicConstant_c me = (LiteralSymbolicConstant_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getConst_id()) || IdAssigner.NULL_UUID
						.equals(((LiteralSymbolicConstant_c) elem)
								.getConst_id())) && this != elem)) {
			return false;
		}
		if (!getConst_id().equals(
				((LiteralSymbolicConstant_c) elem).getConst_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDt_id()) || IdAssigner.NULL_UUID
						.equals(((LiteralSymbolicConstant_c) elem).getDt_id())) && this != elem)) {
			return false;
		}
		if (!getDt_id().equals(((LiteralSymbolicConstant_c) elem).getDt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof LiteralSymbolicConstant_c)) {
			return false;
		}

		LiteralSymbolicConstant_c me = (LiteralSymbolicConstant_c) elem;
		if (!getConst_idCachedValue().equals(
				((LiteralSymbolicConstant_c) elem).getConst_idCachedValue()))
			return false;
		if (!getDt_idCachedValue().equals(
				((LiteralSymbolicConstant_c) elem).getDt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_value;
	private java.util.UUID m_const_id;
	private java.util.UUID m_dt_id;

	// declare association references from this class

	// referring navigation

	LeafSymbolicConstant_c IsSupertypeLeafSymbolicConstant;
	public void relateAcrossR1503To(LeafSymbolicConstant_c target) {
		relateAcrossR1503To(target, true);
	}
	public void relateAcrossR1503To(LeafSymbolicConstant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeLeafSymbolicConstant)
			return; // already related

		if (IsSupertypeLeafSymbolicConstant != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeLeafSymbolicConstant != null) {

				IsSupertypeLeafSymbolicConstant.clearBackPointerR1503To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LiteralSymbolicConstant_c.relateAcrossR1503To(LeafSymbolicConstant_c target)",
									"Relate performed across R1503 from Literal Symbolic Constant to Leaf Symbolic Constant without unrelate of prior instance.");
				}
			}

			IsSupertypeLeafSymbolicConstant = target;
			if (IdAssigner.NULL_UUID.equals(target.getConst_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_const_id = target.getConst_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getDt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_dt_id = target.getDt_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1503To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1503", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1503From(LeafSymbolicConstant_c target) {
		unrelateAcrossR1503From(target, true);
	}
	public void unrelateAcrossR1503From(LeafSymbolicConstant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeLeafSymbolicConstant == null)
			return; // already unrelated

		if (target != IsSupertypeLeafSymbolicConstant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1503",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1503To(this);
		}

		if (IsSupertypeLeafSymbolicConstant != null) {

			m_const_id = IsSupertypeLeafSymbolicConstant.getConst_id();
			if (IdAssigner.NULL_UUID.equals(m_const_id)) {
				m_const_id = IsSupertypeLeafSymbolicConstant
						.getConst_idCachedValue();
			}
			m_dt_id = IsSupertypeLeafSymbolicConstant.getDt_id();
			if (IdAssigner.NULL_UUID.equals(m_dt_id)) {
				m_dt_id = IsSupertypeLeafSymbolicConstant.getDt_idCachedValue();
			}
			IsSupertypeLeafSymbolicConstant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1503", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			LeafSymbolicConstant_c[] targets) {
		return getOneCNST_LSCOnR1503(targets, null);
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			LeafSymbolicConstant_c[] targets, ClassQueryInterface_c test) {
		LiteralSymbolicConstant_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCNST_LSCOnR1503(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			LeafSymbolicConstant_c target) {
		return getOneCNST_LSCOnR1503(target, null);
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			LeafSymbolicConstant_c target, boolean loadComponent) {
		return getOneCNST_LSCOnR1503(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			LeafSymbolicConstant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCNST_LSCOnR1503(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			ModelRoot modelRoot, LeafSymbolicConstant_c target,
			ClassQueryInterface_c test) {
		return getOneCNST_LSCOnR1503(modelRoot, target, test, true);
	}

	public static LiteralSymbolicConstant_c getOneCNST_LSCOnR1503(
			ModelRoot modelRoot, LeafSymbolicConstant_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCNST_LSCOnR1503(modelRoot, target, test);
	}
	private static LiteralSymbolicConstant_c find_getOneCNST_LSCOnR1503(
			ModelRoot modelRoot, LeafSymbolicConstant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			LiteralSymbolicConstant_c source = (LiteralSymbolicConstant_c) target.backPointer_IsSubtypeLiteralSymbolicConstantIsSubtype_R1503;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static LiteralSymbolicConstant_c[] getManyCNST_LSCsOnR1503(
			LeafSymbolicConstant_c[] targets) {
		return getManyCNST_LSCsOnR1503(targets, null);
	}
	public static LiteralSymbolicConstant_c[] getManyCNST_LSCsOnR1503(
			LeafSymbolicConstant_c[] targets, boolean loadComponent) {
		return getManyCNST_LSCsOnR1503(targets, null, loadComponent);
	}
	public static LiteralSymbolicConstant_c[] getManyCNST_LSCsOnR1503(
			LeafSymbolicConstant_c[] targets, ClassQueryInterface_c test) {
		return getManyCNST_LSCsOnR1503(targets, test, true);
	}

	public static LiteralSymbolicConstant_c[] getManyCNST_LSCsOnR1503(
			LeafSymbolicConstant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LiteralSymbolicConstant_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LiteralSymbolicConstant_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			LiteralSymbolicConstant_c source = (LiteralSymbolicConstant_c) targets[i].backPointer_IsSubtypeLiteralSymbolicConstantIsSubtype_R1503;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			LiteralSymbolicConstant_c[] ret_set = new LiteralSymbolicConstant_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LiteralSymbolicConstant_c[0];
		}
	}

	public static LiteralSymbolicConstant_c[] getManyCNST_LSCsOnR1503(
			LeafSymbolicConstant_c target) {
		if (target != null) {
			LeafSymbolicConstant_c[] targetArray = new LeafSymbolicConstant_c[1];
			targetArray[0] = target;
			return getManyCNST_LSCsOnR1503(targetArray);
		} else {
			LiteralSymbolicConstant_c[] result = new LiteralSymbolicConstant_c[0];
			return result;
		}
	}

	public static LiteralSymbolicConstant_c[] getManyCNST_LSCsOnR1503(
			LeafSymbolicConstant_c target, boolean loadComponent) {
		if (target != null) {
			LeafSymbolicConstant_c[] targetArray = new LeafSymbolicConstant_c[1];
			targetArray[0] = target;
			return getManyCNST_LSCsOnR1503(targetArray, loadComponent);
		} else {
			LiteralSymbolicConstant_c[] result = new LiteralSymbolicConstant_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1503
		LeafSymbolicConstant_c relInst56846 = (LeafSymbolicConstant_c) baseRoot
				.getInstanceList(LeafSymbolicConstant_c.class).get(
						new Object[]{m_const_id, m_dt_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56846 == null) {
			relInst56846 = (LeafSymbolicConstant_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(LeafSymbolicConstant_c.class)
					.get(new Object[]{m_const_id, m_dt_id});
		}
		if (relInst56846 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56846 = (LeafSymbolicConstant_c) roots[i]
						.getInstanceList(LeafSymbolicConstant_c.class).get(
								new Object[]{m_const_id, m_dt_id});
				if (relInst56846 != null)
					break;
			}
		}
		//synchronized
		if (relInst56846 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56846) && !isProxy())) {
				relInst56846.relateAcrossR1503To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1503
		// CNST_LFSC
		inst = IsSupertypeLeafSymbolicConstant;
		unrelateAcrossR1503From(IsSupertypeLeafSymbolicConstant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LiteralSymbolicConstant_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LiteralSymbolicConstant_c inst = (LiteralSymbolicConstant_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralSymbolicConstant_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static LiteralSymbolicConstant_c LiteralSymbolicConstantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		LiteralSymbolicConstant_c result = findLiteralSymbolicConstantInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					LiteralSymbolicConstant_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findLiteralSymbolicConstantInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static LiteralSymbolicConstant_c findLiteralSymbolicConstantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralSymbolicConstant_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LiteralSymbolicConstant_c x = (LiteralSymbolicConstant_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static LiteralSymbolicConstant_c LiteralSymbolicConstantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LiteralSymbolicConstantInstance(modelRoot, test, true);
	}

	public static LiteralSymbolicConstant_c LiteralSymbolicConstantInstance(
			ModelRoot modelRoot) {
		return LiteralSymbolicConstantInstance(modelRoot, null, true);
	}

	public static LiteralSymbolicConstant_c[] LiteralSymbolicConstantInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					LiteralSymbolicConstant_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(LiteralSymbolicConstant_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LiteralSymbolicConstant_c x = (LiteralSymbolicConstant_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				LiteralSymbolicConstant_c[] ret_set = new LiteralSymbolicConstant_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LiteralSymbolicConstant_c[0];
			}
		}
	}
	public static LiteralSymbolicConstant_c[] LiteralSymbolicConstantInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LiteralSymbolicConstantInstances(modelRoot, test, true);
	}
	public static LiteralSymbolicConstant_c[] LiteralSymbolicConstantInstances(
			ModelRoot modelRoot) {
		return LiteralSymbolicConstantInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Literal Symbolic Constant.dispose call: ";
		LeafSymbolicConstant_c testR1503Inst1 = LeafSymbolicConstant_c
				.getOneCNST_LFSCOnR1503(this, false);

		if (testR1503Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1503 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Literal Symbolic Constant", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("const_id")) {
			return true;
		}
		if (attributeName.equals("dt_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getConst_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getConst_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getDt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getDt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getValue() {
		return m_value;
	}

	public void setValue(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_value)) {
				return;
			}
		} else if (m_value != null) {
			if (m_value.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Value",
				m_value, newValue, true);
		m_value = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getConst_idLongBased() {
		if (IsSupertypeLeafSymbolicConstant != null) {
			return IsSupertypeLeafSymbolicConstant.getConst_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getConst_id() {
		if (IsSupertypeLeafSymbolicConstant != null) {
			return IsSupertypeLeafSymbolicConstant.getConst_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeLeafSymbolicConstant != null);

	}

	public java.util.UUID getConst_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_const_id))
			return m_const_id;
		else
			return getConst_id();
	}

	public void setConst_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_const_id)) {
				return;
			}
		} else if (m_const_id != null) {
			if (m_const_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Const_id", m_const_id, newValue, true);
		m_const_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDt_idLongBased() {
		if (IsSupertypeLeafSymbolicConstant != null) {
			return IsSupertypeLeafSymbolicConstant.getDt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDt_id() {
		if (IsSupertypeLeafSymbolicConstant != null) {
			return IsSupertypeLeafSymbolicConstant.getDt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dt_id))
			return m_dt_id;
		else
			return getDt_id();
	}

	public void setDt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_dt_id)) {
				return;
			}
		} else if (m_dt_id != null) {
			if (m_dt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id",
				m_dt_id, newValue, true);
		m_dt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Literal Symbolic Constant", //$NON-NLS-1$
						" Operation entered: Literal Symbolic Constant::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		LiteralSymbolicConstant_c[] objs = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Literal Symbolic Constant", //$NON-NLS-1$
						" Operation entered: Literal Symbolic Constant::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class LiteralSymbolicConstant_c_test56848_c
				implements
					ClassQueryInterface_c {
			LiteralSymbolicConstant_c_test56848_c(java.util.UUID p56849,
					java.util.UUID p56850) {
				m_p56849 = p56849;
				m_p56850 = p56850;
			}
			private java.util.UUID m_p56849;
			private java.util.UUID m_p56850;
			public boolean evaluate(Object candidate) {
				LiteralSymbolicConstant_c selected = (LiteralSymbolicConstant_c) candidate;
				boolean retval = false;
				retval = (selected.getConst_id().equals(m_p56849))
						& (selected.getDt_id().equals(m_p56850));
				return retval;
			}
		}

		LiteralSymbolicConstant_c[] objs56847 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstances(modelRoot,
						new LiteralSymbolicConstant_c_test56848_c(
								getConst_id(), getDt_id()));

		if (((objs56847.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Literal Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Literal Symbolic Constant: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56847.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Symbolic Constant: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56847.length), e);
			}
			retval = false;

		}

		if (((objs56847.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Literal Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Literal Symbolic Constant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56847.length)
										+ " Const_ID: " + "Not Printable" + " DT_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Symbolic Constant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56847.length)
										+ " Const_ID: " + "Not Printable" + " DT_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Literal Symbolic Constant is a subtype in association: rel.Numb = 1503
		// The supertype class is: Leaf Symbolic Constant
		class LeafSymbolicConstant_c_test56854_c
				implements
					ClassQueryInterface_c {
			LeafSymbolicConstant_c_test56854_c(java.util.UUID p56855,
					java.util.UUID p56856) {
				m_p56855 = p56855;
				m_p56856 = p56856;
			}
			private java.util.UUID m_p56855;
			private java.util.UUID m_p56856;
			public boolean evaluate(Object candidate) {
				LeafSymbolicConstant_c selected = (LeafSymbolicConstant_c) candidate;
				boolean retval = false;
				retval = (selected.getConst_id().equals(m_p56855))
						& (selected.getDt_id().equals(m_p56856));
				return retval;
			}
		}

		LeafSymbolicConstant_c[] objs56853 = LeafSymbolicConstant_c
				.LeafSymbolicConstantInstances(modelRoot,
						new LeafSymbolicConstant_c_test56854_c(getConst_id(),
								getDt_id()));

		if (((objs56853.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Literal Symbolic Constant", //$NON-NLS-1$
								"Consistency: Object: Literal Symbolic Constant: Association: 1503: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56853.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Symbolic Constant: Association: 1503: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56853.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		LeafSymbolicConstant_c v_lfsc = LeafSymbolicConstant_c
				.getOneCNST_LFSCOnR1503(this);

		this.unrelateAcrossR1503From(v_lfsc);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public boolean Canusedatatype(final java.util.UUID p_Id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Canusedatatype");
		final ModelRoot modelRoot = getModelRoot();
		PackageableElement_c v_packageableElem = PackageableElement_c
				.getOnePE_PEOnR8001(ConstantSpecification_c
						.getOneCNST_CSPOnR1504(SymbolicConstant_c
								.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
										.getOneCNST_LFSCOnR1503(this))));

		Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);

		Component_c v_component = Component_c
				.getOneC_COnR8003(v_packageableElem);

		boolean v_isInGenericPackage = (v_package != null)
				|| (v_component != null);

		if (v_isInGenericPackage) {

			class SearchResultSet_test55809_c implements ClassQueryInterface_c {
				public boolean evaluate(Object candidate) {
					SearchResultSet_c selected = (SearchResultSet_c) candidate;
					return selected.getName().equals("")
							&& selected.getType() == Elementtypeconstants_c.DATATYPE;
				}
			}
			SearchResultSet_c v_resultSet = SearchResultSet_c
					.getOnePE_SRSOnR8005(v_package,
							new SearchResultSet_test55809_c());

			class DataType_test55810_c implements ClassQueryInterface_c {
				public boolean evaluate(Object candidate) {
					DataType_c selected = (DataType_c) candidate;
					return selected.getDt_id().equals(p_Id);
				}
			}
			DataType_c v_dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c
					.getManyPE_PEsOnR8002(ElementVisibility_c
							.getManyPE_VISsOnR8006(v_resultSet)),
					new DataType_test55810_c());

			if ((v_component != null)) {

				class ComponentResultSet_test55811_c
						implements
							ClassQueryInterface_c {
					public boolean evaluate(Object candidate) {
						ComponentResultSet_c selected = (ComponentResultSet_c) candidate;
						return selected.getName().equals("")
								&& selected.getType() == Elementtypeconstants_c.DATATYPE;
					}
				}
				ComponentResultSet_c v_compResultSet = ComponentResultSet_c
						.getOnePE_CRSOnR8007(v_component,
								new ComponentResultSet_test55811_c());

				class DataType_test55812_c implements ClassQueryInterface_c {
					public boolean evaluate(Object candidate) {
						DataType_c selected = (DataType_c) candidate;
						return selected.getDt_id().equals(p_Id);
					}
				}
				v_dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8004(ComponentVisibility_c
								.getManyPE_CVSsOnR8008(v_compResultSet)),
						new DataType_test55812_c());

			}

			if (((v_dt != null))) {

				if ((Isallowedtype(v_dt.getName()))) {

					return true;

				}

			}

			return false;

		}

		else {

			SymbolicConstant_c v_symConst = SymbolicConstant_c
					.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
							.getOneCNST_LFSCOnR1503(this));

			SystemModel_c v_system = SystemModel_c
					.getOneS_SYSOnR4404(SystemConstantInPackage_c.getManySLD_SCINPsOnR4403(DataTypePackage_c.getManyS_DPKsOnR1506(ConstantInPackage_c
							.getManyCNST_CIPsOnR1506(ConstantSpecification_c
									.getManyCNST_CSPsOnR1504(v_symConst)))));

			class DataType_test55813_c implements ClassQueryInterface_c {
				public boolean evaluate(Object candidate) {
					DataType_c selected = (DataType_c) candidate;
					return (selected.getDt_id().equals(p_Id));
				}
			}
			DataType_c v_dt = DataType_c.getOneS_DTOnR4401(
					SystemDatatypeInPackage_c
							.getManySLD_SDINPsOnR4402(v_system),
					new DataType_test55813_c());

			if ((v_dt == null) && (v_system != null)
					&& v_system.getUseglobals()) {

				class PackageableElement_test55814_c
						implements
							ClassQueryInterface_c {
					public boolean evaluate(Object candidate) {
						PackageableElement_c selected = (PackageableElement_c) candidate;
						return selected.getElement_id().equals(p_Id);
					}
				}
				PackageableElement_c v_pe = PackageableElement_c
						.getOnePE_PEOnR9100(GlobalElementInSystem_c
								.getManyG_EISsOnR9100(v_system),
								new PackageableElement_test55814_c());

				v_dt = DataType_c.getOneS_DTOnR8001(v_pe);

			}

			if (((v_dt == null))) {

				DataTypePackage_c v_dtPkg = DataTypePackage_c
						.getOneS_DPKOnR1506(ConstantInPackage_c
								.getOneCNST_CIPOnR1506(ConstantSpecification_c
										.getOneCNST_CSPOnR1504(v_symConst)));

				Domain_c v_domain = (Domain_c) modelRoot.getInstanceList(
						Domain_c.class).getGlobal(null, v_dtPkg.Getdomainid());

				class DataType_test55815_c implements ClassQueryInterface_c {
					public boolean evaluate(Object candidate) {
						DataType_c selected = (DataType_c) candidate;
						return (selected.getDt_id().equals(p_Id));
					}
				}
				v_dt = DataType_c.getOneS_DTOnR14(v_domain,
						new DataType_test55815_c());

			}

			if (((v_dt != null))) {

				if ((Isallowedtype(v_dt.getName()))) {

					return true;

				}

			}

			return false;

		}

	} // End canUseDataType
	public boolean Canrefertodatatype() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Literal Symbolic Constant",
						" Operation entered: LiteralSymbolicConstant::Canrefertodatatype");
		final ModelRoot modelRoot = getModelRoot();
		SymbolicConstant_c v_symConst = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
						.getOneCNST_LFSCOnR1503(this));

		DataType_c v_dt = DataType_c.getOneS_DTOnR1500(v_symConst);

		if (((v_dt != null))) {

			PackageableElement_c v_packageableElem = PackageableElement_c
					.getOnePE_PEOnR8001(ConstantSpecification_c
							.getOneCNST_CSPOnR1504(v_symConst));

			Package_c v_package = Package_c
					.getOneEP_PKGOnR8000(v_packageableElem);

			Component_c v_component = Component_c
					.getOneC_COnR8003(v_packageableElem);

			boolean v_isInGenericPackage = (v_package != null)
					|| (v_component != null);

			if ((v_isInGenericPackage)) {

				return v_packageableElem.Canrefertodatatype(v_dt.getDt_id(),
						v_dt.getName());

			}

			else {

				DataTypePackage_c v_myDtPkg = DataTypePackage_c
						.getOneS_DPKOnR1506(ConstantInPackage_c
								.getOneCNST_CIPOnR1506(ConstantSpecification_c
										.getOneCNST_CSPOnR1504(v_symConst)));

				Domain_c v_myDomain = (Domain_c) modelRoot.getInstanceList(
						Domain_c.class)
						.getGlobal(null, v_myDtPkg.Getdomainid());

				DataTypePackage_c v_dtPkg = DataTypePackage_c
						.getOneS_DPKOnR39(DataTypeInPackage_c
								.getOneS_DIPOnR39(v_dt));

				if ((!v_dtPkg.Isdomainlevel())) {

					if ((v_myDomain.Participatesinsystem())) {

						return true;

					}

					else {

						return false;

					}

				}

				else {

					Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);

					if ((v_dtDomain == v_myDomain)) {

						return true;

					}

				}

			}

		}

		return false;

	} // End canReferToDataType
	public boolean Isallowedtype(final String p_Typename) {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Isallowedtype");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_Typename.equals("boolean") || p_Typename.equals("integer")
				|| p_Typename.equals("string") || p_Typename.equals("real"))) {

			return true;

		}

		return false;

	} // End isAllowedType
	public void Initialize(final java.util.UUID p_Csp_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		ConstantSpecification_c v_csp = (ConstantSpecification_c) modelRoot
				.getInstanceList(ConstantSpecification_c.class).getGlobal(null,
						p_Csp_id);

		SymbolicConstant_c[] v_peers = SymbolicConstant_c
				.getManyCNST_SYCsOnR1504(v_csp);

		SymbolicConstant_c v_my_syc = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
						.getOneCNST_LFSCOnR1503(this));

		if (v_my_syc != null) {
			v_my_syc.Settodefaultdatatype();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		if (v_csp != null) {
			v_csp.Addliteralsymbolicconstanttoordering(v_my_syc.getConst_id());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		String v_name = Ooaofooa.Getuniqueinitialname(modelRoot,
				"Unnamed Constant", Converttoinstance());

		String v_success = Ooaofooa.Getnewelementname(modelRoot,
				Converttoinstance(), v_name, true);

		if ((!v_success.equals(""))) {

			if (v_my_syc != null) {
				v_my_syc.setName(v_success);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

		}

		else {

			Dispose();

		}

	} // End initialize
	public Object Converttoinstance() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Literal Symbolic Constant",
						" Operation entered: LiteralSymbolicConstant::Converttoinstance");
		// just return this instance as an Object
		return this;
	} // End convertToInstance
	public void Changetype(final String p_Newtypename) {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Changetype");
		final ModelRoot modelRoot = getModelRoot();
		class DataType_test55534_c implements ClassQueryInterface_c {
			public boolean evaluate(Object candidate) {
				DataType_c selected = (DataType_c) candidate;
				return selected.getName().equals(p_Newtypename);
			}
		}
		DataType_c v_selectedDT = DataType_c.DataTypeInstance(modelRoot,
				new DataType_test55534_c());

		if (((v_selectedDT != null))) {

			SymbolicConstant_c v_syc = SymbolicConstant_c
					.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
							.getOneCNST_LFSCOnR1503(this));

			DataType_c v_originalDT = DataType_c.getOneS_DTOnR1500(v_syc);

			if (v_syc != null) {
				v_syc.unrelateAcrossR1500From(v_originalDT);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_syc != null) {
				v_syc.relateAcrossR1500To(v_selectedDT);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

			Updatevaluetodefault(v_selectedDT.getName());

		}

	} // End changeType
	public boolean Getboolean() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Getboolean");
		final ModelRoot modelRoot = getModelRoot();
		if (Gd_c.Tolower(getValue()).equals("true")) {

			return true;

		}

		else {

			return false;

		}

	} // End getBoolean
	public int Getinteger() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Getinteger");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.String_to_int(getValue());

	} // End getInteger
	public float Getreal() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Getreal");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.String_to_real(getValue());

	} // End getReal
	public String Getstring() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Getstring");
		final ModelRoot modelRoot = getModelRoot();
		return getValue();

	} // End getString
	public void Updatevaluetodefault(final String p_Typename) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Literal Symbolic Constant",
						" Operation entered: LiteralSymbolicConstant::Updatevaluetodefault");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_Typename.equals("integer"))) {

			setValue("0");

		}

		else if ((p_Typename.equals("real"))) {

			setValue("0.0");

		}

		else if ((p_Typename.equals("boolean"))) {

			setValue("false");

		}

		else {

			setValue("");

		}

	} // End updateValueToDefault
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Symbolic Constant",
				" Operation entered: LiteralSymbolicConstant::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getConst_id();

	} // End get_ooa_id

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Literal Symbolic Constant
