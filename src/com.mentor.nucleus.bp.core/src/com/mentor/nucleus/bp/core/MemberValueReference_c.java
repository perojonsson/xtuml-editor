package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.MemberValueReference_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_MEMBER_VALUE_REFERENCE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class MemberValueReference_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public MemberValueReference_c(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_root_value_id,
			java.util.UUID p_m_member_id, java.util.UUID p_m_dt_dt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_root_value_id = IdAssigner.preprocessUUID(p_m_root_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_member_id = IdAssigner.preprocessUUID(p_m_member_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dt_dt_id = IdAssigner.preprocessUUID(p_m_dt_dt_id);

		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}
	static public MemberValueReference_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_root_value_id,
			java.util.UUID p_m_member_id, java.util.UUID p_m_dt_dt_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);
		MemberValueReference_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			new_inst = (MemberValueReference_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_root_value_id = IdAssigner
						.preprocessUUID(p_m_root_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_member_id = IdAssigner.preprocessUUID(p_m_member_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dt_dt_id = IdAssigner.preprocessUUID(p_m_dt_dt_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new MemberValueReference_c(modelRoot, p_m_value_id,
					p_m_root_value_id, p_m_member_id, p_m_dt_dt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public MemberValueReference_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_root_value_id,
			java.util.UUID p_m_member_id, java.util.UUID p_m_dt_dt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);
		MemberValueReference_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			source = (MemberValueReference_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_root_value_id = IdAssigner
						.preprocessUUID(p_m_root_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_member_id = IdAssigner.preprocessUUID(p_m_member_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dt_dt_id = IdAssigner.preprocessUUID(p_m_dt_dt_id);

				return source;
			}
		}
		// there is no instance matching the id
		MemberValueReference_c new_inst = new MemberValueReference_c(modelRoot,
				p_m_value_id, p_m_root_value_id, p_m_member_id, p_m_dt_dt_id);
		return new_inst;
	}
	public MemberValueReference_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_root_value_id = IdAssigner.NULL_UUID;
		m_member_id = IdAssigner.NULL_UUID;
		m_dt_dt_id = IdAssigner.NULL_UUID;
		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof MemberValueReference_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof MemberValueReference_c)) {
			return false;
		}

		MemberValueReference_c me = (MemberValueReference_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
						.equals(((MemberValueReference_c) elem).getValue_id())) && this != elem)) {
			return false;
		}
		if (!getValue_id()
				.equals(((MemberValueReference_c) elem).getValue_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof MemberValueReference_c)) {
			return false;
		}

		MemberValueReference_c me = (MemberValueReference_c) elem;
		if (!getValue_idCachedValue().equals(
				((MemberValueReference_c) elem).getValue_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_root_value_id;
	private java.util.UUID m_member_id;
	private java.util.UUID m_dt_dt_id;

	// declare association references from this class

	// referring navigation

	Value_c IsSupertypeValue;
	public void relateAcrossR801To(Value_c target) {
		relateAcrossR801To(target, true);
	}
	public void relateAcrossR801To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeValue)
			return; // already related

		if (IsSupertypeValue != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeValue != null) {

				IsSupertypeValue.clearBackPointerR801To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MemberValueReference_c.relateAcrossR801To(Value_c target)",
									"Relate performed across R801 from Member Value Reference to Value without unrelate of prior instance.");
				}
			}

			IsSupertypeValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR801To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR801From(Value_c target) {
		unrelateAcrossR801From(target, true);
	}
	public void unrelateAcrossR801From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeValue == null)
			return; // already unrelated

		if (target != IsSupertypeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R801",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR801To(this);
		}

		if (IsSupertypeValue != null) {

			m_value_id = IsSupertypeValue.getValue_id();
			IsSupertypeValue = null;
			target.removeRef();
		}
	}

	public static MemberValueReference_c getOneV_MVLOnR801(Value_c[] targets) {
		return getOneV_MVLOnR801(targets, null);
	}

	public static MemberValueReference_c getOneV_MVLOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		MemberValueReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_MVLOnR801(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MemberValueReference_c getOneV_MVLOnR801(Value_c target) {
		return getOneV_MVLOnR801(target, null);
	}

	public static MemberValueReference_c getOneV_MVLOnR801(Value_c target,
			boolean loadComponent) {
		return getOneV_MVLOnR801(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MemberValueReference_c getOneV_MVLOnR801(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_MVLOnR801(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MemberValueReference_c getOneV_MVLOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_MVLOnR801(modelRoot, target, test, true);
	}

	public static MemberValueReference_c getOneV_MVLOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_MVLOnR801(modelRoot, target, test);
	}
	private static MemberValueReference_c find_getOneV_MVLOnR801(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			MemberValueReference_c source = (MemberValueReference_c) target.backPointer_IsSubtypeMemberValueReferenceIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR801(Value_c[] targets) {
		return getManyV_MVLsOnR801(targets, null);
	}
	public static MemberValueReference_c[] getManyV_MVLsOnR801(
			Value_c[] targets, boolean loadComponent) {
		return getManyV_MVLsOnR801(targets, null, loadComponent);
	}
	public static MemberValueReference_c[] getManyV_MVLsOnR801(
			Value_c[] targets, ClassQueryInterface_c test) {
		return getManyV_MVLsOnR801(targets, test, true);
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR801(
			Value_c[] targets, ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MemberValueReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			MemberValueReference_c source = (MemberValueReference_c) targets[i].backPointer_IsSubtypeMemberValueReferenceIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			MemberValueReference_c[] ret_set = new MemberValueReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MemberValueReference_c[0];
		}
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR801(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_MVLsOnR801(targetArray);
		} else {
			MemberValueReference_c[] result = new MemberValueReference_c[0];
			return result;
		}
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR801(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_MVLsOnR801(targetArray, loadComponent);
		} else {
			MemberValueReference_c[] result = new MemberValueReference_c[0];
			return result;
		}
	}

	// referring navigation

	Value_c Value;
	public void relateAcrossR837To(Value_c target) {
		relateAcrossR837To(target, true);
	}
	public void relateAcrossR837To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Value)
			return; // already related

		if (Value != target) {

			Object oldKey = getInstanceKey();

			if (Value != null) {

				Value.clearBackPointerR837To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MemberValueReference_c.relateAcrossR837To(Value_c target)",
									"Relate performed across R837 from Member Value Reference to Value without unrelate of prior instance.");
				}
			}

			Value = target;
			m_root_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR837To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR837From(Value_c target) {
		unrelateAcrossR837From(target, true);
	}
	public void unrelateAcrossR837From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (Value == null)
			return; // already unrelated

		if (target != Value) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R837",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR837To(this);
		}

		if (Value != null) {

			m_root_value_id = Value.getValue_id();
			Value = null;
			target.removeRef();
		}
	}

	public static MemberValueReference_c getOneV_MVLOnR837(Value_c[] targets) {
		return getOneV_MVLOnR837(targets, null);
	}

	public static MemberValueReference_c getOneV_MVLOnR837(Value_c[] targets,
			ClassQueryInterface_c test) {
		MemberValueReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_MVLOnR837(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MemberValueReference_c getOneV_MVLOnR837(Value_c target) {
		return getOneV_MVLOnR837(target, null);
	}

	public static MemberValueReference_c getOneV_MVLOnR837(Value_c target,
			boolean loadComponent) {
		return getOneV_MVLOnR837(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MemberValueReference_c getOneV_MVLOnR837(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_MVLOnR837(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MemberValueReference_c getOneV_MVLOnR837(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_MVLOnR837(modelRoot, target, test, true);
	}

	public static MemberValueReference_c getOneV_MVLOnR837(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_MVLOnR837(modelRoot, target, test);
	}
	private static MemberValueReference_c find_getOneV_MVLOnR837(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			MemberValueReference_c source = (MemberValueReference_c) target.backPointer_IsRootForMemberValueReferenceIsRootFor_R837;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR837(Value_c[] targets) {
		return getManyV_MVLsOnR837(targets, null);
	}
	public static MemberValueReference_c[] getManyV_MVLsOnR837(
			Value_c[] targets, boolean loadComponent) {
		return getManyV_MVLsOnR837(targets, null, loadComponent);
	}
	public static MemberValueReference_c[] getManyV_MVLsOnR837(
			Value_c[] targets, ClassQueryInterface_c test) {
		return getManyV_MVLsOnR837(targets, test, true);
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR837(
			Value_c[] targets, ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MemberValueReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			MemberValueReference_c source = (MemberValueReference_c) targets[i].backPointer_IsRootForMemberValueReferenceIsRootFor_R837;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			MemberValueReference_c[] ret_set = new MemberValueReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MemberValueReference_c[0];
		}
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR837(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_MVLsOnR837(targetArray);
		} else {
			MemberValueReference_c[] result = new MemberValueReference_c[0];
			return result;
		}
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR837(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_MVLsOnR837(targetArray, loadComponent);
		} else {
			MemberValueReference_c[] result = new MemberValueReference_c[0];
			return result;
		}
	}

	// referring navigation

	StructureMember_c IsValueOfStructureMember;
	public void relateAcrossR836To(StructureMember_c target) {
		relateAcrossR836To(target, true);
	}
	public void relateAcrossR836To(StructureMember_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsValueOfStructureMember)
			return; // already related

		if (IsValueOfStructureMember != target) {

			Object oldKey = getInstanceKey();

			if (IsValueOfStructureMember != null) {

				IsValueOfStructureMember.clearBackPointerR836To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MemberValueReference_c.relateAcrossR836To(StructureMember_c target)",
									"Relate performed across R836 from Member Value Reference to Structure Member without unrelate of prior instance.");
				}
			}

			IsValueOfStructureMember = target;
			m_member_id = target.getMember_id();
			if (IdAssigner.NULL_UUID.equals(target.getParent_dt_dt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_dt_dt_id = target.getParent_dt_dt_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR836To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR836From(StructureMember_c target) {
		unrelateAcrossR836From(target, true);
	}
	public void unrelateAcrossR836From(StructureMember_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsValueOfStructureMember == null)
			return; // already unrelated

		if (target != IsValueOfStructureMember) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R836",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR836To(this);
		}

		if (IsValueOfStructureMember != null) {

			m_member_id = IsValueOfStructureMember.getMember_id();
			m_dt_dt_id = IsValueOfStructureMember.getParent_dt_dt_id();
			if (IdAssigner.NULL_UUID.equals(m_dt_dt_id)) {
				m_dt_dt_id = IsValueOfStructureMember
						.getParent_dt_dt_idCachedValue();
			}
			IsValueOfStructureMember = null;
			target.removeRef();
		}
	}

	public static MemberValueReference_c getOneV_MVLOnR836(
			StructureMember_c[] targets) {
		return getOneV_MVLOnR836(targets, null);
	}

	public static MemberValueReference_c getOneV_MVLOnR836(
			StructureMember_c[] targets, ClassQueryInterface_c test) {
		MemberValueReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_MVLOnR836(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MemberValueReference_c getOneV_MVLOnR836(
			StructureMember_c target) {
		return getOneV_MVLOnR836(target, null);
	}

	public static MemberValueReference_c getOneV_MVLOnR836(
			StructureMember_c target, boolean loadComponent) {
		return getOneV_MVLOnR836(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MemberValueReference_c getOneV_MVLOnR836(
			StructureMember_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_MVLOnR836(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MemberValueReference_c getOneV_MVLOnR836(ModelRoot modelRoot,
			StructureMember_c target, ClassQueryInterface_c test) {
		return getOneV_MVLOnR836(modelRoot, target, test, true);
	}

	public static MemberValueReference_c getOneV_MVLOnR836(ModelRoot modelRoot,
			StructureMember_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_MVLOnR836(modelRoot, target, test);
	}
	private static MemberValueReference_c find_getOneV_MVLOnR836(
			ModelRoot modelRoot, StructureMember_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MemberValueReference_R836) {
				for (int i = 0; i < target.backPointer_MemberValueReference_R836
						.size(); ++i) {
					MemberValueReference_c source = (MemberValueReference_c) target.backPointer_MemberValueReference_R836
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c[] targets) {
		return getManyV_MVLsOnR836(targets, null);
	}
	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c[] targets, boolean loadComponent) {
		return getManyV_MVLsOnR836(targets, null, loadComponent);
	}
	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c[] targets, ClassQueryInterface_c test) {
		return getManyV_MVLsOnR836(targets, test, true);
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MemberValueReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MemberValueReference_R836) {
				for (int j = 0; j < targets[i].backPointer_MemberValueReference_R836
						.size(); ++j) {
					MemberValueReference_c source = (MemberValueReference_c) targets[i].backPointer_MemberValueReference_R836
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			MemberValueReference_c[] ret_set = new MemberValueReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MemberValueReference_c[0];
		}
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c target) {
		return getManyV_MVLsOnR836(target, null);
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c target, boolean loadComponent) {
		return getManyV_MVLsOnR836(target, null, loadComponent);
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c target, ClassQueryInterface_c test) {
		return getManyV_MVLsOnR836(target, test, true);
	}

	public static MemberValueReference_c[] getManyV_MVLsOnR836(
			StructureMember_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new MemberValueReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MemberValueReference_R836) {
			for (int i = 0; i < target.backPointer_MemberValueReference_R836
					.size(); ++i) {
				MemberValueReference_c source = (MemberValueReference_c) target.backPointer_MemberValueReference_R836
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			MemberValueReference_c[] ret_set = new MemberValueReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MemberValueReference_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R801
		Value_c relInst38109 = (Value_c) baseRoot
				.getInstanceList(Value_c.class).get(new Object[]{m_value_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38109 == null) {
			relInst38109 = (Value_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Value_c.class)
					.get(new Object[]{m_value_id});
		}
		if (relInst38109 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38109 = (Value_c) roots[i]
						.getInstanceList(Value_c.class).get(
								new Object[]{m_value_id});
				if (relInst38109 != null)
					break;
			}
		}
		//synchronized
		if (relInst38109 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38109) && !isProxy())) {
				relInst38109.relateAcrossR801To(this, notifyChanges);
			}
		}

		if (Value == null) {
			// R837
			Value_c relInst38110 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_root_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38110 == null) {
				relInst38110 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_root_value_id});
			}
			if (relInst38110 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38110 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_root_value_id});
					if (relInst38110 != null)
						break;
				}
			}
			//synchronized
			if (relInst38110 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38110) && !isProxy())) {
					relInst38110.relateAcrossR837To(this, notifyChanges);
				}
			}
		}

		if (IsValueOfStructureMember == null) {
			// R836
			StructureMember_c relInst38111 = (StructureMember_c) baseRoot
					.getInstanceList(StructureMember_c.class).get(
							new Object[]{m_member_id, m_dt_dt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38111 == null) {
				relInst38111 = (StructureMember_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StructureMember_c.class)
						.get(new Object[]{m_member_id, m_dt_dt_id});
			}
			if (relInst38111 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38111 = (StructureMember_c) roots[i]
							.getInstanceList(StructureMember_c.class).get(
									new Object[]{m_member_id, m_dt_dt_id});
					if (relInst38111 != null)
						break;
				}
			}
			//synchronized
			if (relInst38111 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38111) && !isProxy())) {
					relInst38111.relateAcrossR836To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R801
		// V_VAL
		inst = IsSupertypeValue;
		unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R837
		// V_VAL
		inst = Value;
		unrelateAcrossR837From(Value, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R836
		// S_MBR
		inst = IsValueOfStructureMember;
		unrelateAcrossR836From(IsValueOfStructureMember, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(MemberValueReference_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final MemberValueReference_c inst = (MemberValueReference_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static MemberValueReference_c MemberValueReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		MemberValueReference_c result = findMemberValueReferenceInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static MemberValueReference_c findMemberValueReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MemberValueReference_c x = (MemberValueReference_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static MemberValueReference_c MemberValueReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MemberValueReferenceInstance(modelRoot, test, true);
	}

	public static MemberValueReference_c MemberValueReferenceInstance(
			ModelRoot modelRoot) {
		return MemberValueReferenceInstance(modelRoot, null, true);
	}

	public static MemberValueReference_c[] MemberValueReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(MemberValueReference_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MemberValueReference_c x = (MemberValueReference_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				MemberValueReference_c[] ret_set = new MemberValueReference_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new MemberValueReference_c[0];
			}
		}
	}
	public static MemberValueReference_c[] MemberValueReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MemberValueReferenceInstances(modelRoot, test, true);
	}
	public static MemberValueReference_c[] MemberValueReferenceInstances(
			ModelRoot modelRoot) {
		return MemberValueReferenceInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Member Value Reference.dispose call: ";
		Value_c testR801Inst18 = Value_c.getOneV_VALOnR801(this, false);

		if (testR801Inst18 != null) {
			delete_error = true;
			errorMsg = errorMsg + "801 ";
		}
		Value_c testR837Inst = Value_c.getOneV_VALOnR837(this, false);

		if (testR837Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "837 ";
		}
		StructureMember_c testR836Inst = StructureMember_c.getOneS_MBROnR836(
				this, false);

		if (testR836Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "836 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Member Value Reference",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("root_value_id")) {
			return true;
		}
		if (attributeName.equals("member_id")) {
			return true;
		}
		if (attributeName.equals("dt_dt_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeValue != null);

	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getRoot_value_idLongBased() {
		if (Value != null) {
			return Value.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRoot_value_id() {
		if (Value != null) {
			return Value.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRoot_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_root_value_id))
			return m_root_value_id;
		else
			return getRoot_value_id();
	}

	public void setRoot_value_id(java.util.UUID newValue) {
		m_root_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getMember_idLongBased() {
		if (IsValueOfStructureMember != null) {
			return IsValueOfStructureMember.getMember_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMember_id() {
		if (IsValueOfStructureMember != null) {
			return IsValueOfStructureMember.getMember_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getMember_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_member_id))
			return m_member_id;
		else
			return getMember_id();
	}

	public void setMember_id(java.util.UUID newValue) {
		m_member_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getDt_dt_idLongBased() {
		if (IsValueOfStructureMember != null) {
			return IsValueOfStructureMember.getParent_dt_dt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDt_dt_id() {
		if (IsValueOfStructureMember != null) {
			return IsValueOfStructureMember.getParent_dt_dt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDt_dt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dt_dt_id))
			return m_dt_dt_id;
		else
			return getDt_dt_id();
	}

	public void setDt_dt_id(java.util.UUID newValue) {
		m_dt_dt_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Member Value Reference", //$NON-NLS-1$
						" Operation entered: Member Value Reference::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		MemberValueReference_c[] objs = MemberValueReference_c
				.MemberValueReferenceInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Member Value Reference", //$NON-NLS-1$
				" Operation entered: Member Value Reference::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class MemberValueReference_c_test38113_c
				implements
					ClassQueryInterface_c {
			MemberValueReference_c_test38113_c(java.util.UUID p38114) {
				m_p38114 = p38114;
			}
			private java.util.UUID m_p38114;
			public boolean evaluate(Object candidate) {
				MemberValueReference_c selected = (MemberValueReference_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38114));
				return retval;
			}
		}

		MemberValueReference_c[] objs38112 = MemberValueReference_c
				.MemberValueReferenceInstances(modelRoot,
						new MemberValueReference_c_test38113_c(getValue_id()));

		if (((objs38112.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Member Value Reference", //$NON-NLS-1$
								"Consistency: Object: Member Value Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38112.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Member Value Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38112.length), e);
			}
			retval = false;

		}

		if (((objs38112.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Member Value Reference", //$NON-NLS-1$
								"Consistency: Object: Member Value Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38112.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Member Value Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38112.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Member Value Reference is a subtype in association: rel.Numb = 801
		// The supertype class is: Value
		class Value_c_test38118_c implements ClassQueryInterface_c {
			Value_c_test38118_c(java.util.UUID p38119) {
				m_p38119 = p38119;
			}
			private java.util.UUID m_p38119;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38119));
				return retval;
			}
		}

		Value_c[] objs38117 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38118_c(getValue_id()));

		if (((objs38117.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Member Value Reference", //$NON-NLS-1$
								"Consistency: Object: Member Value Reference: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38117.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Member Value Reference: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38117.length), e);
			}
			retval = false;

		}

		// Member Value Reference is a referring class in association: rel.Numb = 837
		// The participating class is: Value
		class Value_c_test38121_c implements ClassQueryInterface_c {
			Value_c_test38121_c(java.util.UUID p38122) {
				m_p38122 = p38122;
			}
			private java.util.UUID m_p38122;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38122));
				return retval;
			}
		}

		Value_c[] objs38120 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38121_c(getRoot_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38120.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Member Value Reference", //$NON-NLS-1$
								"Consistency: Object: Member Value Reference: Association: 837: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38120.length)
										+ " Root_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Member Value Reference: Association: 837: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38120.length)
										+ " Root_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Member Value Reference is a referring class in association: rel.Numb = 836
		// The participating class is: Structure Member
		class StructureMember_c_test38124_c implements ClassQueryInterface_c {
			StructureMember_c_test38124_c(java.util.UUID p38125,
					java.util.UUID p38126) {
				m_p38125 = p38125;
				m_p38126 = p38126;
			}
			private java.util.UUID m_p38125;
			private java.util.UUID m_p38126;
			public boolean evaluate(Object candidate) {
				StructureMember_c selected = (StructureMember_c) candidate;
				boolean retval = false;
				retval = (selected.getMember_id().equals(m_p38125))
						& (selected.getParent_dt_dt_id().equals(m_p38126));
				return retval;
			}
		}

		StructureMember_c[] objs38123 = StructureMember_c
				.StructureMemberInstances(modelRoot,
						new StructureMember_c_test38124_c(getMember_id(),
								getDt_dt_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38123.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Member Value Reference", //$NON-NLS-1$
								"Consistency: Object: Member Value Reference: Association: 836: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38123.length)
										+ " Member_ID: " + "Not Printable" + " DT_DT_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Member Value Reference: Association: 836: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38123.length)
										+ " Member_ID: " + "Not Printable" + " DT_DT_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Member Value Reference",
				" Operation entered: MemberValueReference::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		StructureMember_c v_member = StructureMember_c.getOneS_MBROnR836(this);

		if (((v_member != null))) {

			this.unrelateAcrossR836From(v_member);

		}

		Value_c v_value = Value_c.getOneV_VALOnR837(this);

		if (((v_value != null))) {

			this.unrelateAcrossR837From(v_value);

		}

		delete();

	} // End dispose
	public Object Getvalue(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Member Value Reference",
				" Operation entered: MemberValueReference::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_instance();

	} // End getValue
	public void Setvalue(final java.util.UUID p_Member_id,
			final java.util.UUID p_Stack_frame_id, final Object p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Member Value Reference",
				" Operation entered: MemberValueReference::Setvalue");
		final ModelRoot modelRoot = getModelRoot();

	} // End setValue
	public java.util.UUID Getruntimevalue(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Member Value Reference",
				" Operation entered: MemberValueReference::Getruntimevalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_unique_id();

	} // End getRuntimeValue

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Member Value Reference
