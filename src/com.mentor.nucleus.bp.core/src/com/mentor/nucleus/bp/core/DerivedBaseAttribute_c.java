package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.DerivedBaseAttribute_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_DERIVED_BASE_ATTRIBUTE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class DerivedBaseAttribute_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public DerivedBaseAttribute_c(ModelRoot modelRoot,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_obj_id,
			String p_m_action_semantics_internal, int p_m_suc_pars) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		// default value for m_action_semantics
		m_suc_pars = p_m_suc_pars;
		m_action_semantics_internal = p_m_action_semantics_internal;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_attr_id, m_obj_id};
		addInstanceToMap(key);
	}
	static public DerivedBaseAttribute_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_obj_id,
			String p_m_action_semantics_internal, int p_m_suc_pars,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(DerivedBaseAttribute_c.class);
		DerivedBaseAttribute_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_attr_id, p_m_obj_id};
			new_inst = (DerivedBaseAttribute_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				// default value for m_action_semantics
				new_inst.m_suc_pars = p_m_suc_pars;
				new_inst.m_action_semantics_internal = p_m_action_semantics_internal;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new DerivedBaseAttribute_c(modelRoot, p_m_attr_id,
					p_m_obj_id, p_m_action_semantics_internal, p_m_suc_pars);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public DerivedBaseAttribute_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_obj_id,
			String p_m_action_semantics_internal, int p_m_suc_pars) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedBaseAttribute_c.class);
		DerivedBaseAttribute_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_attr_id, p_m_obj_id};
			source = (DerivedBaseAttribute_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				// default value for m_action_semantics
				source.m_suc_pars = p_m_suc_pars;
				source.m_action_semantics_internal = p_m_action_semantics_internal;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		DerivedBaseAttribute_c new_inst = new DerivedBaseAttribute_c(modelRoot,
				p_m_attr_id, p_m_obj_id, p_m_action_semantics_internal,
				p_m_suc_pars);
		return new_inst;
	}
	public DerivedBaseAttribute_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_attr_id = IdAssigner.NULL_UUID;
		m_action_semantics = "";
		m_suc_pars = Parsestatus_c.OOA_UNINITIALIZED_ENUM;
		m_action_semantics_internal = "";
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_attr_id, m_obj_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_attr_id, m_obj_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_attr_id != p_newKey) {

			m_attr_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof DerivedBaseAttribute_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof DerivedBaseAttribute_c)) {
			return false;
		}

		DerivedBaseAttribute_c me = (DerivedBaseAttribute_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAttr_id()) || IdAssigner.NULL_UUID
						.equals(((DerivedBaseAttribute_c) elem).getAttr_id())) && this != elem)) {
			return false;
		}
		if (!getAttr_id().equals(((DerivedBaseAttribute_c) elem).getAttr_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID
						.equals(((DerivedBaseAttribute_c) elem).getObj_id())) && this != elem)) {
			return false;
		}
		if (!getObj_id().equals(((DerivedBaseAttribute_c) elem).getObj_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof DerivedBaseAttribute_c)) {
			return false;
		}

		DerivedBaseAttribute_c me = (DerivedBaseAttribute_c) elem;
		if (!getAttr_idCachedValue().equals(
				((DerivedBaseAttribute_c) elem).getAttr_idCachedValue()))
			return false;
		if (!getObj_idCachedValue().equals(
				((DerivedBaseAttribute_c) elem).getObj_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_attr_id;
	private String m_action_semantics;
	private int m_suc_pars;
	private String m_action_semantics_internal;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	BaseAttribute_c IsSupertypeBaseAttribute;
	public void relateAcrossR107To(BaseAttribute_c target) {
		relateAcrossR107To(target, true);
	}
	public void relateAcrossR107To(BaseAttribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeBaseAttribute)
			return; // already related

		if (IsSupertypeBaseAttribute != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeBaseAttribute != null) {

				IsSupertypeBaseAttribute.clearBackPointerR107To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DerivedBaseAttribute_c.relateAcrossR107To(BaseAttribute_c target)",
									"Relate performed across R107 from Derived Base Attribute to Base Attribute without unrelate of prior instance.");
				}
			}

			IsSupertypeBaseAttribute = target;
			if (IdAssigner.NULL_UUID.equals(target.getAttr_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_attr_id = target.getAttr_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR107To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "107", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR107From(BaseAttribute_c target) {
		unrelateAcrossR107From(target, true);
	}
	public void unrelateAcrossR107From(BaseAttribute_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeBaseAttribute == null)
			return; // already unrelated

		if (target != IsSupertypeBaseAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R107",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR107To(this);
		}

		if (IsSupertypeBaseAttribute != null) {

			m_attr_id = IsSupertypeBaseAttribute.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(m_attr_id)) {
				m_attr_id = IsSupertypeBaseAttribute.getAttr_idCachedValue();
			}
			m_obj_id = IsSupertypeBaseAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IsSupertypeBaseAttribute.getObj_idCachedValue();
			}
			IsSupertypeBaseAttribute = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "107", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			BaseAttribute_c[] targets) {
		return getOneO_DBATTROnR107(targets, null);
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			BaseAttribute_c[] targets, ClassQueryInterface_c test) {
		DerivedBaseAttribute_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneO_DBATTROnR107(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			BaseAttribute_c target) {
		return getOneO_DBATTROnR107(target, null);
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			BaseAttribute_c target, boolean loadComponent) {
		return getOneO_DBATTROnR107(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			BaseAttribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneO_DBATTROnR107(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			ModelRoot modelRoot, BaseAttribute_c target,
			ClassQueryInterface_c test) {
		return getOneO_DBATTROnR107(modelRoot, target, test, true);
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR107(
			ModelRoot modelRoot, BaseAttribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneO_DBATTROnR107(modelRoot, target, test);
	}
	private static DerivedBaseAttribute_c find_getOneO_DBATTROnR107(
			ModelRoot modelRoot, BaseAttribute_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			DerivedBaseAttribute_c source = (DerivedBaseAttribute_c) target.backPointer_IsSubtypeDerivedBaseAttributeIsSubtype_R107;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR107(
			BaseAttribute_c[] targets) {
		return getManyO_DBATTRsOnR107(targets, null);
	}
	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR107(
			BaseAttribute_c[] targets, boolean loadComponent) {
		return getManyO_DBATTRsOnR107(targets, null, loadComponent);
	}
	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR107(
			BaseAttribute_c[] targets, ClassQueryInterface_c test) {
		return getManyO_DBATTRsOnR107(targets, test, true);
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR107(
			BaseAttribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DerivedBaseAttribute_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DerivedBaseAttribute_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			DerivedBaseAttribute_c source = (DerivedBaseAttribute_c) targets[i].backPointer_IsSubtypeDerivedBaseAttributeIsSubtype_R107;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			DerivedBaseAttribute_c[] ret_set = new DerivedBaseAttribute_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DerivedBaseAttribute_c[0];
		}
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR107(
			BaseAttribute_c target) {
		if (target != null) {
			BaseAttribute_c[] targetArray = new BaseAttribute_c[1];
			targetArray[0] = target;
			return getManyO_DBATTRsOnR107(targetArray);
		} else {
			DerivedBaseAttribute_c[] result = new DerivedBaseAttribute_c[0];
			return result;
		}
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR107(
			BaseAttribute_c target, boolean loadComponent) {
		if (target != null) {
			BaseAttribute_c[] targetArray = new BaseAttribute_c[1];
			targetArray[0] = target;
			return getManyO_DBATTRsOnR107(targetArray, loadComponent);
		} else {
			DerivedBaseAttribute_c[] result = new DerivedBaseAttribute_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	DerivedAttributeBody_c backPointer_DerivedAttributeBody_R693;

	public void setDerivedAttributeBodyOrderInChildListR693(
			DerivedAttributeBody_c target, int index) {
		unrelateAcrossR693From(target);
		DerivedAttributeBody_c[] elements = DerivedAttributeBody_c
				.getManyACT_DABsOnR693(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR693From((DerivedAttributeBody_c) elements[i]);
			}
			count++;
		}
		relateAcrossR693To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR693To((DerivedAttributeBody_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR693To(DerivedAttributeBody_c target) {
		if (target != null) {
			target.relateAcrossR693To(this, true);
		}
	}

	public void relateAcrossR693To(DerivedAttributeBody_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR693To(this, notifyChanges);
		}
	}

	public void setBackPointerR693To(DerivedAttributeBody_c target) {
		backPointer_DerivedAttributeBody_R693 = target;
	}

	public void unrelateAcrossR693From(DerivedAttributeBody_c target) {
		if (target != null) {
			target.unrelateAcrossR693From(this, true);
		}
	}

	public void unrelateAcrossR693From(DerivedAttributeBody_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR693From(this, notifyChanges);
		}
	}

	public void clearBackPointerR693To(DerivedAttributeBody_c target) {
		if (target == backPointer_DerivedAttributeBody_R693) {
			backPointer_DerivedAttributeBody_R693 = null;
		}
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR693(
			DerivedAttributeBody_c[] targets) {
		return getOneO_DBATTROnR693(targets, null);
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR693(
			DerivedAttributeBody_c[] targets, ClassQueryInterface_c test) {
		return getOneO_DBATTROnR693(targets, test, true);
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR693(
			DerivedAttributeBody_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		DerivedBaseAttribute_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					DerivedBaseAttribute_c candidate_val = getOneO_DBATTROnR693(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneO_DBATTROnR693(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static DerivedBaseAttribute_c getOneO_DBATTROnR693(
			DerivedAttributeBody_c target) {
		return getOneO_DBATTROnR693(target, true);
	}
	public static DerivedBaseAttribute_c getOneO_DBATTROnR693(
			DerivedAttributeBody_c target, boolean loadComponent) {
		if (target != null) {
			return target.SpecifiesProcessingForDerivedBaseAttribute;
		} else {
			return null;
		}
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR693(
			DerivedAttributeBody_c[] targets, ClassQueryInterface_c test) {
		return getManyO_DBATTRsOnR693(targets, test, true);
	}

	public static DerivedBaseAttribute_c [] getManyO_DBATTRsOnR693(DerivedAttributeBody_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DerivedBaseAttribute_c[0];
  
  
  LinkedHashSet<DerivedBaseAttribute_c> elementsSet = new LinkedHashSet<DerivedBaseAttribute_c>();
  for (int i = 0; i < targets.length; i++) {
    DerivedBaseAttribute_c associate = targets[i].SpecifiesProcessingForDerivedBaseAttribute;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DerivedBaseAttribute_c[] result = new DerivedBaseAttribute_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR693(
			DerivedAttributeBody_c[] targets) {
		return getManyO_DBATTRsOnR693(targets, null);
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR693(
			DerivedAttributeBody_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			DerivedAttributeBody_c[] targetArray = new DerivedAttributeBody_c[1];
			targetArray[0] = target;
			return getManyO_DBATTRsOnR693(targetArray, test, loadComponent);
		} else {
			DerivedBaseAttribute_c[] result = new DerivedBaseAttribute_c[0];
			return result;
		}

	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR693(
			DerivedAttributeBody_c target, ClassQueryInterface_c test) {
		return getManyO_DBATTRsOnR693(target, null, true);
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR693(
			DerivedAttributeBody_c target) {
		return getManyO_DBATTRsOnR693(target, null, true);
	}

	public static DerivedBaseAttribute_c[] getManyO_DBATTRsOnR693(
			DerivedAttributeBody_c target, boolean loadComponent) {
		return getManyO_DBATTRsOnR693(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R107
		BaseAttribute_c relInst38711 = (BaseAttribute_c) baseRoot
				.getInstanceList(BaseAttribute_c.class).get(
						new Object[]{m_attr_id, m_obj_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38711 == null) {
			relInst38711 = (BaseAttribute_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(BaseAttribute_c.class)
					.get(new Object[]{m_attr_id, m_obj_id});
		}
		if (relInst38711 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38711 = (BaseAttribute_c) roots[i].getInstanceList(
						BaseAttribute_c.class).get(
						new Object[]{m_attr_id, m_obj_id});
				if (relInst38711 != null)
					break;
			}
		}
		//synchronized
		if (relInst38711 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38711) && !isProxy())) {
				relInst38711.relateAcrossR107To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R107
		// O_BATTR
		inst = IsSupertypeBaseAttribute;
		unrelateAcrossR107From(IsSupertypeBaseAttribute, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(DerivedBaseAttribute_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final DerivedBaseAttribute_c inst = (DerivedBaseAttribute_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedBaseAttribute_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static DerivedBaseAttribute_c DerivedBaseAttributeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		DerivedBaseAttribute_c result = findDerivedBaseAttributeInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					DerivedBaseAttribute_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findDerivedBaseAttributeInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static DerivedBaseAttribute_c findDerivedBaseAttributeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedBaseAttribute_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DerivedBaseAttribute_c x = (DerivedBaseAttribute_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static DerivedBaseAttribute_c DerivedBaseAttributeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return DerivedBaseAttributeInstance(modelRoot, test, true);
	}

	public static DerivedBaseAttribute_c DerivedBaseAttributeInstance(
			ModelRoot modelRoot) {
		return DerivedBaseAttributeInstance(modelRoot, null, true);
	}

	public static DerivedBaseAttribute_c[] DerivedBaseAttributeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					DerivedBaseAttribute_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(DerivedBaseAttribute_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DerivedBaseAttribute_c x = (DerivedBaseAttribute_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				DerivedBaseAttribute_c[] ret_set = new DerivedBaseAttribute_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new DerivedBaseAttribute_c[0];
			}
		}
	}
	public static DerivedBaseAttribute_c[] DerivedBaseAttributeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return DerivedBaseAttributeInstances(modelRoot, test, true);
	}
	public static DerivedBaseAttribute_c[] DerivedBaseAttributeInstances(
			ModelRoot modelRoot) {
		return DerivedBaseAttributeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Derived Base Attribute.dispose call: ";
		BaseAttribute_c testR107Inst2 = BaseAttribute_c.getOneO_BATTROnR107(
				this, false);

		if (testR107Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "107 ";
		}
		DerivedAttributeBody_c testR693Inst = DerivedAttributeBody_c
				.getOneACT_DABOnR693(this, false);

		if (testR693Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "693 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Derived Base Attribute",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAttr_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getAttr_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getObj_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getObj_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getAttr_idLongBased() {
		if (IsSupertypeBaseAttribute != null) {
			return IsSupertypeBaseAttribute.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (IsSupertypeBaseAttribute != null) {
			return IsSupertypeBaseAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeBaseAttribute != null);

	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_attr_id)) {
				return;
			}
		} else if (m_attr_id != null) {
			if (m_attr_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Attr_id", m_attr_id, newValue, true);
		m_attr_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getAction_semantics() {
		ModelRoot modelRoot = getModelRoot();
		return Ooaofooa.Convertrelocatabletags(modelRoot,
				getAction_semantics_internal());

	}

	public int getSuc_pars() {
		return m_suc_pars;
	}

	public void setSuc_pars(int newValue) {
		if (m_suc_pars == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Suc_pars", new Integer(m_suc_pars), new Integer(newValue),
				true);

		m_suc_pars = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getAction_semantics_internal() {
		return m_action_semantics_internal;
	}

	public void setAction_semantics_internal(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_action_semantics_internal)) {
				return;
			}
		} else if (m_action_semantics_internal != null) {
			if (m_action_semantics_internal.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Action_semantics_internal", m_action_semantics_internal,
				newValue, true);
		m_action_semantics_internal = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (IsSupertypeBaseAttribute != null) {
			return IsSupertypeBaseAttribute.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (IsSupertypeBaseAttribute != null) {
			return IsSupertypeBaseAttribute.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Derived Base Attribute", //$NON-NLS-1$
						" Operation entered: Derived Base Attribute::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		DerivedBaseAttribute_c[] objs = DerivedBaseAttribute_c
				.DerivedBaseAttributeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Base Attribute", //$NON-NLS-1$
				" Operation entered: Derived Base Attribute::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class DerivedBaseAttribute_c_test38713_c
				implements
					ClassQueryInterface_c {
			DerivedBaseAttribute_c_test38713_c(java.util.UUID p38714,
					java.util.UUID p38715) {
				m_p38714 = p38714;
				m_p38715 = p38715;
			}
			private java.util.UUID m_p38714;
			private java.util.UUID m_p38715;
			public boolean evaluate(Object candidate) {
				DerivedBaseAttribute_c selected = (DerivedBaseAttribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p38714))
						& (selected.getObj_id().equals(m_p38715));
				return retval;
			}
		}

		DerivedBaseAttribute_c[] objs38712 = DerivedBaseAttribute_c
				.DerivedBaseAttributeInstances(modelRoot,
						new DerivedBaseAttribute_c_test38713_c(getAttr_id(),
								getObj_id()));

		if (((objs38712.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Base Attribute", //$NON-NLS-1$
								"Consistency: Object: Derived Base Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38712.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Base Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38712.length), e);
			}
			retval = false;

		}

		if (((objs38712.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Base Attribute", //$NON-NLS-1$
								"Consistency: Object: Derived Base Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38712.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Base Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38712.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Derived Base Attribute is a subtype in association: rel.Numb = 107
		// The supertype class is: Base Attribute
		class BaseAttribute_c_test38719_c implements ClassQueryInterface_c {
			BaseAttribute_c_test38719_c(java.util.UUID p38720,
					java.util.UUID p38721) {
				m_p38720 = p38720;
				m_p38721 = p38721;
			}
			private java.util.UUID m_p38720;
			private java.util.UUID m_p38721;
			public boolean evaluate(Object candidate) {
				BaseAttribute_c selected = (BaseAttribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p38720))
						& (selected.getObj_id().equals(m_p38721));
				return retval;
			}
		}

		BaseAttribute_c[] objs38718 = BaseAttribute_c.BaseAttributeInstances(
				modelRoot, new BaseAttribute_c_test38719_c(getAttr_id(),
						getObj_id()));

		if (((objs38718.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Base Attribute", //$NON-NLS-1$
								"Consistency: Object: Derived Base Attribute: Association: 107: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38718.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Base Attribute: Association: 107: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38718.length), e);
			}
			retval = false;

		}

		// Derived Base Attribute is a participating class in association: rel.Numb = 693
		// Object: Derived Attribute Body
		class DerivedAttributeBody_c_test38723_c
				implements
					ClassQueryInterface_c {
			DerivedAttributeBody_c_test38723_c(java.util.UUID p38724,
					java.util.UUID p38725) {
				m_p38724 = p38724;
				m_p38725 = p38725;
			}
			private java.util.UUID m_p38724;
			private java.util.UUID m_p38725;
			public boolean evaluate(Object candidate) {
				DerivedAttributeBody_c selected = (DerivedAttributeBody_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p38724))
						& (selected.getObj_id().equals(m_p38725));
				return retval;
			}
		}

		DerivedAttributeBody_c[] objs38722 = DerivedAttributeBody_c
				.DerivedAttributeBodyInstances(modelRoot,
						new DerivedAttributeBody_c_test38723_c(getAttr_id(),
								getObj_id()));

		if (((objs38722.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Base Attribute", //$NON-NLS-1$
								"Consistency: Object: Derived Base Attribute: Association: 693: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38722.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Base Attribute: Association: 693: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38722.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Base Attribute",
				" Operation entered: DerivedBaseAttribute::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		BaseAttribute_c v_battr = BaseAttribute_c.getOneO_BATTROnR107(this);

		this.unrelateAcrossR107From(v_battr);

		Body_c v_body = Body_c.getOneACT_ACTOnR698(DerivedAttributeBody_c
				.getOneACT_DABOnR693(this));

		if (((v_body != null))) {

			if (v_body != null) {
				v_body.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Base Attribute",
				" Operation entered: DerivedBaseAttribute::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(BaseAttribute_c
				.getOneO_BATTROnR107(this));

		if (((v_attr == null))) {

			return Ooaofooa.Getorphanedelementname(modelRoot);

		}

		else {

			return v_attr.getName();

		}

	} // End get_name
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Base Attribute",
				" Operation entered: DerivedBaseAttribute::Converttoinstance");
		// just return this instance as an Object
		return this;

	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Derived Base Attribute
