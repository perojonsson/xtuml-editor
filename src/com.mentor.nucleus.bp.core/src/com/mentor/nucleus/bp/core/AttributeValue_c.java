package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.AttributeValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import java.util.concurrent.locks.ReentrantLock;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ATTRIBUTE_VALUE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class AttributeValue_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public AttributeValue_c(ModelRoot modelRoot, java.util.UUID p_m_inst_id,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_attr_id,
			String p_m_value, String p_m_label) {
		super(modelRoot);
		m_value = p_m_value;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		m_label = p_m_label;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_inst_id, m_attr_id};
		addInstanceToMap(key);
	}
	static public AttributeValue_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_inst_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, String p_m_value, String p_m_label,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);
		AttributeValue_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_inst_id, p_m_attr_id};
			new_inst = (AttributeValue_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_value = p_m_value;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				new_inst.m_label = p_m_label;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new AttributeValue_c(modelRoot, p_m_inst_id, p_m_obj_id,
					p_m_attr_id, p_m_value, p_m_label);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public AttributeValue_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_inst_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, String p_m_value, String p_m_label) {
		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);
		AttributeValue_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_inst_id, p_m_attr_id};
			source = (AttributeValue_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_value = p_m_value;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				source.m_label = p_m_label;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		AttributeValue_c new_inst = new AttributeValue_c(modelRoot,
				p_m_inst_id, p_m_obj_id, p_m_attr_id, p_m_value, p_m_label);
		return new_inst;
	}
	public AttributeValue_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value = "";
		m_inst_id = IdAssigner.NULL_UUID;
		m_attr_id = IdAssigner.NULL_UUID;
		m_label = "";
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_inst_id, m_attr_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_inst_id, m_attr_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_inst_id != p_newKey) {

			m_inst_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof AttributeValue_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof AttributeValue_c)) {
			return false;
		}

		AttributeValue_c me = (AttributeValue_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getInst_id()) || IdAssigner.NULL_UUID
						.equals(((AttributeValue_c) elem).getInst_id())) && this != elem)) {
			return false;
		}
		if (!getInst_id().equals(((AttributeValue_c) elem).getInst_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAttr_id()) || IdAssigner.NULL_UUID
						.equals(((AttributeValue_c) elem).getAttr_id())) && this != elem)) {
			return false;
		}
		if (!getAttr_id().equals(((AttributeValue_c) elem).getAttr_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof AttributeValue_c)) {
			return false;
		}

		AttributeValue_c me = (AttributeValue_c) elem;
		if (!getInst_idCachedValue().equals(
				((AttributeValue_c) elem).getInst_idCachedValue()))
			return false;
		if (!getAttr_idCachedValue().equals(
				((AttributeValue_c) elem).getAttr_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_value;
	private java.util.UUID m_inst_id;
	private java.util.UUID m_attr_id;
	private String m_label;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	Attribute_c IsInstanceOfAttribute;
	public void relateAcrossR2910To(Attribute_c target) {
		relateAcrossR2910To(target, true);
	}
	public void relateAcrossR2910To(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsInstanceOfAttribute)
			return; // already related

		if (IsInstanceOfAttribute != target) {

			Object oldKey = getInstanceKey();

			if (IsInstanceOfAttribute != null) {

				IsInstanceOfAttribute.clearBackPointerR2910To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AttributeValue_c.relateAcrossR2910To(Attribute_c target)",
									"Relate performed across R2910 from Attribute Value to Attribute without unrelate of prior instance.");
				}
			}

			IsInstanceOfAttribute = target;
			m_attr_id = target.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2910To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2910", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2910From(Attribute_c target) {
		unrelateAcrossR2910From(target, true);
	}
	public void unrelateAcrossR2910From(Attribute_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsInstanceOfAttribute == null)
			return; // already unrelated

		if (target != IsInstanceOfAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2910",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2910To(this);
		}

		if (IsInstanceOfAttribute != null) {

			m_attr_id = IsInstanceOfAttribute.getAttr_id();
			m_obj_id = IsInstanceOfAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IsInstanceOfAttribute.getObj_idCachedValue();
			}
			IsInstanceOfAttribute = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2910", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AttributeValue_c getOneI_AVLOnR2910(Attribute_c[] targets) {
		return getOneI_AVLOnR2910(targets, null);
	}

	public static AttributeValue_c getOneI_AVLOnR2910(Attribute_c[] targets,
			ClassQueryInterface_c test) {
		AttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_AVLOnR2910(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AttributeValue_c getOneI_AVLOnR2910(Attribute_c target) {
		return getOneI_AVLOnR2910(target, null);
	}

	public static AttributeValue_c getOneI_AVLOnR2910(Attribute_c target,
			boolean loadComponent) {
		return getOneI_AVLOnR2910(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AttributeValue_c getOneI_AVLOnR2910(Attribute_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_AVLOnR2910(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AttributeValue_c getOneI_AVLOnR2910(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test) {
		return getOneI_AVLOnR2910(modelRoot, target, test, true);
	}

	public static AttributeValue_c getOneI_AVLOnR2910(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_AVLOnR2910(modelRoot, target, test);
	}
	private static AttributeValue_c find_getOneI_AVLOnR2910(
			ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasInstancesAttributeValueHasInstances_R2910) {
				for (int i = 0; i < target.backPointer_HasInstancesAttributeValueHasInstances_R2910
						.size(); ++i) {
					AttributeValue_c source = (AttributeValue_c) target.backPointer_HasInstancesAttributeValueHasInstances_R2910
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2910(Attribute_c[] targets) {
		return getManyI_AVLsOnR2910(targets, null);
	}
	public static AttributeValue_c[] getManyI_AVLsOnR2910(
			Attribute_c[] targets, boolean loadComponent) {
		return getManyI_AVLsOnR2910(targets, null, loadComponent);
	}
	public static AttributeValue_c[] getManyI_AVLsOnR2910(
			Attribute_c[] targets, ClassQueryInterface_c test) {
		return getManyI_AVLsOnR2910(targets, test, true);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2910(
			Attribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AttributeValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasInstancesAttributeValueHasInstances_R2910) {
				for (int j = 0; j < targets[i].backPointer_HasInstancesAttributeValueHasInstances_R2910
						.size(); ++j) {
					AttributeValue_c source = (AttributeValue_c) targets[i].backPointer_HasInstancesAttributeValueHasInstances_R2910
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AttributeValue_c[] ret_set = new AttributeValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AttributeValue_c[0];
		}
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2910(Attribute_c target) {
		return getManyI_AVLsOnR2910(target, null);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2910(Attribute_c target,
			boolean loadComponent) {
		return getManyI_AVLsOnR2910(target, null, loadComponent);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2910(Attribute_c target,
			ClassQueryInterface_c test) {
		return getManyI_AVLsOnR2910(target, test, true);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2910(Attribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new AttributeValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasInstancesAttributeValueHasInstances_R2910) {
			for (int i = 0; i < target.backPointer_HasInstancesAttributeValueHasInstances_R2910
					.size(); ++i) {
				AttributeValue_c source = (AttributeValue_c) target.backPointer_HasInstancesAttributeValueHasInstances_R2910
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AttributeValue_c[] ret_set = new AttributeValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AttributeValue_c[0];
		}
	}

	// referring navigation

	Instance_c DefinesValueForCharacteristicOfInstance;
	public void relateAcrossR2909To(Instance_c target) {
		relateAcrossR2909To(target, true);
	}
	public void relateAcrossR2909To(Instance_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == DefinesValueForCharacteristicOfInstance)
			return; // already related

		if (DefinesValueForCharacteristicOfInstance != target) {

			Object oldKey = getInstanceKey();

			if (DefinesValueForCharacteristicOfInstance != null) {

				DefinesValueForCharacteristicOfInstance
						.clearBackPointerR2909To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AttributeValue_c.relateAcrossR2909To(Instance_c target)",
									"Relate performed across R2909 from Attribute Value to Instance without unrelate of prior instance.");
				}
			}

			DefinesValueForCharacteristicOfInstance = target;
			m_inst_id = target.getInst_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2909To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2909", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2909From(Instance_c target) {
		unrelateAcrossR2909From(target, true);
	}
	public void unrelateAcrossR2909From(Instance_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (DefinesValueForCharacteristicOfInstance == null)
			return; // already unrelated

		if (target != DefinesValueForCharacteristicOfInstance) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2909",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2909To(this);
		}

		if (DefinesValueForCharacteristicOfInstance != null) {

			m_inst_id = DefinesValueForCharacteristicOfInstance.getInst_id();
			DefinesValueForCharacteristicOfInstance = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2909", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AttributeValue_c getOneI_AVLOnR2909(Instance_c[] targets) {
		return getOneI_AVLOnR2909(targets, null);
	}

	public static AttributeValue_c getOneI_AVLOnR2909(Instance_c[] targets,
			ClassQueryInterface_c test) {
		AttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_AVLOnR2909(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AttributeValue_c getOneI_AVLOnR2909(Instance_c target) {
		return getOneI_AVLOnR2909(target, null);
	}

	public static AttributeValue_c getOneI_AVLOnR2909(Instance_c target,
			boolean loadComponent) {
		return getOneI_AVLOnR2909(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AttributeValue_c getOneI_AVLOnR2909(Instance_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_AVLOnR2909(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AttributeValue_c getOneI_AVLOnR2909(ModelRoot modelRoot,
			Instance_c target, ClassQueryInterface_c test) {
		return getOneI_AVLOnR2909(modelRoot, target, test, true);
	}

	public static AttributeValue_c getOneI_AVLOnR2909(ModelRoot modelRoot,
			Instance_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneI_AVLOnR2909(modelRoot, target, test);
	}
	private static AttributeValue_c find_getOneI_AVLOnR2909(
			ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909) {
				for (int i = 0; i < target.backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909
						.size(); ++i) {
					AttributeValue_c source = (AttributeValue_c) target.backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c[] targets) {
		return getManyI_AVLsOnR2909(targets, null);
	}
	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c[] targets,
			boolean loadComponent) {
		return getManyI_AVLsOnR2909(targets, null, loadComponent);
	}
	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_AVLsOnR2909(targets, test, true);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AttributeValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909) {
				for (int j = 0; j < targets[i].backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909
						.size(); ++j) {
					AttributeValue_c source = (AttributeValue_c) targets[i].backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AttributeValue_c[] ret_set = new AttributeValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AttributeValue_c[0];
		}
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c target) {
		return getManyI_AVLsOnR2909(target, null);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c target,
			boolean loadComponent) {
		return getManyI_AVLsOnR2909(target, null, loadComponent);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c target,
			ClassQueryInterface_c test) {
		return getManyI_AVLsOnR2909(target, test, true);
	}

	public static AttributeValue_c[] getManyI_AVLsOnR2909(Instance_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new AttributeValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909) {
			for (int i = 0; i < target.backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909
					.size(); ++i) {
				AttributeValue_c source = (AttributeValue_c) target.backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AttributeValue_c[] ret_set = new AttributeValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AttributeValue_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (IsInstanceOfAttribute == null) {
			// R2910
			Attribute_c relInst40924 = (Attribute_c) baseRoot.getInstanceList(
					Attribute_c.class).get(new Object[]{m_attr_id, m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40924 == null) {
				relInst40924 = (Attribute_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Attribute_c.class)
						.get(new Object[]{m_attr_id, m_obj_id});
			}
			if (relInst40924 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40924 = (Attribute_c) roots[i].getInstanceList(
							Attribute_c.class).get(
							new Object[]{m_attr_id, m_obj_id});
					if (relInst40924 != null)
						break;
				}
			}
			//synchronized
			if (relInst40924 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40924) && !isProxy())) {
					relInst40924.relateAcrossR2910To(this, notifyChanges);
				}
			}
		}

		if (DefinesValueForCharacteristicOfInstance == null) {
			// R2909
			Instance_c relInst40925 = (Instance_c) baseRoot.getInstanceList(
					Instance_c.class).get(new Object[]{m_inst_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40925 == null) {
				relInst40925 = (Instance_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Instance_c.class)
						.get(new Object[]{m_inst_id});
			}
			if (relInst40925 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40925 = (Instance_c) roots[i].getInstanceList(
							Instance_c.class).get(new Object[]{m_inst_id});
					if (relInst40925 != null)
						break;
				}
			}
			//synchronized
			if (relInst40925 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40925) && !isProxy())) {
					relInst40925.relateAcrossR2909To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R2910
		// O_ATTR
		inst = IsInstanceOfAttribute;
		unrelateAcrossR2910From(IsInstanceOfAttribute, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2909
		// I_INS
		inst = DefinesValueForCharacteristicOfInstance;
		unrelateAcrossR2909From(DefinesValueForCharacteristicOfInstance,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(AttributeValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final AttributeValue_c inst = (AttributeValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static AttributeValue_c AttributeValueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		AttributeValue_c result = findAttributeValueInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static AttributeValue_c findAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AttributeValue_c x = (AttributeValue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static AttributeValue_c AttributeValueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return AttributeValueInstance(modelRoot, test, true);
	}

	public static AttributeValue_c AttributeValueInstance(ModelRoot modelRoot) {
		return AttributeValueInstance(modelRoot, null, true);
	}

	public static AttributeValue_c[] AttributeValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AttributeValue_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AttributeValue_c x = (AttributeValue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				AttributeValue_c[] ret_set = new AttributeValue_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new AttributeValue_c[0];
			}
		}
	}
	public static AttributeValue_c[] AttributeValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AttributeValueInstances(modelRoot, test, true);
	}
	public static AttributeValue_c[] AttributeValueInstances(ModelRoot modelRoot) {
		return AttributeValueInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Attribute Value.dispose call: ";
		Attribute_c testR2910Inst = Attribute_c
				.getOneO_ATTROnR2910(this, false);

		if (testR2910Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2910 ";
		}
		Instance_c testR2909Inst = Instance_c.getOneI_INSOnR2909(this, false);

		if (testR2909Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2909 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Attribute Value",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("inst_id")) {
			return true;
		}
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public String getValue() {
		ModelRoot modelRoot = getModelRoot();
		StructuredDataType_c v_sdt = StructuredDataType_c
				.getOneS_SDTOnR17(DataType_c.getOneS_DTOnR114(Attribute_c
						.getOneO_ATTROnR2910(this)));

		if (((v_sdt == null))) {

			return Gd_c.Instance_to_string(Getvalue());

		}

		else {

			DataType_c v_dt = DataType_c.getOneS_DTOnR17(v_sdt);

			return v_dt.getName();

		}

	}

	public long getInst_idLongBased() {
		if (DefinesValueForCharacteristicOfInstance != null) {
			return DefinesValueForCharacteristicOfInstance
					.getInst_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getInst_id() {
		if (DefinesValueForCharacteristicOfInstance != null) {
			return DefinesValueForCharacteristicOfInstance.getInst_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getInst_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_inst_id))
			return m_inst_id;
		else
			return getInst_id();
	}

	public void setInst_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_inst_id)) {
				return;
			}
		} else if (m_inst_id != null) {
			if (m_inst_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Inst_id", m_inst_id, newValue, false);
		m_inst_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getAttr_idLongBased() {
		if (IsInstanceOfAttribute != null) {
			return IsInstanceOfAttribute.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (IsInstanceOfAttribute != null) {
			return IsInstanceOfAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_attr_id)) {
				return;
			}
		} else if (m_attr_id != null) {
			if (m_attr_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Attr_id", m_attr_id, newValue, false);
		m_attr_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getLabel() {
		ModelRoot modelRoot = getModelRoot();
		return "";

	}

	public long getObj_idLongBased() {
		if (IsInstanceOfAttribute != null) {
			return IsInstanceOfAttribute.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (IsInstanceOfAttribute != null) {
			return IsInstanceOfAttribute.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, false);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value", //$NON-NLS-1$
				" Operation entered: Attribute Value::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		AttributeValue_c[] objs = AttributeValue_c.AttributeValueInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value", //$NON-NLS-1$
				" Operation entered: Attribute Value::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class AttributeValue_c_test40927_c implements ClassQueryInterface_c {
			AttributeValue_c_test40927_c(java.util.UUID p40928,
					java.util.UUID p40929) {
				m_p40928 = p40928;
				m_p40929 = p40929;
			}
			private java.util.UUID m_p40928;
			private java.util.UUID m_p40929;
			public boolean evaluate(Object candidate) {
				AttributeValue_c selected = (AttributeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getInst_id().equals(m_p40928))
						& (selected.getAttr_id().equals(m_p40929));
				return retval;
			}
		}

		AttributeValue_c[] objs40926 = AttributeValue_c
				.AttributeValueInstances(modelRoot,
						new AttributeValue_c_test40927_c(getInst_id(),
								getAttr_id()));

		if (((objs40926.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Attribute Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40926.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Attribute Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40926.length), e);
			}
			retval = false;

		}

		if (((objs40926.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Attribute Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40926.length)
										+ " Inst_ID: " + "Not Printable" + " Attr_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Attribute Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40926.length)
										+ " Inst_ID: " + "Not Printable" + " Attr_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Attribute Value is a referring class in association: rel.Numb = 2909
		// The participating class is: Instance
		class Instance_c_test40933_c implements ClassQueryInterface_c {
			Instance_c_test40933_c(java.util.UUID p40934) {
				m_p40934 = p40934;
			}
			private java.util.UUID m_p40934;
			public boolean evaluate(Object candidate) {
				Instance_c selected = (Instance_c) candidate;
				boolean retval = false;
				retval = (selected.getInst_id().equals(m_p40934));
				return retval;
			}
		}

		Instance_c[] objs40932 = Instance_c.InstanceInstances(modelRoot,
				new Instance_c_test40933_c(getInst_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40932.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Attribute Value: Association: 2909: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40932.length)
										+ " Inst_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Attribute Value: Association: 2909: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40932.length)
										+ " Inst_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Attribute Value is a referring class in association: rel.Numb = 2910
		// The participating class is: Attribute
		class Attribute_c_test40936_c implements ClassQueryInterface_c {
			Attribute_c_test40936_c(java.util.UUID p40937, java.util.UUID p40938) {
				m_p40937 = p40937;
				m_p40938 = p40938;
			}
			private java.util.UUID m_p40937;
			private java.util.UUID m_p40938;
			public boolean evaluate(Object candidate) {
				Attribute_c selected = (Attribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p40937))
						& (selected.getObj_id().equals(m_p40938));
				return retval;
			}
		}

		Attribute_c[] objs40935 = Attribute_c.AttributeInstances(modelRoot,
				new Attribute_c_test40936_c(getAttr_id(), getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40935.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Attribute Value: Association: 2910: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40935.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Attribute Value: Association: 2910: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40935.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Setboolean(final boolean p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Setboolean");
		final ModelRoot modelRoot = getModelRoot();

	} // End setBoolean
	public void Setinteger(final int p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Setinteger");
		final ModelRoot modelRoot = getModelRoot();

	} // End setInteger
	public void Setstring(final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Setstring");
		final ModelRoot modelRoot = getModelRoot();

	} // End setString
	public void Setreal(final float p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Setreal");
		final ModelRoot modelRoot = getModelRoot();

	} // End setReal
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Dispose");
		final ModelRoot modelRoot = getModelRoot();

	} // End dispose
	public void Setunique_id(final java.util.UUID p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Setunique_id");
		final ModelRoot modelRoot = getModelRoot();

	} // End setUnique_ID
	public Object Getvalue() {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_instance();

	} // End getValue
	public java.util.UUID Getruntimevalue() {
		Ooaofooa.log.println(ILogger.OPERATION, "Attribute Value",
				" Operation entered: AttributeValue::Getruntimevalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_unique_id();

	} // End getRuntimeValue

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Attribute Value
