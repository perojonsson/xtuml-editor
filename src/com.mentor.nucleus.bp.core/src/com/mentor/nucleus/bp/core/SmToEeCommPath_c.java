      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToEeCommPath_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SM_TO_EE_COMM_PATH extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SmToEeCommPath_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SmToEeCommPath_c(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_ee_id,
       java.util.UUID         p_m_eemod_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_eemod_id = IdAssigner.preprocessUUID(p_m_eemod_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
    Object [] key = {m_cpath_id};
    addInstanceToMap(key);
  }
  static public SmToEeCommPath_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_ee_id,
       java.util.UUID         p_m_eemod_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);
      SmToEeCommPath_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_cpath_id};
          new_inst = (SmToEeCommPath_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_eemod_id = IdAssigner.preprocessUUID(p_m_eemod_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SmToEeCommPath_c(modelRoot,
p_m_cpath_id,
p_m_sm_id,
p_m_ee_id,
p_m_eemod_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SmToEeCommPath_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_ee_id,
       java.util.UUID         p_m_eemod_id){
    InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);
    SmToEeCommPath_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_cpath_id
            };
        source = (SmToEeCommPath_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_eemod_id = IdAssigner.preprocessUUID(p_m_eemod_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SmToEeCommPath_c new_inst = new SmToEeCommPath_c(modelRoot,
p_m_cpath_id,
p_m_sm_id,
p_m_ee_id,
p_m_eemod_id
);
    return new_inst;
  }
  public SmToEeCommPath_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_cpath_id = IdAssigner.NULL_UUID;   
     m_sm_id = IdAssigner.NULL_UUID;   
     m_eemod_id = IdAssigner.NULL_UUID;   
     m_ee_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_cpath_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_cpath_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_cpath_id !=  p_newKey ){
	
		m_cpath_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SmToEeCommPath_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SmToEeCommPath_c)) {
           return false;
       }
       
       SmToEeCommPath_c me = (SmToEeCommPath_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getCpath_id()) || IdAssigner.NULL_UUID.equals(((SmToEeCommPath_c)elem).getCpath_id())) && this != elem)) {
      	return false;
      }
      if (!getCpath_id().equals(((SmToEeCommPath_c)elem).getCpath_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SmToEeCommPath_c)) {
           return false;
       }
       
       SmToEeCommPath_c me = (SmToEeCommPath_c)elem;
      if (!getCpath_idCachedValue().equals(((SmToEeCommPath_c)elem).getCpath_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_cpath_id ;
  private java.util.UUID         m_sm_id ;
  private java.util.UUID         m_eemod_id ;
  private java.util.UUID         m_ee_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ExternalEntityInModel_c ShowsEventCommunicationToExternalEntityInModel ;
public void relateAcrossR411To(ExternalEntityInModel_c target)
{
	relateAcrossR411To(target, true);
}
public void relateAcrossR411To(ExternalEntityInModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ShowsEventCommunicationToExternalEntityInModel) return;  // already related

    if ( ShowsEventCommunicationToExternalEntityInModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (ShowsEventCommunicationToExternalEntityInModel != null) {
    
        ShowsEventCommunicationToExternalEntityInModel.clearBackPointerR411To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToEeCommPath_c.relateAcrossR411To(ExternalEntityInModel_c target)", 
			"Relate performed across R411 from SM to EE Comm Path to External Entity in Model without unrelate of prior instance.");  
		}
    }
                
    	ShowsEventCommunicationToExternalEntityInModel = target ;
        m_eemod_id = target.getEemod_id();
        if(IdAssigner.NULL_UUID.equals(target.getEe_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_ee_id = target.getEe_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR411To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "411", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR411From(ExternalEntityInModel_c target)
{
	unrelateAcrossR411From(target, true);
}
public void unrelateAcrossR411From(ExternalEntityInModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ShowsEventCommunicationToExternalEntityInModel == null) return;  // already unrelated
	
	if (target != ShowsEventCommunicationToExternalEntityInModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R411", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR411To(this);
    }
    

      if(ShowsEventCommunicationToExternalEntityInModel != null) {
      
        m_eemod_id = ShowsEventCommunicationToExternalEntityInModel.getEemod_id();
        m_ee_id = ShowsEventCommunicationToExternalEntityInModel.getEe_id();
        if(IdAssigner.NULL_UUID.equals(m_ee_id))
        {
          m_ee_id = ShowsEventCommunicationToExternalEntityInModel.getEe_idCachedValue();
        }       
        ShowsEventCommunicationToExternalEntityInModel = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "411", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToEeCommPath_c getOneCA_SMEECOnR411(ExternalEntityInModel_c [] targets)
{
    return getOneCA_SMEECOnR411(targets, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR411(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test)
{
    SmToEeCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMEECOnR411(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR411(ExternalEntityInModel_c target)
{
  return getOneCA_SMEECOnR411(target, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR411(ExternalEntityInModel_c target, boolean loadComponent)
{
    return getOneCA_SMEECOnR411(target.getModelRoot(), target, null, loadComponent);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR411(ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMEECOnR411(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR411(ModelRoot modelRoot, ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMEECOnR411(modelRoot, target, test, true);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR411(ModelRoot modelRoot, ExternalEntityInModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMEECOnR411(modelRoot,target,test);
}
private static SmToEeCommPath_c find_getOneCA_SMEECOnR411(ModelRoot modelRoot, ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411) {
	    for ( int i = 0; i < target.backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411.size(); ++i ) {
	      SmToEeCommPath_c source = (SmToEeCommPath_c)target.backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c [] targets)
{
  return getManyCA_SMEECsOnR411(targets, null);
}
public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c [] targets, boolean loadComponent)
{
  return getManyCA_SMEECsOnR411(targets, null, loadComponent);
}
public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMEECsOnR411(targets, test, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToEeCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411) {
	    for (int j = 0; j < targets[i].backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411.size(); ++j) {
	      SmToEeCommPath_c source = (SmToEeCommPath_c)targets[i].backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToEeCommPath_c[] ret_set = new SmToEeCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToEeCommPath_c[0];
  }
  }

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c target)
{
  return getManyCA_SMEECsOnR411(target, null);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c target, boolean loadComponent)
{
  return getManyCA_SMEECsOnR411(target, null, loadComponent);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMEECsOnR411(target, test, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR411(ExternalEntityInModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToEeCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411) {
    for (int i = 0; i < target.backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411.size(); ++i) {
      SmToEeCommPath_c source = (SmToEeCommPath_c)target.backPointer_HasReceivedEventCommunicationRepresentedBySmToEeCommPathHasReceivedEventCommunicationRepresentedBy_R411.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToEeCommPath_c[] ret_set = new SmToEeCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToEeCommPath_c[0];
	}
  }


  
    
// referring navigation

CommunicationPath_c IsSupertypeCommunicationPath ;
public void relateAcrossR401To(CommunicationPath_c target)
{
	relateAcrossR401To(target, true);
}
public void relateAcrossR401To(CommunicationPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeCommunicationPath) return;  // already related

    if ( IsSupertypeCommunicationPath != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeCommunicationPath != null) {
    
        IsSupertypeCommunicationPath.clearBackPointerR401To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToEeCommPath_c.relateAcrossR401To(CommunicationPath_c target)", 
			"Relate performed across R401 from SM to EE Comm Path to Communication Path without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeCommunicationPath = target ;
        m_cpath_id = target.getCpath_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR401To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "401", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR401From(CommunicationPath_c target)
{
	unrelateAcrossR401From(target, true);
}
public void unrelateAcrossR401From(CommunicationPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeCommunicationPath == null) return;  // already unrelated
	
	if (target != IsSupertypeCommunicationPath) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R401", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR401To(this);
    }
    

      if(IsSupertypeCommunicationPath != null) {
      
        m_cpath_id = IsSupertypeCommunicationPath.getCpath_id();
        IsSupertypeCommunicationPath = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "401", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToEeCommPath_c getOneCA_SMEECOnR401(CommunicationPath_c [] targets)
{
    return getOneCA_SMEECOnR401(targets, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
    SmToEeCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMEECOnR401(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR401(CommunicationPath_c target)
{
  return getOneCA_SMEECOnR401(target, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR401(CommunicationPath_c target, boolean loadComponent)
{
    return getOneCA_SMEECOnR401(target.getModelRoot(), target, null, loadComponent);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR401(CommunicationPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMEECOnR401(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMEECOnR401(modelRoot, target, test, true);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMEECOnR401(modelRoot,target,test);
}
private static SmToEeCommPath_c find_getOneCA_SMEECOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SmToEeCommPath_c source = (SmToEeCommPath_c)target.backPointer_IsSubtypeSmToEeCommPathIsSubtype_R401;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR401(CommunicationPath_c [] targets)
{
  return getManyCA_SMEECsOnR401(targets, null);
}
public static SmToEeCommPath_c [] getManyCA_SMEECsOnR401(CommunicationPath_c [] targets, boolean loadComponent)
{
  return getManyCA_SMEECsOnR401(targets, null, loadComponent);
}
public static SmToEeCommPath_c [] getManyCA_SMEECsOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMEECsOnR401(targets, test, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToEeCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SmToEeCommPath_c source = (SmToEeCommPath_c)targets[i].backPointer_IsSubtypeSmToEeCommPathIsSubtype_R401;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SmToEeCommPath_c[] ret_set = new SmToEeCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToEeCommPath_c[0];
  }
  }

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR401(CommunicationPath_c target)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyCA_SMEECsOnR401(targetArray);
  } else {
    SmToEeCommPath_c [] result = new SmToEeCommPath_c [0] ;
  return result ;
}
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR401(CommunicationPath_c target, boolean loadComponent)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyCA_SMEECsOnR401(targetArray, loadComponent);
  } else {
    SmToEeCommPath_c [] result = new SmToEeCommPath_c [0] ;
  return result ;
}
}



  
    
// referring navigation

StateMachine_c OriginatesFromStateMachine ;
public void relateAcrossR410To(StateMachine_c target)
{
	relateAcrossR410To(target, true);
}
public void relateAcrossR410To(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == OriginatesFromStateMachine) return;  // already related

    if ( OriginatesFromStateMachine != target ) {
    
    Object oldKey = getInstanceKey();

    if (OriginatesFromStateMachine != null) {
    
        OriginatesFromStateMachine.clearBackPointerR410To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToEeCommPath_c.relateAcrossR410To(StateMachine_c target)", 
			"Relate performed across R410 from SM to EE Comm Path to State Machine without unrelate of prior instance.");  
		}
    }
                
    	OriginatesFromStateMachine = target ;
        m_sm_id = target.getSm_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR410To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "410", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR410From(StateMachine_c target)
{
	unrelateAcrossR410From(target, true);
}
public void unrelateAcrossR410From(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (OriginatesFromStateMachine == null) return;  // already unrelated
	
	if (target != OriginatesFromStateMachine) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R410", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR410To(this);
    }
    

      if(OriginatesFromStateMachine != null) {
      
        m_sm_id = OriginatesFromStateMachine.getSm_id();
        OriginatesFromStateMachine = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "410", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToEeCommPath_c getOneCA_SMEECOnR410(StateMachine_c [] targets)
{
    return getOneCA_SMEECOnR410(targets, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR410(StateMachine_c [] targets, ClassQueryInterface_c test)
{
    SmToEeCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMEECOnR410(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR410(StateMachine_c target)
{
  return getOneCA_SMEECOnR410(target, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR410(StateMachine_c target, boolean loadComponent)
{
    return getOneCA_SMEECOnR410(target.getModelRoot(), target, null, loadComponent);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR410(StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMEECOnR410(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR410(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMEECOnR410(modelRoot, target, test, true);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR410(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMEECOnR410(modelRoot,target,test);
}
private static SmToEeCommPath_c find_getOneCA_SMEECOnR410(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_OriginatesSmToEeCommPathOriginates_R410) {
	    for ( int i = 0; i < target.backPointer_OriginatesSmToEeCommPathOriginates_R410.size(); ++i ) {
	      SmToEeCommPath_c source = (SmToEeCommPath_c)target.backPointer_OriginatesSmToEeCommPathOriginates_R410.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c [] targets)
{
  return getManyCA_SMEECsOnR410(targets, null);
}
public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c [] targets, boolean loadComponent)
{
  return getManyCA_SMEECsOnR410(targets, null, loadComponent);
}
public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMEECsOnR410(targets, test, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToEeCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_OriginatesSmToEeCommPathOriginates_R410) {
	    for (int j = 0; j < targets[i].backPointer_OriginatesSmToEeCommPathOriginates_R410.size(); ++j) {
	      SmToEeCommPath_c source = (SmToEeCommPath_c)targets[i].backPointer_OriginatesSmToEeCommPathOriginates_R410.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToEeCommPath_c[] ret_set = new SmToEeCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToEeCommPath_c[0];
  }
  }

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c target)
{
  return getManyCA_SMEECsOnR410(target, null);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c target, boolean loadComponent)
{
  return getManyCA_SMEECsOnR410(target, null, loadComponent);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMEECsOnR410(target, test, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR410(StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToEeCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_OriginatesSmToEeCommPathOriginates_R410) {
    for (int i = 0; i < target.backPointer_OriginatesSmToEeCommPathOriginates_R410.size(); ++i) {
      SmToEeCommPath_c source = (SmToEeCommPath_c)target.backPointer_OriginatesSmToEeCommPathOriginates_R410.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToEeCommPath_c[] ret_set = new SmToEeCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToEeCommPath_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SmToEeEventComm_c> backPointer_CarriesSmToEeEventCommCarries_R412 = new ArrayList<SmToEeEventComm_c>();

public void setSmToEeEventCommOrderInChildListR412(SmToEeEventComm_c target, int index) {
	unrelateAcrossR412From(target);
	SmToEeEventComm_c[] elements = SmToEeEventComm_c.getManyCA_SMEEEsOnR412(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR412From((SmToEeEventComm_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR412To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR412To((SmToEeEventComm_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR412To(SmToEeEventComm_c target)
{
  if (target != null) {
    target.relateAcrossR412To(this, true) ;
  }
}

public void relateAcrossR412To(SmToEeEventComm_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR412To(this, notifyChanges) ;
  }
}

public void setBackPointerR412To(SmToEeEventComm_c target)
{
  	synchronized (backPointer_CarriesSmToEeEventCommCarries_R412) {
		backPointer_CarriesSmToEeEventCommCarries_R412.add(target);
	}
}

public void unrelateAcrossR412From(SmToEeEventComm_c target)
{
  if (target != null) {
    target.unrelateAcrossR412From(this, true) ;
  }
}

public void unrelateAcrossR412From(SmToEeEventComm_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR412From(this, notifyChanges) ;
  }
}

public void clearBackPointerR412To(SmToEeEventComm_c target)
{
  synchronized (backPointer_CarriesSmToEeEventCommCarries_R412) {
	    backPointer_CarriesSmToEeEventCommCarries_R412.remove(target);
	}
}

public static SmToEeCommPath_c getOneCA_SMEECOnR412(SmToEeEventComm_c [] targets)
{
    return getOneCA_SMEECOnR412(targets, null);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR412(SmToEeEventComm_c [] targets, ClassQueryInterface_c test)
{
    return getOneCA_SMEECOnR412(targets, test, true);
}

public static SmToEeCommPath_c getOneCA_SMEECOnR412(SmToEeEventComm_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SmToEeCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SmToEeCommPath_c candidate_val = getOneCA_SMEECOnR412(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCA_SMEECOnR412(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SmToEeCommPath_c getOneCA_SMEECOnR412(SmToEeEventComm_c target)
{
	return getOneCA_SMEECOnR412(target, true);
}
public static SmToEeCommPath_c getOneCA_SMEECOnR412(SmToEeEventComm_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsCarriedBySmToEeCommPath ;
  } else {
    return null;
  }
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCA_SMEECsOnR412(targets, test, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SmToEeCommPath_c[0];
  
  
  LinkedHashSet<SmToEeCommPath_c> elementsSet = new LinkedHashSet<SmToEeCommPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsCarriedBySmToEeCommPath == null)
	  targets[i].loadProxy();
    SmToEeCommPath_c associate = targets[i].IsCarriedBySmToEeCommPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SmToEeCommPath_c[] result = new SmToEeCommPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c [] targets)
{
  return getManyCA_SMEECsOnR412(targets, null);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToEeEventComm_c [] targetArray = new SmToEeEventComm_c[1];
    targetArray[0] = target;
    return getManyCA_SMEECsOnR412(targetArray, test, loadComponent);
  } else {
    SmToEeCommPath_c [] result = new SmToEeCommPath_c [0] ;
    return result ;
  }
  
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c target,
    ClassQueryInterface_c test)
{
    return getManyCA_SMEECsOnR412(target, null, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c target)
{
    return getManyCA_SMEECsOnR412(target, null, true);
}

public static SmToEeCommPath_c [] getManyCA_SMEECsOnR412(SmToEeEventComm_c target, boolean loadComponent)
{
    return getManyCA_SMEECsOnR412(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ShowsEventCommunicationToExternalEntityInModel == null) {          
      // R411
      ExternalEntityInModel_c relInst57426 = (ExternalEntityInModel_c) baseRoot.getInstanceList(ExternalEntityInModel_c.class).get(new Object[] {m_eemod_id,m_ee_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57426 == null) {
      			relInst57426 = (ExternalEntityInModel_c) Ooaofooa.getDefaultInstance().getInstanceList(ExternalEntityInModel_c.class).get(new Object[] {m_eemod_id,m_ee_id});
      		}
			if (relInst57426 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57426 = (ExternalEntityInModel_c) roots[i].getInstanceList(ExternalEntityInModel_c.class).get(new Object[] {m_eemod_id,m_ee_id});
					if (relInst57426 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57426 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57426) && !isProxy())) {
	      relInst57426.relateAcrossR411To(this, notifyChanges);
	  }
	  }
	}
	          

      // R401
      CommunicationPath_c relInst57427 = (CommunicationPath_c) baseRoot.getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57427 == null) {
      			relInst57427 = (CommunicationPath_c) Ooaofooa.getDefaultInstance().getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
      		}
			if (relInst57427 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57427 = (CommunicationPath_c) roots[i].getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
					if (relInst57427 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57427 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57427) && !isProxy())) {
	      relInst57427.relateAcrossR401To(this, notifyChanges);
	  }
	  }
	          

	if (OriginatesFromStateMachine == null) {          
      // R410
      StateMachine_c relInst57428 = (StateMachine_c) baseRoot.getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57428 == null) {
      			relInst57428 = (StateMachine_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
      		}
			if (relInst57428 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57428 = (StateMachine_c) roots[i].getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
					if (relInst57428 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57428 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57428) && !isProxy())) {
	      relInst57428.relateAcrossR410To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R411
      // S_EEM
		  inst=ShowsEventCommunicationToExternalEntityInModel;
			unrelateAcrossR411From(ShowsEventCommunicationToExternalEntityInModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R401
      // CA_COMM
		  inst=IsSupertypeCommunicationPath;
			unrelateAcrossR401From(IsSupertypeCommunicationPath, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R410
      // SM_SM
		  inst=OriginatesFromStateMachine;
			unrelateAcrossR410From(OriginatesFromStateMachine, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToEeCommPath_c inst = (SmToEeCommPath_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SmToEeCommPath_c SmToEeCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SmToEeCommPath_c result=findSmToEeCommPathInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,SmToEeCommPath_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSmToEeCommPathInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static SmToEeCommPath_c findSmToEeCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SmToEeCommPath_c x = (SmToEeCommPath_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static SmToEeCommPath_c SmToEeCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SmToEeCommPathInstance(modelRoot,test,true);
  }
  
  public static SmToEeCommPath_c SmToEeCommPathInstance(ModelRoot modelRoot)
  {
	 return SmToEeCommPathInstance(modelRoot,null,true);
  }

  public static SmToEeCommPath_c [] SmToEeCommPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, SmToEeCommPath_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(SmToEeCommPath_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SmToEeCommPath_c x = (SmToEeCommPath_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SmToEeCommPath_c[] ret_set = new SmToEeCommPath_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToEeCommPath_c[0];
			}		
		} 
  }
  public static SmToEeCommPath_c [] SmToEeCommPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SmToEeCommPathInstances(modelRoot,test,true);
  }
  public static SmToEeCommPath_c [] SmToEeCommPathInstances(ModelRoot modelRoot)
  {
	return SmToEeCommPathInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the SM to EE Comm Path.dispose call: ";
	ExternalEntityInModel_c testR411Inst = ExternalEntityInModel_c.getOneS_EEMOnR411(this, false);

	if ( testR411Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "411 ";
	}
	CommunicationPath_c testR401Inst3 = CommunicationPath_c.getOneCA_COMMOnR401(this, false);

	if ( testR401Inst3 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "401 ";
	}
	SmToEeEventComm_c testR412Inst = SmToEeEventComm_c.getOneCA_SMEEEOnR412(this, false);

	if ( testR412Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "412 ";	
	}
	StateMachine_c testR410Inst = StateMachine_c.getOneSM_SMOnR410(this, false);

	if ( testR410Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "410 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "SM to EE Comm Path", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("cpath_id")){
         return true;
      }
      if(attributeName.equals("sm_id")){
         return true;
      }
      if(attributeName.equals("eemod_id")){
         return true;
      }
      if(attributeName.equals("ee_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getCpath_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getCpath_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getCpath_idLongBased()
  {
    if ( IsSupertypeCommunicationPath != null )
    {
      return IsSupertypeCommunicationPath.getCpath_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getCpath_id()
  {
    if ( IsSupertypeCommunicationPath != null )
    {
      return IsSupertypeCommunicationPath.getCpath_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeCommunicationPath != null );
 
 }                  

  public java.util.UUID getCpath_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_cpath_id) )
      return m_cpath_id;
    else
      return getCpath_id();
  }
  
  public void setCpath_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_cpath_id)){
	        return;
	    }
	}else if(m_cpath_id != null){
	    if(m_cpath_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Cpath_id", m_cpath_id, newValue,true); 
   m_cpath_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSm_idLongBased()
  {
    if ( OriginatesFromStateMachine != null )
    {
      return OriginatesFromStateMachine.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSm_id()
  {
    if ( OriginatesFromStateMachine != null )
    {
      return OriginatesFromStateMachine.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sm_id) )
      return m_sm_id;
    else
      return getSm_id();
  }
  
  public void setSm_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_sm_id)){
	        return;
	    }
	}else if(m_sm_id != null){
	    if(m_sm_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id", m_sm_id, newValue,true); 
   m_sm_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEemod_idLongBased()
  {
    if ( ShowsEventCommunicationToExternalEntityInModel != null )
    {
      return ShowsEventCommunicationToExternalEntityInModel.getEemod_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEemod_id()
  {
    if ( ShowsEventCommunicationToExternalEntityInModel != null )
    {
      return ShowsEventCommunicationToExternalEntityInModel.getEemod_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEemod_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_eemod_id) )
      return m_eemod_id;
    else
      return getEemod_id();
  }
  
  public void setEemod_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_eemod_id)){
	        return;
	    }
	}else if(m_eemod_id != null){
	    if(m_eemod_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Eemod_id", m_eemod_id, newValue,true); 
   m_eemod_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEe_idLongBased()
  {
    if ( ShowsEventCommunicationToExternalEntityInModel != null )
    {
      return ShowsEventCommunicationToExternalEntityInModel.getEe_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEe_id()
  {
    if ( ShowsEventCommunicationToExternalEntityInModel != null )
    {
      return ShowsEventCommunicationToExternalEntityInModel.getEe_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEe_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_ee_id) )
      return m_ee_id;
    else
      return getEe_id();
  }
  
  public void setEe_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_ee_id)){
	        return;
	    }
	}else if(m_ee_id != null){
	    if(m_ee_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ee_id", m_ee_id, newValue,true); 
   m_ee_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "SM to EE Comm Path", //$NON-NLS-1$
	  " Operation entered: SM to EE Comm Path::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SmToEeCommPath_c [] objs = SmToEeCommPath_c.SmToEeCommPathInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "SM to EE Comm Path", //$NON-NLS-1$
	  " Operation entered: SM to EE Comm Path::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SmToEeCommPath_c_test57430_c implements ClassQueryInterface_c
    {
	  SmToEeCommPath_c_test57430_c( java.util.UUID            p57431 ) {
	  m_p57431 = p57431;
	  }
	  private java.util.UUID             m_p57431; 
	  public boolean evaluate (Object candidate)
	  {
	      SmToEeCommPath_c selected = (SmToEeCommPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCpath_id().equals(m_p57431));
	      return retval;
	  }
    }

    SmToEeCommPath_c [] objs57429 = 
    SmToEeCommPath_c.SmToEeCommPathInstances(modelRoot, new SmToEeCommPath_c_test57430_c(getCpath_id())) ;

    if ( (  (objs57429.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57429.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57429.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57429.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57429.length )  + " CPath_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57429.length )  + " CPath_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    class SmToEeCommPath_c_test57433_c implements ClassQueryInterface_c
    {
	  SmToEeCommPath_c_test57433_c( java.util.UUID            p57434, java.util.UUID            p57435 ) {
	       m_p57434 = p57434; 
m_p57435 = p57435;
	  }
	  private java.util.UUID             m_p57434; private java.util.UUID             m_p57435; 
	  public boolean evaluate (Object candidate)
	  {
	      SmToEeCommPath_c selected = (SmToEeCommPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p57434)) & (selected.getEe_id().equals(m_p57435));
	      return retval;
	  }
    }

    SmToEeCommPath_c [] objs57432 = 
    SmToEeCommPath_c.SmToEeCommPathInstances(modelRoot, new SmToEeCommPath_c_test57433_c(getSm_id(), getEe_id())) ;

    if ( (  (objs57432.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57432.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57432.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57432.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57432.length )  + " SM_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57432.length )  + " SM_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to EE Comm Path is a subtype in association: rel.Numb = 401
          // The supertype class is: Communication Path
    class CommunicationPath_c_test57438_c implements ClassQueryInterface_c
    {
	  CommunicationPath_c_test57438_c( java.util.UUID            p57439 ) {
	  m_p57439 = p57439;
	  }
	  private java.util.UUID             m_p57439; 
	  public boolean evaluate (Object candidate)
	  {
	      CommunicationPath_c selected = (CommunicationPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCpath_id().equals(m_p57439));
	      return retval;
	  }
    }

    CommunicationPath_c [] objs57437 = 
    CommunicationPath_c.CommunicationPathInstances(modelRoot, new CommunicationPath_c_test57438_c(getCpath_id())) ;

    if ( (  (objs57437.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Association: 401: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57437.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Association: 401: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57437.length )  , e); 
      }
      retval = false;

    }

          // SM to EE Comm Path is a referring class in association: rel.Numb = 410
          // The participating class is: State Machine
    class StateMachine_c_test57441_c implements ClassQueryInterface_c
    {
	  StateMachine_c_test57441_c( java.util.UUID            p57442 ) {
	  m_p57442 = p57442;
	  }
	  private java.util.UUID             m_p57442; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachine_c selected = (StateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p57442));
	      return retval;
	  }
    }

    StateMachine_c [] objs57440 = 
    StateMachine_c.StateMachineInstances(modelRoot, new StateMachine_c_test57441_c(getSm_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57440.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Association: 410: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57440.length )  + " SM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Association: 410: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57440.length )  + " SM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to EE Comm Path is a referring class in association: rel.Numb = 411
          // The participating class is: External Entity in Model
    class ExternalEntityInModel_c_test57444_c implements ClassQueryInterface_c
    {
	  ExternalEntityInModel_c_test57444_c( java.util.UUID            p57445, java.util.UUID            p57446 ) {
	       m_p57445 = p57445; 
m_p57446 = p57446;
	  }
	  private java.util.UUID             m_p57445; private java.util.UUID             m_p57446; 
	  public boolean evaluate (Object candidate)
	  {
	      ExternalEntityInModel_c selected = (ExternalEntityInModel_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEemod_id().equals(m_p57445)) & (selected.getEe_id().equals(m_p57446));
	      return retval;
	  }
    }

    ExternalEntityInModel_c [] objs57443 = 
    ExternalEntityInModel_c.ExternalEntityInModelInstances(modelRoot, new ExternalEntityInModel_c_test57444_c(getEemod_id(), getEe_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57443.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to EE Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to EE Comm Path: Association: 411: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57443.length )  + " EEmod_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to EE Comm Path: Association: 411: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57443.length )  + " EEmod_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to EE Comm Path is a participating class in association: rel.Numb = 412
             // Object: SM to EE Event Comm
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "SM to EE Comm Path", " Operation entered: SmToEeCommPath::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
SmToEeEventComm_c [] v_smeees = SmToEeEventComm_c.getManyCA_SMEEEsOnR412(this);


SmToEeEventComm_c  v_smeee = null;
for ( int i55396 = 0; i55396 < v_smeees.length; i55396++)
{
  v_smeee = v_smeees[i55396] ;

ExternalEntityEvent_c v_eeevt = ExternalEntityEvent_c.getOneS_EEEVTOnR413(v_smeee);


if (v_smeee != null) {
v_smeee.unrelateAcrossR413From(v_eeevt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_smeee != null) {
v_smeee.unrelateAcrossR412From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_smeee != null) {
// get the location of this element in the instance list
// before deleting
if ( v_smeee.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_smeee));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR410(this);


this.unrelateAcrossR410From(v_sm);


ExternalEntityInModel_c v_eem = ExternalEntityInModel_c.getOneS_EEMOnR411(this);


this.unrelateAcrossR411From(v_eem);


CommunicationPath_c v_cp = CommunicationPath_c.getOneCA_COMMOnR401(this);


this.unrelateAcrossR401From(v_cp);


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end SM to EE Comm Path
