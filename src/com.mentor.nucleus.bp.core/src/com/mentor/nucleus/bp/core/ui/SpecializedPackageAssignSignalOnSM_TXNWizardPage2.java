package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    SpecializedPackageAssignSignalOnSM_TXNWizardPage2.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class SpecializedPackageAssignSignalOnSM_TXNWizardPage2
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo SignalCombo;
	public Label SignalLabel;

	// cache for user choices
	InterfaceSignal_c Signal = null;
	InterfaceSignal_c[] SignalInstances;

	/**
	 * Constructors for SpecializedPackageAssignSignalOnSM_TXNWizardPage2.
	 */
	public SpecializedPackageAssignSignalOnSM_TXNWizardPage2() {
		super("");
		init();
	}

	public SpecializedPackageAssignSignalOnSM_TXNWizardPage2(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Assign Signal");
		setDescription("Select signal to assign to transition");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((SpecializedPackageAssignSignalOnSM_TXNWizard) getWizard())
						.getSelection());

		// cache for previous user selections
		InterfaceReference_c v_interface = ((SpecializedPackageAssignSignalOnSM_TXNWizard) getWizard()).v_interface;

		// cache for context
		Transition_c v_txn = ((SpecializedPackageAssignSignalOnSM_TXNWizard) getWizard()).v_txn;

		java.util.UUID v_Trans_ID = v_txn.getTrans_id();

		StateMachine_c v_stateMachine = StateMachine_c.getOneSM_SMOnR505(v_txn);

		ClassStateMachine_c v_classStateMachine = ClassStateMachine_c
				.getOneSM_ASMOnR517(v_stateMachine);

		if ((v_interface != null)) {

			// select related by where USER::selectOne
			InterfaceSignal_c[] v_signalInstances = InterfaceSignal_c
					.getManyC_ASsOnR4004(ExecutableProperty_c
							.getManyC_EPsOnR4003(Interface_c
									.getManyC_IsOnR4012(v_interface)));
			InterfaceSignal_c v_signal = null;
			int signalInstCount;
			int signalResultCount = 0;
			for (signalInstCount = 0; signalInstCount < v_signalInstances.length; signalInstCount++) {
				InterfaceSignal_c selected = v_signalInstances[signalInstCount];
				if (User_c.Selectone(selected.getId())
						&& v_stateMachine.Canassignsignal(v_interface.getId(),
								selected.getId(), v_Trans_ID)) {
					signalResultCount++;
				}
			}
			this.SignalInstances = new InterfaceSignal_c[signalResultCount];
			signalResultCount = 0;
			for (signalInstCount = 0; signalInstCount < v_signalInstances.length; signalInstCount++) {
				InterfaceSignal_c selected = v_signalInstances[signalInstCount];
				if (User_c.Selectone(selected.getId())
						&& v_stateMachine.Canassignsignal(v_interface.getId(),
								selected.getId(), v_Trans_ID)) {
					this.SignalInstances[signalResultCount] = selected;
					signalResultCount++;
				}
			}
			SignalCombo.removeAll();
			for (signalInstCount = 0; signalInstCount < signalResultCount; signalInstCount++)
				SignalCombo
						.add(((InterfaceSignal_c) this.SignalInstances[signalInstCount])
								.getName());
			if (signalResultCount == 1) {
				SignalCombo.select(0);
				updateSelectedSignal();
			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		SignalLabel = new Label(composite, SWT.NONE);
		SignalLabel.setText("Signal");
		SignalCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		SignalCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		SignalCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedSignal() {
		this.Signal = SignalInstances[SignalCombo.getSelectionIndex()];
		((SpecializedPackageAssignSignalOnSM_TXNWizard) getWizard()).v_signal = this.Signal;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == SignalCombo) {
			updateSelectedSignal();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Signal == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((SpecializedPackageAssignSignalOnSM_TXNWizard) getWizard()).v_signal = Signal;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Signal == null)
			return false;
		return true;
	}

}
