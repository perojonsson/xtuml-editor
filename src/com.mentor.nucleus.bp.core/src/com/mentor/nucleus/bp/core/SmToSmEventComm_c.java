package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToSmEventComm_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SM_TO_SM_EVENT_COMM extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SmToSmEventComm_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SmToSmEventComm_c(ModelRoot modelRoot, java.util.UUID p_m_cpath_id,
			java.util.UUID p_m_smevt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);

		Object[] key = {m_cpath_id, m_smevt_id};
		addInstanceToMap(key);
	}
	static public SmToSmEventComm_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_smevt_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);
		SmToSmEventComm_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_cpath_id, p_m_smevt_id};
			new_inst = (SmToSmEventComm_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SmToSmEventComm_c(modelRoot, p_m_cpath_id,
					p_m_smevt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SmToSmEventComm_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_smevt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);
		SmToSmEventComm_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_cpath_id, p_m_smevt_id};
			source = (SmToSmEventComm_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);

				return source;
			}
		}
		// there is no instance matching the id
		SmToSmEventComm_c new_inst = new SmToSmEventComm_c(modelRoot,
				p_m_cpath_id, p_m_smevt_id);
		return new_inst;
	}
	public SmToSmEventComm_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_cpath_id = IdAssigner.NULL_UUID;
		m_smevt_id = IdAssigner.NULL_UUID;
		Object[] key = {m_cpath_id, m_smevt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_cpath_id, m_smevt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_cpath_id != p_newKey) {

			m_cpath_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SmToSmEventComm_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SmToSmEventComm_c)) {
			return false;
		}

		SmToSmEventComm_c me = (SmToSmEventComm_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getCpath_id()) || IdAssigner.NULL_UUID
						.equals(((SmToSmEventComm_c) elem).getCpath_id())) && this != elem)) {
			return false;
		}
		if (!getCpath_id().equals(((SmToSmEventComm_c) elem).getCpath_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((SmToSmEventComm_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(((SmToSmEventComm_c) elem).getSmevt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SmToSmEventComm_c)) {
			return false;
		}

		SmToSmEventComm_c me = (SmToSmEventComm_c) elem;
		if (!getCpath_idCachedValue().equals(
				((SmToSmEventComm_c) elem).getCpath_idCachedValue()))
			return false;
		if (!getSmevt_idCachedValue().equals(
				((SmToSmEventComm_c) elem).getSmevt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_cpath_id;
	private java.util.UUID m_smevt_id;

	// declare association references from this class

	// referring navigation

	SmToSmCommPath_c IsCarriedBySmToSmCommPath;
	public void relateAcrossR408To(SmToSmCommPath_c target) {
		relateAcrossR408To(target, true);
	}
	public void relateAcrossR408To(SmToSmCommPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsCarriedBySmToSmCommPath)
			return; // already related

		if (IsCarriedBySmToSmCommPath != target) {

			Object oldKey = getInstanceKey();

			if (IsCarriedBySmToSmCommPath != null) {

				IsCarriedBySmToSmCommPath.clearBackPointerR408To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToSmEventComm_c.relateAcrossR408To(SmToSmCommPath_c target)",
									"Relate performed across R408 from SM to SM Event Comm to SM to SM Comm Path without unrelate of prior instance.");
				}
			}

			IsCarriedBySmToSmCommPath = target;
			if (IdAssigner.NULL_UUID.equals(target.getCpath_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_cpath_id = target.getCpath_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR408To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "408", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR408From(SmToSmCommPath_c target) {
		unrelateAcrossR408From(target, true);
	}
	public void unrelateAcrossR408From(SmToSmCommPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsCarriedBySmToSmCommPath == null)
			return; // already unrelated

		if (target != IsCarriedBySmToSmCommPath) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R408",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR408To(this);
		}

		if (IsCarriedBySmToSmCommPath != null) {

			m_cpath_id = IsCarriedBySmToSmCommPath.getCpath_id();
			if (IdAssigner.NULL_UUID.equals(m_cpath_id)) {
				m_cpath_id = IsCarriedBySmToSmCommPath.getCpath_idCachedValue();
			}
			IsCarriedBySmToSmCommPath = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "408", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(
			SmToSmCommPath_c[] targets) {
		return getOneCA_SMSMEOnR408(targets, null);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(
			SmToSmCommPath_c[] targets, ClassQueryInterface_c test) {
		SmToSmEventComm_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMSMEOnR408(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(SmToSmCommPath_c target) {
		return getOneCA_SMSMEOnR408(target, null);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(
			SmToSmCommPath_c target, boolean loadComponent) {
		return getOneCA_SMSMEOnR408(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(
			SmToSmCommPath_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMSMEOnR408(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(ModelRoot modelRoot,
			SmToSmCommPath_c target, ClassQueryInterface_c test) {
		return getOneCA_SMSMEOnR408(modelRoot, target, test, true);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR408(ModelRoot modelRoot,
			SmToSmCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_SMSMEOnR408(modelRoot, target, test);
	}
	private static SmToSmEventComm_c find_getOneCA_SMSMEOnR408(
			ModelRoot modelRoot, SmToSmCommPath_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CarriesSmToSmEventCommCarries_R408) {
				for (int i = 0; i < target.backPointer_CarriesSmToSmEventCommCarries_R408
						.size(); ++i) {
					SmToSmEventComm_c source = (SmToSmEventComm_c) target.backPointer_CarriesSmToSmEventCommCarries_R408
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c[] targets) {
		return getManyCA_SMSMEsOnR408(targets, null);
	}
	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c[] targets, boolean loadComponent) {
		return getManyCA_SMSMEsOnR408(targets, null, loadComponent);
	}
	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMSMEsOnR408(targets, test, true);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToSmEventComm_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CarriesSmToSmEventCommCarries_R408) {
				for (int j = 0; j < targets[i].backPointer_CarriesSmToSmEventCommCarries_R408
						.size(); ++j) {
					SmToSmEventComm_c source = (SmToSmEventComm_c) targets[i].backPointer_CarriesSmToSmEventCommCarries_R408
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToSmEventComm_c[] ret_set = new SmToSmEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToSmEventComm_c[0];
		}
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c target) {
		return getManyCA_SMSMEsOnR408(target, null);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c target, boolean loadComponent) {
		return getManyCA_SMSMEsOnR408(target, null, loadComponent);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c target, ClassQueryInterface_c test) {
		return getManyCA_SMSMEsOnR408(target, test, true);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR408(
			SmToSmCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToSmEventComm_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CarriesSmToSmEventCommCarries_R408) {
			for (int i = 0; i < target.backPointer_CarriesSmToSmEventCommCarries_R408
					.size(); ++i) {
				SmToSmEventComm_c source = (SmToSmEventComm_c) target.backPointer_CarriesSmToSmEventCommCarries_R408
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToSmEventComm_c[] ret_set = new SmToSmEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToSmEventComm_c[0];
		}
	}

	// referring navigation

	StateMachineEvent_c RepresentsCommunicationOfStateMachineEvent;
	public void relateAcrossR409To(StateMachineEvent_c target) {
		relateAcrossR409To(target, true);
	}
	public void relateAcrossR409To(StateMachineEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == RepresentsCommunicationOfStateMachineEvent)
			return; // already related

		if (RepresentsCommunicationOfStateMachineEvent != target) {

			Object oldKey = getInstanceKey();

			if (RepresentsCommunicationOfStateMachineEvent != null) {

				RepresentsCommunicationOfStateMachineEvent
						.clearBackPointerR409To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToSmEventComm_c.relateAcrossR409To(StateMachineEvent_c target)",
									"Relate performed across R409 from SM to SM Event Comm to State Machine Event without unrelate of prior instance.");
				}
			}

			RepresentsCommunicationOfStateMachineEvent = target;
			m_smevt_id = target.getSmevt_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR409To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "409", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR409From(StateMachineEvent_c target) {
		unrelateAcrossR409From(target, true);
	}
	public void unrelateAcrossR409From(StateMachineEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (RepresentsCommunicationOfStateMachineEvent == null)
			return; // already unrelated

		if (target != RepresentsCommunicationOfStateMachineEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R409",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR409To(this);
		}

		if (RepresentsCommunicationOfStateMachineEvent != null) {

			m_smevt_id = RepresentsCommunicationOfStateMachineEvent
					.getSmevt_id();
			RepresentsCommunicationOfStateMachineEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "409", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(
			StateMachineEvent_c[] targets) {
		return getOneCA_SMSMEOnR409(targets, null);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test) {
		SmToSmEventComm_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMSMEOnR409(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(
			StateMachineEvent_c target) {
		return getOneCA_SMSMEOnR409(target, null);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(
			StateMachineEvent_c target, boolean loadComponent) {
		return getOneCA_SMSMEOnR409(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMSMEOnR409(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(ModelRoot modelRoot,
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		return getOneCA_SMSMEOnR409(modelRoot, target, test, true);
	}

	public static SmToSmEventComm_c getOneCA_SMSMEOnR409(ModelRoot modelRoot,
			StateMachineEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_SMSMEOnR409(modelRoot, target, test);
	}
	private static SmToSmEventComm_c find_getOneCA_SMSMEOnR409(
			ModelRoot modelRoot, StateMachineEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409) {
				for (int i = 0; i < target.backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409
						.size(); ++i) {
					SmToSmEventComm_c source = (SmToSmEventComm_c) target.backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c[] targets) {
		return getManyCA_SMSMEsOnR409(targets, null);
	}
	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c[] targets, boolean loadComponent) {
		return getManyCA_SMSMEsOnR409(targets, null, loadComponent);
	}
	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMSMEsOnR409(targets, test, true);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToSmEventComm_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409) {
				for (int j = 0; j < targets[i].backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409
						.size(); ++j) {
					SmToSmEventComm_c source = (SmToSmEventComm_c) targets[i].backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToSmEventComm_c[] ret_set = new SmToSmEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToSmEventComm_c[0];
		}
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c target) {
		return getManyCA_SMSMEsOnR409(target, null);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c target, boolean loadComponent) {
		return getManyCA_SMSMEsOnR409(target, null, loadComponent);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		return getManyCA_SMSMEsOnR409(target, test, true);
	}

	public static SmToSmEventComm_c[] getManyCA_SMSMEsOnR409(
			StateMachineEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToSmEventComm_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409) {
			for (int i = 0; i < target.backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409
					.size(); ++i) {
				SmToSmEventComm_c source = (SmToSmEventComm_c) target.backPointer_IsCarriedToOtherSmsViaSmToSmEventCommIsCarriedToOtherSmsVia_R409
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToSmEventComm_c[] ret_set = new SmToSmEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToSmEventComm_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (IsCarriedBySmToSmCommPath == null) {
			// R408
			SmToSmCommPath_c relInst57314 = (SmToSmCommPath_c) baseRoot
					.getInstanceList(SmToSmCommPath_c.class).get(
							new Object[]{m_cpath_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57314 == null) {
				relInst57314 = (SmToSmCommPath_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(SmToSmCommPath_c.class)
						.get(new Object[]{m_cpath_id});
			}
			if (relInst57314 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57314 = (SmToSmCommPath_c) roots[i].getInstanceList(
							SmToSmCommPath_c.class).get(
							new Object[]{m_cpath_id});
					if (relInst57314 != null)
						break;
				}
			}
			//synchronized
			if (relInst57314 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57314) && !isProxy())) {
					relInst57314.relateAcrossR408To(this, notifyChanges);
				}
			}
		}

		if (RepresentsCommunicationOfStateMachineEvent == null) {
			// R409
			StateMachineEvent_c relInst57315 = (StateMachineEvent_c) baseRoot
					.getInstanceList(StateMachineEvent_c.class).get(
							new Object[]{m_smevt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57315 == null) {
				relInst57315 = (StateMachineEvent_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StateMachineEvent_c.class)
						.get(new Object[]{m_smevt_id});
			}
			if (relInst57315 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57315 = (StateMachineEvent_c) roots[i]
							.getInstanceList(StateMachineEvent_c.class).get(
									new Object[]{m_smevt_id});
					if (relInst57315 != null)
						break;
				}
			}
			//synchronized
			if (relInst57315 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57315) && !isProxy())) {
					relInst57315.relateAcrossR409To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R408
		// CA_SMSMC
		inst = IsCarriedBySmToSmCommPath;
		unrelateAcrossR408From(IsCarriedBySmToSmCommPath, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R409
		// SM_EVT
		inst = RepresentsCommunicationOfStateMachineEvent;
		unrelateAcrossR409From(RepresentsCommunicationOfStateMachineEvent,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToSmEventComm_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToSmEventComm_c inst = (SmToSmEventComm_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SmToSmEventComm_c SmToSmEventCommInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SmToSmEventComm_c result = findSmToSmEventCommInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SmToSmEventComm_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSmToSmEventCommInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SmToSmEventComm_c findSmToSmEventCommInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToSmEventComm_c x = (SmToSmEventComm_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SmToSmEventComm_c SmToSmEventCommInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToSmEventCommInstance(modelRoot, test, true);
	}

	public static SmToSmEventComm_c SmToSmEventCommInstance(ModelRoot modelRoot) {
		return SmToSmEventCommInstance(modelRoot, null, true);
	}

	public static SmToSmEventComm_c[] SmToSmEventCommInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SmToSmEventComm_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SmToSmEventComm_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToSmEventComm_c x = (SmToSmEventComm_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SmToSmEventComm_c[] ret_set = new SmToSmEventComm_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToSmEventComm_c[0];
			}
		}
	}
	public static SmToSmEventComm_c[] SmToSmEventCommInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToSmEventCommInstances(modelRoot, test, true);
	}
	public static SmToSmEventComm_c[] SmToSmEventCommInstances(
			ModelRoot modelRoot) {
		return SmToSmEventCommInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the SM to SM Event Comm.dispose call: ";
		SmToSmCommPath_c testR408Inst = SmToSmCommPath_c.getOneCA_SMSMCOnR408(
				this, false);

		if (testR408Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "408 ";
		}
		StateMachineEvent_c testR409Inst = StateMachineEvent_c
				.getOneSM_EVTOnR409(this, false);

		if (testR409Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "409 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "SM to SM Event Comm",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("cpath_id")) {
			return true;
		}
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getCpath_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getCpath_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getCpath_idLongBased() {
		if (IsCarriedBySmToSmCommPath != null) {
			return IsCarriedBySmToSmCommPath.getCpath_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getCpath_id() {
		if (IsCarriedBySmToSmCommPath != null) {
			return IsCarriedBySmToSmCommPath.getCpath_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getCpath_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_cpath_id))
			return m_cpath_id;
		else
			return getCpath_id();
	}

	public void setCpath_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_cpath_id)) {
				return;
			}
		} else if (m_cpath_id != null) {
			if (m_cpath_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Cpath_id", m_cpath_id, newValue, true);
		m_cpath_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmevt_idLongBased() {
		if (RepresentsCommunicationOfStateMachineEvent != null) {
			return RepresentsCommunicationOfStateMachineEvent
					.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (RepresentsCommunicationOfStateMachineEvent != null) {
			return RepresentsCommunicationOfStateMachineEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SM to SM Event Comm", //$NON-NLS-1$
						" Operation entered: SM to SM Event Comm::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SmToSmEventComm_c[] objs = SmToSmEventComm_c.SmToSmEventCommInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "SM to SM Event Comm", //$NON-NLS-1$
				" Operation entered: SM to SM Event Comm::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SmToSmEventComm_c_test57317_c implements ClassQueryInterface_c {
			SmToSmEventComm_c_test57317_c(java.util.UUID p57318,
					java.util.UUID p57319) {
				m_p57318 = p57318;
				m_p57319 = p57319;
			}
			private java.util.UUID m_p57318;
			private java.util.UUID m_p57319;
			public boolean evaluate(Object candidate) {
				SmToSmEventComm_c selected = (SmToSmEventComm_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57318))
						& (selected.getSmevt_id().equals(m_p57319));
				return retval;
			}
		}

		SmToSmEventComm_c[] objs57316 = SmToSmEventComm_c
				.SmToSmEventCommInstances(modelRoot,
						new SmToSmEventComm_c_test57317_c(getCpath_id(),
								getSmevt_id()));

		if (((objs57316.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to SM Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to SM Event Comm: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57316.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to SM Event Comm: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57316.length), e);
			}
			retval = false;

		}

		if (((objs57316.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to SM Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to SM Event Comm: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57316.length)
										+ " CPath_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to SM Event Comm: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57316.length)
										+ " CPath_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to SM Event Comm is a referring class in association: rel.Numb = 408
		// The participating class is: SM to SM Comm Path
		class SmToSmCommPath_c_test57323_c implements ClassQueryInterface_c {
			SmToSmCommPath_c_test57323_c(java.util.UUID p57324) {
				m_p57324 = p57324;
			}
			private java.util.UUID m_p57324;
			public boolean evaluate(Object candidate) {
				SmToSmCommPath_c selected = (SmToSmCommPath_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57324));
				return retval;
			}
		}

		SmToSmCommPath_c[] objs57322 = SmToSmCommPath_c
				.SmToSmCommPathInstances(modelRoot,
						new SmToSmCommPath_c_test57323_c(getCpath_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57322.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to SM Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to SM Event Comm: Association: 408: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57322.length)
										+ " CPath_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to SM Event Comm: Association: 408: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57322.length)
										+ " CPath_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to SM Event Comm is a referring class in association: rel.Numb = 409
		// The participating class is: State Machine Event
		class StateMachineEvent_c_test57326_c implements ClassQueryInterface_c {
			StateMachineEvent_c_test57326_c(java.util.UUID p57327) {
				m_p57327 = p57327;
			}
			private java.util.UUID m_p57327;
			public boolean evaluate(Object candidate) {
				StateMachineEvent_c selected = (StateMachineEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p57327));
				return retval;
			}
		}

		StateMachineEvent_c[] objs57325 = StateMachineEvent_c
				.StateMachineEventInstances(modelRoot,
						new StateMachineEvent_c_test57326_c(getSmevt_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57325.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to SM Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to SM Event Comm: Association: 409: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57325.length)
										+ " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to SM Event Comm: Association: 409: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57325.length)
										+ " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "SM to SM Event Comm",
				" Operation entered: SmToSmEventComm::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SmToSmEventComm_c[] v_peers = SmToSmEventComm_c
				.getManyCA_SMSMEsOnR408(SmToSmCommPath_c
						.getManyCA_SMSMCsOnR408(this));

		if (((v_peers.length) == 1)) {

			CommunicationPath_c v_path = CommunicationPath_c
					.getOneCA_COMMOnR401(SmToSmCommPath_c
							.getOneCA_SMSMCOnR408(this));

			if (v_path != null) {
				v_path.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			SmToSmCommPath_c v_smsmc = SmToSmCommPath_c
					.getOneCA_SMSMCOnR408(this);

			this.unrelateAcrossR408From(v_smsmc);

			StateMachineEvent_c v_smevt = StateMachineEvent_c
					.getOneSM_EVTOnR409(this);

			this.unrelateAcrossR409From(v_smevt);

			if (delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end SM to SM Event Comm
