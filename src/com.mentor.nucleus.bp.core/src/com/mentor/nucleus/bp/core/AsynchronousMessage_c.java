package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.AsynchronousMessage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ASYNCHRONOUS_MESSAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class AsynchronousMessage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public AsynchronousMessage_c(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, String p_m_informalname,
			String p_m_descrip, String p_m_guardcondition,
			String p_m_durationobservation, String p_m_durationconstraint,
			boolean p_m_isformal, String p_m_label, String p_m_sequencenumb) {
		super(modelRoot);
		m_guardcondition = p_m_guardcondition;
		m_descrip = p_m_descrip;
		m_isformal = p_m_isformal;
		m_durationconstraint = p_m_durationconstraint;
		m_label = p_m_label;
		m_durationobservation = p_m_durationobservation;
		m_informalname = p_m_informalname;
		m_sequencenumb = p_m_sequencenumb;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

		Object[] key = {m_msg_id};
		addInstanceToMap(key);
	}
	static public AsynchronousMessage_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, String p_m_informalname,
			String p_m_descrip, String p_m_guardcondition,
			String p_m_durationobservation, String p_m_durationconstraint,
			boolean p_m_isformal, String p_m_label, String p_m_sequencenumb,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(AsynchronousMessage_c.class);
		AsynchronousMessage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id};
			new_inst = (AsynchronousMessage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_guardcondition = p_m_guardcondition;
				new_inst.m_descrip = p_m_descrip;
				new_inst.m_isformal = p_m_isformal;
				new_inst.m_durationconstraint = p_m_durationconstraint;
				new_inst.m_label = p_m_label;
				new_inst.m_durationobservation = p_m_durationobservation;
				new_inst.m_informalname = p_m_informalname;
				new_inst.m_sequencenumb = p_m_sequencenumb;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new AsynchronousMessage_c(modelRoot, p_m_msg_id,
					p_m_informalname, p_m_descrip, p_m_guardcondition,
					p_m_durationobservation, p_m_durationconstraint,
					p_m_isformal, p_m_label, p_m_sequencenumb);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public AsynchronousMessage_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, String p_m_informalname,
			String p_m_descrip, String p_m_guardcondition,
			String p_m_durationobservation, String p_m_durationconstraint,
			boolean p_m_isformal, String p_m_label, String p_m_sequencenumb) {
		InstanceList instances = modelRoot
				.getInstanceList(AsynchronousMessage_c.class);
		AsynchronousMessage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id};
			source = (AsynchronousMessage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_guardcondition = p_m_guardcondition;
				source.m_descrip = p_m_descrip;
				source.m_isformal = p_m_isformal;
				source.m_durationconstraint = p_m_durationconstraint;
				source.m_label = p_m_label;
				source.m_durationobservation = p_m_durationobservation;
				source.m_informalname = p_m_informalname;
				source.m_sequencenumb = p_m_sequencenumb;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

				return source;
			}
		}
		// there is no instance matching the id
		AsynchronousMessage_c new_inst = new AsynchronousMessage_c(modelRoot,
				p_m_msg_id, p_m_informalname, p_m_descrip, p_m_guardcondition,
				p_m_durationobservation, p_m_durationconstraint, p_m_isformal,
				p_m_label, p_m_sequencenumb);
		return new_inst;
	}
	public AsynchronousMessage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_guardcondition = "";
		m_descrip = "";
		m_durationconstraint = "";
		m_label = "";
		m_durationobservation = "";
		m_informalname = "";
		m_sequencenumb = "";
		m_msg_id = IdAssigner.NULL_UUID;
		Object[] key = {m_msg_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_msg_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_msg_id != p_newKey) {

			m_msg_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof AsynchronousMessage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof AsynchronousMessage_c)) {
			return false;
		}

		AsynchronousMessage_c me = (AsynchronousMessage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getMsg_id()) || IdAssigner.NULL_UUID
						.equals(((AsynchronousMessage_c) elem).getMsg_id())) && this != elem)) {
			return false;
		}
		if (!getMsg_id().equals(((AsynchronousMessage_c) elem).getMsg_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof AsynchronousMessage_c)) {
			return false;
		}

		AsynchronousMessage_c me = (AsynchronousMessage_c) elem;
		if (!getMsg_idCachedValue().equals(
				((AsynchronousMessage_c) elem).getMsg_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_guardcondition;
	private String m_descrip;
	private boolean m_isformal;
	private String m_durationconstraint;
	private String m_label;
	private String m_durationobservation;
	private String m_informalname;
	private String m_sequencenumb;
	private java.util.UUID m_msg_id;

	// declare association references from this class

	// referring navigation

	Message_c IsSupertypeMessage;
	public void relateAcrossR1018To(Message_c target) {
		relateAcrossR1018To(target, true);
	}
	public void relateAcrossR1018To(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeMessage)
			return; // already related

		if (IsSupertypeMessage != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeMessage != null) {

				IsSupertypeMessage.clearBackPointerR1018To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AsynchronousMessage_c.relateAcrossR1018To(Message_c target)",
									"Relate performed across R1018 from Asynchronous Message to Message without unrelate of prior instance.");
				}
			}

			IsSupertypeMessage = target;
			if (IdAssigner.NULL_UUID.equals(target.getMsg_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_msg_id = target.getMsg_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1018To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1018", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1018From(Message_c target) {
		unrelateAcrossR1018From(target, true);
	}
	public void unrelateAcrossR1018From(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeMessage == null)
			return; // already unrelated

		if (target != IsSupertypeMessage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1018",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1018To(this);
		}

		if (IsSupertypeMessage != null) {

			m_msg_id = IsSupertypeMessage.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(m_msg_id)) {
				m_msg_id = IsSupertypeMessage.getMsg_idCachedValue();
			}
			IsSupertypeMessage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1018", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(Message_c[] targets) {
		return getOneMSG_AMOnR1018(targets, null);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(
			Message_c[] targets, ClassQueryInterface_c test) {
		AsynchronousMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_AMOnR1018(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(Message_c target) {
		return getOneMSG_AMOnR1018(target, null);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(Message_c target,
			boolean loadComponent) {
		return getOneMSG_AMOnR1018(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(Message_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_AMOnR1018(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(
			ModelRoot modelRoot, Message_c target, ClassQueryInterface_c test) {
		return getOneMSG_AMOnR1018(modelRoot, target, test, true);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1018(
			ModelRoot modelRoot, Message_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneMSG_AMOnR1018(modelRoot, target, test);
	}
	private static AsynchronousMessage_c find_getOneMSG_AMOnR1018(
			ModelRoot modelRoot, Message_c target, ClassQueryInterface_c test) {
		if (target != null) {
			AsynchronousMessage_c source = (AsynchronousMessage_c) target.backPointer_IsSubtypeAsynchronousMessageIsSubtype_R1018;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1018(
			Message_c[] targets) {
		return getManyMSG_AMsOnR1018(targets, null);
	}
	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1018(
			Message_c[] targets, boolean loadComponent) {
		return getManyMSG_AMsOnR1018(targets, null, loadComponent);
	}
	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1018(
			Message_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1018(targets, test, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1018(
			Message_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AsynchronousMessage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AsynchronousMessage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			AsynchronousMessage_c source = (AsynchronousMessage_c) targets[i].backPointer_IsSubtypeAsynchronousMessageIsSubtype_R1018;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			AsynchronousMessage_c[] ret_set = new AsynchronousMessage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AsynchronousMessage_c[0];
		}
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1018(Message_c target) {
		if (target != null) {
			Message_c[] targetArray = new Message_c[1];
			targetArray[0] = target;
			return getManyMSG_AMsOnR1018(targetArray);
		} else {
			AsynchronousMessage_c[] result = new AsynchronousMessage_c[0];
			return result;
		}
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1018(
			Message_c target, boolean loadComponent) {
		if (target != null) {
			Message_c[] targetArray = new Message_c[1];
			targetArray[0] = target;
			return getManyMSG_AMsOnR1018(targetArray, loadComponent);
		} else {
			AsynchronousMessage_c[] result = new AsynchronousMessage_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	SignalMessage_c backPointer_IsSubtypeSignalMessageIsSubtype_R1019;

	public void setSignalMessageOrderInChildListR1019(SignalMessage_c target,
			int index) {
		unrelateAcrossR1019From(target);
		SignalMessage_c[] elements = SignalMessage_c
				.getManyMSG_SIGsOnR1019(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1019From((SignalMessage_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1019To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1019To((SignalMessage_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1019To(SignalMessage_c target) {
		if (target != null) {
			target.relateAcrossR1019To(this, true);
		}
	}

	public void relateAcrossR1019To(SignalMessage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1019To(this, notifyChanges);
		}
	}

	public void setBackPointerR1019To(SignalMessage_c target) {
		backPointer_IsSubtypeSignalMessageIsSubtype_R1019 = target;
	}

	public void unrelateAcrossR1019From(SignalMessage_c target) {
		if (target != null) {
			target.unrelateAcrossR1019From(this, true);
		}
	}

	public void unrelateAcrossR1019From(SignalMessage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1019From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1019To(SignalMessage_c target) {
		if (target == backPointer_IsSubtypeSignalMessageIsSubtype_R1019) {
			backPointer_IsSubtypeSignalMessageIsSubtype_R1019 = null;
		}
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			SignalMessage_c[] targets) {
		return getOneMSG_AMOnR1019(targets, null);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			SignalMessage_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AMOnR1019(targets, test, true);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			SignalMessage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		AsynchronousMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					AsynchronousMessage_c candidate_val = getOneMSG_AMOnR1019(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AMOnR1019(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			SignalMessage_c target) {
		return getOneMSG_AMOnR1019(target, true);
	}
	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			SignalMessage_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeAsynchronousMessage;
		} else {
			return null;
		}
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			SignalMessage_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1019(targets, test, true);
	}

	public static AsynchronousMessage_c [] getManyMSG_AMsOnR1019(SignalMessage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new AsynchronousMessage_c[0];
  
  
  LinkedHashSet<AsynchronousMessage_c> elementsSet = new LinkedHashSet<AsynchronousMessage_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeAsynchronousMessage == null)
	  targets[i].loadProxy();
    AsynchronousMessage_c associate = targets[i].IsSupertypeAsynchronousMessage;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  AsynchronousMessage_c[] result = new AsynchronousMessage_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			SignalMessage_c[] targets) {
		return getManyMSG_AMsOnR1019(targets, null);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			SignalMessage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SignalMessage_c[] targetArray = new SignalMessage_c[1];
			targetArray[0] = target;
			return getManyMSG_AMsOnR1019(targetArray, test, loadComponent);
		} else {
			AsynchronousMessage_c[] result = new AsynchronousMessage_c[0];
			return result;
		}

	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			SignalMessage_c target, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1019(target, null, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			SignalMessage_c target) {
		return getManyMSG_AMsOnR1019(target, null, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			SignalMessage_c target, boolean loadComponent) {
		return getManyMSG_AMsOnR1019(target, null, loadComponent);
	}

	// referred to navigation

	EventMessage_c backPointer_IsSubtypeEventMessageIsSubtype_R1019;

	public void setEventMessageOrderInChildListR1019(EventMessage_c target,
			int index) {
		unrelateAcrossR1019From(target);
		EventMessage_c[] elements = EventMessage_c.getManyMSG_EsOnR1019(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1019From((EventMessage_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1019To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1019To((EventMessage_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1019To(EventMessage_c target) {
		if (target != null) {
			target.relateAcrossR1019To(this, true);
		}
	}

	public void relateAcrossR1019To(EventMessage_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1019To(this, notifyChanges);
		}
	}

	public void setBackPointerR1019To(EventMessage_c target) {
		backPointer_IsSubtypeEventMessageIsSubtype_R1019 = target;
	}

	public void unrelateAcrossR1019From(EventMessage_c target) {
		if (target != null) {
			target.unrelateAcrossR1019From(this, true);
		}
	}

	public void unrelateAcrossR1019From(EventMessage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1019From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1019To(EventMessage_c target) {
		if (target == backPointer_IsSubtypeEventMessageIsSubtype_R1019) {
			backPointer_IsSubtypeEventMessageIsSubtype_R1019 = null;
		}
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			EventMessage_c[] targets) {
		return getOneMSG_AMOnR1019(targets, null);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			EventMessage_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AMOnR1019(targets, test, true);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			EventMessage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		AsynchronousMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					AsynchronousMessage_c candidate_val = getOneMSG_AMOnR1019(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AMOnR1019(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			EventMessage_c target) {
		return getOneMSG_AMOnR1019(target, true);
	}
	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			EventMessage_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeAsynchronousMessage;
		} else {
			return null;
		}
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			EventMessage_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1019(targets, test, true);
	}

	public static AsynchronousMessage_c [] getManyMSG_AMsOnR1019(EventMessage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new AsynchronousMessage_c[0];
  
  
  LinkedHashSet<AsynchronousMessage_c> elementsSet = new LinkedHashSet<AsynchronousMessage_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeAsynchronousMessage == null)
	  targets[i].loadProxy();
    AsynchronousMessage_c associate = targets[i].IsSupertypeAsynchronousMessage;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  AsynchronousMessage_c[] result = new AsynchronousMessage_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			EventMessage_c[] targets) {
		return getManyMSG_AMsOnR1019(targets, null);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			EventMessage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			EventMessage_c[] targetArray = new EventMessage_c[1];
			targetArray[0] = target;
			return getManyMSG_AMsOnR1019(targetArray, test, loadComponent);
		} else {
			AsynchronousMessage_c[] result = new AsynchronousMessage_c[0];
			return result;
		}

	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			EventMessage_c target, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1019(target, null, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			EventMessage_c target) {
		return getManyMSG_AMsOnR1019(target, null, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			EventMessage_c target, boolean loadComponent) {
		return getManyMSG_AMsOnR1019(target, null, loadComponent);
	}

	// referred to navigation

	InformalAsynchronousMessage_c backPointer_IsSubtypeInformalAsynchronousMessageIsSubtype_R1019;

	public void setInformalAsynchronousMessageOrderInChildListR1019(
			InformalAsynchronousMessage_c target, int index) {
		unrelateAcrossR1019From(target);
		InformalAsynchronousMessage_c[] elements = InformalAsynchronousMessage_c
				.getManyMSG_IAMsOnR1019(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1019From((InformalAsynchronousMessage_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1019To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1019To((InformalAsynchronousMessage_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1019To(InformalAsynchronousMessage_c target) {
		if (target != null) {
			target.relateAcrossR1019To(this, true);
		}
	}

	public void relateAcrossR1019To(InformalAsynchronousMessage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1019To(this, notifyChanges);
		}
	}

	public void setBackPointerR1019To(InformalAsynchronousMessage_c target) {
		backPointer_IsSubtypeInformalAsynchronousMessageIsSubtype_R1019 = target;
	}

	public void unrelateAcrossR1019From(InformalAsynchronousMessage_c target) {
		if (target != null) {
			target.unrelateAcrossR1019From(this, true);
		}
	}

	public void unrelateAcrossR1019From(InformalAsynchronousMessage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1019From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1019To(InformalAsynchronousMessage_c target) {
		if (target == backPointer_IsSubtypeInformalAsynchronousMessageIsSubtype_R1019) {
			backPointer_IsSubtypeInformalAsynchronousMessageIsSubtype_R1019 = null;
		}
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			InformalAsynchronousMessage_c[] targets) {
		return getOneMSG_AMOnR1019(targets, null);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			InformalAsynchronousMessage_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AMOnR1019(targets, test, true);
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			InformalAsynchronousMessage_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		AsynchronousMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					AsynchronousMessage_c candidate_val = getOneMSG_AMOnR1019(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AMOnR1019(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			InformalAsynchronousMessage_c target) {
		return getOneMSG_AMOnR1019(target, true);
	}
	public static AsynchronousMessage_c getOneMSG_AMOnR1019(
			InformalAsynchronousMessage_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeAsynchronousMessage;
		} else {
			return null;
		}
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			InformalAsynchronousMessage_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1019(targets, test, true);
	}

	public static AsynchronousMessage_c [] getManyMSG_AMsOnR1019(InformalAsynchronousMessage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new AsynchronousMessage_c[0];
  
  
  LinkedHashSet<AsynchronousMessage_c> elementsSet = new LinkedHashSet<AsynchronousMessage_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeAsynchronousMessage == null)
	  targets[i].loadProxy();
    AsynchronousMessage_c associate = targets[i].IsSupertypeAsynchronousMessage;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  AsynchronousMessage_c[] result = new AsynchronousMessage_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			InformalAsynchronousMessage_c[] targets) {
		return getManyMSG_AMsOnR1019(targets, null);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			InformalAsynchronousMessage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			InformalAsynchronousMessage_c[] targetArray = new InformalAsynchronousMessage_c[1];
			targetArray[0] = target;
			return getManyMSG_AMsOnR1019(targetArray, test, loadComponent);
		} else {
			AsynchronousMessage_c[] result = new AsynchronousMessage_c[0];
			return result;
		}

	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			InformalAsynchronousMessage_c target, ClassQueryInterface_c test) {
		return getManyMSG_AMsOnR1019(target, null, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			InformalAsynchronousMessage_c target) {
		return getManyMSG_AMsOnR1019(target, null, true);
	}

	public static AsynchronousMessage_c[] getManyMSG_AMsOnR1019(
			InformalAsynchronousMessage_c target, boolean loadComponent) {
		return getManyMSG_AMsOnR1019(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1018
		Message_c relInst40268 = (Message_c) baseRoot.getInstanceList(
				Message_c.class).get(new Object[]{m_msg_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40268 == null) {
			relInst40268 = (Message_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Message_c.class)
					.get(new Object[]{m_msg_id});
		}
		if (relInst40268 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40268 = (Message_c) roots[i].getInstanceList(
						Message_c.class).get(new Object[]{m_msg_id});
				if (relInst40268 != null)
					break;
			}
		}
		//synchronized
		if (relInst40268 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40268) && !isProxy())) {
				relInst40268.relateAcrossR1018To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1018
		// MSG_M
		inst = IsSupertypeMessage;
		unrelateAcrossR1018From(IsSupertypeMessage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(AsynchronousMessage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final AsynchronousMessage_c inst = (AsynchronousMessage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(AsynchronousMessage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static AsynchronousMessage_c AsynchronousMessageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		AsynchronousMessage_c result = findAsynchronousMessageInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					AsynchronousMessage_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findAsynchronousMessageInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static AsynchronousMessage_c findAsynchronousMessageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AsynchronousMessage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AsynchronousMessage_c x = (AsynchronousMessage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static AsynchronousMessage_c AsynchronousMessageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AsynchronousMessageInstance(modelRoot, test, true);
	}

	public static AsynchronousMessage_c AsynchronousMessageInstance(
			ModelRoot modelRoot) {
		return AsynchronousMessageInstance(modelRoot, null, true);
	}

	public static AsynchronousMessage_c[] AsynchronousMessageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					AsynchronousMessage_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(AsynchronousMessage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AsynchronousMessage_c x = (AsynchronousMessage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				AsynchronousMessage_c[] ret_set = new AsynchronousMessage_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new AsynchronousMessage_c[0];
			}
		}
	}
	public static AsynchronousMessage_c[] AsynchronousMessageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AsynchronousMessageInstances(modelRoot, test, true);
	}
	public static AsynchronousMessage_c[] AsynchronousMessageInstances(
			ModelRoot modelRoot) {
		return AsynchronousMessageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Asynchronous Message.dispose call: ";
		Message_c testR1018Inst2 = Message_c.getOneMSG_MOnR1018(this, false);

		if (testR1018Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1018 ";
		}
		SignalMessage_c testR1019Inst1 = SignalMessage_c.getOneMSG_SIGOnR1019(
				this, false);

		if (testR1019Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1019 ";
		}
		EventMessage_c testR1019Inst2 = EventMessage_c.getOneMSG_EOnR1019(this,
				false);

		if (testR1019Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1019 ";
		}
		InformalAsynchronousMessage_c testR1019Inst3 = InformalAsynchronousMessage_c
				.getOneMSG_IAMOnR1019(this, false);

		if (testR1019Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1019 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Asynchronous Message",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("msg_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getMsg_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getMsg_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getGuardcondition() {
		return m_guardcondition;
	}

	public void setGuardcondition(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_guardcondition)) {
				return;
			}
		} else if (m_guardcondition != null) {
			if (m_guardcondition.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Guardcondition", m_guardcondition, newValue, true);
		m_guardcondition = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public boolean getIsformal() {
		ModelRoot modelRoot = getModelRoot();
		InformalAsynchronousMessage_c v_iam = InformalAsynchronousMessage_c
				.getOneMSG_IAMOnR1019(this);

		if (((v_iam != null))) {

			return false;

		}

		else {

			return true;

		}

	}

	public String getDurationconstraint() {
		return m_durationconstraint;
	}

	public void setDurationconstraint(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_durationconstraint)) {
				return;
			}
		} else if (m_durationconstraint != null) {
			if (m_durationconstraint.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Durationconstraint", m_durationconstraint, newValue, true);
		m_durationconstraint = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getLabel() {
		ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		EventMessage_c v_em = EventMessage_c.getOneMSG_EOnR1019(this);

		SignalMessage_c v_sigMsg = SignalMessage_c.getOneMSG_SIGOnR1019(this);

		if (((v_em != null))) {

			StateMachineEvent_c v_evt = StateMachineEvent_c
					.getOneSM_EVTOnR1009(v_em);

			v_result = v_evt.getDrv_lbl() + ": " + v_evt.getMning();

		}

		else if ((v_sigMsg != null)) {

			InterfaceSignal_c v_signal = InterfaceSignal_c
					.getOneC_ASOnR1021(v_sigMsg);

			v_result = v_signal.getName();

		}

		else {

			v_result = getInformalname();

		}

		return v_result;

	}

	public String getDurationobservation() {
		return m_durationobservation;
	}

	public void setDurationobservation(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_durationobservation)) {
				return;
			}
		} else if (m_durationobservation != null) {
			if (m_durationobservation.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Durationobservation", m_durationobservation, newValue, true);
		m_durationobservation = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getInformalname() {
		return m_informalname;
	}

	public void setInformalname(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_informalname)) {
				return;
			}
		} else if (m_informalname != null) {
			if (m_informalname.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Informalname", m_informalname, newValue, true);
		m_informalname = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getSequencenumb() {
		return m_sequencenumb;
	}

	public void setSequencenumb(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sequencenumb)) {
				return;
			}
		} else if (m_sequencenumb != null) {
			if (m_sequencenumb.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Sequencenumb", m_sequencenumb, newValue, true);
		m_sequencenumb = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getMsg_idLongBased() {
		if (IsSupertypeMessage != null) {
			return IsSupertypeMessage.getMsg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMsg_id() {
		if (IsSupertypeMessage != null) {
			return IsSupertypeMessage.getMsg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeMessage != null);

	}

	public java.util.UUID getMsg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_msg_id))
			return m_msg_id;
		else
			return getMsg_id();
	}

	public void setMsg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_msg_id)) {
				return;
			}
		} else if (m_msg_id != null) {
			if (m_msg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Msg_id", m_msg_id, newValue, true);
		m_msg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message", //$NON-NLS-1$
						" Operation entered: Asynchronous Message::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		AsynchronousMessage_c[] objs = AsynchronousMessage_c
				.AsynchronousMessageInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message", //$NON-NLS-1$
				" Operation entered: Asynchronous Message::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class AsynchronousMessage_c_test40270_c
				implements
					ClassQueryInterface_c {
			AsynchronousMessage_c_test40270_c(java.util.UUID p40271) {
				m_p40271 = p40271;
			}
			private java.util.UUID m_p40271;
			public boolean evaluate(Object candidate) {
				AsynchronousMessage_c selected = (AsynchronousMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40271));
				return retval;
			}
		}

		AsynchronousMessage_c[] objs40269 = AsynchronousMessage_c
				.AsynchronousMessageInstances(modelRoot,
						new AsynchronousMessage_c_test40270_c(getMsg_id()));

		if (((objs40269.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Asynchronous Message", //$NON-NLS-1$
								"Consistency: Object: Asynchronous Message: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40269.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Asynchronous Message: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40269.length), e);
			}
			retval = false;

		}

		if (((objs40269.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Asynchronous Message", //$NON-NLS-1$
								"Consistency: Object: Asynchronous Message: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40269.length)
										+ " Msg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Asynchronous Message: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40269.length)
										+ " Msg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Asynchronous Message is a subtype in association: rel.Numb = 1018
		// The supertype class is: Message
		class Message_c_test40275_c implements ClassQueryInterface_c {
			Message_c_test40275_c(java.util.UUID p40276) {
				m_p40276 = p40276;
			}
			private java.util.UUID m_p40276;
			public boolean evaluate(Object candidate) {
				Message_c selected = (Message_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40276));
				return retval;
			}
		}

		Message_c[] objs40274 = Message_c.MessageInstances(modelRoot,
				new Message_c_test40275_c(getMsg_id()));

		if (((objs40274.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Asynchronous Message", //$NON-NLS-1$
								"Consistency: Object: Asynchronous Message: Association: 1018: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40274.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Asynchronous Message: Association: 1018: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40274.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 1019
		int objs40277 = 0;
		// Subtype Object: Signal Message
		class SignalMessage_c_test40278_c implements ClassQueryInterface_c {
			SignalMessage_c_test40278_c(java.util.UUID p40279) {
				m_p40279 = p40279;
			}
			private java.util.UUID m_p40279;
			public boolean evaluate(Object candidate) {
				SignalMessage_c selected = (SignalMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40279));
				return retval;
			}
		}

		SignalMessage_c[] objs40280 = SignalMessage_c.SignalMessageInstances(
				modelRoot, new SignalMessage_c_test40278_c(getMsg_id()));

		objs40277 = objs40277 + objs40280.length;
		// Subtype Object: Event Message
		class EventMessage_c_test40281_c implements ClassQueryInterface_c {
			EventMessage_c_test40281_c(java.util.UUID p40282) {
				m_p40282 = p40282;
			}
			private java.util.UUID m_p40282;
			public boolean evaluate(Object candidate) {
				EventMessage_c selected = (EventMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40282));
				return retval;
			}
		}

		EventMessage_c[] objs40283 = EventMessage_c.EventMessageInstances(
				modelRoot, new EventMessage_c_test40281_c(getMsg_id()));

		objs40277 = objs40277 + objs40283.length;
		// Subtype Object: Informal Asynchronous Message
		class InformalAsynchronousMessage_c_test40284_c
				implements
					ClassQueryInterface_c {
			InformalAsynchronousMessage_c_test40284_c(java.util.UUID p40285) {
				m_p40285 = p40285;
			}
			private java.util.UUID m_p40285;
			public boolean evaluate(Object candidate) {
				InformalAsynchronousMessage_c selected = (InformalAsynchronousMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40285));
				return retval;
			}
		}

		InformalAsynchronousMessage_c[] objs40286 = InformalAsynchronousMessage_c
				.InformalAsynchronousMessageInstances(modelRoot,
						new InformalAsynchronousMessage_c_test40284_c(
								getMsg_id()));

		objs40277 = objs40277 + objs40286.length;
		if (objs40277 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Asynchronous Message", //$NON-NLS-1$
								"Consistency: Object: Asynchronous Message: Association: 1019: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40277)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Asynchronous Message: Association: 1019: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40277), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		EventMessage_c v_em = EventMessage_c.getOneMSG_EOnR1019(this);

		if (((v_em != null))) {

			this.unrelateAcrossR1019From(v_em);

			if (v_em != null) {
				v_em.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		InformalAsynchronousMessage_c v_im = InformalAsynchronousMessage_c
				.getOneMSG_IAMOnR1019(this);

		if (((v_im != null))) {

			this.unrelateAcrossR1019From(v_im);

			if (v_im != null) {
				v_im.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		SignalMessage_c v_sigMsg = SignalMessage_c.getOneMSG_SIGOnR1019(this);

		if ((v_sigMsg != null)) {

			this.unrelateAcrossR1019From(v_sigMsg);

			if (v_sigMsg != null) {
				v_sigMsg.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Message_c v_msg = Message_c.getOneMSG_MOnR1018(this);

		if (((v_msg != null))) {

			this.unrelateAcrossR1018From(v_msg);

			if (v_msg != null) {
				v_msg.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Unformalize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Unformalize");
		final ModelRoot modelRoot = getModelRoot();
		EventMessage_c v_em = EventMessage_c.getOneMSG_EOnR1019(this);

		SignalMessage_c v_sigMsg = SignalMessage_c.getOneMSG_SIGOnR1019(this);

		if (((v_em != null))) {

			if (v_em != null) {
				v_em.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if ((v_sigMsg != null)) {

			if (v_sigMsg != null) {
				v_sigMsg.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

		if (v_message != null) {
			v_message.Deassociatefromtarget();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		Disposeformalarguments();

		InformalAsynchronousMessage_c v_im = new InformalAsynchronousMessage_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_im));

		if (v_im != null) {
			v_im.relateAcrossR1019To(this);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

	} // End unformalize
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		setInformalname("Informal Message");

		InformalAsynchronousMessage_c v_im = new InformalAsynchronousMessage_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_im));

		if (v_im != null) {
			v_im.relateAcrossR1019To(this);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

	} // End initialize
	public void Newargument() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Newargument");
		final ModelRoot modelRoot = getModelRoot();
		Message_c v_msg = Message_c.getOneMSG_MOnR1018(this);

		if (((v_msg != null))) {

			if (v_msg != null) {
				v_msg.Newargument();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End newArgument
	public boolean Canrename() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Canrename");
		final ModelRoot modelRoot = getModelRoot();
		InformalAsynchronousMessage_c v_im = InformalAsynchronousMessage_c
				.getOneMSG_IAMOnR1019(this);

		if (((v_im != null))) {

			return true;

		}

		else {

			return false;

		}

	} // End canRename
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return getLabel();

	} // End get_name
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.End)) {

			return Style_c.OpenArrow;

		}

		else {

			return Style_c.Solid;

		}

	} // End get_style
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final boolean p_Obj_typeisimported, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.Middle)) {

			String v_result = getLabel();

			MessageArgument_c[] v_args = MessageArgument_c
					.getManyMSG_AsOnR1001(Message_c.getManyMSG_MsOnR1018(this));

			if ((!getIsformal())) {

				v_args = MessageArgument_c.getManyMSG_AsOnR1000(Message_c
						.getManyMSG_MsOnR1018(this));

			}

			if (((v_args.length != 0))) {

				v_result = v_result + " (";

				int v_count = 0;

				MessageArgument_c v_arg = null;
				for (int i37261 = 0; i37261 < v_args.length; i37261++) {
					v_arg = v_args[i37261];

					v_count = v_count + 1;

					v_result = v_result + v_arg.getLabel();

					if ((v_count != (v_args.length))) {

						v_result = v_result + ", ";

					}

				}

				v_result = v_result + ")";

			}

			if ((!getDurationobservation().equals(""))) {

				v_result = v_result + "  " + getDurationobservation();

			}

			if ((!getSequencenumb().equals(""))) {

				if ((!v_result.equals(""))) {

					v_result = ": " + v_result;

				}

				v_result = getSequencenumb() + v_result;

			}

			return v_result;

		}

		else if ((p_At == End_c.Start)) {

			if ((!getGuardcondition().equals(""))) {

				return "[" + getGuardcondition() + "]";

			}

			return "";

		}

		else if ((p_At == End_c.End)) {

			if ((!getDurationconstraint().equals(""))) {

				return "{" + getDurationconstraint() + "}";

			}

			else {

				return "";

			}

		}

		else {

			return "";

		}

	} // End get_connector_text
	public boolean Actionfilter(final String p_Name, final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Actionfilter");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_Name.equals("can"))) {

			PackageableElement_c v_packageableElem = PackageableElement_c
					.getOnePE_PEOnR8001(Message_c.getOneMSG_MOnR1018(this));

			Package_c v_package = Package_c
					.getOneEP_PKGOnR8000(v_packageableElem);

			Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

			if (((v_package == null) && v_message
					.getParticipatesincommunication())) {

				v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c
						.getOnePE_PEOnR8001(InteractionParticipant_c
								.getOneSQ_POnR1007(Message_c
										.getOneMSG_MOnR1018(this))));

			}

			Component_c v_component = Component_c
					.getOneC_COnR8003(v_packageableElem);

			boolean v_isInGenericPackage = (v_package != null)
					|| (v_component != null);

			if ((p_Value.equals("addArg"))) {

				return !getIsformal();

			}

			else if ((p_Value.equals("unform"))) {

				return getIsformal();

			}

			else if ((p_Value.equals("formInstClassEvent"))) {

				ClassInstanceParticipant_c v_cip = ClassInstanceParticipant_c
						.getOneSQ_CIPOnR930(InteractionParticipant_c
								.getOneSQ_POnR1007(Message_c
										.getOneMSG_MOnR1018(this)));

				if (((v_cip != null))) {

					Communication_c v_communication = Communication_c
							.getOneCOMM_COMMOnR1126(ParticipantInCommunication_c
									.getOneCOMM_PICOnR1126(InteractionParticipant_c
											.getOneSQ_POnR930(v_cip)));

					if (((v_communication != null) || v_message
							.getParticipatesincommunication())) {

						return false;

					}

					else {

						if ((getIsformal())) {

							if ((v_cip.Getclasseventcount() == 1)) {

								return false;

							}

						}

						return v_cip.Formalclasshascbevents(true);

					}

				}

			}

			else if ((p_Value.equals("formClassEvent"))) {

				ClassParticipant_c v_cp = ClassParticipant_c
						.getOneSQ_CPOnR930(InteractionParticipant_c
								.getOneSQ_POnR1007(Message_c
										.getOneMSG_MOnR1018(this)));

				if (((v_cp == null))) {

					v_cp = ClassParticipant_c
							.getOneSQ_CPOnR930(InteractionParticipant_c.getOneSQ_POnR940(Lifespan_c
									.getOneSQ_LSOnR930(InteractionParticipant_c
											.getOneSQ_POnR1007(Message_c
													.getOneMSG_MOnR1018(this)))));

				}

				if (((v_cp != null))) {

					Communication_c v_communication = Communication_c
							.getOneCOMM_COMMOnR1126(ParticipantInCommunication_c
									.getOneCOMM_PICOnR1126(InteractionParticipant_c
											.getOneSQ_POnR930(v_cp)));

					if (((v_communication != null) || v_message
							.getParticipatesincommunication())) {

						return false;

					}

					if ((getIsformal())) {

						if ((v_cp.Getclasseventcount() == 1)) {

							return false;

						}

					}

					return v_cp.Formalclasshascbevents();

				}

			}

			else if ((p_Value.equals("formInstEvent"))) {

				Lifespan_c v_ls = Lifespan_c
						.getOneSQ_LSOnR930(InteractionParticipant_c
								.getOneSQ_POnR1007(Message_c
										.getOneMSG_MOnR1018(this)));

				if (((v_ls != null))) {

					ClassInstanceParticipant_c v_cip = ClassInstanceParticipant_c
							.getOneSQ_CIPOnR930(InteractionParticipant_c
									.getOneSQ_POnR940(v_ls));

					if (((v_cip != null))) {

						if ((getIsformal())) {

							if ((v_cip.Getinstanceeventcount() == 1)) {

								return false;

							}

						}

						return v_cip.Formalclasshasibevents();

					}

				}

			}

			else if ((p_Value.equals("formSig"))) {

				InterfaceSignal_c v_signal = InterfaceSignal_c
						.getOneC_ASOnR1021(SignalMessage_c
								.getOneMSG_SIGOnR1019(this));

				if (((v_signal != null))) {

					ComponentParticipant_c v_cop = ComponentParticipant_c
							.getOneSQ_COPOnR930(InteractionParticipant_c
									.getOneSQ_POnR1007(Message_c
											.getOneMSG_MOnR1018(this)));

					if (((v_cop == null))) {

						v_cop = ComponentParticipant_c
								.getOneSQ_COPOnR930(InteractionParticipant_c.getOneSQ_POnR940(Lifespan_c
										.getOneSQ_LSOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c
												.getOneMSG_MOnR1018(this)))));

					}

					if (((v_cop != null))) {

						if ((v_cop.Getinterfacesignalcount() == 1)) {

							return false;

						}

					}

				}

				ComponentParticipant_c v_cop = ComponentParticipant_c
						.getOneSQ_COPOnR930(InteractionParticipant_c
								.getOneSQ_POnR1007(Message_c
										.getOneMSG_MOnR1018(this)));

				if (((v_cop == null))) {

					v_cop = ComponentParticipant_c
							.getOneSQ_COPOnR930(InteractionParticipant_c.getOneSQ_POnR940(Lifespan_c
									.getOneSQ_LSOnR930(InteractionParticipant_c
											.getOneSQ_POnR1007(Message_c
													.getOneMSG_MOnR1018(this)))));

				}

				if (((v_cop != null))) {

					Communication_c v_communication = Communication_c
							.getOneCOMM_COMMOnR1126(ParticipantInCommunication_c
									.getOneCOMM_PICOnR1126(InteractionParticipant_c
											.getOneSQ_POnR930(v_cop)));

					if (((v_communication != null) || v_message
							.getParticipatesincommunication())) {

						return false;

					}

					return v_cop.Isformalandhassignals();

				}

			}

			else if ((p_Value.equals("formCommClassEvent"))
					|| (p_Value.equals("formCommMsgSig"))
					|| (p_Value.equals("formCommInstEvent"))) {

				java.util.UUID v_pkgID = Gd_c.Null_unique_id();

				Communication_c v_communication = Communication_c
						.getOneCOMM_COMMOnR1135(MessageInCommunication_c
								.getOneCOMM_MICOnR1135(Message_c
										.getOneMSG_MOnR1018(this)));

				if (((v_communication == null))) {

					v_communication = Communication_c
							.getOneCOMM_COMMOnR1126(ParticipantInCommunication_c
									.getOneCOMM_PICOnR1126(InteractionParticipant_c
											.getOneSQ_POnR1007(Message_c
													.getOneMSG_MOnR1018(this))));

					if (((v_communication == null) && !v_message
							.getParticipatesincommunication())) {

						return false;

					}

				}

				if (((v_communication != null))) {

					v_pkgID = v_communication.getPackage_id();

				}

				else {

					v_pkgID = v_package.getPackage_id();

				}

				if ((Sel_c.Getcurrentselectioncount() != 2)) {

					return false;

				}

				if ((!Util_c.Selectioncontainsvalidparticipant(Util_c
						.Getcommunicationinstance(v_pkgID)))) {

					return false;

				}

				if ((getIsformal())) {

					InteractionParticipant_c v_participant = InteractionParticipant_c
							.getOneSQ_POnR1007(Message_c
									.getOneMSG_MOnR1018(this));

					if ((p_Value.equals("formCommClassEvent"))) {

						ClassParticipant_c v_cp = ClassParticipant_c
								.getOneSQ_CPOnR930(v_participant);

						if (((v_cp != null))) {

							if ((v_cp.Getclasseventcount() == 1)) {

								return false;

							}

						}

					}

					else if ((p_Value.equals("formCommInstEvent"))) {

						ClassInstanceParticipant_c v_cip = ClassInstanceParticipant_c
								.getOneSQ_CIPOnR930(v_participant);

						if (((v_cip != null))) {

							if ((v_cip.Getinstanceeventcount() == 1)) {

								return false;

							}

						}

					}

					else if ((p_Value.equals("formCommMsgSig"))) {

						ComponentParticipant_c v_cop = ComponentParticipant_c
								.getOneSQ_COPOnR930(v_participant);

						if (((v_cop != null))) {

							if ((v_cop.Getinterfacesignalcount() == 1)) {

								return false;

							}

						}

					}

				}

				return true;

			}

		}

		else if ((p_Name.equals("show"))) {

			if ((p_Value.equals("noTargetMessage"))) {

				if ((Sel_c.Getcurrentselectioncount() != 1)) {

					return false;

				}

				InteractionParticipant_c v_target = InteractionParticipant_c
						.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018(this));

				return (v_target == null);

			}

		}

		return false;

	} // End actionFilter
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getMsg_id();

	} // End get_ooa_id
	public void Disposeformalarguments() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message",
						" Operation entered: AsynchronousMessage::Disposeformalarguments");
		final ModelRoot modelRoot = getModelRoot();
		Message_c v_parent = Message_c.getOneMSG_MOnR1018(this);

		if (v_parent != null) {
			v_parent.Disposeformalarguments();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End disposeFormalArguments
	public void Formalizewithevent(final java.util.UUID p_Eventid) {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Formalizewithevent");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_event = (StateMachineEvent_c) modelRoot
				.getInstanceList(StateMachineEvent_c.class).getGlobal(null,
						p_Eventid);

		Prepareforformalization();

		EventMessage_c v_em = new EventMessage_c(modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_em));

		if (v_em != null) {
			v_em.relateAcrossR1019To(this);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_em != null) {
			v_em.relateAcrossR1009To(v_event);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

		StateMachineEventDataItem_c[] v_evtdis = StateMachineEventDataItem_c
				.getManySM_EVTDIsOnR532(v_event);

		StateMachineEventDataItem_c v_evtdi = null;
		for (int i37262 = 0; i37262 < v_evtdis.length; i37262++) {
			v_evtdi = v_evtdis[i37262];

			MessageArgument_c v_arg = new MessageArgument_c(modelRoot);
			Ooaofooa.getDefaultInstance().fireModelElementCreated(
					new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
							v_arg));

			EventArgument_c v_earg = new EventArgument_c(modelRoot);
			Ooaofooa.getDefaultInstance().fireModelElementCreated(
					new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
							v_earg));

			if (v_arg != null) {
				v_arg.relateAcrossR1001To(v_message);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

			if (v_earg != null) {
				v_earg.relateAcrossR1013To(v_arg);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

			if (v_earg != null) {
				v_earg.relateAcrossR1017To(v_evtdi);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

			if (v_arg != null) {
				v_arg.setValue("");
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

		}

	} // End formalizeWithEvent
	public void Prepareforformalization() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message",
						" Operation entered: AsynchronousMessage::Prepareforformalization");
		final ModelRoot modelRoot = getModelRoot();
		EventMessage_c v_eem = EventMessage_c.getOneMSG_EOnR1019(this);

		InformalAsynchronousMessage_c v_im = InformalAsynchronousMessage_c
				.getOneMSG_IAMOnR1019(this);

		SignalMessage_c v_sig = SignalMessage_c.getOneMSG_SIGOnR1019(this);

		Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

		if (((v_im != null))) {

			if (v_im != null) {
				v_im.unrelateAcrossR1019From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_im != null) {
				v_im.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_eem != null))) {

			if (v_eem != null) {
				v_eem.unrelateAcrossR1019From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_eem != null) {
				v_eem.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			if (v_message != null) {
				v_message.Disposeformalarguments();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if ((v_sig != null)) {

			this.unrelateAcrossR1019From(v_sig);

			if (v_sig != null) {
				v_sig.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			if (v_message != null) {
				v_message.Disposeformalarguments();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End prepareForFormalization
	public void Formalizewithsignal(final java.util.UUID p_Signalid) {
		Ooaofooa.log.println(ILogger.OPERATION, "Asynchronous Message",
				" Operation entered: AsynchronousMessage::Formalizewithsignal");
		final ModelRoot modelRoot = getModelRoot();
		ExecutableProperty_c v_sigProp = (ExecutableProperty_c) modelRoot
				.getInstanceList(ExecutableProperty_c.class).getGlobal(null,
						p_Signalid);

		if ((v_sigProp != null)) {

			InterfaceSignal_c v_sig = InterfaceSignal_c
					.getOneC_ASOnR4004(v_sigProp);

			if ((v_sig != null)) {

				Prepareforformalization();

				SignalMessage_c v_sigM = new SignalMessage_c(modelRoot);
				Ooaofooa.getDefaultInstance().fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_sigM));

				if (v_sigM != null) {
					v_sigM.relateAcrossR1019To(this);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Relate attempted on null left hand instance.", t);
				}

				if (v_sigM != null) {
					v_sigM.relateAcrossR1021To(v_sig);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Relate attempted on null left hand instance.", t);
				}

				Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

				PropertyParameter_c[] v_parms = PropertyParameter_c
						.getManyC_PPsOnR4006(v_sigProp);

				PropertyParameter_c v_parm = null;
				for (int i37263 = 0; i37263 < v_parms.length; i37263++) {
					v_parm = v_parms[i37263];

					MessageArgument_c v_arg = new MessageArgument_c(modelRoot);
					Ooaofooa.getDefaultInstance().fireModelElementCreated(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_NEW, v_arg));

					ExecutablePropertyArgument_c v_eparg = new ExecutablePropertyArgument_c(
							modelRoot);
					Ooaofooa.getDefaultInstance()
							.fireModelElementCreated(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_NEW,
											v_eparg));

					if (v_arg != null) {
						v_arg.relateAcrossR1001To(v_message);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Relate attempted on null left hand instance.",
								t);
					}

					if (v_eparg != null) {
						v_eparg.relateAcrossR1013To(v_arg);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Relate attempted on null left hand instance.",
								t);
					}

					if (v_eparg != null) {
						v_eparg.relateAcrossR1023To(v_parm);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Relate attempted on null left hand instance.",
								t);
					}

					if (v_arg != null) {
						v_arg.setValue("");
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

			}

		}

	} // End formalizeWithSignal
	public boolean Canformalizeusinginterfacesignal(final java.util.UUID p_Id) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message",
						" Operation entered: AsynchronousMessage::Canformalizeusinginterfacesignal");
		final ModelRoot modelRoot = getModelRoot();
		InterfaceSignal_c v_currentSignal = InterfaceSignal_c
				.getOneC_ASOnR1021(SignalMessage_c.getOneMSG_SIGOnR1019(this));

		if (((v_currentSignal != null) && p_Id.equals(v_currentSignal.getId()))) {

			return false;

		}

		return true;

	} // End canFormalizeUsingInterfaceSignal
	public void Pastemessageargument(final java.util.UUID p_Id) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message",
						" Operation entered: AsynchronousMessage::Pastemessageargument");
		final ModelRoot modelRoot = getModelRoot();
		Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

		if (v_message != null) {
			v_message.Pastemessageargument(p_Id);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End pasteMessageArgument
	public boolean Cancopymessageargument(final java.util.UUID p_Id) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message",
						" Operation entered: AsynchronousMessage::Cancopymessageargument");
		final ModelRoot modelRoot = getModelRoot();
		Message_c v_message = Message_c.getOneMSG_MOnR1018(this);

		return v_message.Cancopymessageargument(p_Id);

	} // End canCopyMessageArgument
	public boolean Canpastemessageargument() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Asynchronous Message",
						" Operation entered: AsynchronousMessage::Canpastemessageargument");
		final ModelRoot modelRoot = getModelRoot();
		return !getIsformal();

	} // End canPasteMessageArgument

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		if (adapter == IActionFilter.class) {
			return AsynchronousMessageActionFilter.getSingleton();
		}
		return null;
	}
} // end Asynchronous Message
