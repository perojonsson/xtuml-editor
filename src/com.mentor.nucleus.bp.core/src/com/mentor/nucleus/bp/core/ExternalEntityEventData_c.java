package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ExternalEntityEventData_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_EXTERNAL_ENTITY_EVENT_DATA extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ExternalEntityEventData_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ExternalEntityEventData_c(ModelRoot modelRoot,
			java.util.UUID p_m_ee_id, java.util.UUID p_m_eeevt_id,
			java.util.UUID p_m_eeedi_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_eeedi_id = IdAssigner.preprocessUUID(p_m_eeedi_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

		Object[] key = {m_eeedi_id, m_eeevt_id, m_ee_id};
		addInstanceToMap(key);
	}
	static public ExternalEntityEventData_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_ee_id, java.util.UUID p_m_eeevt_id,
			java.util.UUID p_m_eeedi_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);
		ExternalEntityEventData_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_eeedi_id, p_m_eeevt_id, p_m_ee_id};
			new_inst = (ExternalEntityEventData_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_eeedi_id = IdAssigner.preprocessUUID(p_m_eeedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ExternalEntityEventData_c(modelRoot, p_m_ee_id,
					p_m_eeevt_id, p_m_eeedi_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ExternalEntityEventData_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_ee_id,
			java.util.UUID p_m_eeevt_id, java.util.UUID p_m_eeedi_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);
		ExternalEntityEventData_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_eeedi_id, p_m_eeevt_id, p_m_ee_id};
			source = (ExternalEntityEventData_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_eeedi_id = IdAssigner.preprocessUUID(p_m_eeedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

				return source;
			}
		}
		// there is no instance matching the id
		ExternalEntityEventData_c new_inst = new ExternalEntityEventData_c(
				modelRoot, p_m_ee_id, p_m_eeevt_id, p_m_eeedi_id);
		return new_inst;
	}
	public ExternalEntityEventData_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_eeevt_id = IdAssigner.NULL_UUID;
		m_eeedi_id = IdAssigner.NULL_UUID;
		m_ee_id = IdAssigner.NULL_UUID;
		Object[] key = {m_eeedi_id, m_eeevt_id, m_ee_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_eeedi_id, m_eeevt_id, m_ee_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_eeedi_id != p_newKey) {

			m_eeedi_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ExternalEntityEventData_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ExternalEntityEventData_c)) {
			return false;
		}

		ExternalEntityEventData_c me = (ExternalEntityEventData_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEeedi_id()) || IdAssigner.NULL_UUID
						.equals(((ExternalEntityEventData_c) elem)
								.getEeedi_id())) && this != elem)) {
			return false;
		}
		if (!getEeedi_id().equals(
				((ExternalEntityEventData_c) elem).getEeedi_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEeevt_id()) || IdAssigner.NULL_UUID
						.equals(((ExternalEntityEventData_c) elem)
								.getEeevt_id())) && this != elem)) {
			return false;
		}
		if (!getEeevt_id().equals(
				((ExternalEntityEventData_c) elem).getEeevt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEe_id()) || IdAssigner.NULL_UUID
						.equals(((ExternalEntityEventData_c) elem).getEe_id())) && this != elem)) {
			return false;
		}
		if (!getEe_id().equals(((ExternalEntityEventData_c) elem).getEe_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ExternalEntityEventData_c)) {
			return false;
		}

		ExternalEntityEventData_c me = (ExternalEntityEventData_c) elem;
		if (!getEeedi_idCachedValue().equals(
				((ExternalEntityEventData_c) elem).getEeedi_idCachedValue()))
			return false;
		if (!getEeevt_idCachedValue().equals(
				((ExternalEntityEventData_c) elem).getEeevt_idCachedValue()))
			return false;
		if (!getEe_idCachedValue().equals(
				((ExternalEntityEventData_c) elem).getEe_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_eeevt_id;
	private java.util.UUID m_eeedi_id;
	private java.util.UUID m_ee_id;

	// declare association references from this class

	// referring navigation

	ExternalEntityEvent_c IsCarriedViaExternalEntityEvent;
	public void relateAcrossR13To(ExternalEntityEvent_c target) {
		relateAcrossR13To(target, true);
	}
	public void relateAcrossR13To(ExternalEntityEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsCarriedViaExternalEntityEvent)
			return; // already related

		if (IsCarriedViaExternalEntityEvent != target) {

			Object oldKey = getInstanceKey();

			if (IsCarriedViaExternalEntityEvent != null) {

				IsCarriedViaExternalEntityEvent.clearBackPointerR13To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ExternalEntityEventData_c.relateAcrossR13To(ExternalEntityEvent_c target)",
									"Relate performed across R13 from External Entity Event Data to External Entity Event without unrelate of prior instance.");
				}
			}

			IsCarriedViaExternalEntityEvent = target;
			m_eeevt_id = target.getEeevt_id();
			if (IdAssigner.NULL_UUID.equals(target.getEe_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ee_id = target.getEe_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR13To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "13", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR13From(ExternalEntityEvent_c target) {
		unrelateAcrossR13From(target, true);
	}
	public void unrelateAcrossR13From(ExternalEntityEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsCarriedViaExternalEntityEvent == null)
			return; // already unrelated

		if (target != IsCarriedViaExternalEntityEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R13",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR13To(this);
		}

		if (IsCarriedViaExternalEntityEvent != null) {

			m_eeevt_id = IsCarriedViaExternalEntityEvent.getEeevt_id();
			m_ee_id = IsCarriedViaExternalEntityEvent.getEe_id();
			if (IdAssigner.NULL_UUID.equals(m_ee_id)) {
				m_ee_id = IsCarriedViaExternalEntityEvent.getEe_idCachedValue();
			}
			IsCarriedViaExternalEntityEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "13", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	ExternalEntityEventDataItem_c MayCarryExternalEntityEventDataItem;
	public void relateAcrossR13To(ExternalEntityEventDataItem_c target) {
		relateAcrossR13To(target, true);
	}
	public void relateAcrossR13To(ExternalEntityEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MayCarryExternalEntityEventDataItem)
			return; // already related

		if (MayCarryExternalEntityEventDataItem != target) {

			Object oldKey = getInstanceKey();

			if (MayCarryExternalEntityEventDataItem != null) {

				MayCarryExternalEntityEventDataItem.clearBackPointerR13To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ExternalEntityEventData_c.relateAcrossR13To(ExternalEntityEventDataItem_c target)",
									"Relate performed across R13 from External Entity Event Data to External Entity Event Data Item without unrelate of prior instance.");
				}
			}

			MayCarryExternalEntityEventDataItem = target;
			m_eeedi_id = target.getEeedi_id();
			if (IdAssigner.NULL_UUID.equals(target.getEe_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ee_id = target.getEe_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR13To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "13", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR13From(ExternalEntityEventDataItem_c target) {
		unrelateAcrossR13From(target, true);
	}
	public void unrelateAcrossR13From(ExternalEntityEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MayCarryExternalEntityEventDataItem == null)
			return; // already unrelated

		if (target != MayCarryExternalEntityEventDataItem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R13",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR13To(this);
		}

		if (MayCarryExternalEntityEventDataItem != null) {

			m_eeedi_id = MayCarryExternalEntityEventDataItem.getEeedi_id();
			m_ee_id = MayCarryExternalEntityEventDataItem.getEe_id();
			if (IdAssigner.NULL_UUID.equals(m_ee_id)) {
				m_ee_id = MayCarryExternalEntityEventDataItem
						.getEe_idCachedValue();
			}
			MayCarryExternalEntityEventDataItem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "13", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEvent_c[] targets) {
		return getOneS_EEEDTOnR13(targets, null);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test) {
		ExternalEntityEventData_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_EEEDTOnR13(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEvent_c target) {
		return getOneS_EEEDTOnR13(target, null);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEvent_c target, boolean loadComponent) {
		return getOneS_EEEDTOnR13(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_EEEDTOnR13(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test) {
		return getOneS_EEEDTOnR13(modelRoot, target, test, true);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneS_EEEDTOnR13(modelRoot, target, test);
	}
	private static ExternalEntityEventData_c find_getOneS_EEEDTOnR13(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayCarryExternalEntityEventDataMayCarry_R13) {
				for (int i = 0; i < target.backPointer_MayCarryExternalEntityEventDataMayCarry_R13
						.size(); ++i) {
					ExternalEntityEventData_c source = (ExternalEntityEventData_c) target.backPointer_MayCarryExternalEntityEventDataMayCarry_R13
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c[] targets) {
		return getManyS_EEEDTsOnR13(targets, null);
	}
	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c[] targets, boolean loadComponent) {
		return getManyS_EEEDTsOnR13(targets, null, loadComponent);
	}
	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyS_EEEDTsOnR13(targets, test, true);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ExternalEntityEventData_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayCarryExternalEntityEventDataMayCarry_R13) {
				for (int j = 0; j < targets[i].backPointer_MayCarryExternalEntityEventDataMayCarry_R13
						.size(); ++j) {
					ExternalEntityEventData_c source = (ExternalEntityEventData_c) targets[i].backPointer_MayCarryExternalEntityEventDataMayCarry_R13
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ExternalEntityEventData_c[] ret_set = new ExternalEntityEventData_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExternalEntityEventData_c[0];
		}
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c target) {
		return getManyS_EEEDTsOnR13(target, null);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c target, boolean loadComponent) {
		return getManyS_EEEDTsOnR13(target, null, loadComponent);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		return getManyS_EEEDTsOnR13(target, test, true);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ExternalEntityEventData_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayCarryExternalEntityEventDataMayCarry_R13) {
			for (int i = 0; i < target.backPointer_MayCarryExternalEntityEventDataMayCarry_R13
					.size(); ++i) {
				ExternalEntityEventData_c source = (ExternalEntityEventData_c) target.backPointer_MayCarryExternalEntityEventDataMayCarry_R13
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ExternalEntityEventData_c[] ret_set = new ExternalEntityEventData_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExternalEntityEventData_c[0];
		}
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEventDataItem_c[] targets) {
		return getOneS_EEEDTOnR13(targets, null);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEventDataItem_c[] targets, ClassQueryInterface_c test) {
		ExternalEntityEventData_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_EEEDTOnR13(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEventDataItem_c target) {
		return getOneS_EEEDTOnR13(target, null);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEventDataItem_c target, boolean loadComponent) {
		return getOneS_EEEDTOnR13(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ExternalEntityEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_EEEDTOnR13(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ModelRoot modelRoot, ExternalEntityEventDataItem_c target,
			ClassQueryInterface_c test) {
		return getOneS_EEEDTOnR13(modelRoot, target, test, true);
	}

	public static ExternalEntityEventData_c getOneS_EEEDTOnR13(
			ModelRoot modelRoot, ExternalEntityEventDataItem_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneS_EEEDTOnR13(modelRoot, target, test);
	}
	private static ExternalEntityEventData_c find_getOneS_EEEDTOnR13(
			ModelRoot modelRoot, ExternalEntityEventDataItem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13) {
				for (int i = 0; i < target.backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13
						.size(); ++i) {
					ExternalEntityEventData_c source = (ExternalEntityEventData_c) target.backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c[] targets) {
		return getManyS_EEEDTsOnR13(targets, null);
	}
	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c[] targets, boolean loadComponent) {
		return getManyS_EEEDTsOnR13(targets, null, loadComponent);
	}
	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c[] targets, ClassQueryInterface_c test) {
		return getManyS_EEEDTsOnR13(targets, test, true);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ExternalEntityEventData_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13) {
				for (int j = 0; j < targets[i].backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13
						.size(); ++j) {
					ExternalEntityEventData_c source = (ExternalEntityEventData_c) targets[i].backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ExternalEntityEventData_c[] ret_set = new ExternalEntityEventData_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExternalEntityEventData_c[0];
		}
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c target) {
		return getManyS_EEEDTsOnR13(target, null);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c target, boolean loadComponent) {
		return getManyS_EEEDTsOnR13(target, null, loadComponent);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c target, ClassQueryInterface_c test) {
		return getManyS_EEEDTsOnR13(target, test, true);
	}

	public static ExternalEntityEventData_c[] getManyS_EEEDTsOnR13(
			ExternalEntityEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ExternalEntityEventData_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13) {
			for (int i = 0; i < target.backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13
					.size(); ++i) {
				ExternalEntityEventData_c source = (ExternalEntityEventData_c) target.backPointer_IsCarriedViaExternalEntityEventDataIsCarriedVia_R13
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ExternalEntityEventData_c[] ret_set = new ExternalEntityEventData_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ExternalEntityEventData_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R13
		ExternalEntityEventDataItem_c relInst56514 = (ExternalEntityEventDataItem_c) baseRoot
				.getInstanceList(ExternalEntityEventDataItem_c.class).get(
						new Object[]{m_eeedi_id, m_ee_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56514 == null) {
			relInst56514 = (ExternalEntityEventDataItem_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(ExternalEntityEventDataItem_c.class)
					.get(new Object[]{m_eeedi_id, m_ee_id});
		}
		if (relInst56514 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56514 = (ExternalEntityEventDataItem_c) roots[i]
						.getInstanceList(ExternalEntityEventDataItem_c.class)
						.get(new Object[]{m_eeedi_id, m_ee_id});
				if (relInst56514 != null)
					break;
			}
		}
		//synchronized
		if (relInst56514 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56514) && !isProxy())) {
				relInst56514.relateAcrossR13To(this, notifyChanges);
			}
		}

		ExternalEntityEvent_c relInst56515 = (ExternalEntityEvent_c) baseRoot
				.getInstanceList(ExternalEntityEvent_c.class).get(
						new Object[]{m_eeevt_id, m_ee_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56515 == null) {
			relInst56515 = (ExternalEntityEvent_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(ExternalEntityEvent_c.class)
					.get(new Object[]{m_eeevt_id, m_ee_id});
		}
		if (relInst56515 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56515 = (ExternalEntityEvent_c) roots[i]
						.getInstanceList(ExternalEntityEvent_c.class).get(
								new Object[]{m_eeevt_id, m_ee_id});
				if (relInst56515 != null)
					break;
			}
		}
		//synchronized
		if (relInst56515 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56515) && !isProxy())) {
				relInst56515.relateAcrossR13To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R13
		// S_EEEDI
		inst = MayCarryExternalEntityEventDataItem;
		unrelateAcrossR13From(MayCarryExternalEntityEventDataItem,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// S_EEEVT
		inst = IsCarriedViaExternalEntityEvent;
		unrelateAcrossR13From(IsCarriedViaExternalEntityEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ExternalEntityEventData_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ExternalEntityEventData_c inst = (ExternalEntityEventData_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ExternalEntityEventData_c ExternalEntityEventDataInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ExternalEntityEventData_c result = findExternalEntityEventDataInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ExternalEntityEventData_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findExternalEntityEventDataInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ExternalEntityEventData_c findExternalEntityEventDataInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ExternalEntityEventData_c x = (ExternalEntityEventData_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ExternalEntityEventData_c ExternalEntityEventDataInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ExternalEntityEventDataInstance(modelRoot, test, true);
	}

	public static ExternalEntityEventData_c ExternalEntityEventDataInstance(
			ModelRoot modelRoot) {
		return ExternalEntityEventDataInstance(modelRoot, null, true);
	}

	public static ExternalEntityEventData_c[] ExternalEntityEventDataInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ExternalEntityEventData_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ExternalEntityEventData_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ExternalEntityEventData_c x = (ExternalEntityEventData_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ExternalEntityEventData_c[] ret_set = new ExternalEntityEventData_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ExternalEntityEventData_c[0];
			}
		}
	}
	public static ExternalEntityEventData_c[] ExternalEntityEventDataInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ExternalEntityEventDataInstances(modelRoot, test, true);
	}
	public static ExternalEntityEventData_c[] ExternalEntityEventDataInstances(
			ModelRoot modelRoot) {
		return ExternalEntityEventDataInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the External Entity Event Data.dispose call: ";
		ExternalEntityEventDataItem_c testR13Inst = ExternalEntityEventDataItem_c
				.getOneS_EEEDIOnR13(this, false);

		if (testR13Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "13 ";
		}

		ExternalEntityEvent_c testR13InstOth = ExternalEntityEvent_c
				.getOneS_EEEVTOnR13(this, false);

		if (testR13InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "13 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"External Entity Event Data", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("eeevt_id")) {
			return true;
		}
		if (attributeName.equals("eeedi_id")) {
			return true;
		}
		if (attributeName.equals("ee_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getEeedi_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEeedi_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getEeevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEeevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getEe_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEe_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getEeevt_idLongBased() {
		if (IsCarriedViaExternalEntityEvent != null) {
			return IsCarriedViaExternalEntityEvent.getEeevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEeevt_id() {
		if (IsCarriedViaExternalEntityEvent != null) {
			return IsCarriedViaExternalEntityEvent.getEeevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEeevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_eeevt_id))
			return m_eeevt_id;
		else
			return getEeevt_id();
	}

	public void setEeevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_eeevt_id)) {
				return;
			}
		} else if (m_eeevt_id != null) {
			if (m_eeevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Eeevt_id", m_eeevt_id, newValue, true);
		m_eeevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEeedi_idLongBased() {
		if (MayCarryExternalEntityEventDataItem != null) {
			return MayCarryExternalEntityEventDataItem.getEeedi_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEeedi_id() {
		if (MayCarryExternalEntityEventDataItem != null) {
			return MayCarryExternalEntityEventDataItem.getEeedi_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEeedi_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_eeedi_id))
			return m_eeedi_id;
		else
			return getEeedi_id();
	}

	public void setEeedi_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_eeedi_id)) {
				return;
			}
		} else if (m_eeedi_id != null) {
			if (m_eeedi_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Eeedi_id", m_eeedi_id, newValue, true);
		m_eeedi_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEe_idLongBased() {
		if (MayCarryExternalEntityEventDataItem != null) {
			return MayCarryExternalEntityEventDataItem.getEe_idLongBased();
		}
		if (IsCarriedViaExternalEntityEvent != null) {
			return IsCarriedViaExternalEntityEvent.getEe_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEe_id() {
		if (MayCarryExternalEntityEventDataItem != null) {
			return MayCarryExternalEntityEventDataItem.getEe_id();
		}
		if (IsCarriedViaExternalEntityEvent != null) {
			return IsCarriedViaExternalEntityEvent.getEe_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEe_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ee_id))
			return m_ee_id;
		else
			return getEe_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "External Entity Event Data", //$NON-NLS-1$
						" Operation entered: External Entity Event Data::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ExternalEntityEventData_c[] objs = ExternalEntityEventData_c
				.ExternalEntityEventDataInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "External Entity Event Data", //$NON-NLS-1$
						" Operation entered: External Entity Event Data::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ExternalEntityEventData_c_test56517_c
				implements
					ClassQueryInterface_c {
			ExternalEntityEventData_c_test56517_c(java.util.UUID p56518,
					java.util.UUID p56519, java.util.UUID p56520) {
				m_p56518 = p56518;
				m_p56519 = p56519;
				m_p56520 = p56520;
			}
			private java.util.UUID m_p56518;
			private java.util.UUID m_p56519;
			private java.util.UUID m_p56520;
			public boolean evaluate(Object candidate) {
				ExternalEntityEventData_c selected = (ExternalEntityEventData_c) candidate;
				boolean retval = false;
				retval = (selected.getEeedi_id().equals(m_p56518))
						& (selected.getEeevt_id().equals(m_p56519))
						& (selected.getEe_id().equals(m_p56520));
				return retval;
			}
		}

		ExternalEntityEventData_c[] objs56516 = ExternalEntityEventData_c
				.ExternalEntityEventDataInstances(modelRoot,
						new ExternalEntityEventData_c_test56517_c(
								getEeedi_id(), getEeevt_id(), getEe_id()));

		if (((objs56516.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"External Entity Event Data", //$NON-NLS-1$
								"Consistency: Object: External Entity Event Data: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56516.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: External Entity Event Data: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56516.length), e);
			}
			retval = false;

		}

		if (((objs56516.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"External Entity Event Data", //$NON-NLS-1$
								"Consistency: Object: External Entity Event Data: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56516.length)
										+ " EEedi_ID: " + "Not Printable" + " EEevt_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: External Entity Event Data: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56516.length)
										+ " EEedi_ID: " + "Not Printable" + " EEevt_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// External Entity Event Data is a link class in association: rel.Numb = 13
		// Other side
		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "External Entity Event Data",
				" Operation entered: ExternalEntityEventData::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ExternalEntityEvent_c v_eeevt = ExternalEntityEvent_c
				.getOneS_EEEVTOnR13(this);

		ExternalEntityEventDataItem_c v_eeedi = ExternalEntityEventDataItem_c
				.getOneS_EEEDIOnR13(this);

		unrelateAcrossR13From(v_eeevt);
		unrelateAcrossR13From(v_eeedi);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "External Entity Event Data",
				" Operation entered: ExternalEntityEventData::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		ExternalEntityEventDataItem_c v_eed_item = ExternalEntityEventDataItem_c
				.getOneS_EEEDIOnR13(this);

		if (((v_eed_item != null))) {

			return v_eed_item.getName();

		}

		else {

			return "";

		}

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end External Entity Event Data
