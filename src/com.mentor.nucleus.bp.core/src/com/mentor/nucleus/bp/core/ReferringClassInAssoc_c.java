      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ReferringClassInAssoc_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_REFERRING_CLASS_IN_ASSOC extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ReferringClassInAssoc_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ReferringClassInAssoc_c(ModelRoot modelRoot,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_rel_id,
       java.util.UUID         p_m_oir_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
        
    Object [] key = {m_oir_id,m_obj_id,m_rel_id};
    addInstanceToMap(key);
  }
  static public ReferringClassInAssoc_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_rel_id,
       java.util.UUID         p_m_oir_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);
      ReferringClassInAssoc_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_oir_id,p_m_obj_id,p_m_rel_id};
          new_inst = (ReferringClassInAssoc_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ReferringClassInAssoc_c(modelRoot,
p_m_obj_id,
p_m_rel_id,
p_m_oir_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ReferringClassInAssoc_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_rel_id,
       java.util.UUID         p_m_oir_id){
    InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);
    ReferringClassInAssoc_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_oir_id
        ,
        p_m_obj_id
        ,
        p_m_rel_id
            };
        source = (ReferringClassInAssoc_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ReferringClassInAssoc_c new_inst = new ReferringClassInAssoc_c(modelRoot,
p_m_obj_id,
p_m_rel_id,
p_m_oir_id
);
    return new_inst;
  }
  public ReferringClassInAssoc_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_oir_id = IdAssigner.NULL_UUID;   
     m_obj_id = IdAssigner.NULL_UUID;   
     m_rel_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_oir_id,m_obj_id,m_rel_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_oir_id,m_obj_id,m_rel_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_oir_id !=  p_newKey ){
	
		m_oir_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ReferringClassInAssoc_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ReferringClassInAssoc_c)) {
           return false;
       }
       
       ReferringClassInAssoc_c me = (ReferringClassInAssoc_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getOir_id()) || IdAssigner.NULL_UUID.equals(((ReferringClassInAssoc_c)elem).getOir_id())) && this != elem)) {
      	return false;
      }
      if (!getOir_id().equals(((ReferringClassInAssoc_c)elem).getOir_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID.equals(((ReferringClassInAssoc_c)elem).getObj_id())) && this != elem)) {
      	return false;
      }
      if (!getObj_id().equals(((ReferringClassInAssoc_c)elem).getObj_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID.equals(((ReferringClassInAssoc_c)elem).getRel_id())) && this != elem)) {
      	return false;
      }
      if (!getRel_id().equals(((ReferringClassInAssoc_c)elem).getRel_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ReferringClassInAssoc_c)) {
           return false;
       }
       
       ReferringClassInAssoc_c me = (ReferringClassInAssoc_c)elem;
      if (!getOir_idCachedValue().equals(((ReferringClassInAssoc_c)elem).getOir_idCachedValue())) return false;
      if (!getObj_idCachedValue().equals(((ReferringClassInAssoc_c)elem).getObj_idCachedValue())) return false;
      if (!getRel_idCachedValue().equals(((ReferringClassInAssoc_c)elem).getRel_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_oir_id ;
  private java.util.UUID         m_obj_id ;
  private java.util.UUID         m_rel_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ClassInAssociation_c IsSupertypeClassInAssociation ;
public void relateAcrossR203To(ClassInAssociation_c target)
{
	relateAcrossR203To(target, true);
}
public void relateAcrossR203To(ClassInAssociation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeClassInAssociation) return;  // already related

    if ( IsSupertypeClassInAssociation != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeClassInAssociation != null) {
    
        IsSupertypeClassInAssociation.clearBackPointerR203To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ReferringClassInAssoc_c.relateAcrossR203To(ClassInAssociation_c target)", 
			"Relate performed across R203 from Referring Class In Assoc to Class In Association without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeClassInAssociation = target ;
        m_oir_id = target.getOir_id();
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
        if(IdAssigner.NULL_UUID.equals(target.getRel_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_rel_id = target.getRel_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR203To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "203", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR203From(ClassInAssociation_c target)
{
	unrelateAcrossR203From(target, true);
}
public void unrelateAcrossR203From(ClassInAssociation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeClassInAssociation == null) return;  // already unrelated
	
	if (target != IsSupertypeClassInAssociation) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R203", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR203To(this);
    }
    

      if(IsSupertypeClassInAssociation != null) {
      
        m_oir_id = IsSupertypeClassInAssociation.getOir_id();
        m_obj_id = IsSupertypeClassInAssociation.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = IsSupertypeClassInAssociation.getObj_idCachedValue();
        }       
        m_rel_id = IsSupertypeClassInAssociation.getRel_id();
        if(IdAssigner.NULL_UUID.equals(m_rel_id))
        {
          m_rel_id = IsSupertypeClassInAssociation.getRel_idCachedValue();
        }       
        IsSupertypeClassInAssociation = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "203", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ReferringClassInAssoc_c getOneR_RGOOnR203(ClassInAssociation_c [] targets)
{
    return getOneR_RGOOnR203(targets, null);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR203(ClassInAssociation_c [] targets, ClassQueryInterface_c test)
{
    ReferringClassInAssoc_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneR_RGOOnR203(targets[i], test);
        }
    }

    return ret_val;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR203(ClassInAssociation_c target)
{
  return getOneR_RGOOnR203(target, null);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR203(ClassInAssociation_c target, boolean loadComponent)
{
    return getOneR_RGOOnR203(target.getModelRoot(), target, null, loadComponent);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR203(ClassInAssociation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneR_RGOOnR203(target.getModelRoot(), target, test);
  }
  return null;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR203(ModelRoot modelRoot, ClassInAssociation_c target, ClassQueryInterface_c test)
{
	return getOneR_RGOOnR203(modelRoot, target, test, true);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR203(ModelRoot modelRoot, ClassInAssociation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneR_RGOOnR203(modelRoot,target,test);
}
private static ReferringClassInAssoc_c find_getOneR_RGOOnR203(ModelRoot modelRoot, ClassInAssociation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ReferringClassInAssoc_c source = (ReferringClassInAssoc_c)target.backPointer_IsSubtypeReferringClassInAssocIsSubtype_R203;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR203(ClassInAssociation_c [] targets)
{
  return getManyR_RGOsOnR203(targets, null);
}
public static ReferringClassInAssoc_c [] getManyR_RGOsOnR203(ClassInAssociation_c [] targets, boolean loadComponent)
{
  return getManyR_RGOsOnR203(targets, null, loadComponent);
}
public static ReferringClassInAssoc_c [] getManyR_RGOsOnR203(ClassInAssociation_c [] targets, ClassQueryInterface_c test)
{
	return getManyR_RGOsOnR203(targets, test, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR203(ClassInAssociation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ReferringClassInAssoc_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ReferringClassInAssoc_c source = (ReferringClassInAssoc_c)targets[i].backPointer_IsSubtypeReferringClassInAssocIsSubtype_R203;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ReferringClassInAssoc_c[] ret_set = new ReferringClassInAssoc_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ReferringClassInAssoc_c[0];
  }
  }

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR203(ClassInAssociation_c target)
{
  if (target != null) {
    ClassInAssociation_c [] targetArray = new ClassInAssociation_c[1];
    targetArray[0] = target;
    return getManyR_RGOsOnR203(targetArray);
  } else {
    ReferringClassInAssoc_c [] result = new ReferringClassInAssoc_c [0] ;
  return result ;
}
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR203(ClassInAssociation_c target, boolean loadComponent)
{
  if (target != null) {
    ClassInAssociation_c [] targetArray = new ClassInAssociation_c[1];
    targetArray[0] = target;
    return getManyR_RGOsOnR203(targetArray, loadComponent);
  } else {
    ReferringClassInAssoc_c [] result = new ReferringClassInAssoc_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<AttributeReferenceInClass_c> backPointer_RefersAcrossAssociationViaAttributeReferenceInClassRefersAcrossAssociationVia_R111 = new ArrayList<AttributeReferenceInClass_c>();

public void setAttributeReferenceInClassOrderInChildListR111(AttributeReferenceInClass_c target, int index) {
	unrelateAcrossR111From(target);
	AttributeReferenceInClass_c[] elements = AttributeReferenceInClass_c.getManyO_REFsOnR111(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR111From((AttributeReferenceInClass_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR111To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR111To((AttributeReferenceInClass_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR111To(AttributeReferenceInClass_c target)
{
  if (target != null) {
    target.relateAcrossR111To(this, true) ;
  }
}

public void relateAcrossR111To(AttributeReferenceInClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR111To(this, notifyChanges) ;
  }
}

public void setBackPointerR111To(AttributeReferenceInClass_c target)
{
  	synchronized (backPointer_RefersAcrossAssociationViaAttributeReferenceInClassRefersAcrossAssociationVia_R111) {
		backPointer_RefersAcrossAssociationViaAttributeReferenceInClassRefersAcrossAssociationVia_R111.add(target);
	}
}

public void unrelateAcrossR111From(AttributeReferenceInClass_c target)
{
  if (target != null) {
    target.unrelateAcrossR111From(this, true) ;
  }
}

public void unrelateAcrossR111From(AttributeReferenceInClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR111From(this, notifyChanges) ;
  }
}

public void clearBackPointerR111To(AttributeReferenceInClass_c target)
{
  synchronized (backPointer_RefersAcrossAssociationViaAttributeReferenceInClassRefersAcrossAssociationVia_R111) {
	    backPointer_RefersAcrossAssociationViaAttributeReferenceInClassRefersAcrossAssociationVia_R111.remove(target);
	}
}

public static ReferringClassInAssoc_c getOneR_RGOOnR111(AttributeReferenceInClass_c [] targets)
{
    return getOneR_RGOOnR111(targets, null);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR111(AttributeReferenceInClass_c [] targets, ClassQueryInterface_c test)
{
    return getOneR_RGOOnR111(targets, test, true);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR111(AttributeReferenceInClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ReferringClassInAssoc_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ReferringClassInAssoc_c candidate_val = getOneR_RGOOnR111(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneR_RGOOnR111(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR111(AttributeReferenceInClass_c target)
{
	return getOneR_RGOOnR111(target, true);
}
public static ReferringClassInAssoc_c getOneR_RGOOnR111(AttributeReferenceInClass_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsUsedToReferClassByReferringClassInAssoc != null){
		target.IsUsedToReferClassByReferringClassInAssoc.loadProxy();
	}
	}
    return target.IsUsedToReferClassByReferringClassInAssoc ;
  } else {
    return null;
  }
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyR_RGOsOnR111(targets, test, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ReferringClassInAssoc_c[0];
  
  
  LinkedHashSet<ReferringClassInAssoc_c> elementsSet = new LinkedHashSet<ReferringClassInAssoc_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsUsedToReferClassByReferringClassInAssoc == null)
	  targets[i].loadProxy();
    ReferringClassInAssoc_c associate = targets[i].IsUsedToReferClassByReferringClassInAssoc;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ReferringClassInAssoc_c[] result = new ReferringClassInAssoc_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c [] targets)
{
  return getManyR_RGOsOnR111(targets, null);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AttributeReferenceInClass_c [] targetArray = new AttributeReferenceInClass_c[1];
    targetArray[0] = target;
    return getManyR_RGOsOnR111(targetArray, test, loadComponent);
  } else {
    ReferringClassInAssoc_c [] result = new ReferringClassInAssoc_c [0] ;
    return result ;
  }
  
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c target,
    ClassQueryInterface_c test)
{
    return getManyR_RGOsOnR111(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c target)
{
    return getManyR_RGOsOnR111(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(AttributeReferenceInClass_c target, boolean loadComponent)
{
    return getManyR_RGOsOnR111(target, null, loadComponent);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR111(ReferredToIdentifierAttribute_c target)
{
  return ReferringClassInAssoc_c.getOneR_RGOOnR111(AttributeReferenceInClass_c.getOneO_REFOnR111(target)) ;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR111(ReferredToIdentifierAttribute_c target,
    ClassQueryInterface_c test)
{
  return ReferringClassInAssoc_c.getOneR_RGOOnR111(AttributeReferenceInClass_c.getManyO_REFsOnR111(target), test) ;
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(ReferredToIdentifierAttribute_c target,
    ClassQueryInterface_c test)
{
	return getManyR_RGOsOnR111(target, test, true);
}
public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(ReferredToIdentifierAttribute_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  AttributeReferenceInClass_c [] associators = AttributeReferenceInClass_c.getManyO_REFsOnR111(target, loadComponent) ;
    return ReferringClassInAssoc_c.getManyR_RGOsOnR111(associators, test, loadComponent) ;
}
public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(ReferredToIdentifierAttribute_c target)
{
    return getManyR_RGOsOnR111(target, null, true);
}
public static ReferringClassInAssoc_c [] getManyR_RGOsOnR111(ReferredToIdentifierAttribute_c target, boolean loadComponent)
{
    return getManyR_RGOsOnR111(target, null, loadComponent);
}


    
  
  
// referred to navigation

ClassAsSubtype_c backPointer_IsSubtypeClassAsSubtypeIsSubtype_R205;

public void setClassAsSubtypeOrderInChildListR205(ClassAsSubtype_c target, int index) {
	unrelateAcrossR205From(target);
	ClassAsSubtype_c[] elements = ClassAsSubtype_c.getManyR_SUBsOnR205(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR205From((ClassAsSubtype_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR205To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR205To((ClassAsSubtype_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR205To(ClassAsSubtype_c target)
{
  if (target != null) {
    target.relateAcrossR205To(this, true) ;
  }
}

public void relateAcrossR205To(ClassAsSubtype_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR205To(this, notifyChanges) ;
  }
}

public void setBackPointerR205To(ClassAsSubtype_c target)
{
    backPointer_IsSubtypeClassAsSubtypeIsSubtype_R205 = target;
}

public void unrelateAcrossR205From(ClassAsSubtype_c target)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, true) ;
  }
}

public void unrelateAcrossR205From(ClassAsSubtype_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, notifyChanges) ;
  }
}

public void clearBackPointerR205To(ClassAsSubtype_c target)
{
	if (target == backPointer_IsSubtypeClassAsSubtypeIsSubtype_R205) {
		backPointer_IsSubtypeClassAsSubtypeIsSubtype_R205 = null;
	}
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSubtype_c [] targets)
{
    return getOneR_RGOOnR205(targets, null);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSubtype_c [] targets, ClassQueryInterface_c test)
{
    return getOneR_RGOOnR205(targets, test, true);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSubtype_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ReferringClassInAssoc_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ReferringClassInAssoc_c candidate_val = getOneR_RGOOnR205(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneR_RGOOnR205(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSubtype_c target)
{
	return getOneR_RGOOnR205(target, true);
}
public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSubtype_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeReferringClassInAssoc ;
  } else {
    return null;
  }
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyR_RGOsOnR205(targets, test, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ReferringClassInAssoc_c[0];
  
  
  LinkedHashSet<ReferringClassInAssoc_c> elementsSet = new LinkedHashSet<ReferringClassInAssoc_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeReferringClassInAssoc == null)
	  targets[i].loadProxy();
    ReferringClassInAssoc_c associate = targets[i].IsSupertypeReferringClassInAssoc;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ReferringClassInAssoc_c[] result = new ReferringClassInAssoc_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c [] targets)
{
  return getManyR_RGOsOnR205(targets, null);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassAsSubtype_c [] targetArray = new ClassAsSubtype_c[1];
    targetArray[0] = target;
    return getManyR_RGOsOnR205(targetArray, test, loadComponent);
  } else {
    ReferringClassInAssoc_c [] result = new ReferringClassInAssoc_c [0] ;
    return result ;
  }
  
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c target,
    ClassQueryInterface_c test)
{
    return getManyR_RGOsOnR205(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c target)
{
    return getManyR_RGOsOnR205(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSubtype_c target, boolean loadComponent)
{
    return getManyR_RGOsOnR205(target, null, loadComponent);
}

  
  
  
// referred to navigation

ClassAsSimpleFormalizer_c backPointer_IsSubtypeClassAsSimpleFormalizerIsSubtype_R205;

public void setClassAsSimpleFormalizerOrderInChildListR205(ClassAsSimpleFormalizer_c target, int index) {
	unrelateAcrossR205From(target);
	ClassAsSimpleFormalizer_c[] elements = ClassAsSimpleFormalizer_c.getManyR_FORMsOnR205(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR205From((ClassAsSimpleFormalizer_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR205To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR205To((ClassAsSimpleFormalizer_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR205To(ClassAsSimpleFormalizer_c target)
{
  if (target != null) {
    target.relateAcrossR205To(this, true) ;
  }
}

public void relateAcrossR205To(ClassAsSimpleFormalizer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR205To(this, notifyChanges) ;
  }
}

public void setBackPointerR205To(ClassAsSimpleFormalizer_c target)
{
    backPointer_IsSubtypeClassAsSimpleFormalizerIsSubtype_R205 = target;
}

public void unrelateAcrossR205From(ClassAsSimpleFormalizer_c target)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, true) ;
  }
}

public void unrelateAcrossR205From(ClassAsSimpleFormalizer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, notifyChanges) ;
  }
}

public void clearBackPointerR205To(ClassAsSimpleFormalizer_c target)
{
	if (target == backPointer_IsSubtypeClassAsSimpleFormalizerIsSubtype_R205) {
		backPointer_IsSubtypeClassAsSimpleFormalizerIsSubtype_R205 = null;
	}
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSimpleFormalizer_c [] targets)
{
    return getOneR_RGOOnR205(targets, null);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSimpleFormalizer_c [] targets, ClassQueryInterface_c test)
{
    return getOneR_RGOOnR205(targets, test, true);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSimpleFormalizer_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ReferringClassInAssoc_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ReferringClassInAssoc_c candidate_val = getOneR_RGOOnR205(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneR_RGOOnR205(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSimpleFormalizer_c target)
{
	return getOneR_RGOOnR205(target, true);
}
public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsSimpleFormalizer_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeReferringClassInAssoc ;
  } else {
    return null;
  }
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyR_RGOsOnR205(targets, test, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ReferringClassInAssoc_c[0];
  
  
  LinkedHashSet<ReferringClassInAssoc_c> elementsSet = new LinkedHashSet<ReferringClassInAssoc_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeReferringClassInAssoc == null)
	  targets[i].loadProxy();
    ReferringClassInAssoc_c associate = targets[i].IsSupertypeReferringClassInAssoc;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ReferringClassInAssoc_c[] result = new ReferringClassInAssoc_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c [] targets)
{
  return getManyR_RGOsOnR205(targets, null);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassAsSimpleFormalizer_c [] targetArray = new ClassAsSimpleFormalizer_c[1];
    targetArray[0] = target;
    return getManyR_RGOsOnR205(targetArray, test, loadComponent);
  } else {
    ReferringClassInAssoc_c [] result = new ReferringClassInAssoc_c [0] ;
    return result ;
  }
  
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c target,
    ClassQueryInterface_c test)
{
    return getManyR_RGOsOnR205(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c target)
{
    return getManyR_RGOsOnR205(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsSimpleFormalizer_c target, boolean loadComponent)
{
    return getManyR_RGOsOnR205(target, null, loadComponent);
}

  
  
  
// referred to navigation

ClassAsLink_c backPointer_IsSubtypeClassAsLinkIsSubtype_R205;

public void setClassAsLinkOrderInChildListR205(ClassAsLink_c target, int index) {
	unrelateAcrossR205From(target);
	ClassAsLink_c[] elements = ClassAsLink_c.getManyR_ASSRsOnR205(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR205From((ClassAsLink_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR205To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR205To((ClassAsLink_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR205To(ClassAsLink_c target)
{
  if (target != null) {
    target.relateAcrossR205To(this, true) ;
  }
}

public void relateAcrossR205To(ClassAsLink_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR205To(this, notifyChanges) ;
  }
}

public void setBackPointerR205To(ClassAsLink_c target)
{
    backPointer_IsSubtypeClassAsLinkIsSubtype_R205 = target;
}

public void unrelateAcrossR205From(ClassAsLink_c target)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, true) ;
  }
}

public void unrelateAcrossR205From(ClassAsLink_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR205From(this, notifyChanges) ;
  }
}

public void clearBackPointerR205To(ClassAsLink_c target)
{
	if (target == backPointer_IsSubtypeClassAsLinkIsSubtype_R205) {
		backPointer_IsSubtypeClassAsLinkIsSubtype_R205 = null;
	}
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsLink_c [] targets)
{
    return getOneR_RGOOnR205(targets, null);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsLink_c [] targets, ClassQueryInterface_c test)
{
    return getOneR_RGOOnR205(targets, test, true);
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsLink_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ReferringClassInAssoc_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ReferringClassInAssoc_c candidate_val = getOneR_RGOOnR205(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneR_RGOOnR205(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsLink_c target)
{
	return getOneR_RGOOnR205(target, true);
}
public static ReferringClassInAssoc_c getOneR_RGOOnR205(ClassAsLink_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeReferringClassInAssoc ;
  } else {
    return null;
  }
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyR_RGOsOnR205(targets, test, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ReferringClassInAssoc_c[0];
  
  
  LinkedHashSet<ReferringClassInAssoc_c> elementsSet = new LinkedHashSet<ReferringClassInAssoc_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeReferringClassInAssoc == null)
	  targets[i].loadProxy();
    ReferringClassInAssoc_c associate = targets[i].IsSupertypeReferringClassInAssoc;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ReferringClassInAssoc_c[] result = new ReferringClassInAssoc_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c [] targets)
{
  return getManyR_RGOsOnR205(targets, null);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassAsLink_c [] targetArray = new ClassAsLink_c[1];
    targetArray[0] = target;
    return getManyR_RGOsOnR205(targetArray, test, loadComponent);
  } else {
    ReferringClassInAssoc_c [] result = new ReferringClassInAssoc_c [0] ;
    return result ;
  }
  
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c target,
    ClassQueryInterface_c test)
{
    return getManyR_RGOsOnR205(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c target)
{
    return getManyR_RGOsOnR205(target, null, true);
}

public static ReferringClassInAssoc_c [] getManyR_RGOsOnR205(ClassAsLink_c target, boolean loadComponent)
{
    return getManyR_RGOsOnR205(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R203
      ClassInAssociation_c relInst58134 = (ClassInAssociation_c) baseRoot.getInstanceList(ClassInAssociation_c.class).get(new Object[] {m_oir_id,m_obj_id,m_rel_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst58134 == null) {
      			relInst58134 = (ClassInAssociation_c) Ooaofooa.getDefaultInstance().getInstanceList(ClassInAssociation_c.class).get(new Object[] {m_oir_id,m_obj_id,m_rel_id});
      		}
			if (relInst58134 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst58134 = (ClassInAssociation_c) roots[i].getInstanceList(ClassInAssociation_c.class).get(new Object[] {m_oir_id,m_obj_id,m_rel_id});
					if (relInst58134 != null)
						break;
				}
			}
			//synchronized
      if ( relInst58134 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst58134) && !isProxy())) {
	      relInst58134.relateAcrossR203To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R203
      // R_OIR
		  inst=IsSupertypeClassInAssociation;
			unrelateAcrossR203From(IsSupertypeClassInAssociation, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ReferringClassInAssoc_c inst = (ReferringClassInAssoc_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ReferringClassInAssoc_c ReferringClassInAssocInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ReferringClassInAssoc_c result=findReferringClassInAssocInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ReferringClassInAssoc_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findReferringClassInAssocInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ReferringClassInAssoc_c findReferringClassInAssocInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ReferringClassInAssoc_c x = (ReferringClassInAssoc_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ReferringClassInAssoc_c ReferringClassInAssocInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ReferringClassInAssocInstance(modelRoot,test,true);
  }
  
  public static ReferringClassInAssoc_c ReferringClassInAssocInstance(ModelRoot modelRoot)
  {
	 return ReferringClassInAssocInstance(modelRoot,null,true);
  }

  public static ReferringClassInAssoc_c [] ReferringClassInAssocInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ReferringClassInAssoc_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ReferringClassInAssoc_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ReferringClassInAssoc_c x = (ReferringClassInAssoc_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ReferringClassInAssoc_c[] ret_set = new ReferringClassInAssoc_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ReferringClassInAssoc_c[0];
			}		
		} 
  }
  public static ReferringClassInAssoc_c [] ReferringClassInAssocInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ReferringClassInAssocInstances(modelRoot,test,true);
  }
  public static ReferringClassInAssoc_c [] ReferringClassInAssocInstances(ModelRoot modelRoot)
  {
	return ReferringClassInAssocInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Referring Class In Assoc.dispose call: ";
	AttributeReferenceInClass_c testR111Inst = AttributeReferenceInClass_c.getOneO_REFOnR111(this, false);

	if ( testR111Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "111 ";
	}
	ClassInAssociation_c testR203Inst1 = ClassInAssociation_c.getOneR_OIROnR203(this, false);

	if ( testR203Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "203 ";
	}
	ClassAsSubtype_c testR205Inst1 = ClassAsSubtype_c.getOneR_SUBOnR205(this, false);

	if ( testR205Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "205 ";
	}
	ClassAsSimpleFormalizer_c testR205Inst2 = ClassAsSimpleFormalizer_c.getOneR_FORMOnR205(this, false);

	if ( testR205Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "205 ";
	}
	ClassAsLink_c testR205Inst3 = ClassAsLink_c.getOneR_ASSROnR205(this, false);

	if ( testR205Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "205 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Referring Class In Assoc", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("oir_id")){
         return true;
      }
      if(attributeName.equals("obj_id")){
         return true;
      }
      if(attributeName.equals("rel_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getOir_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getOir_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getObj_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getObj_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getRel_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getRel_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getOir_idLongBased()
  {
    if ( IsSupertypeClassInAssociation != null )
    {
      return IsSupertypeClassInAssociation.getOir_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getOir_id()
  {
    if ( IsSupertypeClassInAssociation != null )
    {
      return IsSupertypeClassInAssociation.getOir_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeClassInAssociation != null );
 
 }                  

  public java.util.UUID getOir_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_oir_id) )
      return m_oir_id;
    else
      return getOir_id();
  }
  
  public void setOir_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_oir_id)){
	        return;
	    }
	}else if(m_oir_id != null){
	    if(m_oir_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Oir_id", m_oir_id, newValue,true); 
   m_oir_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getObj_idLongBased()
  {
    if ( IsSupertypeClassInAssociation != null )
    {
      return IsSupertypeClassInAssociation.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getObj_id()
  {
    if ( IsSupertypeClassInAssociation != null )
    {
      return IsSupertypeClassInAssociation.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getObj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_obj_id) )
      return m_obj_id;
    else
      return getObj_id();
  }
  
  public void setObj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_obj_id)){
	        return;
	    }
	}else if(m_obj_id != null){
	    if(m_obj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Obj_id", m_obj_id, newValue,true); 
   m_obj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getRel_idLongBased()
  {
    if ( IsSupertypeClassInAssociation != null )
    {
      return IsSupertypeClassInAssociation.getRel_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRel_id()
  {
    if ( IsSupertypeClassInAssociation != null )
    {
      return IsSupertypeClassInAssociation.getRel_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRel_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_rel_id) )
      return m_rel_id;
    else
      return getRel_id();
  }
  
  public void setRel_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_rel_id)){
	        return;
	    }
	}else if(m_rel_id != null){
	    if(m_rel_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Rel_id", m_rel_id, newValue,true); 
   m_rel_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Referring Class In Assoc", //$NON-NLS-1$
	  " Operation entered: Referring Class In Assoc::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ReferringClassInAssoc_c [] objs = ReferringClassInAssoc_c.ReferringClassInAssocInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Referring Class In Assoc", //$NON-NLS-1$
	  " Operation entered: Referring Class In Assoc::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ReferringClassInAssoc_c_test58136_c implements ClassQueryInterface_c
    {
	  ReferringClassInAssoc_c_test58136_c( java.util.UUID            p58137, java.util.UUID            p58138, java.util.UUID            p58139 ) {
	            m_p58137 = p58137; 
m_p58138 = p58138; 
m_p58139 = p58139;
	  }
	  private java.util.UUID             m_p58137; private java.util.UUID             m_p58138; private java.util.UUID             m_p58139; 
	  public boolean evaluate (Object candidate)
	  {
	      ReferringClassInAssoc_c selected = (ReferringClassInAssoc_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOir_id().equals(m_p58137)) & (selected.getObj_id().equals(m_p58138)) & (selected.getRel_id().equals(m_p58139));
	      return retval;
	  }
    }

    ReferringClassInAssoc_c [] objs58135 = 
    ReferringClassInAssoc_c.ReferringClassInAssocInstances(modelRoot, new ReferringClassInAssoc_c_test58136_c(getOir_id(), getObj_id(), getRel_id())) ;

    if ( (  (objs58135.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referring Class In Assoc", //$NON-NLS-1$
           "Consistency: Object: Referring Class In Assoc: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58135.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referring Class In Assoc: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58135.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs58135.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referring Class In Assoc", //$NON-NLS-1$
           "Consistency: Object: Referring Class In Assoc: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58135.length )  + " OIR_ID: " + "Not Printable"  + " Obj_ID: " + "Not Printable"  + " Rel_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referring Class In Assoc: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58135.length )  + " OIR_ID: " + "Not Printable"  + " Obj_ID: " + "Not Printable"  + " Rel_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Referring Class In Assoc is a subtype in association: rel.Numb = 203
          // The supertype class is: Class In Association
    class ClassInAssociation_c_test58143_c implements ClassQueryInterface_c
    {
	  ClassInAssociation_c_test58143_c( java.util.UUID            p58144, java.util.UUID            p58145, java.util.UUID            p58146 ) {
	            m_p58144 = p58144; 
m_p58145 = p58145; 
m_p58146 = p58146;
	  }
	  private java.util.UUID             m_p58144; private java.util.UUID             m_p58145; private java.util.UUID             m_p58146; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassInAssociation_c selected = (ClassInAssociation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOir_id().equals(m_p58144)) & (selected.getObj_id().equals(m_p58145)) & (selected.getRel_id().equals(m_p58146));
	      return retval;
	  }
    }

    ClassInAssociation_c [] objs58142 = 
    ClassInAssociation_c.ClassInAssociationInstances(modelRoot, new ClassInAssociation_c_test58143_c(getOir_id(), getObj_id(), getRel_id())) ;

    if ( (  (objs58142.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referring Class In Assoc", //$NON-NLS-1$
           "Consistency: Object: Referring Class In Assoc: Association: 203: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58142.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referring Class In Assoc: Association: 203: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58142.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 111
            // Link Object: Attribute Reference in Class
            // Other Side Class: Referred To Identifier Attribute
          // Supertype: rel.Numb = 205
    int objs58147 = 0;
            // Subtype Object: Class As Subtype
    class ClassAsSubtype_c_test58148_c implements ClassQueryInterface_c
    {
	  ClassAsSubtype_c_test58148_c( java.util.UUID            p58149, java.util.UUID            p58150, java.util.UUID            p58151 ) {
	            m_p58149 = p58149; 
m_p58150 = p58150; 
m_p58151 = p58151;
	  }
	  private java.util.UUID             m_p58149; private java.util.UUID             m_p58150; private java.util.UUID             m_p58151; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassAsSubtype_c selected = (ClassAsSubtype_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOir_id().equals(m_p58149)) & (selected.getObj_id().equals(m_p58150)) & (selected.getRel_id().equals(m_p58151));
	      return retval;
	  }
    }

    ClassAsSubtype_c [] objs58152 = 
    ClassAsSubtype_c.ClassAsSubtypeInstances(modelRoot, new ClassAsSubtype_c_test58148_c(getOir_id(), getObj_id(), getRel_id())) ;
 
    objs58147 = objs58147 + objs58152.length;
            // Subtype Object: Class As Simple Formalizer
    class ClassAsSimpleFormalizer_c_test58153_c implements ClassQueryInterface_c
    {
	  ClassAsSimpleFormalizer_c_test58153_c( java.util.UUID            p58154, java.util.UUID            p58155, java.util.UUID            p58156 ) {
	            m_p58154 = p58154; 
m_p58155 = p58155; 
m_p58156 = p58156;
	  }
	  private java.util.UUID             m_p58154; private java.util.UUID             m_p58155; private java.util.UUID             m_p58156; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassAsSimpleFormalizer_c selected = (ClassAsSimpleFormalizer_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOir_id().equals(m_p58154)) & (selected.getObj_id().equals(m_p58155)) & (selected.getRel_id().equals(m_p58156));
	      return retval;
	  }
    }

    ClassAsSimpleFormalizer_c [] objs58157 = 
    ClassAsSimpleFormalizer_c.ClassAsSimpleFormalizerInstances(modelRoot, new ClassAsSimpleFormalizer_c_test58153_c(getOir_id(), getObj_id(), getRel_id())) ;
 
    objs58147 = objs58147 + objs58157.length;
            // Subtype Object: Class As Link
    class ClassAsLink_c_test58158_c implements ClassQueryInterface_c
    {
	  ClassAsLink_c_test58158_c( java.util.UUID            p58159, java.util.UUID            p58160, java.util.UUID            p58161 ) {
	            m_p58159 = p58159; 
m_p58160 = p58160; 
m_p58161 = p58161;
	  }
	  private java.util.UUID             m_p58159; private java.util.UUID             m_p58160; private java.util.UUID             m_p58161; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassAsLink_c selected = (ClassAsLink_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOir_id().equals(m_p58159)) & (selected.getObj_id().equals(m_p58160)) & (selected.getRel_id().equals(m_p58161));
	      return retval;
	  }
    }

    ClassAsLink_c [] objs58162 = 
    ClassAsLink_c.ClassAsLinkInstances(modelRoot, new ClassAsLink_c_test58158_c(getOir_id(), getObj_id(), getRel_id())) ;
 
    objs58147 = objs58147 + objs58162.length;
    if ( objs58147 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referring Class In Assoc", //$NON-NLS-1$
           "Consistency: Object: Referring Class In Assoc: Association: 205: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58147 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referring Class In Assoc: Association: 205: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58147 )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referring Class In Assoc", " Operation entered: ReferringClassInAssoc::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ClassAsLink_c v_link = ClassAsLink_c.getOneR_ASSROnR205(this);


ClassAsSubtype_c v_sub = ClassAsSubtype_c.getOneR_SUBOnR205(this);


ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR205(this);


if ( (  (v_link != null)) )
{

if (v_link != null) {
v_link.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_sub != null)) )
{

if (v_sub != null) {
v_sub.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_form != null)) )
{

if (v_form != null) {
v_form.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ClassInAssociation_c v_cia = ClassInAssociation_c.getOneR_OIROnR203(this);


if ( (  (v_cia != null)) )
{

this.unrelateAcrossR203From(v_cia);



}

Clearreferences() ;


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Clearreferences()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referring Class In Assoc", " Operation entered: ReferringClassInAssoc::Clearreferences") ; 
               final ModelRoot modelRoot = getModelRoot();
AttributeReferenceInClass_c [] v_refs = AttributeReferenceInClass_c.getManyO_REFsOnR111(this);


AttributeReferenceInClass_c  v_ref = null;
for ( int i55426 = 0; i55426 < v_refs.length; i55426++)
{
  v_ref = v_refs[i55426] ;

if (v_ref != null) {
v_ref.Migraterefattrordispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End clearReferences

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Referring Class In Assoc
