package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ParameterValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_PARAMETER_VALUE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ParameterValue_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ParameterValue_c(ModelRoot modelRoot, java.util.UUID p_m_value_id,
			java.util.UUID p_m_bparm_id, java.util.UUID p_m_sparm_id,
			java.util.UUID p_m_tparm_id, java.util.UUID p_m_pp_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_bparm_id = IdAssigner.preprocessUUID(p_m_bparm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sparm_id = IdAssigner.preprocessUUID(p_m_sparm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_tparm_id = IdAssigner.preprocessUUID(p_m_tparm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}
	static public ParameterValue_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_bparm_id,
			java.util.UUID p_m_sparm_id, java.util.UUID p_m_tparm_id,
			java.util.UUID p_m_pp_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);
		ParameterValue_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			new_inst = (ParameterValue_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_bparm_id = IdAssigner.preprocessUUID(p_m_bparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sparm_id = IdAssigner.preprocessUUID(p_m_sparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_tparm_id = IdAssigner.preprocessUUID(p_m_tparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ParameterValue_c(modelRoot, p_m_value_id,
					p_m_bparm_id, p_m_sparm_id, p_m_tparm_id, p_m_pp_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ParameterValue_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_bparm_id,
			java.util.UUID p_m_sparm_id, java.util.UUID p_m_tparm_id,
			java.util.UUID p_m_pp_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);
		ParameterValue_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			source = (ParameterValue_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_bparm_id = IdAssigner.preprocessUUID(p_m_bparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sparm_id = IdAssigner.preprocessUUID(p_m_sparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_tparm_id = IdAssigner.preprocessUUID(p_m_tparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

				return source;
			}
		}
		// there is no instance matching the id
		ParameterValue_c new_inst = new ParameterValue_c(modelRoot,
				p_m_value_id, p_m_bparm_id, p_m_sparm_id, p_m_tparm_id,
				p_m_pp_id);
		return new_inst;
	}
	public ParameterValue_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_bparm_id = IdAssigner.NULL_UUID;
		m_sparm_id = IdAssigner.NULL_UUID;
		m_tparm_id = IdAssigner.NULL_UUID;
		m_pp_id = IdAssigner.NULL_UUID;
		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ParameterValue_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ParameterValue_c)) {
			return false;
		}

		ParameterValue_c me = (ParameterValue_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
						.equals(((ParameterValue_c) elem).getValue_id())) && this != elem)) {
			return false;
		}
		if (!getValue_id().equals(((ParameterValue_c) elem).getValue_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ParameterValue_c)) {
			return false;
		}

		ParameterValue_c me = (ParameterValue_c) elem;
		if (!getValue_idCachedValue().equals(
				((ParameterValue_c) elem).getValue_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_bparm_id;
	private java.util.UUID m_sparm_id;
	private java.util.UUID m_tparm_id;
	private java.util.UUID m_pp_id;

	// declare association references from this class

	// referring navigation

	Value_c IsSupertypeValue;
	public void relateAcrossR801To(Value_c target) {
		relateAcrossR801To(target, true);
	}
	public void relateAcrossR801To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeValue)
			return; // already related

		if (IsSupertypeValue != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeValue != null) {

				IsSupertypeValue.clearBackPointerR801To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ParameterValue_c.relateAcrossR801To(Value_c target)",
									"Relate performed across R801 from Parameter Value to Value without unrelate of prior instance.");
				}
			}

			IsSupertypeValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR801To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR801From(Value_c target) {
		unrelateAcrossR801From(target, true);
	}
	public void unrelateAcrossR801From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeValue == null)
			return; // already unrelated

		if (target != IsSupertypeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R801",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR801To(this);
		}

		if (IsSupertypeValue != null) {

			m_value_id = IsSupertypeValue.getValue_id();
			IsSupertypeValue = null;
			target.removeRef();
		}
	}

	public static ParameterValue_c getOneV_PVLOnR801(Value_c[] targets) {
		return getOneV_PVLOnR801(targets, null);
	}

	public static ParameterValue_c getOneV_PVLOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		ParameterValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PVLOnR801(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ParameterValue_c getOneV_PVLOnR801(Value_c target) {
		return getOneV_PVLOnR801(target, null);
	}

	public static ParameterValue_c getOneV_PVLOnR801(Value_c target,
			boolean loadComponent) {
		return getOneV_PVLOnR801(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ParameterValue_c getOneV_PVLOnR801(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PVLOnR801(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ParameterValue_c getOneV_PVLOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_PVLOnR801(modelRoot, target, test, true);
	}

	public static ParameterValue_c getOneV_PVLOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_PVLOnR801(modelRoot, target, test);
	}
	private static ParameterValue_c find_getOneV_PVLOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ParameterValue_c source = (ParameterValue_c) target.backPointer_IsSubtypeParameterValueIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ParameterValue_c[] getManyV_PVLsOnR801(Value_c[] targets) {
		return getManyV_PVLsOnR801(targets, null);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR801(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_PVLsOnR801(targets, null, loadComponent);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_PVLsOnR801(targets, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR801(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ParameterValue_c source = (ParameterValue_c) targets[i].backPointer_IsSubtypeParameterValueIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	public static ParameterValue_c[] getManyV_PVLsOnR801(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_PVLsOnR801(targetArray);
		} else {
			ParameterValue_c[] result = new ParameterValue_c[0];
			return result;
		}
	}

	public static ParameterValue_c[] getManyV_PVLsOnR801(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_PVLsOnR801(targetArray, loadComponent);
		} else {
			ParameterValue_c[] result = new ParameterValue_c[0];
			return result;
		}
	}

	// referring navigation

	BridgeParameter_c IsAValueOfBridgeParameter;
	public void relateAcrossR831To(BridgeParameter_c target) {
		relateAcrossR831To(target, true);
	}
	public void relateAcrossR831To(BridgeParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsAValueOfBridgeParameter)
			return; // already related

		if (IsAValueOfBridgeParameter != target) {

			Object oldKey = getInstanceKey();

			if (IsAValueOfBridgeParameter != null) {

				IsAValueOfBridgeParameter.clearBackPointerR831To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ParameterValue_c.relateAcrossR831To(BridgeParameter_c target)",
									"Relate performed across R831 from Parameter Value to Bridge Parameter without unrelate of prior instance.");
				}
			}

			IsAValueOfBridgeParameter = target;
			m_bparm_id = target.getBparm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR831To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR831From(BridgeParameter_c target) {
		unrelateAcrossR831From(target, true);
	}
	public void unrelateAcrossR831From(BridgeParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsAValueOfBridgeParameter == null)
			return; // already unrelated

		if (target != IsAValueOfBridgeParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R831",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR831To(this);
		}

		if (IsAValueOfBridgeParameter != null) {

			m_bparm_id = IsAValueOfBridgeParameter.getBparm_id();
			IsAValueOfBridgeParameter = null;
			target.removeRef();
		}
	}

	public static ParameterValue_c getOneV_PVLOnR831(BridgeParameter_c[] targets) {
		return getOneV_PVLOnR831(targets, null);
	}

	public static ParameterValue_c getOneV_PVLOnR831(
			BridgeParameter_c[] targets, ClassQueryInterface_c test) {
		ParameterValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PVLOnR831(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ParameterValue_c getOneV_PVLOnR831(BridgeParameter_c target) {
		return getOneV_PVLOnR831(target, null);
	}

	public static ParameterValue_c getOneV_PVLOnR831(BridgeParameter_c target,
			boolean loadComponent) {
		return getOneV_PVLOnR831(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ParameterValue_c getOneV_PVLOnR831(BridgeParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PVLOnR831(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ParameterValue_c getOneV_PVLOnR831(ModelRoot modelRoot,
			BridgeParameter_c target, ClassQueryInterface_c test) {
		return getOneV_PVLOnR831(modelRoot, target, test, true);
	}

	public static ParameterValue_c getOneV_PVLOnR831(ModelRoot modelRoot,
			BridgeParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PVLOnR831(modelRoot, target, test);
	}
	private static ParameterValue_c find_getOneV_PVLOnR831(ModelRoot modelRoot,
			BridgeParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ParameterValue_R831) {
				for (int i = 0; i < target.backPointer_ParameterValue_R831
						.size(); ++i) {
					ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R831
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c[] targets) {
		return getManyV_PVLsOnR831(targets, null);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c[] targets, boolean loadComponent) {
		return getManyV_PVLsOnR831(targets, null, loadComponent);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR831(targets, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ParameterValue_R831) {
				for (int j = 0; j < targets[i].backPointer_ParameterValue_R831
						.size(); ++j) {
					ParameterValue_c source = (ParameterValue_c) targets[i].backPointer_ParameterValue_R831
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c target) {
		return getManyV_PVLsOnR831(target, null);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c target, boolean loadComponent) {
		return getManyV_PVLsOnR831(target, null, loadComponent);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c target, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR831(target, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR831(
			BridgeParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ParameterValue_R831) {
			for (int i = 0; i < target.backPointer_ParameterValue_R831.size(); ++i) {
				ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R831
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	// referring navigation

	FunctionParameter_c IsAValueOfFunctionParameter;
	public void relateAcrossR832To(FunctionParameter_c target) {
		relateAcrossR832To(target, true);
	}
	public void relateAcrossR832To(FunctionParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsAValueOfFunctionParameter)
			return; // already related

		if (IsAValueOfFunctionParameter != target) {

			Object oldKey = getInstanceKey();

			if (IsAValueOfFunctionParameter != null) {

				IsAValueOfFunctionParameter.clearBackPointerR832To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ParameterValue_c.relateAcrossR832To(FunctionParameter_c target)",
									"Relate performed across R832 from Parameter Value to Function Parameter without unrelate of prior instance.");
				}
			}

			IsAValueOfFunctionParameter = target;
			m_sparm_id = target.getSparm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR832To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR832From(FunctionParameter_c target) {
		unrelateAcrossR832From(target, true);
	}
	public void unrelateAcrossR832From(FunctionParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsAValueOfFunctionParameter == null)
			return; // already unrelated

		if (target != IsAValueOfFunctionParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R832",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR832To(this);
		}

		if (IsAValueOfFunctionParameter != null) {

			m_sparm_id = IsAValueOfFunctionParameter.getSparm_id();
			IsAValueOfFunctionParameter = null;
			target.removeRef();
		}
	}

	public static ParameterValue_c getOneV_PVLOnR832(
			FunctionParameter_c[] targets) {
		return getOneV_PVLOnR832(targets, null);
	}

	public static ParameterValue_c getOneV_PVLOnR832(
			FunctionParameter_c[] targets, ClassQueryInterface_c test) {
		ParameterValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PVLOnR832(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ParameterValue_c getOneV_PVLOnR832(FunctionParameter_c target) {
		return getOneV_PVLOnR832(target, null);
	}

	public static ParameterValue_c getOneV_PVLOnR832(
			FunctionParameter_c target, boolean loadComponent) {
		return getOneV_PVLOnR832(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ParameterValue_c getOneV_PVLOnR832(
			FunctionParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PVLOnR832(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ParameterValue_c getOneV_PVLOnR832(ModelRoot modelRoot,
			FunctionParameter_c target, ClassQueryInterface_c test) {
		return getOneV_PVLOnR832(modelRoot, target, test, true);
	}

	public static ParameterValue_c getOneV_PVLOnR832(ModelRoot modelRoot,
			FunctionParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PVLOnR832(modelRoot, target, test);
	}
	private static ParameterValue_c find_getOneV_PVLOnR832(ModelRoot modelRoot,
			FunctionParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ParameterValue_R832) {
				for (int i = 0; i < target.backPointer_ParameterValue_R832
						.size(); ++i) {
					ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R832
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c[] targets) {
		return getManyV_PVLsOnR832(targets, null);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c[] targets, boolean loadComponent) {
		return getManyV_PVLsOnR832(targets, null, loadComponent);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR832(targets, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ParameterValue_R832) {
				for (int j = 0; j < targets[i].backPointer_ParameterValue_R832
						.size(); ++j) {
					ParameterValue_c source = (ParameterValue_c) targets[i].backPointer_ParameterValue_R832
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c target) {
		return getManyV_PVLsOnR832(target, null);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c target, boolean loadComponent) {
		return getManyV_PVLsOnR832(target, null, loadComponent);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c target, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR832(target, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR832(
			FunctionParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ParameterValue_R832) {
			for (int i = 0; i < target.backPointer_ParameterValue_R832.size(); ++i) {
				ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R832
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	// referring navigation

	OperationParameter_c IsAValueOfOperationParameter;
	public void relateAcrossR833To(OperationParameter_c target) {
		relateAcrossR833To(target, true);
	}
	public void relateAcrossR833To(OperationParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsAValueOfOperationParameter)
			return; // already related

		if (IsAValueOfOperationParameter != target) {

			Object oldKey = getInstanceKey();

			if (IsAValueOfOperationParameter != null) {

				IsAValueOfOperationParameter.clearBackPointerR833To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ParameterValue_c.relateAcrossR833To(OperationParameter_c target)",
									"Relate performed across R833 from Parameter Value to Operation Parameter without unrelate of prior instance.");
				}
			}

			IsAValueOfOperationParameter = target;
			m_tparm_id = target.getTparm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR833To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR833From(OperationParameter_c target) {
		unrelateAcrossR833From(target, true);
	}
	public void unrelateAcrossR833From(OperationParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsAValueOfOperationParameter == null)
			return; // already unrelated

		if (target != IsAValueOfOperationParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R833",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR833To(this);
		}

		if (IsAValueOfOperationParameter != null) {

			m_tparm_id = IsAValueOfOperationParameter.getTparm_id();
			IsAValueOfOperationParameter = null;
			target.removeRef();
		}
	}

	public static ParameterValue_c getOneV_PVLOnR833(
			OperationParameter_c[] targets) {
		return getOneV_PVLOnR833(targets, null);
	}

	public static ParameterValue_c getOneV_PVLOnR833(
			OperationParameter_c[] targets, ClassQueryInterface_c test) {
		ParameterValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PVLOnR833(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ParameterValue_c getOneV_PVLOnR833(OperationParameter_c target) {
		return getOneV_PVLOnR833(target, null);
	}

	public static ParameterValue_c getOneV_PVLOnR833(
			OperationParameter_c target, boolean loadComponent) {
		return getOneV_PVLOnR833(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ParameterValue_c getOneV_PVLOnR833(
			OperationParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PVLOnR833(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ParameterValue_c getOneV_PVLOnR833(ModelRoot modelRoot,
			OperationParameter_c target, ClassQueryInterface_c test) {
		return getOneV_PVLOnR833(modelRoot, target, test, true);
	}

	public static ParameterValue_c getOneV_PVLOnR833(ModelRoot modelRoot,
			OperationParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PVLOnR833(modelRoot, target, test);
	}
	private static ParameterValue_c find_getOneV_PVLOnR833(ModelRoot modelRoot,
			OperationParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ParameterValue_R833) {
				for (int i = 0; i < target.backPointer_ParameterValue_R833
						.size(); ++i) {
					ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R833
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c[] targets) {
		return getManyV_PVLsOnR833(targets, null);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c[] targets, boolean loadComponent) {
		return getManyV_PVLsOnR833(targets, null, loadComponent);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR833(targets, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ParameterValue_R833) {
				for (int j = 0; j < targets[i].backPointer_ParameterValue_R833
						.size(); ++j) {
					ParameterValue_c source = (ParameterValue_c) targets[i].backPointer_ParameterValue_R833
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c target) {
		return getManyV_PVLsOnR833(target, null);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c target, boolean loadComponent) {
		return getManyV_PVLsOnR833(target, null, loadComponent);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c target, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR833(target, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR833(
			OperationParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ParameterValue_R833) {
			for (int i = 0; i < target.backPointer_ParameterValue_R833.size(); ++i) {
				ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R833
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	// referring navigation

	PropertyParameter_c IsAValueOfPropertyParameter;
	public void relateAcrossR843To(PropertyParameter_c target) {
		relateAcrossR843To(target, true);
	}
	public void relateAcrossR843To(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsAValueOfPropertyParameter)
			return; // already related

		if (IsAValueOfPropertyParameter != target) {

			Object oldKey = getInstanceKey();

			if (IsAValueOfPropertyParameter != null) {

				IsAValueOfPropertyParameter.clearBackPointerR843To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ParameterValue_c.relateAcrossR843To(PropertyParameter_c target)",
									"Relate performed across R843 from Parameter Value to Property Parameter without unrelate of prior instance.");
				}
			}

			IsAValueOfPropertyParameter = target;
			m_pp_id = target.getPp_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR843To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR843From(PropertyParameter_c target) {
		unrelateAcrossR843From(target, true);
	}
	public void unrelateAcrossR843From(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsAValueOfPropertyParameter == null)
			return; // already unrelated

		if (target != IsAValueOfPropertyParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R843",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR843To(this);
		}

		if (IsAValueOfPropertyParameter != null) {

			m_pp_id = IsAValueOfPropertyParameter.getPp_id();
			IsAValueOfPropertyParameter = null;
			target.removeRef();
		}
	}

	public static ParameterValue_c getOneV_PVLOnR843(
			PropertyParameter_c[] targets) {
		return getOneV_PVLOnR843(targets, null);
	}

	public static ParameterValue_c getOneV_PVLOnR843(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		ParameterValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PVLOnR843(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ParameterValue_c getOneV_PVLOnR843(PropertyParameter_c target) {
		return getOneV_PVLOnR843(target, null);
	}

	public static ParameterValue_c getOneV_PVLOnR843(
			PropertyParameter_c target, boolean loadComponent) {
		return getOneV_PVLOnR843(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ParameterValue_c getOneV_PVLOnR843(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PVLOnR843(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ParameterValue_c getOneV_PVLOnR843(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getOneV_PVLOnR843(modelRoot, target, test, true);
	}

	public static ParameterValue_c getOneV_PVLOnR843(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PVLOnR843(modelRoot, target, test);
	}
	private static ParameterValue_c find_getOneV_PVLOnR843(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ParameterValue_R843) {
				for (int i = 0; i < target.backPointer_ParameterValue_R843
						.size(); ++i) {
					ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R843
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c[] targets) {
		return getManyV_PVLsOnR843(targets, null);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c[] targets, boolean loadComponent) {
		return getManyV_PVLsOnR843(targets, null, loadComponent);
	}
	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR843(targets, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ParameterValue_R843) {
				for (int j = 0; j < targets[i].backPointer_ParameterValue_R843
						.size(); ++j) {
					ParameterValue_c source = (ParameterValue_c) targets[i].backPointer_ParameterValue_R843
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c target) {
		return getManyV_PVLsOnR843(target, null);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c target, boolean loadComponent) {
		return getManyV_PVLsOnR843(target, null, loadComponent);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getManyV_PVLsOnR843(target, test, true);
	}

	public static ParameterValue_c[] getManyV_PVLsOnR843(
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ParameterValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ParameterValue_R843) {
			for (int i = 0; i < target.backPointer_ParameterValue_R843.size(); ++i) {
				ParameterValue_c source = (ParameterValue_c) target.backPointer_ParameterValue_R843
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ParameterValue_c[] ret_set = new ParameterValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ParameterValue_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R801
		Value_c relInst38043 = (Value_c) baseRoot
				.getInstanceList(Value_c.class).get(new Object[]{m_value_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38043 == null) {
			relInst38043 = (Value_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Value_c.class)
					.get(new Object[]{m_value_id});
		}
		if (relInst38043 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38043 = (Value_c) roots[i]
						.getInstanceList(Value_c.class).get(
								new Object[]{m_value_id});
				if (relInst38043 != null)
					break;
			}
		}
		//synchronized
		if (relInst38043 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38043) && !isProxy())) {
				relInst38043.relateAcrossR801To(this, notifyChanges);
			}
		}

		if (IsAValueOfBridgeParameter == null) {
			// R831
			BridgeParameter_c relInst38044 = (BridgeParameter_c) baseRoot
					.getInstanceList(BridgeParameter_c.class).get(
							new Object[]{m_bparm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38044 == null) {
				relInst38044 = (BridgeParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(BridgeParameter_c.class)
						.get(new Object[]{m_bparm_id});
			}
			if (relInst38044 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38044 = (BridgeParameter_c) roots[i]
							.getInstanceList(BridgeParameter_c.class).get(
									new Object[]{m_bparm_id});
					if (relInst38044 != null)
						break;
				}
			}
			//synchronized
			if (relInst38044 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38044) && !isProxy())) {
					relInst38044.relateAcrossR831To(this, notifyChanges);
				}
			}
		}

		if (IsAValueOfFunctionParameter == null) {
			// R832
			FunctionParameter_c relInst38045 = (FunctionParameter_c) baseRoot
					.getInstanceList(FunctionParameter_c.class).get(
							new Object[]{m_sparm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38045 == null) {
				relInst38045 = (FunctionParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(FunctionParameter_c.class)
						.get(new Object[]{m_sparm_id});
			}
			if (relInst38045 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38045 = (FunctionParameter_c) roots[i]
							.getInstanceList(FunctionParameter_c.class).get(
									new Object[]{m_sparm_id});
					if (relInst38045 != null)
						break;
				}
			}
			//synchronized
			if (relInst38045 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38045) && !isProxy())) {
					relInst38045.relateAcrossR832To(this, notifyChanges);
				}
			}
		}

		if (IsAValueOfOperationParameter == null) {
			// R833
			OperationParameter_c relInst38046 = (OperationParameter_c) baseRoot
					.getInstanceList(OperationParameter_c.class).get(
							new Object[]{m_tparm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38046 == null) {
				relInst38046 = (OperationParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(OperationParameter_c.class)
						.get(new Object[]{m_tparm_id});
			}
			if (relInst38046 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38046 = (OperationParameter_c) roots[i]
							.getInstanceList(OperationParameter_c.class).get(
									new Object[]{m_tparm_id});
					if (relInst38046 != null)
						break;
				}
			}
			//synchronized
			if (relInst38046 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38046) && !isProxy())) {
					relInst38046.relateAcrossR833To(this, notifyChanges);
				}
			}
		}

		if (IsAValueOfPropertyParameter == null) {
			// R843
			PropertyParameter_c relInst38047 = (PropertyParameter_c) baseRoot
					.getInstanceList(PropertyParameter_c.class).get(
							new Object[]{m_pp_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38047 == null) {
				relInst38047 = (PropertyParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(PropertyParameter_c.class)
						.get(new Object[]{m_pp_id});
			}
			if (relInst38047 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38047 = (PropertyParameter_c) roots[i]
							.getInstanceList(PropertyParameter_c.class).get(
									new Object[]{m_pp_id});
					if (relInst38047 != null)
						break;
				}
			}
			//synchronized
			if (relInst38047 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38047) && !isProxy())) {
					relInst38047.relateAcrossR843To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R801
		// V_VAL
		inst = IsSupertypeValue;
		unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R831
		// S_BPARM
		inst = IsAValueOfBridgeParameter;
		unrelateAcrossR831From(IsAValueOfBridgeParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R832
		// S_SPARM
		inst = IsAValueOfFunctionParameter;
		unrelateAcrossR832From(IsAValueOfFunctionParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R833
		// O_TPARM
		inst = IsAValueOfOperationParameter;
		unrelateAcrossR833From(IsAValueOfOperationParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R843
		// C_PP
		inst = IsAValueOfPropertyParameter;
		unrelateAcrossR843From(IsAValueOfPropertyParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ParameterValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ParameterValue_c inst = (ParameterValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ParameterValue_c ParameterValueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ParameterValue_c result = findParameterValueInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static ParameterValue_c findParameterValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ParameterValue_c x = (ParameterValue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ParameterValue_c ParameterValueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ParameterValueInstance(modelRoot, test, true);
	}

	public static ParameterValue_c ParameterValueInstance(ModelRoot modelRoot) {
		return ParameterValueInstance(modelRoot, null, true);
	}

	public static ParameterValue_c[] ParameterValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ParameterValue_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ParameterValue_c x = (ParameterValue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ParameterValue_c[] ret_set = new ParameterValue_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ParameterValue_c[0];
			}
		}
	}
	public static ParameterValue_c[] ParameterValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ParameterValueInstances(modelRoot, test, true);
	}
	public static ParameterValue_c[] ParameterValueInstances(ModelRoot modelRoot) {
		return ParameterValueInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Parameter Value.dispose call: ";
		Value_c testR801Inst2 = Value_c.getOneV_VALOnR801(this, false);

		if (testR801Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "801 ";
		}
		BridgeParameter_c testR831Inst = BridgeParameter_c.getOneS_BPARMOnR831(
				this, false);

		if (testR831Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "831 ";
		}
		FunctionParameter_c testR832Inst = FunctionParameter_c
				.getOneS_SPARMOnR832(this, false);

		if (testR832Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "832 ";
		}
		OperationParameter_c testR833Inst = OperationParameter_c
				.getOneO_TPARMOnR833(this, false);

		if (testR833Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "833 ";
		}
		PropertyParameter_c testR843Inst = PropertyParameter_c
				.getOneC_PPOnR843(this, false);

		if (testR843Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "843 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Parameter Value",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("bparm_id")) {
			return true;
		}
		if (attributeName.equals("sparm_id")) {
			return true;
		}
		if (attributeName.equals("tparm_id")) {
			return true;
		}
		if (attributeName.equals("pp_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeValue != null);

	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getBparm_idLongBased() {
		if (IsAValueOfBridgeParameter != null) {
			return IsAValueOfBridgeParameter.getBparm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBparm_id() {
		if (IsAValueOfBridgeParameter != null) {
			return IsAValueOfBridgeParameter.getBparm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBparm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_bparm_id))
			return m_bparm_id;
		else
			return getBparm_id();
	}

	public void setBparm_id(java.util.UUID newValue) {
		m_bparm_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSparm_idLongBased() {
		if (IsAValueOfFunctionParameter != null) {
			return IsAValueOfFunctionParameter.getSparm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSparm_id() {
		if (IsAValueOfFunctionParameter != null) {
			return IsAValueOfFunctionParameter.getSparm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSparm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sparm_id))
			return m_sparm_id;
		else
			return getSparm_id();
	}

	public void setSparm_id(java.util.UUID newValue) {
		m_sparm_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getTparm_idLongBased() {
		if (IsAValueOfOperationParameter != null) {
			return IsAValueOfOperationParameter.getTparm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTparm_id() {
		if (IsAValueOfOperationParameter != null) {
			return IsAValueOfOperationParameter.getTparm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getTparm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_tparm_id))
			return m_tparm_id;
		else
			return getTparm_id();
	}

	public void setTparm_id(java.util.UUID newValue) {
		m_tparm_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getPp_idLongBased() {
		if (IsAValueOfPropertyParameter != null) {
			return IsAValueOfPropertyParameter.getPp_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPp_id() {
		if (IsAValueOfPropertyParameter != null) {
			return IsAValueOfPropertyParameter.getPp_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPp_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_pp_id))
			return m_pp_id;
		else
			return getPp_id();
	}

	public void setPp_id(java.util.UUID newValue) {
		m_pp_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Parameter Value", //$NON-NLS-1$
				" Operation entered: Parameter Value::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ParameterValue_c[] objs = ParameterValue_c.ParameterValueInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Parameter Value", //$NON-NLS-1$
				" Operation entered: Parameter Value::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ParameterValue_c_test38049_c implements ClassQueryInterface_c {
			ParameterValue_c_test38049_c(java.util.UUID p38050) {
				m_p38050 = p38050;
			}
			private java.util.UUID m_p38050;
			public boolean evaluate(Object candidate) {
				ParameterValue_c selected = (ParameterValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38050));
				return retval;
			}
		}

		ParameterValue_c[] objs38048 = ParameterValue_c
				.ParameterValueInstances(modelRoot,
						new ParameterValue_c_test38049_c(getValue_id()));

		if (((objs38048.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38048.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Parameter Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs38048.length), e);
			}
			retval = false;

		}

		if (((objs38048.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38048.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Parameter Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38048.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Parameter Value is a subtype in association: rel.Numb = 801
		// The supertype class is: Value
		class Value_c_test38054_c implements ClassQueryInterface_c {
			Value_c_test38054_c(java.util.UUID p38055) {
				m_p38055 = p38055;
			}
			private java.util.UUID m_p38055;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38055));
				return retval;
			}
		}

		Value_c[] objs38053 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38054_c(getValue_id()));

		if (((objs38053.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38053.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Parameter Value: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38053.length), e);
			}
			retval = false;

		}

		// Parameter Value is a referring class in association: rel.Numb = 831
		// The participating class is: Bridge Parameter
		class BridgeParameter_c_test38057_c implements ClassQueryInterface_c {
			BridgeParameter_c_test38057_c(java.util.UUID p38058) {
				m_p38058 = p38058;
			}
			private java.util.UUID m_p38058;
			public boolean evaluate(Object candidate) {
				BridgeParameter_c selected = (BridgeParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getBparm_id().equals(m_p38058));
				return retval;
			}
		}

		BridgeParameter_c[] objs38056 = BridgeParameter_c
				.BridgeParameterInstances(modelRoot,
						new BridgeParameter_c_test38057_c(getBparm_id()));

		if (((objs38056.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Association: 831: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38056.length)
										+ " BParm_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Parameter Value: Association: 831: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38056.length)
										+ " BParm_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Parameter Value is a referring class in association: rel.Numb = 832
		// The participating class is: Function Parameter
		class FunctionParameter_c_test38060_c implements ClassQueryInterface_c {
			FunctionParameter_c_test38060_c(java.util.UUID p38061) {
				m_p38061 = p38061;
			}
			private java.util.UUID m_p38061;
			public boolean evaluate(Object candidate) {
				FunctionParameter_c selected = (FunctionParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getSparm_id().equals(m_p38061));
				return retval;
			}
		}

		FunctionParameter_c[] objs38059 = FunctionParameter_c
				.FunctionParameterInstances(modelRoot,
						new FunctionParameter_c_test38060_c(getSparm_id()));

		if (((objs38059.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Association: 832: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38059.length)
										+ " SParm_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Parameter Value: Association: 832: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38059.length)
										+ " SParm_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Parameter Value is a referring class in association: rel.Numb = 833
		// The participating class is: Operation Parameter
		class OperationParameter_c_test38063_c implements ClassQueryInterface_c {
			OperationParameter_c_test38063_c(java.util.UUID p38064) {
				m_p38064 = p38064;
			}
			private java.util.UUID m_p38064;
			public boolean evaluate(Object candidate) {
				OperationParameter_c selected = (OperationParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getTparm_id().equals(m_p38064));
				return retval;
			}
		}

		OperationParameter_c[] objs38062 = OperationParameter_c
				.OperationParameterInstances(modelRoot,
						new OperationParameter_c_test38063_c(getTparm_id()));

		if (((objs38062.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Association: 833: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38062.length)
										+ " TParm_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Parameter Value: Association: 833: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38062.length)
										+ " TParm_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Parameter Value is a referring class in association: rel.Numb = 843
		// The participating class is: Property Parameter
		class PropertyParameter_c_test38066_c implements ClassQueryInterface_c {
			PropertyParameter_c_test38066_c(java.util.UUID p38067) {
				m_p38067 = p38067;
			}
			private java.util.UUID m_p38067;
			public boolean evaluate(Object candidate) {
				PropertyParameter_c selected = (PropertyParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getPp_id().equals(m_p38067));
				return retval;
			}
		}

		PropertyParameter_c[] objs38065 = PropertyParameter_c
				.PropertyParameterInstances(modelRoot,
						new PropertyParameter_c_test38066_c(getPp_id()));

		if (((objs38065.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Parameter Value", //$NON-NLS-1$
								"Consistency: Object: Parameter Value: Association: 843: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38065.length)
										+ " PP_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Parameter Value: Association: 843: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38065.length)
										+ " PP_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Parameter Value",
				" Operation entered: ParameterValue::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		BridgeParameter_c v_bparm = BridgeParameter_c.getOneS_BPARMOnR831(this);

		if ((v_bparm != null)) {

			this.unrelateAcrossR831From(v_bparm);

		}

		FunctionParameter_c v_sparm = FunctionParameter_c
				.getOneS_SPARMOnR832(this);

		if ((v_sparm != null)) {

			this.unrelateAcrossR832From(v_sparm);

		}

		OperationParameter_c v_tparm = OperationParameter_c
				.getOneO_TPARMOnR833(this);

		if ((v_tparm != null)) {

			this.unrelateAcrossR833From(v_tparm);

		}

		PropertyParameter_c v_pparm = PropertyParameter_c
				.getOneC_PPOnR843(this);

		if ((v_pparm != null)) {

			this.unrelateAcrossR843From(v_pparm);

		}

		delete();

	} // End dispose
	public Object Getvalue(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Parameter Value",
				" Operation entered: ParameterValue::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		FunctionParameter_c v_function_parameter = FunctionParameter_c
				.getOneS_SPARMOnR832(this);

		OperationParameter_c v_operation_parameter = OperationParameter_c
				.getOneO_TPARMOnR833(this);

		BridgeParameter_c v_bridge_parameter = BridgeParameter_c
				.getOneS_BPARMOnR831(this);

		PropertyParameter_c v_property_parameter = PropertyParameter_c
				.getOneC_PPOnR843(this);

		if (((v_function_parameter != null))) {

			return v_function_parameter.Getvalue(p_Stack_frame_id);

		}

		else if (((v_operation_parameter != null))) {

			return v_operation_parameter.Getvalue(p_Stack_frame_id);

		}

		else if (((v_bridge_parameter != null))) {

			return v_bridge_parameter.Getvalue(p_Stack_frame_id);

		}

		else if (((v_property_parameter != null))) {

			return v_property_parameter.Getvalue(p_Stack_frame_id);

		}

		else {

			Value_c v_value = Value_c.getOneV_VALOnR801(this);

			Block_c v_block = Block_c.getOneACT_BLKOnR826(v_value);

			Body_c v_body = Body_c.getOneACT_ACTOnR601(v_block);

			String v_pathMsg = "<No Path Available - Empty instance>";

			if (((v_body != null))) {

				v_pathMsg = v_body.Getpath();

			}

			User_c.Logerror(
					"Error in Parameter Value.getValue: Did not find a local "
							+ "value.", v_pathMsg);

		}

		return Gd_c.String_to_instance("Error");

	} // End getValue
	public void Setvalue(final java.util.UUID p_Member_id,
			final java.util.UUID p_Stack_frame_id, final Object p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Parameter Value",
				" Operation entered: ParameterValue::Setvalue");
		final ModelRoot modelRoot = getModelRoot();
		Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c
				.getOneACT_BLKOnR826(Value_c.getOneV_VALOnR801(this)));

		FunctionParameter_c v_function_parameter = FunctionParameter_c
				.getOneS_SPARMOnR832(this);

		OperationParameter_c v_operation_parameter = OperationParameter_c
				.getOneO_TPARMOnR833(this);

		BridgeParameter_c v_bridge_parameter = BridgeParameter_c
				.getOneS_BPARMOnR831(this);

		PropertyParameter_c v_property_parameter = PropertyParameter_c
				.getOneC_PPOnR843(this);

		if (((v_function_parameter != null))) {

			if (v_function_parameter != null) {
				v_function_parameter.Setvalue(p_Member_id, p_Stack_frame_id,
						p_Value);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_operation_parameter != null))) {

			if (v_operation_parameter != null) {
				v_operation_parameter.Setvalue(p_Member_id, p_Stack_frame_id,
						p_Value);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_bridge_parameter != null))) {

			if (v_bridge_parameter != null) {
				v_bridge_parameter.Setvalue(p_Member_id, p_Stack_frame_id,
						p_Value);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_property_parameter != null))) {

			if (v_property_parameter != null) {
				v_property_parameter.Setvalue(p_Member_id, p_Stack_frame_id,
						p_Value);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			String v_pathMsg = "<No Path Available - Empty instance>";

			if (((v_body != null))) {

				v_pathMsg = v_body.Getpath();

			}

			User_c.Logerror("Error in Parameter Value.setValue:"
					+ " Did not find a local value.", v_pathMsg);

		}

	} // End setValue
	public java.util.UUID Getruntimevalue(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Parameter Value",
				" Operation entered: ParameterValue::Getruntimevalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_unique_id();

	} // End getRuntimeValue

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Parameter Value
