      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ExecutableProperty_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_EXECUTABLE_PROPERTY extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ExecutableProperty_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ExecutableProperty_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_interface_id,
       int  p_m_direction,
       String       p_m_name,
       String       p_m_descrip)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       m_direction = p_m_direction;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_interface_id = IdAssigner.preprocessUUID(p_m_interface_id);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public ExecutableProperty_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_interface_id,
       int  p_m_direction,
       String       p_m_name,
       String       p_m_descrip, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);
      ExecutableProperty_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (ExecutableProperty_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       new_inst.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       new_inst.m_direction = p_m_direction;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_interface_id = IdAssigner.preprocessUUID(p_m_interface_id);
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ExecutableProperty_c(modelRoot,
p_m_id,
p_m_interface_id,
p_m_direction,
p_m_name,
p_m_descrip
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ExecutableProperty_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_interface_id,
       int  p_m_direction,
       String       p_m_name,
       String       p_m_descrip){
    InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);
    ExecutableProperty_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (ExecutableProperty_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       source.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       source.m_direction = p_m_direction;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_interface_id = IdAssigner.preprocessUUID(p_m_interface_id);
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ExecutableProperty_c new_inst = new ExecutableProperty_c(modelRoot,
p_m_id,
p_m_interface_id,
p_m_direction,
p_m_name,
p_m_descrip
);
    return new_inst;
  }
  public ExecutableProperty_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = idAssigner.createUUID();
     m_direction = Ifdirectiontype_c.OOA_UNINITIALIZED_ENUM;
     m_interface_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_descrip = "";   
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  

	public void ResolverequiredexecutablepropertyforR4500(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			RequiredExecutableProperty_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (RequiredExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(RequiredExecutableProperty_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultexecutableproperty", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				ExecutableProperty_c existingRTO = ExecutableProperty_c.getOneC_EPOnR4500(element);
				element.unrelateAcrossR4500From(existingRTO);
				element.relateAcrossR4500To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertoexecutableproperty", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4500From(this);
					element.relateAcrossR4500To(existingRTO);
				}
			}
		}
	}
	public void ResolveprovidedexecutablepropertyforR4501(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			ProvidedExecutableProperty_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (ProvidedExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ProvidedExecutableProperty_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultexecutableproperty", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				ExecutableProperty_c existingRTO = ExecutableProperty_c.getOneC_EPOnR4501(element);
				element.unrelateAcrossR4501From(existingRTO);
				element.relateAcrossR4501To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertoexecutableproperty", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4501From(this);
					element.relateAcrossR4501To(existingRTO);
				}
			}
		}
	}
	public void ResolvepropertyparameterforR4006(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			PropertyParameter_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (PropertyParameter_c) Ooaofooa.getDefaultInstance().getInstanceList(PropertyParameter_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultexecutableproperty", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				ExecutableProperty_c existingRTO = ExecutableProperty_c.getOneC_EPOnR4006(element);
				element.unrelateAcrossR4006From(existingRTO);
				element.relateAcrossR4006To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertoexecutableproperty", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4006From(this);
					element.relateAcrossR4006To(existingRTO);
				}
			}
		}
	}
	public void ResolveinterfacesignalforR4004(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			InterfaceSignal_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (InterfaceSignal_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceSignal_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultexecutableproperty", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				ExecutableProperty_c existingRTO = ExecutableProperty_c.getOneC_EPOnR4004(element);
				element.unrelateAcrossR4004From(existingRTO);
				element.relateAcrossR4004To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertoexecutableproperty", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4004From(this);
					element.relateAcrossR4004To(existingRTO);
				}
			}
		}
	}
	public void ResolveinterfaceoperationforR4004(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			InterfaceOperation_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (InterfaceOperation_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceOperation_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultexecutableproperty", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				ExecutableProperty_c existingRTO = ExecutableProperty_c.getOneC_EPOnR4004(element);
				element.unrelateAcrossR4004From(existingRTO);
				element.relateAcrossR4004To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertoexecutableproperty", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4004From(this);
					element.relateAcrossR4004To(existingRTO);
				}
			}
		}
	}


  public boolean equals (Object elem) {
     if (!(elem instanceof ExecutableProperty_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ExecutableProperty_c)) {
           return false;
       }
       
       ExecutableProperty_c me = (ExecutableProperty_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((ExecutableProperty_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((ExecutableProperty_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ExecutableProperty_c)) {
           return false;
       }
       
       ExecutableProperty_c me = (ExecutableProperty_c)elem;
      if (!getId().equals(((ExecutableProperty_c)elem).getId())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private long m_idLongBased ;
  private int  m_direction ;
  private java.util.UUID         m_interface_id ;
  private String       m_name ;
  private String       m_descrip ;
      
// declare association references from this class
  
  
    
// referring navigation

Interface_c ProvidesSignatureOfInterface ;
public void relateAcrossR4003To(Interface_c target)
{
	relateAcrossR4003To(target, true);
}
public void relateAcrossR4003To(Interface_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ProvidesSignatureOfInterface) return;  // already related

    if ( ProvidesSignatureOfInterface != target ) {
    
    Object oldKey = getInstanceKey();

    if (ProvidesSignatureOfInterface != null) {
    
        ProvidesSignatureOfInterface.clearBackPointerR4003To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ExecutableProperty_c.relateAcrossR4003To(Interface_c target)", 
			"Relate performed across R4003 from Executable Property to Interface without unrelate of prior instance.");  
		}
    }
                
    	ProvidesSignatureOfInterface = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_interface_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4003To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4003", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4003From(Interface_c target)
{
	unrelateAcrossR4003From(target, true);
}
public void unrelateAcrossR4003From(Interface_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ProvidesSignatureOfInterface == null) return;  // already unrelated
	
	if (target != ProvidesSignatureOfInterface) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4003", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4003To(this);
    }
    

      if(ProvidesSignatureOfInterface != null) {
      
        m_interface_id = ProvidesSignatureOfInterface.getId();
        if(IdAssigner.NULL_UUID.equals(m_interface_id))
        {
          m_interface_id = ProvidesSignatureOfInterface.getIdCachedValue();
        }       
        ProvidesSignatureOfInterface = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4003", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ExecutableProperty_c getOneC_EPOnR4003(Interface_c [] targets)
{
    return getOneC_EPOnR4003(targets, null);
}

public static ExecutableProperty_c getOneC_EPOnR4003(Interface_c [] targets, ClassQueryInterface_c test)
{
    ExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_EPOnR4003(targets[i], test);
        }
    }

    return ret_val;
}

public static ExecutableProperty_c getOneC_EPOnR4003(Interface_c target)
{
  return getOneC_EPOnR4003(target, null);
}

public static ExecutableProperty_c getOneC_EPOnR4003(Interface_c target, boolean loadComponent)
{
    return getOneC_EPOnR4003(target.getModelRoot(), target, null, loadComponent);
}

public static ExecutableProperty_c getOneC_EPOnR4003(Interface_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_EPOnR4003(target.getModelRoot(), target, test);
  }
  return null;
}

public static ExecutableProperty_c getOneC_EPOnR4003(ModelRoot modelRoot, Interface_c target, ClassQueryInterface_c test)
{
	return getOneC_EPOnR4003(modelRoot, target, test, true);
}

public static ExecutableProperty_c getOneC_EPOnR4003(ModelRoot modelRoot, Interface_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_EPOnR4003(modelRoot,target,test);
}
private static ExecutableProperty_c find_getOneC_EPOnR4003(ModelRoot modelRoot, Interface_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003) {
	    for ( int i = 0; i < target.backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.size(); ++i ) {
	      ExecutableProperty_c source = (ExecutableProperty_c)target.backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c [] targets)
{
  return getManyC_EPsOnR4003(targets, null);
}
public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c [] targets, boolean loadComponent)
{
  return getManyC_EPsOnR4003(targets, null, loadComponent);
}
public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4003(targets, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ExecutableProperty_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003) {
	    for (int j = 0; j < targets[i].backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.size(); ++j) {
	      ExecutableProperty_c source = (ExecutableProperty_c)targets[i].backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ExecutableProperty_c[] ret_set = new ExecutableProperty_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ExecutableProperty_c[0];
  }
  }

public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c target)
{
  return getManyC_EPsOnR4003(target, null);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c target, boolean loadComponent)
{
  return getManyC_EPsOnR4003(target, null, loadComponent);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c target, ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4003(target, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4003(Interface_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ExecutableProperty_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003) {
    for (int i = 0; i < target.backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.size(); ++i) {
      ExecutableProperty_c source = (ExecutableProperty_c)target.backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ExecutableProperty_c[] ret_set = new ExecutableProperty_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ExecutableProperty_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<RequiredExecutableProperty_c> backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500 = new ArrayList<RequiredExecutableProperty_c>();

public void setRequiredExecutablePropertyOrderInChildListR4500(RequiredExecutableProperty_c target, int index) {
	unrelateAcrossR4500From(target);
	RequiredExecutableProperty_c[] elements = RequiredExecutableProperty_c.getManySPR_REPsOnR4500(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4500From((RequiredExecutableProperty_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4500To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4500To((RequiredExecutableProperty_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4500To(RequiredExecutableProperty_c target)
{
  if (target != null) {
    target.relateAcrossR4500To(this, true) ;
  }
}

public void relateAcrossR4500To(RequiredExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4500To(this, notifyChanges) ;
  }
}

public void setBackPointerR4500To(RequiredExecutableProperty_c target)
{
  	synchronized (backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500) {
		backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.add(target);
	}
}

public void unrelateAcrossR4500From(RequiredExecutableProperty_c target)
{
  if (target != null) {
    target.unrelateAcrossR4500From(this, true) ;
  }
}

public void unrelateAcrossR4500From(RequiredExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4500From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4500To(RequiredExecutableProperty_c target)
{
  synchronized (backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500) {
	    backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.remove(target);
	}
}

public static ExecutableProperty_c getOneC_EPOnR4500(RequiredExecutableProperty_c [] targets)
{
    return getOneC_EPOnR4500(targets, null);
}

public static ExecutableProperty_c getOneC_EPOnR4500(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_EPOnR4500(targets, test, true);
}

public static ExecutableProperty_c getOneC_EPOnR4500(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ExecutableProperty_c candidate_val = getOneC_EPOnR4500(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_EPOnR4500(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ExecutableProperty_c getOneC_EPOnR4500(RequiredExecutableProperty_c target)
{
	return getOneC_EPOnR4500(target, true);
}
public static ExecutableProperty_c getOneC_EPOnR4500(RequiredExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ImplementsExecutableProperty != null){
		target.ImplementsExecutableProperty.loadProxy();
	}
	}
    return target.ImplementsExecutableProperty ;
  } else {
    return null;
  }
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4500(targets, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ExecutableProperty_c[0];
  
  
  LinkedHashSet<ExecutableProperty_c> elementsSet = new LinkedHashSet<ExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ImplementsExecutableProperty == null)
	  targets[i].loadProxy();
    ExecutableProperty_c associate = targets[i].ImplementsExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ExecutableProperty_c[] result = new ExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c [] targets)
{
  return getManyC_EPsOnR4500(targets, null);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RequiredExecutableProperty_c [] targetArray = new RequiredExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_EPsOnR4500(targetArray, test, loadComponent);
  } else {
    ExecutableProperty_c [] result = new ExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c target,
    ClassQueryInterface_c test)
{
    return getManyC_EPsOnR4500(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c target)
{
    return getManyC_EPsOnR4500(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(RequiredExecutableProperty_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4500(target, null, loadComponent);
}

public static ExecutableProperty_c getOneC_EPOnR4500(Requirement_c target)
{
  return ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR4500(target)) ;
}

public static ExecutableProperty_c getOneC_EPOnR4500(Requirement_c target,
    ClassQueryInterface_c test)
{
  return ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(target), test) ;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4500(Requirement_c target,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4500(target, test, true);
}
public static ExecutableProperty_c [] getManyC_EPsOnR4500(Requirement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  RequiredExecutableProperty_c [] associators = RequiredExecutableProperty_c.getManySPR_REPsOnR4500(target, loadComponent) ;
    return ExecutableProperty_c.getManyC_EPsOnR4500(associators, test, loadComponent) ;
}
public static ExecutableProperty_c [] getManyC_EPsOnR4500(Requirement_c target)
{
    return getManyC_EPsOnR4500(target, null, true);
}
public static ExecutableProperty_c [] getManyC_EPsOnR4500(Requirement_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4500(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ProvidedExecutableProperty_c> backPointer_IsImplementedByProvidedExecutablePropertyIsImplementedBy_R4501 = new ArrayList<ProvidedExecutableProperty_c>();

public void setProvidedExecutablePropertyOrderInChildListR4501(ProvidedExecutableProperty_c target, int index) {
	unrelateAcrossR4501From(target);
	ProvidedExecutableProperty_c[] elements = ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4501From((ProvidedExecutableProperty_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4501To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4501To((ProvidedExecutableProperty_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4501To(ProvidedExecutableProperty_c target)
{
  if (target != null) {
    target.relateAcrossR4501To(this, true) ;
  }
}

public void relateAcrossR4501To(ProvidedExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4501To(this, notifyChanges) ;
  }
}

public void setBackPointerR4501To(ProvidedExecutableProperty_c target)
{
  	synchronized (backPointer_IsImplementedByProvidedExecutablePropertyIsImplementedBy_R4501) {
		backPointer_IsImplementedByProvidedExecutablePropertyIsImplementedBy_R4501.add(target);
	}
}

public void unrelateAcrossR4501From(ProvidedExecutableProperty_c target)
{
  if (target != null) {
    target.unrelateAcrossR4501From(this, true) ;
  }
}

public void unrelateAcrossR4501From(ProvidedExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4501From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4501To(ProvidedExecutableProperty_c target)
{
  synchronized (backPointer_IsImplementedByProvidedExecutablePropertyIsImplementedBy_R4501) {
	    backPointer_IsImplementedByProvidedExecutablePropertyIsImplementedBy_R4501.remove(target);
	}
}

public static ExecutableProperty_c getOneC_EPOnR4501(ProvidedExecutableProperty_c [] targets)
{
    return getOneC_EPOnR4501(targets, null);
}

public static ExecutableProperty_c getOneC_EPOnR4501(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_EPOnR4501(targets, test, true);
}

public static ExecutableProperty_c getOneC_EPOnR4501(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ExecutableProperty_c candidate_val = getOneC_EPOnR4501(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_EPOnR4501(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ExecutableProperty_c getOneC_EPOnR4501(ProvidedExecutableProperty_c target)
{
	return getOneC_EPOnR4501(target, true);
}
public static ExecutableProperty_c getOneC_EPOnR4501(ProvidedExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ImplementsExecutableProperty != null){
		target.ImplementsExecutableProperty.loadProxy();
	}
	}
    return target.ImplementsExecutableProperty ;
  } else {
    return null;
  }
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4501(targets, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ExecutableProperty_c[0];
  
  
  LinkedHashSet<ExecutableProperty_c> elementsSet = new LinkedHashSet<ExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ImplementsExecutableProperty == null)
	  targets[i].loadProxy();
    ExecutableProperty_c associate = targets[i].ImplementsExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ExecutableProperty_c[] result = new ExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c [] targets)
{
  return getManyC_EPsOnR4501(targets, null);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ProvidedExecutableProperty_c [] targetArray = new ProvidedExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_EPsOnR4501(targetArray, test, loadComponent);
  } else {
    ExecutableProperty_c [] result = new ExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c target,
    ClassQueryInterface_c test)
{
    return getManyC_EPsOnR4501(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c target)
{
    return getManyC_EPsOnR4501(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(ProvidedExecutableProperty_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4501(target, null, loadComponent);
}

public static ExecutableProperty_c getOneC_EPOnR4501(Provision_c target)
{
  return ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR4501(target)) ;
}

public static ExecutableProperty_c getOneC_EPOnR4501(Provision_c target,
    ClassQueryInterface_c test)
{
  return ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(target), test) ;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4501(Provision_c target,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4501(target, test, true);
}
public static ExecutableProperty_c [] getManyC_EPsOnR4501(Provision_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ProvidedExecutableProperty_c [] associators = ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(target, loadComponent) ;
    return ExecutableProperty_c.getManyC_EPsOnR4501(associators, test, loadComponent) ;
}
public static ExecutableProperty_c [] getManyC_EPsOnR4501(Provision_c target)
{
    return getManyC_EPsOnR4501(target, null, true);
}
public static ExecutableProperty_c [] getManyC_EPsOnR4501(Provision_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4501(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<PropertyParameter_c> backPointer_IsParameterToPropertyParameterIsParameterTo_R4006 = new ArrayList<PropertyParameter_c>();

public void setPropertyParameterOrderInChildListR4006(PropertyParameter_c target, int index) {
	unrelateAcrossR4006From(target);
	PropertyParameter_c[] elements = PropertyParameter_c.getManyC_PPsOnR4006(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4006From((PropertyParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4006To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4006To((PropertyParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4006To(PropertyParameter_c target)
{
  if (target != null) {
    target.relateAcrossR4006To(this, true) ;
  }
}

public void relateAcrossR4006To(PropertyParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4006To(this, notifyChanges) ;
  }
}

public void setBackPointerR4006To(PropertyParameter_c target)
{
  	synchronized (backPointer_IsParameterToPropertyParameterIsParameterTo_R4006) {
		backPointer_IsParameterToPropertyParameterIsParameterTo_R4006.add(target);
	}
}

public void unrelateAcrossR4006From(PropertyParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR4006From(this, true) ;
  }
}

public void unrelateAcrossR4006From(PropertyParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4006From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4006To(PropertyParameter_c target)
{
  synchronized (backPointer_IsParameterToPropertyParameterIsParameterTo_R4006) {
	    backPointer_IsParameterToPropertyParameterIsParameterTo_R4006.remove(target);
	}
}

public static ExecutableProperty_c getOneC_EPOnR4006(PropertyParameter_c [] targets)
{
    return getOneC_EPOnR4006(targets, null);
}

public static ExecutableProperty_c getOneC_EPOnR4006(PropertyParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_EPOnR4006(targets, test, true);
}

public static ExecutableProperty_c getOneC_EPOnR4006(PropertyParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ExecutableProperty_c candidate_val = getOneC_EPOnR4006(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_EPOnR4006(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ExecutableProperty_c getOneC_EPOnR4006(PropertyParameter_c target)
{
	return getOneC_EPOnR4006(target, true);
}
public static ExecutableProperty_c getOneC_EPOnR4006(PropertyParameter_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ParameterizesExecutableProperty ;
  } else {
    return null;
  }
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4006(targets, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ExecutableProperty_c[0];
  
  
  LinkedHashSet<ExecutableProperty_c> elementsSet = new LinkedHashSet<ExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ParameterizesExecutableProperty == null)
	  targets[i].loadProxy();
    ExecutableProperty_c associate = targets[i].ParameterizesExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ExecutableProperty_c[] result = new ExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c [] targets)
{
  return getManyC_EPsOnR4006(targets, null);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PropertyParameter_c [] targetArray = new PropertyParameter_c[1];
    targetArray[0] = target;
    return getManyC_EPsOnR4006(targetArray, test, loadComponent);
  } else {
    ExecutableProperty_c [] result = new ExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyC_EPsOnR4006(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c target)
{
    return getManyC_EPsOnR4006(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4006(PropertyParameter_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4006(target, null, loadComponent);
}


    
  
  
// referred to navigation

InterfaceSignal_c backPointer_IsSubtypeInterfaceSignalIsSubtype_R4004;

public void setInterfaceSignalOrderInChildListR4004(InterfaceSignal_c target, int index) {
	unrelateAcrossR4004From(target);
	InterfaceSignal_c[] elements = InterfaceSignal_c.getManyC_ASsOnR4004(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4004From((InterfaceSignal_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4004To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4004To((InterfaceSignal_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4004To(InterfaceSignal_c target)
{
  if (target != null) {
    target.relateAcrossR4004To(this, true) ;
  }
}

public void relateAcrossR4004To(InterfaceSignal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4004To(this, notifyChanges) ;
  }
}

public void setBackPointerR4004To(InterfaceSignal_c target)
{
    backPointer_IsSubtypeInterfaceSignalIsSubtype_R4004 = target;
}

public void unrelateAcrossR4004From(InterfaceSignal_c target)
{
  if (target != null) {
    target.unrelateAcrossR4004From(this, true) ;
  }
}

public void unrelateAcrossR4004From(InterfaceSignal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4004From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4004To(InterfaceSignal_c target)
{
	if (target == backPointer_IsSubtypeInterfaceSignalIsSubtype_R4004) {
		backPointer_IsSubtypeInterfaceSignalIsSubtype_R4004 = null;
	}
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceSignal_c [] targets)
{
    return getOneC_EPOnR4004(targets, null);
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceSignal_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_EPOnR4004(targets, test, true);
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceSignal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ExecutableProperty_c candidate_val = getOneC_EPOnR4004(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_EPOnR4004(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceSignal_c target)
{
	return getOneC_EPOnR4004(target, true);
}
public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceSignal_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeExecutableProperty ;
  } else {
    return null;
  }
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4004(targets, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ExecutableProperty_c[0];
  
  
  LinkedHashSet<ExecutableProperty_c> elementsSet = new LinkedHashSet<ExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeExecutableProperty == null)
	  targets[i].loadProxy();
    ExecutableProperty_c associate = targets[i].IsSupertypeExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ExecutableProperty_c[] result = new ExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c [] targets)
{
  return getManyC_EPsOnR4004(targets, null);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceSignal_c [] targetArray = new InterfaceSignal_c[1];
    targetArray[0] = target;
    return getManyC_EPsOnR4004(targetArray, test, loadComponent);
  } else {
    ExecutableProperty_c [] result = new ExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c target,
    ClassQueryInterface_c test)
{
    return getManyC_EPsOnR4004(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c target)
{
    return getManyC_EPsOnR4004(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceSignal_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4004(target, null, loadComponent);
}

  
  
  
// referred to navigation

InterfaceOperation_c backPointer_IsSubtypeInterfaceOperationIsSubtype_R4004;

public void setInterfaceOperationOrderInChildListR4004(InterfaceOperation_c target, int index) {
	unrelateAcrossR4004From(target);
	InterfaceOperation_c[] elements = InterfaceOperation_c.getManyC_IOsOnR4004(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4004From((InterfaceOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4004To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4004To((InterfaceOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4004To(InterfaceOperation_c target)
{
  if (target != null) {
    target.relateAcrossR4004To(this, true) ;
  }
}

public void relateAcrossR4004To(InterfaceOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4004To(this, notifyChanges) ;
  }
}

public void setBackPointerR4004To(InterfaceOperation_c target)
{
    backPointer_IsSubtypeInterfaceOperationIsSubtype_R4004 = target;
}

public void unrelateAcrossR4004From(InterfaceOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR4004From(this, true) ;
  }
}

public void unrelateAcrossR4004From(InterfaceOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4004From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4004To(InterfaceOperation_c target)
{
	if (target == backPointer_IsSubtypeInterfaceOperationIsSubtype_R4004) {
		backPointer_IsSubtypeInterfaceOperationIsSubtype_R4004 = null;
	}
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceOperation_c [] targets)
{
    return getOneC_EPOnR4004(targets, null);
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_EPOnR4004(targets, test, true);
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ExecutableProperty_c candidate_val = getOneC_EPOnR4004(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_EPOnR4004(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceOperation_c target)
{
	return getOneC_EPOnR4004(target, true);
}
public static ExecutableProperty_c getOneC_EPOnR4004(InterfaceOperation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeExecutableProperty ;
  } else {
    return null;
  }
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_EPsOnR4004(targets, test, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ExecutableProperty_c[0];
  
  
  LinkedHashSet<ExecutableProperty_c> elementsSet = new LinkedHashSet<ExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeExecutableProperty == null)
	  targets[i].loadProxy();
    ExecutableProperty_c associate = targets[i].IsSupertypeExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ExecutableProperty_c[] result = new ExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c [] targets)
{
  return getManyC_EPsOnR4004(targets, null);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperation_c [] targetArray = new InterfaceOperation_c[1];
    targetArray[0] = target;
    return getManyC_EPsOnR4004(targetArray, test, loadComponent);
  } else {
    ExecutableProperty_c [] result = new ExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyC_EPsOnR4004(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c target)
{
    return getManyC_EPsOnR4004(target, null, true);
}

public static ExecutableProperty_c [] getManyC_EPsOnR4004(InterfaceOperation_c target, boolean loadComponent)
{
    return getManyC_EPsOnR4004(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ProvidesSignatureOfInterface == null) {          
      // R4003
      Interface_c relInst57043 = (Interface_c) baseRoot.getInstanceList(Interface_c.class).get(new Object[] {m_interface_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57043 == null) {
      			relInst57043 = (Interface_c) Ooaofooa.getDefaultInstance().getInstanceList(Interface_c.class).get(new Object[] {m_interface_id});
      		}
			if (relInst57043 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57043 = (Interface_c) roots[i].getInstanceList(Interface_c.class).get(new Object[] {m_interface_id});
					if (relInst57043 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57043 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57043) && !isProxy())) {
	      relInst57043.relateAcrossR4003To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4003
      // C_I
		  inst=ProvidesSignatureOfInterface;
			unrelateAcrossR4003From(ProvidesSignatureOfInterface, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ExecutableProperty_c inst = (ExecutableProperty_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ExecutableProperty_c ExecutablePropertyInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ExecutableProperty_c result=findExecutablePropertyInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ExecutableProperty_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findExecutablePropertyInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ExecutableProperty_c findExecutablePropertyInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ExecutableProperty_c x = (ExecutableProperty_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ExecutableProperty_c ExecutablePropertyInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ExecutablePropertyInstance(modelRoot,test,true);
  }
  
  public static ExecutableProperty_c ExecutablePropertyInstance(ModelRoot modelRoot)
  {
	 return ExecutablePropertyInstance(modelRoot,null,true);
  }

  public static ExecutableProperty_c [] ExecutablePropertyInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ExecutableProperty_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ExecutableProperty_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ExecutableProperty_c x = (ExecutableProperty_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ExecutableProperty_c[] ret_set = new ExecutableProperty_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ExecutableProperty_c[0];
			}		
		} 
  }
  public static ExecutableProperty_c [] ExecutablePropertyInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ExecutablePropertyInstances(modelRoot,test,true);
  }
  public static ExecutableProperty_c [] ExecutablePropertyInstances(ModelRoot modelRoot)
  {
	return ExecutablePropertyInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Executable Property.dispose call: ";
	RequiredExecutableProperty_c testR4500Inst = RequiredExecutableProperty_c.getOneSPR_REPOnR4500(this, false);

	if ( testR4500Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4500 ";
	}
	ProvidedExecutableProperty_c testR4501Inst = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4501(this, false);

	if ( testR4501Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4501 ";
	}
	PropertyParameter_c testR4006Inst = PropertyParameter_c.getOneC_PPOnR4006(this, false);

	if ( testR4006Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4006 ";	
	}
	InterfaceSignal_c testR4004Inst1 = InterfaceSignal_c.getOneC_ASOnR4004(this, false);

	if ( testR4004Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4004 ";
	}
	InterfaceOperation_c testR4004Inst2 = InterfaceOperation_c.getOneC_IOOnR4004(this, false);

	if ( testR4004Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4004 ";
	}
	Interface_c testR4003Inst = Interface_c.getOneC_IOnR4003(this, false);

	if ( testR4003Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4003 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Executable Property", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      if(attributeName.equals("interface_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if(m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)){
    	return 0xfffffff & m_id.getLeastSignificantBits();
    }
    return m_idLongBased ;
  }
  public java.util.UUID getId()
  {
    return m_id ;
  }


  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  public int getDirection()
  {
    return m_direction ;
  }


  public void setDirection(int newValue)
  {
    if(m_direction == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Direction", new Integer(m_direction), new Integer(newValue),true);

   m_direction = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getInterface_idLongBased()
  {
    if ( ProvidesSignatureOfInterface != null )
    {
      return ProvidesSignatureOfInterface.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getInterface_id()
  {
    if ( ProvidesSignatureOfInterface != null )
    {
      return ProvidesSignatureOfInterface.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getInterface_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_interface_id) )
      return m_interface_id;
    else
      return getInterface_id();
  }
  
  public void setInterface_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_interface_id)){
	        return;
	    }
	}else if(m_interface_id != null){
	    if(m_interface_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Interface_id", m_interface_id, newValue,true); 
   m_interface_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


InterfaceOperation_c v_interfaceOp = InterfaceOperation_c.getOneC_IOOnR4004(this);


if ( (  (v_interfaceOp != null)) )
{

v_result = v_interfaceOp.getName() ;



}

InterfaceSignal_c v_interfaceSig = InterfaceSignal_c.getOneC_ASOnR4004(this);


if ( (  (v_interfaceSig != null)) )
{

v_result = v_interfaceSig.getName() ;



}

if ( (v_result.equals("")) )
{

v_result = Getcachedname() ;



}

else
{

Setcachedname(			    
v_result ) ;



}

return v_result;



  }


  public String getDescrip()
  {
ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


InterfaceOperation_c v_interfaceOp = InterfaceOperation_c.getOneC_IOOnR4004(this);


if ( (  (v_interfaceOp != null)) )
{

v_result = v_interfaceOp.getDescrip() ;



}

InterfaceSignal_c v_interfaceSig = InterfaceSignal_c.getOneC_ASOnR4004(this);


if ( (  (v_interfaceSig != null)) )
{

v_result = v_interfaceSig.getDescrip() ;



}

if ( (v_result.equals("")) )
{

v_result = Getcacheddescrip() ;



}

else
{

Setcacheddescrip(			    
v_result ) ;



}

return v_result;



  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Executable Property", //$NON-NLS-1$
	  " Operation entered: Executable Property::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ExecutableProperty_c [] objs = ExecutableProperty_c.ExecutablePropertyInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Executable Property", //$NON-NLS-1$
	  " Operation entered: Executable Property::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ExecutableProperty_c_test57045_c implements ClassQueryInterface_c
    {
	  ExecutableProperty_c_test57045_c( java.util.UUID            p57046 ) {
	  m_p57046 = p57046;
	  }
	  private java.util.UUID             m_p57046; 
	  public boolean evaluate (Object candidate)
	  {
	      ExecutableProperty_c selected = (ExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57046));
	      return retval;
	  }
    }

    ExecutableProperty_c [] objs57044 = 
    ExecutableProperty_c.ExecutablePropertyInstances(modelRoot, new ExecutableProperty_c_test57045_c(getId())) ;

    if ( (  (objs57044.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Executable Property", //$NON-NLS-1$
           "Consistency: Object: Executable Property: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57044.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Executable Property: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57044.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57044.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Executable Property", //$NON-NLS-1$
           "Consistency: Object: Executable Property: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57044.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Executable Property: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57044.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Executable Property is a referring class in association: rel.Numb = 4003
          // The participating class is: Interface
    class Interface_c_test57050_c implements ClassQueryInterface_c
    {
	  Interface_c_test57050_c( java.util.UUID            p57051 ) {
	  m_p57051 = p57051;
	  }
	  private java.util.UUID             m_p57051; 
	  public boolean evaluate (Object candidate)
	  {
	      Interface_c selected = (Interface_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57051));
	      return retval;
	  }
    }

    Interface_c [] objs57049 = 
    Interface_c.InterfaceInstances(modelRoot, new Interface_c_test57050_c(getInterface_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57049.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Executable Property", //$NON-NLS-1$
           "Consistency: Object: Executable Property: Association: 4003: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57049.length )  + " Interface_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Executable Property: Association: 4003: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57049.length )  + " Interface_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Executable Property is a participating class in association: rel.Numb = 4006
             // Object: Property Parameter
          // Supertype: rel.Numb = 4004
    int objs57052 = 0;
            // Subtype Object: Interface Signal
    class InterfaceSignal_c_test57053_c implements ClassQueryInterface_c
    {
	  InterfaceSignal_c_test57053_c( java.util.UUID            p57054 ) {
	  m_p57054 = p57054;
	  }
	  private java.util.UUID             m_p57054; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceSignal_c selected = (InterfaceSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57054));
	      return retval;
	  }
    }

    InterfaceSignal_c [] objs57055 = 
    InterfaceSignal_c.InterfaceSignalInstances(modelRoot, new InterfaceSignal_c_test57053_c(getId())) ;
 
    objs57052 = objs57052 + objs57055.length;
            // Subtype Object: Interface Operation
    class InterfaceOperation_c_test57056_c implements ClassQueryInterface_c
    {
	  InterfaceOperation_c_test57056_c( java.util.UUID            p57057 ) {
	  m_p57057 = p57057;
	  }
	  private java.util.UUID             m_p57057; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceOperation_c selected = (InterfaceOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57057));
	      return retval;
	  }
    }

    InterfaceOperation_c [] objs57058 = 
    InterfaceOperation_c.InterfaceOperationInstances(modelRoot, new InterfaceOperation_c_test57056_c(getId())) ;
 
    objs57052 = objs57052 + objs57058.length;
    if ( objs57052 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Executable Property", //$NON-NLS-1$
           "Consistency: Object: Executable Property: Association: 4004: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57052 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Executable Property: Association: 4004: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57052 )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 4500
            // Link Object: Required Executable Property
            // Other Side Class: Requirement
          // Associated One Side: rel.Numb = 4501
            // Link Object: Provided Executable Property
            // Other Side Class: Provision
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c v_asynchronousSignal = InterfaceSignal_c.getOneC_ASOnR4004(this);


InterfaceOperation_c v_synchronousSignal = InterfaceOperation_c.getOneC_IOOnR4004(this);


if ( (  (v_asynchronousSignal != null)) )
{

this.unrelateAcrossR4004From(v_asynchronousSignal);


if (v_asynchronousSignal != null) {
v_asynchronousSignal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_synchronousSignal != null)) )
{

this.unrelateAcrossR4004From(v_synchronousSignal);


if (v_synchronousSignal != null) {
v_synchronousSignal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

PropertyParameter_c [] v_parms = PropertyParameter_c.getManyC_PPsOnR4006(this);


PropertyParameter_c  v_parm = null;
for ( int i55246 = 0; i55246 < v_parms.length; i55246++)
{
  v_parm = v_parms[i55246] ;

this.unrelateAcrossR4006From(v_parm);


if (v_parm != null) {
v_parm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Interface_c v_interface = Interface_c.getOneC_IOnR4003(this);


if ( (  (v_interface != null)) )
{

this.unrelateAcrossR4003From(v_interface);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Initializeorder()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Initializeorder") ; 
               final ModelRoot modelRoot = getModelRoot();
PropertyParameter_c [] v_peers = PropertyParameter_c.getManyC_PPsOnR4006(this);


if ( (  (v_peers.length) > 1) )
{

boolean      v_initialOrderingCheckPerformed = false ;


  class PropertyParameter_test55885_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		PropertyParameter_c selected = (PropertyParameter_c)candidate;
		return (selected.getPp_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
PropertyParameter_c v_head = PropertyParameter_c.getOneC_PPOnR4006(this, new PropertyParameter_test55885_c());


PropertyParameter_c v_endOfList = v_head ;


int          v_loopCnt = 0 ;


PropertyParameter_c  v_peer = null;
for ( int i55247 = 0; i55247 < v_peers.length; i55247++)
{
  v_peer = v_peers[i55247] ;

if ( (  !v_initialOrderingCheckPerformed) )
{

PropertyParameter_c v_predecessor = PropertyParameter_c.getOneC_PPOnR4021Precedes(v_peer);


PropertyParameter_c v_successor = PropertyParameter_c.getOneC_PPOnR4021Succeeds(v_peer);


v_initialOrderingCheckPerformed = true ;


if ( (  (v_predecessor != null) ||   (v_successor != null)) )
{

break;



}

v_head = v_peer ;


v_endOfList = v_peer ;



}

if ( (v_loopCnt == 1) )
{

if ( (v_peer.getName().compareTo(v_head.getName()) < 0) )
{

if (v_peer != null) {
  v_peer.relateAcrossR4021ToPrecedes(v_head);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_endOfList = v_peer ;



}

else
{

if (v_head != null) {
  v_head.relateAcrossR4021ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_head = v_peer ;



}


}

else if ( (v_loopCnt > 1) )
{

PropertyParameter_c v_insertPoint = v_head ;


PropertyParameter_c v_next = PropertyParameter_c.getOneC_PPOnR4021Succeeds(v_head);


while ( (  (v_next != null)) )
{

if ( (v_next.getName().compareTo(v_peer.getName()) < 0) )
{

break;



}

else
{

v_insertPoint = v_next ;


v_next = PropertyParameter_c.getOneC_PPOnR4021Succeeds(v_next);



}


}

if ( (  (v_next == null)) )
{

if (v_peer != null) {
  v_peer.relateAcrossR4021ToPrecedes(v_endOfList);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_endOfList = v_peer ;



}

else
{

if ( ((v_insertPoint == v_head) && (v_peer.getName().compareTo(v_head.getName()) > 0)) )
{

if (v_head != null) {
  v_head.relateAcrossR4021ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_head = v_peer ;



}

else
{

if (v_next != null) {
v_next.unrelateAcrossR4021FromPrecedes(v_insertPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_peer != null) {
  v_peer.relateAcrossR4021ToPrecedes(v_insertPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_next != null) {
  v_next.relateAcrossR4021ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

v_loopCnt = v_loopCnt + 1 ;



}


}


   } // End initializeOrder
  public  void Pastepropertyparameter(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Pastepropertyparameter") ; 
               final ModelRoot modelRoot = getModelRoot();
PropertyParameter_c v_parameter = (PropertyParameter_c) modelRoot.getInstanceList(PropertyParameter_c.class).getGlobal(null, p_Id);


if ( (  (v_parameter != null)) )
{

ExecutableProperty_c v_existingEP = ExecutableProperty_c.getOneC_EPOnR4006(v_parameter);


if ( (  (v_existingEP != null)) )
{

if (v_existingEP != null) {
v_existingEP.unrelateAcrossR4006From(v_parameter);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_parameter != null) {
  v_parameter.relateAcrossR4006To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_parameter != null) {
  v_parameter.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_parameter.Converttoinstance()			    
,v_parameter.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Addpropertyparametertoorder(			    
v_parameter.getPp_id() ) ;


Createmessageargumentsforparameter(			    
v_parameter.getPp_id() ) ;



}


   } // End pastePropertyParameter
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  void Addpropertyparametertoorder(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Addpropertyparametertoorder") ; 
               final ModelRoot modelRoot = getModelRoot();
PropertyParameter_c v_parameter = (PropertyParameter_c) modelRoot.getInstanceList(PropertyParameter_c.class).getGlobal(null, p_Id);


Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


PropertyParameter_c [] v_peers = PropertyParameter_c.getManyC_PPsOnR4006(this);


PropertyParameter_c  v_peer = null;
for ( int i55248 = 0; i55248 < v_peers.length; i55248++)
{
  v_peer = v_peers[i55248] ;

if ( (v_peer != v_parameter) )
{

PropertyParameter_c v_predecessor = PropertyParameter_c.getOneC_PPOnR4021Precedes(v_peer);


if ( (  (v_predecessor == null)) )
{

if (v_parameter != null) {
  v_parameter.relateAcrossR4021ToSucceeds(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



   } // End addPropertyParameterToOrder
  public  void Createmessageargumentsforparameter(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Createmessageargumentsforparameter") ; 
               final ModelRoot modelRoot = getModelRoot();
PropertyParameter_c v_parameter = (PropertyParameter_c) modelRoot.getInstanceList(PropertyParameter_c.class).getGlobal(null, p_Id);


if ( (  (v_parameter != null)) )
{

Message_c [] v_messages = Message_c.getManyMSG_MsOnR1018(AsynchronousMessage_c.getManyMSG_AMsOnR1019(SignalMessage_c.getManyMSG_SIGsOnR1021(InterfaceSignal_c.getManyC_ASsOnR4004(this))));


if ( (  (v_messages.length == 0)) )
{

v_messages = Message_c.getManyMSG_MsOnR1018(SynchronousMessage_c.getManyMSG_SMsOnR1020(InterfaceOperationMessage_c.getManyMSG_IOPsOnR1022(InterfaceOperation_c.getManyC_IOsOnR4004(this))));



}

Message_c  v_message = null;
for ( int i55249 = 0; i55249 < v_messages.length; i55249++)
{
  v_message = v_messages[i55249] ;

MessageArgument_c v_arg = new MessageArgument_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_arg));


ExecutablePropertyArgument_c v_oa = new ExecutablePropertyArgument_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_oa));


if (v_oa != null) {
  v_oa.relateAcrossR1023To(v_parameter);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_oa != null) {
  v_oa.relateAcrossR1013To(v_arg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_message != null) {
  v_message.relateAcrossR1001To(v_arg);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


   } // End createMessageArgumentsForParameter
  public  String       Getcachedname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Getcachedname") ; 
	return m_name;
   } // End getCachedName
  public  void Setcachedname(final String       p_Name)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Setcachedname") ; 
	m_name = p_Name;
   } // End setCachedName
  public  String       Getcacheddescrip()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Getcacheddescrip") ; 
	return m_descrip;
   } // End getCachedDescrip
  public  void Setcacheddescrip(final String       p_Descrip)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Executable Property", " Operation entered: ExecutableProperty::Setcacheddescrip") ; 
	m_descrip = p_Descrip;
   } // End setCachedDescrip

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Executable Property
