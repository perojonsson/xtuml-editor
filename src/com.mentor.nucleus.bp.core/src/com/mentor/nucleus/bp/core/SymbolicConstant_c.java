      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SymbolicConstant_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SYMBOLIC_CONSTANT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SymbolicConstant_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SymbolicConstant_c(ModelRoot modelRoot,
       java.util.UUID         p_m_const_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_constant_spec_id,
       java.util.UUID         p_m_previous_const_id,
       java.util.UUID         p_m_previous_dt_dt_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
       //extract 28 bit value only            
       m_const_idLongBased = 0xfffffff & p_m_const_id.getLeastSignificantBits();
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_const_id = IdAssigner.preprocessUUID(p_m_previous_const_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_dt_dt_id = IdAssigner.preprocessUUID(p_m_previous_dt_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);
        
    setUniqueId(m_const_id);
    Object [] key = {m_const_id,m_dt_id};
    addInstanceToMap(key);
  }
  static public SymbolicConstant_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_const_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_constant_spec_id,
       java.util.UUID         p_m_previous_const_id,
       java.util.UUID         p_m_previous_dt_dt_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);
      SymbolicConstant_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_const_id,p_m_dt_id};
          new_inst = (SymbolicConstant_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
       //extract 28 bit value only            
       new_inst.m_const_idLongBased = 0xfffffff & p_m_const_id.getLeastSignificantBits();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_const_id = IdAssigner.preprocessUUID(p_m_previous_const_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_dt_dt_id = IdAssigner.preprocessUUID(p_m_previous_dt_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SymbolicConstant_c(modelRoot,
p_m_const_id,
p_m_name,
p_m_descrip,
p_m_dt_id,
p_m_constant_spec_id,
p_m_previous_const_id,
p_m_previous_dt_dt_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SymbolicConstant_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_const_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_constant_spec_id,
       java.util.UUID         p_m_previous_const_id,
       java.util.UUID         p_m_previous_dt_dt_id){
    InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);
    SymbolicConstant_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_const_id
        ,
        p_m_dt_id
            };
        source = (SymbolicConstant_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_const_id = IdAssigner.preprocessUUID(p_m_const_id);
       //extract 28 bit value only            
       source.m_const_idLongBased = 0xfffffff & p_m_const_id.getLeastSignificantBits();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_const_id = IdAssigner.preprocessUUID(p_m_previous_const_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_dt_dt_id = IdAssigner.preprocessUUID(p_m_previous_dt_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SymbolicConstant_c new_inst = new SymbolicConstant_c(modelRoot,
p_m_const_id,
p_m_name,
p_m_descrip,
p_m_dt_id,
p_m_constant_spec_id,
p_m_previous_const_id,
p_m_previous_dt_dt_id
);
    return new_inst;
  }
  public SymbolicConstant_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_const_id = idAssigner.createUUID();
     m_name = "";   
     m_descrip = "";   
     m_previous_const_id = IdAssigner.NULL_UUID;   
     m_dt_id = IdAssigner.NULL_UUID;   
     m_previous_dt_dt_id = IdAssigner.NULL_UUID;   
     m_constant_spec_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_const_id);
    Object [] key = {m_const_id,m_dt_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_const_id,m_dt_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_const_id !=  p_newKey ){
	
		m_const_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SymbolicConstant_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SymbolicConstant_c)) {
           return false;
       }
       
       SymbolicConstant_c me = (SymbolicConstant_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getConst_id()) || IdAssigner.NULL_UUID.equals(((SymbolicConstant_c)elem).getConst_id())) && this != elem)) {
      	return false;
      }
      if (!getConst_id().equals(((SymbolicConstant_c)elem).getConst_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getDt_id()) || IdAssigner.NULL_UUID.equals(((SymbolicConstant_c)elem).getDt_id())) && this != elem)) {
      	return false;
      }
      if (!getDt_id().equals(((SymbolicConstant_c)elem).getDt_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SymbolicConstant_c)) {
           return false;
       }
       
       SymbolicConstant_c me = (SymbolicConstant_c)elem;
      if (!getConst_id().equals(((SymbolicConstant_c)elem).getConst_id())) return false;
      if (!getDt_idCachedValue().equals(((SymbolicConstant_c)elem).getDt_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_const_id ;
  private long m_const_idLongBased ;
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_previous_const_id ;
  private java.util.UUID         m_dt_id ;
  private java.util.UUID         m_previous_dt_dt_id ;
  private java.util.UUID         m_constant_spec_id ;
      
// declare association references from this class
  
  
    
// referring navigation

DataType_c IsDefinedByDataType ;
public void relateAcrossR1500To(DataType_c target)
{
	relateAcrossR1500To(target, true);
}
public void relateAcrossR1500To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDefinedByDataType) return;  // already related

    if ( IsDefinedByDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDefinedByDataType != null) {
        UmlProblem.removeXtUMLProblem(this, IsDefinedByDataType);
    
        IsDefinedByDataType.clearBackPointerR1500To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SymbolicConstant_c.relateAcrossR1500To(DataType_c target)", 
			"Relate performed across R1500 from Symbolic Constant to Data Type without unrelate of prior instance.");  
		}
    }
                
    	IsDefinedByDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1500To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1500", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1500From(DataType_c target)
{
	unrelateAcrossR1500From(target, true);
}
public void unrelateAcrossR1500From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDefinedByDataType == null) return;  // already unrelated
	
	if (target != IsDefinedByDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1500", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1500To(this);
    }
    

      if(IsDefinedByDataType != null) {
      
        m_dt_id = IsDefinedByDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = IsDefinedByDataType.getDt_idCachedValue();
        }       
        IsDefinedByDataType = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1500", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SymbolicConstant_c getOneCNST_SYCOnR1500(DataType_c [] targets)
{
    return getOneCNST_SYCOnR1500(targets, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1500(DataType_c [] targets, ClassQueryInterface_c test)
{
    SymbolicConstant_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCNST_SYCOnR1500(targets[i], test);
        }
    }

    return ret_val;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1500(DataType_c target)
{
  return getOneCNST_SYCOnR1500(target, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1500(DataType_c target, boolean loadComponent)
{
    return getOneCNST_SYCOnR1500(target.getModelRoot(), target, null, loadComponent);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1500(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCNST_SYCOnR1500(target.getModelRoot(), target, test);
  }
  return null;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1500(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneCNST_SYCOnR1500(modelRoot, target, test, true);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1500(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  SymbolicConstant_c result = null;
  
  result=find_getOneCNST_SYCOnR1500(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,SymbolicConstant_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneCNST_SYCOnR1500(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static SymbolicConstant_c find_getOneCNST_SYCOnR1500(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500) {
	    for ( int i = 0; i < target.backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.size(); ++i ) {
	      SymbolicConstant_c source = (SymbolicConstant_c)target.backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c [] targets)
{
  return getManyCNST_SYCsOnR1500(targets, null);
}
public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c [] targets, boolean loadComponent)
{
  return getManyCNST_SYCsOnR1500(targets, null, loadComponent);
}
public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1500(targets, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SymbolicConstant_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, SymbolicConstant_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500) {
	    for (int j = 0; j < targets[i].backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.size(); ++j) {
	      SymbolicConstant_c source = (SymbolicConstant_c)targets[i].backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SymbolicConstant_c[] ret_set = new SymbolicConstant_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SymbolicConstant_c[0];
  }
  }

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c target)
{
  return getManyCNST_SYCsOnR1500(target, null);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c target, boolean loadComponent)
{
  return getManyCNST_SYCsOnR1500(target, null, loadComponent);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c target, ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1500(target, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1500(DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SymbolicConstant_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, SymbolicConstant_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500) {
    for (int i = 0; i < target.backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.size(); ++i) {
      SymbolicConstant_c source = (SymbolicConstant_c)target.backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SymbolicConstant_c[] ret_set = new SymbolicConstant_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SymbolicConstant_c[0];
	}
  }


  
    
// referring navigation

ConstantSpecification_c IsContainedByConstantSpecification ;
public void relateAcrossR1504To(ConstantSpecification_c target)
{
	relateAcrossR1504To(target, true);
}
public void relateAcrossR1504To(ConstantSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsContainedByConstantSpecification) return;  // already related

    if ( IsContainedByConstantSpecification != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsContainedByConstantSpecification != null) {
    
        IsContainedByConstantSpecification.clearBackPointerR1504To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SymbolicConstant_c.relateAcrossR1504To(ConstantSpecification_c target)", 
			"Relate performed across R1504 from Symbolic Constant to Constant Specification without unrelate of prior instance.");  
		}
    }
                
    	IsContainedByConstantSpecification = target ;
        if(IdAssigner.NULL_UUID.equals(target.getConstant_spec_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_constant_spec_id = target.getConstant_spec_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1504To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1504", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1504From(ConstantSpecification_c target)
{
	unrelateAcrossR1504From(target, true);
}
public void unrelateAcrossR1504From(ConstantSpecification_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsContainedByConstantSpecification == null) return;  // already unrelated
	
	if (target != IsContainedByConstantSpecification) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1504", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1504To(this);
    }
    

      if(IsContainedByConstantSpecification != null) {
      
        m_constant_spec_id = IsContainedByConstantSpecification.getConstant_spec_id();
        if(IdAssigner.NULL_UUID.equals(m_constant_spec_id))
        {
          m_constant_spec_id = IsContainedByConstantSpecification.getConstant_spec_idCachedValue();
        }       
        IsContainedByConstantSpecification = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1504", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SymbolicConstant_c getOneCNST_SYCOnR1504(ConstantSpecification_c [] targets)
{
    return getOneCNST_SYCOnR1504(targets, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1504(ConstantSpecification_c [] targets, ClassQueryInterface_c test)
{
    SymbolicConstant_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCNST_SYCOnR1504(targets[i], test);
        }
    }

    return ret_val;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1504(ConstantSpecification_c target)
{
  return getOneCNST_SYCOnR1504(target, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1504(ConstantSpecification_c target, boolean loadComponent)
{
    return getOneCNST_SYCOnR1504(target.getModelRoot(), target, null, loadComponent);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1504(ConstantSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCNST_SYCOnR1504(target.getModelRoot(), target, test);
  }
  return null;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1504(ModelRoot modelRoot, ConstantSpecification_c target, ClassQueryInterface_c test)
{
	return getOneCNST_SYCOnR1504(modelRoot, target, test, true);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1504(ModelRoot modelRoot, ConstantSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCNST_SYCOnR1504(modelRoot,target,test);
}
private static SymbolicConstant_c find_getOneCNST_SYCOnR1504(ModelRoot modelRoot, ConstantSpecification_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ContainsSymbolicConstantContains_R1504) {
	    for ( int i = 0; i < target.backPointer_ContainsSymbolicConstantContains_R1504.size(); ++i ) {
	      SymbolicConstant_c source = (SymbolicConstant_c)target.backPointer_ContainsSymbolicConstantContains_R1504.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c [] targets)
{
  return getManyCNST_SYCsOnR1504(targets, null);
}
public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c [] targets, boolean loadComponent)
{
  return getManyCNST_SYCsOnR1504(targets, null, loadComponent);
}
public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c [] targets, ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1504(targets, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SymbolicConstant_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ContainsSymbolicConstantContains_R1504) {
	    for (int j = 0; j < targets[i].backPointer_ContainsSymbolicConstantContains_R1504.size(); ++j) {
	      SymbolicConstant_c source = (SymbolicConstant_c)targets[i].backPointer_ContainsSymbolicConstantContains_R1504.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SymbolicConstant_c[] ret_set = new SymbolicConstant_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SymbolicConstant_c[0];
  }
  }

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c target)
{
  return getManyCNST_SYCsOnR1504(target, null);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c target, boolean loadComponent)
{
  return getManyCNST_SYCsOnR1504(target, null, loadComponent);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c target, ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1504(target, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1504(ConstantSpecification_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SymbolicConstant_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_ContainsSymbolicConstantContains_R1504) {
    for (int i = 0; i < target.backPointer_ContainsSymbolicConstantContains_R1504.size(); ++i) {
      SymbolicConstant_c source = (SymbolicConstant_c)target.backPointer_ContainsSymbolicConstantContains_R1504.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SymbolicConstant_c[] ret_set = new SymbolicConstant_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SymbolicConstant_c[0];
	}
  }


  
    
// referring navigation

SymbolicConstant_c SucceedsSymbolicConstant ;
public void relateAcrossR1505ToSucceeds(SymbolicConstant_c target)
{
	relateAcrossR1505ToSucceeds(target, true);
}
public void relateAcrossR1505ToSucceeds(SymbolicConstant_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SucceedsSymbolicConstant) return;  // already related

    if ( SucceedsSymbolicConstant != target ) {
    
    Object oldKey = getInstanceKey();

    if (SucceedsSymbolicConstant != null) {
    
        SucceedsSymbolicConstant.clearBackPointerR1505ToPrecedes(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SymbolicConstant_c.relateAcrossR1505ToSucceeds(SymbolicConstant_c target)", 
			"Relate performed across R1505 from Symbolic Constant to Symbolic Constant without unrelate of prior instance.");  
		}
    }
                
    	SucceedsSymbolicConstant = target ;
        m_previous_const_id = target.getConst_id();
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_previous_dt_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1505ToPrecedes(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1505", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1505FromSucceeds(SymbolicConstant_c target)
{
	unrelateAcrossR1505FromSucceeds(target, true);
}
public void unrelateAcrossR1505FromSucceeds(SymbolicConstant_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SucceedsSymbolicConstant == null) return;  // already unrelated
	
	if (target != SucceedsSymbolicConstant) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1505", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1505ToPrecedes(this);
    }
    

      if(SucceedsSymbolicConstant != null) {
      
        m_previous_const_id = SucceedsSymbolicConstant.getConst_id();
        m_previous_dt_dt_id = SucceedsSymbolicConstant.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_previous_dt_dt_id))
        {
          m_previous_dt_dt_id = SucceedsSymbolicConstant.getDt_idCachedValue();
        }       
        SucceedsSymbolicConstant = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1505", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(SymbolicConstant_c [] targets)
{
    return getOneCNST_SYCOnR1505Precedes(targets, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(SymbolicConstant_c [] targets, ClassQueryInterface_c test)
{
    SymbolicConstant_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCNST_SYCOnR1505Precedes(targets[i], test);
        }
    }

    return ret_val;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(SymbolicConstant_c target)
{
  return getOneCNST_SYCOnR1505Precedes(target, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(SymbolicConstant_c target, boolean loadComponent)
{
    return getOneCNST_SYCOnR1505Precedes(target.getModelRoot(), target, null, loadComponent);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(SymbolicConstant_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCNST_SYCOnR1505Precedes(target.getModelRoot(), target, test);
  }
  return null;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(ModelRoot modelRoot, SymbolicConstant_c target, ClassQueryInterface_c test)
{
	return getOneCNST_SYCOnR1505Precedes(modelRoot, target, test, true);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Precedes(ModelRoot modelRoot, SymbolicConstant_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCNST_SYCOnR1505Precedes(modelRoot,target,test);
}
private static SymbolicConstant_c find_getOneCNST_SYCOnR1505Precedes(ModelRoot modelRoot, SymbolicConstant_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SymbolicConstant_c source = (SymbolicConstant_c)target.backPointer_PrecedesSymbolicConstantPrecedes_R1505;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Precedes(SymbolicConstant_c [] targets)
{
  return getManyCNST_SYCsOnR1505Precedes(targets, null);
}
public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Precedes(SymbolicConstant_c [] targets, boolean loadComponent)
{
  return getManyCNST_SYCsOnR1505Precedes(targets, null, loadComponent);
}
public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Precedes(SymbolicConstant_c [] targets, ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1505Precedes(targets, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Precedes(SymbolicConstant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SymbolicConstant_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SymbolicConstant_c source = (SymbolicConstant_c)targets[i].backPointer_PrecedesSymbolicConstantPrecedes_R1505;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SymbolicConstant_c[] ret_set = new SymbolicConstant_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SymbolicConstant_c[0];
  }
  }

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Precedes(SymbolicConstant_c target)
{
  if (target != null) {
    SymbolicConstant_c [] targetArray = new SymbolicConstant_c[1];
    targetArray[0] = target;
    return getManyCNST_SYCsOnR1505Precedes(targetArray);
  } else {
    SymbolicConstant_c [] result = new SymbolicConstant_c [0] ;
  return result ;
}
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Precedes(SymbolicConstant_c target, boolean loadComponent)
{
  if (target != null) {
    SymbolicConstant_c [] targetArray = new SymbolicConstant_c[1];
    targetArray[0] = target;
    return getManyCNST_SYCsOnR1505Precedes(targetArray, loadComponent);
  } else {
    SymbolicConstant_c [] result = new SymbolicConstant_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SymbolicConstantValue_c> backPointer_SymbolicConstantValue_R850 = new ArrayList<SymbolicConstantValue_c>();

public void setSymbolicConstantValueOrderInChildListR850(SymbolicConstantValue_c target, int index) {
	unrelateAcrossR850From(target);
	SymbolicConstantValue_c[] elements = SymbolicConstantValue_c.getManyV_SCVsOnR850(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR850From((SymbolicConstantValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR850To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR850To((SymbolicConstantValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR850To(SymbolicConstantValue_c target)
{
  if (target != null) {
    target.relateAcrossR850To(this, true) ;
  }
}

public void relateAcrossR850To(SymbolicConstantValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR850To(this, notifyChanges) ;
  }
}

public void setBackPointerR850To(SymbolicConstantValue_c target)
{
  	synchronized (backPointer_SymbolicConstantValue_R850) {
		backPointer_SymbolicConstantValue_R850.add(target);
	}
}

public void unrelateAcrossR850From(SymbolicConstantValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR850From(this, true) ;
  }
}

public void unrelateAcrossR850From(SymbolicConstantValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR850From(this, notifyChanges) ;
  }
}

public void clearBackPointerR850To(SymbolicConstantValue_c target)
{
  synchronized (backPointer_SymbolicConstantValue_R850) {
	    backPointer_SymbolicConstantValue_R850.remove(target);
	}
}

public static SymbolicConstant_c getOneCNST_SYCOnR850(SymbolicConstantValue_c [] targets)
{
    return getOneCNST_SYCOnR850(targets, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR850(SymbolicConstantValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneCNST_SYCOnR850(targets, test, true);
}

public static SymbolicConstant_c getOneCNST_SYCOnR850(SymbolicConstantValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SymbolicConstant_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SymbolicConstant_c candidate_val = getOneCNST_SYCOnR850(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCNST_SYCOnR850(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SymbolicConstant_c getOneCNST_SYCOnR850(SymbolicConstantValue_c target)
{
	return getOneCNST_SYCOnR850(target, true);
}
public static SymbolicConstant_c getOneCNST_SYCOnR850(SymbolicConstantValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SymbolicConstant ;
  } else {
    return null;
  }
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR850(targets, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SymbolicConstant_c[0];
  
  
  LinkedHashSet<SymbolicConstant_c> elementsSet = new LinkedHashSet<SymbolicConstant_c>();
  for (int i = 0; i < targets.length; i++) {
    SymbolicConstant_c associate = targets[i].SymbolicConstant;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SymbolicConstant_c[] result = new SymbolicConstant_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c [] targets)
{
  return getManyCNST_SYCsOnR850(targets, null);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SymbolicConstantValue_c [] targetArray = new SymbolicConstantValue_c[1];
    targetArray[0] = target;
    return getManyCNST_SYCsOnR850(targetArray, test, loadComponent);
  } else {
    SymbolicConstant_c [] result = new SymbolicConstant_c [0] ;
    return result ;
  }
  
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c target,
    ClassQueryInterface_c test)
{
    return getManyCNST_SYCsOnR850(target, null, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c target)
{
    return getManyCNST_SYCsOnR850(target, null, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR850(SymbolicConstantValue_c target, boolean loadComponent)
{
    return getManyCNST_SYCsOnR850(target, null, loadComponent);
}


    
  
  
// referred to navigation

LeafSymbolicConstant_c backPointer_IsSubtypeLeafSymbolicConstantIsSubtype_R1502;

public void setLeafSymbolicConstantOrderInChildListR1502(LeafSymbolicConstant_c target, int index) {
	unrelateAcrossR1502From(target);
	LeafSymbolicConstant_c[] elements = LeafSymbolicConstant_c.getManyCNST_LFSCsOnR1502(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1502From((LeafSymbolicConstant_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1502To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1502To((LeafSymbolicConstant_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1502To(LeafSymbolicConstant_c target)
{
  if (target != null) {
    target.relateAcrossR1502To(this, true) ;
  }
}

public void relateAcrossR1502To(LeafSymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1502To(this, notifyChanges) ;
  }
}

public void setBackPointerR1502To(LeafSymbolicConstant_c target)
{
    backPointer_IsSubtypeLeafSymbolicConstantIsSubtype_R1502 = target;
}

public void unrelateAcrossR1502From(LeafSymbolicConstant_c target)
{
  if (target != null) {
    target.unrelateAcrossR1502From(this, true) ;
  }
}

public void unrelateAcrossR1502From(LeafSymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1502From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1502To(LeafSymbolicConstant_c target)
{
	if (target == backPointer_IsSubtypeLeafSymbolicConstantIsSubtype_R1502) {
		backPointer_IsSubtypeLeafSymbolicConstantIsSubtype_R1502 = null;
	}
}

public static SymbolicConstant_c getOneCNST_SYCOnR1502(LeafSymbolicConstant_c [] targets)
{
    return getOneCNST_SYCOnR1502(targets, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1502(LeafSymbolicConstant_c [] targets, ClassQueryInterface_c test)
{
    return getOneCNST_SYCOnR1502(targets, test, true);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1502(LeafSymbolicConstant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SymbolicConstant_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SymbolicConstant_c candidate_val = getOneCNST_SYCOnR1502(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCNST_SYCOnR1502(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1502(LeafSymbolicConstant_c target)
{
	return getOneCNST_SYCOnR1502(target, true);
}
public static SymbolicConstant_c getOneCNST_SYCOnR1502(LeafSymbolicConstant_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeSymbolicConstant ;
  } else {
    return null;
  }
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1502(targets, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SymbolicConstant_c[0];
  
  
  LinkedHashSet<SymbolicConstant_c> elementsSet = new LinkedHashSet<SymbolicConstant_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeSymbolicConstant == null)
	  targets[i].loadProxy();
    SymbolicConstant_c associate = targets[i].IsSupertypeSymbolicConstant;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SymbolicConstant_c[] result = new SymbolicConstant_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c [] targets)
{
  return getManyCNST_SYCsOnR1502(targets, null);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LeafSymbolicConstant_c [] targetArray = new LeafSymbolicConstant_c[1];
    targetArray[0] = target;
    return getManyCNST_SYCsOnR1502(targetArray, test, loadComponent);
  } else {
    SymbolicConstant_c [] result = new SymbolicConstant_c [0] ;
    return result ;
  }
  
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c target,
    ClassQueryInterface_c test)
{
    return getManyCNST_SYCsOnR1502(target, null, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c target)
{
    return getManyCNST_SYCsOnR1502(target, null, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1502(LeafSymbolicConstant_c target, boolean loadComponent)
{
    return getManyCNST_SYCsOnR1502(target, null, loadComponent);
}


    
  
  
// referred to navigation

SymbolicConstant_c backPointer_PrecedesSymbolicConstantPrecedes_R1505;

public void setSymbolicConstantOrderInChildListR1505(SymbolicConstant_c target, int index) {
	unrelateAcrossR1505FromPrecedes(target);
	SymbolicConstant_c[] elements = SymbolicConstant_c.getManyCNST_SYCsOnR1505Precedes(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1505FromPrecedes((SymbolicConstant_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1505ToPrecedes(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1505ToPrecedes((SymbolicConstant_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1505ToPrecedes(SymbolicConstant_c target)
{
  if (target != null) {
    target.relateAcrossR1505ToSucceeds(this, true) ;
  }
}

public void relateAcrossR1505ToPrecedes(SymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1505ToSucceeds(this, notifyChanges) ;
  }
}

public void setBackPointerR1505ToPrecedes(SymbolicConstant_c target)
{
    backPointer_PrecedesSymbolicConstantPrecedes_R1505 = target;
}

public void unrelateAcrossR1505FromPrecedes(SymbolicConstant_c target)
{
  if (target != null) {
    target.unrelateAcrossR1505FromSucceeds(this, true) ;
  }
}

public void unrelateAcrossR1505FromPrecedes(SymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1505FromSucceeds(this, notifyChanges) ;
  }
}

public void clearBackPointerR1505ToPrecedes(SymbolicConstant_c target)
{
	if (target == backPointer_PrecedesSymbolicConstantPrecedes_R1505) {
		backPointer_PrecedesSymbolicConstantPrecedes_R1505 = null;
	}
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Succeeds(SymbolicConstant_c [] targets)
{
    return getOneCNST_SYCOnR1505Succeeds(targets, null);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Succeeds(SymbolicConstant_c [] targets, ClassQueryInterface_c test)
{
    return getOneCNST_SYCOnR1505Succeeds(targets, test, true);
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Succeeds(SymbolicConstant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SymbolicConstant_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SymbolicConstant_c candidate_val = getOneCNST_SYCOnR1505Succeeds(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCNST_SYCOnR1505Succeeds(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SymbolicConstant_c getOneCNST_SYCOnR1505Succeeds(SymbolicConstant_c target)
{
	return getOneCNST_SYCOnR1505Succeeds(target, true);
}
public static SymbolicConstant_c getOneCNST_SYCOnR1505Succeeds(SymbolicConstant_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.SucceedsSymbolicConstant ;
  } else {
    return null;
  }
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCNST_SYCsOnR1505Succeeds(targets, test, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SymbolicConstant_c[0];
  
  
  LinkedHashSet<SymbolicConstant_c> elementsSet = new LinkedHashSet<SymbolicConstant_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SucceedsSymbolicConstant == null)
	  targets[i].loadProxy();
    SymbolicConstant_c associate = targets[i].SucceedsSymbolicConstant;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SymbolicConstant_c[] result = new SymbolicConstant_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c [] targets)
{
  return getManyCNST_SYCsOnR1505Succeeds(targets, null);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SymbolicConstant_c [] targetArray = new SymbolicConstant_c[1];
    targetArray[0] = target;
    return getManyCNST_SYCsOnR1505Succeeds(targetArray, test, loadComponent);
  } else {
    SymbolicConstant_c [] result = new SymbolicConstant_c [0] ;
    return result ;
  }
  
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c target,
    ClassQueryInterface_c test)
{
    return getManyCNST_SYCsOnR1505Succeeds(target, null, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c target)
{
    return getManyCNST_SYCsOnR1505Succeeds(target, null, true);
}

public static SymbolicConstant_c [] getManyCNST_SYCsOnR1505Succeeds(SymbolicConstant_c target, boolean loadComponent)
{
    return getManyCNST_SYCsOnR1505Succeeds(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsDefinedByDataType == null) {          
      // R1500
      DataType_c relInst56818 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56818 == null) {
      			relInst56818 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst56818 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56818 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst56818 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56818 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56818) && !isProxy())) {
	      relInst56818.relateAcrossR1500To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsContainedByConstantSpecification == null) {          
      // R1504
      ConstantSpecification_c relInst56819 = (ConstantSpecification_c) baseRoot.getInstanceList(ConstantSpecification_c.class).get(new Object[] {m_constant_spec_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56819 == null) {
      			relInst56819 = (ConstantSpecification_c) Ooaofooa.getDefaultInstance().getInstanceList(ConstantSpecification_c.class).get(new Object[] {m_constant_spec_id});
      		}
			if (relInst56819 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56819 = (ConstantSpecification_c) roots[i].getInstanceList(ConstantSpecification_c.class).get(new Object[] {m_constant_spec_id});
					if (relInst56819 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56819 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56819) && !isProxy())) {
	      relInst56819.relateAcrossR1504To(this, notifyChanges);
	  }
	  }
	}
	          

	if (SucceedsSymbolicConstant == null) {          
      // R1505
      SymbolicConstant_c relInst56820 = (SymbolicConstant_c) baseRoot.getInstanceList(SymbolicConstant_c.class).get(new Object[] {m_previous_const_id,m_previous_dt_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56820 == null) {
      			relInst56820 = (SymbolicConstant_c) Ooaofooa.getDefaultInstance().getInstanceList(SymbolicConstant_c.class).get(new Object[] {m_previous_const_id,m_previous_dt_dt_id});
      		}
			if (relInst56820 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56820 = (SymbolicConstant_c) roots[i].getInstanceList(SymbolicConstant_c.class).get(new Object[] {m_previous_const_id,m_previous_dt_dt_id});
					if (relInst56820 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56820 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56820) && !isProxy())) {
	      relInst56820.relateAcrossR1505ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R1500
      // S_DT
		  inst=IsDefinedByDataType;
			unrelateAcrossR1500From(IsDefinedByDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1504
      // CNST_CSP
		  inst=IsContainedByConstantSpecification;
			unrelateAcrossR1504From(IsContainedByConstantSpecification, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1505
      // CNST_SYC
		  inst=SucceedsSymbolicConstant;
			unrelateAcrossR1505FromSucceeds(SucceedsSymbolicConstant, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SymbolicConstant_c inst = (SymbolicConstant_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SymbolicConstant_c SymbolicConstantInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SymbolicConstant_c result=findSymbolicConstantInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,SymbolicConstant_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSymbolicConstantInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static SymbolicConstant_c findSymbolicConstantInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SymbolicConstant_c x = (SymbolicConstant_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static SymbolicConstant_c SymbolicConstantInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SymbolicConstantInstance(modelRoot,test,true);
  }
  
  public static SymbolicConstant_c SymbolicConstantInstance(ModelRoot modelRoot)
  {
	 return SymbolicConstantInstance(modelRoot,null,true);
  }

  public static SymbolicConstant_c [] SymbolicConstantInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, SymbolicConstant_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(SymbolicConstant_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SymbolicConstant_c x = (SymbolicConstant_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SymbolicConstant_c[] ret_set = new SymbolicConstant_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SymbolicConstant_c[0];
			}		
		} 
  }
  public static SymbolicConstant_c [] SymbolicConstantInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SymbolicConstantInstances(modelRoot,test,true);
  }
  public static SymbolicConstant_c [] SymbolicConstantInstances(ModelRoot modelRoot)
  {
	return SymbolicConstantInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Symbolic Constant.dispose call: ";
	DataType_c testR1500Inst = DataType_c.getOneS_DTOnR1500(this, false);

	if ( testR1500Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1500 ";
	}
	SymbolicConstantValue_c testR850Inst = SymbolicConstantValue_c.getOneV_SCVOnR850(this, false);

	if ( testR850Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "850 ";	
	}
	LeafSymbolicConstant_c testR1502Inst1 = LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502(this, false);

	if ( testR1502Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1502 ";
	}
	ConstantSpecification_c testR1504Inst = ConstantSpecification_c.getOneCNST_CSPOnR1504(this, false);

	if ( testR1504Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1504 ";
	}
	SymbolicConstant_c testR1505Inst = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(this, false);

	if ( testR1505Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1505 ";	
	}
	 testR1505Inst = SymbolicConstant_c.getOneCNST_SYCOnR1505Succeeds(this, false);

	if ( testR1505Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1505 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Symbolic Constant", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("const_id")){
         return true;
      }
      if(attributeName.equals("previous_const_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      if(attributeName.equals("previous_dt_dt_id")){
         return true;
      }
      if(attributeName.equals("constant_spec_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getConst_id();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getDt_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getDt_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getConst_idLongBased()
  {
    if(m_const_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_const_id)){
    	return 0xfffffff & m_const_id.getLeastSignificantBits();
    }
    return m_const_idLongBased ;
  }
  public java.util.UUID getConst_id()
  {
    return m_const_id ;
  }


  public void setConst_id(java.util.UUID newValue)
  {
   m_const_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPrevious_const_idLongBased()
  {
    if ( SucceedsSymbolicConstant != null )
    {
      return SucceedsSymbolicConstant.getConst_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_const_id()
  {
    if ( SucceedsSymbolicConstant != null )
    {
      return SucceedsSymbolicConstant.getConst_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_const_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_const_id) )
      return m_previous_const_id;
    else
      return getPrevious_const_id();
  }
  
  public void setPrevious_const_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_const_id)){
	        return;
	    }
	}else if(m_previous_const_id != null){
	    if(m_previous_const_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_const_id", m_previous_const_id, newValue,true); 
   m_previous_const_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDt_idLongBased()
  {
    if ( IsDefinedByDataType != null )
    {
      return IsDefinedByDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( IsDefinedByDataType != null )
    {
      return IsDefinedByDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dt_id)){
	        return;
	    }
	}else if(m_dt_id != null){
	    if(m_dt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id", m_dt_id, newValue,true); 
   m_dt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPrevious_dt_dt_idLongBased()
  {
    if ( SucceedsSymbolicConstant != null )
    {
      return SucceedsSymbolicConstant.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_dt_dt_id()
  {
    if ( SucceedsSymbolicConstant != null )
    {
      return SucceedsSymbolicConstant.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_dt_dt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_dt_dt_id) )
      return m_previous_dt_dt_id;
    else
      return getPrevious_dt_dt_id();
  }
  
  public void setPrevious_dt_dt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_dt_dt_id)){
	        return;
	    }
	}else if(m_previous_dt_dt_id != null){
	    if(m_previous_dt_dt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_dt_dt_id", m_previous_dt_dt_id, newValue,true); 
   m_previous_dt_dt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getConstant_spec_idLongBased()
  {
    if ( IsContainedByConstantSpecification != null )
    {
      return IsContainedByConstantSpecification.getConstant_spec_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getConstant_spec_id()
  {
    if ( IsContainedByConstantSpecification != null )
    {
      return IsContainedByConstantSpecification.getConstant_spec_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getConstant_spec_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_constant_spec_id) )
      return m_constant_spec_id;
    else
      return getConstant_spec_id();
  }
  
  public void setConstant_spec_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_constant_spec_id)){
	        return;
	    }
	}else if(m_constant_spec_id != null){
	    if(m_constant_spec_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Constant_spec_id", m_constant_spec_id, newValue,true); 
   m_constant_spec_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Symbolic Constant", //$NON-NLS-1$
	  " Operation entered: Symbolic Constant::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SymbolicConstant_c [] objs = SymbolicConstant_c.SymbolicConstantInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Symbolic Constant", //$NON-NLS-1$
	  " Operation entered: Symbolic Constant::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SymbolicConstant_c_test56822_c implements ClassQueryInterface_c
    {
	  SymbolicConstant_c_test56822_c( java.util.UUID            p56823, java.util.UUID            p56824 ) {
	       m_p56823 = p56823; 
m_p56824 = p56824;
	  }
	  private java.util.UUID             m_p56823; private java.util.UUID             m_p56824; 
	  public boolean evaluate (Object candidate)
	  {
	      SymbolicConstant_c selected = (SymbolicConstant_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConst_id().equals(m_p56823)) & (selected.getDt_id().equals(m_p56824));
	      return retval;
	  }
    }

    SymbolicConstant_c [] objs56821 = 
    SymbolicConstant_c.SymbolicConstantInstances(modelRoot, new SymbolicConstant_c_test56822_c(getConst_id(), getDt_id())) ;

    if ( (  (objs56821.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56821.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56821.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56821.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56821.length )  + " Const_ID: " + "Not Printable"  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56821.length )  + " Const_ID: " + "Not Printable"  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Symbolic Constant is a referring class in association: rel.Numb = 1505
          // The participating class is: Symbolic Constant
    class SymbolicConstant_c_test56828_c implements ClassQueryInterface_c
    {
	  SymbolicConstant_c_test56828_c( java.util.UUID            p56829, java.util.UUID            p56830 ) {
	       m_p56829 = p56829; 
m_p56830 = p56830;
	  }
	  private java.util.UUID             m_p56829; private java.util.UUID             m_p56830; 
	  public boolean evaluate (Object candidate)
	  {
	      SymbolicConstant_c selected = (SymbolicConstant_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConst_id().equals(m_p56829)) & (selected.getDt_id().equals(m_p56830));
	      return retval;
	  }
    }

    SymbolicConstant_c [] objs56827 = 
    SymbolicConstant_c.SymbolicConstantInstances(modelRoot, new SymbolicConstant_c_test56828_c(getPrevious_const_id(), getPrevious_dt_dt_id())) ;

    if ( (  (objs56827.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Association: 1505: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56827.length )  + " Previous_Const_ID: " + "Not Printable"  + " Previous_DT_DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Association: 1505: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56827.length )  + " Previous_Const_ID: " + "Not Printable"  + " Previous_DT_DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Symbolic Constant is a referring class in association: rel.Numb = 1500
          // The participating class is: Data Type
    class DataType_c_test56832_c implements ClassQueryInterface_c
    {
	  DataType_c_test56832_c( java.util.UUID            p56833 ) {
	  m_p56833 = p56833;
	  }
	  private java.util.UUID             m_p56833; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56833));
	      return retval;
	  }
    }

    DataType_c [] objs56831 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test56832_c(getDt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56831.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Association: 1500: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56831.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Association: 1500: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56831.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Symbolic Constant is a referring class in association: rel.Numb = 1504
          // The participating class is: Constant Specification
    class ConstantSpecification_c_test56835_c implements ClassQueryInterface_c
    {
	  ConstantSpecification_c_test56835_c( java.util.UUID            p56836 ) {
	  m_p56836 = p56836;
	  }
	  private java.util.UUID             m_p56836; 
	  public boolean evaluate (Object candidate)
	  {
	      ConstantSpecification_c selected = (ConstantSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConstant_spec_id().equals(m_p56836));
	      return retval;
	  }
    }

    ConstantSpecification_c [] objs56834 = 
    ConstantSpecification_c.ConstantSpecificationInstances(modelRoot, new ConstantSpecification_c_test56835_c(getConstant_spec_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56834.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Association: 1504: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56834.length )  + " Constant_Spec_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Association: 1504: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56834.length )  + " Constant_Spec_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Symbolic Constant is a participating class in association: rel.Numb = 1505
             // Object: Symbolic Constant
    class SymbolicConstant_c_test56838_c implements ClassQueryInterface_c
    {
	  SymbolicConstant_c_test56838_c( java.util.UUID            p56839, java.util.UUID            p56840 ) {
	       m_p56839 = p56839; 
m_p56840 = p56840;
	  }
	  private java.util.UUID             m_p56839; private java.util.UUID             m_p56840; 
	  public boolean evaluate (Object candidate)
	  {
	      SymbolicConstant_c selected = (SymbolicConstant_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPrevious_const_id().equals(m_p56839)) & (selected.getPrevious_dt_dt_id().equals(m_p56840));
	      return retval;
	  }
    }

    SymbolicConstant_c [] objs56837 = 
    SymbolicConstant_c.SymbolicConstantInstances(modelRoot, new SymbolicConstant_c_test56838_c(getConst_id(), getDt_id())) ;

    if ( (  (objs56837.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Association: 1505: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56837.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Association: 1505: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56837.length )  , e); 
      }
      retval = false;

    }

          // Symbolic Constant is a participating class in association: rel.Numb = 850
             // Object: Symbolic Constant Value
          // Supertype: rel.Numb = 1502
    int objs56841 = 0;
            // Subtype Object: Leaf Symbolic Constant
    class LeafSymbolicConstant_c_test56842_c implements ClassQueryInterface_c
    {
	  LeafSymbolicConstant_c_test56842_c( java.util.UUID            p56843, java.util.UUID            p56844 ) {
	       m_p56843 = p56843; 
m_p56844 = p56844;
	  }
	  private java.util.UUID             m_p56843; private java.util.UUID             m_p56844; 
	  public boolean evaluate (Object candidate)
	  {
	      LeafSymbolicConstant_c selected = (LeafSymbolicConstant_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConst_id().equals(m_p56843)) & (selected.getDt_id().equals(m_p56844));
	      return retval;
	  }
    }

    LeafSymbolicConstant_c [] objs56845 = 
    LeafSymbolicConstant_c.LeafSymbolicConstantInstances(modelRoot, new LeafSymbolicConstant_c_test56842_c(getConst_id(), getDt_id())) ;
 
    objs56841 = objs56841 + objs56845.length;
    if ( objs56841 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Symbolic Constant", //$NON-NLS-1$
           "Consistency: Object: Symbolic Constant: Association: 1502: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56841 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Symbolic Constant: Association: 1502: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56841 )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( (p_Value.equals("move up")) )
{

SymbolicConstant_c v_prev_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Succeeds(this);


return   (v_prev_attr != null);



}

else if ( (p_Value.equals("move down")) )
{

SymbolicConstant_c v_next_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(this);


return   (v_next_attr != null);



}


}

return false;



   } // End actionFilter
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
LeafSymbolicConstant_c v_lfsc = LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502(this);


if (   (v_lfsc != null) )
{

if (v_lfsc != null) {
v_lfsc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ConstantSpecification_c v_owningSpec = ConstantSpecification_c.getOneCNST_CSPOnR1504(this);


SymbolicConstant_c v_nextConst = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(this);


Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


if ( (  (v_nextConst != null)) )
{

if ( (getPrevious_const_id().equals(Gd_c.Null_unique_id())) )
{

this.unrelateAcrossR1505FromPrecedes(v_nextConst);



}

else
{

SymbolicConstant_c [] v_consts = SymbolicConstant_c.getManyCNST_SYCsOnR1504(v_owningSpec);


SymbolicConstant_c  v_const = null;
for ( int i55155 = 0; i55155 < v_consts.length; i55155++)
{
  v_const = v_consts[i55155] ;

SymbolicConstant_c v_thisconst = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(v_const);


if ( (this == v_thisconst) )
{

this.unrelateAcrossR1505FromPrecedes(v_nextConst);


this.unrelateAcrossR1505FromSucceeds(v_const);


if (v_nextConst != null) {
  v_nextConst.relateAcrossR1505ToSucceeds(v_const);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


break;



}


}


}


}

else
{

SymbolicConstant_c v_priorCost = SymbolicConstant_c.getOneCNST_SYCOnR1505Succeeds(this);


if ( (  (v_priorCost != null)) )
{

this.unrelateAcrossR1505FromSucceeds(v_priorCost);



}


}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


DataType_c v_dt = DataType_c.getOneS_DTOnR1500(this);


this.unrelateAcrossR1500From(v_dt);


ConstantSpecification_c v_csp = ConstantSpecification_c.getOneCNST_CSPOnR1504(this);


this.unrelateAcrossR1504From(v_csp);


SymbolicConstantValue_c [] v_scvs = SymbolicConstantValue_c.getManyV_SCVsOnR850(this);


SymbolicConstantValue_c  v_scv = null;
for ( int i55156 = 0; i55156 < v_scvs.length; i55156++)
{
  v_scv = v_scvs[i55156] ;

this.unrelateAcrossR850From(v_scv);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
SymbolicConstant_c [] v_peers = SymbolicConstant_c.getManyCNST_SYCsOnR1504(ConstantSpecification_c.getManyCNST_CSPsOnR1504(this));


SymbolicConstant_c  v_peer = null;
for ( int i55157 = 0; i55157 < v_peers.length; i55157++)
{
  v_peer = v_peers[i55157] ;

SymbolicConstant_c v_nextConst = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(v_peer);


if ( (  (v_nextConst == null)) )
{

break;



}


}

if ( (  (v_peer != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


if (v_peer != null) {
  v_peer.relateAcrossR1505ToPrecedes(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


String       v_name = Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed Constant"			    
,Converttoinstance()) ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}


   } // End initialize
  public  void Movedown()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Movedown") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


SymbolicConstant_c v_next_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(this);


SymbolicConstant_c v_prev_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Succeeds(this);


SymbolicConstant_c v_next_next_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

if (v_next_next_attr != null) {
v_next_next_attr.unrelateAcrossR1505FromSucceeds(v_next_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_prev_attr != null)) )
{

this.unrelateAcrossR1505FromSucceeds(v_prev_attr);



}

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR1505FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if ( (  (v_prev_attr != null)) )
{

if (v_next_attr != null) {
  v_next_attr.relateAcrossR1505ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

  this.relateAcrossR1505ToSucceeds(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_next_attr != null) {
  v_next_next_attr.relateAcrossR1505ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveDown
  public  void Moveup()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Moveup") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


SymbolicConstant_c v_prev_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Succeeds(this);


SymbolicConstant_c v_prev_prev_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Succeeds(v_prev_attr);


SymbolicConstant_c v_next_attr = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(this);


if ( (  (v_prev_prev_attr != null)) )
{

if (v_prev_attr != null) {
v_prev_attr.unrelateAcrossR1505FromSucceeds(v_prev_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_attr != null)) )
{

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR1505FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

this.unrelateAcrossR1505FromSucceeds(v_prev_attr);


if ( (  (v_prev_prev_attr != null)) )
{

  this.relateAcrossR1505ToSucceeds(v_prev_prev_attr);



}

if ( (  (v_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

if (v_prev_attr != null) {
  v_prev_attr.relateAcrossR1505ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_attr != null) {
  v_next_attr.relateAcrossR1505ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveUp
  public  void Settodefaultdatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Settodefaultdatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_dom = Domain_c.DomainInstance(modelRoot) ;


  class DataType_test55797_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals("integer") ;
	}
  }
DataType_c v_intdt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test55797_c());


DataTypePackage_c v_rootPkg = DataTypePackage_c.getOneS_DPKOnR1506(ConstantInPackage_c.getOneCNST_CIPOnR1506(ConstantSpecification_c.getOneCNST_CSPOnR1504(this)));


DataTypePackage_c v_actualRootPkg = v_rootPkg ;


SystemModel_c v_sys = SystemModel_c.getOneS_SYSOnR4400(SystemDatatypePackage_c.getOneSLD_SDPOnR4400(v_rootPkg));


if ( (  (v_sys == null)) )
{

while ( (  (v_rootPkg != null)) )
{

v_sys = SystemModel_c.getOneS_SYSOnR4400(SystemDatatypePackage_c.getOneSLD_SDPOnR4400(v_rootPkg));


v_rootPkg = DataTypePackage_c.getOneS_DPKOnR37(DataTypePackageInPackage_c.getOneS_DPIPOnR38(v_rootPkg));


if ( (  (v_rootPkg != null)) )
{

v_actualRootPkg = v_rootPkg ;



}


}


}

if ( (  (v_sys == null)) )
{

v_sys = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR1400(SpecificationPackage_c.getOneEP_SPKGOnR1402(v_actualRootPkg)));



}

if ( (  (v_sys == null)) )
{

v_sys = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(ConstantSpecification_c.getOneCNST_CSPOnR1504(this))));


java.util.UUID         v_int_dt_id = Gd_c.Null_unique_id() ;


if (   (v_sys != null) )
{

v_int_dt_id = v_sys.Getcoretypeid(			    
"integer") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_int_dt_id);


DataType_c v_int_dt = DataType_c.getOneS_DTOnR8001(v_pe);


if ( (  (v_int_dt == null)) )
{

  class DataType_test55798_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getName().equals("integer")) ;
	}
  }
v_int_dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(v_sys)), new DataType_test55798_c());



}


}

if ( ((  (v_intdt == null)) && (  (v_sys != null))) )
{

java.util.UUID         v_intdt_id = Gd_c.Null_unique_id() ;


if (   (v_sys != null) )
{

v_intdt_id = v_sys.Getcoretypeid(			    
"integer") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_intdt = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_intdt == null)) )
{

DataTypePackage_c v_dtPkg = DataTypePackage_c.getOneS_DPKOnR1506(ConstantInPackage_c.getOneCNST_CIPOnR1506(ConstantSpecification_c.getOneCNST_CSPOnR1504(this)));


Domain_c v_domain = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, v_dtPkg.Getdomainid());


SystemModel_c v_compSys = SystemModel_c.getOneS_SYSOnR4606(ComponentPackage_c.getOneCP_CPOnR4608(Component_c.getOneC_COnR4204(DomainAsComponent_c.getOneCN_DCOnR4204(v_domain))));


java.util.UUID         v_intdt_id = Gd_c.Null_unique_id() ;


if (   (v_compSys != null) )
{

v_intdt_id = v_compSys.Getcoretypeid(			    
"integer") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_intdt = DataType_c.getOneS_DTOnR8001(v_pe);



}

DataType_c v_dt = DataType_c.getOneS_DTOnR1500(this);


this.unrelateAcrossR1500From(v_dt);


  this.relateAcrossR1500To(v_intdt);


LiteralSymbolicConstant_c v_lsc = LiteralSymbolicConstant_c.getOneCNST_LSCOnR1503(LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502(this));


if ( (  (v_lsc != null)) )
{

if (v_lsc != null) {
  v_lsc.setValue( "0") ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


   } // End setToDefaultDatatype
  public  void Resolvedatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Resolvedatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dtProxy = DataType_c.getOneS_DTOnR1500(this);


if ( (  (v_dtProxy != null) &&   !Util_c.Isproxy(			    
Converttoinstance())) )
{

String       v_name = v_dtProxy.getName() ;


if (v_dtProxy != null) {
v_dtProxy.unrelateAcrossR1500From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(ConstantSpecification_c.getOneCNST_CSPOnR1504(this));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( v_isInGenericPackage )
{

java.util.UUID         v_id = v_packageableElem.Resolvedatatyperelativetoself(			    
"integer"			    
,v_name) ;


  class DataType_test55799_c implements ClassQueryInterface_c
  {
	DataType_test55799_c( java.util.UUID         p55800 ) {
		m_p55800 = p55800;
	}
	private java.util.UUID         m_p55800;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getDt_id().equals(m_p55800) ;
	}
  }
DataType_c v_resolvedDt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8002(ElementVisibility_c.getManyPE_VISsOnR8002(v_package)), new DataType_test55799_c(v_id));


if ( (  (v_resolvedDt == null)) )
{

  class DataType_test55801_c implements ClassQueryInterface_c
  {
	DataType_test55801_c( java.util.UUID         p55802 ) {
		m_p55802 = p55802;
	}
	private java.util.UUID         m_p55802;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getDt_id().equals(m_p55802) ;
	}
  }
v_resolvedDt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8004(ComponentVisibility_c.getManyPE_CVSsOnR8004(v_component)), new DataType_test55801_c(v_id));



}

if (   (v_resolvedDt != null) )
{

if (v_resolvedDt != null) {
  v_resolvedDt.relateAcrossR1500To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

else
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4400(SystemDatatypePackage_c.getOneSLD_SDPOnR4400(DataTypePackage_c.getOneS_DPKOnR1506(ConstantInPackage_c.getOneCNST_CIPOnR1506(ConstantSpecification_c.getOneCNST_CSPOnR1504(this)))));


if ( (  !  (v_system == null)) )
{

java.util.UUID         v_r_dt_id = v_system.Getcoretypeid(			    
v_name) ;


PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_r_dt_id);


DataType_c v_resolvedDT = DataType_c.getOneS_DTOnR8001(v_pe);


if ( (  (v_resolvedDT == null)) )
{

v_r_dt_id = v_system.Getcoretypeid(			    
"integer") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_r_dt_id);


v_resolvedDT = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_resolvedDT != null)) )
{

if (v_resolvedDT != null) {
  v_resolvedDT.relateAcrossR1500To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

else
{

DataTypePackage_c v_dtPkg = DataTypePackage_c.getOneS_DPKOnR1506(ConstantInPackage_c.getOneCNST_CIPOnR1506(ConstantSpecification_c.getOneCNST_CSPOnR1504(this)));


Domain_c v_domain = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, v_dtPkg.Getdomainid());


java.util.UUID         v_id = v_domain.Resolvedatatyperelativetoself(			    
"integer"			    
,v_name) ;


  class DataType_test55803_c implements ClassQueryInterface_c
  {
	DataType_test55803_c( java.util.UUID         p55804 ) {
		m_p55804 = p55804;
	}
	private java.util.UUID         m_p55804;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getDt_id().equals(m_p55804)) ;
	}
  }
DataType_c v_resolvedDT = DataType_c.getOneS_DTOnR14(v_domain, new DataType_test55803_c(v_id));


if ( (  (v_resolvedDT == null)) )
{

SystemModel_c v_domSys = SystemModel_c.getOneS_SYSOnR4606(ComponentPackage_c.getOneCP_CPOnR4608(Component_c.getOneC_COnR4204(DomainAsComponent_c.getOneCN_DCOnR4204(v_domain))));


  class DataType_test55805_c implements ClassQueryInterface_c
  {
	DataType_test55805_c( java.util.UUID         p55806 ) {
		m_p55806 = p55806;
	}
	private java.util.UUID         m_p55806;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getDt_id().equals(m_p55806)) ;
	}
  }
v_resolvedDT = DataType_c.getOneS_DTOnR4401(SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402(v_domSys), new DataType_test55805_c(v_id));


if (   (v_resolvedDT == null) &&   (v_domSys != null) && v_domSys.getUseglobals() )
{

  class PackageableElement_test55807_c implements ClassQueryInterface_c
  {
	PackageableElement_test55807_c( java.util.UUID         p55808 ) {
		m_p55808 = p55808;
	}
	private java.util.UUID         m_p55808;
	public boolean evaluate (Object candidate)
	{
		PackageableElement_c selected = (PackageableElement_c)candidate;
		return selected.getElement_id().equals(m_p55808) ;
	}
  }
PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR9100(GlobalElementInSystem_c.getManyG_EISsOnR9100(v_domSys), new PackageableElement_test55807_c(v_id));


v_resolvedDT = DataType_c.getOneS_DTOnR8001(v_pe);



}


}

if ( (  (v_resolvedDT != null)) )
{

if (v_resolvedDT != null) {
  v_resolvedDT.relateAcrossR1500To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}


}


   } // End resolveDatatype
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Symbolic Constant", " Operation entered: SymbolicConstant::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
ConstantSpecification_c v_spec = ConstantSpecification_c.getOneCNST_CSPOnR1504(this);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_spec));


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);


java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

SymbolicConstant_c [] v_constants = SymbolicConstant_c.getManyCNST_SYCsOnR1504(ConstantSpecification_c.getManyCNST_CSPsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(v_package)));


SymbolicConstant_c  v_constant = null;
for ( int i55158 = 0; i55158 < v_constants.length; i55158++)
{
  v_constant = v_constants[i55158] ;

if ( (v_constant != this && v_constant.getName().equals(getName())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another constant under the same specification with a " + "matching name."			    
,Converttoinstance()			    
,getConst_id()			    
,getName()			    
,v_package.Getpath(			    
"") + "::" + v_spec.getInformalgroupname() + "::" + getName()			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return SymbolicConstantActionFilter.getSingleton();
    }
	  return null;
  }
} // end Symbolic Constant
