package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.TimeSpan_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_TIME_SPAN extends genericEvent_c {
	public abstract int getEvtcode();
}

public class TimeSpan_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public TimeSpan_c(ModelRoot modelRoot, java.util.UUID p_m_span_id,
			java.util.UUID p_m_mark_id, java.util.UUID p_m_prev_mark_id,
			String p_m_name, String p_m_descrip) {
		super(modelRoot);
		m_name = p_m_name;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_prev_mark_id = IdAssigner.preprocessUUID(p_m_prev_mark_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_mark_id = IdAssigner.preprocessUUID(p_m_mark_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_span_id = IdAssigner.preprocessUUID(p_m_span_id);
		//extract 28 bit value only            
		m_span_idLongBased = 0xfffffff & p_m_span_id.getLeastSignificantBits();

		setUniqueId(m_span_id);
		Object[] key = {m_span_id};
		addInstanceToMap(key);
	}
	static public TimeSpan_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_span_id, java.util.UUID p_m_mark_id,
			java.util.UUID p_m_prev_mark_id, String p_m_name,
			String p_m_descrip, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);
		TimeSpan_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_span_id};
			new_inst = (TimeSpan_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_name = p_m_name;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_prev_mark_id = IdAssigner
						.preprocessUUID(p_m_prev_mark_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_mark_id = IdAssigner.preprocessUUID(p_m_mark_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_span_id = IdAssigner.preprocessUUID(p_m_span_id);
				//extract 28 bit value only            
				new_inst.m_span_idLongBased = 0xfffffff & p_m_span_id
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new TimeSpan_c(modelRoot, p_m_span_id, p_m_mark_id,
					p_m_prev_mark_id, p_m_name, p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public TimeSpan_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_span_id, java.util.UUID p_m_mark_id,
			java.util.UUID p_m_prev_mark_id, String p_m_name, String p_m_descrip) {
		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);
		TimeSpan_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_span_id};
			source = (TimeSpan_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_name = p_m_name;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_prev_mark_id = IdAssigner
						.preprocessUUID(p_m_prev_mark_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_mark_id = IdAssigner.preprocessUUID(p_m_mark_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_span_id = IdAssigner.preprocessUUID(p_m_span_id);
				//extract 28 bit value only            
				source.m_span_idLongBased = 0xfffffff & p_m_span_id
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		TimeSpan_c new_inst = new TimeSpan_c(modelRoot, p_m_span_id,
				p_m_mark_id, p_m_prev_mark_id, p_m_name, p_m_descrip);
		return new_inst;
	}
	public TimeSpan_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_name = "";
		m_descrip = "";
		m_prev_mark_id = IdAssigner.NULL_UUID;
		m_mark_id = IdAssigner.NULL_UUID;
		m_span_id = idAssigner.createUUID();
		setUniqueId(m_span_id);
		Object[] key = {m_span_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_span_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_span_id != p_newKey) {

			m_span_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof TimeSpan_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof TimeSpan_c)) {
			return false;
		}

		TimeSpan_c me = (TimeSpan_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSpan_id()) || IdAssigner.NULL_UUID
						.equals(((TimeSpan_c) elem).getSpan_id())) && this != elem)) {
			return false;
		}
		if (!getSpan_id().equals(((TimeSpan_c) elem).getSpan_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof TimeSpan_c)) {
			return false;
		}

		TimeSpan_c me = (TimeSpan_c) elem;
		if (!getSpan_id().equals(((TimeSpan_c) elem).getSpan_id()))
			return false;
		return true;
	}

	// Attributes
	private String m_name;
	private String m_descrip;
	private java.util.UUID m_prev_mark_id;
	private java.util.UUID m_mark_id;
	private java.util.UUID m_span_id;
	private long m_span_idLongBased;

	// declare association references from this class

	// referring navigation

	TimingMark_c SpanBeginsAtTimingMark;
	public void relateAcrossR941To(TimingMark_c target) {
		relateAcrossR941To(target, true);
	}
	public void relateAcrossR941To(TimingMark_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpanBeginsAtTimingMark)
			return; // already related

		if (SpanBeginsAtTimingMark != target) {

			Object oldKey = getInstanceKey();

			if (SpanBeginsAtTimingMark != null) {

				SpanBeginsAtTimingMark.clearBackPointerR941To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"TimeSpan_c.relateAcrossR941To(TimingMark_c target)",
									"Relate performed across R941 from Time Span to Timing Mark without unrelate of prior instance.");
				}
			}

			SpanBeginsAtTimingMark = target;
			m_prev_mark_id = target.getMark_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR941To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "941", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR941From(TimingMark_c target) {
		unrelateAcrossR941From(target, true);
	}
	public void unrelateAcrossR941From(TimingMark_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpanBeginsAtTimingMark == null)
			return; // already unrelated

		if (target != SpanBeginsAtTimingMark) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R941",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR941To(this);
		}

		if (SpanBeginsAtTimingMark != null) {

			m_prev_mark_id = SpanBeginsAtTimingMark.getMark_id();
			SpanBeginsAtTimingMark = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "941", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static TimeSpan_c getOneSQ_TSOnR941(TimingMark_c[] targets) {
		return getOneSQ_TSOnR941(targets, null);
	}

	public static TimeSpan_c getOneSQ_TSOnR941(TimingMark_c[] targets,
			ClassQueryInterface_c test) {
		TimeSpan_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_TSOnR941(targets[i], test);
			}
		}

		return ret_val;
	}

	public static TimeSpan_c getOneSQ_TSOnR941(TimingMark_c target) {
		return getOneSQ_TSOnR941(target, null);
	}

	public static TimeSpan_c getOneSQ_TSOnR941(TimingMark_c target,
			boolean loadComponent) {
		return getOneSQ_TSOnR941(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static TimeSpan_c getOneSQ_TSOnR941(TimingMark_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_TSOnR941(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static TimeSpan_c getOneSQ_TSOnR941(ModelRoot modelRoot,
			TimingMark_c target, ClassQueryInterface_c test) {
		return getOneSQ_TSOnR941(modelRoot, target, test, true);
	}

	public static TimeSpan_c getOneSQ_TSOnR941(ModelRoot modelRoot,
			TimingMark_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSQ_TSOnR941(modelRoot, target, test);
	}
	private static TimeSpan_c find_getOneSQ_TSOnR941(ModelRoot modelRoot,
			TimingMark_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941) {
				for (int i = 0; i < target.backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941
						.size(); ++i) {
					TimeSpan_c source = (TimeSpan_c) target.backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c[] targets) {
		return getManySQ_TSsOnR941(targets, null);
	}
	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c[] targets,
			boolean loadComponent) {
		return getManySQ_TSsOnR941(targets, null, loadComponent);
	}
	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c[] targets,
			ClassQueryInterface_c test) {
		return getManySQ_TSsOnR941(targets, test, true);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new TimeSpan_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941) {
				for (int j = 0; j < targets[i].backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941
						.size(); ++j) {
					TimeSpan_c source = (TimeSpan_c) targets[i].backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			TimeSpan_c[] ret_set = new TimeSpan_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new TimeSpan_c[0];
		}
	}

	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c target) {
		return getManySQ_TSsOnR941(target, null);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c target,
			boolean loadComponent) {
		return getManySQ_TSsOnR941(target, null, loadComponent);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c target,
			ClassQueryInterface_c test) {
		return getManySQ_TSsOnR941(target, test, true);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR941(TimingMark_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new TimeSpan_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941) {
			for (int i = 0; i < target.backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941
					.size(); ++i) {
				TimeSpan_c source = (TimeSpan_c) target.backPointer_DefinesStartOfTimeSpanDefinesStartOf_R941
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			TimeSpan_c[] ret_set = new TimeSpan_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new TimeSpan_c[0];
		}
	}

	// referring navigation

	TimingMark_c SpanEndsAtTimingMark;
	public void relateAcrossR942To(TimingMark_c target) {
		relateAcrossR942To(target, true);
	}
	public void relateAcrossR942To(TimingMark_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpanEndsAtTimingMark)
			return; // already related

		if (SpanEndsAtTimingMark != target) {

			Object oldKey = getInstanceKey();

			if (SpanEndsAtTimingMark != null) {

				SpanEndsAtTimingMark.clearBackPointerR942To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"TimeSpan_c.relateAcrossR942To(TimingMark_c target)",
									"Relate performed across R942 from Time Span to Timing Mark without unrelate of prior instance.");
				}
			}

			SpanEndsAtTimingMark = target;
			m_mark_id = target.getMark_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR942To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "942", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR942From(TimingMark_c target) {
		unrelateAcrossR942From(target, true);
	}
	public void unrelateAcrossR942From(TimingMark_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpanEndsAtTimingMark == null)
			return; // already unrelated

		if (target != SpanEndsAtTimingMark) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R942",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR942To(this);
		}

		if (SpanEndsAtTimingMark != null) {

			m_mark_id = SpanEndsAtTimingMark.getMark_id();
			SpanEndsAtTimingMark = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "942", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static TimeSpan_c getOneSQ_TSOnR942(TimingMark_c[] targets) {
		return getOneSQ_TSOnR942(targets, null);
	}

	public static TimeSpan_c getOneSQ_TSOnR942(TimingMark_c[] targets,
			ClassQueryInterface_c test) {
		TimeSpan_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_TSOnR942(targets[i], test);
			}
		}

		return ret_val;
	}

	public static TimeSpan_c getOneSQ_TSOnR942(TimingMark_c target) {
		return getOneSQ_TSOnR942(target, null);
	}

	public static TimeSpan_c getOneSQ_TSOnR942(TimingMark_c target,
			boolean loadComponent) {
		return getOneSQ_TSOnR942(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static TimeSpan_c getOneSQ_TSOnR942(TimingMark_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_TSOnR942(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static TimeSpan_c getOneSQ_TSOnR942(ModelRoot modelRoot,
			TimingMark_c target, ClassQueryInterface_c test) {
		return getOneSQ_TSOnR942(modelRoot, target, test, true);
	}

	public static TimeSpan_c getOneSQ_TSOnR942(ModelRoot modelRoot,
			TimingMark_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSQ_TSOnR942(modelRoot, target, test);
	}
	private static TimeSpan_c find_getOneSQ_TSOnR942(ModelRoot modelRoot,
			TimingMark_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942) {
				for (int i = 0; i < target.backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942
						.size(); ++i) {
					TimeSpan_c source = (TimeSpan_c) target.backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c[] targets) {
		return getManySQ_TSsOnR942(targets, null);
	}
	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c[] targets,
			boolean loadComponent) {
		return getManySQ_TSsOnR942(targets, null, loadComponent);
	}
	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c[] targets,
			ClassQueryInterface_c test) {
		return getManySQ_TSsOnR942(targets, test, true);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new TimeSpan_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942) {
				for (int j = 0; j < targets[i].backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942
						.size(); ++j) {
					TimeSpan_c source = (TimeSpan_c) targets[i].backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			TimeSpan_c[] ret_set = new TimeSpan_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new TimeSpan_c[0];
		}
	}

	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c target) {
		return getManySQ_TSsOnR942(target, null);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c target,
			boolean loadComponent) {
		return getManySQ_TSsOnR942(target, null, loadComponent);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c target,
			ClassQueryInterface_c test) {
		return getManySQ_TSsOnR942(target, test, true);
	}

	public static TimeSpan_c[] getManySQ_TSsOnR942(TimingMark_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new TimeSpan_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942) {
			for (int i = 0; i < target.backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942
					.size(); ++i) {
				TimeSpan_c source = (TimeSpan_c) target.backPointer_DefinesEndOfTimeSpanDefinesEndOf_R942
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			TimeSpan_c[] ret_set = new TimeSpan_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new TimeSpan_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (SpanBeginsAtTimingMark == null) {
			// R941
			TimingMark_c relInst40444 = (TimingMark_c) baseRoot
					.getInstanceList(TimingMark_c.class).get(
							new Object[]{m_prev_mark_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40444 == null) {
				relInst40444 = (TimingMark_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(TimingMark_c.class)
						.get(new Object[]{m_prev_mark_id});
			}
			if (relInst40444 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40444 = (TimingMark_c) roots[i].getInstanceList(
							TimingMark_c.class).get(
							new Object[]{m_prev_mark_id});
					if (relInst40444 != null)
						break;
				}
			}
			//synchronized
			if (relInst40444 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40444) && !isProxy())) {
					relInst40444.relateAcrossR941To(this, notifyChanges);
				}
			}
		}

		if (SpanEndsAtTimingMark == null) {
			// R942
			TimingMark_c relInst40445 = (TimingMark_c) baseRoot
					.getInstanceList(TimingMark_c.class).get(
							new Object[]{m_mark_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40445 == null) {
				relInst40445 = (TimingMark_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(TimingMark_c.class)
						.get(new Object[]{m_mark_id});
			}
			if (relInst40445 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40445 = (TimingMark_c) roots[i].getInstanceList(
							TimingMark_c.class).get(new Object[]{m_mark_id});
					if (relInst40445 != null)
						break;
				}
			}
			//synchronized
			if (relInst40445 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40445) && !isProxy())) {
					relInst40445.relateAcrossR942To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R941
		// SQ_TM
		inst = SpanBeginsAtTimingMark;
		unrelateAcrossR941From(SpanBeginsAtTimingMark, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R942
		// SQ_TM
		inst = SpanEndsAtTimingMark;
		unrelateAcrossR942From(SpanEndsAtTimingMark, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final TimeSpan_c inst = (TimeSpan_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static TimeSpan_c TimeSpanInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		TimeSpan_c result = findTimeSpanInstance(modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					TimeSpan_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findTimeSpanInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static TimeSpan_c findTimeSpanInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				TimeSpan_c x = (TimeSpan_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static TimeSpan_c TimeSpanInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return TimeSpanInstance(modelRoot, test, true);
	}

	public static TimeSpan_c TimeSpanInstance(ModelRoot modelRoot) {
		return TimeSpanInstance(modelRoot, null, true);
	}

	public static TimeSpan_c[] TimeSpanInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					TimeSpan_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(TimeSpan_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				TimeSpan_c x = (TimeSpan_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				TimeSpan_c[] ret_set = new TimeSpan_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new TimeSpan_c[0];
			}
		}
	}
	public static TimeSpan_c[] TimeSpanInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return TimeSpanInstances(modelRoot, test, true);
	}
	public static TimeSpan_c[] TimeSpanInstances(ModelRoot modelRoot) {
		return TimeSpanInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Time Span.dispose call: ";
		TimingMark_c testR941Inst = TimingMark_c.getOneSQ_TMOnR941(this, false);

		if (testR941Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "941 ";
		}
		TimingMark_c testR942Inst = TimingMark_c.getOneSQ_TMOnR942(this, false);

		if (testR942Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "942 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Time Span", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("prev_mark_id")) {
			return true;
		}
		if (attributeName.equals("mark_id")) {
			return true;
		}
		if (attributeName.equals("span_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSpan_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getName() {
		return m_name;
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, true);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPrev_mark_idLongBased() {
		if (SpanBeginsAtTimingMark != null) {
			return SpanBeginsAtTimingMark.getMark_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPrev_mark_id() {
		if (SpanBeginsAtTimingMark != null) {
			return SpanBeginsAtTimingMark.getMark_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPrev_mark_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_prev_mark_id))
			return m_prev_mark_id;
		else
			return getPrev_mark_id();
	}

	public void setPrev_mark_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_prev_mark_id)) {
				return;
			}
		} else if (m_prev_mark_id != null) {
			if (m_prev_mark_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Prev_mark_id", m_prev_mark_id, newValue, true);
		m_prev_mark_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getMark_idLongBased() {
		if (SpanEndsAtTimingMark != null) {
			return SpanEndsAtTimingMark.getMark_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMark_id() {
		if (SpanEndsAtTimingMark != null) {
			return SpanEndsAtTimingMark.getMark_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getMark_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_mark_id))
			return m_mark_id;
		else
			return getMark_id();
	}

	public void setMark_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_mark_id)) {
				return;
			}
		} else if (m_mark_id != null) {
			if (m_mark_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Mark_id", m_mark_id, newValue, true);
		m_mark_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSpan_idLongBased() {
		if (m_span_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_span_id)) {
			return 0xfffffff & m_span_id.getLeastSignificantBits();
		}
		return m_span_idLongBased;
	}
	public java.util.UUID getSpan_id() {
		return m_span_id;
	}

	public void setSpan_id(java.util.UUID newValue) {
		m_span_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Time Span", //$NON-NLS-1$
				" Operation entered: Time Span::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		TimeSpan_c[] objs = TimeSpan_c
				.TimeSpanInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Time Span", //$NON-NLS-1$
				" Operation entered: Time Span::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class TimeSpan_c_test40447_c implements ClassQueryInterface_c {
			TimeSpan_c_test40447_c(java.util.UUID p40448) {
				m_p40448 = p40448;
			}
			private java.util.UUID m_p40448;
			public boolean evaluate(Object candidate) {
				TimeSpan_c selected = (TimeSpan_c) candidate;
				boolean retval = false;
				retval = (selected.getSpan_id().equals(m_p40448));
				return retval;
			}
		}

		TimeSpan_c[] objs40446 = TimeSpan_c.TimeSpanInstances(modelRoot,
				new TimeSpan_c_test40447_c(getSpan_id()));

		if (((objs40446.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Time Span", //$NON-NLS-1$
								"Consistency: Object: Time Span: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40446.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Time Span: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40446.length), e);
			}
			retval = false;

		}

		if (((objs40446.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Time Span", //$NON-NLS-1$
								"Consistency: Object: Time Span: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40446.length)
										+ " Span_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Time Span: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40446.length)
										+ " Span_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Time Span is a referring class in association: rel.Numb = 941
		// The participating class is: Timing Mark
		class TimingMark_c_test40452_c implements ClassQueryInterface_c {
			TimingMark_c_test40452_c(java.util.UUID p40453) {
				m_p40453 = p40453;
			}
			private java.util.UUID m_p40453;
			public boolean evaluate(Object candidate) {
				TimingMark_c selected = (TimingMark_c) candidate;
				boolean retval = false;
				retval = (selected.getMark_id().equals(m_p40453));
				return retval;
			}
		}

		TimingMark_c[] objs40451 = TimingMark_c.TimingMarkInstances(modelRoot,
				new TimingMark_c_test40452_c(getPrev_mark_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40451.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Time Span", //$NON-NLS-1$
								"Consistency: Object: Time Span: Association: 941: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40451.length)
										+ " Prev_Mark_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Time Span: Association: 941: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40451.length)
										+ " Prev_Mark_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Time Span is a referring class in association: rel.Numb = 942
		// The participating class is: Timing Mark
		class TimingMark_c_test40455_c implements ClassQueryInterface_c {
			TimingMark_c_test40455_c(java.util.UUID p40456) {
				m_p40456 = p40456;
			}
			private java.util.UUID m_p40456;
			public boolean evaluate(Object candidate) {
				TimingMark_c selected = (TimingMark_c) candidate;
				boolean retval = false;
				retval = (selected.getMark_id().equals(m_p40456));
				return retval;
			}
		}

		TimingMark_c[] objs40454 = TimingMark_c.TimingMarkInstances(modelRoot,
				new TimingMark_c_test40455_c(getMark_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40454.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Time Span", //$NON-NLS-1$
								"Consistency: Object: Time Span: Association: 942: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40454.length)
										+ " Mark_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Time Span: Association: 942: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40454.length)
										+ " Mark_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Time Span",
				" Operation entered: TimeSpan::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		if (((p_At == End_c.End) || (p_At == End_c.Start))) {

			return Style_c.OpenArrow;

		}

		else {

			return Style_c.Solid;

		}

	} // End get_style
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final boolean p_Obj_typeisimported, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Time Span",
				" Operation entered: TimeSpan::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.Middle)) {

			if ((!getName().equals(""))) {

				return "{" + getName() + "}";

			}

			return "";

		}

		else {

			return "";

		}

	} // End get_connector_text
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Time Span",
				" Operation entered: TimeSpan::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		TimingMark_c v_endMark = TimingMark_c.getOneSQ_TMOnR942(this);

		TimingMark_c v_startMark = TimingMark_c.getOneSQ_TMOnR941(this);

		if (((v_endMark != null))) {

			this.unrelateAcrossR942From(v_endMark);

		}

		if (((v_startMark != null))) {

			this.unrelateAcrossR941From(v_startMark);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Time Span",
				" Operation entered: TimeSpan::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getSpan_id();

	} // End get_ooa_id

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Time Span
