      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SearchResultSet_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SEARCH_RESULT_SET extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SearchResultSet_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SearchResultSet_c(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id,
       String       p_m_name,
       int  p_m_type)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       m_name = p_m_name;
       m_type = p_m_type;
        
    Object [] key = {m_name,m_package_id};
    addInstanceToMap(key);
  }
  static public SearchResultSet_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id,
       String       p_m_name,
       int  p_m_type, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);
      SearchResultSet_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_name,p_m_package_id};
          new_inst = (SearchResultSet_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       new_inst.m_name = p_m_name;
       new_inst.m_type = p_m_type;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SearchResultSet_c(modelRoot,
p_m_package_id,
p_m_name,
p_m_type
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SearchResultSet_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id,
       String       p_m_name,
       int  p_m_type){
    InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);
    SearchResultSet_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_name
        ,
        new UUID(0, new Long(p_m_type))
        ,
        p_m_package_id
            };
        source = (SearchResultSet_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       source.m_name = p_m_name;
       source.m_type = p_m_type;
        
           return source ;
        }
      }
      // there is no instance matching the id
    SearchResultSet_c new_inst = new SearchResultSet_c(modelRoot,
p_m_package_id,
p_m_name,
p_m_type
);
    return new_inst;
  }
  public SearchResultSet_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_package_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_type = Elementtypeconstants_c.OOA_UNINITIALIZED_ENUM;
    Object [] key = {m_name,m_package_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_name,m_package_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p6
		// round p7
		// round p1
		// round p2
		// round p3
			// round p6
		// round p7
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_package_id !=  p_newKey ){
	
		m_package_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SearchResultSet_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SearchResultSet_c)) {
           return false;
       }
       
       SearchResultSet_c me = (SearchResultSet_c)elem;
      if (!getName().equals(((SearchResultSet_c)elem).getName())) return false;    
      if (getType() != ((SearchResultSet_c)elem).getType()) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getPackage_id()) || IdAssigner.NULL_UUID.equals(((SearchResultSet_c)elem).getPackage_id())) && this != elem)) {
      	return false;
      }
      if (!getPackage_id().equals(((SearchResultSet_c)elem).getPackage_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SearchResultSet_c)) {
           return false;
       }
       
       SearchResultSet_c me = (SearchResultSet_c)elem;
      if (!getName().equals(((SearchResultSet_c)elem).getName())) return false;   
      if (getType() != ((SearchResultSet_c)elem).getType()) return false;
      if (!getPackage_idCachedValue().equals(((SearchResultSet_c)elem).getPackage_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_package_id ;
  private String       m_name ;
  private int  m_type ;
      
// declare association references from this class
  
  
    
// referring navigation

Package_c HeldByPackage ;
public void relateAcrossR8005To(Package_c target)
{
	relateAcrossR8005To(target, true);
}
public void relateAcrossR8005To(Package_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HeldByPackage) return;  // already related

    if ( HeldByPackage != target ) {
    
    Object oldKey = getInstanceKey();

    if (HeldByPackage != null) {
    
        HeldByPackage.clearBackPointerR8005To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SearchResultSet_c.relateAcrossR8005To(Package_c target)", 
			"Relate performed across R8005 from Search Result Set to Package without unrelate of prior instance.");  
		}
    }
                
    	HeldByPackage = target ;
        if(IdAssigner.NULL_UUID.equals(target.getPackage_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_package_id = target.getPackage_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8005To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8005", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8005From(Package_c target)
{
	unrelateAcrossR8005From(target, true);
}
public void unrelateAcrossR8005From(Package_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HeldByPackage == null) return;  // already unrelated
	
	if (target != HeldByPackage) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8005", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8005To(this);
    }
    

      if(HeldByPackage != null) {
      
        m_package_id = HeldByPackage.getPackage_id();
        if(IdAssigner.NULL_UUID.equals(m_package_id))
        {
          m_package_id = HeldByPackage.getPackage_idCachedValue();
        }       
        HeldByPackage = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8005", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SearchResultSet_c getOnePE_SRSOnR8005(Package_c [] targets)
{
    return getOnePE_SRSOnR8005(targets, null);
}

public static SearchResultSet_c getOnePE_SRSOnR8005(Package_c [] targets, ClassQueryInterface_c test)
{
    SearchResultSet_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOnePE_SRSOnR8005(targets[i], test);
        }
    }

    return ret_val;
}

public static SearchResultSet_c getOnePE_SRSOnR8005(Package_c target)
{
  return getOnePE_SRSOnR8005(target, null);
}

public static SearchResultSet_c getOnePE_SRSOnR8005(Package_c target, boolean loadComponent)
{
    return getOnePE_SRSOnR8005(target.getModelRoot(), target, null, loadComponent);
}

public static SearchResultSet_c getOnePE_SRSOnR8005(Package_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOnePE_SRSOnR8005(target.getModelRoot(), target, test);
  }
  return null;
}

public static SearchResultSet_c getOnePE_SRSOnR8005(ModelRoot modelRoot, Package_c target, ClassQueryInterface_c test)
{
	return getOnePE_SRSOnR8005(modelRoot, target, test, true);
}

public static SearchResultSet_c getOnePE_SRSOnR8005(ModelRoot modelRoot, Package_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOnePE_SRSOnR8005(modelRoot,target,test);
}
private static SearchResultSet_c find_getOnePE_SRSOnR8005(ModelRoot modelRoot, Package_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HoldsSearchResultSetHolds_R8005) {
	    for ( int i = 0; i < target.backPointer_HoldsSearchResultSetHolds_R8005.size(); ++i ) {
	      SearchResultSet_c source = (SearchResultSet_c)target.backPointer_HoldsSearchResultSetHolds_R8005.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c [] targets)
{
  return getManyPE_SRSsOnR8005(targets, null);
}
public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c [] targets, boolean loadComponent)
{
  return getManyPE_SRSsOnR8005(targets, null, loadComponent);
}
public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c [] targets, ClassQueryInterface_c test)
{
	return getManyPE_SRSsOnR8005(targets, test, true);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SearchResultSet_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HoldsSearchResultSetHolds_R8005) {
	    for (int j = 0; j < targets[i].backPointer_HoldsSearchResultSetHolds_R8005.size(); ++j) {
	      SearchResultSet_c source = (SearchResultSet_c)targets[i].backPointer_HoldsSearchResultSetHolds_R8005.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SearchResultSet_c[] ret_set = new SearchResultSet_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SearchResultSet_c[0];
  }
  }

public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c target)
{
  return getManyPE_SRSsOnR8005(target, null);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c target, boolean loadComponent)
{
  return getManyPE_SRSsOnR8005(target, null, loadComponent);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c target, ClassQueryInterface_c test)
{
	return getManyPE_SRSsOnR8005(target, test, true);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8005(Package_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SearchResultSet_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HoldsSearchResultSetHolds_R8005) {
    for (int i = 0; i < target.backPointer_HoldsSearchResultSetHolds_R8005.size(); ++i) {
      SearchResultSet_c source = (SearchResultSet_c)target.backPointer_HoldsSearchResultSetHolds_R8005.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SearchResultSet_c[] ret_set = new SearchResultSet_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SearchResultSet_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ElementVisibility_c> backPointer_ElementVisibility_R8006 = new ArrayList<ElementVisibility_c>();

public void setElementVisibilityOrderInChildListR8006(ElementVisibility_c target, int index) {
	unrelateAcrossR8006From(target);
	ElementVisibility_c[] elements = ElementVisibility_c.getManyPE_VISsOnR8006(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR8006From((ElementVisibility_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR8006To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR8006To((ElementVisibility_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR8006To(ElementVisibility_c target)
{
  if (target != null) {
    target.relateAcrossR8006To(this, true) ;
  }
}

public void relateAcrossR8006To(ElementVisibility_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR8006To(this, notifyChanges) ;
  }
}

public void setBackPointerR8006To(ElementVisibility_c target)
{
  	synchronized (backPointer_ElementVisibility_R8006) {
		backPointer_ElementVisibility_R8006.add(target);
	}
}

public void unrelateAcrossR8006From(ElementVisibility_c target)
{
  if (target != null) {
    target.unrelateAcrossR8006From(this, true) ;
  }
}

public void unrelateAcrossR8006From(ElementVisibility_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR8006From(this, notifyChanges) ;
  }
}

public void clearBackPointerR8006To(ElementVisibility_c target)
{
  synchronized (backPointer_ElementVisibility_R8006) {
	    backPointer_ElementVisibility_R8006.remove(target);
	}
}

public static SearchResultSet_c getOnePE_SRSOnR8006(ElementVisibility_c [] targets)
{
    return getOnePE_SRSOnR8006(targets, null);
}

public static SearchResultSet_c getOnePE_SRSOnR8006(ElementVisibility_c [] targets, ClassQueryInterface_c test)
{
    return getOnePE_SRSOnR8006(targets, test, true);
}

public static SearchResultSet_c getOnePE_SRSOnR8006(ElementVisibility_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SearchResultSet_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SearchResultSet_c candidate_val = getOnePE_SRSOnR8006(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOnePE_SRSOnR8006(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SearchResultSet_c getOnePE_SRSOnR8006(ElementVisibility_c target)
{
	return getOnePE_SRSOnR8006(target, true);
}
public static SearchResultSet_c getOnePE_SRSOnR8006(ElementVisibility_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SearchResultSet ;
  } else {
    return null;
  }
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyPE_SRSsOnR8006(targets, test, true);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SearchResultSet_c[0];
  
  
  LinkedHashSet<SearchResultSet_c> elementsSet = new LinkedHashSet<SearchResultSet_c>();
  for (int i = 0; i < targets.length; i++) {
    SearchResultSet_c associate = targets[i].SearchResultSet;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SearchResultSet_c[] result = new SearchResultSet_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c [] targets)
{
  return getManyPE_SRSsOnR8006(targets, null);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElementVisibility_c [] targetArray = new ElementVisibility_c[1];
    targetArray[0] = target;
    return getManyPE_SRSsOnR8006(targetArray, test, loadComponent);
  } else {
    SearchResultSet_c [] result = new SearchResultSet_c [0] ;
    return result ;
  }
  
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c target,
    ClassQueryInterface_c test)
{
    return getManyPE_SRSsOnR8006(target, null, true);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c target)
{
    return getManyPE_SRSsOnR8006(target, null, true);
}

public static SearchResultSet_c [] getManyPE_SRSsOnR8006(ElementVisibility_c target, boolean loadComponent)
{
    return getManyPE_SRSsOnR8006(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (HeldByPackage == null) {          
      // R8005
      Package_c relInst39860 = (Package_c) baseRoot.getInstanceList(Package_c.class).get(new Object[] {m_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst39860 == null) {
      			relInst39860 = (Package_c) Ooaofooa.getDefaultInstance().getInstanceList(Package_c.class).get(new Object[] {m_package_id});
      		}
			if (relInst39860 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst39860 = (Package_c) roots[i].getInstanceList(Package_c.class).get(new Object[] {m_package_id});
					if (relInst39860 != null)
						break;
				}
			}
			//synchronized
      if ( relInst39860 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst39860) && !isProxy())) {
	      relInst39860.relateAcrossR8005To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8005
      // EP_PKG
		  inst=HeldByPackage;
			unrelateAcrossR8005From(HeldByPackage, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SearchResultSet_c inst = (SearchResultSet_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SearchResultSet_c SearchResultSetInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SearchResultSet_c result=findSearchResultSetInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static SearchResultSet_c findSearchResultSetInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SearchResultSet_c x = (SearchResultSet_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static SearchResultSet_c SearchResultSetInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SearchResultSetInstance(modelRoot,test,true);
  }
  
  public static SearchResultSet_c SearchResultSetInstance(ModelRoot modelRoot)
  {
	 return SearchResultSetInstance(modelRoot,null,true);
  }

  public static SearchResultSet_c [] SearchResultSetInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(SearchResultSet_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SearchResultSet_c x = (SearchResultSet_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SearchResultSet_c[] ret_set = new SearchResultSet_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SearchResultSet_c[0];
			}		
		} 
  }
  public static SearchResultSet_c [] SearchResultSetInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SearchResultSetInstances(modelRoot,test,true);
  }
  public static SearchResultSet_c [] SearchResultSetInstances(ModelRoot modelRoot)
  {
	return SearchResultSetInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Search Result Set.dispose call: ";
	Package_c testR8005Inst = Package_c.getOneEP_PKGOnR8005(this, false);

	if ( testR8005Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "8005 ";
	}
	ElementVisibility_c testR8006Inst = ElementVisibility_c.getOnePE_VISOnR8006(this, false);

	if ( testR8006Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "8006 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Search Result Set", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("package_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getPackage_idLongBased()
  {
    if ( HeldByPackage != null )
    {
      return HeldByPackage.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPackage_id()
  {
    if ( HeldByPackage != null )
    {
      return HeldByPackage.getPackage_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPackage_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_package_id) )
      return m_package_id;
    else
      return getPackage_id();
  }
  
  public void setPackage_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_package_id)){
	        return;
	    }
	}else if(m_package_id != null){
	    if(m_package_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Package_id", m_package_id, newValue,false); 
   m_package_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,false); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getType()
  {
    return m_type ;
  }


  public void setType(int newValue)
  {
    if(m_type == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Type", new Integer(m_type), new Integer(newValue),false);

   m_type = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Search Result Set", //$NON-NLS-1$
	  " Operation entered: Search Result Set::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SearchResultSet_c [] objs = SearchResultSet_c.SearchResultSetInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Search Result Set", //$NON-NLS-1$
	  " Operation entered: Search Result Set::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SearchResultSet_c_test39862_c implements ClassQueryInterface_c
    {
	  SearchResultSet_c_test39862_c( String          p39863, int     p39864, java.util.UUID            p39865 ) {
	            m_p39863 = p39863; 
m_p39864 = p39864; 
m_p39865 = p39865;
	  }
	  private String           m_p39863; private int      m_p39864; private java.util.UUID             m_p39865; 
	  public boolean evaluate (Object candidate)
	  {
	      SearchResultSet_c selected = (SearchResultSet_c) candidate;
	      boolean retval = false;
	      retval = (selected.getName().equals(m_p39863)) & (selected.getType() == (m_p39864)) & (selected.getPackage_id().equals(m_p39865));
	      return retval;
	  }
    }

    SearchResultSet_c [] objs39861 = 
    SearchResultSet_c.SearchResultSetInstances(modelRoot, new SearchResultSet_c_test39862_c(getName(), getType(), getPackage_id())) ;

    if ( (  (objs39861.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result Set", //$NON-NLS-1$
           "Consistency: Object: Search Result Set: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs39861.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result Set: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39861.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs39861.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result Set", //$NON-NLS-1$
           "Consistency: Object: Search Result Set: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39861.length )  + " Name: " + getName()  + " Type: " + Integer.toString(getType())  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result Set: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39861.length )  + " Name: " + getName()  + " Type: " + Integer.toString(getType())  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Search Result Set is a referring class in association: rel.Numb = 8005
          // The participating class is: Package
    class Package_c_test39869_c implements ClassQueryInterface_c
    {
	  Package_c_test39869_c( java.util.UUID            p39870 ) {
	  m_p39870 = p39870;
	  }
	  private java.util.UUID             m_p39870; 
	  public boolean evaluate (Object candidate)
	  {
	      Package_c selected = (Package_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p39870));
	      return retval;
	  }
    }

    Package_c [] objs39868 = 
    Package_c.PackageInstances(modelRoot, new Package_c_test39869_c(getPackage_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs39868.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result Set", //$NON-NLS-1$
           "Consistency: Object: Search Result Set: Association: 8005: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39868.length )  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result Set: Association: 8005: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39868.length )  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Search Result Set is a participating class in association: rel.Numb = 8006
             // Object: Element Visibility
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Search Result Set", " Operation entered: SearchResultSet::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Package_c v_package = Package_c.getOneEP_PKGOnR8005(this);


ElementVisibility_c [] v_elemVis = ElementVisibility_c.getManyPE_VISsOnR8006(this);


ElementVisibility_c  v_elemV = null;
for ( int i37241 = 0; i37241 < v_elemVis.length; i37241++)
{
  v_elemV = v_elemVis[i37241] ;

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8002(v_elemV);


if (v_elemV != null) {
v_elemV.unrelateAcrossR8002From( v_package ) ; v_elemV.unrelateAcrossR8002From( v_pe ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


this.unrelateAcrossR8006From(v_elemV);


if (v_elemV != null) {
// get the location of this element in the instance list
// before deleting
if ( v_elemV.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_elemV));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

this.unrelateAcrossR8005From(v_package);


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Search Result Set
