package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassParticipantAttribute_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLASS_PARTICIPANT_ATTRIBUTE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClassParticipantAttribute_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClassParticipantAttribute_c(ModelRoot modelRoot,
			java.util.UUID p_m_ia_id, String p_m_name, String p_m_type,
			java.util.UUID p_m_part_id, String p_m_descrip) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ia_id = IdAssigner.preprocessUUID(p_m_ia_id);
		//extract 28 bit value only            
		m_ia_idLongBased = 0xfffffff & p_m_ia_id.getLeastSignificantBits();
		m_name = p_m_name;
		m_type = p_m_type;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_part_id = IdAssigner.preprocessUUID(p_m_part_id);

		setUniqueId(m_ia_id);
		Object[] key = {m_ia_id};
		addInstanceToMap(key);
	}
	static public ClassParticipantAttribute_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_ia_id, String p_m_name, String p_m_type,
			java.util.UUID p_m_part_id, String p_m_descrip,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClassParticipantAttribute_c.class);
		ClassParticipantAttribute_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_ia_id};
			new_inst = (ClassParticipantAttribute_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ia_id = IdAssigner.preprocessUUID(p_m_ia_id);
				//extract 28 bit value only            
				new_inst.m_ia_idLongBased = 0xfffffff & p_m_ia_id
						.getLeastSignificantBits();
				new_inst.m_name = p_m_name;
				new_inst.m_type = p_m_type;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_part_id = IdAssigner.preprocessUUID(p_m_part_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClassParticipantAttribute_c(modelRoot, p_m_ia_id,
					p_m_name, p_m_type, p_m_part_id, p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ClassParticipantAttribute_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_ia_id, String p_m_name,
			String p_m_type, java.util.UUID p_m_part_id, String p_m_descrip) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassParticipantAttribute_c.class);
		ClassParticipantAttribute_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_ia_id};
			source = (ClassParticipantAttribute_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ia_id = IdAssigner.preprocessUUID(p_m_ia_id);
				//extract 28 bit value only            
				source.m_ia_idLongBased = 0xfffffff & p_m_ia_id
						.getLeastSignificantBits();
				source.m_name = p_m_name;
				source.m_type = p_m_type;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_part_id = IdAssigner.preprocessUUID(p_m_part_id);

				return source;
			}
		}
		// there is no instance matching the id
		ClassParticipantAttribute_c new_inst = new ClassParticipantAttribute_c(
				modelRoot, p_m_ia_id, p_m_name, p_m_type, p_m_part_id,
				p_m_descrip);
		return new_inst;
	}
	public ClassParticipantAttribute_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_ia_id = idAssigner.createUUID();
		m_name = "";
		m_type = "";
		m_descrip = "";
		m_part_id = IdAssigner.NULL_UUID;
		setUniqueId(m_ia_id);
		Object[] key = {m_ia_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_ia_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_ia_id != p_newKey) {

			m_ia_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClassParticipantAttribute_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClassParticipantAttribute_c)) {
			return false;
		}

		ClassParticipantAttribute_c me = (ClassParticipantAttribute_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getIa_id()) || IdAssigner.NULL_UUID
						.equals(((ClassParticipantAttribute_c) elem).getIa_id())) && this != elem)) {
			return false;
		}
		if (!getIa_id().equals(((ClassParticipantAttribute_c) elem).getIa_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClassParticipantAttribute_c)) {
			return false;
		}

		ClassParticipantAttribute_c me = (ClassParticipantAttribute_c) elem;
		if (!getIa_id().equals(((ClassParticipantAttribute_c) elem).getIa_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_ia_id;
	private long m_ia_idLongBased;
	private String m_name;
	private String m_type;
	private String m_descrip;
	private java.util.UUID m_part_id;

	// declare association references from this class

	// referring navigation

	ClassParticipant_c BelongsToClassParticipant;
	public void relateAcrossR935To(ClassParticipant_c target) {
		relateAcrossR935To(target, true);
	}
	public void relateAcrossR935To(ClassParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == BelongsToClassParticipant)
			return; // already related

		if (BelongsToClassParticipant != target) {

			Object oldKey = getInstanceKey();

			if (BelongsToClassParticipant != null) {

				BelongsToClassParticipant.clearBackPointerR935To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassParticipantAttribute_c.relateAcrossR935To(ClassParticipant_c target)",
									"Relate performed across R935 from Class Participant Attribute to Class Participant without unrelate of prior instance.");
				}
			}

			BelongsToClassParticipant = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR935To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "935", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR935From(ClassParticipant_c target) {
		unrelateAcrossR935From(target, true);
	}
	public void unrelateAcrossR935From(ClassParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (BelongsToClassParticipant == null)
			return; // already unrelated

		if (target != BelongsToClassParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R935",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR935To(this);
		}

		if (BelongsToClassParticipant != null) {

			m_part_id = BelongsToClassParticipant.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_part_id)) {
				m_part_id = BelongsToClassParticipant.getPart_idCachedValue();
			}
			BelongsToClassParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "935", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ClassParticipant_c[] targets) {
		return getOneSQ_CPAOnR935(targets, null);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ClassParticipant_c[] targets, ClassQueryInterface_c test) {
		ClassParticipantAttribute_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_CPAOnR935(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ClassParticipant_c target) {
		return getOneSQ_CPAOnR935(target, null);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ClassParticipant_c target, boolean loadComponent) {
		return getOneSQ_CPAOnR935(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ClassParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_CPAOnR935(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ModelRoot modelRoot, ClassParticipant_c target,
			ClassQueryInterface_c test) {
		return getOneSQ_CPAOnR935(modelRoot, target, test, true);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR935(
			ModelRoot modelRoot, ClassParticipant_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_CPAOnR935(modelRoot, target, test);
	}
	private static ClassParticipantAttribute_c find_getOneSQ_CPAOnR935(
			ModelRoot modelRoot, ClassParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveClassParticipantAttributeMayHave_R935) {
				for (int i = 0; i < target.backPointer_MayHaveClassParticipantAttributeMayHave_R935
						.size(); ++i) {
					ClassParticipantAttribute_c source = (ClassParticipantAttribute_c) target.backPointer_MayHaveClassParticipantAttributeMayHave_R935
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c[] targets) {
		return getManySQ_CPAsOnR935(targets, null);
	}
	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c[] targets, boolean loadComponent) {
		return getManySQ_CPAsOnR935(targets, null, loadComponent);
	}
	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_CPAsOnR935(targets, test, true);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassParticipantAttribute_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassParticipantAttribute_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveClassParticipantAttributeMayHave_R935) {
				for (int j = 0; j < targets[i].backPointer_MayHaveClassParticipantAttributeMayHave_R935
						.size(); ++j) {
					ClassParticipantAttribute_c source = (ClassParticipantAttribute_c) targets[i].backPointer_MayHaveClassParticipantAttributeMayHave_R935
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ClassParticipantAttribute_c[] ret_set = new ClassParticipantAttribute_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassParticipantAttribute_c[0];
		}
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c target) {
		return getManySQ_CPAsOnR935(target, null);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c target, boolean loadComponent) {
		return getManySQ_CPAsOnR935(target, null, loadComponent);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c target, ClassQueryInterface_c test) {
		return getManySQ_CPAsOnR935(target, test, true);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR935(
			ClassParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ClassParticipantAttribute_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveClassParticipantAttributeMayHave_R935) {
			for (int i = 0; i < target.backPointer_MayHaveClassParticipantAttributeMayHave_R935
					.size(); ++i) {
				ClassParticipantAttribute_c source = (ClassParticipantAttribute_c) target.backPointer_MayHaveClassParticipantAttributeMayHave_R935
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ClassParticipantAttribute_c[] ret_set = new ClassParticipantAttribute_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassParticipantAttribute_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	InformalAttribute_c backPointer_IsSubtypeInformalAttributeIsSubtype_R947;

	public void setInformalAttributeOrderInChildListR947(
			InformalAttribute_c target, int index) {
		unrelateAcrossR947From(target);
		InformalAttribute_c[] elements = InformalAttribute_c
				.getManySQ_IAsOnR947(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR947From((InformalAttribute_c) elements[i]);
			}
			count++;
		}
		relateAcrossR947To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR947To((InformalAttribute_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR947To(InformalAttribute_c target) {
		if (target != null) {
			target.relateAcrossR947To(this, true);
		}
	}

	public void relateAcrossR947To(InformalAttribute_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR947To(this, notifyChanges);
		}
	}

	public void setBackPointerR947To(InformalAttribute_c target) {
		backPointer_IsSubtypeInformalAttributeIsSubtype_R947 = target;
	}

	public void unrelateAcrossR947From(InformalAttribute_c target) {
		if (target != null) {
			target.unrelateAcrossR947From(this, true);
		}
	}

	public void unrelateAcrossR947From(InformalAttribute_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR947From(this, notifyChanges);
		}
	}

	public void clearBackPointerR947To(InformalAttribute_c target) {
		if (target == backPointer_IsSubtypeInformalAttributeIsSubtype_R947) {
			backPointer_IsSubtypeInformalAttributeIsSubtype_R947 = null;
		}
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			InformalAttribute_c[] targets) {
		return getOneSQ_CPAOnR947(targets, null);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			InformalAttribute_c[] targets, ClassQueryInterface_c test) {
		return getOneSQ_CPAOnR947(targets, test, true);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			InformalAttribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassParticipantAttribute_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ClassParticipantAttribute_c candidate_val = getOneSQ_CPAOnR947(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQ_CPAOnR947(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			InformalAttribute_c target) {
		return getOneSQ_CPAOnR947(target, true);
	}
	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			InformalAttribute_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeClassParticipantAttribute;
		} else {
			return null;
		}
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			InformalAttribute_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_CPAsOnR947(targets, test, true);
	}

	public static ClassParticipantAttribute_c [] getManySQ_CPAsOnR947(InformalAttribute_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassParticipantAttribute_c[0];
  
  
  LinkedHashSet<ClassParticipantAttribute_c> elementsSet = new LinkedHashSet<ClassParticipantAttribute_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeClassParticipantAttribute == null)
	  targets[i].loadProxy();
    ClassParticipantAttribute_c associate = targets[i].IsSupertypeClassParticipantAttribute;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassParticipantAttribute_c[] result = new ClassParticipantAttribute_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			InformalAttribute_c[] targets) {
		return getManySQ_CPAsOnR947(targets, null);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			InformalAttribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			InformalAttribute_c[] targetArray = new InformalAttribute_c[1];
			targetArray[0] = target;
			return getManySQ_CPAsOnR947(targetArray, test, loadComponent);
		} else {
			ClassParticipantAttribute_c[] result = new ClassParticipantAttribute_c[0];
			return result;
		}

	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			InformalAttribute_c target, ClassQueryInterface_c test) {
		return getManySQ_CPAsOnR947(target, null, true);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			InformalAttribute_c target) {
		return getManySQ_CPAsOnR947(target, null, true);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			InformalAttribute_c target, boolean loadComponent) {
		return getManySQ_CPAsOnR947(target, null, loadComponent);
	}

	// referred to navigation

	FormalAttribute_c backPointer_IsSubtypeFormalAttributeIsSubtype_R947;

	public void setFormalAttributeOrderInChildListR947(
			FormalAttribute_c target, int index) {
		unrelateAcrossR947From(target);
		FormalAttribute_c[] elements = FormalAttribute_c
				.getManySQ_FAsOnR947(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR947From((FormalAttribute_c) elements[i]);
			}
			count++;
		}
		relateAcrossR947To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR947To((FormalAttribute_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR947To(FormalAttribute_c target) {
		if (target != null) {
			target.relateAcrossR947To(this, true);
		}
	}

	public void relateAcrossR947To(FormalAttribute_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR947To(this, notifyChanges);
		}
	}

	public void setBackPointerR947To(FormalAttribute_c target) {
		backPointer_IsSubtypeFormalAttributeIsSubtype_R947 = target;
	}

	public void unrelateAcrossR947From(FormalAttribute_c target) {
		if (target != null) {
			target.unrelateAcrossR947From(this, true);
		}
	}

	public void unrelateAcrossR947From(FormalAttribute_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR947From(this, notifyChanges);
		}
	}

	public void clearBackPointerR947To(FormalAttribute_c target) {
		if (target == backPointer_IsSubtypeFormalAttributeIsSubtype_R947) {
			backPointer_IsSubtypeFormalAttributeIsSubtype_R947 = null;
		}
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			FormalAttribute_c[] targets) {
		return getOneSQ_CPAOnR947(targets, null);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			FormalAttribute_c[] targets, ClassQueryInterface_c test) {
		return getOneSQ_CPAOnR947(targets, test, true);
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			FormalAttribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassParticipantAttribute_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ClassParticipantAttribute_c candidate_val = getOneSQ_CPAOnR947(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQ_CPAOnR947(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			FormalAttribute_c target) {
		return getOneSQ_CPAOnR947(target, true);
	}
	public static ClassParticipantAttribute_c getOneSQ_CPAOnR947(
			FormalAttribute_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeClassParticipantAttribute;
		} else {
			return null;
		}
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			FormalAttribute_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_CPAsOnR947(targets, test, true);
	}

	public static ClassParticipantAttribute_c [] getManySQ_CPAsOnR947(FormalAttribute_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassParticipantAttribute_c[0];
  
  
  LinkedHashSet<ClassParticipantAttribute_c> elementsSet = new LinkedHashSet<ClassParticipantAttribute_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeClassParticipantAttribute == null)
	  targets[i].loadProxy();
    ClassParticipantAttribute_c associate = targets[i].IsSupertypeClassParticipantAttribute;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassParticipantAttribute_c[] result = new ClassParticipantAttribute_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			FormalAttribute_c[] targets) {
		return getManySQ_CPAsOnR947(targets, null);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			FormalAttribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			FormalAttribute_c[] targetArray = new FormalAttribute_c[1];
			targetArray[0] = target;
			return getManySQ_CPAsOnR947(targetArray, test, loadComponent);
		} else {
			ClassParticipantAttribute_c[] result = new ClassParticipantAttribute_c[0];
			return result;
		}

	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			FormalAttribute_c target, ClassQueryInterface_c test) {
		return getManySQ_CPAsOnR947(target, null, true);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			FormalAttribute_c target) {
		return getManySQ_CPAsOnR947(target, null, true);
	}

	public static ClassParticipantAttribute_c[] getManySQ_CPAsOnR947(
			FormalAttribute_c target, boolean loadComponent) {
		return getManySQ_CPAsOnR947(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (BelongsToClassParticipant == null) {
			// R935
			ClassParticipant_c relInst40630 = (ClassParticipant_c) baseRoot
					.getInstanceList(ClassParticipant_c.class).get(
							new Object[]{m_part_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40630 == null) {
				relInst40630 = (ClassParticipant_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ClassParticipant_c.class)
						.get(new Object[]{m_part_id});
			}
			if (relInst40630 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40630 = (ClassParticipant_c) roots[i]
							.getInstanceList(ClassParticipant_c.class).get(
									new Object[]{m_part_id});
					if (relInst40630 != null)
						break;
				}
			}
			//synchronized
			if (relInst40630 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40630) && !isProxy())) {
					relInst40630.relateAcrossR935To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R935
		// SQ_CP
		inst = BelongsToClassParticipant;
		unrelateAcrossR935From(BelongsToClassParticipant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassParticipantAttribute_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassParticipantAttribute_c inst = (ClassParticipantAttribute_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassParticipantAttribute_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClassParticipantAttribute_c ClassParticipantAttributeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassParticipantAttribute_c result = findClassParticipantAttributeInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ClassParticipantAttribute_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findClassParticipantAttributeInstance(
								modelRoot, test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ClassParticipantAttribute_c findClassParticipantAttributeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassParticipantAttribute_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassParticipantAttribute_c x = (ClassParticipantAttribute_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ClassParticipantAttribute_c ClassParticipantAttributeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassParticipantAttributeInstance(modelRoot, test, true);
	}

	public static ClassParticipantAttribute_c ClassParticipantAttributeInstance(
			ModelRoot modelRoot) {
		return ClassParticipantAttributeInstance(modelRoot, null, true);
	}

	public static ClassParticipantAttribute_c[] ClassParticipantAttributeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassParticipantAttribute_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ClassParticipantAttribute_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassParticipantAttribute_c x = (ClassParticipantAttribute_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClassParticipantAttribute_c[] ret_set = new ClassParticipantAttribute_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassParticipantAttribute_c[0];
			}
		}
	}
	public static ClassParticipantAttribute_c[] ClassParticipantAttributeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassParticipantAttributeInstances(modelRoot, test, true);
	}
	public static ClassParticipantAttribute_c[] ClassParticipantAttributeInstances(
			ModelRoot modelRoot) {
		return ClassParticipantAttributeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Class Participant Attribute.dispose call: ";
		InformalAttribute_c testR947Inst1 = InformalAttribute_c
				.getOneSQ_IAOnR947(this, false);

		if (testR947Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "947 ";
		}
		FormalAttribute_c testR947Inst2 = FormalAttribute_c.getOneSQ_FAOnR947(
				this, false);

		if (testR947Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "947 ";
		}
		ClassParticipant_c testR935Inst = ClassParticipant_c.getOneSQ_CPOnR935(
				this, false);

		if (testR935Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "935 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Class Participant Attribute", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("ia_id")) {
			return true;
		}
		if (attributeName.equals("part_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getIa_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIa_idLongBased() {
		if (m_ia_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_ia_id)) {
			return 0xfffffff & m_ia_id.getLeastSignificantBits();
		}
		return m_ia_idLongBased;
	}
	public java.util.UUID getIa_id() {
		return m_ia_id;
	}

	public void setIa_id(java.util.UUID newValue) {
		m_ia_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getName() {
		return m_name;
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, true);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getType() {
		return m_type;
	}

	public void setType(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_type)) {
				return;
			}
		} else if (m_type != null) {
			if (m_type.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Type",
				m_type, newValue, true);
		m_type = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPart_idLongBased() {
		if (BelongsToClassParticipant != null) {
			return BelongsToClassParticipant.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPart_id() {
		if (BelongsToClassParticipant != null) {
			return BelongsToClassParticipant.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPart_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_part_id))
			return m_part_id;
		else
			return getPart_id();
	}

	public void setPart_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_part_id)) {
				return;
			}
		} else if (m_part_id != null) {
			if (m_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Part_id", m_part_id, newValue, true);
		m_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class Participant Attribute", //$NON-NLS-1$
						" Operation entered: Class Participant Attribute::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClassParticipantAttribute_c[] objs = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class Participant Attribute", //$NON-NLS-1$
						" Operation entered: Class Participant Attribute::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClassParticipantAttribute_c_test40632_c
				implements
					ClassQueryInterface_c {
			ClassParticipantAttribute_c_test40632_c(java.util.UUID p40633) {
				m_p40633 = p40633;
			}
			private java.util.UUID m_p40633;
			public boolean evaluate(Object candidate) {
				ClassParticipantAttribute_c selected = (ClassParticipantAttribute_c) candidate;
				boolean retval = false;
				retval = (selected.getIa_id().equals(m_p40633));
				return retval;
			}
		}

		ClassParticipantAttribute_c[] objs40631 = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstances(modelRoot,
						new ClassParticipantAttribute_c_test40632_c(getIa_id()));

		if (((objs40631.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class Participant Attribute", //$NON-NLS-1$
								"Consistency: Object: Class Participant Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40631.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class Participant Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40631.length), e);
			}
			retval = false;

		}

		if (((objs40631.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class Participant Attribute", //$NON-NLS-1$
								"Consistency: Object: Class Participant Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40631.length)
										+ " Ia_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class Participant Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40631.length)
										+ " Ia_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Class Participant Attribute is a referring class in association: rel.Numb = 935
		// The participating class is: Class Participant
		class ClassParticipant_c_test40637_c implements ClassQueryInterface_c {
			ClassParticipant_c_test40637_c(java.util.UUID p40638) {
				m_p40638 = p40638;
			}
			private java.util.UUID m_p40638;
			public boolean evaluate(Object candidate) {
				ClassParticipant_c selected = (ClassParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p40638));
				return retval;
			}
		}

		ClassParticipant_c[] objs40636 = ClassParticipant_c
				.ClassParticipantInstances(modelRoot,
						new ClassParticipant_c_test40637_c(getPart_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40636.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class Participant Attribute", //$NON-NLS-1$
								"Consistency: Object: Class Participant Attribute: Association: 935: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40636.length)
										+ " Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class Participant Attribute: Association: 935: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40636.length)
										+ " Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 947
		int objs40639 = 0;
		// Subtype Object: Informal Attribute
		class InformalAttribute_c_test40640_c implements ClassQueryInterface_c {
			InformalAttribute_c_test40640_c(java.util.UUID p40641) {
				m_p40641 = p40641;
			}
			private java.util.UUID m_p40641;
			public boolean evaluate(Object candidate) {
				InformalAttribute_c selected = (InformalAttribute_c) candidate;
				boolean retval = false;
				retval = (selected.getIa_id().equals(m_p40641));
				return retval;
			}
		}

		InformalAttribute_c[] objs40642 = InformalAttribute_c
				.InformalAttributeInstances(modelRoot,
						new InformalAttribute_c_test40640_c(getIa_id()));

		objs40639 = objs40639 + objs40642.length;
		// Subtype Object: Formal Attribute
		class FormalAttribute_c_test40643_c implements ClassQueryInterface_c {
			FormalAttribute_c_test40643_c(java.util.UUID p40644) {
				m_p40644 = p40644;
			}
			private java.util.UUID m_p40644;
			public boolean evaluate(Object candidate) {
				FormalAttribute_c selected = (FormalAttribute_c) candidate;
				boolean retval = false;
				retval = (selected.getIa_id().equals(m_p40644));
				return retval;
			}
		}

		FormalAttribute_c[] objs40645 = FormalAttribute_c
				.FormalAttributeInstances(modelRoot,
						new FormalAttribute_c_test40643_c(getIa_id()));

		objs40639 = objs40639 + objs40645.length;
		if (objs40639 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Class Participant Attribute", //$NON-NLS-1$
								"Consistency: Object: Class Participant Attribute: Association: 947: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40639)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class Participant Attribute: Association: 947: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40639), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class Participant Attribute",
				" Operation entered: ClassParticipantAttribute::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		InformalAttribute_c v_ia = InformalAttribute_c.getOneSQ_IAOnR947(this);

		FormalAttribute_c v_fa = FormalAttribute_c.getOneSQ_FAOnR947(this);

		if (((v_ia != null))) {

			this.unrelateAcrossR947From(v_ia);

			if (v_ia != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_ia.delete()) {
					Ooaofooa.getDefaultInstance()
							.fireModelElementDeleted(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_DELETE,
											v_ia));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (((v_fa != null))) {

			this.unrelateAcrossR947From(v_fa);

			if (v_fa != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_fa.delete()) {
					Ooaofooa.getDefaultInstance()
							.fireModelElementDeleted(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_DELETE,
											v_fa));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		ClassParticipant_c v_cp = ClassParticipant_c.getOneSQ_CPOnR935(this);

		if (((v_cp != null))) {

			this.unrelateAcrossR935From(v_cp);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class Participant Attribute",
				" Operation entered: ClassParticipantAttribute::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		String v_name = "Informal Attribute";

		String v_success = Ooaofooa.Getnewelementname(modelRoot,
				Converttoinstance(), v_name, false);

		if ((!v_success.equals(""))) {

			setName(v_success);

		}

		else {

			Dispose();

		}

	} // End initialize
	public Object Converttoinstance() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class Participant Attribute",
						" Operation entered: ClassParticipantAttribute::Converttoinstance");
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Class Participant Attribute
