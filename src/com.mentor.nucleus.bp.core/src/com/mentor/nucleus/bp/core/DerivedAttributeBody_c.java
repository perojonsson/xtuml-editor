package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.DerivedAttributeBody_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_DERIVED_ATTRIBUTE_BODY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class DerivedAttributeBody_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public DerivedAttributeBody_c(ModelRoot modelRoot,
			java.util.UUID p_m_action_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, boolean p_m_attributewritten) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		m_attributewritten = p_m_attributewritten;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_action_id};
		addInstanceToMap(key);
	}
	static public DerivedAttributeBody_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_action_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, boolean p_m_attributewritten,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);
		DerivedAttributeBody_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_action_id};
			new_inst = (DerivedAttributeBody_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				new_inst.m_attributewritten = p_m_attributewritten;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new DerivedAttributeBody_c(modelRoot, p_m_action_id,
					p_m_obj_id, p_m_attr_id, p_m_attributewritten);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public DerivedAttributeBody_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_action_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, boolean p_m_attributewritten) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);
		DerivedAttributeBody_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_action_id};
			source = (DerivedAttributeBody_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				source.m_attributewritten = p_m_attributewritten;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		DerivedAttributeBody_c new_inst = new DerivedAttributeBody_c(modelRoot,
				p_m_action_id, p_m_obj_id, p_m_attr_id, p_m_attributewritten);
		return new_inst;
	}
	public DerivedAttributeBody_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_action_id = IdAssigner.NULL_UUID;
		m_attr_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_action_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_action_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_action_id != p_newKey) {

			m_action_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof DerivedAttributeBody_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof DerivedAttributeBody_c)) {
			return false;
		}

		DerivedAttributeBody_c me = (DerivedAttributeBody_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAction_id()) || IdAssigner.NULL_UUID
						.equals(((DerivedAttributeBody_c) elem).getAction_id())) && this != elem)) {
			return false;
		}
		if (!getAction_id().equals(
				((DerivedAttributeBody_c) elem).getAction_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof DerivedAttributeBody_c)) {
			return false;
		}

		DerivedAttributeBody_c me = (DerivedAttributeBody_c) elem;
		if (!getAction_idCachedValue().equals(
				((DerivedAttributeBody_c) elem).getAction_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_action_id;
	private java.util.UUID m_attr_id;
	private boolean m_attributewritten;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	Body_c IsSupertypeBody;
	public void relateAcrossR698To(Body_c target) {
		relateAcrossR698To(target, true);
	}
	public void relateAcrossR698To(Body_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeBody)
			return; // already related

		if (IsSupertypeBody != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeBody != null) {

				IsSupertypeBody.clearBackPointerR698To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DerivedAttributeBody_c.relateAcrossR698To(Body_c target)",
									"Relate performed across R698 from Derived Attribute Body to Body without unrelate of prior instance.");
				}
			}

			IsSupertypeBody = target;
			m_action_id = target.getAction_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR698To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR698From(Body_c target) {
		unrelateAcrossR698From(target, true);
	}
	public void unrelateAcrossR698From(Body_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeBody == null)
			return; // already unrelated

		if (target != IsSupertypeBody) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R698",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR698To(this);
		}

		if (IsSupertypeBody != null) {

			m_action_id = IsSupertypeBody.getAction_id();
			IsSupertypeBody = null;
			target.removeRef();
		}
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(Body_c[] targets) {
		return getOneACT_DABOnR698(targets, null);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(Body_c[] targets,
			ClassQueryInterface_c test) {
		DerivedAttributeBody_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_DABOnR698(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(Body_c target) {
		return getOneACT_DABOnR698(target, null);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(Body_c target,
			boolean loadComponent) {
		return getOneACT_DABOnR698(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(Body_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_DABOnR698(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(
			ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test) {
		return getOneACT_DABOnR698(modelRoot, target, test, true);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR698(
			ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_DABOnR698(modelRoot, target, test);
	}
	private static DerivedAttributeBody_c find_getOneACT_DABOnR698(
			ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test) {
		if (target != null) {
			DerivedAttributeBody_c source = (DerivedAttributeBody_c) target.backPointer_IsSubtypeDerivedAttributeBodyIsSubtype_R698;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR698(
			Body_c[] targets) {
		return getManyACT_DABsOnR698(targets, null);
	}
	public static DerivedAttributeBody_c[] getManyACT_DABsOnR698(
			Body_c[] targets, boolean loadComponent) {
		return getManyACT_DABsOnR698(targets, null, loadComponent);
	}
	public static DerivedAttributeBody_c[] getManyACT_DABsOnR698(
			Body_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_DABsOnR698(targets, test, true);
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR698(
			Body_c[] targets, ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DerivedAttributeBody_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			DerivedAttributeBody_c source = (DerivedAttributeBody_c) targets[i].backPointer_IsSubtypeDerivedAttributeBodyIsSubtype_R698;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			DerivedAttributeBody_c[] ret_set = new DerivedAttributeBody_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DerivedAttributeBody_c[0];
		}
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR698(Body_c target) {
		if (target != null) {
			Body_c[] targetArray = new Body_c[1];
			targetArray[0] = target;
			return getManyACT_DABsOnR698(targetArray);
		} else {
			DerivedAttributeBody_c[] result = new DerivedAttributeBody_c[0];
			return result;
		}
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR698(Body_c target,
			boolean loadComponent) {
		if (target != null) {
			Body_c[] targetArray = new Body_c[1];
			targetArray[0] = target;
			return getManyACT_DABsOnR698(targetArray, loadComponent);
		} else {
			DerivedAttributeBody_c[] result = new DerivedAttributeBody_c[0];
			return result;
		}
	}

	// referring navigation

	DerivedBaseAttribute_c SpecifiesProcessingForDerivedBaseAttribute;
	public void relateAcrossR693To(DerivedBaseAttribute_c target) {
		relateAcrossR693To(target, true);
	}
	public void relateAcrossR693To(DerivedBaseAttribute_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesProcessingForDerivedBaseAttribute)
			return; // already related

		if (SpecifiesProcessingForDerivedBaseAttribute != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesProcessingForDerivedBaseAttribute != null) {

				SpecifiesProcessingForDerivedBaseAttribute
						.clearBackPointerR693To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DerivedAttributeBody_c.relateAcrossR693To(DerivedBaseAttribute_c target)",
									"Relate performed across R693 from Derived Attribute Body to Derived Base Attribute without unrelate of prior instance.");
				}
			}

			SpecifiesProcessingForDerivedBaseAttribute = target;
			if (IdAssigner.NULL_UUID.equals(target.getAttr_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_attr_id = target.getAttr_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR693To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR693From(DerivedBaseAttribute_c target) {
		unrelateAcrossR693From(target, true);
	}
	public void unrelateAcrossR693From(DerivedBaseAttribute_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesProcessingForDerivedBaseAttribute == null)
			return; // already unrelated

		if (target != SpecifiesProcessingForDerivedBaseAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R693",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR693To(this);
		}

		if (SpecifiesProcessingForDerivedBaseAttribute != null) {

			m_attr_id = SpecifiesProcessingForDerivedBaseAttribute.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(m_attr_id)) {
				m_attr_id = SpecifiesProcessingForDerivedBaseAttribute
						.getAttr_idCachedValue();
			}
			m_obj_id = SpecifiesProcessingForDerivedBaseAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = SpecifiesProcessingForDerivedBaseAttribute
						.getObj_idCachedValue();
			}
			SpecifiesProcessingForDerivedBaseAttribute = null;
			target.removeRef();
		}
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			DerivedBaseAttribute_c[] targets) {
		return getOneACT_DABOnR693(targets, null);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			DerivedBaseAttribute_c[] targets, ClassQueryInterface_c test) {
		DerivedAttributeBody_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_DABOnR693(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			DerivedBaseAttribute_c target) {
		return getOneACT_DABOnR693(target, null);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			DerivedBaseAttribute_c target, boolean loadComponent) {
		return getOneACT_DABOnR693(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			DerivedBaseAttribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_DABOnR693(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			ModelRoot modelRoot, DerivedBaseAttribute_c target,
			ClassQueryInterface_c test) {
		return getOneACT_DABOnR693(modelRoot, target, test, true);
	}

	public static DerivedAttributeBody_c getOneACT_DABOnR693(
			ModelRoot modelRoot, DerivedBaseAttribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_DABOnR693(modelRoot, target, test);
	}
	private static DerivedAttributeBody_c find_getOneACT_DABOnR693(
			ModelRoot modelRoot, DerivedBaseAttribute_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			DerivedAttributeBody_c source = (DerivedAttributeBody_c) target.backPointer_DerivedAttributeBody_R693;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR693(
			DerivedBaseAttribute_c[] targets) {
		return getManyACT_DABsOnR693(targets, null);
	}
	public static DerivedAttributeBody_c[] getManyACT_DABsOnR693(
			DerivedBaseAttribute_c[] targets, boolean loadComponent) {
		return getManyACT_DABsOnR693(targets, null, loadComponent);
	}
	public static DerivedAttributeBody_c[] getManyACT_DABsOnR693(
			DerivedBaseAttribute_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_DABsOnR693(targets, test, true);
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR693(
			DerivedBaseAttribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DerivedAttributeBody_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			DerivedAttributeBody_c source = (DerivedAttributeBody_c) targets[i].backPointer_DerivedAttributeBody_R693;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			DerivedAttributeBody_c[] ret_set = new DerivedAttributeBody_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DerivedAttributeBody_c[0];
		}
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR693(
			DerivedBaseAttribute_c target) {
		if (target != null) {
			DerivedBaseAttribute_c[] targetArray = new DerivedBaseAttribute_c[1];
			targetArray[0] = target;
			return getManyACT_DABsOnR693(targetArray);
		} else {
			DerivedAttributeBody_c[] result = new DerivedAttributeBody_c[0];
			return result;
		}
	}

	public static DerivedAttributeBody_c[] getManyACT_DABsOnR693(
			DerivedBaseAttribute_c target, boolean loadComponent) {
		if (target != null) {
			DerivedBaseAttribute_c[] targetArray = new DerivedBaseAttribute_c[1];
			targetArray[0] = target;
			return getManyACT_DABsOnR693(targetArray, loadComponent);
		} else {
			DerivedAttributeBody_c[] result = new DerivedAttributeBody_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R698
		Body_c relInst57946 = (Body_c) baseRoot.getInstanceList(Body_c.class)
				.get(new Object[]{m_action_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst57946 == null) {
			relInst57946 = (Body_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Body_c.class)
					.get(new Object[]{m_action_id});
		}
		if (relInst57946 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst57946 = (Body_c) roots[i].getInstanceList(Body_c.class)
						.get(new Object[]{m_action_id});
				if (relInst57946 != null)
					break;
			}
		}
		//synchronized
		if (relInst57946 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst57946) && !isProxy())) {
				relInst57946.relateAcrossR698To(this, notifyChanges);
			}
		}

		if (SpecifiesProcessingForDerivedBaseAttribute == null) {
			// R693
			DerivedBaseAttribute_c relInst57947 = (DerivedBaseAttribute_c) baseRoot
					.getInstanceList(DerivedBaseAttribute_c.class).get(
							new Object[]{m_attr_id, m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57947 == null) {
				relInst57947 = (DerivedBaseAttribute_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(DerivedBaseAttribute_c.class)
						.get(new Object[]{m_attr_id, m_obj_id});
			}
			if (relInst57947 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57947 = (DerivedBaseAttribute_c) roots[i]
							.getInstanceList(DerivedBaseAttribute_c.class).get(
									new Object[]{m_attr_id, m_obj_id});
					if (relInst57947 != null)
						break;
				}
			}
			//synchronized
			if (relInst57947 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57947) && !isProxy())) {
					relInst57947.relateAcrossR693To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R698
		// ACT_ACT
		inst = IsSupertypeBody;
		unrelateAcrossR698From(IsSupertypeBody, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R693
		// O_DBATTR
		inst = SpecifiesProcessingForDerivedBaseAttribute;
		unrelateAcrossR693From(SpecifiesProcessingForDerivedBaseAttribute,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(DerivedAttributeBody_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final DerivedAttributeBody_c inst = (DerivedAttributeBody_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static DerivedAttributeBody_c DerivedAttributeBodyInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		DerivedAttributeBody_c result = findDerivedAttributeBodyInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static DerivedAttributeBody_c findDerivedAttributeBodyInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DerivedAttributeBody_c x = (DerivedAttributeBody_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static DerivedAttributeBody_c DerivedAttributeBodyInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return DerivedAttributeBodyInstance(modelRoot, test, true);
	}

	public static DerivedAttributeBody_c DerivedAttributeBodyInstance(
			ModelRoot modelRoot) {
		return DerivedAttributeBodyInstance(modelRoot, null, true);
	}

	public static DerivedAttributeBody_c[] DerivedAttributeBodyInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(DerivedAttributeBody_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DerivedAttributeBody_c x = (DerivedAttributeBody_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				DerivedAttributeBody_c[] ret_set = new DerivedAttributeBody_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new DerivedAttributeBody_c[0];
			}
		}
	}
	public static DerivedAttributeBody_c[] DerivedAttributeBodyInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return DerivedAttributeBodyInstances(modelRoot, test, true);
	}
	public static DerivedAttributeBody_c[] DerivedAttributeBodyInstances(
			ModelRoot modelRoot) {
		return DerivedAttributeBodyInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Derived Attribute Body.dispose call: ";
		Body_c testR698Inst3 = Body_c.getOneACT_ACTOnR698(this, false);

		if (testR698Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "698 ";
		}
		DerivedBaseAttribute_c testR693Inst = DerivedBaseAttribute_c
				.getOneO_DBATTROnR693(this, false);

		if (testR693Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "693 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Derived Attribute Body",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("action_id")) {
			return true;
		}
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getAction_idLongBased() {
		if (IsSupertypeBody != null) {
			return IsSupertypeBody.getAction_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAction_id() {
		if (IsSupertypeBody != null) {
			return IsSupertypeBody.getAction_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeBody != null);

	}

	public java.util.UUID getAction_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_action_id))
			return m_action_id;
		else
			return getAction_id();
	}

	public void setAction_id(java.util.UUID newValue) {
		m_action_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getAttr_idLongBased() {
		if (SpecifiesProcessingForDerivedBaseAttribute != null) {
			return SpecifiesProcessingForDerivedBaseAttribute
					.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (SpecifiesProcessingForDerivedBaseAttribute != null) {
			return SpecifiesProcessingForDerivedBaseAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		m_attr_id = IdAssigner.preprocessUUID(newValue);
	}
	public boolean getAttributewritten() {
		return m_attributewritten;
	}

	public void setAttributewritten(boolean newValue) {
		m_attributewritten = newValue;
	}
	public long getObj_idLongBased() {
		if (SpecifiesProcessingForDerivedBaseAttribute != null) {
			return SpecifiesProcessingForDerivedBaseAttribute
					.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (SpecifiesProcessingForDerivedBaseAttribute != null) {
			return SpecifiesProcessingForDerivedBaseAttribute.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		m_obj_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Derived Attribute Body", //$NON-NLS-1$
						" Operation entered: Derived Attribute Body::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		DerivedAttributeBody_c[] objs = DerivedAttributeBody_c
				.DerivedAttributeBodyInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Attribute Body", //$NON-NLS-1$
				" Operation entered: Derived Attribute Body::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class DerivedAttributeBody_c_test57949_c
				implements
					ClassQueryInterface_c {
			DerivedAttributeBody_c_test57949_c(java.util.UUID p57950) {
				m_p57950 = p57950;
			}
			private java.util.UUID m_p57950;
			public boolean evaluate(Object candidate) {
				DerivedAttributeBody_c selected = (DerivedAttributeBody_c) candidate;
				boolean retval = false;
				retval = (selected.getAction_id().equals(m_p57950));
				return retval;
			}
		}

		DerivedAttributeBody_c[] objs57948 = DerivedAttributeBody_c
				.DerivedAttributeBodyInstances(modelRoot,
						new DerivedAttributeBody_c_test57949_c(getAction_id()));

		if (((objs57948.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Attribute Body", //$NON-NLS-1$
								"Consistency: Object: Derived Attribute Body: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57948.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Attribute Body: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57948.length), e);
			}
			retval = false;

		}

		if (((objs57948.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Attribute Body", //$NON-NLS-1$
								"Consistency: Object: Derived Attribute Body: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57948.length)
										+ " Action_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Attribute Body: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57948.length)
										+ " Action_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Derived Attribute Body is a subtype in association: rel.Numb = 698
		// The supertype class is: Body
		class Body_c_test57954_c implements ClassQueryInterface_c {
			Body_c_test57954_c(java.util.UUID p57955) {
				m_p57955 = p57955;
			}
			private java.util.UUID m_p57955;
			public boolean evaluate(Object candidate) {
				Body_c selected = (Body_c) candidate;
				boolean retval = false;
				retval = (selected.getAction_id().equals(m_p57955));
				return retval;
			}
		}

		Body_c[] objs57953 = Body_c.BodyInstances(modelRoot,
				new Body_c_test57954_c(getAction_id()));

		if (((objs57953.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Attribute Body", //$NON-NLS-1$
								"Consistency: Object: Derived Attribute Body: Association: 698: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57953.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Attribute Body: Association: 698: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57953.length), e);
			}
			retval = false;

		}

		// Derived Attribute Body is a referring class in association: rel.Numb = 693
		// The participating class is: Derived Base Attribute
		class DerivedBaseAttribute_c_test57957_c
				implements
					ClassQueryInterface_c {
			DerivedBaseAttribute_c_test57957_c(java.util.UUID p57958,
					java.util.UUID p57959) {
				m_p57958 = p57958;
				m_p57959 = p57959;
			}
			private java.util.UUID m_p57958;
			private java.util.UUID m_p57959;
			public boolean evaluate(Object candidate) {
				DerivedBaseAttribute_c selected = (DerivedBaseAttribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p57958))
						& (selected.getObj_id().equals(m_p57959));
				return retval;
			}
		}

		DerivedBaseAttribute_c[] objs57956 = DerivedBaseAttribute_c
				.DerivedBaseAttributeInstances(modelRoot,
						new DerivedBaseAttribute_c_test57957_c(getAttr_id(),
								getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57956.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Derived Attribute Body", //$NON-NLS-1$
								"Consistency: Object: Derived Attribute Body: Association: 693: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57956.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Derived Attribute Body: Association: 693: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57956.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Attribute Body",
				" Operation entered: DerivedAttributeBody::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		DerivedBaseAttribute_c v_dab = DerivedBaseAttribute_c
				.getOneO_DBATTROnR693(this);

		if (((v_dab != null))) {

			this.unrelateAcrossR693From(v_dab);

		}

		delete();

	} // End dispose
	public java.util.UUID Getcontainingcomponentid() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Derived Attribute Body",
						" Operation entered: DerivedAttributeBody::Getcontainingcomponentid");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR102(Attribute_c
				.getOneO_ATTROnR106(BaseAttribute_c
						.getOneO_BATTROnR107(DerivedBaseAttribute_c
								.getOneO_DBATTROnR693(this))));

		return v_clazz.Getcontainingcomponentid();

	} // End getContainingComponentId
	public java.util.UUID Getcontainerid() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Attribute Body",
				" Operation entered: DerivedAttributeBody::Getcontainerid");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR102(Attribute_c
				.getOneO_ATTROnR106(BaseAttribute_c
						.getOneO_BATTROnR107(DerivedBaseAttribute_c
								.getOneO_DBATTROnR693(this))));

		return v_clazz.Getcontainerid();

	} // End getContainerId
	public String Getpath() {
		Ooaofooa.log.println(ILogger.OPERATION, "Derived Attribute Body",
				" Operation entered: DerivedAttributeBody::Getpath");
		final ModelRoot modelRoot = getModelRoot();
		DerivedBaseAttribute_c v_attribute = DerivedBaseAttribute_c
				.getOneO_DBATTROnR693(this);

		String v_attrPath = "";

		String v_attrName = "";

		if (((v_attribute != null))) {

			Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(BaseAttribute_c
					.getOneO_BATTROnR107(v_attribute));

			v_attrName = v_attr.getName();

			PackageableElement_c v_pe_pe = PackageableElement_c
					.getOnePE_PEOnR8001(ModelClass_c.getOneO_OBJOnR102(v_attr));

			if (((v_pe_pe != null))) {

				Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe_pe);

				v_attrPath = v_pkg.Getpath(v_attrName);

			}

			else {

				Subsystem_c v_subSystem = Subsystem_c
						.getOneS_SSOnR2(ModelClass_c.getOneO_OBJOnR102(v_attr));

				v_attrPath = v_subSystem.Getpath(v_attrName);

			}

		}

		return v_attrPath;

	} // End getPath

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Derived Attribute Body
