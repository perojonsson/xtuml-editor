      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ConstantSpecification_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_CONSTANT_SPECIFICATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ConstantSpecification_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ConstantSpecification_c(ModelRoot modelRoot,
       java.util.UUID         p_m_constant_spec_id,
       String       p_m_informalgroupname,
       String       p_m_descrip)
  {
    super(modelRoot);
       m_informalgroupname = p_m_informalgroupname;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);
        
    setUniqueId(m_constant_spec_id);
    Object [] key = {m_constant_spec_id};
    addInstanceToMap(key);
  }
  static public ConstantSpecification_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_constant_spec_id,
       String       p_m_informalgroupname,
       String       p_m_descrip, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);
      ConstantSpecification_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_constant_spec_id};
          new_inst = (ConstantSpecification_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_informalgroupname = p_m_informalgroupname;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ConstantSpecification_c(modelRoot,
p_m_constant_spec_id,
p_m_informalgroupname,
p_m_descrip
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ConstantSpecification_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_constant_spec_id,
       String       p_m_informalgroupname,
       String       p_m_descrip){
    InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);
    ConstantSpecification_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_constant_spec_id
            };
        source = (ConstantSpecification_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_informalgroupname = p_m_informalgroupname;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ConstantSpecification_c new_inst = new ConstantSpecification_c(modelRoot,
p_m_constant_spec_id,
p_m_informalgroupname,
p_m_descrip
);
    return new_inst;
  }
  public ConstantSpecification_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_informalgroupname = "";   
     m_descrip = "";   
     m_constant_spec_id = idAssigner.createUUID();
    setUniqueId(m_constant_spec_id);
    Object [] key = {m_constant_spec_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_constant_spec_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_constant_spec_id !=  p_newKey ){
	
		m_constant_spec_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ConstantSpecification_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ConstantSpecification_c)) {
           return false;
       }
       
       ConstantSpecification_c me = (ConstantSpecification_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getConstant_spec_id()) || IdAssigner.NULL_UUID.equals(((ConstantSpecification_c)elem).getConstant_spec_id())) && this != elem)) {
      	return false;
      }
      if (!getConstant_spec_id().equals(((ConstantSpecification_c)elem).getConstant_spec_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ConstantSpecification_c)) {
           return false;
       }
       
       ConstantSpecification_c me = (ConstantSpecification_c)elem;
      if (!getConstant_spec_idCachedValue().equals(((ConstantSpecification_c)elem).getConstant_spec_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private String       m_informalgroupname ;
  private String       m_descrip ;
  private java.util.UUID         m_constant_spec_id ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ConstantSpecification_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Constant Specification to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_constant_spec_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_constant_spec_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ConstantSpecification_c getOneCNST_CSPOnR8001(PackageableElement_c [] targets)
{
    return getOneCNST_CSPOnR8001(targets, null);
}

public static ConstantSpecification_c getOneCNST_CSPOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    ConstantSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCNST_CSPOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static ConstantSpecification_c getOneCNST_CSPOnR8001(PackageableElement_c target)
{
  return getOneCNST_CSPOnR8001(target, null);
}

public static ConstantSpecification_c getOneCNST_CSPOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneCNST_CSPOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static ConstantSpecification_c getOneCNST_CSPOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCNST_CSPOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static ConstantSpecification_c getOneCNST_CSPOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneCNST_CSPOnR8001(modelRoot, target, test, true);
}

public static ConstantSpecification_c getOneCNST_CSPOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCNST_CSPOnR8001(modelRoot,target,test);
}
private static ConstantSpecification_c find_getOneCNST_CSPOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ConstantSpecification_c source = (ConstantSpecification_c)target.backPointer_IsSubtypeConstantSpecificationIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR8001(PackageableElement_c [] targets)
{
  return getManyCNST_CSPsOnR8001(targets, null);
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyCNST_CSPsOnR8001(targets, null, loadComponent);
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyCNST_CSPsOnR8001(targets, test, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ConstantSpecification_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ConstantSpecification_c source = (ConstantSpecification_c)targets[i].backPointer_IsSubtypeConstantSpecificationIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ConstantSpecification_c[] ret_set = new ConstantSpecification_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ConstantSpecification_c[0];
  }
  }

public static ConstantSpecification_c [] getManyCNST_CSPsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyCNST_CSPsOnR8001(targetArray);
  } else {
    ConstantSpecification_c [] result = new ConstantSpecification_c [0] ;
  return result ;
}
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyCNST_CSPsOnR8001(targetArray, loadComponent);
  } else {
    ConstantSpecification_c [] result = new ConstantSpecification_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SystemConstantInPackage_c> backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403 = new ArrayList<SystemConstantInPackage_c>();

public void setSystemConstantInPackageOrderInChildListR4403(SystemConstantInPackage_c target, int index) {
	unrelateAcrossR4403From(target);
	SystemConstantInPackage_c[] elements = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4403From((SystemConstantInPackage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4403To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4403To((SystemConstantInPackage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4403To(SystemConstantInPackage_c target)
{
  if (target != null) {
    target.relateAcrossR4403To(this, true) ;
  }
}

public void relateAcrossR4403To(SystemConstantInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4403To(this, notifyChanges) ;
  }
}

public void setBackPointerR4403To(SystemConstantInPackage_c target)
{
  	synchronized (backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403) {
		backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403.add(target);
	}
}

public void unrelateAcrossR4403From(SystemConstantInPackage_c target)
{
  if (target != null) {
    target.unrelateAcrossR4403From(this, true) ;
  }
}

public void unrelateAcrossR4403From(SystemConstantInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4403From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4403To(SystemConstantInPackage_c target)
{
  synchronized (backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403) {
	    backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403.remove(target);
	}
}

public static ConstantSpecification_c getOneCNST_CSPOnR4403(SystemConstantInPackage_c [] targets)
{
    return getOneCNST_CSPOnR4403(targets, null);
}

public static ConstantSpecification_c getOneCNST_CSPOnR4403(SystemConstantInPackage_c [] targets, ClassQueryInterface_c test)
{
    return getOneCNST_CSPOnR4403(targets, test, true);
}

public static ConstantSpecification_c getOneCNST_CSPOnR4403(SystemConstantInPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ConstantSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ConstantSpecification_c candidate_val = getOneCNST_CSPOnR4403(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCNST_CSPOnR4403(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ConstantSpecification_c getOneCNST_CSPOnR4403(SystemConstantInPackage_c target)
{
	return getOneCNST_CSPOnR4403(target, true);
}
public static ConstantSpecification_c getOneCNST_CSPOnR4403(SystemConstantInPackage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.MayShowConstantSpecification ;
  } else {
    return null;
  }
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCNST_CSPsOnR4403(targets, test, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ConstantSpecification_c[0];
  
  
  LinkedHashSet<ConstantSpecification_c> elementsSet = new LinkedHashSet<ConstantSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].MayShowConstantSpecification == null)
	  targets[i].loadProxy();
    ConstantSpecification_c associate = targets[i].MayShowConstantSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ConstantSpecification_c[] result = new ConstantSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c [] targets)
{
  return getManyCNST_CSPsOnR4403(targets, null);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SystemConstantInPackage_c [] targetArray = new SystemConstantInPackage_c[1];
    targetArray[0] = target;
    return getManyCNST_CSPsOnR4403(targetArray, test, loadComponent);
  } else {
    ConstantSpecification_c [] result = new ConstantSpecification_c [0] ;
    return result ;
  }
  
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c target,
    ClassQueryInterface_c test)
{
    return getManyCNST_CSPsOnR4403(target, null, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c target)
{
    return getManyCNST_CSPsOnR4403(target, null, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(SystemConstantInPackage_c target, boolean loadComponent)
{
    return getManyCNST_CSPsOnR4403(target, null, loadComponent);
}

public static ConstantSpecification_c getOneCNST_CSPOnR4403(DataTypePackage_c target)
{
  return ConstantSpecification_c.getOneCNST_CSPOnR4403(SystemConstantInPackage_c.getOneSLD_SCINPOnR4403(target)) ;
}

public static ConstantSpecification_c getOneCNST_CSPOnR4403(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
  return ConstantSpecification_c.getOneCNST_CSPOnR4403(SystemConstantInPackage_c.getManySLD_SCINPsOnR4403(target), test) ;
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
	return getManyCNST_CSPsOnR4403(target, test, true);
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(DataTypePackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  SystemConstantInPackage_c [] associators = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403(target, loadComponent) ;
    return ConstantSpecification_c.getManyCNST_CSPsOnR4403(associators, test, loadComponent) ;
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(DataTypePackage_c target)
{
    return getManyCNST_CSPsOnR4403(target, null, true);
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR4403(DataTypePackage_c target, boolean loadComponent)
{
    return getManyCNST_CSPsOnR4403(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ConstantInPackage_c> backPointer_IsContainedInConstantInPackageIsContainedIn_R1506 = new ArrayList<ConstantInPackage_c>();

public void setConstantInPackageOrderInChildListR1506(ConstantInPackage_c target, int index) {
	unrelateAcrossR1506From(target);
	ConstantInPackage_c[] elements = ConstantInPackage_c.getManyCNST_CIPsOnR1506(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1506From((ConstantInPackage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1506To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1506To((ConstantInPackage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1506To(ConstantInPackage_c target)
{
  if (target != null) {
    target.relateAcrossR1506To(this, true) ;
  }
}

public void relateAcrossR1506To(ConstantInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1506To(this, notifyChanges) ;
  }
}

public void setBackPointerR1506To(ConstantInPackage_c target)
{
  	synchronized (backPointer_IsContainedInConstantInPackageIsContainedIn_R1506) {
		backPointer_IsContainedInConstantInPackageIsContainedIn_R1506.add(target);
	}
}

public void unrelateAcrossR1506From(ConstantInPackage_c target)
{
  if (target != null) {
    target.unrelateAcrossR1506From(this, true) ;
  }
}

public void unrelateAcrossR1506From(ConstantInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1506From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1506To(ConstantInPackage_c target)
{
  synchronized (backPointer_IsContainedInConstantInPackageIsContainedIn_R1506) {
	    backPointer_IsContainedInConstantInPackageIsContainedIn_R1506.remove(target);
	}
}

public static ConstantSpecification_c getOneCNST_CSPOnR1506(ConstantInPackage_c [] targets)
{
    return getOneCNST_CSPOnR1506(targets, null);
}

public static ConstantSpecification_c getOneCNST_CSPOnR1506(ConstantInPackage_c [] targets, ClassQueryInterface_c test)
{
    return getOneCNST_CSPOnR1506(targets, test, true);
}

public static ConstantSpecification_c getOneCNST_CSPOnR1506(ConstantInPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ConstantSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ConstantSpecification_c candidate_val = getOneCNST_CSPOnR1506(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCNST_CSPOnR1506(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ConstantSpecification_c getOneCNST_CSPOnR1506(ConstantInPackage_c target)
{
	return getOneCNST_CSPOnR1506(target, true);
}
public static ConstantSpecification_c getOneCNST_CSPOnR1506(ConstantInPackage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainsConstantSpecification ;
  } else {
    return null;
  }
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCNST_CSPsOnR1506(targets, test, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ConstantSpecification_c[0];
  
  
  LinkedHashSet<ConstantSpecification_c> elementsSet = new LinkedHashSet<ConstantSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainsConstantSpecification == null)
	  targets[i].loadProxy();
    ConstantSpecification_c associate = targets[i].ContainsConstantSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ConstantSpecification_c[] result = new ConstantSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c [] targets)
{
  return getManyCNST_CSPsOnR1506(targets, null);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ConstantInPackage_c [] targetArray = new ConstantInPackage_c[1];
    targetArray[0] = target;
    return getManyCNST_CSPsOnR1506(targetArray, test, loadComponent);
  } else {
    ConstantSpecification_c [] result = new ConstantSpecification_c [0] ;
    return result ;
  }
  
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c target,
    ClassQueryInterface_c test)
{
    return getManyCNST_CSPsOnR1506(target, null, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c target)
{
    return getManyCNST_CSPsOnR1506(target, null, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(ConstantInPackage_c target, boolean loadComponent)
{
    return getManyCNST_CSPsOnR1506(target, null, loadComponent);
}

public static ConstantSpecification_c getOneCNST_CSPOnR1506(DataTypePackage_c target)
{
  return ConstantSpecification_c.getOneCNST_CSPOnR1506(ConstantInPackage_c.getOneCNST_CIPOnR1506(target)) ;
}

public static ConstantSpecification_c getOneCNST_CSPOnR1506(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
  return ConstantSpecification_c.getOneCNST_CSPOnR1506(ConstantInPackage_c.getManyCNST_CIPsOnR1506(target), test) ;
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
	return getManyCNST_CSPsOnR1506(target, test, true);
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(DataTypePackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ConstantInPackage_c [] associators = ConstantInPackage_c.getManyCNST_CIPsOnR1506(target, loadComponent) ;
    return ConstantSpecification_c.getManyCNST_CSPsOnR1506(associators, test, loadComponent) ;
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(DataTypePackage_c target)
{
    return getManyCNST_CSPsOnR1506(target, null, true);
}
public static ConstantSpecification_c [] getManyCNST_CSPsOnR1506(DataTypePackage_c target, boolean loadComponent)
{
    return getManyCNST_CSPsOnR1506(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SymbolicConstant_c> backPointer_ContainsSymbolicConstantContains_R1504 = new ArrayList<SymbolicConstant_c>();

public void setSymbolicConstantOrderInChildListR1504(SymbolicConstant_c target, int index) {
	unrelateAcrossR1504From(target);
	SymbolicConstant_c[] elements = SymbolicConstant_c.getManyCNST_SYCsOnR1504(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1504From((SymbolicConstant_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1504To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1504To((SymbolicConstant_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1504To(SymbolicConstant_c target)
{
  if (target != null) {
    target.relateAcrossR1504To(this, true) ;
  }
}

public void relateAcrossR1504To(SymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1504To(this, notifyChanges) ;
  }
}

public void setBackPointerR1504To(SymbolicConstant_c target)
{
  	synchronized (backPointer_ContainsSymbolicConstantContains_R1504) {
		backPointer_ContainsSymbolicConstantContains_R1504.add(target);
	}
}

public void unrelateAcrossR1504From(SymbolicConstant_c target)
{
  if (target != null) {
    target.unrelateAcrossR1504From(this, true) ;
  }
}

public void unrelateAcrossR1504From(SymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1504From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1504To(SymbolicConstant_c target)
{
  synchronized (backPointer_ContainsSymbolicConstantContains_R1504) {
	    backPointer_ContainsSymbolicConstantContains_R1504.remove(target);
	}
}

public static ConstantSpecification_c getOneCNST_CSPOnR1504(SymbolicConstant_c [] targets)
{
    return getOneCNST_CSPOnR1504(targets, null);
}

public static ConstantSpecification_c getOneCNST_CSPOnR1504(SymbolicConstant_c [] targets, ClassQueryInterface_c test)
{
    return getOneCNST_CSPOnR1504(targets, test, true);
}

public static ConstantSpecification_c getOneCNST_CSPOnR1504(SymbolicConstant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ConstantSpecification_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ConstantSpecification_c candidate_val = getOneCNST_CSPOnR1504(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCNST_CSPOnR1504(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ConstantSpecification_c getOneCNST_CSPOnR1504(SymbolicConstant_c target)
{
	return getOneCNST_CSPOnR1504(target, true);
}
public static ConstantSpecification_c getOneCNST_CSPOnR1504(SymbolicConstant_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsContainedByConstantSpecification ;
  } else {
    return null;
  }
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCNST_CSPsOnR1504(targets, test, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ConstantSpecification_c[0];
  
  
  LinkedHashSet<ConstantSpecification_c> elementsSet = new LinkedHashSet<ConstantSpecification_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsContainedByConstantSpecification == null)
	  targets[i].loadProxy();
    ConstantSpecification_c associate = targets[i].IsContainedByConstantSpecification;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ConstantSpecification_c[] result = new ConstantSpecification_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c [] targets)
{
  return getManyCNST_CSPsOnR1504(targets, null);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SymbolicConstant_c [] targetArray = new SymbolicConstant_c[1];
    targetArray[0] = target;
    return getManyCNST_CSPsOnR1504(targetArray, test, loadComponent);
  } else {
    ConstantSpecification_c [] result = new ConstantSpecification_c [0] ;
    return result ;
  }
  
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c target,
    ClassQueryInterface_c test)
{
    return getManyCNST_CSPsOnR1504(target, null, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c target)
{
    return getManyCNST_CSPsOnR1504(target, null, true);
}

public static ConstantSpecification_c [] getManyCNST_CSPsOnR1504(SymbolicConstant_c target, boolean loadComponent)
{
    return getManyCNST_CSPsOnR1504(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst56873 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_constant_spec_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56873 == null) {
      			relInst56873 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_constant_spec_id});
      		}
			if (relInst56873 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56873 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_constant_spec_id});
					if (relInst56873 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56873 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56873) && !isProxy())) {
	      relInst56873.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ConstantSpecification_c inst = (ConstantSpecification_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ConstantSpecification_c ConstantSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ConstantSpecification_c result=findConstantSpecificationInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ConstantSpecification_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findConstantSpecificationInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ConstantSpecification_c findConstantSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ConstantSpecification_c x = (ConstantSpecification_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ConstantSpecification_c ConstantSpecificationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ConstantSpecificationInstance(modelRoot,test,true);
  }
  
  public static ConstantSpecification_c ConstantSpecificationInstance(ModelRoot modelRoot)
  {
	 return ConstantSpecificationInstance(modelRoot,null,true);
  }

  public static ConstantSpecification_c [] ConstantSpecificationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ConstantSpecification_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ConstantSpecification_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ConstantSpecification_c x = (ConstantSpecification_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ConstantSpecification_c[] ret_set = new ConstantSpecification_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ConstantSpecification_c[0];
			}		
		} 
  }
  public static ConstantSpecification_c [] ConstantSpecificationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ConstantSpecificationInstances(modelRoot,test,true);
  }
  public static ConstantSpecification_c [] ConstantSpecificationInstances(ModelRoot modelRoot)
  {
	return ConstantSpecificationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Constant Specification.dispose call: ";
	PackageableElement_c testR8001Inst10 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst10 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
 	SystemConstantInPackage_c testR4403Inst = SystemConstantInPackage_c.getOneSLD_SCINPOnR4403(this, false);

 	if ( testR4403Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "4403 ";
 	}
	ConstantInPackage_c testR1506Inst = ConstantInPackage_c.getOneCNST_CIPOnR1506(this, false);

	if ( testR1506Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1506 ";
	}
	SymbolicConstant_c testR1504Inst = SymbolicConstant_c.getOneCNST_SYCOnR1504(this, false);

	if ( testR1504Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1504 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Constant Specification", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("constant_spec_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getConstant_spec_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getConstant_spec_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getInformalgroupname()
  {
    return m_informalgroupname ;
  }


  public void setInformalgroupname(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_informalgroupname)){
	        return;
	    }
	}else if(m_informalgroupname != null){
	    if(m_informalgroupname.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Informalgroupname", m_informalgroupname, newValue,true); 
   m_informalgroupname = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getConstant_spec_idLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getConstant_spec_id()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_constant_spec_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getConstant_spec_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_constant_spec_id) )
      return m_constant_spec_id;
    else
      return getConstant_spec_id();
  }
  
  public void setConstant_spec_id(java.util.UUID newValue)
  {
   m_constant_spec_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Constant Specification", //$NON-NLS-1$
	  " Operation entered: Constant Specification::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ConstantSpecification_c [] objs = ConstantSpecification_c.ConstantSpecificationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Constant Specification", //$NON-NLS-1$
	  " Operation entered: Constant Specification::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ConstantSpecification_c_test56875_c implements ClassQueryInterface_c
    {
	  ConstantSpecification_c_test56875_c( java.util.UUID            p56876 ) {
	  m_p56876 = p56876;
	  }
	  private java.util.UUID             m_p56876; 
	  public boolean evaluate (Object candidate)
	  {
	      ConstantSpecification_c selected = (ConstantSpecification_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConstant_spec_id().equals(m_p56876));
	      return retval;
	  }
    }

    ConstantSpecification_c [] objs56874 = 
    ConstantSpecification_c.ConstantSpecificationInstances(modelRoot, new ConstantSpecification_c_test56875_c(getConstant_spec_id())) ;

    if ( (  (objs56874.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Constant Specification", //$NON-NLS-1$
           "Consistency: Object: Constant Specification: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56874.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Constant Specification: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56874.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56874.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Constant Specification", //$NON-NLS-1$
           "Consistency: Object: Constant Specification: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56874.length )  + " Constant_Spec_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Constant Specification: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56874.length )  + " Constant_Spec_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Constant Specification is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Associated Other Side: rel.Numb = 4403
            // Link Object: System Constant in Package
          // Constant Specification is a participating class in association: rel.Numb = 1504
             // Object: Symbolic Constant
          // Associated One Side: rel.Numb = 1506
            // Link Object: Constant in Package
            // Other Side Class: Data Type Package
    class ConstantInPackage_c_test56884_c implements ClassQueryInterface_c
    {
	  ConstantInPackage_c_test56884_c( java.util.UUID            p56885 ) {
	  m_p56885 = p56885;
	  }
	  private java.util.UUID             m_p56885; 
	  public boolean evaluate (Object candidate)
	  {
	      ConstantInPackage_c selected = (ConstantInPackage_c) candidate;
	      boolean retval = false;
	      retval = (selected.getConstant_spec_id().equals(m_p56885));
	      return retval;
	  }
    }

    ConstantInPackage_c [] objs56886 = 
    ConstantInPackage_c.ConstantInPackageInstances(modelRoot, new ConstantInPackage_c_test56884_c(getConstant_spec_id())) ;

    if ( (  (objs56886.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Constant Specification", //$NON-NLS-1$
           "Consistency: Object: Constant Specification: Association: 1506: Cardinality of a link is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56886.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Constant Specification: Association: 1506: Cardinality of a link is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56886.length )  , e); 
      }
      retval = false;

    }


    if ( (  (objs56886.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Constant Specification", //$NON-NLS-1$
           "Consistency: Object: Constant Specification: Association: 1506: Cardinality of a link is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56886.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Constant Specification: Association: 1506: Cardinality of a link is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56886.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Associatewithsystem(final java.util.UUID         p_Sys_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Associatewithsystem") ; 
               final ModelRoot modelRoot = getModelRoot();
SystemModel_c v_system = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(p_Sys_id);


if ( (  (v_system != null)) )
{

SystemConstantInPackage_c v_scip = SystemConstantInPackage_c.getOneSLD_SCINPOnR4403(this);


if ( (  (v_scip != null)) )
{

SystemModel_c v_prevSystem = SystemModel_c.getOneS_SYSOnR4404(v_scip);


if (v_scip != null) {
v_scip.unrelateAcrossR4404From(v_prevSystem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


DataTypePackage_c v_prevPkg = DataTypePackage_c.getOneS_DPKOnR4403(v_scip);


if (v_scip != null) {
v_scip.unrelateAcrossR4403From( this ) ; v_scip.unrelateAcrossR4403From( v_prevPkg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}



}

else
{

v_scip = new SystemConstantInPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_scip));



}

if (v_scip != null) {
  v_scip.relateAcrossR4404To(v_system);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


DataTypePackage_c v_pkg = DataTypePackage_c.getOneS_DPKOnR1506(ConstantInPackage_c.getOneCNST_CIPOnR1506(this));


if (v_scip != null) {
  v_scip.relateAcrossR4403To( v_pkg ) ;   v_scip.relateAcrossR4403To( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


   } // End associateWithSystem
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


if ( (  (v_pe != null)) )
{

if (v_pe != null) {
v_pe.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return ;



}

ConstantInPackage_c v_cip = ConstantInPackage_c.getOneCNST_CIPOnR1506(this);


if ( (  (v_cip != null)) )
{

DataTypePackage_c v_dpk = DataTypePackage_c.getOneS_DPKOnR1506(this);


if (v_cip != null) {
v_cip.unrelateAcrossR1506From( this ) ; v_cip.unrelateAcrossR1506From( v_dpk ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_cip != null) {
// get the location of this element in the instance list
// before deleting
if ( v_cip.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_cip));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

SymbolicConstant_c [] v_sycs = SymbolicConstant_c.getManyCNST_SYCsOnR1504(this);


SymbolicConstant_c  v_syc = null;
for ( int i55159 = 0; i55159 < v_sycs.length; i55159++)
{
  v_syc = v_sycs[i55159] ;

if (v_syc != null) {
v_syc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SystemConstantInPackage_c [] v_scips = SystemConstantInPackage_c.getManySLD_SCINPsOnR4403(this);


SystemConstantInPackage_c  v_scip = null;
for ( int i55160 = 0; i55160 < v_scips.length; i55160++)
{
  v_scip = v_scips[i55160] ;

DataTypePackage_c v_dtp = DataTypePackage_c.getOneS_DPKOnR4403(v_scip);


if ( (  (v_dtp != null)) )
{

if (v_scip != null) {
v_scip.unrelateAcrossR4403From( this ) ; v_scip.unrelateAcrossR4403From( v_dtp ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}



}

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4404(v_scip);


if (v_scip != null) {
v_scip.unrelateAcrossR4404From(v_system);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_scip != null) {
// get the location of this element in the instance list
// before deleting
if ( v_scip.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_scip));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


if ( (p_Comp_num == 1) )
{

if ( (p_At == Justification_c.Center_in_X) )
{

v_result = "«constant»" ;


v_result = v_result + Gd_c.Newline() ;


PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


if (   (v_pe != null) )
{

v_result = v_result + v_pe.Getvisibilityadornment() ;



}

v_result = v_result + getInformalgroupname() ;



}


}

else
{

if ( (p_At == Justification_c.Left) )
{

  class SymbolicConstant_test55816_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		SymbolicConstant_c selected = (SymbolicConstant_c)candidate;
		return (selected.getPrevious_const_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
SymbolicConstant_c v_symConst = SymbolicConstant_c.getOneCNST_SYCOnR1504(this, new SymbolicConstant_test55816_c());


int          v_cursor = p_Ent_num ;


while ( (  (v_symConst != null) && v_cursor > 1) )
{

v_symConst = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(v_symConst);


v_cursor = v_cursor - 1 ;



}

if ( (  (v_symConst == null)) )
{

v_result = "" ;



}

else
{

DataType_c v_dt = DataType_c.getOneS_DTOnR1500(v_symConst);


LiteralSymbolicConstant_c v_lsc = LiteralSymbolicConstant_c.getOneCNST_LSCOnR1503(LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502(v_symConst));


String       v_dtname = "" ;


String       v_lscvalue = "" ;


if ( (  (v_dt != null)) )
{

v_dtname = v_dt.getName() ;



}

if ( (  (v_lsc != null)) )
{

v_lscvalue = v_lsc.getValue() ;



}

v_result = v_symConst.getName() + ":" + v_dtname + " = " + v_lscvalue ;



}


}


}

return v_result;



   } // End get_compartment_text
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
return 2;



   } // End get_compartments
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Comp_num == 1) )
{

return 1;



}

else
{

SymbolicConstant_c [] v_symConsts = SymbolicConstant_c.getManyCNST_SYCsOnR1504(this);


return   (v_symConsts.length);



}


   } // End get_entries
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return getInformalgroupname();



   } // End get_name
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getConstant_spec_id();



   } // End get_ooa_id
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.Box;



   } // End get_style
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.None;



   } // End get_text_style
  public  void Newliteralsymbolicconstant()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Newliteralsymbolicconstant") ; 
               final ModelRoot modelRoot = getModelRoot();
LiteralSymbolicConstant_c v_lsc = new LiteralSymbolicConstant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_lsc));


LeafSymbolicConstant_c v_lfsc = new LeafSymbolicConstant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_lfsc));


SymbolicConstant_c v_syc = new SymbolicConstant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_syc));


if (v_lsc != null) {
  v_lsc.relateAcrossR1503To(v_lfsc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_lfsc != null) {
  v_lfsc.relateAcrossR1502To(v_syc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1504To(v_syc);


if (v_lsc != null) {
v_lsc.Initialize(			    
getConstant_spec_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newLiteralSymbolicConstant
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( p_Value.equals("make public") )
{

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe);


if (   (v_pkg != null) )
{

if (   (v_pe != null) )
{

return v_pe.getVisibility() != Visibility_c.Public;



}


}


}

else if ( p_Value.equals("make protected") )
{

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe);


if (   (v_pkg != null) )
{

if (   (v_pe != null) )
{

return v_pe.getVisibility() != Visibility_c.Protected;



}


}


}

else if ( p_Value.equals("make private") )
{

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe);


if (   (v_pkg != null) )
{

if (   (v_pe != null) )
{

return v_pe.getVisibility() != Visibility_c.Private;



}


}


}


}

return false;



   } // End actionFilter
  public  void Pasteliteralsymbolicconstant(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Pasteliteralsymbolicconstant") ; 
               final ModelRoot modelRoot = getModelRoot();
  class LiteralSymbolicConstant_test55535_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		LiteralSymbolicConstant_c selected = (LiteralSymbolicConstant_c)candidate;
		return (selected.getConst_id().equals(p_Id)) ;
	}
  }
LiteralSymbolicConstant_c v_lsc = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(modelRoot, new LiteralSymbolicConstant_test55535_c()) ;


if ( (  (v_lsc != null)) )
{

SymbolicConstant_c v_syc = SymbolicConstant_c.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c.getOneCNST_LFSCOnR1503(v_lsc));


if ( (  (v_syc != null)) )
{

if (v_syc != null) {
  v_syc.relateAcrossR1504To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if (v_syc != null) {
  v_syc.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_syc.Converttoinstance()			    
,v_syc.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Addliteralsymbolicconstanttoordering(			    
v_syc.getConst_id() ) ;



}


   } // End pasteLiteralSymbolicConstant
  public  void Addliteralsymbolicconstanttoordering(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Addliteralsymbolicconstanttoordering") ; 
               final ModelRoot modelRoot = getModelRoot();
  class SymbolicConstant_test55536_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		SymbolicConstant_c selected = (SymbolicConstant_c)candidate;
		return (selected.getConst_id().equals(p_Id)) ;
	}
  }
SymbolicConstant_c v_syc = SymbolicConstant_c.SymbolicConstantInstance(modelRoot, new SymbolicConstant_test55536_c()) ;


if ( (  (v_syc != null)) )
{

SymbolicConstant_c [] v_peers = SymbolicConstant_c.getManyCNST_SYCsOnR1504(this);


Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


SymbolicConstant_c  v_peer = null;
for ( int i55161 = 0; i55161 < v_peers.length; i55161++)
{
  v_peer = v_peers[i55161] ;

if ( (v_peer != v_syc) )
{

SymbolicConstant_c v_predecessor = SymbolicConstant_c.getOneCNST_SYCOnR1505Precedes(v_peer);


if ( (  (v_predecessor == null)) )
{

if (v_syc != null) {
  v_syc.relateAcrossR1505ToSucceeds(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}


   } // End addLiteralSymbolicConstantToOrdering
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Constant Specification", " Operation entered: ConstantSpecification::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_name = Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed Constant Specification"			    
,Converttoinstance()) ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,false) ;


if ( (! v_success.equals("")) )
{

setInformalgroupname( v_success) ;



}

else
{

Dispose() ;



}


   } // End initialize

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return ConstantSpecificationActionFilter.getSingleton();
    }
	  return null;
  }
} // end Constant Specification
