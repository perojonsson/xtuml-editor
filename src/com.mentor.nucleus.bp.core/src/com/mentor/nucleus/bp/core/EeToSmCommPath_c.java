      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.EeToSmCommPath_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_EE_TO_SM_COMM_PATH extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class EeToSmCommPath_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public EeToSmCommPath_c(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_eemod_id,
       java.util.UUID         p_m_ee_id,
       java.util.UUID         p_m_sm_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_eemod_id = IdAssigner.preprocessUUID(p_m_eemod_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
    Object [] key = {m_cpath_id};
    addInstanceToMap(key);
  }
  static public EeToSmCommPath_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_eemod_id,
       java.util.UUID         p_m_ee_id,
       java.util.UUID         p_m_sm_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);
      EeToSmCommPath_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_cpath_id};
          new_inst = (EeToSmCommPath_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_eemod_id = IdAssigner.preprocessUUID(p_m_eemod_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new EeToSmCommPath_c(modelRoot,
p_m_cpath_id,
p_m_eemod_id,
p_m_ee_id,
p_m_sm_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public EeToSmCommPath_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_eemod_id,
       java.util.UUID         p_m_ee_id,
       java.util.UUID         p_m_sm_id){
    InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);
    EeToSmCommPath_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_cpath_id
            };
        source = (EeToSmCommPath_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_eemod_id = IdAssigner.preprocessUUID(p_m_eemod_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    EeToSmCommPath_c new_inst = new EeToSmCommPath_c(modelRoot,
p_m_cpath_id,
p_m_eemod_id,
p_m_ee_id,
p_m_sm_id
);
    return new_inst;
  }
  public EeToSmCommPath_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_cpath_id = IdAssigner.NULL_UUID;   
     m_eemod_id = IdAssigner.NULL_UUID;   
     m_sm_id = IdAssigner.NULL_UUID;   
     m_ee_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_cpath_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_cpath_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_cpath_id !=  p_newKey ){
	
		m_cpath_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof EeToSmCommPath_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof EeToSmCommPath_c)) {
           return false;
       }
       
       EeToSmCommPath_c me = (EeToSmCommPath_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getCpath_id()) || IdAssigner.NULL_UUID.equals(((EeToSmCommPath_c)elem).getCpath_id())) && this != elem)) {
      	return false;
      }
      if (!getCpath_id().equals(((EeToSmCommPath_c)elem).getCpath_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof EeToSmCommPath_c)) {
           return false;
       }
       
       EeToSmCommPath_c me = (EeToSmCommPath_c)elem;
      if (!getCpath_idCachedValue().equals(((EeToSmCommPath_c)elem).getCpath_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_cpath_id ;
  private java.util.UUID         m_eemod_id ;
  private java.util.UUID         m_sm_id ;
  private java.util.UUID         m_ee_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ExternalEntityInModel_c OriginatesFromExternalEntityInModel ;
public void relateAcrossR402To(ExternalEntityInModel_c target)
{
	relateAcrossR402To(target, true);
}
public void relateAcrossR402To(ExternalEntityInModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == OriginatesFromExternalEntityInModel) return;  // already related

    if ( OriginatesFromExternalEntityInModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (OriginatesFromExternalEntityInModel != null) {
    
        OriginatesFromExternalEntityInModel.clearBackPointerR402To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"EeToSmCommPath_c.relateAcrossR402To(ExternalEntityInModel_c target)", 
			"Relate performed across R402 from EE to SM Comm Path to External Entity in Model without unrelate of prior instance.");  
		}
    }
                
    	OriginatesFromExternalEntityInModel = target ;
        m_eemod_id = target.getEemod_id();
        if(IdAssigner.NULL_UUID.equals(target.getEe_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_ee_id = target.getEe_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR402To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "402", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR402From(ExternalEntityInModel_c target)
{
	unrelateAcrossR402From(target, true);
}
public void unrelateAcrossR402From(ExternalEntityInModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (OriginatesFromExternalEntityInModel == null) return;  // already unrelated
	
	if (target != OriginatesFromExternalEntityInModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R402", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR402To(this);
    }
    

      if(OriginatesFromExternalEntityInModel != null) {
      
        m_eemod_id = OriginatesFromExternalEntityInModel.getEemod_id();
        m_ee_id = OriginatesFromExternalEntityInModel.getEe_id();
        if(IdAssigner.NULL_UUID.equals(m_ee_id))
        {
          m_ee_id = OriginatesFromExternalEntityInModel.getEe_idCachedValue();
        }       
        OriginatesFromExternalEntityInModel = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "402", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static EeToSmCommPath_c getOneCA_EESMCOnR402(ExternalEntityInModel_c [] targets)
{
    return getOneCA_EESMCOnR402(targets, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR402(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test)
{
    EeToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_EESMCOnR402(targets[i], test);
        }
    }

    return ret_val;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR402(ExternalEntityInModel_c target)
{
  return getOneCA_EESMCOnR402(target, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR402(ExternalEntityInModel_c target, boolean loadComponent)
{
    return getOneCA_EESMCOnR402(target.getModelRoot(), target, null, loadComponent);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR402(ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_EESMCOnR402(target.getModelRoot(), target, test);
  }
  return null;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR402(ModelRoot modelRoot, ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
	return getOneCA_EESMCOnR402(modelRoot, target, test, true);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR402(ModelRoot modelRoot, ExternalEntityInModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_EESMCOnR402(modelRoot,target,test);
}
private static EeToSmCommPath_c find_getOneCA_EESMCOnR402(ModelRoot modelRoot, ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_OriginatesEeToSmCommPathOriginates_R402) {
	    for ( int i = 0; i < target.backPointer_OriginatesEeToSmCommPathOriginates_R402.size(); ++i ) {
	      EeToSmCommPath_c source = (EeToSmCommPath_c)target.backPointer_OriginatesEeToSmCommPathOriginates_R402.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c [] targets)
{
  return getManyCA_EESMCsOnR402(targets, null);
}
public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c [] targets, boolean loadComponent)
{
  return getManyCA_EESMCsOnR402(targets, null, loadComponent);
}
public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_EESMCsOnR402(targets, test, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new EeToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_OriginatesEeToSmCommPathOriginates_R402) {
	    for (int j = 0; j < targets[i].backPointer_OriginatesEeToSmCommPathOriginates_R402.size(); ++j) {
	      EeToSmCommPath_c source = (EeToSmCommPath_c)targets[i].backPointer_OriginatesEeToSmCommPathOriginates_R402.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	EeToSmCommPath_c[] ret_set = new EeToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new EeToSmCommPath_c[0];
  }
  }

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c target)
{
  return getManyCA_EESMCsOnR402(target, null);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c target, boolean loadComponent)
{
  return getManyCA_EESMCsOnR402(target, null, loadComponent);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c target, ClassQueryInterface_c test)
{
	return getManyCA_EESMCsOnR402(target, test, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR402(ExternalEntityInModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new EeToSmCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_OriginatesEeToSmCommPathOriginates_R402) {
    for (int i = 0; i < target.backPointer_OriginatesEeToSmCommPathOriginates_R402.size(); ++i) {
      EeToSmCommPath_c source = (EeToSmCommPath_c)target.backPointer_OriginatesEeToSmCommPathOriginates_R402.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		EeToSmCommPath_c[] ret_set = new EeToSmCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new EeToSmCommPath_c[0];
	}
  }


  
    
// referring navigation

CommunicationPath_c IsSupertypeCommunicationPath ;
public void relateAcrossR401To(CommunicationPath_c target)
{
	relateAcrossR401To(target, true);
}
public void relateAcrossR401To(CommunicationPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeCommunicationPath) return;  // already related

    if ( IsSupertypeCommunicationPath != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeCommunicationPath != null) {
    
        IsSupertypeCommunicationPath.clearBackPointerR401To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"EeToSmCommPath_c.relateAcrossR401To(CommunicationPath_c target)", 
			"Relate performed across R401 from EE to SM Comm Path to Communication Path without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeCommunicationPath = target ;
        m_cpath_id = target.getCpath_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR401To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "401", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR401From(CommunicationPath_c target)
{
	unrelateAcrossR401From(target, true);
}
public void unrelateAcrossR401From(CommunicationPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeCommunicationPath == null) return;  // already unrelated
	
	if (target != IsSupertypeCommunicationPath) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R401", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR401To(this);
    }
    

      if(IsSupertypeCommunicationPath != null) {
      
        m_cpath_id = IsSupertypeCommunicationPath.getCpath_id();
        IsSupertypeCommunicationPath = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "401", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static EeToSmCommPath_c getOneCA_EESMCOnR401(CommunicationPath_c [] targets)
{
    return getOneCA_EESMCOnR401(targets, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
    EeToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_EESMCOnR401(targets[i], test);
        }
    }

    return ret_val;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR401(CommunicationPath_c target)
{
  return getOneCA_EESMCOnR401(target, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR401(CommunicationPath_c target, boolean loadComponent)
{
    return getOneCA_EESMCOnR401(target.getModelRoot(), target, null, loadComponent);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR401(CommunicationPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_EESMCOnR401(target.getModelRoot(), target, test);
  }
  return null;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test)
{
	return getOneCA_EESMCOnR401(modelRoot, target, test, true);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_EESMCOnR401(modelRoot,target,test);
}
private static EeToSmCommPath_c find_getOneCA_EESMCOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    EeToSmCommPath_c source = (EeToSmCommPath_c)target.backPointer_IsSubtypeEeToSmCommPathIsSubtype_R401;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR401(CommunicationPath_c [] targets)
{
  return getManyCA_EESMCsOnR401(targets, null);
}
public static EeToSmCommPath_c [] getManyCA_EESMCsOnR401(CommunicationPath_c [] targets, boolean loadComponent)
{
  return getManyCA_EESMCsOnR401(targets, null, loadComponent);
}
public static EeToSmCommPath_c [] getManyCA_EESMCsOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_EESMCsOnR401(targets, test, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new EeToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      EeToSmCommPath_c source = (EeToSmCommPath_c)targets[i].backPointer_IsSubtypeEeToSmCommPathIsSubtype_R401;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	EeToSmCommPath_c[] ret_set = new EeToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new EeToSmCommPath_c[0];
  }
  }

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR401(CommunicationPath_c target)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyCA_EESMCsOnR401(targetArray);
  } else {
    EeToSmCommPath_c [] result = new EeToSmCommPath_c [0] ;
  return result ;
}
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR401(CommunicationPath_c target, boolean loadComponent)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyCA_EESMCsOnR401(targetArray, loadComponent);
  } else {
    EeToSmCommPath_c [] result = new EeToSmCommPath_c [0] ;
  return result ;
}
}



  
    
// referring navigation

StateMachine_c ShowsEventCommunicationToStateMachine ;
public void relateAcrossR403To(StateMachine_c target)
{
	relateAcrossR403To(target, true);
}
public void relateAcrossR403To(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ShowsEventCommunicationToStateMachine) return;  // already related

    if ( ShowsEventCommunicationToStateMachine != target ) {
    
    Object oldKey = getInstanceKey();

    if (ShowsEventCommunicationToStateMachine != null) {
    
        ShowsEventCommunicationToStateMachine.clearBackPointerR403To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"EeToSmCommPath_c.relateAcrossR403To(StateMachine_c target)", 
			"Relate performed across R403 from EE to SM Comm Path to State Machine without unrelate of prior instance.");  
		}
    }
                
    	ShowsEventCommunicationToStateMachine = target ;
        m_sm_id = target.getSm_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR403To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "403", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR403From(StateMachine_c target)
{
	unrelateAcrossR403From(target, true);
}
public void unrelateAcrossR403From(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ShowsEventCommunicationToStateMachine == null) return;  // already unrelated
	
	if (target != ShowsEventCommunicationToStateMachine) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R403", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR403To(this);
    }
    

      if(ShowsEventCommunicationToStateMachine != null) {
      
        m_sm_id = ShowsEventCommunicationToStateMachine.getSm_id();
        ShowsEventCommunicationToStateMachine = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "403", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static EeToSmCommPath_c getOneCA_EESMCOnR403(StateMachine_c [] targets)
{
    return getOneCA_EESMCOnR403(targets, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR403(StateMachine_c [] targets, ClassQueryInterface_c test)
{
    EeToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_EESMCOnR403(targets[i], test);
        }
    }

    return ret_val;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR403(StateMachine_c target)
{
  return getOneCA_EESMCOnR403(target, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR403(StateMachine_c target, boolean loadComponent)
{
    return getOneCA_EESMCOnR403(target.getModelRoot(), target, null, loadComponent);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR403(StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_EESMCOnR403(target.getModelRoot(), target, test);
  }
  return null;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR403(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
	return getOneCA_EESMCOnR403(modelRoot, target, test, true);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR403(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_EESMCOnR403(modelRoot,target,test);
}
private static EeToSmCommPath_c find_getOneCA_EESMCOnR403(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403) {
	    for ( int i = 0; i < target.backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.size(); ++i ) {
	      EeToSmCommPath_c source = (EeToSmCommPath_c)target.backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c [] targets)
{
  return getManyCA_EESMCsOnR403(targets, null);
}
public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c [] targets, boolean loadComponent)
{
  return getManyCA_EESMCsOnR403(targets, null, loadComponent);
}
public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_EESMCsOnR403(targets, test, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new EeToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403) {
	    for (int j = 0; j < targets[i].backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.size(); ++j) {
	      EeToSmCommPath_c source = (EeToSmCommPath_c)targets[i].backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	EeToSmCommPath_c[] ret_set = new EeToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new EeToSmCommPath_c[0];
  }
  }

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c target)
{
  return getManyCA_EESMCsOnR403(target, null);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c target, boolean loadComponent)
{
  return getManyCA_EESMCsOnR403(target, null, loadComponent);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c target, ClassQueryInterface_c test)
{
	return getManyCA_EESMCsOnR403(target, test, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR403(StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new EeToSmCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403) {
    for (int i = 0; i < target.backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.size(); ++i) {
      EeToSmCommPath_c source = (EeToSmCommPath_c)target.backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		EeToSmCommPath_c[] ret_set = new EeToSmCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new EeToSmCommPath_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<EeToSmEventComm_c> backPointer_CarriesEeToSmEventCommCarries_R404 = new ArrayList<EeToSmEventComm_c>();

public void setEeToSmEventCommOrderInChildListR404(EeToSmEventComm_c target, int index) {
	unrelateAcrossR404From(target);
	EeToSmEventComm_c[] elements = EeToSmEventComm_c.getManyCA_EESMEsOnR404(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR404From((EeToSmEventComm_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR404To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR404To((EeToSmEventComm_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR404To(EeToSmEventComm_c target)
{
  if (target != null) {
    target.relateAcrossR404To(this, true) ;
  }
}

public void relateAcrossR404To(EeToSmEventComm_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR404To(this, notifyChanges) ;
  }
}

public void setBackPointerR404To(EeToSmEventComm_c target)
{
  	synchronized (backPointer_CarriesEeToSmEventCommCarries_R404) {
		backPointer_CarriesEeToSmEventCommCarries_R404.add(target);
	}
}

public void unrelateAcrossR404From(EeToSmEventComm_c target)
{
  if (target != null) {
    target.unrelateAcrossR404From(this, true) ;
  }
}

public void unrelateAcrossR404From(EeToSmEventComm_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR404From(this, notifyChanges) ;
  }
}

public void clearBackPointerR404To(EeToSmEventComm_c target)
{
  synchronized (backPointer_CarriesEeToSmEventCommCarries_R404) {
	    backPointer_CarriesEeToSmEventCommCarries_R404.remove(target);
	}
}

public static EeToSmCommPath_c getOneCA_EESMCOnR404(EeToSmEventComm_c [] targets)
{
    return getOneCA_EESMCOnR404(targets, null);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR404(EeToSmEventComm_c [] targets, ClassQueryInterface_c test)
{
    return getOneCA_EESMCOnR404(targets, test, true);
}

public static EeToSmCommPath_c getOneCA_EESMCOnR404(EeToSmEventComm_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    EeToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             EeToSmCommPath_c candidate_val = getOneCA_EESMCOnR404(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCA_EESMCOnR404(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static EeToSmCommPath_c getOneCA_EESMCOnR404(EeToSmEventComm_c target)
{
	return getOneCA_EESMCOnR404(target, true);
}
public static EeToSmCommPath_c getOneCA_EESMCOnR404(EeToSmEventComm_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsCarriedByEeToSmCommPath ;
  } else {
    return null;
  }
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCA_EESMCsOnR404(targets, test, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new EeToSmCommPath_c[0];
  
  
  LinkedHashSet<EeToSmCommPath_c> elementsSet = new LinkedHashSet<EeToSmCommPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsCarriedByEeToSmCommPath == null)
	  targets[i].loadProxy();
    EeToSmCommPath_c associate = targets[i].IsCarriedByEeToSmCommPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  EeToSmCommPath_c[] result = new EeToSmCommPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c [] targets)
{
  return getManyCA_EESMCsOnR404(targets, null);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    EeToSmEventComm_c [] targetArray = new EeToSmEventComm_c[1];
    targetArray[0] = target;
    return getManyCA_EESMCsOnR404(targetArray, test, loadComponent);
  } else {
    EeToSmCommPath_c [] result = new EeToSmCommPath_c [0] ;
    return result ;
  }
  
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c target,
    ClassQueryInterface_c test)
{
    return getManyCA_EESMCsOnR404(target, null, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c target)
{
    return getManyCA_EESMCsOnR404(target, null, true);
}

public static EeToSmCommPath_c [] getManyCA_EESMCsOnR404(EeToSmEventComm_c target, boolean loadComponent)
{
    return getManyCA_EESMCsOnR404(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (OriginatesFromExternalEntityInModel == null) {          
      // R402
      ExternalEntityInModel_c relInst57478 = (ExternalEntityInModel_c) baseRoot.getInstanceList(ExternalEntityInModel_c.class).get(new Object[] {m_eemod_id,m_ee_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57478 == null) {
      			relInst57478 = (ExternalEntityInModel_c) Ooaofooa.getDefaultInstance().getInstanceList(ExternalEntityInModel_c.class).get(new Object[] {m_eemod_id,m_ee_id});
      		}
			if (relInst57478 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57478 = (ExternalEntityInModel_c) roots[i].getInstanceList(ExternalEntityInModel_c.class).get(new Object[] {m_eemod_id,m_ee_id});
					if (relInst57478 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57478 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57478) && !isProxy())) {
	      relInst57478.relateAcrossR402To(this, notifyChanges);
	  }
	  }
	}
	          

      // R401
      CommunicationPath_c relInst57479 = (CommunicationPath_c) baseRoot.getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57479 == null) {
      			relInst57479 = (CommunicationPath_c) Ooaofooa.getDefaultInstance().getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
      		}
			if (relInst57479 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57479 = (CommunicationPath_c) roots[i].getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
					if (relInst57479 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57479 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57479) && !isProxy())) {
	      relInst57479.relateAcrossR401To(this, notifyChanges);
	  }
	  }
	          

	if (ShowsEventCommunicationToStateMachine == null) {          
      // R403
      StateMachine_c relInst57480 = (StateMachine_c) baseRoot.getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57480 == null) {
      			relInst57480 = (StateMachine_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
      		}
			if (relInst57480 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57480 = (StateMachine_c) roots[i].getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
					if (relInst57480 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57480 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57480) && !isProxy())) {
	      relInst57480.relateAcrossR403To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R402
      // S_EEM
		  inst=OriginatesFromExternalEntityInModel;
			unrelateAcrossR402From(OriginatesFromExternalEntityInModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R401
      // CA_COMM
		  inst=IsSupertypeCommunicationPath;
			unrelateAcrossR401From(IsSupertypeCommunicationPath, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R403
      // SM_SM
		  inst=ShowsEventCommunicationToStateMachine;
			unrelateAcrossR403From(ShowsEventCommunicationToStateMachine, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final EeToSmCommPath_c inst = (EeToSmCommPath_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static EeToSmCommPath_c EeToSmCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		EeToSmCommPath_c result=findEeToSmCommPathInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,EeToSmCommPath_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findEeToSmCommPathInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static EeToSmCommPath_c findEeToSmCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				EeToSmCommPath_c x = (EeToSmCommPath_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static EeToSmCommPath_c EeToSmCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return EeToSmCommPathInstance(modelRoot,test,true);
  }
  
  public static EeToSmCommPath_c EeToSmCommPathInstance(ModelRoot modelRoot)
  {
	 return EeToSmCommPathInstance(modelRoot,null,true);
  }

  public static EeToSmCommPath_c [] EeToSmCommPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, EeToSmCommPath_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(EeToSmCommPath_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					EeToSmCommPath_c x = (EeToSmCommPath_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				EeToSmCommPath_c[] ret_set = new EeToSmCommPath_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new EeToSmCommPath_c[0];
			}		
		} 
  }
  public static EeToSmCommPath_c [] EeToSmCommPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  EeToSmCommPathInstances(modelRoot,test,true);
  }
  public static EeToSmCommPath_c [] EeToSmCommPathInstances(ModelRoot modelRoot)
  {
	return EeToSmCommPathInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the EE to SM Comm Path.dispose call: ";
	ExternalEntityInModel_c testR402Inst = ExternalEntityInModel_c.getOneS_EEMOnR402(this, false);

	if ( testR402Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "402 ";
	}
	CommunicationPath_c testR401Inst2 = CommunicationPath_c.getOneCA_COMMOnR401(this, false);

	if ( testR401Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "401 ";
	}
	EeToSmEventComm_c testR404Inst = EeToSmEventComm_c.getOneCA_EESMEOnR404(this, false);

	if ( testR404Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "404 ";	
	}
	StateMachine_c testR403Inst = StateMachine_c.getOneSM_SMOnR403(this, false);

	if ( testR403Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "403 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "EE to SM Comm Path", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("cpath_id")){
         return true;
      }
      if(attributeName.equals("eemod_id")){
         return true;
      }
      if(attributeName.equals("sm_id")){
         return true;
      }
      if(attributeName.equals("ee_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getCpath_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getCpath_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getCpath_idLongBased()
  {
    if ( IsSupertypeCommunicationPath != null )
    {
      return IsSupertypeCommunicationPath.getCpath_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getCpath_id()
  {
    if ( IsSupertypeCommunicationPath != null )
    {
      return IsSupertypeCommunicationPath.getCpath_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeCommunicationPath != null );
 
 }                  

  public java.util.UUID getCpath_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_cpath_id) )
      return m_cpath_id;
    else
      return getCpath_id();
  }
  
  public void setCpath_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_cpath_id)){
	        return;
	    }
	}else if(m_cpath_id != null){
	    if(m_cpath_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Cpath_id", m_cpath_id, newValue,true); 
   m_cpath_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEemod_idLongBased()
  {
    if ( OriginatesFromExternalEntityInModel != null )
    {
      return OriginatesFromExternalEntityInModel.getEemod_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEemod_id()
  {
    if ( OriginatesFromExternalEntityInModel != null )
    {
      return OriginatesFromExternalEntityInModel.getEemod_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEemod_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_eemod_id) )
      return m_eemod_id;
    else
      return getEemod_id();
  }
  
  public void setEemod_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_eemod_id)){
	        return;
	    }
	}else if(m_eemod_id != null){
	    if(m_eemod_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Eemod_id", m_eemod_id, newValue,true); 
   m_eemod_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSm_idLongBased()
  {
    if ( ShowsEventCommunicationToStateMachine != null )
    {
      return ShowsEventCommunicationToStateMachine.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSm_id()
  {
    if ( ShowsEventCommunicationToStateMachine != null )
    {
      return ShowsEventCommunicationToStateMachine.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sm_id) )
      return m_sm_id;
    else
      return getSm_id();
  }
  
  public void setSm_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_sm_id)){
	        return;
	    }
	}else if(m_sm_id != null){
	    if(m_sm_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id", m_sm_id, newValue,true); 
   m_sm_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEe_idLongBased()
  {
    if ( OriginatesFromExternalEntityInModel != null )
    {
      return OriginatesFromExternalEntityInModel.getEe_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEe_id()
  {
    if ( OriginatesFromExternalEntityInModel != null )
    {
      return OriginatesFromExternalEntityInModel.getEe_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEe_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_ee_id) )
      return m_ee_id;
    else
      return getEe_id();
  }
  
  public void setEe_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_ee_id)){
	        return;
	    }
	}else if(m_ee_id != null){
	    if(m_ee_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ee_id", m_ee_id, newValue,true); 
   m_ee_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "EE to SM Comm Path", //$NON-NLS-1$
	  " Operation entered: EE to SM Comm Path::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     EeToSmCommPath_c [] objs = EeToSmCommPath_c.EeToSmCommPathInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "EE to SM Comm Path", //$NON-NLS-1$
	  " Operation entered: EE to SM Comm Path::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class EeToSmCommPath_c_test57482_c implements ClassQueryInterface_c
    {
	  EeToSmCommPath_c_test57482_c( java.util.UUID            p57483 ) {
	  m_p57483 = p57483;
	  }
	  private java.util.UUID             m_p57483; 
	  public boolean evaluate (Object candidate)
	  {
	      EeToSmCommPath_c selected = (EeToSmCommPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCpath_id().equals(m_p57483));
	      return retval;
	  }
    }

    EeToSmCommPath_c [] objs57481 = 
    EeToSmCommPath_c.EeToSmCommPathInstances(modelRoot, new EeToSmCommPath_c_test57482_c(getCpath_id())) ;

    if ( (  (objs57481.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "EE to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: EE to SM Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57481.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: EE to SM Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57481.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57481.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "EE to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: EE to SM Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57481.length )  + " CPath_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: EE to SM Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57481.length )  + " CPath_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // EE to SM Comm Path is a subtype in association: rel.Numb = 401
          // The supertype class is: Communication Path
    class CommunicationPath_c_test57487_c implements ClassQueryInterface_c
    {
	  CommunicationPath_c_test57487_c( java.util.UUID            p57488 ) {
	  m_p57488 = p57488;
	  }
	  private java.util.UUID             m_p57488; 
	  public boolean evaluate (Object candidate)
	  {
	      CommunicationPath_c selected = (CommunicationPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCpath_id().equals(m_p57488));
	      return retval;
	  }
    }

    CommunicationPath_c [] objs57486 = 
    CommunicationPath_c.CommunicationPathInstances(modelRoot, new CommunicationPath_c_test57487_c(getCpath_id())) ;

    if ( (  (objs57486.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "EE to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: EE to SM Comm Path: Association: 401: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57486.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: EE to SM Comm Path: Association: 401: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57486.length )  , e); 
      }
      retval = false;

    }

          // EE to SM Comm Path is a referring class in association: rel.Numb = 402
          // The participating class is: External Entity in Model
    class ExternalEntityInModel_c_test57490_c implements ClassQueryInterface_c
    {
	  ExternalEntityInModel_c_test57490_c( java.util.UUID            p57491, java.util.UUID            p57492 ) {
	       m_p57491 = p57491; 
m_p57492 = p57492;
	  }
	  private java.util.UUID             m_p57491; private java.util.UUID             m_p57492; 
	  public boolean evaluate (Object candidate)
	  {
	      ExternalEntityInModel_c selected = (ExternalEntityInModel_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEemod_id().equals(m_p57491)) & (selected.getEe_id().equals(m_p57492));
	      return retval;
	  }
    }

    ExternalEntityInModel_c [] objs57489 = 
    ExternalEntityInModel_c.ExternalEntityInModelInstances(modelRoot, new ExternalEntityInModel_c_test57490_c(getEemod_id(), getEe_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57489.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "EE to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: EE to SM Comm Path: Association: 402: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57489.length )  + " EEmod_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: EE to SM Comm Path: Association: 402: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57489.length )  + " EEmod_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // EE to SM Comm Path is a referring class in association: rel.Numb = 403
          // The participating class is: State Machine
    class StateMachine_c_test57494_c implements ClassQueryInterface_c
    {
	  StateMachine_c_test57494_c( java.util.UUID            p57495 ) {
	  m_p57495 = p57495;
	  }
	  private java.util.UUID             m_p57495; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachine_c selected = (StateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p57495));
	      return retval;
	  }
    }

    StateMachine_c [] objs57493 = 
    StateMachine_c.StateMachineInstances(modelRoot, new StateMachine_c_test57494_c(getSm_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57493.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "EE to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: EE to SM Comm Path: Association: 403: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57493.length )  + " SM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: EE to SM Comm Path: Association: 403: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57493.length )  + " SM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // EE to SM Comm Path is a participating class in association: rel.Numb = 404
             // Object: EE to SM Event Comm
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "EE to SM Comm Path", " Operation entered: EeToSmCommPath::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
EeToSmEventComm_c [] v_eesmes = EeToSmEventComm_c.getManyCA_EESMEsOnR404(this);


EeToSmEventComm_c  v_eesme = null;
for ( int i55398 = 0; i55398 < v_eesmes.length; i55398++)
{
  v_eesme = v_eesmes[i55398] ;

StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR405(v_eesme);


if (v_eesme != null) {
v_eesme.unrelateAcrossR405From(v_evt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_eesme != null) {
v_eesme.unrelateAcrossR404From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_eesme != null) {
// get the location of this element in the instance list
// before deleting
if ( v_eesme.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_eesme));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

ExternalEntityInModel_c v_eem = ExternalEntityInModel_c.getOneS_EEMOnR402(this);


this.unrelateAcrossR402From(v_eem);


StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR403(this);


this.unrelateAcrossR403From(v_sm);


CommunicationPath_c v_cp = CommunicationPath_c.getOneCA_COMMOnR401(this);


this.unrelateAcrossR401From(v_cp);


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end EE to SM Comm Path
