package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.BinaryOperation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_BINARY_OPERATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class BinaryOperation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public BinaryOperation_c(ModelRoot modelRoot, java.util.UUID p_m_value_id,
			java.util.UUID p_m_right_value_id,
			java.util.UUID p_m_left_value_id, String p_m_operator) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_right_value_id = IdAssigner.preprocessUUID(p_m_right_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_left_value_id = IdAssigner.preprocessUUID(p_m_left_value_id);
		m_operator = p_m_operator;

		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}
	static public BinaryOperation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_right_value_id,
			java.util.UUID p_m_left_value_id, String p_m_operator,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);
		BinaryOperation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			new_inst = (BinaryOperation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_right_value_id = IdAssigner
						.preprocessUUID(p_m_right_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_left_value_id = IdAssigner
						.preprocessUUID(p_m_left_value_id);
				new_inst.m_operator = p_m_operator;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new BinaryOperation_c(modelRoot, p_m_value_id,
					p_m_right_value_id, p_m_left_value_id, p_m_operator);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public BinaryOperation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_right_value_id,
			java.util.UUID p_m_left_value_id, String p_m_operator) {
		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);
		BinaryOperation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			source = (BinaryOperation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_right_value_id = IdAssigner
						.preprocessUUID(p_m_right_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_left_value_id = IdAssigner
						.preprocessUUID(p_m_left_value_id);
				source.m_operator = p_m_operator;

				return source;
			}
		}
		// there is no instance matching the id
		BinaryOperation_c new_inst = new BinaryOperation_c(modelRoot,
				p_m_value_id, p_m_right_value_id, p_m_left_value_id,
				p_m_operator);
		return new_inst;
	}
	public BinaryOperation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_right_value_id = IdAssigner.NULL_UUID;
		m_left_value_id = IdAssigner.NULL_UUID;
		m_operator = "";
		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof BinaryOperation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof BinaryOperation_c)) {
			return false;
		}

		BinaryOperation_c me = (BinaryOperation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
						.equals(((BinaryOperation_c) elem).getValue_id())) && this != elem)) {
			return false;
		}
		if (!getValue_id().equals(((BinaryOperation_c) elem).getValue_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof BinaryOperation_c)) {
			return false;
		}

		BinaryOperation_c me = (BinaryOperation_c) elem;
		if (!getValue_idCachedValue().equals(
				((BinaryOperation_c) elem).getValue_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_right_value_id;
	private java.util.UUID m_left_value_id;
	private String m_operator;

	// declare association references from this class

	// referring navigation

	Value_c HasRightValue;
	public void relateAcrossR803To(Value_c target) {
		relateAcrossR803To(target, true);
	}
	public void relateAcrossR803To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasRightValue)
			return; // already related

		if (HasRightValue != target) {

			Object oldKey = getInstanceKey();

			if (HasRightValue != null) {

				HasRightValue.clearBackPointerR803To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"BinaryOperation_c.relateAcrossR803To(Value_c target)",
									"Relate performed across R803 from Binary Operation to Value without unrelate of prior instance.");
				}
			}

			HasRightValue = target;
			m_right_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR803To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR803From(Value_c target) {
		unrelateAcrossR803From(target, true);
	}
	public void unrelateAcrossR803From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (HasRightValue == null)
			return; // already unrelated

		if (target != HasRightValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R803",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR803To(this);
		}

		if (HasRightValue != null) {

			m_right_value_id = HasRightValue.getValue_id();
			HasRightValue = null;
			target.removeRef();
		}
	}

	public static BinaryOperation_c getOneV_BINOnR803(Value_c[] targets) {
		return getOneV_BINOnR803(targets, null);
	}

	public static BinaryOperation_c getOneV_BINOnR803(Value_c[] targets,
			ClassQueryInterface_c test) {
		BinaryOperation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_BINOnR803(targets[i], test);
			}
		}

		return ret_val;
	}

	public static BinaryOperation_c getOneV_BINOnR803(Value_c target) {
		return getOneV_BINOnR803(target, null);
	}

	public static BinaryOperation_c getOneV_BINOnR803(Value_c target,
			boolean loadComponent) {
		return getOneV_BINOnR803(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static BinaryOperation_c getOneV_BINOnR803(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_BINOnR803(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static BinaryOperation_c getOneV_BINOnR803(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_BINOnR803(modelRoot, target, test, true);
	}

	public static BinaryOperation_c getOneV_BINOnR803(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_BINOnR803(modelRoot, target, test);
	}
	private static BinaryOperation_c find_getOneV_BINOnR803(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			BinaryOperation_c source = (BinaryOperation_c) target.backPointer_IsRightOperandToBinaryOperationIsRightOperandTo_R803;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static BinaryOperation_c[] getManyV_BINsOnR803(Value_c[] targets) {
		return getManyV_BINsOnR803(targets, null);
	}
	public static BinaryOperation_c[] getManyV_BINsOnR803(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_BINsOnR803(targets, null, loadComponent);
	}
	public static BinaryOperation_c[] getManyV_BINsOnR803(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_BINsOnR803(targets, test, true);
	}

	public static BinaryOperation_c[] getManyV_BINsOnR803(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new BinaryOperation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			BinaryOperation_c source = (BinaryOperation_c) targets[i].backPointer_IsRightOperandToBinaryOperationIsRightOperandTo_R803;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			BinaryOperation_c[] ret_set = new BinaryOperation_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new BinaryOperation_c[0];
		}
	}

	public static BinaryOperation_c[] getManyV_BINsOnR803(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_BINsOnR803(targetArray);
		} else {
			BinaryOperation_c[] result = new BinaryOperation_c[0];
			return result;
		}
	}

	public static BinaryOperation_c[] getManyV_BINsOnR803(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_BINsOnR803(targetArray, loadComponent);
		} else {
			BinaryOperation_c[] result = new BinaryOperation_c[0];
			return result;
		}
	}

	// referring navigation

	Value_c HasLeftValue;
	public void relateAcrossR802To(Value_c target) {
		relateAcrossR802To(target, true);
	}
	public void relateAcrossR802To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasLeftValue)
			return; // already related

		if (HasLeftValue != target) {

			Object oldKey = getInstanceKey();

			if (HasLeftValue != null) {

				HasLeftValue.clearBackPointerR802To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"BinaryOperation_c.relateAcrossR802To(Value_c target)",
									"Relate performed across R802 from Binary Operation to Value without unrelate of prior instance.");
				}
			}

			HasLeftValue = target;
			m_left_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR802To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR802From(Value_c target) {
		unrelateAcrossR802From(target, true);
	}
	public void unrelateAcrossR802From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (HasLeftValue == null)
			return; // already unrelated

		if (target != HasLeftValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R802",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR802To(this);
		}

		if (HasLeftValue != null) {

			m_left_value_id = HasLeftValue.getValue_id();
			HasLeftValue = null;
			target.removeRef();
		}
	}

	public static BinaryOperation_c getOneV_BINOnR802(Value_c[] targets) {
		return getOneV_BINOnR802(targets, null);
	}

	public static BinaryOperation_c getOneV_BINOnR802(Value_c[] targets,
			ClassQueryInterface_c test) {
		BinaryOperation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_BINOnR802(targets[i], test);
			}
		}

		return ret_val;
	}

	public static BinaryOperation_c getOneV_BINOnR802(Value_c target) {
		return getOneV_BINOnR802(target, null);
	}

	public static BinaryOperation_c getOneV_BINOnR802(Value_c target,
			boolean loadComponent) {
		return getOneV_BINOnR802(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static BinaryOperation_c getOneV_BINOnR802(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_BINOnR802(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static BinaryOperation_c getOneV_BINOnR802(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_BINOnR802(modelRoot, target, test, true);
	}

	public static BinaryOperation_c getOneV_BINOnR802(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_BINOnR802(modelRoot, target, test);
	}
	private static BinaryOperation_c find_getOneV_BINOnR802(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			BinaryOperation_c source = (BinaryOperation_c) target.backPointer_IsLeftOperandToBinaryOperationIsLeftOperandTo_R802;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static BinaryOperation_c[] getManyV_BINsOnR802(Value_c[] targets) {
		return getManyV_BINsOnR802(targets, null);
	}
	public static BinaryOperation_c[] getManyV_BINsOnR802(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_BINsOnR802(targets, null, loadComponent);
	}
	public static BinaryOperation_c[] getManyV_BINsOnR802(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_BINsOnR802(targets, test, true);
	}

	public static BinaryOperation_c[] getManyV_BINsOnR802(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new BinaryOperation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			BinaryOperation_c source = (BinaryOperation_c) targets[i].backPointer_IsLeftOperandToBinaryOperationIsLeftOperandTo_R802;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			BinaryOperation_c[] ret_set = new BinaryOperation_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new BinaryOperation_c[0];
		}
	}

	public static BinaryOperation_c[] getManyV_BINsOnR802(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_BINsOnR802(targetArray);
		} else {
			BinaryOperation_c[] result = new BinaryOperation_c[0];
			return result;
		}
	}

	public static BinaryOperation_c[] getManyV_BINsOnR802(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_BINsOnR802(targetArray, loadComponent);
		} else {
			BinaryOperation_c[] result = new BinaryOperation_c[0];
			return result;
		}
	}

	// referring navigation

	Value_c IsSupertypeValue;
	public void relateAcrossR801To(Value_c target) {
		relateAcrossR801To(target, true);
	}
	public void relateAcrossR801To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeValue)
			return; // already related

		if (IsSupertypeValue != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeValue != null) {

				IsSupertypeValue.clearBackPointerR801To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"BinaryOperation_c.relateAcrossR801To(Value_c target)",
									"Relate performed across R801 from Binary Operation to Value without unrelate of prior instance.");
				}
			}

			IsSupertypeValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR801To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR801From(Value_c target) {
		unrelateAcrossR801From(target, true);
	}
	public void unrelateAcrossR801From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeValue == null)
			return; // already unrelated

		if (target != IsSupertypeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R801",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR801To(this);
		}

		if (IsSupertypeValue != null) {

			m_value_id = IsSupertypeValue.getValue_id();
			IsSupertypeValue = null;
			target.removeRef();
		}
	}

	public static BinaryOperation_c getOneV_BINOnR801(Value_c[] targets) {
		return getOneV_BINOnR801(targets, null);
	}

	public static BinaryOperation_c getOneV_BINOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		BinaryOperation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_BINOnR801(targets[i], test);
			}
		}

		return ret_val;
	}

	public static BinaryOperation_c getOneV_BINOnR801(Value_c target) {
		return getOneV_BINOnR801(target, null);
	}

	public static BinaryOperation_c getOneV_BINOnR801(Value_c target,
			boolean loadComponent) {
		return getOneV_BINOnR801(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static BinaryOperation_c getOneV_BINOnR801(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_BINOnR801(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static BinaryOperation_c getOneV_BINOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_BINOnR801(modelRoot, target, test, true);
	}

	public static BinaryOperation_c getOneV_BINOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_BINOnR801(modelRoot, target, test);
	}
	private static BinaryOperation_c find_getOneV_BINOnR801(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			BinaryOperation_c source = (BinaryOperation_c) target.backPointer_IsSubtypeBinaryOperationIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static BinaryOperation_c[] getManyV_BINsOnR801(Value_c[] targets) {
		return getManyV_BINsOnR801(targets, null);
	}
	public static BinaryOperation_c[] getManyV_BINsOnR801(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_BINsOnR801(targets, null, loadComponent);
	}
	public static BinaryOperation_c[] getManyV_BINsOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_BINsOnR801(targets, test, true);
	}

	public static BinaryOperation_c[] getManyV_BINsOnR801(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new BinaryOperation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			BinaryOperation_c source = (BinaryOperation_c) targets[i].backPointer_IsSubtypeBinaryOperationIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			BinaryOperation_c[] ret_set = new BinaryOperation_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new BinaryOperation_c[0];
		}
	}

	public static BinaryOperation_c[] getManyV_BINsOnR801(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_BINsOnR801(targetArray);
		} else {
			BinaryOperation_c[] result = new BinaryOperation_c[0];
			return result;
		}
	}

	public static BinaryOperation_c[] getManyV_BINsOnR801(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_BINsOnR801(targetArray, loadComponent);
		} else {
			BinaryOperation_c[] result = new BinaryOperation_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (HasRightValue == null) {
			// R803
			Value_c relInst38284 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_right_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38284 == null) {
				relInst38284 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_right_value_id});
			}
			if (relInst38284 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38284 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_right_value_id});
					if (relInst38284 != null)
						break;
				}
			}
			//synchronized
			if (relInst38284 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38284) && !isProxy())) {
					relInst38284.relateAcrossR803To(this, notifyChanges);
				}
			}
		}

		if (HasLeftValue == null) {
			// R802
			Value_c relInst38285 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_left_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38285 == null) {
				relInst38285 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_left_value_id});
			}
			if (relInst38285 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38285 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_left_value_id});
					if (relInst38285 != null)
						break;
				}
			}
			//synchronized
			if (relInst38285 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38285) && !isProxy())) {
					relInst38285.relateAcrossR802To(this, notifyChanges);
				}
			}
		}

		// R801
		Value_c relInst38286 = (Value_c) baseRoot
				.getInstanceList(Value_c.class).get(new Object[]{m_value_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38286 == null) {
			relInst38286 = (Value_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Value_c.class)
					.get(new Object[]{m_value_id});
		}
		if (relInst38286 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38286 = (Value_c) roots[i]
						.getInstanceList(Value_c.class).get(
								new Object[]{m_value_id});
				if (relInst38286 != null)
					break;
			}
		}
		//synchronized
		if (relInst38286 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38286) && !isProxy())) {
				relInst38286.relateAcrossR801To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R803
		// V_VAL
		inst = HasRightValue;
		unrelateAcrossR803From(HasRightValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R802
		// V_VAL
		inst = HasLeftValue;
		unrelateAcrossR802From(HasLeftValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R801
		// V_VAL
		inst = IsSupertypeValue;
		unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(BinaryOperation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final BinaryOperation_c inst = (BinaryOperation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static BinaryOperation_c BinaryOperationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		BinaryOperation_c result = findBinaryOperationInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static BinaryOperation_c findBinaryOperationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				BinaryOperation_c x = (BinaryOperation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static BinaryOperation_c BinaryOperationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return BinaryOperationInstance(modelRoot, test, true);
	}

	public static BinaryOperation_c BinaryOperationInstance(ModelRoot modelRoot) {
		return BinaryOperationInstance(modelRoot, null, true);
	}

	public static BinaryOperation_c[] BinaryOperationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(BinaryOperation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				BinaryOperation_c x = (BinaryOperation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				BinaryOperation_c[] ret_set = new BinaryOperation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new BinaryOperation_c[0];
			}
		}
	}
	public static BinaryOperation_c[] BinaryOperationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return BinaryOperationInstances(modelRoot, test, true);
	}
	public static BinaryOperation_c[] BinaryOperationInstances(
			ModelRoot modelRoot) {
		return BinaryOperationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Binary Operation.dispose call: ";
		Value_c testR803Inst = Value_c.getOneV_VALOnR803(this, false);

		if (testR803Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "803 ";
		}
		Value_c testR802Inst = Value_c.getOneV_VALOnR802(this, false);

		if (testR802Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "802 ";
		}
		Value_c testR801Inst16 = Value_c.getOneV_VALOnR801(this, false);

		if (testR801Inst16 != null) {
			delete_error = true;
			errorMsg = errorMsg + "801 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Binary Operation",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("right_value_id")) {
			return true;
		}
		if (attributeName.equals("left_value_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeValue != null);

	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getRight_value_idLongBased() {
		if (HasRightValue != null) {
			return HasRightValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRight_value_id() {
		if (HasRightValue != null) {
			return HasRightValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRight_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_right_value_id))
			return m_right_value_id;
		else
			return getRight_value_id();
	}

	public void setRight_value_id(java.util.UUID newValue) {
		m_right_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getLeft_value_idLongBased() {
		if (HasLeftValue != null) {
			return HasLeftValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getLeft_value_id() {
		if (HasLeftValue != null) {
			return HasLeftValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getLeft_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_left_value_id))
			return m_left_value_id;
		else
			return getLeft_value_id();
	}

	public void setLeft_value_id(java.util.UUID newValue) {
		m_left_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getOperator() {
		return m_operator;
	}

	public void setOperator(String newValue) {
		m_operator = newValue;
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation", //$NON-NLS-1$
				" Operation entered: Binary Operation::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		BinaryOperation_c[] objs = BinaryOperation_c.BinaryOperationInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation", //$NON-NLS-1$
				" Operation entered: Binary Operation::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class BinaryOperation_c_test38288_c implements ClassQueryInterface_c {
			BinaryOperation_c_test38288_c(java.util.UUID p38289) {
				m_p38289 = p38289;
			}
			private java.util.UUID m_p38289;
			public boolean evaluate(Object candidate) {
				BinaryOperation_c selected = (BinaryOperation_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38289));
				return retval;
			}
		}

		BinaryOperation_c[] objs38287 = BinaryOperation_c
				.BinaryOperationInstances(modelRoot,
						new BinaryOperation_c_test38288_c(getValue_id()));

		if (((objs38287.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Binary Operation", //$NON-NLS-1$
								"Consistency: Object: Binary Operation: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38287.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Binary Operation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs38287.length), e);
			}
			retval = false;

		}

		if (((objs38287.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Binary Operation", //$NON-NLS-1$
								"Consistency: Object: Binary Operation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38287.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Binary Operation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38287.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Binary Operation is a subtype in association: rel.Numb = 801
		// The supertype class is: Value
		class Value_c_test38293_c implements ClassQueryInterface_c {
			Value_c_test38293_c(java.util.UUID p38294) {
				m_p38294 = p38294;
			}
			private java.util.UUID m_p38294;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38294));
				return retval;
			}
		}

		Value_c[] objs38292 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38293_c(getValue_id()));

		if (((objs38292.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Binary Operation", //$NON-NLS-1$
								"Consistency: Object: Binary Operation: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38292.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Binary Operation: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38292.length), e);
			}
			retval = false;

		}

		// Binary Operation is a referring class in association: rel.Numb = 803
		// The participating class is: Value
		class Value_c_test38296_c implements ClassQueryInterface_c {
			Value_c_test38296_c(java.util.UUID p38297) {
				m_p38297 = p38297;
			}
			private java.util.UUID m_p38297;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38297));
				return retval;
			}
		}

		Value_c[] objs38295 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38296_c(getRight_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38295.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Binary Operation", //$NON-NLS-1$
								"Consistency: Object: Binary Operation: Association: 803: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38295.length)
										+ " Right_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Binary Operation: Association: 803: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38295.length)
										+ " Right_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Binary Operation is a referring class in association: rel.Numb = 802
		// The participating class is: Value
		class Value_c_test38299_c implements ClassQueryInterface_c {
			Value_c_test38299_c(java.util.UUID p38300) {
				m_p38300 = p38300;
			}
			private java.util.UUID m_p38300;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38300));
				return retval;
			}
		}

		Value_c[] objs38298 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38299_c(getLeft_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38298.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Binary Operation", //$NON-NLS-1$
								"Consistency: Object: Binary Operation: Association: 802: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38298.length)
										+ " Left_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Binary Operation: Association: 802: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38298.length)
										+ " Left_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Value_c v_lop = Value_c.getOneV_VALOnR802(this);

		if (((v_lop != null))) {

			if (v_lop != null) {
				v_lop.unrelateAcrossR802From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_lop != null) {
				v_lop.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Value_c v_rop = Value_c.getOneV_VALOnR803(this);

		if (((v_rop != null))) {

			if (v_rop != null) {
				v_rop.unrelateAcrossR803From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_rop != null) {
				v_rop.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		delete();

	} // End dispose
	public Object Getvalue(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c
				.getOneACT_BLKOnR826(Value_c.getOneV_VALOnR801(this)));

		DataType_c v_dt = DataType_c.getOneS_DTOnR820(Value_c
				.getOneV_VALOnR801(this));

		String v_coreDataTypeName = v_dt.Getcoredatatypename();

		if ((v_coreDataTypeName.equals("boolean"))) {

			return Gd_c.Boolean_to_instance(Getboolean(p_Stack_frame_id));

		}

		else if ((v_coreDataTypeName.equals("integer"))) {

			return Gd_c.Int_to_instance(Getinteger(p_Stack_frame_id));

		}

		else if ((v_coreDataTypeName.equals("real"))) {

			return Gd_c.Real_to_instance(Getreal(p_Stack_frame_id));

		}

		else if ((v_coreDataTypeName.equals("string"))) {

			return Gd_c.String_to_instance(Getstring(p_Stack_frame_id));

		}

		else {

			String v_error_message = "Error: Did not find a supported data type "
					+ v_coreDataTypeName
					+ " in attempt to retrieve value in binary operation.";

			User_c.Logerror(v_error_message, v_body.Getpath());

		}

		return Gd_c.String_to_instance("Error");

	} // End getValue
	public boolean Getboolean(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Getboolean");
		final ModelRoot modelRoot = getModelRoot();
		return false;

	} // End getBoolean
	public String Getstring(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Getstring");
		final ModelRoot modelRoot = getModelRoot();
		return "";

	} // End getString
	public int Getinteger(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Getinteger");
		final ModelRoot modelRoot = getModelRoot();
		return 0;

	} // End getInteger
	public float Getreal(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Getreal");
		final ModelRoot modelRoot = getModelRoot();
		return 0.0f;

	} // End getReal
	public boolean Compareinstrefsets(final java.util.UUID p_Lrtval,
			final java.util.UUID p_Rrtval) {
		Ooaofooa.log.println(ILogger.OPERATION, "Binary Operation",
				" Operation entered: BinaryOperation::Compareinstrefsets");
		// Mentor Graphics Verifier-specific Implementation
		return false;
	} // End compareInstRefSets

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Binary Operation
