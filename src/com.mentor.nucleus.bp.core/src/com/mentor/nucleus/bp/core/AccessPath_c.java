package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.AccessPath_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACCESS_PATH extends genericEvent_c {
	public abstract int getEvtcode();
}

public class AccessPath_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public AccessPath_c(ModelRoot modelRoot, java.util.UUID p_m_apath_id,
			java.util.UUID p_m_ss_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_iobj_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
		//extract 28 bit value only            
		m_apath_idLongBased = 0xfffffff & p_m_apath_id
				.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);

		setUniqueId(m_apath_id);
		Object[] key = {m_apath_id};
		addInstanceToMap(key);
	}
	static public AccessPath_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_ss_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_iobj_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);
		AccessPath_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_apath_id};
			new_inst = (AccessPath_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
				//extract 28 bit value only            
				new_inst.m_apath_idLongBased = 0xfffffff & p_m_apath_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new AccessPath_c(modelRoot, p_m_apath_id, p_m_ss_id,
					p_m_sm_id, p_m_iobj_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public AccessPath_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_apath_id, java.util.UUID p_m_ss_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_iobj_id) {
		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);
		AccessPath_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_apath_id};
			source = (AccessPath_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
				//extract 28 bit value only            
				source.m_apath_idLongBased = 0xfffffff & p_m_apath_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);

				return source;
			}
		}
		// there is no instance matching the id
		AccessPath_c new_inst = new AccessPath_c(modelRoot, p_m_apath_id,
				p_m_ss_id, p_m_sm_id, p_m_iobj_id);
		return new_inst;
	}
	public AccessPath_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_apath_id = idAssigner.createUUID();
		m_ss_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_iobj_id = IdAssigner.NULL_UUID;
		setUniqueId(m_apath_id);
		Object[] key = {m_apath_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_apath_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_apath_id != p_newKey) {

			m_apath_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof AccessPath_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof AccessPath_c)) {
			return false;
		}

		AccessPath_c me = (AccessPath_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getApath_id()) || IdAssigner.NULL_UUID
						.equals(((AccessPath_c) elem).getApath_id())) && this != elem)) {
			return false;
		}
		if (!getApath_id().equals(((AccessPath_c) elem).getApath_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof AccessPath_c)) {
			return false;
		}

		AccessPath_c me = (AccessPath_c) elem;
		if (!getApath_id().equals(((AccessPath_c) elem).getApath_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_apath_id;
	private long m_apath_idLongBased;
	private java.util.UUID m_ss_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_iobj_id;

	// declare association references from this class

	// referring navigation

	Subsystem_c AbstractsSynchronousDataAccessBetweenClassesInSubsystem;
	public void relateAcrossR6To(Subsystem_c target) {
		relateAcrossR6To(target, true);
	}
	public void relateAcrossR6To(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == AbstractsSynchronousDataAccessBetweenClassesInSubsystem)
			return; // already related

		if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem != target) {

			Object oldKey = getInstanceKey();

			if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem != null) {

				AbstractsSynchronousDataAccessBetweenClassesInSubsystem
						.clearBackPointerR6To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AccessPath_c.relateAcrossR6To(Subsystem_c target)",
									"Relate performed across R6 from Access Path to Subsystem without unrelate of prior instance.");
				}
			}

			AbstractsSynchronousDataAccessBetweenClassesInSubsystem = target;
			m_ss_id = target.getSs_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR6To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "6", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR6From(Subsystem_c target) {
		unrelateAcrossR6From(target, true);
	}
	public void unrelateAcrossR6From(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem == null)
			return; // already unrelated

		if (target != AbstractsSynchronousDataAccessBetweenClassesInSubsystem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R6", e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR6To(this);
		}

		if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem != null) {

			m_ss_id = AbstractsSynchronousDataAccessBetweenClassesInSubsystem
					.getSs_id();
			AbstractsSynchronousDataAccessBetweenClassesInSubsystem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "6", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AccessPath_c getOneCA_ACCOnR6(Subsystem_c[] targets) {
		return getOneCA_ACCOnR6(targets, null);
	}

	public static AccessPath_c getOneCA_ACCOnR6(Subsystem_c[] targets,
			ClassQueryInterface_c test) {
		AccessPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_ACCOnR6(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AccessPath_c getOneCA_ACCOnR6(Subsystem_c target) {
		return getOneCA_ACCOnR6(target, null);
	}

	public static AccessPath_c getOneCA_ACCOnR6(Subsystem_c target,
			boolean loadComponent) {
		return getOneCA_ACCOnR6(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AccessPath_c getOneCA_ACCOnR6(Subsystem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_ACCOnR6(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AccessPath_c getOneCA_ACCOnR6(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test) {
		return getOneCA_ACCOnR6(modelRoot, target, test, true);
	}

	public static AccessPath_c getOneCA_ACCOnR6(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_ACCOnR6(modelRoot, target, test);
	}
	private static AccessPath_c find_getOneCA_ACCOnR6(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsAccessPathContains_R6) {
				for (int i = 0; i < target.backPointer_ContainsAccessPathContains_R6
						.size(); ++i) {
					AccessPath_c source = (AccessPath_c) target.backPointer_ContainsAccessPathContains_R6
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c[] targets) {
		return getManyCA_ACCsOnR6(targets, null);
	}
	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c[] targets,
			boolean loadComponent) {
		return getManyCA_ACCsOnR6(targets, null, loadComponent);
	}
	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c[] targets,
			ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR6(targets, test, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AccessPath_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsAccessPathContains_R6) {
				for (int j = 0; j < targets[i].backPointer_ContainsAccessPathContains_R6
						.size(); ++j) {
					AccessPath_c source = (AccessPath_c) targets[i].backPointer_ContainsAccessPathContains_R6
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AccessPath_c[0];
		}
	}

	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c target) {
		return getManyCA_ACCsOnR6(target, null);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c target,
			boolean loadComponent) {
		return getManyCA_ACCsOnR6(target, null, loadComponent);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c target,
			ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR6(target, test, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR6(Subsystem_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new AccessPath_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsAccessPathContains_R6) {
			for (int i = 0; i < target.backPointer_ContainsAccessPathContains_R6
					.size(); ++i) {
				AccessPath_c source = (AccessPath_c) target.backPointer_ContainsAccessPathContains_R6
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AccessPath_c[0];
		}
	}

	// referring navigation

	ImportedClass_c OriginationObjCanBeRepresentedByImportedClass;
	public void relateAcrossR425To(ImportedClass_c target) {
		relateAcrossR425To(target, true);
	}
	public void relateAcrossR425To(ImportedClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OriginationObjCanBeRepresentedByImportedClass)
			return; // already related

		if (OriginationObjCanBeRepresentedByImportedClass != target) {

			Object oldKey = getInstanceKey();

			if (OriginationObjCanBeRepresentedByImportedClass != null) {

				OriginationObjCanBeRepresentedByImportedClass
						.clearBackPointerR425To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AccessPath_c.relateAcrossR425To(ImportedClass_c target)",
									"Relate performed across R425 from Access Path to Imported Class without unrelate of prior instance.");
				}
			}

			OriginationObjCanBeRepresentedByImportedClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getIobj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_iobj_id = target.getIobj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR425To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "425", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR425From(ImportedClass_c target) {
		unrelateAcrossR425From(target, true);
	}
	public void unrelateAcrossR425From(ImportedClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OriginationObjCanBeRepresentedByImportedClass == null)
			return; // already unrelated

		if (target != OriginationObjCanBeRepresentedByImportedClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R425",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR425To(this);
		}

		if (OriginationObjCanBeRepresentedByImportedClass != null) {

			m_iobj_id = OriginationObjCanBeRepresentedByImportedClass
					.getIobj_id();
			if (IdAssigner.NULL_UUID.equals(m_iobj_id)) {
				m_iobj_id = OriginationObjCanBeRepresentedByImportedClass
						.getIobj_idCachedValue();
			}
			OriginationObjCanBeRepresentedByImportedClass = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "425", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AccessPath_c getOneCA_ACCOnR425(ImportedClass_c[] targets) {
		return getOneCA_ACCOnR425(targets, null);
	}

	public static AccessPath_c getOneCA_ACCOnR425(ImportedClass_c[] targets,
			ClassQueryInterface_c test) {
		AccessPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_ACCOnR425(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AccessPath_c getOneCA_ACCOnR425(ImportedClass_c target) {
		return getOneCA_ACCOnR425(target, null);
	}

	public static AccessPath_c getOneCA_ACCOnR425(ImportedClass_c target,
			boolean loadComponent) {
		return getOneCA_ACCOnR425(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AccessPath_c getOneCA_ACCOnR425(ImportedClass_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_ACCOnR425(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AccessPath_c getOneCA_ACCOnR425(ModelRoot modelRoot,
			ImportedClass_c target, ClassQueryInterface_c test) {
		return getOneCA_ACCOnR425(modelRoot, target, test, true);
	}

	public static AccessPath_c getOneCA_ACCOnR425(ModelRoot modelRoot,
			ImportedClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_ACCOnR425(modelRoot, target, test);
	}
	private static AccessPath_c find_getOneCA_ACCOnR425(ModelRoot modelRoot,
			ImportedClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425) {
				for (int i = 0; i < target.backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425
						.size(); ++i) {
					AccessPath_c source = (AccessPath_c) target.backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AccessPath_c[] getManyCA_ACCsOnR425(ImportedClass_c[] targets) {
		return getManyCA_ACCsOnR425(targets, null);
	}
	public static AccessPath_c[] getManyCA_ACCsOnR425(
			ImportedClass_c[] targets, boolean loadComponent) {
		return getManyCA_ACCsOnR425(targets, null, loadComponent);
	}
	public static AccessPath_c[] getManyCA_ACCsOnR425(
			ImportedClass_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR425(targets, test, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR425(
			ImportedClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AccessPath_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425) {
				for (int j = 0; j < targets[i].backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425
						.size(); ++j) {
					AccessPath_c source = (AccessPath_c) targets[i].backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AccessPath_c[0];
		}
	}

	public static AccessPath_c[] getManyCA_ACCsOnR425(ImportedClass_c target) {
		return getManyCA_ACCsOnR425(target, null);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR425(ImportedClass_c target,
			boolean loadComponent) {
		return getManyCA_ACCsOnR425(target, null, loadComponent);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR425(ImportedClass_c target,
			ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR425(target, test, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR425(ImportedClass_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new AccessPath_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425) {
			for (int i = 0; i < target.backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425
					.size(); ++i) {
				AccessPath_c source = (AccessPath_c) target.backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AccessPath_c[0];
		}
	}

	// referring navigation

	StateMachine_c OriginatesFromStateMachine;
	public void relateAcrossR416To(StateMachine_c target) {
		relateAcrossR416To(target, true);
	}
	public void relateAcrossR416To(StateMachine_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OriginatesFromStateMachine)
			return; // already related

		if (OriginatesFromStateMachine != target) {

			Object oldKey = getInstanceKey();

			if (OriginatesFromStateMachine != null) {

				OriginatesFromStateMachine.clearBackPointerR416To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AccessPath_c.relateAcrossR416To(StateMachine_c target)",
									"Relate performed across R416 from Access Path to State Machine without unrelate of prior instance.");
				}
			}

			OriginatesFromStateMachine = target;
			m_sm_id = target.getSm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR416To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "416", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR416From(StateMachine_c target) {
		unrelateAcrossR416From(target, true);
	}
	public void unrelateAcrossR416From(StateMachine_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OriginatesFromStateMachine == null)
			return; // already unrelated

		if (target != OriginatesFromStateMachine) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R416",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR416To(this);
		}

		if (OriginatesFromStateMachine != null) {

			m_sm_id = OriginatesFromStateMachine.getSm_id();
			OriginatesFromStateMachine = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "416", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AccessPath_c getOneCA_ACCOnR416(StateMachine_c[] targets) {
		return getOneCA_ACCOnR416(targets, null);
	}

	public static AccessPath_c getOneCA_ACCOnR416(StateMachine_c[] targets,
			ClassQueryInterface_c test) {
		AccessPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_ACCOnR416(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AccessPath_c getOneCA_ACCOnR416(StateMachine_c target) {
		return getOneCA_ACCOnR416(target, null);
	}

	public static AccessPath_c getOneCA_ACCOnR416(StateMachine_c target,
			boolean loadComponent) {
		return getOneCA_ACCOnR416(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AccessPath_c getOneCA_ACCOnR416(StateMachine_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_ACCOnR416(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AccessPath_c getOneCA_ACCOnR416(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test) {
		return getOneCA_ACCOnR416(modelRoot, target, test, true);
	}

	public static AccessPath_c getOneCA_ACCOnR416(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_ACCOnR416(modelRoot, target, test);
	}
	private static AccessPath_c find_getOneCA_ACCOnR416(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_OriginatesAccessPathOriginates_R416) {
				for (int i = 0; i < target.backPointer_OriginatesAccessPathOriginates_R416
						.size(); ++i) {
					AccessPath_c source = (AccessPath_c) target.backPointer_OriginatesAccessPathOriginates_R416
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c[] targets) {
		return getManyCA_ACCsOnR416(targets, null);
	}
	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c[] targets,
			boolean loadComponent) {
		return getManyCA_ACCsOnR416(targets, null, loadComponent);
	}
	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c[] targets,
			ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR416(targets, test, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AccessPath_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_OriginatesAccessPathOriginates_R416) {
				for (int j = 0; j < targets[i].backPointer_OriginatesAccessPathOriginates_R416
						.size(); ++j) {
					AccessPath_c source = (AccessPath_c) targets[i].backPointer_OriginatesAccessPathOriginates_R416
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AccessPath_c[0];
		}
	}

	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c target) {
		return getManyCA_ACCsOnR416(target, null);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c target,
			boolean loadComponent) {
		return getManyCA_ACCsOnR416(target, null, loadComponent);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c target,
			ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR416(target, test, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR416(StateMachine_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new AccessPath_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_OriginatesAccessPathOriginates_R416) {
			for (int i = 0; i < target.backPointer_OriginatesAccessPathOriginates_R416
					.size(); ++i) {
				AccessPath_c source = (AccessPath_c) target.backPointer_OriginatesAccessPathOriginates_R416
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AccessPath_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	SmToObjAccessPath_c backPointer_IsSubtypeSmToObjAccessPathIsSubtype_R415;

	public void setSmToObjAccessPathOrderInChildListR415(
			SmToObjAccessPath_c target, int index) {
		unrelateAcrossR415From(target);
		SmToObjAccessPath_c[] elements = SmToObjAccessPath_c
				.getManyCA_SMOAsOnR415(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR415From((SmToObjAccessPath_c) elements[i]);
			}
			count++;
		}
		relateAcrossR415To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR415To((SmToObjAccessPath_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR415To(SmToObjAccessPath_c target) {
		if (target != null) {
			target.relateAcrossR415To(this, true);
		}
	}

	public void relateAcrossR415To(SmToObjAccessPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR415To(this, notifyChanges);
		}
	}

	public void setBackPointerR415To(SmToObjAccessPath_c target) {
		backPointer_IsSubtypeSmToObjAccessPathIsSubtype_R415 = target;
	}

	public void unrelateAcrossR415From(SmToObjAccessPath_c target) {
		if (target != null) {
			target.unrelateAcrossR415From(this, true);
		}
	}

	public void unrelateAcrossR415From(SmToObjAccessPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR415From(this, notifyChanges);
		}
	}

	public void clearBackPointerR415To(SmToObjAccessPath_c target) {
		if (target == backPointer_IsSubtypeSmToObjAccessPathIsSubtype_R415) {
			backPointer_IsSubtypeSmToObjAccessPathIsSubtype_R415 = null;
		}
	}

	public static AccessPath_c getOneCA_ACCOnR415(SmToObjAccessPath_c[] targets) {
		return getOneCA_ACCOnR415(targets, null);
	}

	public static AccessPath_c getOneCA_ACCOnR415(
			SmToObjAccessPath_c[] targets, ClassQueryInterface_c test) {
		return getOneCA_ACCOnR415(targets, test, true);
	}

	public static AccessPath_c getOneCA_ACCOnR415(
			SmToObjAccessPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		AccessPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					AccessPath_c candidate_val = getOneCA_ACCOnR415(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCA_ACCOnR415(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static AccessPath_c getOneCA_ACCOnR415(SmToObjAccessPath_c target) {
		return getOneCA_ACCOnR415(target, true);
	}
	public static AccessPath_c getOneCA_ACCOnR415(SmToObjAccessPath_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeAccessPath;
		} else {
			return null;
		}
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToObjAccessPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR415(targets, test, true);
	}

	public static AccessPath_c [] getManyCA_ACCsOnR415(SmToObjAccessPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new AccessPath_c[0];
  
  
  LinkedHashSet<AccessPath_c> elementsSet = new LinkedHashSet<AccessPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeAccessPath == null)
	  targets[i].loadProxy();
    AccessPath_c associate = targets[i].IsSupertypeAccessPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  AccessPath_c[] result = new AccessPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToObjAccessPath_c[] targets) {
		return getManyCA_ACCsOnR415(targets, null);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToObjAccessPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SmToObjAccessPath_c[] targetArray = new SmToObjAccessPath_c[1];
			targetArray[0] = target;
			return getManyCA_ACCsOnR415(targetArray, test, loadComponent);
		} else {
			AccessPath_c[] result = new AccessPath_c[0];
			return result;
		}

	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToObjAccessPath_c target, ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR415(target, null, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(SmToObjAccessPath_c target) {
		return getManyCA_ACCsOnR415(target, null, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToObjAccessPath_c target, boolean loadComponent) {
		return getManyCA_ACCsOnR415(target, null, loadComponent);
	}

	// referred to navigation

	SmToEeAccessPath_c backPointer_IsSubtypeSmToEeAccessPathIsSubtype_R415;

	public void setSmToEeAccessPathOrderInChildListR415(
			SmToEeAccessPath_c target, int index) {
		unrelateAcrossR415From(target);
		SmToEeAccessPath_c[] elements = SmToEeAccessPath_c
				.getManyCA_SMEEAsOnR415(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR415From((SmToEeAccessPath_c) elements[i]);
			}
			count++;
		}
		relateAcrossR415To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR415To((SmToEeAccessPath_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR415To(SmToEeAccessPath_c target) {
		if (target != null) {
			target.relateAcrossR415To(this, true);
		}
	}

	public void relateAcrossR415To(SmToEeAccessPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR415To(this, notifyChanges);
		}
	}

	public void setBackPointerR415To(SmToEeAccessPath_c target) {
		backPointer_IsSubtypeSmToEeAccessPathIsSubtype_R415 = target;
	}

	public void unrelateAcrossR415From(SmToEeAccessPath_c target) {
		if (target != null) {
			target.unrelateAcrossR415From(this, true);
		}
	}

	public void unrelateAcrossR415From(SmToEeAccessPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR415From(this, notifyChanges);
		}
	}

	public void clearBackPointerR415To(SmToEeAccessPath_c target) {
		if (target == backPointer_IsSubtypeSmToEeAccessPathIsSubtype_R415) {
			backPointer_IsSubtypeSmToEeAccessPathIsSubtype_R415 = null;
		}
	}

	public static AccessPath_c getOneCA_ACCOnR415(SmToEeAccessPath_c[] targets) {
		return getOneCA_ACCOnR415(targets, null);
	}

	public static AccessPath_c getOneCA_ACCOnR415(SmToEeAccessPath_c[] targets,
			ClassQueryInterface_c test) {
		return getOneCA_ACCOnR415(targets, test, true);
	}

	public static AccessPath_c getOneCA_ACCOnR415(SmToEeAccessPath_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		AccessPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					AccessPath_c candidate_val = getOneCA_ACCOnR415(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCA_ACCOnR415(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static AccessPath_c getOneCA_ACCOnR415(SmToEeAccessPath_c target) {
		return getOneCA_ACCOnR415(target, true);
	}
	public static AccessPath_c getOneCA_ACCOnR415(SmToEeAccessPath_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeAccessPath;
		} else {
			return null;
		}
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToEeAccessPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR415(targets, test, true);
	}

	public static AccessPath_c [] getManyCA_ACCsOnR415(SmToEeAccessPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new AccessPath_c[0];
  
  
  LinkedHashSet<AccessPath_c> elementsSet = new LinkedHashSet<AccessPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeAccessPath == null)
	  targets[i].loadProxy();
    AccessPath_c associate = targets[i].IsSupertypeAccessPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  AccessPath_c[] result = new AccessPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToEeAccessPath_c[] targets) {
		return getManyCA_ACCsOnR415(targets, null);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToEeAccessPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SmToEeAccessPath_c[] targetArray = new SmToEeAccessPath_c[1];
			targetArray[0] = target;
			return getManyCA_ACCsOnR415(targetArray, test, loadComponent);
		} else {
			AccessPath_c[] result = new AccessPath_c[0];
			return result;
		}

	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToEeAccessPath_c target, ClassQueryInterface_c test) {
		return getManyCA_ACCsOnR415(target, null, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(SmToEeAccessPath_c target) {
		return getManyCA_ACCsOnR415(target, null, true);
	}

	public static AccessPath_c[] getManyCA_ACCsOnR415(
			SmToEeAccessPath_c target, boolean loadComponent) {
		return getManyCA_ACCsOnR415(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem == null) {
			// R6
			Subsystem_c relInst57515 = (Subsystem_c) baseRoot.getInstanceList(
					Subsystem_c.class).get(new Object[]{m_ss_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57515 == null) {
				relInst57515 = (Subsystem_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Subsystem_c.class)
						.get(new Object[]{m_ss_id});
			}
			if (relInst57515 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57515 = (Subsystem_c) roots[i].getInstanceList(
							Subsystem_c.class).get(new Object[]{m_ss_id});
					if (relInst57515 != null)
						break;
				}
			}
			//synchronized
			if (relInst57515 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57515) && !isProxy())) {
					relInst57515.relateAcrossR6To(this, notifyChanges);
				}
			}
		}

		if (OriginationObjCanBeRepresentedByImportedClass == null) {
			// R425
			ImportedClass_c relInst57516 = (ImportedClass_c) baseRoot
					.getInstanceList(ImportedClass_c.class).get(
							new Object[]{m_iobj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57516 == null) {
				relInst57516 = (ImportedClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ImportedClass_c.class)
						.get(new Object[]{m_iobj_id});
			}
			if (relInst57516 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57516 = (ImportedClass_c) roots[i].getInstanceList(
							ImportedClass_c.class).get(new Object[]{m_iobj_id});
					if (relInst57516 != null)
						break;
				}
			}
			//synchronized
			if (relInst57516 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57516) && !isProxy())) {
					relInst57516.relateAcrossR425To(this, notifyChanges);
				}
			}
		}

		if (OriginatesFromStateMachine == null) {
			// R416
			StateMachine_c relInst57517 = (StateMachine_c) baseRoot
					.getInstanceList(StateMachine_c.class).get(
							new Object[]{m_sm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57517 == null) {
				relInst57517 = (StateMachine_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(StateMachine_c.class)
						.get(new Object[]{m_sm_id});
			}
			if (relInst57517 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57517 = (StateMachine_c) roots[i].getInstanceList(
							StateMachine_c.class).get(new Object[]{m_sm_id});
					if (relInst57517 != null)
						break;
				}
			}
			//synchronized
			if (relInst57517 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57517) && !isProxy())) {
					relInst57517.relateAcrossR416To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R6
		// S_SS
		inst = AbstractsSynchronousDataAccessBetweenClassesInSubsystem;
		unrelateAcrossR6From(
				AbstractsSynchronousDataAccessBetweenClassesInSubsystem,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R425
		// O_IOBJ
		inst = OriginationObjCanBeRepresentedByImportedClass;
		unrelateAcrossR425From(OriginationObjCanBeRepresentedByImportedClass,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R416
		// SM_SM
		inst = OriginatesFromStateMachine;
		unrelateAcrossR416From(OriginatesFromStateMachine, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final AccessPath_c inst = (AccessPath_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static AccessPath_c AccessPathInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		AccessPath_c result = findAccessPathInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					AccessPath_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findAccessPathInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static AccessPath_c findAccessPathInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AccessPath_c x = (AccessPath_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static AccessPath_c AccessPathInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return AccessPathInstance(modelRoot, test, true);
	}

	public static AccessPath_c AccessPathInstance(ModelRoot modelRoot) {
		return AccessPathInstance(modelRoot, null, true);
	}

	public static AccessPath_c[] AccessPathInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					AccessPath_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(AccessPath_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AccessPath_c x = (AccessPath_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				AccessPath_c[] ret_set = new AccessPath_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new AccessPath_c[0];
			}
		}
	}
	public static AccessPath_c[] AccessPathInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return AccessPathInstances(modelRoot, test, true);
	}
	public static AccessPath_c[] AccessPathInstances(ModelRoot modelRoot) {
		return AccessPathInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Access Path.dispose call: ";
		Subsystem_c testR6Inst = Subsystem_c.getOneS_SSOnR6(this, false);

		if (testR6Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "6 ";
		}
		SmToObjAccessPath_c testR415Inst1 = SmToObjAccessPath_c
				.getOneCA_SMOAOnR415(this, false);

		if (testR415Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "415 ";
		}
		SmToEeAccessPath_c testR415Inst2 = SmToEeAccessPath_c
				.getOneCA_SMEEAOnR415(this, false);

		if (testR415Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "415 ";
		}
		ImportedClass_c testR425Inst = ImportedClass_c.getOneO_IOBJOnR425(this,
				false);

		if (testR425Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "425 ";
		}
		StateMachine_c testR416Inst = StateMachine_c.getOneSM_SMOnR416(this,
				false);

		if (testR416Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "416 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Access Path", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("apath_id")) {
			return true;
		}
		if (attributeName.equals("ss_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("iobj_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getApath_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getApath_idLongBased() {
		if (m_apath_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_apath_id)) {
			return 0xfffffff & m_apath_id.getLeastSignificantBits();
		}
		return m_apath_idLongBased;
	}
	public java.util.UUID getApath_id() {
		return m_apath_id;
	}

	public void setApath_id(java.util.UUID newValue) {
		m_apath_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSs_idLongBased() {
		if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem != null) {
			return AbstractsSynchronousDataAccessBetweenClassesInSubsystem
					.getSs_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSs_id() {
		if (AbstractsSynchronousDataAccessBetweenClassesInSubsystem != null) {
			return AbstractsSynchronousDataAccessBetweenClassesInSubsystem
					.getSs_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSs_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ss_id))
			return m_ss_id;
		else
			return getSs_id();
	}

	public void setSs_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_ss_id)) {
				return;
			}
		} else if (m_ss_id != null) {
			if (m_ss_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ss_id",
				m_ss_id, newValue, true);
		m_ss_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (OriginatesFromStateMachine != null) {
			return OriginatesFromStateMachine.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (OriginatesFromStateMachine != null) {
			return OriginatesFromStateMachine.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIobj_idLongBased() {
		if (OriginationObjCanBeRepresentedByImportedClass != null) {
			return OriginationObjCanBeRepresentedByImportedClass
					.getIobj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getIobj_id() {
		if (OriginationObjCanBeRepresentedByImportedClass != null) {
			return OriginationObjCanBeRepresentedByImportedClass.getIobj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIobj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_iobj_id))
			return m_iobj_id;
		else
			return getIobj_id();
	}

	public void setIobj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_iobj_id)) {
				return;
			}
		} else if (m_iobj_id != null) {
			if (m_iobj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Iobj_id", m_iobj_id, newValue, true);
		m_iobj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Access Path", //$NON-NLS-1$
				" Operation entered: Access Path::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		AccessPath_c[] objs = AccessPath_c.AccessPathInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Access Path", //$NON-NLS-1$
				" Operation entered: Access Path::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class AccessPath_c_test57519_c implements ClassQueryInterface_c {
			AccessPath_c_test57519_c(java.util.UUID p57520) {
				m_p57520 = p57520;
			}
			private java.util.UUID m_p57520;
			public boolean evaluate(Object candidate) {
				AccessPath_c selected = (AccessPath_c) candidate;
				boolean retval = false;
				retval = (selected.getApath_id().equals(m_p57520));
				return retval;
			}
		}

		AccessPath_c[] objs57518 = AccessPath_c.AccessPathInstances(modelRoot,
				new AccessPath_c_test57519_c(getApath_id()));

		if (((objs57518.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Access Path", //$NON-NLS-1$
								"Consistency: Object: Access Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57518.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Access Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs57518.length), e);
			}
			retval = false;

		}

		if (((objs57518.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Access Path", //$NON-NLS-1$
								"Consistency: Object: Access Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57518.length)
										+ " APath_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Access Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57518.length)
										+ " APath_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Access Path is a referring class in association: rel.Numb = 6
		// The participating class is: Subsystem
		class Subsystem_c_test57524_c implements ClassQueryInterface_c {
			Subsystem_c_test57524_c(java.util.UUID p57525) {
				m_p57525 = p57525;
			}
			private java.util.UUID m_p57525;
			public boolean evaluate(Object candidate) {
				Subsystem_c selected = (Subsystem_c) candidate;
				boolean retval = false;
				retval = (selected.getSs_id().equals(m_p57525));
				return retval;
			}
		}

		Subsystem_c[] objs57523 = Subsystem_c.SubsystemInstances(modelRoot,
				new Subsystem_c_test57524_c(getSs_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57523.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Access Path", //$NON-NLS-1$
								"Consistency: Object: Access Path: Association: 6: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57523.length)
										+ " SS_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Access Path: Association: 6: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57523.length)
										+ " SS_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Access Path is a referring class in association: rel.Numb = 416
		// The participating class is: State Machine
		class StateMachine_c_test57527_c implements ClassQueryInterface_c {
			StateMachine_c_test57527_c(java.util.UUID p57528) {
				m_p57528 = p57528;
			}
			private java.util.UUID m_p57528;
			public boolean evaluate(Object candidate) {
				StateMachine_c selected = (StateMachine_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p57528));
				return retval;
			}
		}

		StateMachine_c[] objs57526 = StateMachine_c.StateMachineInstances(
				modelRoot, new StateMachine_c_test57527_c(getSm_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57526.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Access Path", //$NON-NLS-1$
								"Consistency: Object: Access Path: Association: 416: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57526.length)
										+ " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Access Path: Association: 416: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57526.length)
										+ " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Access Path is a referring class in association: rel.Numb = 425
		// The participating class is: Imported Class
		class ImportedClass_c_test57530_c implements ClassQueryInterface_c {
			ImportedClass_c_test57530_c(java.util.UUID p57531) {
				m_p57531 = p57531;
			}
			private java.util.UUID m_p57531;
			public boolean evaluate(Object candidate) {
				ImportedClass_c selected = (ImportedClass_c) candidate;
				boolean retval = false;
				retval = (selected.getIobj_id().equals(m_p57531));
				return retval;
			}
		}

		ImportedClass_c[] objs57529 = ImportedClass_c.ImportedClassInstances(
				modelRoot, new ImportedClass_c_test57530_c(getIobj_id()));

		if (((objs57529.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Access Path", //$NON-NLS-1$
								"Consistency: Object: Access Path: Association: 425: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57529.length)
										+ " IObj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Access Path: Association: 425: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57529.length)
										+ " IObj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 415
		int objs57532 = 0;
		// Subtype Object: SM to OBJ Access Path
		class SmToObjAccessPath_c_test57533_c implements ClassQueryInterface_c {
			SmToObjAccessPath_c_test57533_c(java.util.UUID p57534) {
				m_p57534 = p57534;
			}
			private java.util.UUID m_p57534;
			public boolean evaluate(Object candidate) {
				SmToObjAccessPath_c selected = (SmToObjAccessPath_c) candidate;
				boolean retval = false;
				retval = (selected.getApath_id().equals(m_p57534));
				return retval;
			}
		}

		SmToObjAccessPath_c[] objs57535 = SmToObjAccessPath_c
				.SmToObjAccessPathInstances(modelRoot,
						new SmToObjAccessPath_c_test57533_c(getApath_id()));

		objs57532 = objs57532 + objs57535.length;
		// Subtype Object: SM to EE Access Path
		class SmToEeAccessPath_c_test57536_c implements ClassQueryInterface_c {
			SmToEeAccessPath_c_test57536_c(java.util.UUID p57537) {
				m_p57537 = p57537;
			}
			private java.util.UUID m_p57537;
			public boolean evaluate(Object candidate) {
				SmToEeAccessPath_c selected = (SmToEeAccessPath_c) candidate;
				boolean retval = false;
				retval = (selected.getApath_id().equals(m_p57537));
				return retval;
			}
		}

		SmToEeAccessPath_c[] objs57538 = SmToEeAccessPath_c
				.SmToEeAccessPathInstances(modelRoot,
						new SmToEeAccessPath_c_test57536_c(getApath_id()));

		objs57532 = objs57532 + objs57538.length;
		if (objs57532 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Access Path", //$NON-NLS-1$
								"Consistency: Object: Access Path: Association: 415: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57532)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Access Path: Association: 415: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57532), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Access Path",
				" Operation entered: AccessPath::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR416(this);

		this.unrelateAcrossR416From(v_sm);

		SmToEeAccessPath_c v_smeea = SmToEeAccessPath_c
				.getOneCA_SMEEAOnR415(this);

		if ((v_smeea != null)) {

			if (v_smeea != null) {
				v_smeea.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		SmToObjAccessPath_c v_smoa = SmToObjAccessPath_c
				.getOneCA_SMOAOnR415(this);

		if ((v_smoa != null)) {

			if (v_smoa != null) {
				v_smoa.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ImportedClass_c v_iobj = ImportedClass_c.getOneO_IOBJOnR425(this);

		if ((v_iobj != null)) {

			this.unrelateAcrossR425From(v_iobj);

		}

		Subsystem_c v_ss = Subsystem_c.getOneS_SSOnR6(this);

		if (((v_ss != null))) {

			this.unrelateAcrossR6From(v_ss);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Access Path",
				" Operation entered: AccessPath::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getApath_id();

	} // End get_ooa_id

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Access Path
