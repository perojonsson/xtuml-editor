package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    GenericPackageAssignEventOnSM_TXNWizard.java
//
// WARNING: Do not edit this generated file
// Generated by arc/wizard.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import java.util.Iterator;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.wizard.*;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.TransactionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * GenericPackageAssignEventOnSM_TXNWizard class
 */
public class GenericPackageAssignEventOnSM_TXNWizard extends Wizard {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	// workbench selection when the wizard was started
	protected IStructuredSelection m_selection;

	// the workbench instance
	protected IWorkbench m_workbench;

	// the viewer the wizard was started from. This must be replaced with a listener system
	protected Viewer m_viewer;

	// Pages stack
	protected Stack m_pagesStack = new Stack();

	// wizard pages
	GenericPackageAssignEventOnSM_TXNWizardPage1 SM_TXN_GenericPackageAssignEventPage1;

	// wizard state
	// constants
	protected static final int INITIAL_WIZARD_STATE = -1;
	protected static final int SM_TXN_GENERICPACKAGEASSIGNEVENT0_WIZARD_STATE = 0;
	// member
	protected int m_state = INITIAL_WIZARD_STATE;
	// end wizard state

	// cache for contextual selections (public for use by unit tests)
	public Transition_c v_txn = null;

	// cache for the users selections (public for use by unit tests)
	public StateMachineEvent_c v_event = null;

	/**
	 * Constructor for GenericPackageAssignEventOnSM_TXNWizard.
	 */
	public GenericPackageAssignEventOnSM_TXNWizard() {
		super();
	}

	/**
	 * See field.
	 */
	public IStructuredSelection getSelection() {
		return m_selection;
	}

	public void addPages() {
		SM_TXN_GenericPackageAssignEventPage1 = new GenericPackageAssignEventOnSM_TXNWizardPage1(
				"GenericPackageAssignEventOnSM_TXNWizardPage1");
		addPage(SM_TXN_GenericPackageAssignEventPage1);
	}

	/**
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection,
			Viewer viewer) {
		this.m_workbench = workbench;
		this.m_selection = selection;
		this.m_viewer = viewer;
		for (Iterator iterator = selection.iterator(); iterator.hasNext();) {
			Object context = iterator.next();
			if (context instanceof Transition_c) {
				v_txn = (Transition_c) context;
			}
		}
	}

	public boolean canFinish() {
		boolean pagesComplete = true;
		pagesComplete = pagesComplete
				&& SM_TXN_GenericPackageAssignEventPage1.isPageComplete();
		return pagesComplete;
	}

	public IWizardPage getNextPage(IWizardPage page) {
		List pages = new ArrayList(getPages().length);
		for (int i = 0; i < getPages().length; i++) {
			pages.add(getPages()[i]);
		}
		switch (pages.indexOf(page)) {
			case SM_TXN_GENERICPACKAGEASSIGNEVENT0_WIZARD_STATE :
				return null;
		}
		return null;
	}

	public IWizardPage getPreviousPage(IWizardPage page) {
		if (m_pagesStack.empty()) {
			return null;
		} else {
			List pages = new ArrayList(getPages().length);
			for (int i = 0; i < getPages().length; i++) {
				pages.add(getPages()[i]);
			}
			m_state = pages.indexOf((IWizardPage) m_pagesStack.peek());
			((PtWizardPage) m_pagesStack.peek()).onPageEntry();
			return (IWizardPage) m_pagesStack.pop();
		}
	}

	public boolean performFinish() {
		TransactionUtil.TransactionGroup transactionGroup = null;
		ModelRoot modelRoot = v_txn.getModelRoot();
		try {
			transactionGroup = TransactionUtil
					.startTransactionsOnSelectedModelRoots("Generic Package Assign Event"); //$NON-NLS-1$
			StateMachineState_c v_dest_state = StateMachineState_c
					.getOneSM_STATEOnR506(v_txn);

			StateMachineState_c v_legal_evt_defining_state = StateMachineState_c
					.getOneSM_STATEOnR508(NoEventTransition_c
							.getOneSM_NETXNOnR507(v_txn));

			if (((v_legal_evt_defining_state == null))) {

				v_legal_evt_defining_state = StateMachineState_c
						.getOneSM_STATEOnR503(StateEventMatrixEntry_c
								.getOneSM_SEMEOnR504(NewStateTransition_c
										.getOneSM_NSTXNOnR507(v_txn)));

			}

			StateMachine_c v_stateMachine = StateMachine_c
					.getOneSM_SMOnR505(v_txn);

			ClassStateMachine_c v_classStateMachine = ClassStateMachine_c
					.getOneSM_ASMOnR517(v_stateMachine);

			boolean v_isClassStateMachine = (v_classStateMachine != null);

			ModelClass_c v_modelClass = ModelClass_c
					.getOneO_OBJOnR518(InstanceStateMachine_c
							.getOneSM_ISMOnR517(v_stateMachine));

			if ((v_isClassStateMachine)) {

				v_modelClass = ModelClass_c
						.getOneO_OBJOnR519(ClassStateMachine_c
								.getOneSM_ASMOnR517(v_stateMachine));

			}

			PackageableElement_c v_packageableElem = PackageableElement_c
					.getOnePE_PEOnR8001(v_modelClass);

			Package_c v_package = Package_c
					.getOneEP_PKGOnR8000(v_packageableElem);

			if (((v_package == null))) {

				v_package = Package_c.getOneEP_PKGOnR8001(PackageableElement_c
						.getOnePE_PEOnR8001(Component_c
								.getOneC_COnR8003(v_packageableElem)));

			}

			StateMachine_c[] v_machines = StateMachine_c
					.getManySM_SMsOnR517(InstanceStateMachine_c
							.getManySM_ISMsOnR518(ModelClass_c
									.getManyO_OBJsOnR8001(PackageableElement_c
											.getManyPE_PEsOnR8000(v_package))));

			if ((v_isClassStateMachine)) {

				v_machines = StateMachine_c
						.getManySM_SMsOnR517(ClassStateMachine_c.getManySM_ASMsOnR519(ModelClass_c
								.getManyO_OBJsOnR8001(PackageableElement_c
										.getManyPE_PEsOnR8000(v_package))));

			}

			if (v_txn != null) {
				v_txn.Addevent(v_event.getSmevt_id(), v_event.getSm_id());
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			if (transactionGroup != null)
				TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Generic Package Assign Event failed", e);//$NON-NLS-1$
			// return true so that the wizard will
			// close
			return true;
		}
		if (transactionGroup != null)
			TransactionUtil.endTransactions(transactionGroup);
		if (m_viewer != null) {
			if (m_viewer instanceof StructuredViewer) {
				((StructuredViewer) m_viewer).refresh(v_txn);
			} else {
				m_viewer.refresh();
			}
		}
		return true;
	}
}
