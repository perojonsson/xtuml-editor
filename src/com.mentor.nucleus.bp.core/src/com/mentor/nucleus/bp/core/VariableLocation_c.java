package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.VariableLocation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_VARIABLE_LOCATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class VariableLocation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public VariableLocation_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			int p_m_linenumber, int p_m_startposition, int p_m_endposition,
			java.util.UUID p_m_var_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		m_linenumber = p_m_linenumber;
		m_startposition = p_m_startposition;
		m_endposition = p_m_endposition;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_var_id = IdAssigner.preprocessUUID(p_m_var_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public VariableLocation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, int p_m_linenumber, int p_m_startposition,
			int p_m_endposition, java.util.UUID p_m_var_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(VariableLocation_c.class);
		VariableLocation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (VariableLocation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				new_inst.m_linenumber = p_m_linenumber;
				new_inst.m_startposition = p_m_startposition;
				new_inst.m_endposition = p_m_endposition;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new VariableLocation_c(modelRoot, p_m_id,
					p_m_linenumber, p_m_startposition, p_m_endposition,
					p_m_var_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public VariableLocation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, int p_m_linenumber, int p_m_startposition,
			int p_m_endposition, java.util.UUID p_m_var_id) {
		InstanceList instances = modelRoot
				.getInstanceList(VariableLocation_c.class);
		VariableLocation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (VariableLocation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				source.m_linenumber = p_m_linenumber;
				source.m_startposition = p_m_startposition;
				source.m_endposition = p_m_endposition;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);

				return source;
			}
		}
		// there is no instance matching the id
		VariableLocation_c new_inst = new VariableLocation_c(modelRoot, p_m_id,
				p_m_linenumber, p_m_startposition, p_m_endposition, p_m_var_id);
		return new_inst;
	}
	public VariableLocation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = idAssigner.createUUID();
		m_var_id = IdAssigner.NULL_UUID;
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof VariableLocation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof VariableLocation_c)) {
			return false;
		}

		VariableLocation_c me = (VariableLocation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((VariableLocation_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((VariableLocation_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof VariableLocation_c)) {
			return false;
		}

		VariableLocation_c me = (VariableLocation_c) elem;
		if (!getId().equals(((VariableLocation_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;
	private long m_idLongBased;
	private int m_linenumber;
	private int m_startposition;
	private int m_endposition;
	private java.util.UUID m_var_id;

	// declare association references from this class

	// referring navigation

	Variable_c Variable;
	public void relateAcrossR835To(Variable_c target) {
		relateAcrossR835To(target, true);
	}
	public void relateAcrossR835To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Variable)
			return; // already related

		if (Variable != target) {

			Object oldKey = getInstanceKey();

			if (Variable != null) {

				Variable.clearBackPointerR835To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"VariableLocation_c.relateAcrossR835To(Variable_c target)",
									"Relate performed across R835 from Variable Location to Variable without unrelate of prior instance.");
				}
			}

			Variable = target;
			m_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR835To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR835From(Variable_c target) {
		unrelateAcrossR835From(target, true);
	}
	public void unrelateAcrossR835From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (Variable == null)
			return; // already unrelated

		if (target != Variable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R835",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR835To(this);
		}

		if (Variable != null) {

			m_var_id = Variable.getVar_id();
			Variable = null;
			target.removeRef();
		}
	}

	public static VariableLocation_c getOneV_LOCOnR835(Variable_c[] targets) {
		return getOneV_LOCOnR835(targets, null);
	}

	public static VariableLocation_c getOneV_LOCOnR835(Variable_c[] targets,
			ClassQueryInterface_c test) {
		VariableLocation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_LOCOnR835(targets[i], test);
			}
		}

		return ret_val;
	}

	public static VariableLocation_c getOneV_LOCOnR835(Variable_c target) {
		return getOneV_LOCOnR835(target, null);
	}

	public static VariableLocation_c getOneV_LOCOnR835(Variable_c target,
			boolean loadComponent) {
		return getOneV_LOCOnR835(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static VariableLocation_c getOneV_LOCOnR835(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_LOCOnR835(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static VariableLocation_c getOneV_LOCOnR835(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneV_LOCOnR835(modelRoot, target, test, true);
	}

	public static VariableLocation_c getOneV_LOCOnR835(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_LOCOnR835(modelRoot, target, test);
	}
	private static VariableLocation_c find_getOneV_LOCOnR835(
			ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_VariableLocation_R835) {
				for (int i = 0; i < target.backPointer_VariableLocation_R835
						.size(); ++i) {
					VariableLocation_c source = (VariableLocation_c) target.backPointer_VariableLocation_R835
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static VariableLocation_c[] getManyV_LOCsOnR835(Variable_c[] targets) {
		return getManyV_LOCsOnR835(targets, null);
	}
	public static VariableLocation_c[] getManyV_LOCsOnR835(
			Variable_c[] targets, boolean loadComponent) {
		return getManyV_LOCsOnR835(targets, null, loadComponent);
	}
	public static VariableLocation_c[] getManyV_LOCsOnR835(
			Variable_c[] targets, ClassQueryInterface_c test) {
		return getManyV_LOCsOnR835(targets, test, true);
	}

	public static VariableLocation_c[] getManyV_LOCsOnR835(
			Variable_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new VariableLocation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(VariableLocation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_VariableLocation_R835) {
				for (int j = 0; j < targets[i].backPointer_VariableLocation_R835
						.size(); ++j) {
					VariableLocation_c source = (VariableLocation_c) targets[i].backPointer_VariableLocation_R835
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			VariableLocation_c[] ret_set = new VariableLocation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new VariableLocation_c[0];
		}
	}

	public static VariableLocation_c[] getManyV_LOCsOnR835(Variable_c target) {
		return getManyV_LOCsOnR835(target, null);
	}

	public static VariableLocation_c[] getManyV_LOCsOnR835(Variable_c target,
			boolean loadComponent) {
		return getManyV_LOCsOnR835(target, null, loadComponent);
	}

	public static VariableLocation_c[] getManyV_LOCsOnR835(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyV_LOCsOnR835(target, test, true);
	}

	public static VariableLocation_c[] getManyV_LOCsOnR835(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new VariableLocation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_VariableLocation_R835) {
			for (int i = 0; i < target.backPointer_VariableLocation_R835.size(); ++i) {
				VariableLocation_c source = (VariableLocation_c) target.backPointer_VariableLocation_R835
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			VariableLocation_c[] ret_set = new VariableLocation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new VariableLocation_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (Variable == null) {
			// R835
			Variable_c relInst37800 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37800 == null) {
				relInst37800 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_var_id});
			}
			if (relInst37800 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37800 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_var_id});
					if (relInst37800 != null)
						break;
				}
			}
			//synchronized
			if (relInst37800 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37800) && !isProxy())) {
					relInst37800.relateAcrossR835To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R835
		// V_VAR
		inst = Variable;
		unrelateAcrossR835From(Variable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(VariableLocation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final VariableLocation_c inst = (VariableLocation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(VariableLocation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static VariableLocation_c VariableLocationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		VariableLocation_c result = findVariableLocationInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static VariableLocation_c findVariableLocationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(VariableLocation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				VariableLocation_c x = (VariableLocation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static VariableLocation_c VariableLocationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return VariableLocationInstance(modelRoot, test, true);
	}

	public static VariableLocation_c VariableLocationInstance(
			ModelRoot modelRoot) {
		return VariableLocationInstance(modelRoot, null, true);
	}

	public static VariableLocation_c[] VariableLocationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(VariableLocation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				VariableLocation_c x = (VariableLocation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				VariableLocation_c[] ret_set = new VariableLocation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new VariableLocation_c[0];
			}
		}
	}
	public static VariableLocation_c[] VariableLocationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return VariableLocationInstances(modelRoot, test, true);
	}
	public static VariableLocation_c[] VariableLocationInstances(
			ModelRoot modelRoot) {
		return VariableLocationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Variable Location.dispose call: ";
		Variable_c testR835Inst = Variable_c.getOneV_VAROnR835(this, false);

		if (testR835Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "835 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Variable Location",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("var_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getLinenumber() {
		return m_linenumber;
	}

	public void setLinenumber(int newValue) {
		m_linenumber = newValue;
	}
	public int getStartposition() {
		return m_startposition;
	}

	public void setStartposition(int newValue) {
		m_startposition = newValue;
	}
	public int getEndposition() {
		return m_endposition;
	}

	public void setEndposition(int newValue) {
		m_endposition = newValue;
	}
	public long getVar_idLongBased() {
		if (Variable != null) {
			return Variable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getVar_id() {
		if (Variable != null) {
			return Variable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getVar_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_var_id))
			return m_var_id;
		else
			return getVar_id();
	}

	public void setVar_id(java.util.UUID newValue) {
		m_var_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Variable Location", //$NON-NLS-1$
				" Operation entered: Variable Location::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		VariableLocation_c[] objs = VariableLocation_c
				.VariableLocationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Variable Location", //$NON-NLS-1$
				" Operation entered: Variable Location::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class VariableLocation_c_test37802_c implements ClassQueryInterface_c {
			VariableLocation_c_test37802_c(java.util.UUID p37803) {
				m_p37803 = p37803;
			}
			private java.util.UUID m_p37803;
			public boolean evaluate(Object candidate) {
				VariableLocation_c selected = (VariableLocation_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p37803));
				return retval;
			}
		}

		VariableLocation_c[] objs37801 = VariableLocation_c
				.VariableLocationInstances(modelRoot,
						new VariableLocation_c_test37802_c(getId()));

		if (((objs37801.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Variable Location", //$NON-NLS-1$
								"Consistency: Object: Variable Location: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs37801.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Variable Location: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37801.length), e);
			}
			retval = false;

		}

		if (((objs37801.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Variable Location", //$NON-NLS-1$
								"Consistency: Object: Variable Location: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37801.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Variable Location: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37801.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Variable Location is a referring class in association: rel.Numb = 835
		// The participating class is: Variable
		class Variable_c_test37807_c implements ClassQueryInterface_c {
			Variable_c_test37807_c(java.util.UUID p37808) {
				m_p37808 = p37808;
			}
			private java.util.UUID m_p37808;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p37808));
				return retval;
			}
		}

		Variable_c[] objs37806 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test37807_c(getVar_id()));

		if (((objs37806.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Variable Location", //$NON-NLS-1$
								"Consistency: Object: Variable Location: Association: 835: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37806.length)
										+ " Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Variable Location: Association: 835: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37806.length)
										+ " Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Variable Location
