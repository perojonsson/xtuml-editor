package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.CreateEventStatement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CREATE_EVENT_STATEMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class CreateEventStatement_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public CreateEventStatement_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, boolean p_m_is_implicit,
			java.util.UUID p_m_var_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		m_is_implicit = p_m_is_implicit;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_var_id = IdAssigner.preprocessUUID(p_m_var_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public CreateEventStatement_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, boolean p_m_is_implicit,
			java.util.UUID p_m_var_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);
		CreateEventStatement_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (CreateEventStatement_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				new_inst.m_is_implicit = p_m_is_implicit;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new CreateEventStatement_c(modelRoot, p_m_statement_id,
					p_m_is_implicit, p_m_var_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public CreateEventStatement_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, boolean p_m_is_implicit,
			java.util.UUID p_m_var_id) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);
		CreateEventStatement_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (CreateEventStatement_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				source.m_is_implicit = p_m_is_implicit;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);

				return source;
			}
		}
		// there is no instance matching the id
		CreateEventStatement_c new_inst = new CreateEventStatement_c(modelRoot,
				p_m_statement_id, p_m_is_implicit, p_m_var_id);
		return new_inst;
	}
	public CreateEventStatement_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_var_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof CreateEventStatement_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof CreateEventStatement_c)) {
			return false;
		}

		CreateEventStatement_c me = (CreateEventStatement_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((CreateEventStatement_c) elem)
								.getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((CreateEventStatement_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof CreateEventStatement_c)) {
			return false;
		}

		CreateEventStatement_c me = (CreateEventStatement_c) elem;
		if (!getStatement_idCachedValue().equals(
				((CreateEventStatement_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private boolean m_is_implicit;
	private java.util.UUID m_var_id;

	// declare association references from this class

	// referring navigation

	EventSpecificationStatement_c IsSupertypeEventSpecificationStatement;
	public void relateAcrossR701To(EventSpecificationStatement_c target) {
		relateAcrossR701To(target, true);
	}
	public void relateAcrossR701To(EventSpecificationStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeEventSpecificationStatement)
			return; // already related

		if (IsSupertypeEventSpecificationStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeEventSpecificationStatement != null) {

				IsSupertypeEventSpecificationStatement
						.clearBackPointerR701To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CreateEventStatement_c.relateAcrossR701To(EventSpecificationStatement_c target)",
									"Relate performed across R701 from Create Event Statement to Event Specification Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeEventSpecificationStatement = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR701To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR701From(EventSpecificationStatement_c target) {
		unrelateAcrossR701From(target, true);
	}
	public void unrelateAcrossR701From(EventSpecificationStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeEventSpecificationStatement == null)
			return; // already unrelated

		if (target != IsSupertypeEventSpecificationStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R701",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR701To(this);
		}

		if (IsSupertypeEventSpecificationStatement != null) {

			m_statement_id = IsSupertypeEventSpecificationStatement
					.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = IsSupertypeEventSpecificationStatement
						.getStatement_idCachedValue();
			}
			IsSupertypeEventSpecificationStatement = null;
			target.removeRef();
		}
	}

	public static CreateEventStatement_c getOneE_CESOnR701(
			EventSpecificationStatement_c[] targets) {
		return getOneE_CESOnR701(targets, null);
	}

	public static CreateEventStatement_c getOneE_CESOnR701(
			EventSpecificationStatement_c[] targets, ClassQueryInterface_c test) {
		CreateEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_CESOnR701(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CreateEventStatement_c getOneE_CESOnR701(
			EventSpecificationStatement_c target) {
		return getOneE_CESOnR701(target, null);
	}

	public static CreateEventStatement_c getOneE_CESOnR701(
			EventSpecificationStatement_c target, boolean loadComponent) {
		return getOneE_CESOnR701(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CreateEventStatement_c getOneE_CESOnR701(
			EventSpecificationStatement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_CESOnR701(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CreateEventStatement_c getOneE_CESOnR701(ModelRoot modelRoot,
			EventSpecificationStatement_c target, ClassQueryInterface_c test) {
		return getOneE_CESOnR701(modelRoot, target, test, true);
	}

	public static CreateEventStatement_c getOneE_CESOnR701(ModelRoot modelRoot,
			EventSpecificationStatement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneE_CESOnR701(modelRoot, target, test);
	}
	private static CreateEventStatement_c find_getOneE_CESOnR701(
			ModelRoot modelRoot, EventSpecificationStatement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			CreateEventStatement_c source = (CreateEventStatement_c) target.backPointer_IsSubtypeCreateEventStatementIsSubtype_R701;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR701(
			EventSpecificationStatement_c[] targets) {
		return getManyE_CESsOnR701(targets, null);
	}
	public static CreateEventStatement_c[] getManyE_CESsOnR701(
			EventSpecificationStatement_c[] targets, boolean loadComponent) {
		return getManyE_CESsOnR701(targets, null, loadComponent);
	}
	public static CreateEventStatement_c[] getManyE_CESsOnR701(
			EventSpecificationStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyE_CESsOnR701(targets, test, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR701(
			EventSpecificationStatement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CreateEventStatement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			CreateEventStatement_c source = (CreateEventStatement_c) targets[i].backPointer_IsSubtypeCreateEventStatementIsSubtype_R701;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			CreateEventStatement_c[] ret_set = new CreateEventStatement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreateEventStatement_c[0];
		}
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR701(
			EventSpecificationStatement_c target) {
		if (target != null) {
			EventSpecificationStatement_c[] targetArray = new EventSpecificationStatement_c[1];
			targetArray[0] = target;
			return getManyE_CESsOnR701(targetArray);
		} else {
			CreateEventStatement_c[] result = new CreateEventStatement_c[0];
			return result;
		}
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR701(
			EventSpecificationStatement_c target, boolean loadComponent) {
		if (target != null) {
			EventSpecificationStatement_c[] targetArray = new EventSpecificationStatement_c[1];
			targetArray[0] = target;
			return getManyE_CESsOnR701(targetArray, loadComponent);
		} else {
			CreateEventStatement_c[] result = new CreateEventStatement_c[0];
			return result;
		}
	}

	// referring navigation

	Variable_c ResultVariable;
	public void relateAcrossR710To(Variable_c target) {
		relateAcrossR710To(target, true);
	}
	public void relateAcrossR710To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ResultVariable)
			return; // already related

		if (ResultVariable != target) {

			Object oldKey = getInstanceKey();

			if (ResultVariable != null) {

				ResultVariable.clearBackPointerR710To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CreateEventStatement_c.relateAcrossR710To(Variable_c target)",
									"Relate performed across R710 from Create Event Statement to Variable without unrelate of prior instance.");
				}
			}

			ResultVariable = target;
			m_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR710To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR710From(Variable_c target) {
		unrelateAcrossR710From(target, true);
	}
	public void unrelateAcrossR710From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ResultVariable == null)
			return; // already unrelated

		if (target != ResultVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R710",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR710To(this);
		}

		if (ResultVariable != null) {

			m_var_id = ResultVariable.getVar_id();
			ResultVariable = null;
			target.removeRef();
		}
	}

	public static CreateEventStatement_c getOneE_CESOnR710(Variable_c[] targets) {
		return getOneE_CESOnR710(targets, null);
	}

	public static CreateEventStatement_c getOneE_CESOnR710(
			Variable_c[] targets, ClassQueryInterface_c test) {
		CreateEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_CESOnR710(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CreateEventStatement_c getOneE_CESOnR710(Variable_c target) {
		return getOneE_CESOnR710(target, null);
	}

	public static CreateEventStatement_c getOneE_CESOnR710(Variable_c target,
			boolean loadComponent) {
		return getOneE_CESOnR710(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CreateEventStatement_c getOneE_CESOnR710(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_CESOnR710(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CreateEventStatement_c getOneE_CESOnR710(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneE_CESOnR710(modelRoot, target, test, true);
	}

	public static CreateEventStatement_c getOneE_CESOnR710(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneE_CESOnR710(modelRoot, target, test);
	}
	private static CreateEventStatement_c find_getOneE_CESOnR710(
			ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CreateEventStatement_R710) {
				for (int i = 0; i < target.backPointer_CreateEventStatement_R710
						.size(); ++i) {
					CreateEventStatement_c source = (CreateEventStatement_c) target.backPointer_CreateEventStatement_R710
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c[] targets) {
		return getManyE_CESsOnR710(targets, null);
	}
	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c[] targets, boolean loadComponent) {
		return getManyE_CESsOnR710(targets, null, loadComponent);
	}
	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c[] targets, ClassQueryInterface_c test) {
		return getManyE_CESsOnR710(targets, test, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CreateEventStatement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CreateEventStatement_R710) {
				for (int j = 0; j < targets[i].backPointer_CreateEventStatement_R710
						.size(); ++j) {
					CreateEventStatement_c source = (CreateEventStatement_c) targets[i].backPointer_CreateEventStatement_R710
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			CreateEventStatement_c[] ret_set = new CreateEventStatement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreateEventStatement_c[0];
		}
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR710(Variable_c target) {
		return getManyE_CESsOnR710(target, null);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c target, boolean loadComponent) {
		return getManyE_CESsOnR710(target, null, loadComponent);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c target, ClassQueryInterface_c test) {
		return getManyE_CESsOnR710(target, test, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR710(
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new CreateEventStatement_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CreateEventStatement_R710) {
			for (int i = 0; i < target.backPointer_CreateEventStatement_R710
					.size(); ++i) {
				CreateEventStatement_c source = (CreateEventStatement_c) target.backPointer_CreateEventStatement_R710
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			CreateEventStatement_c[] ret_set = new CreateEventStatement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreateEventStatement_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	CreateSmEventStatement_c backPointer_IsSubtypeCreateSmEventStatementIsSubtype_R702;

	public void setCreateSmEventStatementOrderInChildListR702(
			CreateSmEventStatement_c target, int index) {
		unrelateAcrossR702From(target);
		CreateSmEventStatement_c[] elements = CreateSmEventStatement_c
				.getManyE_CSMEsOnR702(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR702From((CreateSmEventStatement_c) elements[i]);
			}
			count++;
		}
		relateAcrossR702To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR702To((CreateSmEventStatement_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR702To(CreateSmEventStatement_c target) {
		if (target != null) {
			target.relateAcrossR702To(this, true);
		}
	}

	public void relateAcrossR702To(CreateSmEventStatement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR702To(this, notifyChanges);
		}
	}

	public void setBackPointerR702To(CreateSmEventStatement_c target) {
		backPointer_IsSubtypeCreateSmEventStatementIsSubtype_R702 = target;
	}

	public void unrelateAcrossR702From(CreateSmEventStatement_c target) {
		if (target != null) {
			target.unrelateAcrossR702From(this, true);
		}
	}

	public void unrelateAcrossR702From(CreateSmEventStatement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR702From(this, notifyChanges);
		}
	}

	public void clearBackPointerR702To(CreateSmEventStatement_c target) {
		if (target == backPointer_IsSubtypeCreateSmEventStatementIsSubtype_R702) {
			backPointer_IsSubtypeCreateSmEventStatementIsSubtype_R702 = null;
		}
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateSmEventStatement_c[] targets) {
		return getOneE_CESOnR702(targets, null);
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateSmEventStatement_c[] targets, ClassQueryInterface_c test) {
		return getOneE_CESOnR702(targets, test, true);
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateSmEventStatement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		CreateEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					CreateEventStatement_c candidate_val = getOneE_CESOnR702(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneE_CESOnR702(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateSmEventStatement_c target) {
		return getOneE_CESOnR702(target, true);
	}
	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateSmEventStatement_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeCreateEventStatement;
		} else {
			return null;
		}
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateSmEventStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyE_CESsOnR702(targets, test, true);
	}

	public static CreateEventStatement_c [] getManyE_CESsOnR702(CreateSmEventStatement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new CreateEventStatement_c[0];
  
  
  LinkedHashSet<CreateEventStatement_c> elementsSet = new LinkedHashSet<CreateEventStatement_c>();
  for (int i = 0; i < targets.length; i++) {
    CreateEventStatement_c associate = targets[i].IsSupertypeCreateEventStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  CreateEventStatement_c[] result = new CreateEventStatement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateSmEventStatement_c[] targets) {
		return getManyE_CESsOnR702(targets, null);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateSmEventStatement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			CreateSmEventStatement_c[] targetArray = new CreateSmEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_CESsOnR702(targetArray, test, loadComponent);
		} else {
			CreateEventStatement_c[] result = new CreateEventStatement_c[0];
			return result;
		}

	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateSmEventStatement_c target, ClassQueryInterface_c test) {
		return getManyE_CESsOnR702(target, null, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateSmEventStatement_c target) {
		return getManyE_CESsOnR702(target, null, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateSmEventStatement_c target, boolean loadComponent) {
		return getManyE_CESsOnR702(target, null, loadComponent);
	}

	// referred to navigation

	CreateEventToExternalEntity_c backPointer_IsSubtypeCreateEventToExternalEntityIsSubtype_R702;

	public void setCreateEventToExternalEntityOrderInChildListR702(
			CreateEventToExternalEntity_c target, int index) {
		unrelateAcrossR702From(target);
		CreateEventToExternalEntity_c[] elements = CreateEventToExternalEntity_c
				.getManyE_CEEsOnR702(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR702From((CreateEventToExternalEntity_c) elements[i]);
			}
			count++;
		}
		relateAcrossR702To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR702To((CreateEventToExternalEntity_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR702To(CreateEventToExternalEntity_c target) {
		if (target != null) {
			target.relateAcrossR702To(this, true);
		}
	}

	public void relateAcrossR702To(CreateEventToExternalEntity_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR702To(this, notifyChanges);
		}
	}

	public void setBackPointerR702To(CreateEventToExternalEntity_c target) {
		backPointer_IsSubtypeCreateEventToExternalEntityIsSubtype_R702 = target;
	}

	public void unrelateAcrossR702From(CreateEventToExternalEntity_c target) {
		if (target != null) {
			target.unrelateAcrossR702From(this, true);
		}
	}

	public void unrelateAcrossR702From(CreateEventToExternalEntity_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR702From(this, notifyChanges);
		}
	}

	public void clearBackPointerR702To(CreateEventToExternalEntity_c target) {
		if (target == backPointer_IsSubtypeCreateEventToExternalEntityIsSubtype_R702) {
			backPointer_IsSubtypeCreateEventToExternalEntityIsSubtype_R702 = null;
		}
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateEventToExternalEntity_c[] targets) {
		return getOneE_CESOnR702(targets, null);
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateEventToExternalEntity_c[] targets, ClassQueryInterface_c test) {
		return getOneE_CESOnR702(targets, test, true);
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateEventToExternalEntity_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		CreateEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					CreateEventStatement_c candidate_val = getOneE_CESOnR702(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneE_CESOnR702(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateEventToExternalEntity_c target) {
		return getOneE_CESOnR702(target, true);
	}
	public static CreateEventStatement_c getOneE_CESOnR702(
			CreateEventToExternalEntity_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeCreateEventStatement;
		} else {
			return null;
		}
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateEventToExternalEntity_c[] targets, ClassQueryInterface_c test) {
		return getManyE_CESsOnR702(targets, test, true);
	}

	public static CreateEventStatement_c [] getManyE_CESsOnR702(CreateEventToExternalEntity_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new CreateEventStatement_c[0];
  
  
  LinkedHashSet<CreateEventStatement_c> elementsSet = new LinkedHashSet<CreateEventStatement_c>();
  for (int i = 0; i < targets.length; i++) {
    CreateEventStatement_c associate = targets[i].IsSupertypeCreateEventStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  CreateEventStatement_c[] result = new CreateEventStatement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateEventToExternalEntity_c[] targets) {
		return getManyE_CESsOnR702(targets, null);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateEventToExternalEntity_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			CreateEventToExternalEntity_c[] targetArray = new CreateEventToExternalEntity_c[1];
			targetArray[0] = target;
			return getManyE_CESsOnR702(targetArray, test, loadComponent);
		} else {
			CreateEventStatement_c[] result = new CreateEventStatement_c[0];
			return result;
		}

	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateEventToExternalEntity_c target, ClassQueryInterface_c test) {
		return getManyE_CESsOnR702(target, null, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateEventToExternalEntity_c target) {
		return getManyE_CESsOnR702(target, null, true);
	}

	public static CreateEventStatement_c[] getManyE_CESsOnR702(
			CreateEventToExternalEntity_c target, boolean loadComponent) {
		return getManyE_CESsOnR702(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R701
		EventSpecificationStatement_c relInst56181 = (EventSpecificationStatement_c) baseRoot
				.getInstanceList(EventSpecificationStatement_c.class).get(
						new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56181 == null) {
			relInst56181 = (EventSpecificationStatement_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(EventSpecificationStatement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst56181 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56181 = (EventSpecificationStatement_c) roots[i]
						.getInstanceList(EventSpecificationStatement_c.class)
						.get(new Object[]{m_statement_id});
				if (relInst56181 != null)
					break;
			}
		}
		//synchronized
		if (relInst56181 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56181) && !isProxy())) {
				relInst56181.relateAcrossR701To(this, notifyChanges);
			}
		}

		if (ResultVariable == null) {
			// R710
			Variable_c relInst56182 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56182 == null) {
				relInst56182 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_var_id});
			}
			if (relInst56182 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56182 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_var_id});
					if (relInst56182 != null)
						break;
				}
			}
			//synchronized
			if (relInst56182 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56182) && !isProxy())) {
					relInst56182.relateAcrossR710To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R701
		// E_ESS
		inst = IsSupertypeEventSpecificationStatement;
		unrelateAcrossR701From(IsSupertypeEventSpecificationStatement,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R710
		// V_VAR
		inst = ResultVariable;
		unrelateAcrossR710From(ResultVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(CreateEventStatement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final CreateEventStatement_c inst = (CreateEventStatement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static CreateEventStatement_c CreateEventStatementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		CreateEventStatement_c result = findCreateEventStatementInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static CreateEventStatement_c findCreateEventStatementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CreateEventStatement_c x = (CreateEventStatement_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static CreateEventStatement_c CreateEventStatementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CreateEventStatementInstance(modelRoot, test, true);
	}

	public static CreateEventStatement_c CreateEventStatementInstance(
			ModelRoot modelRoot) {
		return CreateEventStatementInstance(modelRoot, null, true);
	}

	public static CreateEventStatement_c[] CreateEventStatementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventStatement_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CreateEventStatement_c x = (CreateEventStatement_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				CreateEventStatement_c[] ret_set = new CreateEventStatement_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new CreateEventStatement_c[0];
			}
		}
	}
	public static CreateEventStatement_c[] CreateEventStatementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CreateEventStatementInstances(modelRoot, test, true);
	}
	public static CreateEventStatement_c[] CreateEventStatementInstances(
			ModelRoot modelRoot) {
		return CreateEventStatementInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Create Event Statement.dispose call: ";
		EventSpecificationStatement_c testR701Inst2 = EventSpecificationStatement_c
				.getOneE_ESSOnR701(this, false);

		if (testR701Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "701 ";
		}
		CreateSmEventStatement_c testR702Inst1 = CreateSmEventStatement_c
				.getOneE_CSMEOnR702(this, false);

		if (testR702Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "702 ";
		}
		CreateEventToExternalEntity_c testR702Inst2 = CreateEventToExternalEntity_c
				.getOneE_CEEOnR702(this, false);

		if (testR702Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "702 ";
		}
		Variable_c testR710Inst = Variable_c.getOneV_VAROnR710(this, false);

		if (testR710Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "710 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Create Event Statement",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("var_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeEventSpecificationStatement != null) {
			return IsSupertypeEventSpecificationStatement
					.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeEventSpecificationStatement != null) {
			return IsSupertypeEventSpecificationStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeEventSpecificationStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public boolean getIs_implicit() {
		return m_is_implicit;
	}

	public void setIs_implicit(boolean newValue) {
		m_is_implicit = newValue;
	}
	public long getVar_idLongBased() {
		if (ResultVariable != null) {
			return ResultVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getVar_id() {
		if (ResultVariable != null) {
			return ResultVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getVar_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_var_id))
			return m_var_id;
		else
			return getVar_id();
	}

	public void setVar_id(java.util.UUID newValue) {
		m_var_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Create Event Statement", //$NON-NLS-1$
						" Operation entered: Create Event Statement::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		CreateEventStatement_c[] objs = CreateEventStatement_c
				.CreateEventStatementInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Create Event Statement", //$NON-NLS-1$
				" Operation entered: Create Event Statement::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class CreateEventStatement_c_test56184_c
				implements
					ClassQueryInterface_c {
			CreateEventStatement_c_test56184_c(java.util.UUID p56185) {
				m_p56185 = p56185;
			}
			private java.util.UUID m_p56185;
			public boolean evaluate(Object candidate) {
				CreateEventStatement_c selected = (CreateEventStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56185));
				return retval;
			}
		}

		CreateEventStatement_c[] objs56183 = CreateEventStatement_c
				.CreateEventStatementInstances(modelRoot,
						new CreateEventStatement_c_test56184_c(
								getStatement_id()));

		if (((objs56183.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Create Event Statement", //$NON-NLS-1$
								"Consistency: Object: Create Event Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56183.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56183.length), e);
			}
			retval = false;

		}

		if (((objs56183.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Create Event Statement", //$NON-NLS-1$
								"Consistency: Object: Create Event Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56183.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56183.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Create Event Statement is a subtype in association: rel.Numb = 701
		// The supertype class is: Event Specification Statement
		class EventSpecificationStatement_c_test56189_c
				implements
					ClassQueryInterface_c {
			EventSpecificationStatement_c_test56189_c(java.util.UUID p56190) {
				m_p56190 = p56190;
			}
			private java.util.UUID m_p56190;
			public boolean evaluate(Object candidate) {
				EventSpecificationStatement_c selected = (EventSpecificationStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56190));
				return retval;
			}
		}

		EventSpecificationStatement_c[] objs56188 = EventSpecificationStatement_c
				.EventSpecificationStatementInstances(modelRoot,
						new EventSpecificationStatement_c_test56189_c(
								getStatement_id()));

		if (((objs56188.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Create Event Statement", //$NON-NLS-1$
								"Consistency: Object: Create Event Statement: Association: 701: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56188.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event Statement: Association: 701: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56188.length), e);
			}
			retval = false;

		}

		// Create Event Statement is a referring class in association: rel.Numb = 710
		// The participating class is: Variable
		class Variable_c_test56192_c implements ClassQueryInterface_c {
			Variable_c_test56192_c(java.util.UUID p56193) {
				m_p56193 = p56193;
			}
			private java.util.UUID m_p56193;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p56193));
				return retval;
			}
		}

		Variable_c[] objs56191 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test56192_c(getVar_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56191.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Create Event Statement", //$NON-NLS-1$
								"Consistency: Object: Create Event Statement: Association: 710: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56191.length)
										+ " Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event Statement: Association: 710: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56191.length)
										+ " Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 702
		int objs56194 = 0;
		// Subtype Object: Create SM Event Statement
		class CreateSmEventStatement_c_test56195_c
				implements
					ClassQueryInterface_c {
			CreateSmEventStatement_c_test56195_c(java.util.UUID p56196) {
				m_p56196 = p56196;
			}
			private java.util.UUID m_p56196;
			public boolean evaluate(Object candidate) {
				CreateSmEventStatement_c selected = (CreateSmEventStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56196));
				return retval;
			}
		}

		CreateSmEventStatement_c[] objs56197 = CreateSmEventStatement_c
				.CreateSmEventStatementInstances(modelRoot,
						new CreateSmEventStatement_c_test56195_c(
								getStatement_id()));

		objs56194 = objs56194 + objs56197.length;
		// Subtype Object: Create Event to External Entity
		class CreateEventToExternalEntity_c_test56198_c
				implements
					ClassQueryInterface_c {
			CreateEventToExternalEntity_c_test56198_c(java.util.UUID p56199) {
				m_p56199 = p56199;
			}
			private java.util.UUID m_p56199;
			public boolean evaluate(Object candidate) {
				CreateEventToExternalEntity_c selected = (CreateEventToExternalEntity_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56199));
				return retval;
			}
		}

		CreateEventToExternalEntity_c[] objs56200 = CreateEventToExternalEntity_c
				.CreateEventToExternalEntityInstances(modelRoot,
						new CreateEventToExternalEntity_c_test56198_c(
								getStatement_id()));

		objs56194 = objs56194 + objs56200.length;
		if (objs56194 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Create Event Statement", //$NON-NLS-1$
								"Consistency: Object: Create Event Statement: Association: 702: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56194)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event Statement: Association: 702: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56194), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Create Event Statement",
				" Operation entered: CreateEventStatement::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		CreateSmEventStatement_c v_csme = CreateSmEventStatement_c
				.getOneE_CSMEOnR702(this);

		if (((v_csme != null))) {

			this.unrelateAcrossR702From(v_csme);

			if (v_csme != null) {
				v_csme.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		CreateEventToExternalEntity_c v_cee = CreateEventToExternalEntity_c
				.getOneE_CEEOnR702(this);

		if (((v_cee != null))) {

			this.unrelateAcrossR702From(v_cee);

			if (v_cee != null) {
				v_cee.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Variable_c v_var = Variable_c.getOneV_VAROnR710(this);

		if (((v_var != null))) {

			this.unrelateAcrossR710From(v_var);

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Create Event Statement",
				" Operation entered: CreateEventStatement::Execute");
		final ModelRoot modelRoot = getModelRoot();
		CreateSmEventStatement_c v_createSMEvt = CreateSmEventStatement_c
				.getOneE_CSMEOnR702(this);

		CreateEventToExternalEntity_c v_createEEEvt = CreateEventToExternalEntity_c
				.getOneE_CEEOnR702(this);

		if (((v_createSMEvt != null))) {

			if (v_createSMEvt != null) {
				v_createSMEvt.Execute(p_Stack_frame_id);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_createEEEvt != null))) {

			Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c
					.getOneACT_BLKOnR823(Variable_c.getOneV_VAROnR710(this)));

			String v_pathMsg = "<No Path Available - Empty instance>";

			if (((v_body != null))) {

				v_pathMsg = v_body.Getpath();

			}

			User_c.Logerror(
					"Create Event Statement.execute: Executing events to External Entities is not supported at this time.",
					v_pathMsg);

		}

	} // End execute
	public void Hookupevtinsttohandle(final java.util.UUID p_Evtinst_id,
			final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Create Event Statement",
						" Operation entered: CreateEventStatement::Hookupevtinsttohandle");
		final ModelRoot modelRoot = getModelRoot();

	} // End hookUpEvtInstToHandle

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Create Event Statement
