      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InterfaceOperationInvocation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_INTERFACE_OPERATION_INVOCATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class InterfaceOperationInvocation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public InterfaceOperationInvocation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       int          p_m_opnamelinenumber,
       int          p_m_opnamecolumn,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_providedop_id,
       java.util.UUID         p_m_requiredop_id,
       java.util.UUID         p_m_value_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       m_opnamelinenumber = p_m_opnamelinenumber;
       m_opnamecolumn = p_m_opnamecolumn;
       m_ownernamelinenumber = p_m_ownernamelinenumber;
       m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_providedop_id = IdAssigner.preprocessUUID(p_m_providedop_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_requiredop_id = IdAssigner.preprocessUUID(p_m_requiredop_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
        
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }
  static public InterfaceOperationInvocation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       int          p_m_opnamelinenumber,
       int          p_m_opnamecolumn,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_providedop_id,
       java.util.UUID         p_m_requiredop_id,
       java.util.UUID         p_m_value_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);
      InterfaceOperationInvocation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_statement_id};
          new_inst = (InterfaceOperationInvocation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       new_inst.m_opnamelinenumber = p_m_opnamelinenumber;
       new_inst.m_opnamecolumn = p_m_opnamecolumn;
       new_inst.m_ownernamelinenumber = p_m_ownernamelinenumber;
       new_inst.m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_providedop_id = IdAssigner.preprocessUUID(p_m_providedop_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_requiredop_id = IdAssigner.preprocessUUID(p_m_requiredop_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new InterfaceOperationInvocation_c(modelRoot,
p_m_statement_id,
p_m_opnamelinenumber,
p_m_opnamecolumn,
p_m_ownernamelinenumber,
p_m_ownernamecolumn,
p_m_providedop_id,
p_m_requiredop_id,
p_m_value_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public InterfaceOperationInvocation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       int          p_m_opnamelinenumber,
       int          p_m_opnamecolumn,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_providedop_id,
       java.util.UUID         p_m_requiredop_id,
       java.util.UUID         p_m_value_id){
    InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);
    InterfaceOperationInvocation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_statement_id
            };
        source = (InterfaceOperationInvocation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       source.m_opnamelinenumber = p_m_opnamelinenumber;
       source.m_opnamecolumn = p_m_opnamecolumn;
       source.m_ownernamelinenumber = p_m_ownernamelinenumber;
       source.m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_providedop_id = IdAssigner.preprocessUUID(p_m_providedop_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_requiredop_id = IdAssigner.preprocessUUID(p_m_requiredop_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    InterfaceOperationInvocation_c new_inst = new InterfaceOperationInvocation_c(modelRoot,
p_m_statement_id,
p_m_opnamelinenumber,
p_m_opnamecolumn,
p_m_ownernamelinenumber,
p_m_ownernamecolumn,
p_m_providedop_id,
p_m_requiredop_id,
p_m_value_id
);
    return new_inst;
  }
  public InterfaceOperationInvocation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_statement_id = IdAssigner.NULL_UUID;   
     m_providedop_id = IdAssigner.NULL_UUID;   
     m_requiredop_id = IdAssigner.NULL_UUID;   
     m_value_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_statement_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_statement_id !=  p_newKey ){
	
		m_statement_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof InterfaceOperationInvocation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof InterfaceOperationInvocation_c)) {
           return false;
       }
       
       InterfaceOperationInvocation_c me = (InterfaceOperationInvocation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID.equals(((InterfaceOperationInvocation_c)elem).getStatement_id())) && this != elem)) {
      	return false;
      }
      if (!getStatement_id().equals(((InterfaceOperationInvocation_c)elem).getStatement_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof InterfaceOperationInvocation_c)) {
           return false;
       }
       
       InterfaceOperationInvocation_c me = (InterfaceOperationInvocation_c)elem;
      if (!getStatement_idCachedValue().equals(((InterfaceOperationInvocation_c)elem).getStatement_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_statement_id ;
  private int          m_opnamelinenumber ;
  private int          m_opnamecolumn ;
  private int          m_ownernamelinenumber ;
  private int          m_ownernamecolumn ;
  private java.util.UUID         m_providedop_id ;
  private java.util.UUID         m_requiredop_id ;
  private java.util.UUID         m_value_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Value_c HasTargetValue ;
public void relateAcrossR629To(Value_c target)
{
	relateAcrossR629To(target, true);
}
public void relateAcrossR629To(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasTargetValue) return;  // already related

    if ( HasTargetValue != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasTargetValue != null) {
    
        HasTargetValue.clearBackPointerR629To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperationInvocation_c.relateAcrossR629To(Value_c target)", 
			"Relate performed across R629 from Interface Operation Invocation to Value without unrelate of prior instance.");  
		}
    }
                
    	HasTargetValue = target ;
        m_value_id = target.getValue_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR629To(this);
        target.addRef();
    }
}
public void unrelateAcrossR629From(Value_c target)
{
	unrelateAcrossR629From(target, true);
}
public void unrelateAcrossR629From(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasTargetValue == null) return;  // already unrelated
	
	if (target != HasTargetValue) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R629", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR629To(this);
    }
    

      if(HasTargetValue != null) {
      
        m_value_id = HasTargetValue.getValue_id();
        HasTargetValue = null ;
        target.removeRef();
    }
}

  
    
      
public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(Value_c [] targets)
{
    return getOneACT_IOPOnR629(targets, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(Value_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IOPOnR629(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(Value_c target)
{
  return getOneACT_IOPOnR629(target, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(Value_c target, boolean loadComponent)
{
    return getOneACT_IOPOnR629(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IOPOnR629(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
	return getOneACT_IOPOnR629(modelRoot, target, test, true);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR629(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IOPOnR629(modelRoot,target,test);
}
private static InterfaceOperationInvocation_c find_getOneACT_IOPOnR629(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629) {
	    for ( int i = 0; i < target.backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.size(); ++i ) {
	      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c [] targets)
{
  return getManyACT_IOPsOnR629(targets, null);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c [] targets, boolean loadComponent)
{
  return getManyACT_IOPsOnR629(targets, null, loadComponent);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR629(targets, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629) {
	    for (int j = 0; j < targets[i].backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.size(); ++j) {
	      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)targets[i].backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperationInvocation_c[0];
  }
  }

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c target)
{
  return getManyACT_IOPsOnR629(target, null);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c target, boolean loadComponent)
{
  return getManyACT_IOPsOnR629(target, null, loadComponent);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c target, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR629(target, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR629(Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new InterfaceOperationInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629) {
    for (int i = 0; i < target.backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.size(); ++i) {
      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new InterfaceOperationInvocation_c[0];
	}
  }


  
    
// referring navigation

Statement_c IsSupertypeStatement ;
public void relateAcrossR603To(Statement_c target)
{
	relateAcrossR603To(target, true);
}
public void relateAcrossR603To(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeStatement) return;  // already related

    if ( IsSupertypeStatement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeStatement != null) {
    
        IsSupertypeStatement.clearBackPointerR603To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperationInvocation_c.relateAcrossR603To(Statement_c target)", 
			"Relate performed across R603 from Interface Operation Invocation to Statement without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeStatement = target ;
        m_statement_id = target.getStatement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR603To(this);
        target.addRef();
    }
}
public void unrelateAcrossR603From(Statement_c target)
{
	unrelateAcrossR603From(target, true);
}
public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeStatement == null) return;  // already unrelated
	
	if (target != IsSupertypeStatement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R603", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR603To(this);
    }
    

      if(IsSupertypeStatement != null) {
      
        m_statement_id = IsSupertypeStatement.getStatement_id();
        IsSupertypeStatement = null ;
        target.removeRef();
    }
}

  
    
      
public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(Statement_c [] targets)
{
    return getOneACT_IOPOnR603(targets, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IOPOnR603(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(Statement_c target)
{
  return getOneACT_IOPOnR603(target, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(Statement_c target, boolean loadComponent)
{
    return getOneACT_IOPOnR603(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IOPOnR603(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
	return getOneACT_IOPOnR603(modelRoot, target, test, true);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IOPOnR603(modelRoot,target,test);
}
private static InterfaceOperationInvocation_c find_getOneACT_IOPOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_IsSubtypeInterfaceOperationInvocationIsSubtype_R603;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR603(Statement_c [] targets)
{
  return getManyACT_IOPsOnR603(targets, null);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR603(Statement_c [] targets, boolean loadComponent)
{
  return getManyACT_IOPsOnR603(targets, null, loadComponent);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR603(targets, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR603(Statement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)targets[i].backPointer_IsSubtypeInterfaceOperationInvocationIsSubtype_R603;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperationInvocation_c[0];
  }
  }

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR603(Statement_c target)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_IOPsOnR603(targetArray);
  } else {
    InterfaceOperationInvocation_c [] result = new InterfaceOperationInvocation_c [0] ;
  return result ;
}
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR603(Statement_c target, boolean loadComponent)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_IOPsOnR603(targetArray, loadComponent);
  } else {
    InterfaceOperationInvocation_c [] result = new InterfaceOperationInvocation_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ProvidedOperation_c IsInvocationOfProvidedOperation ;
public void relateAcrossR680To(ProvidedOperation_c target)
{
	relateAcrossR680To(target, true);
}
public void relateAcrossR680To(ProvidedOperation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsInvocationOfProvidedOperation) return;  // already related

    if ( IsInvocationOfProvidedOperation != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsInvocationOfProvidedOperation != null) {
    
        IsInvocationOfProvidedOperation.clearBackPointerR680To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperationInvocation_c.relateAcrossR680To(ProvidedOperation_c target)", 
			"Relate performed across R680 from Interface Operation Invocation to Provided Operation without unrelate of prior instance.");  
		}
    }
                
    	IsInvocationOfProvidedOperation = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_providedop_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR680To(this);
        target.addRef();
    }
}
public void unrelateAcrossR680From(ProvidedOperation_c target)
{
	unrelateAcrossR680From(target, true);
}
public void unrelateAcrossR680From(ProvidedOperation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsInvocationOfProvidedOperation == null) return;  // already unrelated
	
	if (target != IsInvocationOfProvidedOperation) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R680", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR680To(this);
    }
    

      if(IsInvocationOfProvidedOperation != null) {
      
        m_providedop_id = IsInvocationOfProvidedOperation.getId();
        if(IdAssigner.NULL_UUID.equals(m_providedop_id))
        {
          m_providedop_id = IsInvocationOfProvidedOperation.getIdCachedValue();
        }       
        IsInvocationOfProvidedOperation = null ;
        target.removeRef();
    }
}

  
    
      
public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ProvidedOperation_c [] targets)
{
    return getOneACT_IOPOnR680(targets, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ProvidedOperation_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IOPOnR680(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ProvidedOperation_c target)
{
  return getOneACT_IOPOnR680(target, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ProvidedOperation_c target, boolean loadComponent)
{
    return getOneACT_IOPOnR680(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ProvidedOperation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IOPOnR680(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ModelRoot modelRoot, ProvidedOperation_c target, ClassQueryInterface_c test)
{
	return getOneACT_IOPOnR680(modelRoot, target, test, true);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR680(ModelRoot modelRoot, ProvidedOperation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IOPOnR680(modelRoot,target,test);
}
private static InterfaceOperationInvocation_c find_getOneACT_IOPOnR680(ModelRoot modelRoot, ProvidedOperation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_InterfaceOperationInvocation_R680) {
	    for ( int i = 0; i < target.backPointer_InterfaceOperationInvocation_R680.size(); ++i ) {
	      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_InterfaceOperationInvocation_R680.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c [] targets)
{
  return getManyACT_IOPsOnR680(targets, null);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c [] targets, boolean loadComponent)
{
  return getManyACT_IOPsOnR680(targets, null, loadComponent);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR680(targets, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_InterfaceOperationInvocation_R680) {
	    for (int j = 0; j < targets[i].backPointer_InterfaceOperationInvocation_R680.size(); ++j) {
	      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)targets[i].backPointer_InterfaceOperationInvocation_R680.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperationInvocation_c[0];
  }
  }

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c target)
{
  return getManyACT_IOPsOnR680(target, null);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c target, boolean loadComponent)
{
  return getManyACT_IOPsOnR680(target, null, loadComponent);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c target, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR680(target, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR680(ProvidedOperation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new InterfaceOperationInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_InterfaceOperationInvocation_R680) {
    for (int i = 0; i < target.backPointer_InterfaceOperationInvocation_R680.size(); ++i) {
      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_InterfaceOperationInvocation_R680.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new InterfaceOperationInvocation_c[0];
	}
  }


  
    
// referring navigation

RequiredOperation_c IsInvocationOfRequiredOperation ;
public void relateAcrossR657To(RequiredOperation_c target)
{
	relateAcrossR657To(target, true);
}
public void relateAcrossR657To(RequiredOperation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsInvocationOfRequiredOperation) return;  // already related

    if ( IsInvocationOfRequiredOperation != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsInvocationOfRequiredOperation != null) {
    
        IsInvocationOfRequiredOperation.clearBackPointerR657To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperationInvocation_c.relateAcrossR657To(RequiredOperation_c target)", 
			"Relate performed across R657 from Interface Operation Invocation to Required Operation without unrelate of prior instance.");  
		}
    }
                
    	IsInvocationOfRequiredOperation = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_requiredop_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR657To(this);
        target.addRef();
    }
}
public void unrelateAcrossR657From(RequiredOperation_c target)
{
	unrelateAcrossR657From(target, true);
}
public void unrelateAcrossR657From(RequiredOperation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsInvocationOfRequiredOperation == null) return;  // already unrelated
	
	if (target != IsInvocationOfRequiredOperation) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R657", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR657To(this);
    }
    

      if(IsInvocationOfRequiredOperation != null) {
      
        m_requiredop_id = IsInvocationOfRequiredOperation.getId();
        if(IdAssigner.NULL_UUID.equals(m_requiredop_id))
        {
          m_requiredop_id = IsInvocationOfRequiredOperation.getIdCachedValue();
        }       
        IsInvocationOfRequiredOperation = null ;
        target.removeRef();
    }
}

  
    
      
public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(RequiredOperation_c [] targets)
{
    return getOneACT_IOPOnR657(targets, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(RequiredOperation_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IOPOnR657(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(RequiredOperation_c target)
{
  return getOneACT_IOPOnR657(target, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(RequiredOperation_c target, boolean loadComponent)
{
    return getOneACT_IOPOnR657(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(RequiredOperation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IOPOnR657(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(ModelRoot modelRoot, RequiredOperation_c target, ClassQueryInterface_c test)
{
	return getOneACT_IOPOnR657(modelRoot, target, test, true);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR657(ModelRoot modelRoot, RequiredOperation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IOPOnR657(modelRoot,target,test);
}
private static InterfaceOperationInvocation_c find_getOneACT_IOPOnR657(ModelRoot modelRoot, RequiredOperation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_InterfaceOperationInvocation_R657) {
	    for ( int i = 0; i < target.backPointer_InterfaceOperationInvocation_R657.size(); ++i ) {
	      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_InterfaceOperationInvocation_R657.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c [] targets)
{
  return getManyACT_IOPsOnR657(targets, null);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c [] targets, boolean loadComponent)
{
  return getManyACT_IOPsOnR657(targets, null, loadComponent);
}
public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR657(targets, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_InterfaceOperationInvocation_R657) {
	    for (int j = 0; j < targets[i].backPointer_InterfaceOperationInvocation_R657.size(); ++j) {
	      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)targets[i].backPointer_InterfaceOperationInvocation_R657.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperationInvocation_c[0];
  }
  }

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c target)
{
  return getManyACT_IOPsOnR657(target, null);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c target, boolean loadComponent)
{
  return getManyACT_IOPsOnR657(target, null, loadComponent);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c target, ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR657(target, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR657(RequiredOperation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new InterfaceOperationInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_InterfaceOperationInvocation_R657) {
    for (int i = 0; i < target.backPointer_InterfaceOperationInvocation_R657.size(); ++i) {
      InterfaceOperationInvocation_c source = (InterfaceOperationInvocation_c)target.backPointer_InterfaceOperationInvocation_R657.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new InterfaceOperationInvocation_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ActualParameter_c> backPointer_TakesActualParameterTakes_R679 = new ArrayList<ActualParameter_c>();

public void setActualParameterOrderInChildListR679(ActualParameter_c target, int index) {
	unrelateAcrossR679From(target);
	ActualParameter_c[] elements = ActualParameter_c.getManyV_PARsOnR679(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR679From((ActualParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR679To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR679To((ActualParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR679To(ActualParameter_c target)
{
  if (target != null) {
    target.relateAcrossR679To(this, true) ;
  }
}

public void relateAcrossR679To(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR679To(this, notifyChanges) ;
  }
}

public void setBackPointerR679To(ActualParameter_c target)
{
  	synchronized (backPointer_TakesActualParameterTakes_R679) {
		backPointer_TakesActualParameterTakes_R679.add(target);
	}
}

public void unrelateAcrossR679From(ActualParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR679From(this, true) ;
  }
}

public void unrelateAcrossR679From(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR679From(this, notifyChanges) ;
  }
}

public void clearBackPointerR679To(ActualParameter_c target)
{
  synchronized (backPointer_TakesActualParameterTakes_R679) {
	    backPointer_TakesActualParameterTakes_R679.remove(target);
	}
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR679(ActualParameter_c [] targets)
{
    return getOneACT_IOPOnR679(targets, null);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR679(ActualParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_IOPOnR679(targets, test, true);
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR679(ActualParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    InterfaceOperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             InterfaceOperationInvocation_c candidate_val = getOneACT_IOPOnR679(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_IOPOnR679(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static InterfaceOperationInvocation_c getOneACT_IOPOnR679(ActualParameter_c target)
{
	return getOneACT_IOPOnR679(target, true);
}
public static InterfaceOperationInvocation_c getOneACT_IOPOnR679(ActualParameter_c target, boolean loadComponent)
{
  if (target != null) {
    return target.TakenByInterfaceOperationInvocation ;
  } else {
    return null;
  }
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_IOPsOnR679(targets, test, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InterfaceOperationInvocation_c[0];
  
  
  LinkedHashSet<InterfaceOperationInvocation_c> elementsSet = new LinkedHashSet<InterfaceOperationInvocation_c>();
  for (int i = 0; i < targets.length; i++) {
    InterfaceOperationInvocation_c associate = targets[i].TakenByInterfaceOperationInvocation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  InterfaceOperationInvocation_c[] result = new InterfaceOperationInvocation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c [] targets)
{
  return getManyACT_IOPsOnR679(targets, null);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActualParameter_c [] targetArray = new ActualParameter_c[1];
    targetArray[0] = target;
    return getManyACT_IOPsOnR679(targetArray, test, loadComponent);
  } else {
    InterfaceOperationInvocation_c [] result = new InterfaceOperationInvocation_c [0] ;
    return result ;
  }
  
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_IOPsOnR679(target, null, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c target)
{
    return getManyACT_IOPsOnR679(target, null, true);
}

public static InterfaceOperationInvocation_c [] getManyACT_IOPsOnR679(ActualParameter_c target, boolean loadComponent)
{
    return getManyACT_IOPsOnR679(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (HasTargetValue == null) {          
      // R629
      Value_c relInst40338 = (Value_c) baseRoot.getInstanceList(Value_c.class).get(new Object[] {m_value_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40338 == null) {
      			relInst40338 = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).get(new Object[] {m_value_id});
      		}
			if (relInst40338 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40338 = (Value_c) roots[i].getInstanceList(Value_c.class).get(new Object[] {m_value_id});
					if (relInst40338 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40338 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40338) && !isProxy())) {
	      relInst40338.relateAcrossR629To(this, notifyChanges);
	  }
	  }
	}
	          

      // R603
      Statement_c relInst40339 = (Statement_c) baseRoot.getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40339 == null) {
      			relInst40339 = (Statement_c) Ooaofooa.getDefaultInstance().getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
      		}
			if (relInst40339 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40339 = (Statement_c) roots[i].getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
					if (relInst40339 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40339 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40339) && !isProxy())) {
	      relInst40339.relateAcrossR603To(this, notifyChanges);
	  }
	  }
	          

	if (IsInvocationOfProvidedOperation == null) {          
      // R680
      ProvidedOperation_c relInst40340 = (ProvidedOperation_c) baseRoot.getInstanceList(ProvidedOperation_c.class).get(new Object[] {m_providedop_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40340 == null) {
      			relInst40340 = (ProvidedOperation_c) Ooaofooa.getDefaultInstance().getInstanceList(ProvidedOperation_c.class).get(new Object[] {m_providedop_id});
      		}
			if (relInst40340 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40340 = (ProvidedOperation_c) roots[i].getInstanceList(ProvidedOperation_c.class).get(new Object[] {m_providedop_id});
					if (relInst40340 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40340 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40340) && !isProxy())) {
	      relInst40340.relateAcrossR680To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsInvocationOfRequiredOperation == null) {          
      // R657
      RequiredOperation_c relInst40341 = (RequiredOperation_c) baseRoot.getInstanceList(RequiredOperation_c.class).get(new Object[] {m_requiredop_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40341 == null) {
      			relInst40341 = (RequiredOperation_c) Ooaofooa.getDefaultInstance().getInstanceList(RequiredOperation_c.class).get(new Object[] {m_requiredop_id});
      		}
			if (relInst40341 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40341 = (RequiredOperation_c) roots[i].getInstanceList(RequiredOperation_c.class).get(new Object[] {m_requiredop_id});
					if (relInst40341 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40341 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40341) && !isProxy())) {
	      relInst40341.relateAcrossR657To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R629
      // V_VAL
		  inst=HasTargetValue;
			unrelateAcrossR629From(HasTargetValue, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R603
      // ACT_SMT
		  inst=IsSupertypeStatement;
			unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R680
      // SPR_PO
		  inst=IsInvocationOfProvidedOperation;
			unrelateAcrossR680From(IsInvocationOfProvidedOperation, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R657
      // SPR_RO
		  inst=IsInvocationOfRequiredOperation;
			unrelateAcrossR657From(IsInvocationOfRequiredOperation, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InterfaceOperationInvocation_c inst = (InterfaceOperationInvocation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static InterfaceOperationInvocation_c InterfaceOperationInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		InterfaceOperationInvocation_c result=findInterfaceOperationInvocationInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static InterfaceOperationInvocation_c findInterfaceOperationInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				InterfaceOperationInvocation_c x = (InterfaceOperationInvocation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static InterfaceOperationInvocation_c InterfaceOperationInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return InterfaceOperationInvocationInstance(modelRoot,test,true);
  }
  
  public static InterfaceOperationInvocation_c InterfaceOperationInvocationInstance(ModelRoot modelRoot)
  {
	 return InterfaceOperationInvocationInstance(modelRoot,null,true);
  }

  public static InterfaceOperationInvocation_c [] InterfaceOperationInvocationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(InterfaceOperationInvocation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					InterfaceOperationInvocation_c x = (InterfaceOperationInvocation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				InterfaceOperationInvocation_c[] ret_set = new InterfaceOperationInvocation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InterfaceOperationInvocation_c[0];
			}		
		} 
  }
  public static InterfaceOperationInvocation_c [] InterfaceOperationInvocationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  InterfaceOperationInvocationInstances(modelRoot,test,true);
  }
  public static InterfaceOperationInvocation_c [] InterfaceOperationInvocationInstances(ModelRoot modelRoot)
  {
	return InterfaceOperationInvocationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Interface Operation Invocation.dispose call: ";
	Value_c testR629Inst = Value_c.getOneV_VALOnR629(this, false);

	if ( testR629Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "629 ";
	}
	ActualParameter_c testR679Inst = ActualParameter_c.getOneV_PAROnR679(this, false);

	if ( testR679Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "679 ";	
	}
	Statement_c testR603Inst26 = Statement_c.getOneACT_SMTOnR603(this, false);

	if ( testR603Inst26 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "603 ";
	}
	ProvidedOperation_c testR680Inst = ProvidedOperation_c.getOneSPR_POOnR680(this, false);

	if ( testR680Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "680 ";
	}
	RequiredOperation_c testR657Inst = RequiredOperation_c.getOneSPR_ROOnR657(this, false);

	if ( testR657Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "657 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Interface Operation Invocation", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("statement_id")){
         return true;
      }
      if(attributeName.equals("providedop_id")){
         return true;
      }
      if(attributeName.equals("requiredop_id")){
         return true;
      }
      if(attributeName.equals("value_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getStatement_idLongBased()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getStatement_id()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeStatement != null );
 
 }                  

  public java.util.UUID getStatement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_statement_id) )
      return m_statement_id;
    else
      return getStatement_id();
  }
  
  public void setStatement_id(java.util.UUID newValue)
  {
   m_statement_id = IdAssigner.preprocessUUID(newValue);
  }
  public int getOpnamelinenumber()
  {
    return m_opnamelinenumber ;
  }


  public void setOpnamelinenumber(int newValue)
  {
   m_opnamelinenumber = newValue ;
  }
  public int getOpnamecolumn()
  {
    return m_opnamecolumn ;
  }


  public void setOpnamecolumn(int newValue)
  {
   m_opnamecolumn = newValue ;
  }
  public int getOwnernamelinenumber()
  {
    return m_ownernamelinenumber ;
  }


  public void setOwnernamelinenumber(int newValue)
  {
   m_ownernamelinenumber = newValue ;
  }
  public int getOwnernamecolumn()
  {
    return m_ownernamecolumn ;
  }


  public void setOwnernamecolumn(int newValue)
  {
   m_ownernamecolumn = newValue ;
  }
  public long getProvidedop_idLongBased()
  {
    if ( IsInvocationOfProvidedOperation != null )
    {
      return IsInvocationOfProvidedOperation.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getProvidedop_id()
  {
    if ( IsInvocationOfProvidedOperation != null )
    {
      return IsInvocationOfProvidedOperation.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getProvidedop_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_providedop_id) )
      return m_providedop_id;
    else
      return getProvidedop_id();
  }
  
  public void setProvidedop_id(java.util.UUID newValue)
  {
   m_providedop_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getRequiredop_idLongBased()
  {
    if ( IsInvocationOfRequiredOperation != null )
    {
      return IsInvocationOfRequiredOperation.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRequiredop_id()
  {
    if ( IsInvocationOfRequiredOperation != null )
    {
      return IsInvocationOfRequiredOperation.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRequiredop_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_requiredop_id) )
      return m_requiredop_id;
    else
      return getRequiredop_id();
  }
  
  public void setRequiredop_id(java.util.UUID newValue)
  {
   m_requiredop_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getValue_idLongBased()
  {
    if ( HasTargetValue != null )
    {
      return HasTargetValue.getValue_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getValue_id()
  {
    if ( HasTargetValue != null )
    {
      return HasTargetValue.getValue_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getValue_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_value_id) )
      return m_value_id;
    else
      return getValue_id();
  }
  
  public void setValue_id(java.util.UUID newValue)
  {
   m_value_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface Operation Invocation", //$NON-NLS-1$
	  " Operation entered: Interface Operation Invocation::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     InterfaceOperationInvocation_c [] objs = InterfaceOperationInvocation_c.InterfaceOperationInvocationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface Operation Invocation", //$NON-NLS-1$
	  " Operation entered: Interface Operation Invocation::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class InterfaceOperationInvocation_c_test40343_c implements ClassQueryInterface_c
    {
	  InterfaceOperationInvocation_c_test40343_c( java.util.UUID            p40344 ) {
	  m_p40344 = p40344;
	  }
	  private java.util.UUID             m_p40344; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceOperationInvocation_c selected = (InterfaceOperationInvocation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p40344));
	      return retval;
	  }
    }

    InterfaceOperationInvocation_c [] objs40342 = 
    InterfaceOperationInvocation_c.InterfaceOperationInvocationInstances(modelRoot, new InterfaceOperationInvocation_c_test40343_c(getStatement_id())) ;

    if ( (  (objs40342.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation Invocation: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40342.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation Invocation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40342.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs40342.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation Invocation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40342.length )  + " Statement_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation Invocation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40342.length )  + " Statement_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Interface Operation Invocation is a subtype in association: rel.Numb = 603
          // The supertype class is: Statement
    class Statement_c_test40348_c implements ClassQueryInterface_c
    {
	  Statement_c_test40348_c( java.util.UUID            p40349 ) {
	  m_p40349 = p40349;
	  }
	  private java.util.UUID             m_p40349; 
	  public boolean evaluate (Object candidate)
	  {
	      Statement_c selected = (Statement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p40349));
	      return retval;
	  }
    }

    Statement_c [] objs40347 = 
    Statement_c.StatementInstances(modelRoot, new Statement_c_test40348_c(getStatement_id())) ;

    if ( (  (objs40347.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation Invocation: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40347.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation Invocation: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40347.length )  , e); 
      }
      retval = false;

    }

          // Interface Operation Invocation is a referring class in association: rel.Numb = 680
          // The participating class is: Provided Operation
    class ProvidedOperation_c_test40351_c implements ClassQueryInterface_c
    {
	  ProvidedOperation_c_test40351_c( java.util.UUID            p40352 ) {
	  m_p40352 = p40352;
	  }
	  private java.util.UUID             m_p40352; 
	  public boolean evaluate (Object candidate)
	  {
	      ProvidedOperation_c selected = (ProvidedOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p40352));
	      return retval;
	  }
    }

    ProvidedOperation_c [] objs40350 = 
    ProvidedOperation_c.ProvidedOperationInstances(modelRoot, new ProvidedOperation_c_test40351_c(getProvidedop_id())) ;

    if ( (  (objs40350.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation Invocation: Association: 680: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40350.length )  + " ProvidedOp_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation Invocation: Association: 680: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40350.length )  + " ProvidedOp_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Interface Operation Invocation is a referring class in association: rel.Numb = 657
          // The participating class is: Required Operation
    class RequiredOperation_c_test40354_c implements ClassQueryInterface_c
    {
	  RequiredOperation_c_test40354_c( java.util.UUID            p40355 ) {
	  m_p40355 = p40355;
	  }
	  private java.util.UUID             m_p40355; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredOperation_c selected = (RequiredOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p40355));
	      return retval;
	  }
    }

    RequiredOperation_c [] objs40353 = 
    RequiredOperation_c.RequiredOperationInstances(modelRoot, new RequiredOperation_c_test40354_c(getRequiredop_id())) ;

    if ( (  (objs40353.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation Invocation: Association: 657: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40353.length )  + " RequiredOp_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation Invocation: Association: 657: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40353.length )  + " RequiredOp_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Interface Operation Invocation is a referring class in association: rel.Numb = 629
          // The participating class is: Value
    class Value_c_test40357_c implements ClassQueryInterface_c
    {
	  Value_c_test40357_c( java.util.UUID            p40358 ) {
	  m_p40358 = p40358;
	  }
	  private java.util.UUID             m_p40358; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p40358));
	      return retval;
	  }
    }

    Value_c [] objs40356 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test40357_c(getValue_id())) ;

    if ( (  (objs40356.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation Invocation: Association: 629: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40356.length )  + " Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation Invocation: Association: 629: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40356.length )  + " Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Interface Operation Invocation is a participating class in association: rel.Numb = 679
             // Object: Actual Parameter
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation Invocation", " Operation entered: InterfaceOperationInvocation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredOperation_c v_rop = RequiredOperation_c.getOneSPR_ROOnR657(this);


if (   (v_rop != null) )
{

this.unrelateAcrossR657From(v_rop);



}

ProvidedOperation_c v_pop = ProvidedOperation_c.getOneSPR_POOnR680(this);


if ( (  (v_pop != null)) )
{

this.unrelateAcrossR680From(v_pop);



}

ActualParameter_c [] v_parm_set = ActualParameter_c.getManyV_PARsOnR679(this);


ActualParameter_c  v_parm = null;
for ( int i37266 = 0; i37266 < v_parm_set.length; i37266++)
{
  v_parm = v_parm_set[i37266] ;

this.unrelateAcrossR679From(v_parm);


if (v_parm != null) {
v_parm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Value_c v_targetVal = Value_c.getOneV_VALOnR629(this);


if (   (v_targetVal != null) )
{

this.unrelateAcrossR629From(v_targetVal);


if (v_targetVal != null) {
v_targetVal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

delete() ;



   } // End dispose
  public  void Execute(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation Invocation", " Operation entered: InterfaceOperationInvocation::Execute") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End execute
  public  boolean      Setupparametervalues(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation Invocation", " Operation entered: InterfaceOperationInvocation::Setupparametervalues") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End setupParameterValues

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Interface Operation Invocation
