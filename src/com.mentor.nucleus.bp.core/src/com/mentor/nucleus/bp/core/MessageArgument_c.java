package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.MessageArgument_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_MESSAGE_ARGUMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class MessageArgument_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public MessageArgument_c(ModelRoot modelRoot, java.util.UUID p_m_arg_id,
			java.util.UUID p_m_informal_msg_id,
			java.util.UUID p_m_formal_msg_id, String p_m_label,
			String p_m_value, String p_m_informalname, String p_m_descrip,
			boolean p_m_isformal) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_arg_id = IdAssigner.preprocessUUID(p_m_arg_id);
		//extract 28 bit value only            
		m_arg_idLongBased = 0xfffffff & p_m_arg_id.getLeastSignificantBits();
		m_label = p_m_label;
		m_value = p_m_value;
		m_informalname = p_m_informalname;
		m_descrip = p_m_descrip;
		m_isformal = p_m_isformal;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_informal_msg_id = IdAssigner.preprocessUUID(p_m_informal_msg_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_formal_msg_id = IdAssigner.preprocessUUID(p_m_formal_msg_id);

		setUniqueId(m_arg_id);
		Object[] key = {m_arg_id};
		addInstanceToMap(key);
	}
	static public MessageArgument_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_arg_id, java.util.UUID p_m_informal_msg_id,
			java.util.UUID p_m_formal_msg_id, String p_m_label,
			String p_m_value, String p_m_informalname, String p_m_descrip,
			boolean p_m_isformal, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);
		MessageArgument_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_arg_id};
			new_inst = (MessageArgument_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_arg_id = IdAssigner.preprocessUUID(p_m_arg_id);
				//extract 28 bit value only            
				new_inst.m_arg_idLongBased = 0xfffffff & p_m_arg_id
						.getLeastSignificantBits();
				new_inst.m_label = p_m_label;
				new_inst.m_value = p_m_value;
				new_inst.m_informalname = p_m_informalname;
				new_inst.m_descrip = p_m_descrip;
				new_inst.m_isformal = p_m_isformal;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_informal_msg_id = IdAssigner
						.preprocessUUID(p_m_informal_msg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_formal_msg_id = IdAssigner
						.preprocessUUID(p_m_formal_msg_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new MessageArgument_c(modelRoot, p_m_arg_id,
					p_m_informal_msg_id, p_m_formal_msg_id, p_m_label,
					p_m_value, p_m_informalname, p_m_descrip, p_m_isformal);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public MessageArgument_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_arg_id, java.util.UUID p_m_informal_msg_id,
			java.util.UUID p_m_formal_msg_id, String p_m_label,
			String p_m_value, String p_m_informalname, String p_m_descrip,
			boolean p_m_isformal) {
		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);
		MessageArgument_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_arg_id};
			source = (MessageArgument_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_arg_id = IdAssigner.preprocessUUID(p_m_arg_id);
				//extract 28 bit value only            
				source.m_arg_idLongBased = 0xfffffff & p_m_arg_id
						.getLeastSignificantBits();
				source.m_label = p_m_label;
				source.m_value = p_m_value;
				source.m_informalname = p_m_informalname;
				source.m_descrip = p_m_descrip;
				source.m_isformal = p_m_isformal;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_informal_msg_id = IdAssigner
						.preprocessUUID(p_m_informal_msg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_formal_msg_id = IdAssigner
						.preprocessUUID(p_m_formal_msg_id);

				return source;
			}
		}
		// there is no instance matching the id
		MessageArgument_c new_inst = new MessageArgument_c(modelRoot,
				p_m_arg_id, p_m_informal_msg_id, p_m_formal_msg_id, p_m_label,
				p_m_value, p_m_informalname, p_m_descrip, p_m_isformal);
		return new_inst;
	}
	public MessageArgument_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_arg_id = idAssigner.createUUID();
		m_label = "";
		m_value = "";
		m_informalname = "";
		m_descrip = "";
		m_informal_msg_id = IdAssigner.NULL_UUID;
		m_formal_msg_id = IdAssigner.NULL_UUID;
		setUniqueId(m_arg_id);
		Object[] key = {m_arg_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_arg_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_arg_id != p_newKey) {

			m_arg_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof MessageArgument_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof MessageArgument_c)) {
			return false;
		}

		MessageArgument_c me = (MessageArgument_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getArg_id()) || IdAssigner.NULL_UUID
						.equals(((MessageArgument_c) elem).getArg_id())) && this != elem)) {
			return false;
		}
		if (!getArg_id().equals(((MessageArgument_c) elem).getArg_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof MessageArgument_c)) {
			return false;
		}

		MessageArgument_c me = (MessageArgument_c) elem;
		if (!getArg_id().equals(((MessageArgument_c) elem).getArg_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_arg_id;
	private long m_arg_idLongBased;
	private String m_label;
	private String m_value;
	private String m_informalname;
	private String m_descrip;
	private boolean m_isformal;
	private java.util.UUID m_informal_msg_id;
	private java.util.UUID m_formal_msg_id;

	// declare association references from this class

	// referring navigation

	Message_c BelongsToInformalMessage;
	public void relateAcrossR1000To(Message_c target) {
		relateAcrossR1000To(target, true);
	}
	public void relateAcrossR1000To(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == BelongsToInformalMessage)
			return; // already related

		if (BelongsToInformalMessage != target) {

			Object oldKey = getInstanceKey();

			if (BelongsToInformalMessage != null) {

				BelongsToInformalMessage.clearBackPointerR1000To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MessageArgument_c.relateAcrossR1000To(Message_c target)",
									"Relate performed across R1000 from Message Argument to Message without unrelate of prior instance.");
				}
			}

			BelongsToInformalMessage = target;
			if (IdAssigner.NULL_UUID.equals(target.getMsg_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_informal_msg_id = target.getMsg_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1000To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1000", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1000From(Message_c target) {
		unrelateAcrossR1000From(target, true);
	}
	public void unrelateAcrossR1000From(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (BelongsToInformalMessage == null)
			return; // already unrelated

		if (target != BelongsToInformalMessage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1000",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1000To(this);
		}

		if (BelongsToInformalMessage != null) {

			m_informal_msg_id = BelongsToInformalMessage.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(m_informal_msg_id)) {
				m_informal_msg_id = BelongsToInformalMessage
						.getMsg_idCachedValue();
			}
			BelongsToInformalMessage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1000", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1000(Message_c[] targets) {
		return getOneMSG_AOnR1000(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1000(Message_c[] targets,
			ClassQueryInterface_c test) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_AOnR1000(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1000(Message_c target) {
		return getOneMSG_AOnR1000(target, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1000(Message_c target,
			boolean loadComponent) {
		return getOneMSG_AOnR1000(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MessageArgument_c getOneMSG_AOnR1000(Message_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_AOnR1000(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MessageArgument_c getOneMSG_AOnR1000(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1000(modelRoot, target, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1000(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneMSG_AOnR1000(modelRoot, target, test);
	}
	private static MessageArgument_c find_getOneMSG_AOnR1000(
			ModelRoot modelRoot, Message_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000) {
				for (int i = 0; i < target.backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000
						.size(); ++i) {
					MessageArgument_c source = (MessageArgument_c) target.backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c[] targets) {
		return getManyMSG_AsOnR1000(targets, null);
	}
	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c[] targets,
			boolean loadComponent) {
		return getManyMSG_AsOnR1000(targets, null, loadComponent);
	}
	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c[] targets,
			ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1000(targets, test, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MessageArgument_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000) {
				for (int j = 0; j < targets[i].backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000
						.size(); ++j) {
					MessageArgument_c source = (MessageArgument_c) targets[i].backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			MessageArgument_c[] ret_set = new MessageArgument_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageArgument_c[0];
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c target) {
		return getManyMSG_AsOnR1000(target, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c target,
			boolean loadComponent) {
		return getManyMSG_AsOnR1000(target, null, loadComponent);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c target,
			ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1000(target, test, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1000(Message_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new MessageArgument_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000) {
			for (int i = 0; i < target.backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000
					.size(); ++i) {
				MessageArgument_c source = (MessageArgument_c) target.backPointer_HasAnInformalMessageArgumentHasAnInformal_R1000
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			MessageArgument_c[] ret_set = new MessageArgument_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageArgument_c[0];
		}
	}

	// referring navigation

	Message_c BelongsToFormalMessage;
	public void relateAcrossR1001To(Message_c target) {
		relateAcrossR1001To(target, true);
	}
	public void relateAcrossR1001To(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == BelongsToFormalMessage)
			return; // already related

		if (BelongsToFormalMessage != target) {

			Object oldKey = getInstanceKey();

			if (BelongsToFormalMessage != null) {

				BelongsToFormalMessage.clearBackPointerR1001To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MessageArgument_c.relateAcrossR1001To(Message_c target)",
									"Relate performed across R1001 from Message Argument to Message without unrelate of prior instance.");
				}
			}

			BelongsToFormalMessage = target;
			if (IdAssigner.NULL_UUID.equals(target.getMsg_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_formal_msg_id = target.getMsg_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1001To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1001From(Message_c target) {
		unrelateAcrossR1001From(target, true);
	}
	public void unrelateAcrossR1001From(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (BelongsToFormalMessage == null)
			return; // already unrelated

		if (target != BelongsToFormalMessage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1001",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1001To(this);
		}

		if (BelongsToFormalMessage != null) {

			m_formal_msg_id = BelongsToFormalMessage.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(m_formal_msg_id)) {
				m_formal_msg_id = BelongsToFormalMessage.getMsg_idCachedValue();
			}
			BelongsToFormalMessage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1001(Message_c[] targets) {
		return getOneMSG_AOnR1001(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1001(Message_c[] targets,
			ClassQueryInterface_c test) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_AOnR1001(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1001(Message_c target) {
		return getOneMSG_AOnR1001(target, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1001(Message_c target,
			boolean loadComponent) {
		return getOneMSG_AOnR1001(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MessageArgument_c getOneMSG_AOnR1001(Message_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_AOnR1001(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MessageArgument_c getOneMSG_AOnR1001(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1001(modelRoot, target, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1001(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneMSG_AOnR1001(modelRoot, target, test);
	}
	private static MessageArgument_c find_getOneMSG_AOnR1001(
			ModelRoot modelRoot, Message_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasAFormalMessageArgumentHasAFormal_R1001) {
				for (int i = 0; i < target.backPointer_HasAFormalMessageArgumentHasAFormal_R1001
						.size(); ++i) {
					MessageArgument_c source = (MessageArgument_c) target.backPointer_HasAFormalMessageArgumentHasAFormal_R1001
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c[] targets) {
		return getManyMSG_AsOnR1001(targets, null);
	}
	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c[] targets,
			boolean loadComponent) {
		return getManyMSG_AsOnR1001(targets, null, loadComponent);
	}
	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c[] targets,
			ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1001(targets, test, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MessageArgument_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasAFormalMessageArgumentHasAFormal_R1001) {
				for (int j = 0; j < targets[i].backPointer_HasAFormalMessageArgumentHasAFormal_R1001
						.size(); ++j) {
					MessageArgument_c source = (MessageArgument_c) targets[i].backPointer_HasAFormalMessageArgumentHasAFormal_R1001
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			MessageArgument_c[] ret_set = new MessageArgument_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageArgument_c[0];
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c target) {
		return getManyMSG_AsOnR1001(target, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c target,
			boolean loadComponent) {
		return getManyMSG_AsOnR1001(target, null, loadComponent);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c target,
			ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1001(target, test, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1001(Message_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new MessageArgument_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasAFormalMessageArgumentHasAFormal_R1001) {
			for (int i = 0; i < target.backPointer_HasAFormalMessageArgumentHasAFormal_R1001
					.size(); ++i) {
				MessageArgument_c source = (MessageArgument_c) target.backPointer_HasAFormalMessageArgumentHasAFormal_R1001
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			MessageArgument_c[] ret_set = new MessageArgument_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageArgument_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	OperationArgument_c backPointer_IsSubtypeOperationArgumentIsSubtype_R1013;

	public void setOperationArgumentOrderInChildListR1013(
			OperationArgument_c target, int index) {
		unrelateAcrossR1013From(target);
		OperationArgument_c[] elements = OperationArgument_c
				.getManyMSG_OAsOnR1013(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1013From((OperationArgument_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1013To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1013To((OperationArgument_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1013To(OperationArgument_c target) {
		if (target != null) {
			target.relateAcrossR1013To(this, true);
		}
	}

	public void relateAcrossR1013To(OperationArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1013To(this, notifyChanges);
		}
	}

	public void setBackPointerR1013To(OperationArgument_c target) {
		backPointer_IsSubtypeOperationArgumentIsSubtype_R1013 = target;
	}

	public void unrelateAcrossR1013From(OperationArgument_c target) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, true);
		}
	}

	public void unrelateAcrossR1013From(OperationArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1013To(OperationArgument_c target) {
		if (target == backPointer_IsSubtypeOperationArgumentIsSubtype_R1013) {
			backPointer_IsSubtypeOperationArgumentIsSubtype_R1013 = null;
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			OperationArgument_c[] targets) {
		return getOneMSG_AOnR1013(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			OperationArgument_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1013(targets, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			OperationArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					MessageArgument_c candidate_val = getOneMSG_AOnR1013(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AOnR1013(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			OperationArgument_c target) {
		return getOneMSG_AOnR1013(target, true);
	}
	public static MessageArgument_c getOneMSG_AOnR1013(
			OperationArgument_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMessageArgument;
		} else {
			return null;
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			OperationArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(targets, test, true);
	}

	public static MessageArgument_c [] getManyMSG_AsOnR1013(OperationArgument_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageArgument_c[0];
  
  
  LinkedHashSet<MessageArgument_c> elementsSet = new LinkedHashSet<MessageArgument_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMessageArgument == null)
	  targets[i].loadProxy();
    MessageArgument_c associate = targets[i].IsSupertypeMessageArgument;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageArgument_c[] result = new MessageArgument_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			OperationArgument_c[] targets) {
		return getManyMSG_AsOnR1013(targets, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			OperationArgument_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			OperationArgument_c[] targetArray = new OperationArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_AsOnR1013(targetArray, test, loadComponent);
		} else {
			MessageArgument_c[] result = new MessageArgument_c[0];
			return result;
		}

	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			OperationArgument_c target, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			OperationArgument_c target) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			OperationArgument_c target, boolean loadComponent) {
		return getManyMSG_AsOnR1013(target, null, loadComponent);
	}

	// referred to navigation

	BridgeArgument_c backPointer_IsSubtypeBridgeArgumentIsSubtype_R1013;

	public void setBridgeArgumentOrderInChildListR1013(BridgeArgument_c target,
			int index) {
		unrelateAcrossR1013From(target);
		BridgeArgument_c[] elements = BridgeArgument_c
				.getManyMSG_BAsOnR1013(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1013From((BridgeArgument_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1013To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1013To((BridgeArgument_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1013To(BridgeArgument_c target) {
		if (target != null) {
			target.relateAcrossR1013To(this, true);
		}
	}

	public void relateAcrossR1013To(BridgeArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1013To(this, notifyChanges);
		}
	}

	public void setBackPointerR1013To(BridgeArgument_c target) {
		backPointer_IsSubtypeBridgeArgumentIsSubtype_R1013 = target;
	}

	public void unrelateAcrossR1013From(BridgeArgument_c target) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, true);
		}
	}

	public void unrelateAcrossR1013From(BridgeArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1013To(BridgeArgument_c target) {
		if (target == backPointer_IsSubtypeBridgeArgumentIsSubtype_R1013) {
			backPointer_IsSubtypeBridgeArgumentIsSubtype_R1013 = null;
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			BridgeArgument_c[] targets) {
		return getOneMSG_AOnR1013(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			BridgeArgument_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1013(targets, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			BridgeArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					MessageArgument_c candidate_val = getOneMSG_AOnR1013(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AOnR1013(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1013(BridgeArgument_c target) {
		return getOneMSG_AOnR1013(target, true);
	}
	public static MessageArgument_c getOneMSG_AOnR1013(BridgeArgument_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMessageArgument;
		} else {
			return null;
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			BridgeArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(targets, test, true);
	}

	public static MessageArgument_c [] getManyMSG_AsOnR1013(BridgeArgument_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageArgument_c[0];
  
  
  LinkedHashSet<MessageArgument_c> elementsSet = new LinkedHashSet<MessageArgument_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMessageArgument == null)
	  targets[i].loadProxy();
    MessageArgument_c associate = targets[i].IsSupertypeMessageArgument;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageArgument_c[] result = new MessageArgument_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			BridgeArgument_c[] targets) {
		return getManyMSG_AsOnR1013(targets, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			BridgeArgument_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			BridgeArgument_c[] targetArray = new BridgeArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_AsOnR1013(targetArray, test, loadComponent);
		} else {
			MessageArgument_c[] result = new MessageArgument_c[0];
			return result;
		}

	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			BridgeArgument_c target, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			BridgeArgument_c target) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			BridgeArgument_c target, boolean loadComponent) {
		return getManyMSG_AsOnR1013(target, null, loadComponent);
	}

	// referred to navigation

	FunctionArgument_c backPointer_IsSubtypeFunctionArgumentIsSubtype_R1013;

	public void setFunctionArgumentOrderInChildListR1013(
			FunctionArgument_c target, int index) {
		unrelateAcrossR1013From(target);
		FunctionArgument_c[] elements = FunctionArgument_c
				.getManyMSG_FAsOnR1013(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1013From((FunctionArgument_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1013To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1013To((FunctionArgument_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1013To(FunctionArgument_c target) {
		if (target != null) {
			target.relateAcrossR1013To(this, true);
		}
	}

	public void relateAcrossR1013To(FunctionArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1013To(this, notifyChanges);
		}
	}

	public void setBackPointerR1013To(FunctionArgument_c target) {
		backPointer_IsSubtypeFunctionArgumentIsSubtype_R1013 = target;
	}

	public void unrelateAcrossR1013From(FunctionArgument_c target) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, true);
		}
	}

	public void unrelateAcrossR1013From(FunctionArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1013To(FunctionArgument_c target) {
		if (target == backPointer_IsSubtypeFunctionArgumentIsSubtype_R1013) {
			backPointer_IsSubtypeFunctionArgumentIsSubtype_R1013 = null;
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			FunctionArgument_c[] targets) {
		return getOneMSG_AOnR1013(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			FunctionArgument_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1013(targets, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			FunctionArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					MessageArgument_c candidate_val = getOneMSG_AOnR1013(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AOnR1013(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1013(FunctionArgument_c target) {
		return getOneMSG_AOnR1013(target, true);
	}
	public static MessageArgument_c getOneMSG_AOnR1013(
			FunctionArgument_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMessageArgument;
		} else {
			return null;
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			FunctionArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(targets, test, true);
	}

	public static MessageArgument_c [] getManyMSG_AsOnR1013(FunctionArgument_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageArgument_c[0];
  
  
  LinkedHashSet<MessageArgument_c> elementsSet = new LinkedHashSet<MessageArgument_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMessageArgument == null)
	  targets[i].loadProxy();
    MessageArgument_c associate = targets[i].IsSupertypeMessageArgument;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageArgument_c[] result = new MessageArgument_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			FunctionArgument_c[] targets) {
		return getManyMSG_AsOnR1013(targets, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			FunctionArgument_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			FunctionArgument_c[] targetArray = new FunctionArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_AsOnR1013(targetArray, test, loadComponent);
		} else {
			MessageArgument_c[] result = new MessageArgument_c[0];
			return result;
		}

	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			FunctionArgument_c target, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			FunctionArgument_c target) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			FunctionArgument_c target, boolean loadComponent) {
		return getManyMSG_AsOnR1013(target, null, loadComponent);
	}

	// referred to navigation

	EventArgument_c backPointer_IsSubtypeEventArgumentIsSubtype_R1013;

	public void setEventArgumentOrderInChildListR1013(EventArgument_c target,
			int index) {
		unrelateAcrossR1013From(target);
		EventArgument_c[] elements = EventArgument_c
				.getManyMSG_EAsOnR1013(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1013From((EventArgument_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1013To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1013To((EventArgument_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1013To(EventArgument_c target) {
		if (target != null) {
			target.relateAcrossR1013To(this, true);
		}
	}

	public void relateAcrossR1013To(EventArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1013To(this, notifyChanges);
		}
	}

	public void setBackPointerR1013To(EventArgument_c target) {
		backPointer_IsSubtypeEventArgumentIsSubtype_R1013 = target;
	}

	public void unrelateAcrossR1013From(EventArgument_c target) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, true);
		}
	}

	public void unrelateAcrossR1013From(EventArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1013To(EventArgument_c target) {
		if (target == backPointer_IsSubtypeEventArgumentIsSubtype_R1013) {
			backPointer_IsSubtypeEventArgumentIsSubtype_R1013 = null;
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1013(EventArgument_c[] targets) {
		return getOneMSG_AOnR1013(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			EventArgument_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1013(targets, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			EventArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					MessageArgument_c candidate_val = getOneMSG_AOnR1013(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AOnR1013(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1013(EventArgument_c target) {
		return getOneMSG_AOnR1013(target, true);
	}
	public static MessageArgument_c getOneMSG_AOnR1013(EventArgument_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMessageArgument;
		} else {
			return null;
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			EventArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(targets, test, true);
	}

	public static MessageArgument_c [] getManyMSG_AsOnR1013(EventArgument_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageArgument_c[0];
  
  
  LinkedHashSet<MessageArgument_c> elementsSet = new LinkedHashSet<MessageArgument_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMessageArgument == null)
	  targets[i].loadProxy();
    MessageArgument_c associate = targets[i].IsSupertypeMessageArgument;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageArgument_c[] result = new MessageArgument_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			EventArgument_c[] targets) {
		return getManyMSG_AsOnR1013(targets, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			EventArgument_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			EventArgument_c[] targetArray = new EventArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_AsOnR1013(targetArray, test, loadComponent);
		} else {
			MessageArgument_c[] result = new MessageArgument_c[0];
			return result;
		}

	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			EventArgument_c target, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			EventArgument_c target) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			EventArgument_c target, boolean loadComponent) {
		return getManyMSG_AsOnR1013(target, null, loadComponent);
	}

	// referred to navigation

	InformalArgument_c backPointer_IsSubtypeInformalArgumentIsSubtype_R1013;

	public void setInformalArgumentOrderInChildListR1013(
			InformalArgument_c target, int index) {
		unrelateAcrossR1013From(target);
		InformalArgument_c[] elements = InformalArgument_c
				.getManyMSG_IAsOnR1013(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1013From((InformalArgument_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1013To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1013To((InformalArgument_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1013To(InformalArgument_c target) {
		if (target != null) {
			target.relateAcrossR1013To(this, true);
		}
	}

	public void relateAcrossR1013To(InformalArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1013To(this, notifyChanges);
		}
	}

	public void setBackPointerR1013To(InformalArgument_c target) {
		backPointer_IsSubtypeInformalArgumentIsSubtype_R1013 = target;
	}

	public void unrelateAcrossR1013From(InformalArgument_c target) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, true);
		}
	}

	public void unrelateAcrossR1013From(InformalArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1013To(InformalArgument_c target) {
		if (target == backPointer_IsSubtypeInformalArgumentIsSubtype_R1013) {
			backPointer_IsSubtypeInformalArgumentIsSubtype_R1013 = null;
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			InformalArgument_c[] targets) {
		return getOneMSG_AOnR1013(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			InformalArgument_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1013(targets, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			InformalArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					MessageArgument_c candidate_val = getOneMSG_AOnR1013(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AOnR1013(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1013(InformalArgument_c target) {
		return getOneMSG_AOnR1013(target, true);
	}
	public static MessageArgument_c getOneMSG_AOnR1013(
			InformalArgument_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMessageArgument;
		} else {
			return null;
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			InformalArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(targets, test, true);
	}

	public static MessageArgument_c [] getManyMSG_AsOnR1013(InformalArgument_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageArgument_c[0];
  
  
  LinkedHashSet<MessageArgument_c> elementsSet = new LinkedHashSet<MessageArgument_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMessageArgument == null)
	  targets[i].loadProxy();
    MessageArgument_c associate = targets[i].IsSupertypeMessageArgument;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageArgument_c[] result = new MessageArgument_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			InformalArgument_c[] targets) {
		return getManyMSG_AsOnR1013(targets, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			InformalArgument_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			InformalArgument_c[] targetArray = new InformalArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_AsOnR1013(targetArray, test, loadComponent);
		} else {
			MessageArgument_c[] result = new MessageArgument_c[0];
			return result;
		}

	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			InformalArgument_c target, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			InformalArgument_c target) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			InformalArgument_c target, boolean loadComponent) {
		return getManyMSG_AsOnR1013(target, null, loadComponent);
	}

	// referred to navigation

	ExecutablePropertyArgument_c backPointer_IsSubtypeExecutablePropertyArgumentIsSubtype_R1013;

	public void setExecutablePropertyArgumentOrderInChildListR1013(
			ExecutablePropertyArgument_c target, int index) {
		unrelateAcrossR1013From(target);
		ExecutablePropertyArgument_c[] elements = ExecutablePropertyArgument_c
				.getManyMSG_EPAsOnR1013(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1013From((ExecutablePropertyArgument_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1013To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1013To((ExecutablePropertyArgument_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1013To(ExecutablePropertyArgument_c target) {
		if (target != null) {
			target.relateAcrossR1013To(this, true);
		}
	}

	public void relateAcrossR1013To(ExecutablePropertyArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1013To(this, notifyChanges);
		}
	}

	public void setBackPointerR1013To(ExecutablePropertyArgument_c target) {
		backPointer_IsSubtypeExecutablePropertyArgumentIsSubtype_R1013 = target;
	}

	public void unrelateAcrossR1013From(ExecutablePropertyArgument_c target) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, true);
		}
	}

	public void unrelateAcrossR1013From(ExecutablePropertyArgument_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1013From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1013To(ExecutablePropertyArgument_c target) {
		if (target == backPointer_IsSubtypeExecutablePropertyArgumentIsSubtype_R1013) {
			backPointer_IsSubtypeExecutablePropertyArgumentIsSubtype_R1013 = null;
		}
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			ExecutablePropertyArgument_c[] targets) {
		return getOneMSG_AOnR1013(targets, null);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			ExecutablePropertyArgument_c[] targets, ClassQueryInterface_c test) {
		return getOneMSG_AOnR1013(targets, test, true);
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			ExecutablePropertyArgument_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					MessageArgument_c candidate_val = getOneMSG_AOnR1013(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneMSG_AOnR1013(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static MessageArgument_c getOneMSG_AOnR1013(
			ExecutablePropertyArgument_c target) {
		return getOneMSG_AOnR1013(target, true);
	}
	public static MessageArgument_c getOneMSG_AOnR1013(
			ExecutablePropertyArgument_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMessageArgument;
		} else {
			return null;
		}
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			ExecutablePropertyArgument_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(targets, test, true);
	}

	public static MessageArgument_c [] getManyMSG_AsOnR1013(ExecutablePropertyArgument_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageArgument_c[0];
  
  
  LinkedHashSet<MessageArgument_c> elementsSet = new LinkedHashSet<MessageArgument_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMessageArgument == null)
	  targets[i].loadProxy();
    MessageArgument_c associate = targets[i].IsSupertypeMessageArgument;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageArgument_c[] result = new MessageArgument_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			ExecutablePropertyArgument_c[] targets) {
		return getManyMSG_AsOnR1013(targets, null);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			ExecutablePropertyArgument_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ExecutablePropertyArgument_c[] targetArray = new ExecutablePropertyArgument_c[1];
			targetArray[0] = target;
			return getManyMSG_AsOnR1013(targetArray, test, loadComponent);
		} else {
			MessageArgument_c[] result = new MessageArgument_c[0];
			return result;
		}

	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			ExecutablePropertyArgument_c target, ClassQueryInterface_c test) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			ExecutablePropertyArgument_c target) {
		return getManyMSG_AsOnR1013(target, null, true);
	}

	public static MessageArgument_c[] getManyMSG_AsOnR1013(
			ExecutablePropertyArgument_c target, boolean loadComponent) {
		return getManyMSG_AsOnR1013(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (BelongsToInformalMessage == null) {
			// R1000
			Message_c relInst40074 = (Message_c) baseRoot.getInstanceList(
					Message_c.class).get(new Object[]{m_informal_msg_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40074 == null) {
				relInst40074 = (Message_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Message_c.class)
						.get(new Object[]{m_informal_msg_id});
			}
			if (relInst40074 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40074 = (Message_c) roots[i].getInstanceList(
							Message_c.class).get(
							new Object[]{m_informal_msg_id});
					if (relInst40074 != null)
						break;
				}
			}
			//synchronized
			if (relInst40074 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40074) && !isProxy())) {
					relInst40074.relateAcrossR1000To(this, notifyChanges);
				}
			}
		}

		if (BelongsToFormalMessage == null) {
			// R1001
			Message_c relInst40075 = (Message_c) baseRoot.getInstanceList(
					Message_c.class).get(new Object[]{m_formal_msg_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40075 == null) {
				relInst40075 = (Message_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Message_c.class)
						.get(new Object[]{m_formal_msg_id});
			}
			if (relInst40075 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40075 = (Message_c) roots[i].getInstanceList(
							Message_c.class).get(new Object[]{m_formal_msg_id});
					if (relInst40075 != null)
						break;
				}
			}
			//synchronized
			if (relInst40075 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40075) && !isProxy())) {
					relInst40075.relateAcrossR1001To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1000
		// MSG_M
		inst = BelongsToInformalMessage;
		unrelateAcrossR1000From(BelongsToInformalMessage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1001
		// MSG_M
		inst = BelongsToFormalMessage;
		unrelateAcrossR1001From(BelongsToFormalMessage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(MessageArgument_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final MessageArgument_c inst = (MessageArgument_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static MessageArgument_c MessageArgumentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageArgument_c result = findMessageArgumentInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					MessageArgument_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findMessageArgumentInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static MessageArgument_c findMessageArgumentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MessageArgument_c x = (MessageArgument_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static MessageArgument_c MessageArgumentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MessageArgumentInstance(modelRoot, test, true);
	}

	public static MessageArgument_c MessageArgumentInstance(ModelRoot modelRoot) {
		return MessageArgumentInstance(modelRoot, null, true);
	}

	public static MessageArgument_c[] MessageArgumentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					MessageArgument_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(MessageArgument_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MessageArgument_c x = (MessageArgument_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				MessageArgument_c[] ret_set = new MessageArgument_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new MessageArgument_c[0];
			}
		}
	}
	public static MessageArgument_c[] MessageArgumentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MessageArgumentInstances(modelRoot, test, true);
	}
	public static MessageArgument_c[] MessageArgumentInstances(
			ModelRoot modelRoot) {
		return MessageArgumentInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Message Argument.dispose call: ";
		OperationArgument_c testR1013Inst1 = OperationArgument_c
				.getOneMSG_OAOnR1013(this, false);

		if (testR1013Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		BridgeArgument_c testR1013Inst2 = BridgeArgument_c.getOneMSG_BAOnR1013(
				this, false);

		if (testR1013Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		FunctionArgument_c testR1013Inst3 = FunctionArgument_c
				.getOneMSG_FAOnR1013(this, false);

		if (testR1013Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		EventArgument_c testR1013Inst4 = EventArgument_c.getOneMSG_EAOnR1013(
				this, false);

		if (testR1013Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		InformalArgument_c testR1013Inst5 = InformalArgument_c
				.getOneMSG_IAOnR1013(this, false);

		if (testR1013Inst5 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		ExecutablePropertyArgument_c testR1013Inst6 = ExecutablePropertyArgument_c
				.getOneMSG_EPAOnR1013(this, false);

		if (testR1013Inst6 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1013 ";
		}
		Message_c testR1000Inst = Message_c.getOneMSG_MOnR1000(this, false);

		if (testR1000Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1000 ";
		}
		Message_c testR1001Inst = Message_c.getOneMSG_MOnR1001(this, false);

		if (testR1001Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1001 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Message Argument",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("arg_id")) {
			return true;
		}
		if (attributeName.equals("informal_msg_id")) {
			return true;
		}
		if (attributeName.equals("formal_msg_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getArg_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getArg_idLongBased() {
		if (m_arg_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_arg_id)) {
			return 0xfffffff & m_arg_id.getLeastSignificantBits();
		}
		return m_arg_idLongBased;
	}
	public java.util.UUID getArg_id() {
		return m_arg_id;
	}

	public void setArg_id(java.util.UUID newValue) {
		m_arg_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getLabel() {
		ModelRoot modelRoot = getModelRoot();
		BridgeArgument_c v_ba = BridgeArgument_c.getOneMSG_BAOnR1013(this);

		OperationArgument_c v_oa = OperationArgument_c
				.getOneMSG_OAOnR1013(this);

		FunctionArgument_c v_fa = FunctionArgument_c.getOneMSG_FAOnR1013(this);

		EventArgument_c v_ea = EventArgument_c.getOneMSG_EAOnR1013(this);

		ExecutablePropertyArgument_c v_epa = ExecutablePropertyArgument_c
				.getOneMSG_EPAOnR1013(this);

		String v_label = "";

		if (((v_ba != null))) {

			BridgeParameter_c v_bparm = BridgeParameter_c
					.getOneS_BPARMOnR1014(v_ba);

			v_label = v_bparm.getName();

		}

		else if (((v_oa != null))) {

			OperationParameter_c v_oparm = OperationParameter_c
					.getOneO_TPARMOnR1015(v_oa);

			v_label = v_oparm.getName();

		}

		else if (((v_fa != null))) {

			FunctionParameter_c v_fparm = FunctionParameter_c
					.getOneS_SPARMOnR1016(v_fa);

			v_label = v_fparm.getName();

		}

		else if (((v_ea != null))) {

			StateMachineEventDataItem_c v_evtdi = StateMachineEventDataItem_c
					.getOneSM_EVTDIOnR1017(v_ea);

			v_label = v_evtdi.getName();

		}

		else if (((v_epa != null))) {

			PropertyParameter_c v_epp = PropertyParameter_c
					.getOneC_PPOnR1023(v_epa);

			v_label = v_epp.getName();

		}

		else {

			v_label = getInformalname();

		}

		if ((!getValue().equals(""))) {

			return v_label + " = " + getValue();

		}

		else {

			return v_label;

		}

	}

	public String getValue() {
		return m_value;
	}

	public void setValue(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_value)) {
				return;
			}
		} else if (m_value != null) {
			if (m_value.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Value",
				m_value, newValue, true);
		m_value = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getInformalname() {
		return m_informalname;
	}

	public void setInformalname(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_informalname)) {
				return;
			}
		} else if (m_informalname != null) {
			if (m_informalname.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Informalname", m_informalname, newValue, true);
		m_informalname = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public boolean getIsformal() {
		ModelRoot modelRoot = getModelRoot();
		Message_c v_message = Message_c.getOneMSG_MOnR1001(this);

		return (v_message != null);

	}

	public long getInformal_msg_idLongBased() {
		if (BelongsToInformalMessage != null) {
			return BelongsToInformalMessage.getMsg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getInformal_msg_id() {
		if (BelongsToInformalMessage != null) {
			return BelongsToInformalMessage.getMsg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getInformal_msg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_informal_msg_id))
			return m_informal_msg_id;
		else
			return getInformal_msg_id();
	}

	public void setInformal_msg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_informal_msg_id)) {
				return;
			}
		} else if (m_informal_msg_id != null) {
			if (m_informal_msg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Informal_msg_id", m_informal_msg_id, newValue, true);
		m_informal_msg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getFormal_msg_idLongBased() {
		if (BelongsToFormalMessage != null) {
			return BelongsToFormalMessage.getMsg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getFormal_msg_id() {
		if (BelongsToFormalMessage != null) {
			return BelongsToFormalMessage.getMsg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getFormal_msg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_formal_msg_id))
			return m_formal_msg_id;
		else
			return getFormal_msg_id();
	}

	public void setFormal_msg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_formal_msg_id)) {
				return;
			}
		} else if (m_formal_msg_id != null) {
			if (m_formal_msg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Formal_msg_id", m_formal_msg_id, newValue, true);
		m_formal_msg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument", //$NON-NLS-1$
				" Operation entered: Message Argument::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		MessageArgument_c[] objs = MessageArgument_c.MessageArgumentInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument", //$NON-NLS-1$
				" Operation entered: Message Argument::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class MessageArgument_c_test40077_c implements ClassQueryInterface_c {
			MessageArgument_c_test40077_c(java.util.UUID p40078) {
				m_p40078 = p40078;
			}
			private java.util.UUID m_p40078;
			public boolean evaluate(Object candidate) {
				MessageArgument_c selected = (MessageArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40078));
				return retval;
			}
		}

		MessageArgument_c[] objs40076 = MessageArgument_c
				.MessageArgumentInstances(modelRoot,
						new MessageArgument_c_test40077_c(getArg_id()));

		if (((objs40076.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message Argument", //$NON-NLS-1$
								"Consistency: Object: Message Argument: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40076.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Message Argument: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40076.length), e);
			}
			retval = false;

		}

		if (((objs40076.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message Argument", //$NON-NLS-1$
								"Consistency: Object: Message Argument: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40076.length)
										+ " Arg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message Argument: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40076.length)
										+ " Arg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Message Argument is a referring class in association: rel.Numb = 1000
		// The participating class is: Message
		class Message_c_test40082_c implements ClassQueryInterface_c {
			Message_c_test40082_c(java.util.UUID p40083) {
				m_p40083 = p40083;
			}
			private java.util.UUID m_p40083;
			public boolean evaluate(Object candidate) {
				Message_c selected = (Message_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40083));
				return retval;
			}
		}

		Message_c[] objs40081 = Message_c.MessageInstances(modelRoot,
				new Message_c_test40082_c(getInformal_msg_id()));

		if (((objs40081.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message Argument", //$NON-NLS-1$
								"Consistency: Object: Message Argument: Association: 1000: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40081.length)
										+ " Informal_Msg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message Argument: Association: 1000: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40081.length)
										+ " Informal_Msg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Message Argument is a referring class in association: rel.Numb = 1001
		// The participating class is: Message
		class Message_c_test40085_c implements ClassQueryInterface_c {
			Message_c_test40085_c(java.util.UUID p40086) {
				m_p40086 = p40086;
			}
			private java.util.UUID m_p40086;
			public boolean evaluate(Object candidate) {
				Message_c selected = (Message_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40086));
				return retval;
			}
		}

		Message_c[] objs40084 = Message_c.MessageInstances(modelRoot,
				new Message_c_test40085_c(getFormal_msg_id()));

		if (((objs40084.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message Argument", //$NON-NLS-1$
								"Consistency: Object: Message Argument: Association: 1001: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40084.length)
										+ " Formal_Msg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message Argument: Association: 1001: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40084.length)
										+ " Formal_Msg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 1013
		int objs40087 = 0;
		// Subtype Object: Operation Argument
		class OperationArgument_c_test40088_c implements ClassQueryInterface_c {
			OperationArgument_c_test40088_c(java.util.UUID p40089) {
				m_p40089 = p40089;
			}
			private java.util.UUID m_p40089;
			public boolean evaluate(Object candidate) {
				OperationArgument_c selected = (OperationArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40089));
				return retval;
			}
		}

		OperationArgument_c[] objs40090 = OperationArgument_c
				.OperationArgumentInstances(modelRoot,
						new OperationArgument_c_test40088_c(getArg_id()));

		objs40087 = objs40087 + objs40090.length;
		// Subtype Object: Bridge Argument
		class BridgeArgument_c_test40091_c implements ClassQueryInterface_c {
			BridgeArgument_c_test40091_c(java.util.UUID p40092) {
				m_p40092 = p40092;
			}
			private java.util.UUID m_p40092;
			public boolean evaluate(Object candidate) {
				BridgeArgument_c selected = (BridgeArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40092));
				return retval;
			}
		}

		BridgeArgument_c[] objs40093 = BridgeArgument_c
				.BridgeArgumentInstances(modelRoot,
						new BridgeArgument_c_test40091_c(getArg_id()));

		objs40087 = objs40087 + objs40093.length;
		// Subtype Object: Function Argument
		class FunctionArgument_c_test40094_c implements ClassQueryInterface_c {
			FunctionArgument_c_test40094_c(java.util.UUID p40095) {
				m_p40095 = p40095;
			}
			private java.util.UUID m_p40095;
			public boolean evaluate(Object candidate) {
				FunctionArgument_c selected = (FunctionArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40095));
				return retval;
			}
		}

		FunctionArgument_c[] objs40096 = FunctionArgument_c
				.FunctionArgumentInstances(modelRoot,
						new FunctionArgument_c_test40094_c(getArg_id()));

		objs40087 = objs40087 + objs40096.length;
		// Subtype Object: Event Argument
		class EventArgument_c_test40097_c implements ClassQueryInterface_c {
			EventArgument_c_test40097_c(java.util.UUID p40098) {
				m_p40098 = p40098;
			}
			private java.util.UUID m_p40098;
			public boolean evaluate(Object candidate) {
				EventArgument_c selected = (EventArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40098));
				return retval;
			}
		}

		EventArgument_c[] objs40099 = EventArgument_c.EventArgumentInstances(
				modelRoot, new EventArgument_c_test40097_c(getArg_id()));

		objs40087 = objs40087 + objs40099.length;
		// Subtype Object: Informal Argument
		class InformalArgument_c_test40100_c implements ClassQueryInterface_c {
			InformalArgument_c_test40100_c(java.util.UUID p40101) {
				m_p40101 = p40101;
			}
			private java.util.UUID m_p40101;
			public boolean evaluate(Object candidate) {
				InformalArgument_c selected = (InformalArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40101));
				return retval;
			}
		}

		InformalArgument_c[] objs40102 = InformalArgument_c
				.InformalArgumentInstances(modelRoot,
						new InformalArgument_c_test40100_c(getArg_id()));

		objs40087 = objs40087 + objs40102.length;
		// Subtype Object: Executable Property Argument
		class ExecutablePropertyArgument_c_test40103_c
				implements
					ClassQueryInterface_c {
			ExecutablePropertyArgument_c_test40103_c(java.util.UUID p40104) {
				m_p40104 = p40104;
			}
			private java.util.UUID m_p40104;
			public boolean evaluate(Object candidate) {
				ExecutablePropertyArgument_c selected = (ExecutablePropertyArgument_c) candidate;
				boolean retval = false;
				retval = (selected.getArg_id().equals(m_p40104));
				return retval;
			}
		}

		ExecutablePropertyArgument_c[] objs40105 = ExecutablePropertyArgument_c
				.ExecutablePropertyArgumentInstances(modelRoot,
						new ExecutablePropertyArgument_c_test40103_c(
								getArg_id()));

		objs40087 = objs40087 + objs40105.length;
		if (objs40087 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message Argument", //$NON-NLS-1$
								"Consistency: Object: Message Argument: Association: 1013: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40087)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message Argument: Association: 1013: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40087), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument",
				" Operation entered: MessageArgument::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		BridgeArgument_c v_ba = BridgeArgument_c.getOneMSG_BAOnR1013(this);

		OperationArgument_c v_oa = OperationArgument_c
				.getOneMSG_OAOnR1013(this);

		FunctionArgument_c v_fa = FunctionArgument_c.getOneMSG_FAOnR1013(this);

		EventArgument_c v_ea = EventArgument_c.getOneMSG_EAOnR1013(this);

		InformalArgument_c v_ia = InformalArgument_c.getOneMSG_IAOnR1013(this);

		ExecutablePropertyArgument_c v_epa = ExecutablePropertyArgument_c
				.getOneMSG_EPAOnR1013(this);

		if (((v_ba != null))) {

			this.unrelateAcrossR1013From(v_ba);

			if (v_ba != null) {
				v_ba.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (((v_oa != null))) {

			this.unrelateAcrossR1013From(v_oa);

			if (v_oa != null) {
				v_oa.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (((v_fa != null))) {

			this.unrelateAcrossR1013From(v_fa);

			if (v_fa != null) {
				v_fa.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (((v_ea != null))) {

			this.unrelateAcrossR1013From(v_ea);

			if (v_ea != null) {
				v_ea.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (((v_ia != null))) {

			this.unrelateAcrossR1013From(v_ia);

			if (v_ia != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_ia.delete()) {
					Ooaofooa.getDefaultInstance()
							.fireModelElementDeleted(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_DELETE,
											v_ia));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if ((v_epa != null)) {

			this.unrelateAcrossR1013From(v_epa);

			if (v_epa != null) {
				v_epa.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Message_c v_fmessage = Message_c.getOneMSG_MOnR1001(this);

		Message_c v_imessage = Message_c.getOneMSG_MOnR1000(this);

		if (((v_fmessage != null))) {

			this.unrelateAcrossR1001From(v_fmessage);

		}

		else if (((v_imessage != null))) {

			this.unrelateAcrossR1000From(v_imessage);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument",
				" Operation entered: MessageArgument::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		String v_name = "Informal Argument";

		String v_success = Ooaofooa.Getnewelementname(modelRoot,
				Converttoinstance(), v_name, false);

		if ((!v_success.equals(""))) {

			setInformalname(v_success);

		}

		else {

			Dispose();

		}

	} // End initialize
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument",
				" Operation entered: MessageArgument::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return getLabel();

	} // End get_name
	public boolean Canrename() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument",
				" Operation entered: MessageArgument::Canrename");
		final ModelRoot modelRoot = getModelRoot();
		return !getIsformal();

	} // End canRename
	public boolean Candelete() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument",
				" Operation entered: MessageArgument::Candelete");
		final ModelRoot modelRoot = getModelRoot();
		return !getIsformal();

	} // End canDelete
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message Argument",
				" Operation entered: MessageArgument::Converttoinstance");
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Message Argument
