package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InstanceReferenceDataType_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_INSTANCE_REFERENCE_DATA_TYPE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class InstanceReferenceDataType_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public InstanceReferenceDataType_c(ModelRoot modelRoot,
			java.util.UUID p_m_dt_id, boolean p_m_isset,
			java.util.UUID p_m_obj_id) {
		super(modelRoot);
		m_isset = p_m_isset;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_dt_id};
		addInstanceToMap(key);
	}
	static public InstanceReferenceDataType_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_dt_id, boolean p_m_isset,
			java.util.UUID p_m_obj_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);
		InstanceReferenceDataType_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_dt_id};
			new_inst = (InstanceReferenceDataType_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_isset = p_m_isset;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new InstanceReferenceDataType_c(modelRoot, p_m_dt_id,
					p_m_isset, p_m_obj_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public InstanceReferenceDataType_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_dt_id, boolean p_m_isset,
			java.util.UUID p_m_obj_id) {
		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);
		InstanceReferenceDataType_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_dt_id};
			source = (InstanceReferenceDataType_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_isset = p_m_isset;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		InstanceReferenceDataType_c new_inst = new InstanceReferenceDataType_c(
				modelRoot, p_m_dt_id, p_m_isset, p_m_obj_id);
		return new_inst;
	}
	public InstanceReferenceDataType_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_dt_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_dt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_dt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_dt_id != p_newKey) {

			m_dt_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof InstanceReferenceDataType_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof InstanceReferenceDataType_c)) {
			return false;
		}

		InstanceReferenceDataType_c me = (InstanceReferenceDataType_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDt_id()) || IdAssigner.NULL_UUID
						.equals(((InstanceReferenceDataType_c) elem).getDt_id())) && this != elem)) {
			return false;
		}
		if (!getDt_id().equals(((InstanceReferenceDataType_c) elem).getDt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof InstanceReferenceDataType_c)) {
			return false;
		}

		InstanceReferenceDataType_c me = (InstanceReferenceDataType_c) elem;
		if (!getDt_idCachedValue().equals(
				((InstanceReferenceDataType_c) elem).getDt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private boolean m_isset;
	private java.util.UUID m_dt_id;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	DataType_c IsSupertypeDataType;
	public void relateAcrossR17To(DataType_c target) {
		relateAcrossR17To(target, true);
	}
	public void relateAcrossR17To(DataType_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeDataType)
			return; // already related

		if (IsSupertypeDataType != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeDataType != null) {

				IsSupertypeDataType.clearBackPointerR17To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InstanceReferenceDataType_c.relateAcrossR17To(DataType_c target)",
									"Relate performed across R17 from Instance Reference Data Type to Data Type without unrelate of prior instance.");
				}
			}

			IsSupertypeDataType = target;
			if (IdAssigner.NULL_UUID.equals(target.getDt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_dt_id = target.getDt_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR17To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "17", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR17From(DataType_c target) {
		unrelateAcrossR17From(target, true);
	}
	public void unrelateAcrossR17From(DataType_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeDataType == null)
			return; // already unrelated

		if (target != IsSupertypeDataType) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R17",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR17To(this);
		}

		if (IsSupertypeDataType != null) {

			m_dt_id = IsSupertypeDataType.getDt_id();
			if (IdAssigner.NULL_UUID.equals(m_dt_id)) {
				m_dt_id = IsSupertypeDataType.getDt_idCachedValue();
			}
			IsSupertypeDataType = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "17", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			DataType_c[] targets) {
		return getOneS_IRDTOnR17(targets, null);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			DataType_c[] targets, ClassQueryInterface_c test) {
		InstanceReferenceDataType_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_IRDTOnR17(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			DataType_c target) {
		return getOneS_IRDTOnR17(target, null);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			DataType_c target, boolean loadComponent) {
		return getOneS_IRDTOnR17(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			DataType_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_IRDTOnR17(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test) {
		return getOneS_IRDTOnR17(modelRoot, target, test, true);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR17(
			ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_IRDTOnR17(modelRoot, target, test);
	}
	private static InstanceReferenceDataType_c find_getOneS_IRDTOnR17(
			ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test) {
		if (target != null) {
			InstanceReferenceDataType_c source = (InstanceReferenceDataType_c) target.backPointer_IsSubtypeInstanceReferenceDataTypeIsSubtype_R17;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR17(
			DataType_c[] targets) {
		return getManyS_IRDTsOnR17(targets, null);
	}
	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR17(
			DataType_c[] targets, boolean loadComponent) {
		return getManyS_IRDTsOnR17(targets, null, loadComponent);
	}
	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR17(
			DataType_c[] targets, ClassQueryInterface_c test) {
		return getManyS_IRDTsOnR17(targets, test, true);
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR17(
			DataType_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InstanceReferenceDataType_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			InstanceReferenceDataType_c source = (InstanceReferenceDataType_c) targets[i].backPointer_IsSubtypeInstanceReferenceDataTypeIsSubtype_R17;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			InstanceReferenceDataType_c[] ret_set = new InstanceReferenceDataType_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceReferenceDataType_c[0];
		}
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR17(
			DataType_c target) {
		if (target != null) {
			DataType_c[] targetArray = new DataType_c[1];
			targetArray[0] = target;
			return getManyS_IRDTsOnR17(targetArray);
		} else {
			InstanceReferenceDataType_c[] result = new InstanceReferenceDataType_c[0];
			return result;
		}
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR17(
			DataType_c target, boolean loadComponent) {
		if (target != null) {
			DataType_c[] targetArray = new DataType_c[1];
			targetArray[0] = target;
			return getManyS_IRDTsOnR17(targetArray, loadComponent);
		} else {
			InstanceReferenceDataType_c[] result = new InstanceReferenceDataType_c[0];
			return result;
		}
	}

	// referring navigation

	ModelClass_c ProvidesReferenceDatatypeForModelClass;
	public void relateAcrossR123To(ModelClass_c target) {
		relateAcrossR123To(target, true);
	}
	public void relateAcrossR123To(ModelClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProvidesReferenceDatatypeForModelClass)
			return; // already related

		if (ProvidesReferenceDatatypeForModelClass != target) {

			Object oldKey = getInstanceKey();

			if (ProvidesReferenceDatatypeForModelClass != null) {
				UmlProblem.removeXtUMLProblem(this,
						ProvidesReferenceDatatypeForModelClass);

				ProvidesReferenceDatatypeForModelClass
						.clearBackPointerR123To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InstanceReferenceDataType_c.relateAcrossR123To(ModelClass_c target)",
									"Relate performed across R123 from Instance Reference Data Type to Model Class without unrelate of prior instance.");
				}
			}

			ProvidesReferenceDatatypeForModelClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR123To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "123", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR123From(ModelClass_c target) {
		unrelateAcrossR123From(target, true);
	}
	public void unrelateAcrossR123From(ModelClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ProvidesReferenceDatatypeForModelClass == null)
			return; // already unrelated

		if (target != ProvidesReferenceDatatypeForModelClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R123",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR123To(this);
		}

		if (ProvidesReferenceDatatypeForModelClass != null) {

			m_obj_id = ProvidesReferenceDatatypeForModelClass.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = ProvidesReferenceDatatypeForModelClass
						.getObj_idCachedValue();
			}
			ProvidesReferenceDatatypeForModelClass = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "123", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelClass_c[] targets) {
		return getOneS_IRDTOnR123(targets, null);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		InstanceReferenceDataType_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_IRDTOnR123(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelClass_c target) {
		return getOneS_IRDTOnR123(target, null);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelClass_c target, boolean loadComponent) {
		return getOneS_IRDTOnR123(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_IRDTOnR123(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test) {
		return getOneS_IRDTOnR123(modelRoot, target, test, true);
	}

	public static InstanceReferenceDataType_c getOneS_IRDTOnR123(
			ModelRoot modelRoot, ModelClass_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceReferenceDataType_c result = null;

		result = find_getOneS_IRDTOnR123(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					InstanceReferenceDataType_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneS_IRDTOnR123(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static InstanceReferenceDataType_c find_getOneS_IRDTOnR123(
			ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123) {
				for (int i = 0; i < target.backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123
						.size(); ++i) {
					InstanceReferenceDataType_c source = (InstanceReferenceDataType_c) target.backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c[] targets) {
		return getManyS_IRDTsOnR123(targets, null);
	}
	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c[] targets, boolean loadComponent) {
		return getManyS_IRDTsOnR123(targets, null, loadComponent);
	}
	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		return getManyS_IRDTsOnR123(targets, test, true);
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InstanceReferenceDataType_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InstanceReferenceDataType_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123) {
				for (int j = 0; j < targets[i].backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123
						.size(); ++j) {
					InstanceReferenceDataType_c source = (InstanceReferenceDataType_c) targets[i].backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			InstanceReferenceDataType_c[] ret_set = new InstanceReferenceDataType_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceReferenceDataType_c[0];
		}
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c target) {
		return getManyS_IRDTsOnR123(target, null);
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c target, boolean loadComponent) {
		return getManyS_IRDTsOnR123(target, null, loadComponent);
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c target, ClassQueryInterface_c test) {
		return getManyS_IRDTsOnR123(target, test, true);
	}

	public static InstanceReferenceDataType_c[] getManyS_IRDTsOnR123(
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new InstanceReferenceDataType_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InstanceReferenceDataType_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123) {
			for (int i = 0; i < target.backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123
					.size(); ++i) {
				InstanceReferenceDataType_c source = (InstanceReferenceDataType_c) target.backPointer_IsAvailableAsAReferenceByInstanceReferenceDataTypeIsAvailableAsAReferenceBy_R123
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			InstanceReferenceDataType_c[] ret_set = new InstanceReferenceDataType_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceReferenceDataType_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R17
		DataType_c relInst56359 = (DataType_c) baseRoot.getInstanceList(
				DataType_c.class).get(new Object[]{m_dt_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56359 == null) {
			relInst56359 = (DataType_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(DataType_c.class)
					.get(new Object[]{m_dt_id});
		}
		if (relInst56359 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56359 = (DataType_c) roots[i].getInstanceList(
						DataType_c.class).get(new Object[]{m_dt_id});
				if (relInst56359 != null)
					break;
			}
		}
		//synchronized
		if (relInst56359 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56359) && !isProxy())) {
				relInst56359.relateAcrossR17To(this, notifyChanges);
			}
		}

		if (ProvidesReferenceDatatypeForModelClass == null) {
			// R123
			ModelClass_c relInst56360 = (ModelClass_c) baseRoot
					.getInstanceList(ModelClass_c.class).get(
							new Object[]{m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56360 == null) {
				relInst56360 = (ModelClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ModelClass_c.class)
						.get(new Object[]{m_obj_id});
			}
			if (relInst56360 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56360 = (ModelClass_c) roots[i].getInstanceList(
							ModelClass_c.class).get(new Object[]{m_obj_id});
					if (relInst56360 != null)
						break;
				}
			}
			//synchronized
			if (relInst56360 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56360) && !isProxy())) {
					relInst56360.relateAcrossR123To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R17
		// S_DT
		inst = IsSupertypeDataType;
		unrelateAcrossR17From(IsSupertypeDataType, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R123
		// O_OBJ
		inst = ProvidesReferenceDatatypeForModelClass;
		unrelateAcrossR123From(ProvidesReferenceDatatypeForModelClass,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InstanceReferenceDataType_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InstanceReferenceDataType_c inst = (InstanceReferenceDataType_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static InstanceReferenceDataType_c InstanceReferenceDataTypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceReferenceDataType_c result = findInstanceReferenceDataTypeInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					InstanceReferenceDataType_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findInstanceReferenceDataTypeInstance(
								modelRoot, test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static InstanceReferenceDataType_c findInstanceReferenceDataTypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InstanceReferenceDataType_c x = (InstanceReferenceDataType_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static InstanceReferenceDataType_c InstanceReferenceDataTypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InstanceReferenceDataTypeInstance(modelRoot, test, true);
	}

	public static InstanceReferenceDataType_c InstanceReferenceDataTypeInstance(
			ModelRoot modelRoot) {
		return InstanceReferenceDataTypeInstance(modelRoot, null, true);
	}

	public static InstanceReferenceDataType_c[] InstanceReferenceDataTypeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InstanceReferenceDataType_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(InstanceReferenceDataType_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InstanceReferenceDataType_c x = (InstanceReferenceDataType_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				InstanceReferenceDataType_c[] ret_set = new InstanceReferenceDataType_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InstanceReferenceDataType_c[0];
			}
		}
	}
	public static InstanceReferenceDataType_c[] InstanceReferenceDataTypeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InstanceReferenceDataTypeInstances(modelRoot, test, true);
	}
	public static InstanceReferenceDataType_c[] InstanceReferenceDataTypeInstances(
			ModelRoot modelRoot) {
		return InstanceReferenceDataTypeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Instance Reference Data Type.dispose call: ";
		DataType_c testR17Inst5 = DataType_c.getOneS_DTOnR17(this, false);

		if (testR17Inst5 != null) {
			delete_error = true;
			errorMsg = errorMsg + "17 ";
		}
		ModelClass_c testR123Inst = ModelClass_c.getOneO_OBJOnR123(this, false);

		if (testR123Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "123 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Instance Reference Data Type", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("dt_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getDt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getDt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public boolean getIsset() {
		return m_isset;
	}

	public void setIsset(boolean newValue) {
		if (m_isset == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Isset",
				new Boolean(m_isset), new Boolean(newValue), true);

		m_isset = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDt_idLongBased() {
		if (IsSupertypeDataType != null) {
			return IsSupertypeDataType.getDt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDt_id() {
		if (IsSupertypeDataType != null) {
			return IsSupertypeDataType.getDt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeDataType != null);

	}

	public java.util.UUID getDt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dt_id))
			return m_dt_id;
		else
			return getDt_id();
	}

	public void setDt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_dt_id)) {
				return;
			}
		} else if (m_dt_id != null) {
			if (m_dt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id",
				m_dt_id, newValue, true);
		m_dt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (ProvidesReferenceDatatypeForModelClass != null) {
			return ProvidesReferenceDatatypeForModelClass.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (ProvidesReferenceDatatypeForModelClass != null) {
			return ProvidesReferenceDatatypeForModelClass.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Instance Reference Data Type", //$NON-NLS-1$
						" Operation entered: Instance Reference Data Type::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		InstanceReferenceDataType_c[] objs = InstanceReferenceDataType_c
				.InstanceReferenceDataTypeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Instance Reference Data Type", //$NON-NLS-1$
						" Operation entered: Instance Reference Data Type::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class InstanceReferenceDataType_c_test56362_c
				implements
					ClassQueryInterface_c {
			InstanceReferenceDataType_c_test56362_c(java.util.UUID p56363) {
				m_p56363 = p56363;
			}
			private java.util.UUID m_p56363;
			public boolean evaluate(Object candidate) {
				InstanceReferenceDataType_c selected = (InstanceReferenceDataType_c) candidate;
				boolean retval = false;
				retval = (selected.getDt_id().equals(m_p56363));
				return retval;
			}
		}

		InstanceReferenceDataType_c[] objs56361 = InstanceReferenceDataType_c
				.InstanceReferenceDataTypeInstances(modelRoot,
						new InstanceReferenceDataType_c_test56362_c(getDt_id()));

		if (((objs56361.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Reference Data Type", //$NON-NLS-1$
								"Consistency: Object: Instance Reference Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56361.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Reference Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56361.length), e);
			}
			retval = false;

		}

		if (((objs56361.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Reference Data Type", //$NON-NLS-1$
								"Consistency: Object: Instance Reference Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56361.length)
										+ " DT_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Reference Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56361.length)
										+ " DT_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Instance Reference Data Type is a subtype in association: rel.Numb = 17
		// The supertype class is: Data Type
		class DataType_c_test56367_c implements ClassQueryInterface_c {
			DataType_c_test56367_c(java.util.UUID p56368) {
				m_p56368 = p56368;
			}
			private java.util.UUID m_p56368;
			public boolean evaluate(Object candidate) {
				DataType_c selected = (DataType_c) candidate;
				boolean retval = false;
				retval = (selected.getDt_id().equals(m_p56368));
				return retval;
			}
		}

		DataType_c[] objs56366 = DataType_c.DataTypeInstances(modelRoot,
				new DataType_c_test56367_c(getDt_id()));

		if (((objs56366.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Reference Data Type", //$NON-NLS-1$
								"Consistency: Object: Instance Reference Data Type: Association: 17: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56366.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Reference Data Type: Association: 17: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56366.length), e);
			}
			retval = false;

		}

		// Instance Reference Data Type is a referring class in association: rel.Numb = 123
		// The participating class is: Model Class
		class ModelClass_c_test56370_c implements ClassQueryInterface_c {
			ModelClass_c_test56370_c(java.util.UUID p56371) {
				m_p56371 = p56371;
			}
			private java.util.UUID m_p56371;
			public boolean evaluate(Object candidate) {
				ModelClass_c selected = (ModelClass_c) candidate;
				boolean retval = false;
				retval = (selected.getObj_id().equals(m_p56371));
				return retval;
			}
		}

		ModelClass_c[] objs56369 = ModelClass_c.ModelClassInstances(modelRoot,
				new ModelClass_c_test56370_c(getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56369.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Reference Data Type", //$NON-NLS-1$
								"Consistency: Object: Instance Reference Data Type: Association: 123: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56369.length)
										+ " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Reference Data Type: Association: 123: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56369.length)
										+ " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Reference Data Type",
				" Operation entered: InstanceReferenceDataType::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);

		this.unrelateAcrossR17From(v_dt);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Rename(final String p_New_name) {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Reference Data Type",
				" Operation entered: InstanceReferenceDataType::Rename");
		final ModelRoot modelRoot = getModelRoot();
		DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);

		boolean v_dummy = v_dt.Rename(p_New_name);

	} // End rename
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Reference Data Type",
				" Operation entered: InstanceReferenceDataType::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);

		if (((v_dt == null))) {

			return "";

		}

		else {

			return v_dt.getName();

		}

	} // End get_name
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Reference Data Type",
				" Operation entered: InstanceReferenceDataType::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getDt_id();

	} // End get_ooa_id

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Instance Reference Data Type
