//========================================================================
//
// File: src/com/mentor/nucleus/bp/core/ui/cells/OperationCellProvider.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/generate_cell_modifiers.arc
// Version:      $Revision: 1.2 $
//
// Copyright 2005-2014 Mentor Graphics Corporation.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
//  Optional Comments about the generated java file
//

package com.mentor.nucleus.bp.core.ui.cells.providers;

import java.util.Vector;

import org.eclipse.jface.viewers.*;
import org.eclipse.swt.widgets.Composite;

  import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.core.inspector.ObjectElement;
import com.mentor.nucleus.bp.core.ui.cells.ICellProvider;
import com.mentor.nucleus.bp.core.ui.cells.editors.*;
import com.mentor.nucleus.bp.core.util.*;

public class OperationCellProvider implements ICellProvider {
    private String[] Instance_Based_vals = { "Class Based",
        "Instance Based" };    private String[] Suc_Pars_vals = { "Do not parse",
        "Parse successful",
        "Parse unsuccessful",
        "Do parse" };
    
	@Override
	public CellEditor getCellEditor(final NonRootModelElement element,
			Composite parent, ObjectElement data) {
                if(data.getName().equals("Name")) {
	                CellEditor editor = new TextCellEditor(parent);
					editor.setValidator(new ModelElementNameValidator(element));
	                return editor;
	            }
                if(data.getName().equals("Descrip")) {
	                CellEditor editor = new TextCellEditor(parent);
	                return editor;
	            }
                if(data.getName().equals("Instance_Based")) {
                	CellEditor editor = new EnumCellEditor(parent, Instance_Based_vals);
                	return editor;
                }
                if(data.getName().equals("Action_Semantics")) {
	                CellEditor editor = new TextCellEditor(parent);
	                return editor;
	            }
                if(data.getName().equals("Suc_Pars")) {
                	CellEditor editor = new EnumCellEditor(parent, Suc_Pars_vals);
                	return editor;
                }
			  if(data.getName().equals("Return_Dimensions")) {
			  	CellEditor editor = new TextCellEditor(parent);
			  	editor.setValidator(new DimensionsValidator(element));
			  	return editor;
			  }

		return null;
	}

	@Override
	public boolean supportsEdit(NonRootModelElement element,
			ObjectElement data, Composite parent) {
		CellEditor editor = getCellEditor(element, parent, data);
		if(editor != null) {
			editor.dispose();
			return true;
		}
		return false;
	}
	
	@Override
	public String getValue(NonRootModelElement element, ObjectElement data) {
		if(data.getName().equals("Instance_Based")) {
	        Integer Instance_Based_value = (Integer) data.getValue();
			if(Instance_Based_value >= 0 && Instance_Based_value < Instance_Based_vals.length) {
				return Instance_Based_vals[Instance_Based_value];
			}
		}
		if(data.getName().equals("Suc_Pars")) {
	        Integer Suc_Pars_value = (Integer) data.getValue();
			if(Suc_Pars_value >= 0 && Suc_Pars_value < Suc_Pars_vals.length) {
				return Suc_Pars_vals[Suc_Pars_value];
			}
		}
		return null;
	}
	
	@Override
	public void setValue(NonRootModelElement element, ObjectElement data, Object value) {
        if(data.getName().equals("Name"))
        {
            if ( ! value.toString().equals(((Operation_c) element).getName()) )
            {
                ((Operation_c) element).setName(value.toString());
            }
        }
        if(data.getName().equals("Descrip"))
        {
            if ( ! value.toString().equals(((Operation_c) element).getDescrip()) )
            {
                ((Operation_c) element).setDescrip(value.toString());
            }
        }
        if(data.getName().equals("Instance_Based"))
        {
            int new_val = Integer.parseInt(value.toString());
            if ( new_val != ((Operation_c) element).getInstance_based() )
            {
                ((Operation_c) element).setInstance_based(new_val);
            }
        }
        if(data.getName().equals("Suc_Pars"))
        {
            int new_val = Integer.parseInt(value.toString());
            if ( new_val != ((Operation_c) element).getSuc_pars() )
            {
                ((Operation_c) element).setSuc_pars(new_val);
            }
        }
        if(data.getName().equals("Return_Dimensions"))
        {
            if ( ! value.toString().equals(((Operation_c) element).getReturn_dimensions()) )
            {
                Vector dims = DimensionsUtil.getDimensionsData(value.toString(),(Operation_c) element);
                if (dims.size() > 0) {
                    for (int i = 0; i < dims.size(); i++) {
                        int numElements = ((Integer)dims.get(i)).intValue();
                        ((Operation_c) element).Resizereturn_dimensions(i, numElements, dims.size());
                    }
                } else {
                    ((Operation_c) element).Resizereturn_dimensions(0, 0, 0);
                }
                ((Operation_c) element).setReturn_dimensions(value.toString());
            }
        }

	}
	
}
