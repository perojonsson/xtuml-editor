      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.RequiredExecutableProperty_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_REQUIRED_EXECUTABLE_PROPERTY extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class RequiredExecutableProperty_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public RequiredExecutableProperty_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_executableproperty_id,
       java.util.UUID         p_m_requirement_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_executableproperty_id = IdAssigner.preprocessUUID(p_m_executableproperty_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public RequiredExecutableProperty_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_executableproperty_id,
       java.util.UUID         p_m_requirement_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);
      RequiredExecutableProperty_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (RequiredExecutableProperty_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_executableproperty_id = IdAssigner.preprocessUUID(p_m_executableproperty_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       new_inst.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new RequiredExecutableProperty_c(modelRoot,
p_m_id,
p_m_executableproperty_id,
p_m_requirement_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public RequiredExecutableProperty_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_executableproperty_id,
       java.util.UUID         p_m_requirement_id){
    InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);
    RequiredExecutableProperty_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (RequiredExecutableProperty_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_executableproperty_id = IdAssigner.preprocessUUID(p_m_executableproperty_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       source.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    RequiredExecutableProperty_c new_inst = new RequiredExecutableProperty_c(modelRoot,
p_m_id,
p_m_executableproperty_id,
p_m_requirement_id
);
    return new_inst;
  }
  public RequiredExecutableProperty_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_executableproperty_id = IdAssigner.NULL_UUID;   
     m_id = idAssigner.createUUID();
     m_requirement_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof RequiredExecutableProperty_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof RequiredExecutableProperty_c)) {
           return false;
       }
       
       RequiredExecutableProperty_c me = (RequiredExecutableProperty_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((RequiredExecutableProperty_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((RequiredExecutableProperty_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof RequiredExecutableProperty_c)) {
           return false;
       }
       
       RequiredExecutableProperty_c me = (RequiredExecutableProperty_c)elem;
      if (!getId().equals(((RequiredExecutableProperty_c)elem).getId())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_executableproperty_id ;
  private java.util.UUID         m_id ;
  private long m_idLongBased ;
  private java.util.UUID         m_requirement_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Requirement_c IsImplementedByRequirement ;
public void relateAcrossR4500To(Requirement_c target)
{
	relateAcrossR4500To(target, true);
}
public void relateAcrossR4500To(Requirement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsImplementedByRequirement) return;  // already related

    if ( IsImplementedByRequirement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsImplementedByRequirement != null) {
        UmlProblem.removeXtUMLProblem(this, IsImplementedByRequirement);
    
        IsImplementedByRequirement.clearBackPointerR4500To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"RequiredExecutableProperty_c.relateAcrossR4500To(Requirement_c target)", 
			"Relate performed across R4500 from Required Executable Property to Requirement without unrelate of prior instance.");  
		}
    }
                
    	IsImplementedByRequirement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getRequirement_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_requirement_id = target.getRequirement_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4500To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4500", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4500From(Requirement_c target)
{
	unrelateAcrossR4500From(target, true);
}
public void unrelateAcrossR4500From(Requirement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsImplementedByRequirement == null) return;  // already unrelated
	
	if (target != IsImplementedByRequirement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4500", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4500To(this);
    }
    

      if(IsImplementedByRequirement != null) {
      
        m_requirement_id = IsImplementedByRequirement.getRequirement_id();
        if(IdAssigner.NULL_UUID.equals(m_requirement_id))
        {
          m_requirement_id = IsImplementedByRequirement.getRequirement_idCachedValue();
        }       
        IsImplementedByRequirement = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4500", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}


    
// referring navigation

ExecutableProperty_c ImplementsExecutableProperty ;
public void relateAcrossR4500To(ExecutableProperty_c target)
{
	relateAcrossR4500To(target, true);
}
public void relateAcrossR4500To(ExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ImplementsExecutableProperty) return;  // already related

    if ( ImplementsExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (ImplementsExecutableProperty != null) {
        UmlProblem.removeXtUMLProblem(this, ImplementsExecutableProperty);
    
        ImplementsExecutableProperty.clearBackPointerR4500To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"RequiredExecutableProperty_c.relateAcrossR4500To(ExecutableProperty_c target)", 
			"Relate performed across R4500 from Required Executable Property to Executable Property without unrelate of prior instance.");  
		}
    }
                
    	ImplementsExecutableProperty = target ;
        m_executableproperty_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4500To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4500", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4500From(ExecutableProperty_c target)
{
	unrelateAcrossR4500From(target, true);
}
public void unrelateAcrossR4500From(ExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ImplementsExecutableProperty == null) return;  // already unrelated
	
	if (target != ImplementsExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4500", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4500To(this);
    }
    

      if(ImplementsExecutableProperty != null) {
      
        m_executableproperty_id = ImplementsExecutableProperty.getId();
        ImplementsExecutableProperty = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4500", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(Requirement_c [] targets)
{
    return getOneSPR_REPOnR4500(targets, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(Requirement_c [] targets, ClassQueryInterface_c test)
{
    RequiredExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSPR_REPOnR4500(targets[i], test);
        }
    }

    return ret_val;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(Requirement_c target)
{
  return getOneSPR_REPOnR4500(target, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(Requirement_c target, boolean loadComponent)
{
    return getOneSPR_REPOnR4500(target.getModelRoot(), target, null, loadComponent);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(Requirement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSPR_REPOnR4500(target.getModelRoot(), target, test);
  }
  return null;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ModelRoot modelRoot, Requirement_c target, ClassQueryInterface_c test)
{
	return getOneSPR_REPOnR4500(modelRoot, target, test, true);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ModelRoot modelRoot, Requirement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  RequiredExecutableProperty_c result = null;
  
  result=find_getOneSPR_REPOnR4500(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,RequiredExecutableProperty_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneSPR_REPOnR4500(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static RequiredExecutableProperty_c find_getOneSPR_REPOnR4500(ModelRoot modelRoot, Requirement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ImplementsRequiredExecutablePropertyImplements_R4500) {
	    for ( int i = 0; i < target.backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.size(); ++i ) {
	      RequiredExecutableProperty_c source = (RequiredExecutableProperty_c)target.backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c [] targets)
{
  return getManySPR_REPsOnR4500(targets, null);
}
public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c [] targets, boolean loadComponent)
{
  return getManySPR_REPsOnR4500(targets, null, loadComponent);
}
public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c [] targets, ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR4500(targets, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new RequiredExecutableProperty_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, RequiredExecutableProperty_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ImplementsRequiredExecutablePropertyImplements_R4500) {
	    for (int j = 0; j < targets[i].backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.size(); ++j) {
	      RequiredExecutableProperty_c source = (RequiredExecutableProperty_c)targets[i].backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	RequiredExecutableProperty_c[] ret_set = new RequiredExecutableProperty_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new RequiredExecutableProperty_c[0];
  }
  }

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c target)
{
  return getManySPR_REPsOnR4500(target, null);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c target, boolean loadComponent)
{
  return getManySPR_REPsOnR4500(target, null, loadComponent);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c target, ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR4500(target, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(Requirement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new RequiredExecutableProperty_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, RequiredExecutableProperty_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_ImplementsRequiredExecutablePropertyImplements_R4500) {
    for (int i = 0; i < target.backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.size(); ++i) {
      RequiredExecutableProperty_c source = (RequiredExecutableProperty_c)target.backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		RequiredExecutableProperty_c[] ret_set = new RequiredExecutableProperty_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new RequiredExecutableProperty_c[0];
	}
  }

  
    
      
public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ExecutableProperty_c [] targets)
{
    return getOneSPR_REPOnR4500(targets, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    RequiredExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSPR_REPOnR4500(targets[i], test);
        }
    }

    return ret_val;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ExecutableProperty_c target)
{
  return getOneSPR_REPOnR4500(target, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ExecutableProperty_c target, boolean loadComponent)
{
    return getOneSPR_REPOnR4500(target.getModelRoot(), target, null, loadComponent);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSPR_REPOnR4500(target.getModelRoot(), target, test);
  }
  return null;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneSPR_REPOnR4500(modelRoot, target, test, true);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4500(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  RequiredExecutableProperty_c result = null;
  
  result=find_getOneSPR_REPOnR4500(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,RequiredExecutableProperty_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneSPR_REPOnR4500(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static RequiredExecutableProperty_c find_getOneSPR_REPOnR4500(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500) {
	    for ( int i = 0; i < target.backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.size(); ++i ) {
	      RequiredExecutableProperty_c source = (RequiredExecutableProperty_c)target.backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c [] targets)
{
  return getManySPR_REPsOnR4500(targets, null);
}
public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManySPR_REPsOnR4500(targets, null, loadComponent);
}
public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR4500(targets, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new RequiredExecutableProperty_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, RequiredExecutableProperty_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500) {
	    for (int j = 0; j < targets[i].backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.size(); ++j) {
	      RequiredExecutableProperty_c source = (RequiredExecutableProperty_c)targets[i].backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	RequiredExecutableProperty_c[] ret_set = new RequiredExecutableProperty_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new RequiredExecutableProperty_c[0];
  }
  }

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c target)
{
  return getManySPR_REPsOnR4500(target, null);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c target, boolean loadComponent)
{
  return getManySPR_REPsOnR4500(target, null, loadComponent);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR4500(target, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4500(ExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new RequiredExecutableProperty_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, RequiredExecutableProperty_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500) {
    for (int i = 0; i < target.backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.size(); ++i) {
      RequiredExecutableProperty_c source = (RequiredExecutableProperty_c)target.backPointer_IsImplementedByRequiredExecutablePropertyIsImplementedBy_R4500.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		RequiredExecutableProperty_c[] ret_set = new RequiredExecutableProperty_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new RequiredExecutableProperty_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

RequiredSignal_c backPointer_IsSubtypeRequiredSignalIsSubtype_R4502;

public void setRequiredSignalOrderInChildListR4502(RequiredSignal_c target, int index) {
	unrelateAcrossR4502From(target);
	RequiredSignal_c[] elements = RequiredSignal_c.getManySPR_RSsOnR4502(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4502From((RequiredSignal_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4502To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4502To((RequiredSignal_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4502To(RequiredSignal_c target)
{
  if (target != null) {
    target.relateAcrossR4502To(this, true) ;
  }
}

public void relateAcrossR4502To(RequiredSignal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4502To(this, notifyChanges) ;
  }
}

public void setBackPointerR4502To(RequiredSignal_c target)
{
    backPointer_IsSubtypeRequiredSignalIsSubtype_R4502 = target;
}

public void unrelateAcrossR4502From(RequiredSignal_c target)
{
  if (target != null) {
    target.unrelateAcrossR4502From(this, true) ;
  }
}

public void unrelateAcrossR4502From(RequiredSignal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4502From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4502To(RequiredSignal_c target)
{
	if (target == backPointer_IsSubtypeRequiredSignalIsSubtype_R4502) {
		backPointer_IsSubtypeRequiredSignalIsSubtype_R4502 = null;
	}
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredSignal_c [] targets)
{
    return getOneSPR_REPOnR4502(targets, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredSignal_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_REPOnR4502(targets, test, true);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredSignal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    RequiredExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             RequiredExecutableProperty_c candidate_val = getOneSPR_REPOnR4502(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_REPOnR4502(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredSignal_c target)
{
	return getOneSPR_REPOnR4502(target, true);
}
public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredSignal_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeRequiredExecutableProperty ;
  } else {
    return null;
  }
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR4502(targets, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new RequiredExecutableProperty_c[0];
  
  
  LinkedHashSet<RequiredExecutableProperty_c> elementsSet = new LinkedHashSet<RequiredExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeRequiredExecutableProperty == null)
	  targets[i].loadProxy();
    RequiredExecutableProperty_c associate = targets[i].IsSupertypeRequiredExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  RequiredExecutableProperty_c[] result = new RequiredExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c [] targets)
{
  return getManySPR_REPsOnR4502(targets, null);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RequiredSignal_c [] targetArray = new RequiredSignal_c[1];
    targetArray[0] = target;
    return getManySPR_REPsOnR4502(targetArray, test, loadComponent);
  } else {
    RequiredExecutableProperty_c [] result = new RequiredExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_REPsOnR4502(target, null, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c target)
{
    return getManySPR_REPsOnR4502(target, null, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredSignal_c target, boolean loadComponent)
{
    return getManySPR_REPsOnR4502(target, null, loadComponent);
}

  
  
  
// referred to navigation

RequiredOperation_c backPointer_IsSubtypeRequiredOperationIsSubtype_R4502;

public void setRequiredOperationOrderInChildListR4502(RequiredOperation_c target, int index) {
	unrelateAcrossR4502From(target);
	RequiredOperation_c[] elements = RequiredOperation_c.getManySPR_ROsOnR4502(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4502From((RequiredOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4502To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4502To((RequiredOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4502To(RequiredOperation_c target)
{
  if (target != null) {
    target.relateAcrossR4502To(this, true) ;
  }
}

public void relateAcrossR4502To(RequiredOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4502To(this, notifyChanges) ;
  }
}

public void setBackPointerR4502To(RequiredOperation_c target)
{
    backPointer_IsSubtypeRequiredOperationIsSubtype_R4502 = target;
}

public void unrelateAcrossR4502From(RequiredOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR4502From(this, true) ;
  }
}

public void unrelateAcrossR4502From(RequiredOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4502From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4502To(RequiredOperation_c target)
{
	if (target == backPointer_IsSubtypeRequiredOperationIsSubtype_R4502) {
		backPointer_IsSubtypeRequiredOperationIsSubtype_R4502 = null;
	}
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredOperation_c [] targets)
{
    return getOneSPR_REPOnR4502(targets, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_REPOnR4502(targets, test, true);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    RequiredExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             RequiredExecutableProperty_c candidate_val = getOneSPR_REPOnR4502(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_REPOnR4502(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredOperation_c target)
{
	return getOneSPR_REPOnR4502(target, true);
}
public static RequiredExecutableProperty_c getOneSPR_REPOnR4502(RequiredOperation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeRequiredExecutableProperty ;
  } else {
    return null;
  }
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR4502(targets, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new RequiredExecutableProperty_c[0];
  
  
  LinkedHashSet<RequiredExecutableProperty_c> elementsSet = new LinkedHashSet<RequiredExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeRequiredExecutableProperty == null)
	  targets[i].loadProxy();
    RequiredExecutableProperty_c associate = targets[i].IsSupertypeRequiredExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  RequiredExecutableProperty_c[] result = new RequiredExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c [] targets)
{
  return getManySPR_REPsOnR4502(targets, null);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RequiredOperation_c [] targetArray = new RequiredOperation_c[1];
    targetArray[0] = target;
    return getManySPR_REPsOnR4502(targetArray, test, loadComponent);
  } else {
    RequiredExecutableProperty_c [] result = new RequiredExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_REPsOnR4502(target, null, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c target)
{
    return getManySPR_REPsOnR4502(target, null, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR4502(RequiredOperation_c target, boolean loadComponent)
{
    return getManySPR_REPsOnR4502(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<MessageValue_c> backPointer_MessageValue_R845 = new ArrayList<MessageValue_c>();

public void setMessageValueOrderInChildListR845(MessageValue_c target, int index) {
	unrelateAcrossR845From(target);
	MessageValue_c[] elements = MessageValue_c.getManyV_MSVsOnR845(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR845From((MessageValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR845To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR845To((MessageValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR845To(MessageValue_c target)
{
  if (target != null) {
    target.relateAcrossR845To(this, true) ;
  }
}

public void relateAcrossR845To(MessageValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR845To(this, notifyChanges) ;
  }
}

public void setBackPointerR845To(MessageValue_c target)
{
  	synchronized (backPointer_MessageValue_R845) {
		backPointer_MessageValue_R845.add(target);
	}
}

public void unrelateAcrossR845From(MessageValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR845From(this, true) ;
  }
}

public void unrelateAcrossR845From(MessageValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR845From(this, notifyChanges) ;
  }
}

public void clearBackPointerR845To(MessageValue_c target)
{
  synchronized (backPointer_MessageValue_R845) {
	    backPointer_MessageValue_R845.remove(target);
	}
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR845(MessageValue_c [] targets)
{
    return getOneSPR_REPOnR845(targets, null);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR845(MessageValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_REPOnR845(targets, test, true);
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR845(MessageValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    RequiredExecutableProperty_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             RequiredExecutableProperty_c candidate_val = getOneSPR_REPOnR845(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_REPOnR845(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static RequiredExecutableProperty_c getOneSPR_REPOnR845(MessageValue_c target)
{
	return getOneSPR_REPOnR845(target, true);
}
public static RequiredExecutableProperty_c getOneSPR_REPOnR845(MessageValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.RequiredExecutableProperty ;
  } else {
    return null;
  }
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_REPsOnR845(targets, test, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new RequiredExecutableProperty_c[0];
  
  
  LinkedHashSet<RequiredExecutableProperty_c> elementsSet = new LinkedHashSet<RequiredExecutableProperty_c>();
  for (int i = 0; i < targets.length; i++) {
    RequiredExecutableProperty_c associate = targets[i].RequiredExecutableProperty;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  RequiredExecutableProperty_c[] result = new RequiredExecutableProperty_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c [] targets)
{
  return getManySPR_REPsOnR845(targets, null);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MessageValue_c [] targetArray = new MessageValue_c[1];
    targetArray[0] = target;
    return getManySPR_REPsOnR845(targetArray, test, loadComponent);
  } else {
    RequiredExecutableProperty_c [] result = new RequiredExecutableProperty_c [0] ;
    return result ;
  }
  
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_REPsOnR845(target, null, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c target)
{
    return getManySPR_REPsOnR845(target, null, true);
}

public static RequiredExecutableProperty_c [] getManySPR_REPsOnR845(MessageValue_c target, boolean loadComponent)
{
    return getManySPR_REPsOnR845(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R4500
      Requirement_c relInst57122 = (Requirement_c) baseRoot.getInstanceList(Requirement_c.class).get(new Object[] {m_requirement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57122 == null) {
      			relInst57122 = (Requirement_c) Ooaofooa.getDefaultInstance().getInstanceList(Requirement_c.class).get(new Object[] {m_requirement_id});
      		}
			if (relInst57122 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57122 = (Requirement_c) roots[i].getInstanceList(Requirement_c.class).get(new Object[] {m_requirement_id});
					if (relInst57122 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57122 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57122) && !isProxy())) {
	      relInst57122.relateAcrossR4500To(this, notifyChanges);
	  }
	  }
	          
      ExecutableProperty_c relInst57123 = (ExecutableProperty_c) baseRoot.getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_executableproperty_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57123 == null) {
      			relInst57123 = (ExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_executableproperty_id});
      		}
			if (relInst57123 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57123 = (ExecutableProperty_c) roots[i].getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_executableproperty_id});
					if (relInst57123 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57123 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57123) && !isProxy())) {
	      relInst57123.relateAcrossR4500To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4500
      // C_R
		  inst=IsImplementedByRequirement;
			unrelateAcrossR4500From(IsImplementedByRequirement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // C_EP
		  inst=ImplementsExecutableProperty;
			unrelateAcrossR4500From(ImplementsExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final RequiredExecutableProperty_c inst = (RequiredExecutableProperty_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static RequiredExecutableProperty_c RequiredExecutablePropertyInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		RequiredExecutableProperty_c result=findRequiredExecutablePropertyInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,RequiredExecutableProperty_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findRequiredExecutablePropertyInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static RequiredExecutableProperty_c findRequiredExecutablePropertyInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				RequiredExecutableProperty_c x = (RequiredExecutableProperty_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static RequiredExecutableProperty_c RequiredExecutablePropertyInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return RequiredExecutablePropertyInstance(modelRoot,test,true);
  }
  
  public static RequiredExecutableProperty_c RequiredExecutablePropertyInstance(ModelRoot modelRoot)
  {
	 return RequiredExecutablePropertyInstance(modelRoot,null,true);
  }

  public static RequiredExecutableProperty_c [] RequiredExecutablePropertyInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, RequiredExecutableProperty_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(RequiredExecutableProperty_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					RequiredExecutableProperty_c x = (RequiredExecutableProperty_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				RequiredExecutableProperty_c[] ret_set = new RequiredExecutableProperty_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new RequiredExecutableProperty_c[0];
			}		
		} 
  }
  public static RequiredExecutableProperty_c [] RequiredExecutablePropertyInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  RequiredExecutablePropertyInstances(modelRoot,test,true);
  }
  public static RequiredExecutableProperty_c [] RequiredExecutablePropertyInstances(ModelRoot modelRoot)
  {
	return RequiredExecutablePropertyInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Required Executable Property.dispose call: ";
	ExecutableProperty_c testR4500Inst = ExecutableProperty_c.getOneC_EPOnR4500(this, false);

	if ( testR4500Inst != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4500 ";	
 	}

   Requirement_c testR4500InstOth = Requirement_c.getOneC_ROnR4500(this, false);

   if ( testR4500InstOth != null )
   {
   delete_error = true;
   errorMsg = errorMsg + "4500 ";   
	}		    
	RequiredSignal_c testR4502Inst1 = RequiredSignal_c.getOneSPR_RSOnR4502(this, false);

	if ( testR4502Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4502 ";
	}
	RequiredOperation_c testR4502Inst2 = RequiredOperation_c.getOneSPR_ROOnR4502(this, false);

	if ( testR4502Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4502 ";
	}
	MessageValue_c testR845Inst = MessageValue_c.getOneV_MSVOnR845(this, false);

	if ( testR845Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "845 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Required Executable Property", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("executableproperty_id")){
         return true;
      }
      if(attributeName.equals("id")){
         return true;
      }
      if(attributeName.equals("requirement_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getExecutableproperty_idLongBased()
  {
    if ( ImplementsExecutableProperty != null )
    {
      return ImplementsExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getExecutableproperty_id()
  {
    if ( ImplementsExecutableProperty != null )
    {
      return ImplementsExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getExecutableproperty_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_executableproperty_id) )
      return m_executableproperty_id;
    else
      return getExecutableproperty_id();
  }
  
  public void setExecutableproperty_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_executableproperty_id)){
	        return;
	    }
	}else if(m_executableproperty_id != null){
	    if(m_executableproperty_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Executableproperty_id", m_executableproperty_id, newValue,true); 
   m_executableproperty_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIdLongBased()
  {
    if(m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)){
    	return 0xfffffff & m_id.getLeastSignificantBits();
    }
    return m_idLongBased ;
  }
  public java.util.UUID getId()
  {
    return m_id ;
  }


  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getRequirement_idLongBased()
  {
    if ( IsImplementedByRequirement != null )
    {
      return IsImplementedByRequirement.getRequirement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRequirement_id()
  {
    if ( IsImplementedByRequirement != null )
    {
      return IsImplementedByRequirement.getRequirement_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRequirement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_requirement_id) )
      return m_requirement_id;
    else
      return getRequirement_id();
  }
  
  public void setRequirement_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_requirement_id)){
	        return;
	    }
	}else if(m_requirement_id != null){
	    if(m_requirement_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Requirement_id", m_requirement_id, newValue,true); 
   m_requirement_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Required Executable Property", //$NON-NLS-1$
	  " Operation entered: Required Executable Property::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     RequiredExecutableProperty_c [] objs = RequiredExecutableProperty_c.RequiredExecutablePropertyInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Required Executable Property", //$NON-NLS-1$
	  " Operation entered: Required Executable Property::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class RequiredExecutableProperty_c_test57125_c implements ClassQueryInterface_c
    {
	  RequiredExecutableProperty_c_test57125_c( java.util.UUID            p57126 ) {
	  m_p57126 = p57126;
	  }
	  private java.util.UUID             m_p57126; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredExecutableProperty_c selected = (RequiredExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57126));
	      return retval;
	  }
    }

    RequiredExecutableProperty_c [] objs57124 = 
    RequiredExecutableProperty_c.RequiredExecutablePropertyInstances(modelRoot, new RequiredExecutableProperty_c_test57125_c(getId())) ;

    if ( (  (objs57124.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Executable Property", //$NON-NLS-1$
           "Consistency: Object: Required Executable Property: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57124.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Executable Property: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57124.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57124.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Executable Property", //$NON-NLS-1$
           "Consistency: Object: Required Executable Property: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57124.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Executable Property: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57124.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Required Executable Property is a link class in association: rel.Numb = 4500
            // Other side
          // Supertype: rel.Numb = 4502
    int objs57129 = 0;
            // Subtype Object: Required Signal
    class RequiredSignal_c_test57130_c implements ClassQueryInterface_c
    {
	  RequiredSignal_c_test57130_c( java.util.UUID            p57131 ) {
	  m_p57131 = p57131;
	  }
	  private java.util.UUID             m_p57131; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredSignal_c selected = (RequiredSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57131));
	      return retval;
	  }
    }

    RequiredSignal_c [] objs57132 = 
    RequiredSignal_c.RequiredSignalInstances(modelRoot, new RequiredSignal_c_test57130_c(getId())) ;
 
    objs57129 = objs57129 + objs57132.length;
            // Subtype Object: Required Operation
    class RequiredOperation_c_test57133_c implements ClassQueryInterface_c
    {
	  RequiredOperation_c_test57133_c( java.util.UUID            p57134 ) {
	  m_p57134 = p57134;
	  }
	  private java.util.UUID             m_p57134; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredOperation_c selected = (RequiredOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57134));
	      return retval;
	  }
    }

    RequiredOperation_c [] objs57135 = 
    RequiredOperation_c.RequiredOperationInstances(modelRoot, new RequiredOperation_c_test57133_c(getId())) ;
 
    objs57129 = objs57129 + objs57135.length;
    if ( objs57129 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Executable Property", //$NON-NLS-1$
           "Consistency: Object: Required Executable Property: Association: 4502: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57129 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Executable Property: Association: 4502: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57129 )  , e); 
      }
      retval = false;

    }

          // Required Executable Property is a participating class in association: rel.Numb = 845
             // Object: Message Value
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredSignal_c v_req_signal = RequiredSignal_c.getOneSPR_RSOnR4502(this);


RequiredOperation_c v_req_operation = RequiredOperation_c.getOneSPR_ROOnR4502(this);


if ( (  (v_req_signal != null)) )
{

this.unrelateAcrossR4502From(v_req_signal);


if (v_req_signal != null) {
v_req_signal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( (  (v_req_operation != null)) )
{

this.unrelateAcrossR4502From(v_req_operation);


if (v_req_operation != null) {
v_req_operation.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Requirement_c v_requirement = Requirement_c.getOneC_ROnR4500(this);


ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4500(this);


if ( (  (v_requirement != null) &&   (v_ep != null)) )
{

unrelateAcrossR4500From( v_requirement ) ; unrelateAcrossR4500From( v_ep ) ;



}

MessageValue_c [] v_messageVals = MessageValue_c.getManyV_MSVsOnR845(this);


MessageValue_c  v_msv = null;
for ( int i55322 = 0; i55322 < v_messageVals.length; i55322++)
{
  v_msv = v_messageVals[i55322] ;

this.unrelateAcrossR845From(v_msv);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  java.util.UUID         Getcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Getcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
Requirement_c v_requirement = Requirement_c.getOneC_ROnR4500(this);


return v_requirement.Getcomponentid();



   } // End getComponentId
  public  boolean      Issynchronized()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Issynchronized") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4500(this);


if ( (  (v_ep == null) || Util_c.Isproxy(			    
v_ep.Converttoinstance())) )
{

return false;



}

Interface_c v_iface = Interface_c.getOneC_IOnR4003(v_ep);


if ( (  (v_iface == null) || Util_c.Isproxy(			    
v_iface.Converttoinstance())) )
{

return false;



}

return true;



   } // End isSynchronized
  public  void Migrateexecutableproperty()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Migrateexecutableproperty") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_epProxy = ExecutableProperty_c.getOneC_EPOnR4500(this);


if ( (Util_c.Isproxy(			    
v_epProxy.Converttoinstance())) )
{

RequiredSignal_c v_sig = RequiredSignal_c.getOneSPR_RSOnR4502(this);


boolean      v_isSig =   (v_sig != null) ;


Requirement_c v_requirement = Requirement_c.getOneC_ROnR4500(this);


Interface_c v_interface = Interface_c.getOneC_IOnR4012(InterfaceReference_c.getOneC_IROnR4009(v_requirement));


if ( (  (v_interface != null)) )
{

  class ExecutableProperty_test55909_c implements ClassQueryInterface_c
  {
	ExecutableProperty_test55909_c( String       p55910 ) {
		m_p55910 = p55910;
	}
	private String       m_p55910;
	public boolean evaluate (Object candidate)
	{
		ExecutableProperty_c selected = (ExecutableProperty_c)candidate;
		return (selected.getName().equals(m_p55910)) ;
	}
  }
ExecutableProperty_c [] v_eps = ExecutableProperty_c.getManyC_EPsOnR4003(v_interface, new ExecutableProperty_test55909_c(v_epProxy.Getcachedname()));


ExecutableProperty_c  v_ep = null;
for ( int i55323 = 0; i55323 < v_eps.length; i55323++)
{
  v_ep = v_eps[i55323] ;

if ( (v_isSig) )
{

InterfaceSignal_c v_interfaceSig = InterfaceSignal_c.getOneC_ASOnR4004(v_ep);


if ( (  (v_interfaceSig != null)) )
{

unrelateAcrossR4500From( v_requirement ) ; unrelateAcrossR4500From( v_epProxy ) ;


relateAcrossR4500To( v_requirement ) ; relateAcrossR4500To( v_ep ) ;


return ;



}


}

else
{

InterfaceOperation_c v_interfaceOp = InterfaceOperation_c.getOneC_IOOnR4004(v_ep);


if ( (  (v_interfaceOp != null)) )
{

unrelateAcrossR4500From( v_requirement ) ; unrelateAcrossR4500From( v_epProxy ) ;


relateAcrossR4500To( v_requirement ) ; relateAcrossR4500To( v_ep ) ;


return ;



}


}


}


}


}


   } // End migrateExecutableProperty
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  boolean      Isreferringtodefaultexecutableproperty()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Isreferringtodefaultexecutableproperty") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4500(this);


if ( (  (v_ep == null) || Util_c.Isproxy(			    
v_ep.Converttoinstance())) )
{

return true;



}

return false;



   } // End isReferringToDefaultExecutableProperty
  public  boolean      Canrefertoexecutableproperty()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Executable Property", " Operation entered: RequiredExecutableProperty::Canrefertoexecutableproperty") ; 
               final ModelRoot modelRoot = getModelRoot();
Interface_c v_interface = Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4500(this));


InterfaceReference_c v_reference = InterfaceReference_c.getOneC_IROnR4009(Requirement_c.getOneC_ROnR4500(this));


Interface_c v_ourInterface = Interface_c.getOneC_IOnR4012(v_reference);


if ( (v_interface == v_ourInterface) )
{

return true;



}

if ( (Util_c.Isproxy(			    
v_ourInterface.Converttoinstance())) )
{

if (v_ourInterface != null) {
v_ourInterface.unrelateAcrossR4012From(v_reference);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_interface != null) {
  v_interface.relateAcrossR4012To(v_reference);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


boolean      v_result = false ;


if ( (v_reference.Canrefertointerface()) )
{

v_result = true ;



}

if (v_reference != null) {
v_reference.unrelateAcrossR4012From(v_interface);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_reference != null) {
  v_reference.relateAcrossR4012To(v_ourInterface);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


return v_result;



}

return false;



   } // End canReferToExecutableProperty

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Required Executable Property
