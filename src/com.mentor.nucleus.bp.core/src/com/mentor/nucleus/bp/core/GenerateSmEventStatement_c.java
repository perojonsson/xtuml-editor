package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.GenerateSmEventStatement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_GENERATE_SM_EVENT_STATEMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class GenerateSmEventStatement_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public GenerateSmEventStatement_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_smevt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public GenerateSmEventStatement_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_smevt_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);
		GenerateSmEventStatement_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (GenerateSmEventStatement_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new GenerateSmEventStatement_c(modelRoot,
					p_m_statement_id, p_m_smevt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public GenerateSmEventStatement_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_smevt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);
		GenerateSmEventStatement_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (GenerateSmEventStatement_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);

				return source;
			}
		}
		// there is no instance matching the id
		GenerateSmEventStatement_c new_inst = new GenerateSmEventStatement_c(
				modelRoot, p_m_statement_id, p_m_smevt_id);
		return new_inst;
	}
	public GenerateSmEventStatement_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_smevt_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof GenerateSmEventStatement_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof GenerateSmEventStatement_c)) {
			return false;
		}

		GenerateSmEventStatement_c me = (GenerateSmEventStatement_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((GenerateSmEventStatement_c) elem)
								.getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((GenerateSmEventStatement_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof GenerateSmEventStatement_c)) {
			return false;
		}

		GenerateSmEventStatement_c me = (GenerateSmEventStatement_c) elem;
		if (!getStatement_idCachedValue().equals(
				((GenerateSmEventStatement_c) elem)
						.getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_smevt_id;

	// declare association references from this class

	// referring navigation

	GenerateEventStatement_c IsSupertypeGenerateEventStatement;
	public void relateAcrossR703To(GenerateEventStatement_c target) {
		relateAcrossR703To(target, true);
	}
	public void relateAcrossR703To(GenerateEventStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeGenerateEventStatement)
			return; // already related

		if (IsSupertypeGenerateEventStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeGenerateEventStatement != null) {

				IsSupertypeGenerateEventStatement.clearBackPointerR703To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"GenerateSmEventStatement_c.relateAcrossR703To(GenerateEventStatement_c target)",
									"Relate performed across R703 from Generate SM Event Statement to Generate Event Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeGenerateEventStatement = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR703To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR703From(GenerateEventStatement_c target) {
		unrelateAcrossR703From(target, true);
	}
	public void unrelateAcrossR703From(GenerateEventStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeGenerateEventStatement == null)
			return; // already unrelated

		if (target != IsSupertypeGenerateEventStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R703",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR703To(this);
		}

		if (IsSupertypeGenerateEventStatement != null) {

			m_statement_id = IsSupertypeGenerateEventStatement
					.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = IsSupertypeGenerateEventStatement
						.getStatement_idCachedValue();
			}
			IsSupertypeGenerateEventStatement = null;
			target.removeRef();
		}
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			GenerateEventStatement_c[] targets) {
		return getOneE_GSMEOnR703(targets, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			GenerateEventStatement_c[] targets, ClassQueryInterface_c test) {
		GenerateSmEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_GSMEOnR703(targets[i], test);
			}
		}

		return ret_val;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			GenerateEventStatement_c target) {
		return getOneE_GSMEOnR703(target, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			GenerateEventStatement_c target, boolean loadComponent) {
		return getOneE_GSMEOnR703(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			GenerateEventStatement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_GSMEOnR703(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			ModelRoot modelRoot, GenerateEventStatement_c target,
			ClassQueryInterface_c test) {
		return getOneE_GSMEOnR703(modelRoot, target, test, true);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR703(
			ModelRoot modelRoot, GenerateEventStatement_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneE_GSMEOnR703(modelRoot, target, test);
	}
	private static GenerateSmEventStatement_c find_getOneE_GSMEOnR703(
			ModelRoot modelRoot, GenerateEventStatement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			GenerateSmEventStatement_c source = (GenerateSmEventStatement_c) target.backPointer_IsSubtypeGenerateSmEventStatementIsSubtype_R703;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR703(
			GenerateEventStatement_c[] targets) {
		return getManyE_GSMEsOnR703(targets, null);
	}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR703(
			GenerateEventStatement_c[] targets, boolean loadComponent) {
		return getManyE_GSMEsOnR703(targets, null, loadComponent);
	}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR703(
			GenerateEventStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR703(targets, test, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR703(
			GenerateEventStatement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new GenerateSmEventStatement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			GenerateSmEventStatement_c source = (GenerateSmEventStatement_c) targets[i].backPointer_IsSubtypeGenerateSmEventStatementIsSubtype_R703;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			GenerateSmEventStatement_c[] ret_set = new GenerateSmEventStatement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new GenerateSmEventStatement_c[0];
		}
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR703(
			GenerateEventStatement_c target) {
		if (target != null) {
			GenerateEventStatement_c[] targetArray = new GenerateEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_GSMEsOnR703(targetArray);
		} else {
			GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[0];
			return result;
		}
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR703(
			GenerateEventStatement_c target, boolean loadComponent) {
		if (target != null) {
			GenerateEventStatement_c[] targetArray = new GenerateEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_GSMEsOnR703(targetArray, loadComponent);
		} else {
			GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[0];
			return result;
		}
	}

	// referring navigation

	StateMachineEvent_c GeneratesStateMachineEvent;
	public void relateAcrossR707To(StateMachineEvent_c target) {
		relateAcrossR707To(target, true);
	}
	public void relateAcrossR707To(StateMachineEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == GeneratesStateMachineEvent)
			return; // already related

		if (GeneratesStateMachineEvent != target) {

			Object oldKey = getInstanceKey();

			if (GeneratesStateMachineEvent != null) {

				GeneratesStateMachineEvent.clearBackPointerR707To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"GenerateSmEventStatement_c.relateAcrossR707To(StateMachineEvent_c target)",
									"Relate performed across R707 from Generate SM Event Statement to State Machine Event without unrelate of prior instance.");
				}
			}

			GeneratesStateMachineEvent = target;
			m_smevt_id = target.getSmevt_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR707To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR707From(StateMachineEvent_c target) {
		unrelateAcrossR707From(target, true);
	}
	public void unrelateAcrossR707From(StateMachineEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (GeneratesStateMachineEvent == null)
			return; // already unrelated

		if (target != GeneratesStateMachineEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R707",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR707To(this);
		}

		if (GeneratesStateMachineEvent != null) {

			m_smevt_id = GeneratesStateMachineEvent.getSmevt_id();
			GeneratesStateMachineEvent = null;
			target.removeRef();
		}
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			StateMachineEvent_c[] targets) {
		return getOneE_GSMEOnR707(targets, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test) {
		GenerateSmEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_GSMEOnR707(targets[i], test);
			}
		}

		return ret_val;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			StateMachineEvent_c target) {
		return getOneE_GSMEOnR707(target, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			StateMachineEvent_c target, boolean loadComponent) {
		return getOneE_GSMEOnR707(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_GSMEOnR707(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			ModelRoot modelRoot, StateMachineEvent_c target,
			ClassQueryInterface_c test) {
		return getOneE_GSMEOnR707(modelRoot, target, test, true);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR707(
			ModelRoot modelRoot, StateMachineEvent_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneE_GSMEOnR707(modelRoot, target, test);
	}
	private static GenerateSmEventStatement_c find_getOneE_GSMEOnR707(
			ModelRoot modelRoot, StateMachineEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_GenerateSmEventStatement_R707) {
				for (int i = 0; i < target.backPointer_GenerateSmEventStatement_R707
						.size(); ++i) {
					GenerateSmEventStatement_c source = (GenerateSmEventStatement_c) target.backPointer_GenerateSmEventStatement_R707
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c[] targets) {
		return getManyE_GSMEsOnR707(targets, null);
	}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c[] targets, boolean loadComponent) {
		return getManyE_GSMEsOnR707(targets, null, loadComponent);
	}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR707(targets, test, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new GenerateSmEventStatement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_GenerateSmEventStatement_R707) {
				for (int j = 0; j < targets[i].backPointer_GenerateSmEventStatement_R707
						.size(); ++j) {
					GenerateSmEventStatement_c source = (GenerateSmEventStatement_c) targets[i].backPointer_GenerateSmEventStatement_R707
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			GenerateSmEventStatement_c[] ret_set = new GenerateSmEventStatement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new GenerateSmEventStatement_c[0];
		}
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c target) {
		return getManyE_GSMEsOnR707(target, null);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c target, boolean loadComponent) {
		return getManyE_GSMEsOnR707(target, null, loadComponent);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR707(target, test, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR707(
			StateMachineEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new GenerateSmEventStatement_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_GenerateSmEventStatement_R707) {
			for (int i = 0; i < target.backPointer_GenerateSmEventStatement_R707
					.size(); ++i) {
				GenerateSmEventStatement_c source = (GenerateSmEventStatement_c) target.backPointer_GenerateSmEventStatement_R707
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			GenerateSmEventStatement_c[] ret_set = new GenerateSmEventStatement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new GenerateSmEventStatement_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	GenerateToCreator_c backPointer_IsSubtypeGenerateToCreatorIsSubtype_R705;

	public void setGenerateToCreatorOrderInChildListR705(
			GenerateToCreator_c target, int index) {
		unrelateAcrossR705From(target);
		GenerateToCreator_c[] elements = GenerateToCreator_c
				.getManyE_GECsOnR705(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR705From((GenerateToCreator_c) elements[i]);
			}
			count++;
		}
		relateAcrossR705To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR705To((GenerateToCreator_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR705To(GenerateToCreator_c target) {
		if (target != null) {
			target.relateAcrossR705To(this, true);
		}
	}

	public void relateAcrossR705To(GenerateToCreator_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR705To(this, notifyChanges);
		}
	}

	public void setBackPointerR705To(GenerateToCreator_c target) {
		backPointer_IsSubtypeGenerateToCreatorIsSubtype_R705 = target;
	}

	public void unrelateAcrossR705From(GenerateToCreator_c target) {
		if (target != null) {
			target.unrelateAcrossR705From(this, true);
		}
	}

	public void unrelateAcrossR705From(GenerateToCreator_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR705From(this, notifyChanges);
		}
	}

	public void clearBackPointerR705To(GenerateToCreator_c target) {
		if (target == backPointer_IsSubtypeGenerateToCreatorIsSubtype_R705) {
			backPointer_IsSubtypeGenerateToCreatorIsSubtype_R705 = null;
		}
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToCreator_c[] targets) {
		return getOneE_GSMEOnR705(targets, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToCreator_c[] targets, ClassQueryInterface_c test) {
		return getOneE_GSMEOnR705(targets, test, true);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToCreator_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		GenerateSmEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					GenerateSmEventStatement_c candidate_val = getOneE_GSMEOnR705(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneE_GSMEOnR705(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToCreator_c target) {
		return getOneE_GSMEOnR705(target, true);
	}
	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToCreator_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeGenerateSmEventStatement;
		} else {
			return null;
		}
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToCreator_c[] targets, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR705(targets, test, true);
	}

	public static GenerateSmEventStatement_c [] getManyE_GSMEsOnR705(GenerateToCreator_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GenerateSmEventStatement_c[0];
  
  
  LinkedHashSet<GenerateSmEventStatement_c> elementsSet = new LinkedHashSet<GenerateSmEventStatement_c>();
  for (int i = 0; i < targets.length; i++) {
    GenerateSmEventStatement_c associate = targets[i].IsSupertypeGenerateSmEventStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToCreator_c[] targets) {
		return getManyE_GSMEsOnR705(targets, null);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToCreator_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			GenerateToCreator_c[] targetArray = new GenerateToCreator_c[1];
			targetArray[0] = target;
			return getManyE_GSMEsOnR705(targetArray, test, loadComponent);
		} else {
			GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[0];
			return result;
		}

	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToCreator_c target, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR705(target, null, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToCreator_c target) {
		return getManyE_GSMEsOnR705(target, null, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToCreator_c target, boolean loadComponent) {
		return getManyE_GSMEsOnR705(target, null, loadComponent);
	}

	// referred to navigation

	Generate_c backPointer_IsSubtypeGenerateIsSubtype_R705;

	public void setGenerateOrderInChildListR705(Generate_c target, int index) {
		unrelateAcrossR705From(target);
		Generate_c[] elements = Generate_c.getManyE_GENsOnR705(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR705From((Generate_c) elements[i]);
			}
			count++;
		}
		relateAcrossR705To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR705To((Generate_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR705To(Generate_c target) {
		if (target != null) {
			target.relateAcrossR705To(this, true);
		}
	}

	public void relateAcrossR705To(Generate_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR705To(this, notifyChanges);
		}
	}

	public void setBackPointerR705To(Generate_c target) {
		backPointer_IsSubtypeGenerateIsSubtype_R705 = target;
	}

	public void unrelateAcrossR705From(Generate_c target) {
		if (target != null) {
			target.unrelateAcrossR705From(this, true);
		}
	}

	public void unrelateAcrossR705From(Generate_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR705From(this, notifyChanges);
		}
	}

	public void clearBackPointerR705To(Generate_c target) {
		if (target == backPointer_IsSubtypeGenerateIsSubtype_R705) {
			backPointer_IsSubtypeGenerateIsSubtype_R705 = null;
		}
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			Generate_c[] targets) {
		return getOneE_GSMEOnR705(targets, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			Generate_c[] targets, ClassQueryInterface_c test) {
		return getOneE_GSMEOnR705(targets, test, true);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			Generate_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		GenerateSmEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					GenerateSmEventStatement_c candidate_val = getOneE_GSMEOnR705(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneE_GSMEOnR705(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			Generate_c target) {
		return getOneE_GSMEOnR705(target, true);
	}
	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			Generate_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeGenerateSmEventStatement;
		} else {
			return null;
		}
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			Generate_c[] targets, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR705(targets, test, true);
	}

	public static GenerateSmEventStatement_c [] getManyE_GSMEsOnR705(Generate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GenerateSmEventStatement_c[0];
  
  
  LinkedHashSet<GenerateSmEventStatement_c> elementsSet = new LinkedHashSet<GenerateSmEventStatement_c>();
  for (int i = 0; i < targets.length; i++) {
    GenerateSmEventStatement_c associate = targets[i].IsSupertypeGenerateSmEventStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			Generate_c[] targets) {
		return getManyE_GSMEsOnR705(targets, null);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			Generate_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Generate_c[] targetArray = new Generate_c[1];
			targetArray[0] = target;
			return getManyE_GSMEsOnR705(targetArray, test, loadComponent);
		} else {
			GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[0];
			return result;
		}

	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			Generate_c target, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR705(target, null, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			Generate_c target) {
		return getManyE_GSMEsOnR705(target, null, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			Generate_c target, boolean loadComponent) {
		return getManyE_GSMEsOnR705(target, null, loadComponent);
	}

	// referred to navigation

	GenerateToClass_c backPointer_IsSubtypeGenerateToClassIsSubtype_R705;

	public void setGenerateToClassOrderInChildListR705(
			GenerateToClass_c target, int index) {
		unrelateAcrossR705From(target);
		GenerateToClass_c[] elements = GenerateToClass_c
				.getManyE_GARsOnR705(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR705From((GenerateToClass_c) elements[i]);
			}
			count++;
		}
		relateAcrossR705To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR705To((GenerateToClass_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR705To(GenerateToClass_c target) {
		if (target != null) {
			target.relateAcrossR705To(this, true);
		}
	}

	public void relateAcrossR705To(GenerateToClass_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR705To(this, notifyChanges);
		}
	}

	public void setBackPointerR705To(GenerateToClass_c target) {
		backPointer_IsSubtypeGenerateToClassIsSubtype_R705 = target;
	}

	public void unrelateAcrossR705From(GenerateToClass_c target) {
		if (target != null) {
			target.unrelateAcrossR705From(this, true);
		}
	}

	public void unrelateAcrossR705From(GenerateToClass_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR705From(this, notifyChanges);
		}
	}

	public void clearBackPointerR705To(GenerateToClass_c target) {
		if (target == backPointer_IsSubtypeGenerateToClassIsSubtype_R705) {
			backPointer_IsSubtypeGenerateToClassIsSubtype_R705 = null;
		}
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToClass_c[] targets) {
		return getOneE_GSMEOnR705(targets, null);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToClass_c[] targets, ClassQueryInterface_c test) {
		return getOneE_GSMEOnR705(targets, test, true);
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		GenerateSmEventStatement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					GenerateSmEventStatement_c candidate_val = getOneE_GSMEOnR705(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneE_GSMEOnR705(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToClass_c target) {
		return getOneE_GSMEOnR705(target, true);
	}
	public static GenerateSmEventStatement_c getOneE_GSMEOnR705(
			GenerateToClass_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeGenerateSmEventStatement;
		} else {
			return null;
		}
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToClass_c[] targets, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR705(targets, test, true);
	}

	public static GenerateSmEventStatement_c [] getManyE_GSMEsOnR705(GenerateToClass_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new GenerateSmEventStatement_c[0];
  
  
  LinkedHashSet<GenerateSmEventStatement_c> elementsSet = new LinkedHashSet<GenerateSmEventStatement_c>();
  for (int i = 0; i < targets.length; i++) {
    GenerateSmEventStatement_c associate = targets[i].IsSupertypeGenerateSmEventStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToClass_c[] targets) {
		return getManyE_GSMEsOnR705(targets, null);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			GenerateToClass_c[] targetArray = new GenerateToClass_c[1];
			targetArray[0] = target;
			return getManyE_GSMEsOnR705(targetArray, test, loadComponent);
		} else {
			GenerateSmEventStatement_c[] result = new GenerateSmEventStatement_c[0];
			return result;
		}

	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToClass_c target, ClassQueryInterface_c test) {
		return getManyE_GSMEsOnR705(target, null, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToClass_c target) {
		return getManyE_GSMEsOnR705(target, null, true);
	}

	public static GenerateSmEventStatement_c[] getManyE_GSMEsOnR705(
			GenerateToClass_c target, boolean loadComponent) {
		return getManyE_GSMEsOnR705(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R703
		GenerateEventStatement_c relInst56032 = (GenerateEventStatement_c) baseRoot
				.getInstanceList(GenerateEventStatement_c.class).get(
						new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56032 == null) {
			relInst56032 = (GenerateEventStatement_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(GenerateEventStatement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst56032 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56032 = (GenerateEventStatement_c) roots[i]
						.getInstanceList(GenerateEventStatement_c.class).get(
								new Object[]{m_statement_id});
				if (relInst56032 != null)
					break;
			}
		}
		//synchronized
		if (relInst56032 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56032) && !isProxy())) {
				relInst56032.relateAcrossR703To(this, notifyChanges);
			}
		}

		if (GeneratesStateMachineEvent == null) {
			// R707
			StateMachineEvent_c relInst56033 = (StateMachineEvent_c) baseRoot
					.getInstanceList(StateMachineEvent_c.class).get(
							new Object[]{m_smevt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56033 == null) {
				relInst56033 = (StateMachineEvent_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StateMachineEvent_c.class)
						.get(new Object[]{m_smevt_id});
			}
			if (relInst56033 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56033 = (StateMachineEvent_c) roots[i]
							.getInstanceList(StateMachineEvent_c.class).get(
									new Object[]{m_smevt_id});
					if (relInst56033 != null)
						break;
				}
			}
			//synchronized
			if (relInst56033 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56033) && !isProxy())) {
					relInst56033.relateAcrossR707To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R703
		// E_GES
		inst = IsSupertypeGenerateEventStatement;
		unrelateAcrossR703From(IsSupertypeGenerateEventStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R707
		// SM_EVT
		inst = GeneratesStateMachineEvent;
		unrelateAcrossR707From(GeneratesStateMachineEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(GenerateSmEventStatement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final GenerateSmEventStatement_c inst = (GenerateSmEventStatement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static GenerateSmEventStatement_c GenerateSmEventStatementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		GenerateSmEventStatement_c result = findGenerateSmEventStatementInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static GenerateSmEventStatement_c findGenerateSmEventStatementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				GenerateSmEventStatement_c x = (GenerateSmEventStatement_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static GenerateSmEventStatement_c GenerateSmEventStatementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return GenerateSmEventStatementInstance(modelRoot, test, true);
	}

	public static GenerateSmEventStatement_c GenerateSmEventStatementInstance(
			ModelRoot modelRoot) {
		return GenerateSmEventStatementInstance(modelRoot, null, true);
	}

	public static GenerateSmEventStatement_c[] GenerateSmEventStatementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateSmEventStatement_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				GenerateSmEventStatement_c x = (GenerateSmEventStatement_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				GenerateSmEventStatement_c[] ret_set = new GenerateSmEventStatement_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new GenerateSmEventStatement_c[0];
			}
		}
	}
	public static GenerateSmEventStatement_c[] GenerateSmEventStatementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return GenerateSmEventStatementInstances(modelRoot, test, true);
	}
	public static GenerateSmEventStatement_c[] GenerateSmEventStatementInstances(
			ModelRoot modelRoot) {
		return GenerateSmEventStatementInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Generate SM Event Statement.dispose call: ";
		GenerateEventStatement_c testR703Inst2 = GenerateEventStatement_c
				.getOneE_GESOnR703(this, false);

		if (testR703Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "703 ";
		}
		GenerateToCreator_c testR705Inst1 = GenerateToCreator_c
				.getOneE_GECOnR705(this, false);

		if (testR705Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "705 ";
		}
		Generate_c testR705Inst2 = Generate_c.getOneE_GENOnR705(this, false);

		if (testR705Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "705 ";
		}
		GenerateToClass_c testR705Inst3 = GenerateToClass_c.getOneE_GAROnR705(
				this, false);

		if (testR705Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "705 ";
		}
		StateMachineEvent_c testR707Inst = StateMachineEvent_c
				.getOneSM_EVTOnR707(this, false);

		if (testR707Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "707 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Generate SM Event Statement", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeGenerateEventStatement != null) {
			return IsSupertypeGenerateEventStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeGenerateEventStatement != null) {
			return IsSupertypeGenerateEventStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeGenerateEventStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSmevt_idLongBased() {
		if (GeneratesStateMachineEvent != null) {
			return GeneratesStateMachineEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (GeneratesStateMachineEvent != null) {
			return GeneratesStateMachineEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Generate SM Event Statement", //$NON-NLS-1$
						" Operation entered: Generate SM Event Statement::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		GenerateSmEventStatement_c[] objs = GenerateSmEventStatement_c
				.GenerateSmEventStatementInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Generate SM Event Statement", //$NON-NLS-1$
						" Operation entered: Generate SM Event Statement::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class GenerateSmEventStatement_c_test56035_c
				implements
					ClassQueryInterface_c {
			GenerateSmEventStatement_c_test56035_c(java.util.UUID p56036) {
				m_p56036 = p56036;
			}
			private java.util.UUID m_p56036;
			public boolean evaluate(Object candidate) {
				GenerateSmEventStatement_c selected = (GenerateSmEventStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56036));
				return retval;
			}
		}

		GenerateSmEventStatement_c[] objs56034 = GenerateSmEventStatement_c
				.GenerateSmEventStatementInstances(modelRoot,
						new GenerateSmEventStatement_c_test56035_c(
								getStatement_id()));

		if (((objs56034.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Generate SM Event Statement", //$NON-NLS-1$
								"Consistency: Object: Generate SM Event Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56034.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate SM Event Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56034.length), e);
			}
			retval = false;

		}

		if (((objs56034.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Generate SM Event Statement", //$NON-NLS-1$
								"Consistency: Object: Generate SM Event Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56034.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate SM Event Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56034.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Generate SM Event Statement is a subtype in association: rel.Numb = 703
		// The supertype class is: Generate Event Statement
		class GenerateEventStatement_c_test56040_c
				implements
					ClassQueryInterface_c {
			GenerateEventStatement_c_test56040_c(java.util.UUID p56041) {
				m_p56041 = p56041;
			}
			private java.util.UUID m_p56041;
			public boolean evaluate(Object candidate) {
				GenerateEventStatement_c selected = (GenerateEventStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56041));
				return retval;
			}
		}

		GenerateEventStatement_c[] objs56039 = GenerateEventStatement_c
				.GenerateEventStatementInstances(modelRoot,
						new GenerateEventStatement_c_test56040_c(
								getStatement_id()));

		if (((objs56039.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Generate SM Event Statement", //$NON-NLS-1$
								"Consistency: Object: Generate SM Event Statement: Association: 703: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56039.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate SM Event Statement: Association: 703: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56039.length), e);
			}
			retval = false;

		}

		// Generate SM Event Statement is a referring class in association: rel.Numb = 707
		// The participating class is: State Machine Event
		class StateMachineEvent_c_test56043_c implements ClassQueryInterface_c {
			StateMachineEvent_c_test56043_c(java.util.UUID p56044) {
				m_p56044 = p56044;
			}
			private java.util.UUID m_p56044;
			public boolean evaluate(Object candidate) {
				StateMachineEvent_c selected = (StateMachineEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p56044));
				return retval;
			}
		}

		StateMachineEvent_c[] objs56042 = StateMachineEvent_c
				.StateMachineEventInstances(modelRoot,
						new StateMachineEvent_c_test56043_c(getSmevt_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56042.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Generate SM Event Statement", //$NON-NLS-1$
								"Consistency: Object: Generate SM Event Statement: Association: 707: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56042.length)
										+ " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate SM Event Statement: Association: 707: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56042.length)
										+ " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 705
		int objs56045 = 0;
		// Subtype Object: Generate to Creator
		class GenerateToCreator_c_test56046_c implements ClassQueryInterface_c {
			GenerateToCreator_c_test56046_c(java.util.UUID p56047) {
				m_p56047 = p56047;
			}
			private java.util.UUID m_p56047;
			public boolean evaluate(Object candidate) {
				GenerateToCreator_c selected = (GenerateToCreator_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56047));
				return retval;
			}
		}

		GenerateToCreator_c[] objs56048 = GenerateToCreator_c
				.GenerateToCreatorInstances(modelRoot,
						new GenerateToCreator_c_test56046_c(getStatement_id()));

		objs56045 = objs56045 + objs56048.length;
		// Subtype Object: Generate
		class Generate_c_test56049_c implements ClassQueryInterface_c {
			Generate_c_test56049_c(java.util.UUID p56050) {
				m_p56050 = p56050;
			}
			private java.util.UUID m_p56050;
			public boolean evaluate(Object candidate) {
				Generate_c selected = (Generate_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56050));
				return retval;
			}
		}

		Generate_c[] objs56051 = Generate_c.GenerateInstances(modelRoot,
				new Generate_c_test56049_c(getStatement_id()));

		objs56045 = objs56045 + objs56051.length;
		// Subtype Object: Generate to Class
		class GenerateToClass_c_test56052_c implements ClassQueryInterface_c {
			GenerateToClass_c_test56052_c(java.util.UUID p56053) {
				m_p56053 = p56053;
			}
			private java.util.UUID m_p56053;
			public boolean evaluate(Object candidate) {
				GenerateToClass_c selected = (GenerateToClass_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56053));
				return retval;
			}
		}

		GenerateToClass_c[] objs56054 = GenerateToClass_c
				.GenerateToClassInstances(modelRoot,
						new GenerateToClass_c_test56052_c(getStatement_id()));

		objs56045 = objs56045 + objs56054.length;
		if (objs56045 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Generate SM Event Statement", //$NON-NLS-1$
								"Consistency: Object: Generate SM Event Statement: Association: 705: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56045)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate SM Event Statement: Association: 705: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56045), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generate SM Event Statement",
				" Operation entered: GenerateSmEventStatement::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Generate_c v_gen = Generate_c.getOneE_GENOnR705(this);

		if (((v_gen != null))) {

			this.unrelateAcrossR705From(v_gen);

			if (v_gen != null) {
				v_gen.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		GenerateToClass_c v_gar = GenerateToClass_c.getOneE_GAROnR705(this);

		if (((v_gar != null))) {

			this.unrelateAcrossR705From(v_gar);

			if (v_gar != null) {
				v_gar.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		GenerateToCreator_c v_gec = GenerateToCreator_c.getOneE_GECOnR705(this);

		if (((v_gec != null))) {

			this.unrelateAcrossR705From(v_gec);

			if (v_gec != null) {
				v_gec.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR707(this);

		if (((v_evt != null))) {

			this.unrelateAcrossR707From(v_evt);

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Generate SM Event Statement",
				" Operation entered: GenerateSmEventStatement::Execute");
		final ModelRoot modelRoot = getModelRoot();
		Generate_c v_gen = Generate_c.getOneE_GENOnR705(this);

		GenerateToClass_c v_gar = GenerateToClass_c.getOneE_GAROnR705(this);

		GenerateToCreator_c v_gec = GenerateToCreator_c.getOneE_GECOnR705(this);

		if (((v_gen != null))) {

			if (v_gen != null) {
				v_gen.Execute(p_Stack_frame_id);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_gar != null))) {

			if (v_gar != null) {
				v_gar.Execute(p_Stack_frame_id);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_gec != null))) {

			if (v_gec != null) {
				v_gec.Execute(p_Stack_frame_id);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Generate SM Event Statement
