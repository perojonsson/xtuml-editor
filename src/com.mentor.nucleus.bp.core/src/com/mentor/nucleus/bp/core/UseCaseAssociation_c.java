package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.UseCaseAssociation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_USE_CASE_ASSOCIATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class UseCaseAssociation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public UseCaseAssociation_c(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, java.util.UUID p_m_source_part_id,
			java.util.UUID p_m_destination_part_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_source_part_id = IdAssigner.preprocessUUID(p_m_source_part_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_destination_part_id = IdAssigner
				.preprocessUUID(p_m_destination_part_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);

		setUniqueId(m_assoc_id);
		Object[] key = {m_assoc_id};
		addInstanceToMap(key);
	}
	static public UseCaseAssociation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, java.util.UUID p_m_source_part_id,
			java.util.UUID p_m_destination_part_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);
		UseCaseAssociation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_assoc_id};
			new_inst = (UseCaseAssociation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_source_part_id = IdAssigner
						.preprocessUUID(p_m_source_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_destination_part_id = IdAssigner
						.preprocessUUID(p_m_destination_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new UseCaseAssociation_c(modelRoot, p_m_assoc_id,
					p_m_source_part_id, p_m_destination_part_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public UseCaseAssociation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, java.util.UUID p_m_source_part_id,
			java.util.UUID p_m_destination_part_id) {
		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);
		UseCaseAssociation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_assoc_id};
			source = (UseCaseAssociation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_source_part_id = IdAssigner
						.preprocessUUID(p_m_source_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_destination_part_id = IdAssigner
						.preprocessUUID(p_m_destination_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);

				return source;
			}
		}
		// there is no instance matching the id
		UseCaseAssociation_c new_inst = new UseCaseAssociation_c(modelRoot,
				p_m_assoc_id, p_m_source_part_id, p_m_destination_part_id);
		return new_inst;
	}
	public UseCaseAssociation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_source_part_id = IdAssigner.NULL_UUID;
		m_destination_part_id = IdAssigner.NULL_UUID;
		m_assoc_id = idAssigner.createUUID();
		setUniqueId(m_assoc_id);
		Object[] key = {m_assoc_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_assoc_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_assoc_id != p_newKey) {

			m_assoc_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof UseCaseAssociation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof UseCaseAssociation_c)) {
			return false;
		}

		UseCaseAssociation_c me = (UseCaseAssociation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAssoc_id()) || IdAssigner.NULL_UUID
						.equals(((UseCaseAssociation_c) elem).getAssoc_id())) && this != elem)) {
			return false;
		}
		if (!getAssoc_id().equals(((UseCaseAssociation_c) elem).getAssoc_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof UseCaseAssociation_c)) {
			return false;
		}

		UseCaseAssociation_c me = (UseCaseAssociation_c) elem;
		if (!getAssoc_idCachedValue().equals(
				((UseCaseAssociation_c) elem).getAssoc_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_source_part_id;
	private java.util.UUID m_destination_part_id;
	private java.util.UUID m_assoc_id;

	// declare association references from this class

	// referring navigation

	InteractionParticipant_c StartsAtInteractionParticipant;
	public void relateAcrossR1206To(InteractionParticipant_c target) {
		relateAcrossR1206To(target, true);
	}
	public void relateAcrossR1206To(InteractionParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == StartsAtInteractionParticipant)
			return; // already related

		if (StartsAtInteractionParticipant != target) {

			Object oldKey = getInstanceKey();

			if (StartsAtInteractionParticipant != null) {

				StartsAtInteractionParticipant.clearBackPointerR1206To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"UseCaseAssociation_c.relateAcrossR1206To(InteractionParticipant_c target)",
									"Relate performed across R1206 from Use Case Association to Interaction Participant without unrelate of prior instance.");
				}
			}

			StartsAtInteractionParticipant = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_source_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1206To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1206", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1206From(InteractionParticipant_c target) {
		unrelateAcrossR1206From(target, true);
	}
	public void unrelateAcrossR1206From(InteractionParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (StartsAtInteractionParticipant == null)
			return; // already unrelated

		if (target != StartsAtInteractionParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1206",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1206To(this);
		}

		if (StartsAtInteractionParticipant != null) {

			m_source_part_id = StartsAtInteractionParticipant.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_source_part_id)) {
				m_source_part_id = StartsAtInteractionParticipant
						.getPart_idCachedValue();
			}
			StartsAtInteractionParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1206", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(
			InteractionParticipant_c[] targets) {
		return getOneUC_UCAOnR1206(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneUC_UCAOnR1206(targets[i], test);
			}
		}

		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(
			InteractionParticipant_c target) {
		return getOneUC_UCAOnR1206(target, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(
			InteractionParticipant_c target, boolean loadComponent) {
		return getOneUC_UCAOnR1206(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneUC_UCAOnR1206(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(ModelRoot modelRoot,
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1206(modelRoot, target, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1206(ModelRoot modelRoot,
			InteractionParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneUC_UCAOnR1206(modelRoot, target, test);
	}
	private static UseCaseAssociation_c find_getOneUC_UCAOnR1206(
			ModelRoot modelRoot, InteractionParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsSourceUseCaseAssociationIsSource_R1206) {
				for (int i = 0; i < target.backPointer_IsSourceUseCaseAssociationIsSource_R1206
						.size(); ++i) {
					UseCaseAssociation_c source = (UseCaseAssociation_c) target.backPointer_IsSourceUseCaseAssociationIsSource_R1206
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c[] targets) {
		return getManyUC_UCAsOnR1206(targets, null);
	}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c[] targets, boolean loadComponent) {
		return getManyUC_UCAsOnR1206(targets, null, loadComponent);
	}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1206(targets, test, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new UseCaseAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsSourceUseCaseAssociationIsSource_R1206) {
				for (int j = 0; j < targets[i].backPointer_IsSourceUseCaseAssociationIsSource_R1206
						.size(); ++j) {
					UseCaseAssociation_c source = (UseCaseAssociation_c) targets[i].backPointer_IsSourceUseCaseAssociationIsSource_R1206
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			UseCaseAssociation_c[] ret_set = new UseCaseAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new UseCaseAssociation_c[0];
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c target) {
		return getManyUC_UCAsOnR1206(target, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c target, boolean loadComponent) {
		return getManyUC_UCAsOnR1206(target, null, loadComponent);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1206(target, test, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1206(
			InteractionParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new UseCaseAssociation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsSourceUseCaseAssociationIsSource_R1206) {
			for (int i = 0; i < target.backPointer_IsSourceUseCaseAssociationIsSource_R1206
					.size(); ++i) {
				UseCaseAssociation_c source = (UseCaseAssociation_c) target.backPointer_IsSourceUseCaseAssociationIsSource_R1206
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			UseCaseAssociation_c[] ret_set = new UseCaseAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new UseCaseAssociation_c[0];
		}
	}

	// referring navigation

	InteractionParticipant_c EndsAtInteractionParticipant;
	public void relateAcrossR1207To(InteractionParticipant_c target) {
		relateAcrossR1207To(target, true);
	}
	public void relateAcrossR1207To(InteractionParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == EndsAtInteractionParticipant)
			return; // already related

		if (EndsAtInteractionParticipant != target) {

			Object oldKey = getInstanceKey();

			if (EndsAtInteractionParticipant != null) {

				EndsAtInteractionParticipant.clearBackPointerR1207To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"UseCaseAssociation_c.relateAcrossR1207To(InteractionParticipant_c target)",
									"Relate performed across R1207 from Use Case Association to Interaction Participant without unrelate of prior instance.");
				}
			}

			EndsAtInteractionParticipant = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_destination_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1207To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1207", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1207From(InteractionParticipant_c target) {
		unrelateAcrossR1207From(target, true);
	}
	public void unrelateAcrossR1207From(InteractionParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (EndsAtInteractionParticipant == null)
			return; // already unrelated

		if (target != EndsAtInteractionParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1207",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1207To(this);
		}

		if (EndsAtInteractionParticipant != null) {

			m_destination_part_id = EndsAtInteractionParticipant.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_destination_part_id)) {
				m_destination_part_id = EndsAtInteractionParticipant
						.getPart_idCachedValue();
			}
			EndsAtInteractionParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1207", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(
			InteractionParticipant_c[] targets) {
		return getOneUC_UCAOnR1207(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneUC_UCAOnR1207(targets[i], test);
			}
		}

		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(
			InteractionParticipant_c target) {
		return getOneUC_UCAOnR1207(target, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(
			InteractionParticipant_c target, boolean loadComponent) {
		return getOneUC_UCAOnR1207(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneUC_UCAOnR1207(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(ModelRoot modelRoot,
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1207(modelRoot, target, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1207(ModelRoot modelRoot,
			InteractionParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneUC_UCAOnR1207(modelRoot, target, test);
	}
	private static UseCaseAssociation_c find_getOneUC_UCAOnR1207(
			ModelRoot modelRoot, InteractionParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsDestinationUseCaseAssociationIsDestination_R1207) {
				for (int i = 0; i < target.backPointer_IsDestinationUseCaseAssociationIsDestination_R1207
						.size(); ++i) {
					UseCaseAssociation_c source = (UseCaseAssociation_c) target.backPointer_IsDestinationUseCaseAssociationIsDestination_R1207
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c[] targets) {
		return getManyUC_UCAsOnR1207(targets, null);
	}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c[] targets, boolean loadComponent) {
		return getManyUC_UCAsOnR1207(targets, null, loadComponent);
	}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1207(targets, test, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new UseCaseAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsDestinationUseCaseAssociationIsDestination_R1207) {
				for (int j = 0; j < targets[i].backPointer_IsDestinationUseCaseAssociationIsDestination_R1207
						.size(); ++j) {
					UseCaseAssociation_c source = (UseCaseAssociation_c) targets[i].backPointer_IsDestinationUseCaseAssociationIsDestination_R1207
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			UseCaseAssociation_c[] ret_set = new UseCaseAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new UseCaseAssociation_c[0];
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c target) {
		return getManyUC_UCAsOnR1207(target, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c target, boolean loadComponent) {
		return getManyUC_UCAsOnR1207(target, null, loadComponent);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1207(target, test, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1207(
			InteractionParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new UseCaseAssociation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsDestinationUseCaseAssociationIsDestination_R1207) {
			for (int i = 0; i < target.backPointer_IsDestinationUseCaseAssociationIsDestination_R1207
					.size(); ++i) {
				UseCaseAssociation_c source = (UseCaseAssociation_c) target.backPointer_IsDestinationUseCaseAssociationIsDestination_R1207
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			UseCaseAssociation_c[] ret_set = new UseCaseAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new UseCaseAssociation_c[0];
		}
	}

	// referring navigation

	PackageableElement_c IsSupertypePackageableElement;
	public void relateAcrossR8001To(PackageableElement_c target) {
		relateAcrossR8001To(target, true);
	}
	public void relateAcrossR8001To(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypePackageableElement)
			return; // already related

		if (IsSupertypePackageableElement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypePackageableElement != null) {

				IsSupertypePackageableElement.clearBackPointerR8001To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"UseCaseAssociation_c.relateAcrossR8001To(PackageableElement_c target)",
									"Relate performed across R8001 from Use Case Association to Packageable Element without unrelate of prior instance.");
				}
			}

			IsSupertypePackageableElement = target;
			m_assoc_id = target.getElement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8001To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8001From(PackageableElement_c target) {
		unrelateAcrossR8001From(target, true);
	}
	public void unrelateAcrossR8001From(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypePackageableElement == null)
			return; // already unrelated

		if (target != IsSupertypePackageableElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8001",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8001To(this);
		}

		if (IsSupertypePackageableElement != null) {

			m_assoc_id = IsSupertypePackageableElement.getElement_id();
			IsSupertypePackageableElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(
			PackageableElement_c[] targets) {
		return getOneUC_UCAOnR8001(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneUC_UCAOnR8001(targets[i], test);
			}
		}

		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(
			PackageableElement_c target) {
		return getOneUC_UCAOnR8001(target, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(
			PackageableElement_c target, boolean loadComponent) {
		return getOneUC_UCAOnR8001(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(
			PackageableElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneUC_UCAOnR8001(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test) {
		return getOneUC_UCAOnR8001(modelRoot, target, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR8001(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneUC_UCAOnR8001(modelRoot, target, test);
	}
	private static UseCaseAssociation_c find_getOneUC_UCAOnR8001(
			ModelRoot modelRoot, PackageableElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			UseCaseAssociation_c source = (UseCaseAssociation_c) target.backPointer_IsSubtypeUseCaseAssociationIsSubtype_R8001;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR8001(
			PackageableElement_c[] targets) {
		return getManyUC_UCAsOnR8001(targets, null);
	}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR8001(
			PackageableElement_c[] targets, boolean loadComponent) {
		return getManyUC_UCAsOnR8001(targets, null, loadComponent);
	}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR8001(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR8001(targets, test, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR8001(
			PackageableElement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new UseCaseAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			UseCaseAssociation_c source = (UseCaseAssociation_c) targets[i].backPointer_IsSubtypeUseCaseAssociationIsSubtype_R8001;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			UseCaseAssociation_c[] ret_set = new UseCaseAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new UseCaseAssociation_c[0];
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR8001(
			PackageableElement_c target) {
		if (target != null) {
			PackageableElement_c[] targetArray = new PackageableElement_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR8001(targetArray);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR8001(
			PackageableElement_c target, boolean loadComponent) {
		if (target != null) {
			PackageableElement_c[] targetArray = new PackageableElement_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR8001(targetArray, loadComponent);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	Extend_c backPointer_IsSubtypeExtendIsSubtype_R1210;

	public void setExtendOrderInChildListR1210(Extend_c target, int index) {
		unrelateAcrossR1210From(target);
		Extend_c[] elements = Extend_c.getManyUC_EsOnR1210(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1210From((Extend_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1210To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1210To((Extend_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1210To(Extend_c target) {
		if (target != null) {
			target.relateAcrossR1210To(this, true);
		}
	}

	public void relateAcrossR1210To(Extend_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1210To(this, notifyChanges);
		}
	}

	public void setBackPointerR1210To(Extend_c target) {
		backPointer_IsSubtypeExtendIsSubtype_R1210 = target;
	}

	public void unrelateAcrossR1210From(Extend_c target) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, true);
		}
	}

	public void unrelateAcrossR1210From(Extend_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1210To(Extend_c target) {
		if (target == backPointer_IsSubtypeExtendIsSubtype_R1210) {
			backPointer_IsSubtypeExtendIsSubtype_R1210 = null;
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Extend_c[] targets) {
		return getOneUC_UCAOnR1210(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Extend_c[] targets,
			ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Extend_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					UseCaseAssociation_c candidate_val = getOneUC_UCAOnR1210(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneUC_UCAOnR1210(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Extend_c target) {
		return getOneUC_UCAOnR1210(target, true);
	}
	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Extend_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeUseCaseAssociation;
		} else {
			return null;
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Extend_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c [] getManyUC_UCAsOnR1210(Extend_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseAssociation_c[0];
  
  
  LinkedHashSet<UseCaseAssociation_c> elementsSet = new LinkedHashSet<UseCaseAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeUseCaseAssociation == null)
	  targets[i].loadProxy();
    UseCaseAssociation_c associate = targets[i].IsSupertypeUseCaseAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseAssociation_c[] result = new UseCaseAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Extend_c[] targets) {
		return getManyUC_UCAsOnR1210(targets, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(Extend_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Extend_c[] targetArray = new Extend_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR1210(targetArray, test, loadComponent);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}

	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(Extend_c target,
			ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(Extend_c target) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(Extend_c target,
			boolean loadComponent) {
		return getManyUC_UCAsOnR1210(target, null, loadComponent);
	}

	// referred to navigation

	Generalization_c backPointer_IsSubtypeGeneralizationIsSubtype_R1210;

	public void setGeneralizationOrderInChildListR1210(Generalization_c target,
			int index) {
		unrelateAcrossR1210From(target);
		Generalization_c[] elements = Generalization_c
				.getManyUC_GsOnR1210(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1210From((Generalization_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1210To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1210To((Generalization_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1210To(Generalization_c target) {
		if (target != null) {
			target.relateAcrossR1210To(this, true);
		}
	}

	public void relateAcrossR1210To(Generalization_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1210To(this, notifyChanges);
		}
	}

	public void setBackPointerR1210To(Generalization_c target) {
		backPointer_IsSubtypeGeneralizationIsSubtype_R1210 = target;
	}

	public void unrelateAcrossR1210From(Generalization_c target) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, true);
		}
	}

	public void unrelateAcrossR1210From(Generalization_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1210To(Generalization_c target) {
		if (target == backPointer_IsSubtypeGeneralizationIsSubtype_R1210) {
			backPointer_IsSubtypeGeneralizationIsSubtype_R1210 = null;
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			Generalization_c[] targets) {
		return getOneUC_UCAOnR1210(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			Generalization_c[] targets, ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			Generalization_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					UseCaseAssociation_c candidate_val = getOneUC_UCAOnR1210(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneUC_UCAOnR1210(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			Generalization_c target) {
		return getOneUC_UCAOnR1210(target, true);
	}
	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			Generalization_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeUseCaseAssociation;
		} else {
			return null;
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Generalization_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c [] getManyUC_UCAsOnR1210(Generalization_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseAssociation_c[0];
  
  
  LinkedHashSet<UseCaseAssociation_c> elementsSet = new LinkedHashSet<UseCaseAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeUseCaseAssociation == null)
	  targets[i].loadProxy();
    UseCaseAssociation_c associate = targets[i].IsSupertypeUseCaseAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseAssociation_c[] result = new UseCaseAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Generalization_c[] targets) {
		return getManyUC_UCAsOnR1210(targets, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Generalization_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			Generalization_c[] targetArray = new Generalization_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR1210(targetArray, test, loadComponent);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}

	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Generalization_c target, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Generalization_c target) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Generalization_c target, boolean loadComponent) {
		return getManyUC_UCAsOnR1210(target, null, loadComponent);
	}

	// referred to navigation

	Include_c backPointer_IsSubtypeIncludeIsSubtype_R1210;

	public void setIncludeOrderInChildListR1210(Include_c target, int index) {
		unrelateAcrossR1210From(target);
		Include_c[] elements = Include_c.getManyUC_IsOnR1210(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1210From((Include_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1210To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1210To((Include_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1210To(Include_c target) {
		if (target != null) {
			target.relateAcrossR1210To(this, true);
		}
	}

	public void relateAcrossR1210To(Include_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1210To(this, notifyChanges);
		}
	}

	public void setBackPointerR1210To(Include_c target) {
		backPointer_IsSubtypeIncludeIsSubtype_R1210 = target;
	}

	public void unrelateAcrossR1210From(Include_c target) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, true);
		}
	}

	public void unrelateAcrossR1210From(Include_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1210To(Include_c target) {
		if (target == backPointer_IsSubtypeIncludeIsSubtype_R1210) {
			backPointer_IsSubtypeIncludeIsSubtype_R1210 = null;
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Include_c[] targets) {
		return getOneUC_UCAOnR1210(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Include_c[] targets,
			ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Include_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					UseCaseAssociation_c candidate_val = getOneUC_UCAOnR1210(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneUC_UCAOnR1210(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Include_c target) {
		return getOneUC_UCAOnR1210(target, true);
	}
	public static UseCaseAssociation_c getOneUC_UCAOnR1210(Include_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeUseCaseAssociation;
		} else {
			return null;
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Include_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c [] getManyUC_UCAsOnR1210(Include_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseAssociation_c[0];
  
  
  LinkedHashSet<UseCaseAssociation_c> elementsSet = new LinkedHashSet<UseCaseAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeUseCaseAssociation == null)
	  targets[i].loadProxy();
    UseCaseAssociation_c associate = targets[i].IsSupertypeUseCaseAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseAssociation_c[] result = new UseCaseAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Include_c[] targets) {
		return getManyUC_UCAsOnR1210(targets, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Include_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Include_c[] targetArray = new Include_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR1210(targetArray, test, loadComponent);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}

	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Include_c target, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(Include_c target) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			Include_c target, boolean loadComponent) {
		return getManyUC_UCAsOnR1210(target, null, loadComponent);
	}

	// referred to navigation

	BinaryAssociation_c backPointer_IsSubtypeBinaryAssociationIsSubtype_R1210;

	public void setBinaryAssociationOrderInChildListR1210(
			BinaryAssociation_c target, int index) {
		unrelateAcrossR1210From(target);
		BinaryAssociation_c[] elements = BinaryAssociation_c
				.getManyUC_BAsOnR1210(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1210From((BinaryAssociation_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1210To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1210To((BinaryAssociation_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1210To(BinaryAssociation_c target) {
		if (target != null) {
			target.relateAcrossR1210To(this, true);
		}
	}

	public void relateAcrossR1210To(BinaryAssociation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1210To(this, notifyChanges);
		}
	}

	public void setBackPointerR1210To(BinaryAssociation_c target) {
		backPointer_IsSubtypeBinaryAssociationIsSubtype_R1210 = target;
	}

	public void unrelateAcrossR1210From(BinaryAssociation_c target) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, true);
		}
	}

	public void unrelateAcrossR1210From(BinaryAssociation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1210From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1210To(BinaryAssociation_c target) {
		if (target == backPointer_IsSubtypeBinaryAssociationIsSubtype_R1210) {
			backPointer_IsSubtypeBinaryAssociationIsSubtype_R1210 = null;
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			BinaryAssociation_c[] targets) {
		return getOneUC_UCAOnR1210(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			BinaryAssociation_c[] targets, ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			BinaryAssociation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					UseCaseAssociation_c candidate_val = getOneUC_UCAOnR1210(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneUC_UCAOnR1210(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			BinaryAssociation_c target) {
		return getOneUC_UCAOnR1210(target, true);
	}
	public static UseCaseAssociation_c getOneUC_UCAOnR1210(
			BinaryAssociation_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeUseCaseAssociation;
		} else {
			return null;
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			BinaryAssociation_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(targets, test, true);
	}

	public static UseCaseAssociation_c [] getManyUC_UCAsOnR1210(BinaryAssociation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseAssociation_c[0];
  
  
  LinkedHashSet<UseCaseAssociation_c> elementsSet = new LinkedHashSet<UseCaseAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeUseCaseAssociation == null)
	  targets[i].loadProxy();
    UseCaseAssociation_c associate = targets[i].IsSupertypeUseCaseAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseAssociation_c[] result = new UseCaseAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			BinaryAssociation_c[] targets) {
		return getManyUC_UCAsOnR1210(targets, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			BinaryAssociation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			BinaryAssociation_c[] targetArray = new BinaryAssociation_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR1210(targetArray, test, loadComponent);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}

	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			BinaryAssociation_c target, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			BinaryAssociation_c target) {
		return getManyUC_UCAsOnR1210(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1210(
			BinaryAssociation_c target, boolean loadComponent) {
		return getManyUC_UCAsOnR1210(target, null, loadComponent);
	}

	// referred to navigation

	AssociationInUseCase_c backPointer_ContainedThroughAssociationInUseCaseContainedThrough_R1215;

	public void setAssociationInUseCaseOrderInChildListR1215(
			AssociationInUseCase_c target, int index) {
		unrelateAcrossR1215From(target);
		AssociationInUseCase_c[] elements = AssociationInUseCase_c
				.getManyUC_AIUCsOnR1215(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1215From((AssociationInUseCase_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1215To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1215To((AssociationInUseCase_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1215To(AssociationInUseCase_c target) {
		if (target != null) {
			target.relateAcrossR1215To(this, true);
		}
	}

	public void relateAcrossR1215To(AssociationInUseCase_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1215To(this, notifyChanges);
		}
	}

	public void setBackPointerR1215To(AssociationInUseCase_c target) {
		backPointer_ContainedThroughAssociationInUseCaseContainedThrough_R1215 = target;
	}

	public void unrelateAcrossR1215From(AssociationInUseCase_c target) {
		if (target != null) {
			target.unrelateAcrossR1215From(this, true);
		}
	}

	public void unrelateAcrossR1215From(AssociationInUseCase_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1215From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1215To(AssociationInUseCase_c target) {
		if (target == backPointer_ContainedThroughAssociationInUseCaseContainedThrough_R1215) {
			backPointer_ContainedThroughAssociationInUseCaseContainedThrough_R1215 = null;
		}
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1215(
			AssociationInUseCase_c[] targets) {
		return getOneUC_UCAOnR1215(targets, null);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1215(
			AssociationInUseCase_c[] targets, ClassQueryInterface_c test) {
		return getOneUC_UCAOnR1215(targets, test, true);
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1215(
			AssociationInUseCase_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		UseCaseAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					UseCaseAssociation_c candidate_val = getOneUC_UCAOnR1215(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneUC_UCAOnR1215(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static UseCaseAssociation_c getOneUC_UCAOnR1215(
			AssociationInUseCase_c target) {
		return getOneUC_UCAOnR1215(target, true);
	}
	public static UseCaseAssociation_c getOneUC_UCAOnR1215(
			AssociationInUseCase_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.ProvidesContainmentUseCaseAssociation;
		} else {
			return null;
		}
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1215(
			AssociationInUseCase_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1215(targets, test, true);
	}

	public static UseCaseAssociation_c [] getManyUC_UCAsOnR1215(AssociationInUseCase_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseAssociation_c[0];
  
  
  LinkedHashSet<UseCaseAssociation_c> elementsSet = new LinkedHashSet<UseCaseAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ProvidesContainmentUseCaseAssociation == null)
	  targets[i].loadProxy();
    UseCaseAssociation_c associate = targets[i].ProvidesContainmentUseCaseAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseAssociation_c[] result = new UseCaseAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1215(
			AssociationInUseCase_c[] targets) {
		return getManyUC_UCAsOnR1215(targets, null);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1215(
			AssociationInUseCase_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			AssociationInUseCase_c[] targetArray = new AssociationInUseCase_c[1];
			targetArray[0] = target;
			return getManyUC_UCAsOnR1215(targetArray, test, loadComponent);
		} else {
			UseCaseAssociation_c[] result = new UseCaseAssociation_c[0];
			return result;
		}

	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1215(
			AssociationInUseCase_c target, ClassQueryInterface_c test) {
		return getManyUC_UCAsOnR1215(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1215(
			AssociationInUseCase_c target) {
		return getManyUC_UCAsOnR1215(target, null, true);
	}

	public static UseCaseAssociation_c[] getManyUC_UCAsOnR1215(
			AssociationInUseCase_c target, boolean loadComponent) {
		return getManyUC_UCAsOnR1215(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (StartsAtInteractionParticipant == null) {
			// R1206
			InteractionParticipant_c relInst38450 = (InteractionParticipant_c) baseRoot
					.getInstanceList(InteractionParticipant_c.class).get(
							new Object[]{m_source_part_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38450 == null) {
				relInst38450 = (InteractionParticipant_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(InteractionParticipant_c.class)
						.get(new Object[]{m_source_part_id});
			}
			if (relInst38450 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38450 = (InteractionParticipant_c) roots[i]
							.getInstanceList(InteractionParticipant_c.class)
							.get(new Object[]{m_source_part_id});
					if (relInst38450 != null)
						break;
				}
			}
			//synchronized
			if (relInst38450 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38450) && !isProxy())) {
					relInst38450.relateAcrossR1206To(this, notifyChanges);
				}
			}
		}

		if (EndsAtInteractionParticipant == null) {
			// R1207
			InteractionParticipant_c relInst38451 = (InteractionParticipant_c) baseRoot
					.getInstanceList(InteractionParticipant_c.class).get(
							new Object[]{m_destination_part_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38451 == null) {
				relInst38451 = (InteractionParticipant_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(InteractionParticipant_c.class)
						.get(new Object[]{m_destination_part_id});
			}
			if (relInst38451 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38451 = (InteractionParticipant_c) roots[i]
							.getInstanceList(InteractionParticipant_c.class)
							.get(new Object[]{m_destination_part_id});
					if (relInst38451 != null)
						break;
				}
			}
			//synchronized
			if (relInst38451 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38451) && !isProxy())) {
					relInst38451.relateAcrossR1207To(this, notifyChanges);
				}
			}
		}

		// R8001
		PackageableElement_c relInst38452 = (PackageableElement_c) baseRoot
				.getInstanceList(PackageableElement_c.class).get(
						new Object[]{m_assoc_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38452 == null) {
			relInst38452 = (PackageableElement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(PackageableElement_c.class)
					.get(new Object[]{m_assoc_id});
		}
		if (relInst38452 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38452 = (PackageableElement_c) roots[i].getInstanceList(
						PackageableElement_c.class).get(
						new Object[]{m_assoc_id});
				if (relInst38452 != null)
					break;
			}
		}
		//synchronized
		if (relInst38452 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38452) && !isProxy())) {
				relInst38452.relateAcrossR8001To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1206
		// SQ_P
		inst = StartsAtInteractionParticipant;
		unrelateAcrossR1206From(StartsAtInteractionParticipant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1207
		// SQ_P
		inst = EndsAtInteractionParticipant;
		unrelateAcrossR1207From(EndsAtInteractionParticipant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R8001
		// PE_PE
		inst = IsSupertypePackageableElement;
		unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(UseCaseAssociation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final UseCaseAssociation_c inst = (UseCaseAssociation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static UseCaseAssociation_c UseCaseAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		UseCaseAssociation_c result = findUseCaseAssociationInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					UseCaseAssociation_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findUseCaseAssociationInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static UseCaseAssociation_c findUseCaseAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				UseCaseAssociation_c x = (UseCaseAssociation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static UseCaseAssociation_c UseCaseAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return UseCaseAssociationInstance(modelRoot, test, true);
	}

	public static UseCaseAssociation_c UseCaseAssociationInstance(
			ModelRoot modelRoot) {
		return UseCaseAssociationInstance(modelRoot, null, true);
	}

	public static UseCaseAssociation_c[] UseCaseAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					UseCaseAssociation_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(UseCaseAssociation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				UseCaseAssociation_c x = (UseCaseAssociation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				UseCaseAssociation_c[] ret_set = new UseCaseAssociation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new UseCaseAssociation_c[0];
			}
		}
	}
	public static UseCaseAssociation_c[] UseCaseAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return UseCaseAssociationInstances(modelRoot, test, true);
	}
	public static UseCaseAssociation_c[] UseCaseAssociationInstances(
			ModelRoot modelRoot) {
		return UseCaseAssociationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Use Case Association.dispose call: ";
		Extend_c testR1210Inst1 = Extend_c.getOneUC_EOnR1210(this, false);

		if (testR1210Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1210 ";
		}
		Generalization_c testR1210Inst2 = Generalization_c.getOneUC_GOnR1210(
				this, false);

		if (testR1210Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1210 ";
		}
		Include_c testR1210Inst3 = Include_c.getOneUC_IOnR1210(this, false);

		if (testR1210Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1210 ";
		}
		BinaryAssociation_c testR1210Inst4 = BinaryAssociation_c
				.getOneUC_BAOnR1210(this, false);

		if (testR1210Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1210 ";
		}
		InteractionParticipant_c testR1206Inst = InteractionParticipant_c
				.getOneSQ_POnR1206(this, false);

		if (testR1206Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1206 ";
		}
		InteractionParticipant_c testR1207Inst = InteractionParticipant_c
				.getOneSQ_POnR1207(this, false);

		if (testR1207Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1207 ";
		}
		AssociationInUseCase_c testR1215Inst = AssociationInUseCase_c
				.getOneUC_AIUCOnR1215(this, false);

		if (testR1215Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1215 ";
		}
		PackageableElement_c testR8001Inst1 = PackageableElement_c
				.getOnePE_PEOnR8001(this, false);

		if (testR8001Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "8001 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Use Case Association",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("source_part_id")) {
			return true;
		}
		if (attributeName.equals("destination_part_id")) {
			return true;
		}
		if (attributeName.equals("assoc_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAssoc_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getAssoc_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSource_part_idLongBased() {
		if (StartsAtInteractionParticipant != null) {
			return StartsAtInteractionParticipant.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSource_part_id() {
		if (StartsAtInteractionParticipant != null) {
			return StartsAtInteractionParticipant.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSource_part_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_source_part_id))
			return m_source_part_id;
		else
			return getSource_part_id();
	}

	public void setSource_part_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_source_part_id)) {
				return;
			}
		} else if (m_source_part_id != null) {
			if (m_source_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Source_part_id", m_source_part_id, newValue, true);
		m_source_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDestination_part_idLongBased() {
		if (EndsAtInteractionParticipant != null) {
			return EndsAtInteractionParticipant.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDestination_part_id() {
		if (EndsAtInteractionParticipant != null) {
			return EndsAtInteractionParticipant.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDestination_part_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_destination_part_id))
			return m_destination_part_id;
		else
			return getDestination_part_id();
	}

	public void setDestination_part_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_destination_part_id)) {
				return;
			}
		} else if (m_destination_part_id != null) {
			if (m_destination_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Destination_part_id", m_destination_part_id, newValue, true);
		m_destination_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getAssoc_idLongBased() {
		if (IsSupertypePackageableElement != null) {
			return IsSupertypePackageableElement.getElement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAssoc_id() {
		if (IsSupertypePackageableElement != null) {
			return IsSupertypePackageableElement.getElement_id();
		}
		return m_assoc_id; // Supertype existence is optional, just return the local cached referential value
	}

	public boolean hasSuperType() {
		return (IsSupertypePackageableElement != null);

	}

	public java.util.UUID getAssoc_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_assoc_id))
			return m_assoc_id;
		else
			return getAssoc_id();
	}

	public void setAssoc_id(java.util.UUID newValue) {
		m_assoc_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Use Case Association", //$NON-NLS-1$
						" Operation entered: Use Case Association::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		UseCaseAssociation_c[] objs = UseCaseAssociation_c
				.UseCaseAssociationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Use Case Association", //$NON-NLS-1$
				" Operation entered: Use Case Association::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class UseCaseAssociation_c_test38454_c implements ClassQueryInterface_c {
			UseCaseAssociation_c_test38454_c(java.util.UUID p38455) {
				m_p38455 = p38455;
			}
			private java.util.UUID m_p38455;
			public boolean evaluate(Object candidate) {
				UseCaseAssociation_c selected = (UseCaseAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38455));
				return retval;
			}
		}

		UseCaseAssociation_c[] objs38453 = UseCaseAssociation_c
				.UseCaseAssociationInstances(modelRoot,
						new UseCaseAssociation_c_test38454_c(getAssoc_id()));

		if (((objs38453.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Use Case Association", //$NON-NLS-1$
								"Consistency: Object: Use Case Association: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38453.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Use Case Association: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38453.length), e);
			}
			retval = false;

		}

		if (((objs38453.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Use Case Association", //$NON-NLS-1$
								"Consistency: Object: Use Case Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38453.length)
										+ " Assoc_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Use Case Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38453.length)
										+ " Assoc_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Use Case Association is a referring class in association: rel.Numb = 1206
		// The participating class is: Interaction Participant
		class InteractionParticipant_c_test38459_c
				implements
					ClassQueryInterface_c {
			InteractionParticipant_c_test38459_c(java.util.UUID p38460) {
				m_p38460 = p38460;
			}
			private java.util.UUID m_p38460;
			public boolean evaluate(Object candidate) {
				InteractionParticipant_c selected = (InteractionParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p38460));
				return retval;
			}
		}

		InteractionParticipant_c[] objs38458 = InteractionParticipant_c
				.InteractionParticipantInstances(modelRoot,
						new InteractionParticipant_c_test38459_c(
								getSource_part_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38458.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Use Case Association", //$NON-NLS-1$
								"Consistency: Object: Use Case Association: Association: 1206: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38458.length)
										+ " Source_Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Use Case Association: Association: 1206: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38458.length)
										+ " Source_Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Use Case Association is a referring class in association: rel.Numb = 1207
		// The participating class is: Interaction Participant
		class InteractionParticipant_c_test38462_c
				implements
					ClassQueryInterface_c {
			InteractionParticipant_c_test38462_c(java.util.UUID p38463) {
				m_p38463 = p38463;
			}
			private java.util.UUID m_p38463;
			public boolean evaluate(Object candidate) {
				InteractionParticipant_c selected = (InteractionParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p38463));
				return retval;
			}
		}

		InteractionParticipant_c[] objs38461 = InteractionParticipant_c
				.InteractionParticipantInstances(modelRoot,
						new InteractionParticipant_c_test38462_c(
								getDestination_part_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38461.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Use Case Association", //$NON-NLS-1$
								"Consistency: Object: Use Case Association: Association: 1207: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38461.length)
										+ " Destination_Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Use Case Association: Association: 1207: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38461.length)
										+ " Destination_Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Use Case Association is a subtype in association: rel.Numb = 8001
		// The supertype class is: Packageable Element
		//    Note: The consistency test for this supertype has been removed 
		//          until generic package _migration_ is complete.
		// Supertype: rel.Numb = 1210
		int objs38467 = 0;
		// Subtype Object: Extend
		class Extend_c_test38468_c implements ClassQueryInterface_c {
			Extend_c_test38468_c(java.util.UUID p38469) {
				m_p38469 = p38469;
			}
			private java.util.UUID m_p38469;
			public boolean evaluate(Object candidate) {
				Extend_c selected = (Extend_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38469));
				return retval;
			}
		}

		Extend_c[] objs38470 = Extend_c.ExtendInstances(modelRoot,
				new Extend_c_test38468_c(getAssoc_id()));

		objs38467 = objs38467 + objs38470.length;
		// Subtype Object: Generalization
		class Generalization_c_test38471_c implements ClassQueryInterface_c {
			Generalization_c_test38471_c(java.util.UUID p38472) {
				m_p38472 = p38472;
			}
			private java.util.UUID m_p38472;
			public boolean evaluate(Object candidate) {
				Generalization_c selected = (Generalization_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38472));
				return retval;
			}
		}

		Generalization_c[] objs38473 = Generalization_c
				.GeneralizationInstances(modelRoot,
						new Generalization_c_test38471_c(getAssoc_id()));

		objs38467 = objs38467 + objs38473.length;
		// Subtype Object: Include
		class Include_c_test38474_c implements ClassQueryInterface_c {
			Include_c_test38474_c(java.util.UUID p38475) {
				m_p38475 = p38475;
			}
			private java.util.UUID m_p38475;
			public boolean evaluate(Object candidate) {
				Include_c selected = (Include_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38475));
				return retval;
			}
		}

		Include_c[] objs38476 = Include_c.IncludeInstances(modelRoot,
				new Include_c_test38474_c(getAssoc_id()));

		objs38467 = objs38467 + objs38476.length;
		// Subtype Object: Binary Association
		class BinaryAssociation_c_test38477_c implements ClassQueryInterface_c {
			BinaryAssociation_c_test38477_c(java.util.UUID p38478) {
				m_p38478 = p38478;
			}
			private java.util.UUID m_p38478;
			public boolean evaluate(Object candidate) {
				BinaryAssociation_c selected = (BinaryAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38478));
				return retval;
			}
		}

		BinaryAssociation_c[] objs38479 = BinaryAssociation_c
				.BinaryAssociationInstances(modelRoot,
						new BinaryAssociation_c_test38477_c(getAssoc_id()));

		objs38467 = objs38467 + objs38479.length;
		if (objs38467 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Use Case Association", //$NON-NLS-1$
								"Consistency: Object: Use Case Association: Association: 1210: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38467)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Use Case Association: Association: 1210: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38467), e);
			}
			retval = false;

		}

		// Use Case Association is a participating class in association: rel.Numb = 1215
		// Object: Association In Use Case
		class AssociationInUseCase_c_test38481_c
				implements
					ClassQueryInterface_c {
			AssociationInUseCase_c_test38481_c(java.util.UUID p38482) {
				m_p38482 = p38482;
			}
			private java.util.UUID m_p38482;
			public boolean evaluate(Object candidate) {
				AssociationInUseCase_c selected = (AssociationInUseCase_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38482));
				return retval;
			}
		}

		AssociationInUseCase_c[] objs38480 = AssociationInUseCase_c
				.AssociationInUseCaseInstances(modelRoot,
						new AssociationInUseCase_c_test38481_c(getAssoc_id()));

		if (((objs38480.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Use Case Association", //$NON-NLS-1$
								"Consistency: Object: Use Case Association: Association: 1215: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38480.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Use Case Association: Association: 1215: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38480.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Use Case Association",
				" Operation entered: UseCaseAssociation::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		PackageableElement_c v_pe = PackageableElement_c
				.getOnePE_PEOnR8001(this);

		if (((v_pe != null))) {

			if (v_pe != null) {
				v_pe.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			return;

		}

		InteractionParticipant_c v_part = InteractionParticipant_c
				.getOneSQ_POnR1206(this);

		if (((v_part != null))) {

			this.unrelateAcrossR1206From(v_part);

		}

		v_part = InteractionParticipant_c.getOneSQ_POnR1207(this);

		if (((v_part != null))) {

			this.unrelateAcrossR1207From(v_part);

		}

		BinaryAssociation_c v_ba = BinaryAssociation_c.getOneUC_BAOnR1210(this);

		Generalization_c v_gen = Generalization_c.getOneUC_GOnR1210(this);

		Include_c v_inc = Include_c.getOneUC_IOnR1210(this);

		Extend_c v_ext = Extend_c.getOneUC_EOnR1210(this);

		if (((v_ba != null))) {

			this.unrelateAcrossR1210From(v_ba);

			if (v_ba != null) {
				v_ba.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_gen != null))) {

			this.unrelateAcrossR1210From(v_gen);

			if (v_gen != null) {
				v_gen.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_inc != null))) {

			this.unrelateAcrossR1210From(v_inc);

			if (v_inc != null) {
				v_inc.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_ext != null))) {

			this.unrelateAcrossR1210From(v_ext);

			if (v_ext != null) {
				v_ext.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		AssociationInUseCase_c v_aiuc = AssociationInUseCase_c
				.getOneUC_AIUCOnR1215(this);

		if (((v_aiuc != null))) {

			UseCaseDiagram_c v_uc = UseCaseDiagram_c
					.getOneUC_UCCOnR1214(v_aiuc);

			this.unrelateAcrossR1215From(v_aiuc);

			if (v_aiuc != null) {
				v_aiuc.unrelateAcrossR1214From(v_uc);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_aiuc != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_aiuc.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_aiuc));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Use Case Association
