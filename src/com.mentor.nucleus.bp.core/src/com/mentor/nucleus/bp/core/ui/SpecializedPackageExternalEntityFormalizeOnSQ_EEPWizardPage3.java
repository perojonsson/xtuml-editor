package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizardPage3.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizardPage3
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo EntityCombo;
	public Label EntityLabel;

	// cache for user choices
	ExternalEntity_c Entity = null;
	ExternalEntity_c[] EntityInstances;

	/**
	 * Constructors for SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizardPage3.
	 */
	public SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizardPage3() {
		super("");
		init();
	}

	public SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizardPage3(
			String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Formalize");
		setDescription("Choose the External Entity that this instance should represent");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizard) getWizard())
						.getSelection());

		// cache for previous user selections
		ExternalEntityPackage_c v_Package = ((SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizard) getWizard()).v_Package;

		// cache for context
		ExternalEntityParticipant_c v_eep = ((SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizard) getWizard()).v_eep;

		ExternalEntity_c v_ee = ExternalEntity_c.getOneS_EEOnR933(v_eep);

		java.util.UUID v_existingId = Gd_c.Null_unique_id();

		if (((v_ee != null))) {

			v_existingId = v_ee.getEe_id();

		}

		InteractionParticipant_c v_participant = InteractionParticipant_c
				.getOneSQ_POnR930(v_eep);

		Sequence_c v_sequence = Sequence_c.getOneSQ_SOnR929(v_participant);

		Communication_c v_communication = Communication_c
				.getOneCOMM_COMMOnR1126(v_participant);

		String v_domName = "";

		if (((v_sequence != null))) {

			v_domName = v_sequence.Getpath(true);

		}

		else if (((v_communication != null))) {

			v_domName = v_communication.Getpath(true);

		}

		class Domain_test9782_c implements ClassQueryInterface_c {
			Domain_test9782_c(String p9783) {
				m_p9783 = p9783;
			}
			private String m_p9783;
			public boolean evaluate(Object candidate) {
				Domain_c selected = (Domain_c) candidate;
				return (selected.getName().equals(m_p9783));
			}
		}
		Domain_c v_domain = Domain_c.DomainInstance(modelRoot,
				new Domain_test9782_c(v_domName));

		if (((v_domain != null))) {

			if (((v_Package != null))) {

				// select related by where USER::selectOne
				ExternalEntity_c[] v_EntityInstances = ExternalEntity_c
						.getManyS_EEsOnR33(ExternalEntityInPackage_c
								.getManyS_EEIPsOnR33(v_Package));
				ExternalEntity_c v_Entity = null;
				int EntityInstCount;
				int EntityResultCount = 0;
				for (EntityInstCount = 0; EntityInstCount < v_EntityInstances.length; EntityInstCount++) {
					ExternalEntity_c selected = v_EntityInstances[EntityInstCount];
					if (User_c.Selectone(selected.getEe_id())
							&& !selected.getEe_id().equals(v_existingId)) {
						EntityResultCount++;
					}
				}
				this.EntityInstances = new ExternalEntity_c[EntityResultCount];
				EntityResultCount = 0;
				for (EntityInstCount = 0; EntityInstCount < v_EntityInstances.length; EntityInstCount++) {
					ExternalEntity_c selected = v_EntityInstances[EntityInstCount];
					if (User_c.Selectone(selected.getEe_id())
							&& !selected.getEe_id().equals(v_existingId)) {
						this.EntityInstances[EntityResultCount] = selected;
						EntityResultCount++;
					}
				}
				EntityCombo.removeAll();
				for (EntityInstCount = 0; EntityInstCount < EntityResultCount; EntityInstCount++)
					EntityCombo
							.add(((ExternalEntity_c) this.EntityInstances[EntityInstCount])
									.getName());
				if (EntityResultCount == 1) {
					EntityCombo.select(0);
					updateSelectedEntity();
				}

				if (((v_Entity != null))) {

				}

			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		EntityLabel = new Label(composite, SWT.NONE);
		EntityLabel.setText("Entity");
		EntityCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		EntityCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		EntityCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedEntity() {
		this.Entity = EntityInstances[EntityCombo.getSelectionIndex()];
		((SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizard) getWizard()).v_Entity = this.Entity;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == EntityCombo) {
			updateSelectedEntity();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Entity == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((SpecializedPackageExternalEntityFormalizeOnSQ_EEPWizard) getWizard()).v_Entity = Entity;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Entity == null)
			return false;
		return true;
	}

}
