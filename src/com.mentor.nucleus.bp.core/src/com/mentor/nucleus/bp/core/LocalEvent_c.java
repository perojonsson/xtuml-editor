package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.LocalEvent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LOCAL_EVENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class LocalEvent_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public LocalEvent_c(ModelRoot modelRoot, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

		Object[] key = {m_sm_id, m_smevt_id};
		addInstanceToMap(key);
	}
	static public LocalEvent_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);
		LocalEvent_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id, p_m_smevt_id};
			new_inst = (LocalEvent_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new LocalEvent_c(modelRoot, p_m_smevt_id, p_m_sm_id,
					p_m_smspd_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public LocalEvent_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id) {
		InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);
		LocalEvent_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id, p_m_smevt_id};
			source = (LocalEvent_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

				return source;
			}
		}
		// there is no instance matching the id
		LocalEvent_c new_inst = new LocalEvent_c(modelRoot, p_m_smevt_id,
				p_m_sm_id, p_m_smspd_id);
		return new_inst;
	}
	public LocalEvent_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smevt_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		Object[] key = {m_sm_id, m_smevt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_sm_id, m_smevt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_sm_id != p_newKey) {

			m_sm_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof LocalEvent_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof LocalEvent_c)) {
			return false;
		}

		LocalEvent_c me = (LocalEvent_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((LocalEvent_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((LocalEvent_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((LocalEvent_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(((LocalEvent_c) elem).getSmevt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof LocalEvent_c)) {
			return false;
		}

		LocalEvent_c me = (LocalEvent_c) elem;
		if (!getSm_idCachedValue().equals(
				((LocalEvent_c) elem).getSm_idCachedValue()))
			return false;
		if (!getSmevt_idCachedValue().equals(
				((LocalEvent_c) elem).getSmevt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smspd_id;

	// declare association references from this class

	// referring navigation

	SemEvent_c IsSupertypeSemEvent;
	public void relateAcrossR526To(SemEvent_c target) {
		relateAcrossR526To(target, true);
	}
	public void relateAcrossR526To(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeSemEvent)
			return; // already related

		if (IsSupertypeSemEvent != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeSemEvent != null) {

				IsSupertypeSemEvent.clearBackPointerR526To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LocalEvent_c.relateAcrossR526To(SemEvent_c target)",
									"Relate performed across R526 from Local Event to SEM Event without unrelate of prior instance.");
				}
			}

			IsSupertypeSemEvent = target;
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmspd_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smspd_id = target.getSmspd_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR526To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "526", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR526From(SemEvent_c target) {
		unrelateAcrossR526From(target, true);
	}
	public void unrelateAcrossR526From(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeSemEvent == null)
			return; // already unrelated

		if (target != IsSupertypeSemEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R526",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR526To(this);
		}

		if (IsSupertypeSemEvent != null) {

			m_smevt_id = IsSupertypeSemEvent.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = IsSupertypeSemEvent.getSmevt_idCachedValue();
			}
			m_sm_id = IsSupertypeSemEvent.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeSemEvent.getSm_idCachedValue();
			}
			m_smspd_id = IsSupertypeSemEvent.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(m_smspd_id)) {
				m_smspd_id = IsSupertypeSemEvent.getSmspd_idCachedValue();
			}
			IsSupertypeSemEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "526", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(SemEvent_c[] targets) {
		return getOneSM_LEVTOnR526(targets, null);
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test) {
		LocalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_LEVTOnR526(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(SemEvent_c target) {
		return getOneSM_LEVTOnR526(target, null);
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(SemEvent_c target,
			boolean loadComponent) {
		return getOneSM_LEVTOnR526(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(SemEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_LEVTOnR526(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test) {
		return getOneSM_LEVTOnR526(modelRoot, target, test, true);
	}

	public static LocalEvent_c getOneSM_LEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_LEVTOnR526(modelRoot, target, test);
	}
	private static LocalEvent_c find_getOneSM_LEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			LocalEvent_c source = (LocalEvent_c) target.backPointer_IsSubtypeLocalEventIsSubtype_R526;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR526(SemEvent_c[] targets) {
		return getManySM_LEVTsOnR526(targets, null);
	}
	public static LocalEvent_c[] getManySM_LEVTsOnR526(SemEvent_c[] targets,
			boolean loadComponent) {
		return getManySM_LEVTsOnR526(targets, null, loadComponent);
	}
	public static LocalEvent_c[] getManySM_LEVTsOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test) {
		return getManySM_LEVTsOnR526(targets, test, true);
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LocalEvent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			LocalEvent_c source = (LocalEvent_c) targets[i].backPointer_IsSubtypeLocalEventIsSubtype_R526;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			LocalEvent_c[] ret_set = new LocalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LocalEvent_c[0];
		}
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR526(SemEvent_c target) {
		if (target != null) {
			SemEvent_c[] targetArray = new SemEvent_c[1];
			targetArray[0] = target;
			return getManySM_LEVTsOnR526(targetArray);
		} else {
			LocalEvent_c[] result = new LocalEvent_c[0];
			return result;
		}
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR526(SemEvent_c target,
			boolean loadComponent) {
		if (target != null) {
			SemEvent_c[] targetArray = new SemEvent_c[1];
			targetArray[0] = target;
			return getManySM_LEVTsOnR526(targetArray, loadComponent);
		} else {
			LocalEvent_c[] result = new LocalEvent_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	CreationTransition_c backPointer_HasAssignedToItCreationTransitionHasAssignedToIt_R509;

	public void setCreationTransitionOrderInChildListR509(
			CreationTransition_c target, int index) {
		unrelateAcrossR509From(target);
		CreationTransition_c[] elements = CreationTransition_c
				.getManySM_CRTXNsOnR509(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR509From((CreationTransition_c) elements[i]);
			}
			count++;
		}
		relateAcrossR509To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR509To((CreationTransition_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR509To(CreationTransition_c target) {
		if (target != null) {
			target.relateAcrossR509To(this, true);
		}
	}

	public void relateAcrossR509To(CreationTransition_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR509To(this, notifyChanges);
		}
	}

	public void setBackPointerR509To(CreationTransition_c target) {
		backPointer_HasAssignedToItCreationTransitionHasAssignedToIt_R509 = target;
	}

	public void unrelateAcrossR509From(CreationTransition_c target) {
		if (target != null) {
			target.unrelateAcrossR509From(this, true);
		}
	}

	public void unrelateAcrossR509From(CreationTransition_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR509From(this, notifyChanges);
		}
	}

	public void clearBackPointerR509To(CreationTransition_c target) {
		if (target == backPointer_HasAssignedToItCreationTransitionHasAssignedToIt_R509) {
			backPointer_HasAssignedToItCreationTransitionHasAssignedToIt_R509 = null;
		}
	}

	public static LocalEvent_c getOneSM_LEVTOnR509(
			CreationTransition_c[] targets) {
		return getOneSM_LEVTOnR509(targets, null);
	}

	public static LocalEvent_c getOneSM_LEVTOnR509(
			CreationTransition_c[] targets, ClassQueryInterface_c test) {
		return getOneSM_LEVTOnR509(targets, test, true);
	}

	public static LocalEvent_c getOneSM_LEVTOnR509(
			CreationTransition_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		LocalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LocalEvent_c candidate_val = getOneSM_LEVTOnR509(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_LEVTOnR509(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LocalEvent_c getOneSM_LEVTOnR509(CreationTransition_c target) {
		return getOneSM_LEVTOnR509(target, true);
	}
	public static LocalEvent_c getOneSM_LEVTOnR509(CreationTransition_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsAssignedToLocalEvent;
		} else {
			return null;
		}
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR509(
			CreationTransition_c[] targets, ClassQueryInterface_c test) {
		return getManySM_LEVTsOnR509(targets, test, true);
	}

	public static LocalEvent_c [] getManySM_LEVTsOnR509(CreationTransition_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LocalEvent_c[0];
  
  
  LinkedHashSet<LocalEvent_c> elementsSet = new LinkedHashSet<LocalEvent_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsAssignedToLocalEvent == null)
	  targets[i].loadProxy();
    LocalEvent_c associate = targets[i].IsAssignedToLocalEvent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LocalEvent_c[] result = new LocalEvent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LocalEvent_c[] getManySM_LEVTsOnR509(
			CreationTransition_c[] targets) {
		return getManySM_LEVTsOnR509(targets, null);
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR509(
			CreationTransition_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			CreationTransition_c[] targetArray = new CreationTransition_c[1];
			targetArray[0] = target;
			return getManySM_LEVTsOnR509(targetArray, test, loadComponent);
		} else {
			LocalEvent_c[] result = new LocalEvent_c[0];
			return result;
		}

	}

	public static LocalEvent_c[] getManySM_LEVTsOnR509(
			CreationTransition_c target, ClassQueryInterface_c test) {
		return getManySM_LEVTsOnR509(target, null, true);
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR509(
			CreationTransition_c target) {
		return getManySM_LEVTsOnR509(target, null, true);
	}

	public static LocalEvent_c[] getManySM_LEVTsOnR509(
			CreationTransition_c target, boolean loadComponent) {
		return getManySM_LEVTsOnR509(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R526
		SemEvent_c relInst39189 = (SemEvent_c) baseRoot.getInstanceList(
				SemEvent_c.class).get(
				new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39189 == null) {
			relInst39189 = (SemEvent_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(SemEvent_c.class)
					.get(new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		}
		if (relInst39189 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39189 = (SemEvent_c) roots[i].getInstanceList(
						SemEvent_c.class).get(
						new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
				if (relInst39189 != null)
					break;
			}
		}
		//synchronized
		if (relInst39189 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39189) && !isProxy())) {
				relInst39189.relateAcrossR526To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R526
		// SM_SEVT
		inst = IsSupertypeSemEvent;
		unrelateAcrossR526From(IsSupertypeSemEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LocalEvent_c inst = (LocalEvent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static LocalEvent_c LocalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		LocalEvent_c result = findLocalEventInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					LocalEvent_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findLocalEventInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static LocalEvent_c findLocalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LocalEvent_c x = (LocalEvent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static LocalEvent_c LocalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return LocalEventInstance(modelRoot, test, true);
	}

	public static LocalEvent_c LocalEventInstance(ModelRoot modelRoot) {
		return LocalEventInstance(modelRoot, null, true);
	}

	public static LocalEvent_c[] LocalEventInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					LocalEvent_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(LocalEvent_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LocalEvent_c x = (LocalEvent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				LocalEvent_c[] ret_set = new LocalEvent_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LocalEvent_c[0];
			}
		}
	}
	public static LocalEvent_c[] LocalEventInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return LocalEventInstances(modelRoot, test, true);
	}
	public static LocalEvent_c[] LocalEventInstances(ModelRoot modelRoot) {
		return LocalEventInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Local Event.dispose call: ";
		SemEvent_c testR526Inst3 = SemEvent_c.getOneSM_SEVTOnR526(this, false);

		if (testR526Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "526 ";
		}
		CreationTransition_c testR509Inst = CreationTransition_c
				.getOneSM_CRTXNOnR509(this, false);

		if (testR509Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "509 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Local Event", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmevt_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeSemEvent != null);

	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Local Event", //$NON-NLS-1$
				" Operation entered: Local Event::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		LocalEvent_c[] objs = LocalEvent_c.LocalEventInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Local Event", //$NON-NLS-1$
				" Operation entered: Local Event::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class LocalEvent_c_test39191_c implements ClassQueryInterface_c {
			LocalEvent_c_test39191_c(java.util.UUID p39192,
					java.util.UUID p39193) {
				m_p39192 = p39192;
				m_p39193 = p39193;
			}
			private java.util.UUID m_p39192;
			private java.util.UUID m_p39193;
			public boolean evaluate(Object candidate) {
				LocalEvent_c selected = (LocalEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39192))
						& (selected.getSmevt_id().equals(m_p39193));
				return retval;
			}
		}

		LocalEvent_c[] objs39190 = LocalEvent_c.LocalEventInstances(modelRoot,
				new LocalEvent_c_test39191_c(getSm_id(), getSmevt_id()));

		if (((objs39190.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Local Event", //$NON-NLS-1$
								"Consistency: Object: Local Event: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39190.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Local Event: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39190.length), e);
			}
			retval = false;

		}

		if (((objs39190.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Local Event", //$NON-NLS-1$
								"Consistency: Object: Local Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39190.length)
										+ " SM_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Local Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39190.length)
										+ " SM_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Local Event is a subtype in association: rel.Numb = 526
		// The supertype class is: SEM Event
		class SemEvent_c_test39197_c implements ClassQueryInterface_c {
			SemEvent_c_test39197_c(java.util.UUID p39198,
					java.util.UUID p39199, java.util.UUID p39200) {
				m_p39198 = p39198;
				m_p39199 = p39199;
				m_p39200 = p39200;
			}
			private java.util.UUID m_p39198;
			private java.util.UUID m_p39199;
			private java.util.UUID m_p39200;
			public boolean evaluate(Object candidate) {
				SemEvent_c selected = (SemEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39198))
						& (selected.getSm_id().equals(m_p39199))
						& (selected.getSmspd_id().equals(m_p39200));
				return retval;
			}
		}

		SemEvent_c[] objs39196 = SemEvent_c.SemEventInstances(modelRoot,
				new SemEvent_c_test39197_c(getSmevt_id(), getSm_id(),
						getSmspd_id()));

		if (((objs39196.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Local Event", //$NON-NLS-1$
								"Consistency: Object: Local Event: Association: 526: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39196.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Local Event: Association: 526: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39196.length), e);
			}
			retval = false;

		}

		// Local Event is a participating class in association: rel.Numb = 509
		// Object: Creation Transition
		class CreationTransition_c_test39202_c implements ClassQueryInterface_c {
			CreationTransition_c_test39202_c(java.util.UUID p39203,
					java.util.UUID p39204) {
				m_p39203 = p39203;
				m_p39204 = p39204;
			}
			private java.util.UUID m_p39203;
			private java.util.UUID m_p39204;
			public boolean evaluate(Object candidate) {
				CreationTransition_c selected = (CreationTransition_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39203))
						& (selected.getSmevt_id().equals(m_p39204));
				return retval;
			}
		}

		CreationTransition_c[] objs39201 = CreationTransition_c
				.CreationTransitionInstances(modelRoot,
						new CreationTransition_c_test39202_c(getSm_id(),
								getSmevt_id()));

		if (((objs39201.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Local Event", //$NON-NLS-1$
								"Consistency: Object: Local Event: Association: 509: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39201.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Local Event: Association: 509: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39201.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Local Event",
				" Operation entered: LocalEvent::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SemEvent_c v_sevt = SemEvent_c.getOneSM_SEVTOnR526(this);

		this.unrelateAcrossR526From(v_sevt);

		CreationTransition_c v_crtxn = CreationTransition_c
				.getOneSM_CRTXNOnR509(this);

		if (((v_crtxn != null))) {

			this.unrelateAcrossR509From(v_crtxn);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Local Event",
				" Operation entered: LocalEvent::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(this));

		if (((v_evt == null))) {

			return Ooaofooa.Getorphanedelementname(modelRoot);

		}

		else {

			return v_evt.Get_name();

		}

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Local Event
