package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.PackageInPackage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_PACKAGE_IN_PACKAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class PackageInPackage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public PackageInPackage_c(ModelRoot modelRoot,
			java.util.UUID p_m_parent_package_id,
			java.util.UUID p_m_child_package_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_parent_package_id = IdAssigner.preprocessUUID(p_m_parent_package_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_child_package_id = IdAssigner.preprocessUUID(p_m_child_package_id);

		Object[] key = {m_parent_package_id, m_child_package_id};
		addInstanceToMap(key);
	}
	static public PackageInPackage_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_parent_package_id,
			java.util.UUID p_m_child_package_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);
		PackageInPackage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_parent_package_id, p_m_child_package_id};
			new_inst = (PackageInPackage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_parent_package_id = IdAssigner
						.preprocessUUID(p_m_parent_package_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_child_package_id = IdAssigner
						.preprocessUUID(p_m_child_package_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new PackageInPackage_c(modelRoot, p_m_parent_package_id,
					p_m_child_package_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public PackageInPackage_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_parent_package_id,
			java.util.UUID p_m_child_package_id) {
		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);
		PackageInPackage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_parent_package_id, p_m_child_package_id};
			source = (PackageInPackage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_parent_package_id = IdAssigner
						.preprocessUUID(p_m_parent_package_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_child_package_id = IdAssigner
						.preprocessUUID(p_m_child_package_id);

				return source;
			}
		}
		// there is no instance matching the id
		PackageInPackage_c new_inst = new PackageInPackage_c(modelRoot,
				p_m_parent_package_id, p_m_child_package_id);
		return new_inst;
	}
	public PackageInPackage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_parent_package_id = IdAssigner.NULL_UUID;
		m_child_package_id = IdAssigner.NULL_UUID;
		Object[] key = {m_parent_package_id, m_child_package_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_parent_package_id, m_child_package_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_parent_package_id != p_newKey) {

			m_parent_package_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof PackageInPackage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof PackageInPackage_c)) {
			return false;
		}

		PackageInPackage_c me = (PackageInPackage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getParent_package_id()) || IdAssigner.NULL_UUID
						.equals(((PackageInPackage_c) elem)
								.getParent_package_id())) && this != elem)) {
			return false;
		}
		if (!getParent_package_id().equals(
				((PackageInPackage_c) elem).getParent_package_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getChild_package_id()) || IdAssigner.NULL_UUID
						.equals(((PackageInPackage_c) elem)
								.getChild_package_id())) && this != elem)) {
			return false;
		}
		if (!getChild_package_id().equals(
				((PackageInPackage_c) elem).getChild_package_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof PackageInPackage_c)) {
			return false;
		}

		PackageInPackage_c me = (PackageInPackage_c) elem;
		if (!getParent_package_idCachedValue().equals(
				((PackageInPackage_c) elem).getParent_package_idCachedValue()))
			return false;
		if (!getChild_package_idCachedValue().equals(
				((PackageInPackage_c) elem).getChild_package_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_parent_package_id;
	private java.util.UUID m_child_package_id;

	// declare association references from this class

	// referring navigation

	Package_c ContainedWithinPackage;
	public void relateAcrossR1403To(Package_c target) {
		relateAcrossR1403To(target, true);
	}
	public void relateAcrossR1403To(Package_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainedWithinPackage)
			return; // already related

		if (ContainedWithinPackage != target) {

			Object oldKey = getInstanceKey();

			if (ContainedWithinPackage != null) {
				UmlProblem.removeXtUMLProblem(this, ContainedWithinPackage);

				ContainedWithinPackage.clearBackPointerR1403To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"PackageInPackage_c.relateAcrossR1403To(Package_c target)",
									"Relate performed across R1403 from Package In Package to Package without unrelate of prior instance.");
				}
			}

			ContainedWithinPackage = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_parent_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1403To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1403", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1403From(Package_c target) {
		unrelateAcrossR1403From(target, true);
	}
	public void unrelateAcrossR1403From(Package_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainedWithinPackage == null)
			return; // already unrelated

		if (target != ContainedWithinPackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1403",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1403To(this);
		}

		if (ContainedWithinPackage != null) {

			m_parent_package_id = ContainedWithinPackage.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_parent_package_id)) {
				m_parent_package_id = ContainedWithinPackage
						.getPackage_idCachedValue();
			}
			ContainedWithinPackage = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1403", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(Package_c[] targets) {
		return getOneEP_PIPOnR1403(targets, null);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(Package_c[] targets,
			ClassQueryInterface_c test) {
		PackageInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneEP_PIPOnR1403(targets[i], test);
			}
		}

		return ret_val;
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(Package_c target) {
		return getOneEP_PIPOnR1403(target, null);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(Package_c target,
			boolean loadComponent) {
		return getOneEP_PIPOnR1403(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(Package_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneEP_PIPOnR1403(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(ModelRoot modelRoot,
			Package_c target, ClassQueryInterface_c test) {
		return getOneEP_PIPOnR1403(modelRoot, target, test, true);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1403(ModelRoot modelRoot,
			Package_c target, ClassQueryInterface_c test, boolean loadComponent) {
		PackageInPackage_c result = null;

		result = find_getOneEP_PIPOnR1403(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// Containment Relation
			List comps = PersistenceManager.findAllChildComponents(
					target.getPersistableComponent(), modelRoot,
					PackageInPackage_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneEP_PIPOnR1403(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static PackageInPackage_c find_getOneEP_PIPOnR1403(
			ModelRoot modelRoot, Package_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsPackageInPackageContains_R1403) {
				for (int i = 0; i < target.backPointer_ContainsPackageInPackageContains_R1403
						.size(); ++i) {
					PackageInPackage_c source = (PackageInPackage_c) target.backPointer_ContainsPackageInPackageContains_R1403
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(Package_c[] targets) {
		return getManyEP_PIPsOnR1403(targets, null);
	}
	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(
			Package_c[] targets, boolean loadComponent) {
		return getManyEP_PIPsOnR1403(targets, null, loadComponent);
	}
	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(
			Package_c[] targets, ClassQueryInterface_c test) {
		return getManyEP_PIPsOnR1403(targets, test, true);
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(
			Package_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new PackageInPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistableModelComponent[] pmcs = new PersistableModelComponent[targets.length];
			for (int i = 0; i < targets.length; i++) {
				pmcs[i] = targets[i].getPersistableComponent();
			}
			PersistenceManager.ensureAllChildInstancesLoaded(pmcs, modelRoot,
					PackageInPackage_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsPackageInPackageContains_R1403) {
				for (int j = 0; j < targets[i].backPointer_ContainsPackageInPackageContains_R1403
						.size(); ++j) {
					PackageInPackage_c source = (PackageInPackage_c) targets[i].backPointer_ContainsPackageInPackageContains_R1403
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			PackageInPackage_c[] ret_set = new PackageInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new PackageInPackage_c[0];
		}
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(Package_c target) {
		return getManyEP_PIPsOnR1403(target, null);
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(Package_c target,
			boolean loadComponent) {
		return getManyEP_PIPsOnR1403(target, null, loadComponent);
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(Package_c target,
			ClassQueryInterface_c test) {
		return getManyEP_PIPsOnR1403(target, test, true);
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1403(Package_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new PackageInPackage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistenceManager.ensureAllChildInstancesLoaded(
					target.getPersistableComponent(), modelRoot,
					PackageInPackage_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsPackageInPackageContains_R1403) {
			for (int i = 0; i < target.backPointer_ContainsPackageInPackageContains_R1403
					.size(); ++i) {
				PackageInPackage_c source = (PackageInPackage_c) target.backPointer_ContainsPackageInPackageContains_R1403
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			PackageInPackage_c[] ret_set = new PackageInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new PackageInPackage_c[0];
		}
	}

	// referring navigation

	Package_c LinksToParentOfPackage;
	public void relateAcrossR1404To(Package_c target) {
		relateAcrossR1404To(target, true);
	}
	public void relateAcrossR1404To(Package_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == LinksToParentOfPackage)
			return; // already related

		if (LinksToParentOfPackage != target) {

			Object oldKey = getInstanceKey();

			if (LinksToParentOfPackage != null) {

				LinksToParentOfPackage.clearBackPointerR1404To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"PackageInPackage_c.relateAcrossR1404To(Package_c target)",
									"Relate performed across R1404 from Package In Package to Package without unrelate of prior instance.");
				}
			}

			LinksToParentOfPackage = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_child_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1404To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1404", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1404From(Package_c target) {
		unrelateAcrossR1404From(target, true);
	}
	public void unrelateAcrossR1404From(Package_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (LinksToParentOfPackage == null)
			return; // already unrelated

		if (target != LinksToParentOfPackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1404",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1404To(this);
		}

		if (LinksToParentOfPackage != null) {

			m_child_package_id = LinksToParentOfPackage.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_child_package_id)) {
				m_child_package_id = LinksToParentOfPackage
						.getPackage_idCachedValue();
			}
			LinksToParentOfPackage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1404", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(Package_c[] targets) {
		return getOneEP_PIPOnR1404(targets, null);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(Package_c[] targets,
			ClassQueryInterface_c test) {
		PackageInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneEP_PIPOnR1404(targets[i], test);
			}
		}

		return ret_val;
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(Package_c target) {
		return getOneEP_PIPOnR1404(target, null);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(Package_c target,
			boolean loadComponent) {
		return getOneEP_PIPOnR1404(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(Package_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneEP_PIPOnR1404(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(ModelRoot modelRoot,
			Package_c target, ClassQueryInterface_c test) {
		return getOneEP_PIPOnR1404(modelRoot, target, test, true);
	}

	public static PackageInPackage_c getOneEP_PIPOnR1404(ModelRoot modelRoot,
			Package_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneEP_PIPOnR1404(modelRoot, target, test);
	}
	private static PackageInPackage_c find_getOneEP_PIPOnR1404(
			ModelRoot modelRoot, Package_c target, ClassQueryInterface_c test) {
		if (target != null) {
			PackageInPackage_c source = (PackageInPackage_c) target.backPointer_LinkedToParentThroughPackageInPackageLinkedToParentThrough_R1404;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1404(Package_c[] targets) {
		return getManyEP_PIPsOnR1404(targets, null);
	}
	public static PackageInPackage_c[] getManyEP_PIPsOnR1404(
			Package_c[] targets, boolean loadComponent) {
		return getManyEP_PIPsOnR1404(targets, null, loadComponent);
	}
	public static PackageInPackage_c[] getManyEP_PIPsOnR1404(
			Package_c[] targets, ClassQueryInterface_c test) {
		return getManyEP_PIPsOnR1404(targets, test, true);
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1404(
			Package_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new PackageInPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			PackageInPackage_c source = (PackageInPackage_c) targets[i].backPointer_LinkedToParentThroughPackageInPackageLinkedToParentThrough_R1404;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			PackageInPackage_c[] ret_set = new PackageInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new PackageInPackage_c[0];
		}
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1404(Package_c target) {
		if (target != null) {
			Package_c[] targetArray = new Package_c[1];
			targetArray[0] = target;
			return getManyEP_PIPsOnR1404(targetArray);
		} else {
			PackageInPackage_c[] result = new PackageInPackage_c[0];
			return result;
		}
	}

	public static PackageInPackage_c[] getManyEP_PIPsOnR1404(Package_c target,
			boolean loadComponent) {
		if (target != null) {
			Package_c[] targetArray = new Package_c[1];
			targetArray[0] = target;
			return getManyEP_PIPsOnR1404(targetArray, loadComponent);
		} else {
			PackageInPackage_c[] result = new PackageInPackage_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ContainedWithinPackage == null) {
			// R1403
			Package_c relInst56232 = (Package_c) baseRoot.getInstanceList(
					Package_c.class).get(new Object[]{m_parent_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56232 == null) {
				relInst56232 = (Package_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Package_c.class)
						.get(new Object[]{m_parent_package_id});
			}
			if (relInst56232 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56232 = (Package_c) roots[i].getInstanceList(
							Package_c.class).get(
							new Object[]{m_parent_package_id});
					if (relInst56232 != null)
						break;
				}
			}
			//synchronized
			if (relInst56232 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56232) && !isProxy())) {
					relInst56232.relateAcrossR1403To(this, notifyChanges);
				}
			}
		}

		if (LinksToParentOfPackage == null) {
			// R1404
			Package_c relInst56233 = (Package_c) baseRoot.getInstanceList(
					Package_c.class).get(new Object[]{m_child_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56233 == null) {
				relInst56233 = (Package_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Package_c.class)
						.get(new Object[]{m_child_package_id});
			}
			if (relInst56233 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56233 = (Package_c) roots[i].getInstanceList(
							Package_c.class).get(
							new Object[]{m_child_package_id});
					if (relInst56233 != null)
						break;
				}
			}
			//synchronized
			if (relInst56233 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56233) && !isProxy())) {
					relInst56233.relateAcrossR1404To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1403
		// EP_PKG
		inst = ContainedWithinPackage;
		unrelateAcrossR1403From(ContainedWithinPackage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1404
		// EP_PKG
		inst = LinksToParentOfPackage;
		unrelateAcrossR1404From(LinksToParentOfPackage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(PackageInPackage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final PackageInPackage_c inst = (PackageInPackage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static PackageInPackage_c PackageInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		PackageInPackage_c result = findPackageInPackageInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					PackageInPackage_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findPackageInPackageInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static PackageInPackage_c findPackageInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				PackageInPackage_c x = (PackageInPackage_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static PackageInPackage_c PackageInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return PackageInPackageInstance(modelRoot, test, true);
	}

	public static PackageInPackage_c PackageInPackageInstance(
			ModelRoot modelRoot) {
		return PackageInPackageInstance(modelRoot, null, true);
	}

	public static PackageInPackage_c[] PackageInPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					PackageInPackage_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(PackageInPackage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				PackageInPackage_c x = (PackageInPackage_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				PackageInPackage_c[] ret_set = new PackageInPackage_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new PackageInPackage_c[0];
			}
		}
	}
	public static PackageInPackage_c[] PackageInPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return PackageInPackageInstances(modelRoot, test, true);
	}
	public static PackageInPackage_c[] PackageInPackageInstances(
			ModelRoot modelRoot) {
		return PackageInPackageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Package In Package.dispose call: ";
		Package_c testR1403Inst = Package_c.getOneEP_PKGOnR1403(this, false);

		if (testR1403Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1403 ";
		}
		Package_c testR1404Inst = Package_c.getOneEP_PKGOnR1404(this, false);

		if (testR1404Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1404 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Package In Package",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("parent_package_id")) {
			return true;
		}
		if (attributeName.equals("child_package_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getParent_package_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getParent_package_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getChild_package_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getChild_package_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getParent_package_idLongBased() {
		if (ContainedWithinPackage != null) {
			return ContainedWithinPackage.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getParent_package_id() {
		if (ContainedWithinPackage != null) {
			return ContainedWithinPackage.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getParent_package_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_parent_package_id))
			return m_parent_package_id;
		else
			return getParent_package_id();
	}

	public void setParent_package_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_parent_package_id)) {
				return;
			}
		} else if (m_parent_package_id != null) {
			if (m_parent_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Parent_package_id", m_parent_package_id, newValue, true);
		m_parent_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getChild_package_idLongBased() {
		if (LinksToParentOfPackage != null) {
			return LinksToParentOfPackage.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getChild_package_id() {
		if (LinksToParentOfPackage != null) {
			return LinksToParentOfPackage.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getChild_package_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_child_package_id))
			return m_child_package_id;
		else
			return getChild_package_id();
	}

	public void setChild_package_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_child_package_id)) {
				return;
			}
		} else if (m_child_package_id != null) {
			if (m_child_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Child_package_id", m_child_package_id, newValue, true);
		m_child_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Package In Package", //$NON-NLS-1$
						" Operation entered: Package In Package::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		PackageInPackage_c[] objs = PackageInPackage_c
				.PackageInPackageInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Package In Package", //$NON-NLS-1$
				" Operation entered: Package In Package::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class PackageInPackage_c_test56235_c implements ClassQueryInterface_c {
			PackageInPackage_c_test56235_c(java.util.UUID p56236,
					java.util.UUID p56237) {
				m_p56236 = p56236;
				m_p56237 = p56237;
			}
			private java.util.UUID m_p56236;
			private java.util.UUID m_p56237;
			public boolean evaluate(Object candidate) {
				PackageInPackage_c selected = (PackageInPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getParent_package_id().equals(m_p56236))
						& (selected.getChild_package_id().equals(m_p56237));
				return retval;
			}
		}

		PackageInPackage_c[] objs56234 = PackageInPackage_c
				.PackageInPackageInstances(modelRoot,
						new PackageInPackage_c_test56235_c(
								getParent_package_id(), getChild_package_id()));

		if (((objs56234.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Package In Package", //$NON-NLS-1$
								"Consistency: Object: Package In Package: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56234.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Package In Package: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56234.length), e);
			}
			retval = false;

		}

		if (((objs56234.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Package In Package", //$NON-NLS-1$
								"Consistency: Object: Package In Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56234.length)
										+ " Parent_Package_ID: " + "Not Printable" + " Child_Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Package In Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56234.length)
										+ " Parent_Package_ID: " + "Not Printable" + " Child_Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Package In Package is a referring class in association: rel.Numb = 1403
		// The participating class is: Package
		class Package_c_test56241_c implements ClassQueryInterface_c {
			Package_c_test56241_c(java.util.UUID p56242) {
				m_p56242 = p56242;
			}
			private java.util.UUID m_p56242;
			public boolean evaluate(Object candidate) {
				Package_c selected = (Package_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p56242));
				return retval;
			}
		}

		Package_c[] objs56240 = Package_c.PackageInstances(modelRoot,
				new Package_c_test56241_c(getParent_package_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56240.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Package In Package", //$NON-NLS-1$
								"Consistency: Object: Package In Package: Association: 1403: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56240.length)
										+ " Parent_Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Package In Package: Association: 1403: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56240.length)
										+ " Parent_Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Package In Package is a referring class in association: rel.Numb = 1404
		// The participating class is: Package
		class Package_c_test56244_c implements ClassQueryInterface_c {
			Package_c_test56244_c(java.util.UUID p56245) {
				m_p56245 = p56245;
			}
			private java.util.UUID m_p56245;
			public boolean evaluate(Object candidate) {
				Package_c selected = (Package_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p56245));
				return retval;
			}
		}

		Package_c[] objs56243 = Package_c.PackageInstances(modelRoot,
				new Package_c_test56244_c(getChild_package_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56243.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Package In Package", //$NON-NLS-1$
								"Consistency: Object: Package In Package: Association: 1404: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56243.length)
										+ " Child_Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Package In Package: Association: 1404: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56243.length)
										+ " Child_Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Package In Package
