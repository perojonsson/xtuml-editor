package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Pref_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.common.*;
import org.eclipse.jface.dialogs.*;
import com.mentor.nucleus.bp.core.ui.preferences.*;
import org.osgi.service.prefs.Preferences;
import org.eclipse.core.resources.*;
import org.eclipse.jface.preference.*;
import org.eclipse.core.runtime.preferences.IScopeContext;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;

// Preferences
public class Pref_c {
	public static boolean Getboolean(final String p_Name) {
		IPreferenceStore store = CorePlugin.getDefault().getPreferenceStore();
		if (p_Name.equals("bridgepoint_prefs_allow_int_to_real_promotion")
				|| p_Name
						.equals("bridgepoint_prefs_allow_real_to_int_coercion")) {
			String option = store.getString(p_Name);
			if (option.equals(MessageDialogWithToggle.ALWAYS)) {
				return true;
			} else {
				return false;
			}
		} else {
			return store.getBoolean(p_Name);
		}

	} // End getBoolean

	public static int Getinteger(final String p_Name) {
		IPreferenceStore store = CorePlugin.getDefault().getPreferenceStore();
		return store.getInt(p_Name);

	} // End getInteger

	public static float Getreal(final String p_Name) {
		IPreferenceStore store = CorePlugin.getDefault().getPreferenceStore();
		return store.getFloat(p_Name);

	} // End getReal

	public static String Getstring(final String p_Name) {
		IPreferenceStore store = CorePlugin.getDefault().getPreferenceStore();
		return store.getString(p_Name);

	} // End getString

	public static boolean Getsystemboolean(final String p_Name,
			final String p_Systemname) {
		IProject selectedProject = ResourcesPlugin.getWorkspace().getRoot()
				.getProject(p_Systemname);
		if (selectedProject != null) {
			IScopeContext projectScope = new ProjectScope(selectedProject);
			Preferences projectNode = projectScope
					.getNode(BridgePointProjectPreferences.BP_PROJECT_PREFERENCES_ID);
			// handle defaults for parse preferences
			if (p_Name
					.equals(BridgePointProjectActionLanguagePreferences.ENABLE_ERROR_FOR_EMPTY_SYNCHRONOUS_MESSAGE)
					|| p_Name
							.equals(BridgePointProjectActionLanguagePreferences.ENABLE_ERROR_FOR_EMPTY_SYNCHRONOUS_MESSAGE_REALIZED)) {
				// we need to consider the workspace preference if a project preference
				// has not been set
				boolean workspacePreference = CorePlugin.getDefault()
						.getPreferenceStore().getBoolean(p_Name);
				// use the workspace preference as the default
				return projectNode.getBoolean(p_Name, workspacePreference);
			}
			// handle defaults for emit RTO data
			if (p_Name
					.equals(BridgePointProjectReferencesPreferences.BP_PROJECT_EMITRTODATA_ID)) {
				return projectNode.getBoolean(p_Name, true);
			}
			return projectNode.getBoolean(p_Name, false);
		}
		return false;

	} // End getSystemBoolean

} // End Pref_c

