package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ChainLink_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CHAIN_LINK extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ChainLink_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ChainLink_c(ModelRoot modelRoot, java.util.UUID p_m_link_id,
			String p_m_rel_phrase, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_rel_id, java.util.UUID p_m_next_link_id,
			int p_m_mult, java.util.UUID p_m_obj_id,
			int p_m_modelclasskeyletterslinenumber,
			int p_m_modelclasskeyletterscolumn,
			int p_m_associationnumberlinenumber,
			int p_m_associationnumbercolumn, int p_m_phraselinenumber,
			int p_m_phrasecolumn) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
		//extract 28 bit value only            
		m_link_idLongBased = 0xfffffff & p_m_link_id.getLeastSignificantBits();
		m_rel_phrase = p_m_rel_phrase;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_next_link_id = IdAssigner.preprocessUUID(p_m_next_link_id);
		m_mult = p_m_mult;
		m_modelclasskeyletterslinenumber = p_m_modelclasskeyletterslinenumber;
		m_modelclasskeyletterscolumn = p_m_modelclasskeyletterscolumn;
		m_associationnumberlinenumber = p_m_associationnumberlinenumber;
		m_associationnumbercolumn = p_m_associationnumbercolumn;
		m_phraselinenumber = p_m_phraselinenumber;
		m_phrasecolumn = p_m_phrasecolumn;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		setUniqueId(m_link_id);
		Object[] key = {m_link_id};
		addInstanceToMap(key);
	}
	static public ChainLink_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_link_id, String p_m_rel_phrase,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_next_link_id, int p_m_mult,
			java.util.UUID p_m_obj_id, int p_m_modelclasskeyletterslinenumber,
			int p_m_modelclasskeyletterscolumn,
			int p_m_associationnumberlinenumber,
			int p_m_associationnumbercolumn, int p_m_phraselinenumber,
			int p_m_phrasecolumn, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);
		ChainLink_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_link_id};
			new_inst = (ChainLink_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
				//extract 28 bit value only            
				new_inst.m_link_idLongBased = 0xfffffff & p_m_link_id
						.getLeastSignificantBits();
				new_inst.m_rel_phrase = p_m_rel_phrase;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_next_link_id = IdAssigner
						.preprocessUUID(p_m_next_link_id);
				new_inst.m_mult = p_m_mult;
				new_inst.m_modelclasskeyletterslinenumber = p_m_modelclasskeyletterslinenumber;
				new_inst.m_modelclasskeyletterscolumn = p_m_modelclasskeyletterscolumn;
				new_inst.m_associationnumberlinenumber = p_m_associationnumberlinenumber;
				new_inst.m_associationnumbercolumn = p_m_associationnumbercolumn;
				new_inst.m_phraselinenumber = p_m_phraselinenumber;
				new_inst.m_phrasecolumn = p_m_phrasecolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ChainLink_c(modelRoot, p_m_link_id, p_m_rel_phrase,
					p_m_statement_id, p_m_rel_id, p_m_next_link_id, p_m_mult,
					p_m_obj_id, p_m_modelclasskeyletterslinenumber,
					p_m_modelclasskeyletterscolumn,
					p_m_associationnumberlinenumber,
					p_m_associationnumbercolumn, p_m_phraselinenumber,
					p_m_phrasecolumn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ChainLink_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_link_id, String p_m_rel_phrase,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_next_link_id, int p_m_mult,
			java.util.UUID p_m_obj_id, int p_m_modelclasskeyletterslinenumber,
			int p_m_modelclasskeyletterscolumn,
			int p_m_associationnumberlinenumber,
			int p_m_associationnumbercolumn, int p_m_phraselinenumber,
			int p_m_phrasecolumn) {
		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);
		ChainLink_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_link_id};
			source = (ChainLink_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
				//extract 28 bit value only            
				source.m_link_idLongBased = 0xfffffff & p_m_link_id
						.getLeastSignificantBits();
				source.m_rel_phrase = p_m_rel_phrase;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_next_link_id = IdAssigner
						.preprocessUUID(p_m_next_link_id);
				source.m_mult = p_m_mult;
				source.m_modelclasskeyletterslinenumber = p_m_modelclasskeyletterslinenumber;
				source.m_modelclasskeyletterscolumn = p_m_modelclasskeyletterscolumn;
				source.m_associationnumberlinenumber = p_m_associationnumberlinenumber;
				source.m_associationnumbercolumn = p_m_associationnumbercolumn;
				source.m_phraselinenumber = p_m_phraselinenumber;
				source.m_phrasecolumn = p_m_phrasecolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		ChainLink_c new_inst = new ChainLink_c(modelRoot, p_m_link_id,
				p_m_rel_phrase, p_m_statement_id, p_m_rel_id, p_m_next_link_id,
				p_m_mult, p_m_obj_id, p_m_modelclasskeyletterslinenumber,
				p_m_modelclasskeyletterscolumn,
				p_m_associationnumberlinenumber, p_m_associationnumbercolumn,
				p_m_phraselinenumber, p_m_phrasecolumn);
		return new_inst;
	}
	public ChainLink_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_link_id = idAssigner.createUUID();
		m_rel_phrase = "";
		m_statement_id = IdAssigner.NULL_UUID;
		m_next_link_id = IdAssigner.NULL_UUID;
		m_mult = Multiplicity_c.OOA_UNINITIALIZED_ENUM;
		m_obj_id = IdAssigner.NULL_UUID;
		m_rel_id = IdAssigner.NULL_UUID;
		setUniqueId(m_link_id);
		Object[] key = {m_link_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_link_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_link_id != p_newKey) {

			m_link_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ChainLink_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ChainLink_c)) {
			return false;
		}

		ChainLink_c me = (ChainLink_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getLink_id()) || IdAssigner.NULL_UUID
						.equals(((ChainLink_c) elem).getLink_id())) && this != elem)) {
			return false;
		}
		if (!getLink_id().equals(((ChainLink_c) elem).getLink_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ChainLink_c)) {
			return false;
		}

		ChainLink_c me = (ChainLink_c) elem;
		if (!getLink_id().equals(((ChainLink_c) elem).getLink_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_link_id;
	private long m_link_idLongBased;
	private String m_rel_phrase;
	private java.util.UUID m_statement_id;
	private java.util.UUID m_next_link_id;
	private int m_mult;
	private int m_modelclasskeyletterslinenumber;
	private int m_modelclasskeyletterscolumn;
	private int m_associationnumberlinenumber;
	private int m_associationnumbercolumn;
	private int m_phraselinenumber;
	private int m_phrasecolumn;
	private java.util.UUID m_obj_id;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	ModelClass_c SpecifiesInstancesOfModelClass;
	public void relateAcrossR678To(ModelClass_c target) {
		relateAcrossR678To(target, true);
	}
	public void relateAcrossR678To(ModelClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesInstancesOfModelClass)
			return; // already related

		if (SpecifiesInstancesOfModelClass != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesInstancesOfModelClass != null) {

				SpecifiesInstancesOfModelClass.clearBackPointerR678To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ChainLink_c.relateAcrossR678To(ModelClass_c target)",
									"Relate performed across R678 from Chain Link to Model Class without unrelate of prior instance.");
				}
			}

			SpecifiesInstancesOfModelClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR678To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR678From(ModelClass_c target) {
		unrelateAcrossR678From(target, true);
	}
	public void unrelateAcrossR678From(ModelClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesInstancesOfModelClass == null)
			return; // already unrelated

		if (target != SpecifiesInstancesOfModelClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R678",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR678To(this);
		}

		if (SpecifiesInstancesOfModelClass != null) {

			m_obj_id = SpecifiesInstancesOfModelClass.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = SpecifiesInstancesOfModelClass
						.getObj_idCachedValue();
			}
			SpecifiesInstancesOfModelClass = null;
			target.removeRef();
		}
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelClass_c[] targets) {
		return getOneACT_LNKOnR678(targets, null);
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelClass_c[] targets,
			ClassQueryInterface_c test) {
		ChainLink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_LNKOnR678(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelClass_c target) {
		return getOneACT_LNKOnR678(target, null);
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelClass_c target,
			boolean loadComponent) {
		return getOneACT_LNKOnR678(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelClass_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_LNKOnR678(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test) {
		return getOneACT_LNKOnR678(modelRoot, target, test, true);
	}

	public static ChainLink_c getOneACT_LNKOnR678(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_LNKOnR678(modelRoot, target, test);
	}
	private static ChainLink_c find_getOneACT_LNKOnR678(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ChainLink_R678) {
				for (int i = 0; i < target.backPointer_ChainLink_R678.size(); ++i) {
					ChainLink_c source = (ChainLink_c) target.backPointer_ChainLink_R678
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c[] targets) {
		return getManyACT_LNKsOnR678(targets, null);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c[] targets,
			boolean loadComponent) {
		return getManyACT_LNKsOnR678(targets, null, loadComponent);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR678(targets, test, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ChainLink_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ChainLink_R678) {
				for (int j = 0; j < targets[i].backPointer_ChainLink_R678
						.size(); ++j) {
					ChainLink_c source = (ChainLink_c) targets[i].backPointer_ChainLink_R678
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ChainLink_c[0];
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c target) {
		return getManyACT_LNKsOnR678(target, null);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c target,
			boolean loadComponent) {
		return getManyACT_LNKsOnR678(target, null, loadComponent);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c target,
			ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR678(target, test, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR678(ModelClass_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ChainLink_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ChainLink_R678) {
			for (int i = 0; i < target.backPointer_ChainLink_R678.size(); ++i) {
				ChainLink_c source = (ChainLink_c) target.backPointer_ChainLink_R678
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ChainLink_c[0];
		}
	}

	// referring navigation

	Select_c Select;
	public void relateAcrossR637To(Select_c target) {
		relateAcrossR637To(target, true);
	}
	public void relateAcrossR637To(Select_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Select)
			return; // already related

		if (Select != target) {

			Object oldKey = getInstanceKey();

			if (Select != null) {

				Select.clearBackPointerR637To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ChainLink_c.relateAcrossR637To(Select_c target)",
									"Relate performed across R637 from Chain Link to Select without unrelate of prior instance.");
				}
			}

			Select = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR637To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR637From(Select_c target) {
		unrelateAcrossR637From(target, true);
	}
	public void unrelateAcrossR637From(Select_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (Select == null)
			return; // already unrelated

		if (target != Select) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R637",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR637To(this);
		}

		if (Select != null) {

			m_statement_id = Select.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = Select.getStatement_idCachedValue();
			}
			Select = null;
			target.removeRef();
		}
	}

	public static ChainLink_c getOneACT_LNKOnR637(Select_c[] targets) {
		return getOneACT_LNKOnR637(targets, null);
	}

	public static ChainLink_c getOneACT_LNKOnR637(Select_c[] targets,
			ClassQueryInterface_c test) {
		ChainLink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_LNKOnR637(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ChainLink_c getOneACT_LNKOnR637(Select_c target) {
		return getOneACT_LNKOnR637(target, null);
	}

	public static ChainLink_c getOneACT_LNKOnR637(Select_c target,
			boolean loadComponent) {
		return getOneACT_LNKOnR637(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ChainLink_c getOneACT_LNKOnR637(Select_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_LNKOnR637(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ChainLink_c getOneACT_LNKOnR637(ModelRoot modelRoot,
			Select_c target, ClassQueryInterface_c test) {
		return getOneACT_LNKOnR637(modelRoot, target, test, true);
	}

	public static ChainLink_c getOneACT_LNKOnR637(ModelRoot modelRoot,
			Select_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_LNKOnR637(modelRoot, target, test);
	}
	private static ChainLink_c find_getOneACT_LNKOnR637(ModelRoot modelRoot,
			Select_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ChainLink_c source = (ChainLink_c) target.backPointer_StartsWithChainLinkStartsWith_R637;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ChainLink_c[] getManyACT_LNKsOnR637(Select_c[] targets) {
		return getManyACT_LNKsOnR637(targets, null);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR637(Select_c[] targets,
			boolean loadComponent) {
		return getManyACT_LNKsOnR637(targets, null, loadComponent);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR637(Select_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR637(targets, test, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR637(Select_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ChainLink_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ChainLink_c source = (ChainLink_c) targets[i].backPointer_StartsWithChainLinkStartsWith_R637;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ChainLink_c[0];
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR637(Select_c target) {
		if (target != null) {
			Select_c[] targetArray = new Select_c[1];
			targetArray[0] = target;
			return getManyACT_LNKsOnR637(targetArray);
		} else {
			ChainLink_c[] result = new ChainLink_c[0];
			return result;
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR637(Select_c target,
			boolean loadComponent) {
		if (target != null) {
			Select_c[] targetArray = new Select_c[1];
			targetArray[0] = target;
			return getManyACT_LNKsOnR637(targetArray, loadComponent);
		} else {
			ChainLink_c[] result = new ChainLink_c[0];
			return result;
		}
	}

	// referring navigation

	ChainLink_c PrecedesChainLink;
	public void relateAcrossR604ToPrecedes(ChainLink_c target) {
		relateAcrossR604ToPrecedes(target, true);
	}
	public void relateAcrossR604ToPrecedes(ChainLink_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == PrecedesChainLink)
			return; // already related

		if (PrecedesChainLink != target) {

			Object oldKey = getInstanceKey();

			if (PrecedesChainLink != null) {

				PrecedesChainLink.clearBackPointerR604ToSucceeds(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ChainLink_c.relateAcrossR604ToPrecedes(ChainLink_c target)",
									"Relate performed across R604 from Chain Link to Chain Link without unrelate of prior instance.");
				}
			}

			PrecedesChainLink = target;
			m_next_link_id = target.getLink_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR604ToSucceeds(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR604FromPrecedes(ChainLink_c target) {
		unrelateAcrossR604FromPrecedes(target, true);
	}
	public void unrelateAcrossR604FromPrecedes(ChainLink_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (PrecedesChainLink == null)
			return; // already unrelated

		if (target != PrecedesChainLink) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R604",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR604ToSucceeds(this);
		}

		if (PrecedesChainLink != null) {

			m_next_link_id = PrecedesChainLink.getLink_id();
			PrecedesChainLink = null;
			target.removeRef();
		}
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(ChainLink_c[] targets) {
		return getOneACT_LNKOnR604Succeeds(targets, null);
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(
			ChainLink_c[] targets, ClassQueryInterface_c test) {
		ChainLink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_LNKOnR604Succeeds(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(ChainLink_c target) {
		return getOneACT_LNKOnR604Succeeds(target, null);
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(ChainLink_c target,
			boolean loadComponent) {
		return getOneACT_LNKOnR604Succeeds(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(ChainLink_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_LNKOnR604Succeeds(target.getModelRoot(), target,
					test);
		}
		return null;
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(ModelRoot modelRoot,
			ChainLink_c target, ClassQueryInterface_c test) {
		return getOneACT_LNKOnR604Succeeds(modelRoot, target, test, true);
	}

	public static ChainLink_c getOneACT_LNKOnR604Succeeds(ModelRoot modelRoot,
			ChainLink_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_LNKOnR604Succeeds(modelRoot, target, test);
	}
	private static ChainLink_c find_getOneACT_LNKOnR604Succeeds(
			ModelRoot modelRoot, ChainLink_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ChainLink_c source = (ChainLink_c) target.backPointer_SucceedsChainLinkSucceeds_R604;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Succeeds(
			ChainLink_c[] targets) {
		return getManyACT_LNKsOnR604Succeeds(targets, null);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR604Succeeds(
			ChainLink_c[] targets, boolean loadComponent) {
		return getManyACT_LNKsOnR604Succeeds(targets, null, loadComponent);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR604Succeeds(
			ChainLink_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR604Succeeds(targets, test, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Succeeds(
			ChainLink_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ChainLink_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ChainLink_c source = (ChainLink_c) targets[i].backPointer_SucceedsChainLinkSucceeds_R604;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ChainLink_c[0];
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Succeeds(ChainLink_c target) {
		if (target != null) {
			ChainLink_c[] targetArray = new ChainLink_c[1];
			targetArray[0] = target;
			return getManyACT_LNKsOnR604Succeeds(targetArray);
		} else {
			ChainLink_c[] result = new ChainLink_c[0];
			return result;
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Succeeds(
			ChainLink_c target, boolean loadComponent) {
		if (target != null) {
			ChainLink_c[] targetArray = new ChainLink_c[1];
			targetArray[0] = target;
			return getManyACT_LNKsOnR604Succeeds(targetArray, loadComponent);
		} else {
			ChainLink_c[] result = new ChainLink_c[0];
			return result;
		}
	}

	// referring navigation

	Association_c SpecifiesTraversalOfAssociation;
	public void relateAcrossR681To(Association_c target) {
		relateAcrossR681To(target, true);
	}
	public void relateAcrossR681To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesTraversalOfAssociation)
			return; // already related

		if (SpecifiesTraversalOfAssociation != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesTraversalOfAssociation != null) {

				SpecifiesTraversalOfAssociation.clearBackPointerR681To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ChainLink_c.relateAcrossR681To(Association_c target)",
									"Relate performed across R681 from Chain Link to Association without unrelate of prior instance.");
				}
			}

			SpecifiesTraversalOfAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR681To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR681From(Association_c target) {
		unrelateAcrossR681From(target, true);
	}
	public void unrelateAcrossR681From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesTraversalOfAssociation == null)
			return; // already unrelated

		if (target != SpecifiesTraversalOfAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R681",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR681To(this);
		}

		if (SpecifiesTraversalOfAssociation != null) {

			m_rel_id = SpecifiesTraversalOfAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = SpecifiesTraversalOfAssociation
						.getRel_idCachedValue();
			}
			SpecifiesTraversalOfAssociation = null;
			target.removeRef();
		}
	}

	public static ChainLink_c getOneACT_LNKOnR681(Association_c[] targets) {
		return getOneACT_LNKOnR681(targets, null);
	}

	public static ChainLink_c getOneACT_LNKOnR681(Association_c[] targets,
			ClassQueryInterface_c test) {
		ChainLink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_LNKOnR681(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ChainLink_c getOneACT_LNKOnR681(Association_c target) {
		return getOneACT_LNKOnR681(target, null);
	}

	public static ChainLink_c getOneACT_LNKOnR681(Association_c target,
			boolean loadComponent) {
		return getOneACT_LNKOnR681(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ChainLink_c getOneACT_LNKOnR681(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_LNKOnR681(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ChainLink_c getOneACT_LNKOnR681(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneACT_LNKOnR681(modelRoot, target, test, true);
	}

	public static ChainLink_c getOneACT_LNKOnR681(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_LNKOnR681(modelRoot, target, test);
	}
	private static ChainLink_c find_getOneACT_LNKOnR681(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ChainLink_R681) {
				for (int i = 0; i < target.backPointer_ChainLink_R681.size(); ++i) {
					ChainLink_c source = (ChainLink_c) target.backPointer_ChainLink_R681
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c[] targets) {
		return getManyACT_LNKsOnR681(targets, null);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c[] targets,
			boolean loadComponent) {
		return getManyACT_LNKsOnR681(targets, null, loadComponent);
	}
	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR681(targets, test, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ChainLink_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ChainLink_R681) {
				for (int j = 0; j < targets[i].backPointer_ChainLink_R681
						.size(); ++j) {
					ChainLink_c source = (ChainLink_c) targets[i].backPointer_ChainLink_R681
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ChainLink_c[0];
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c target) {
		return getManyACT_LNKsOnR681(target, null);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c target,
			boolean loadComponent) {
		return getManyACT_LNKsOnR681(target, null, loadComponent);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c target,
			ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR681(target, test, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR681(Association_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ChainLink_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ChainLink_R681) {
			for (int i = 0; i < target.backPointer_ChainLink_R681.size(); ++i) {
				ChainLink_c source = (ChainLink_c) target.backPointer_ChainLink_R681
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ChainLink_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ChainLink_c backPointer_SucceedsChainLinkSucceeds_R604;

	public void setChainLinkOrderInChildListR604(ChainLink_c target, int index) {
		unrelateAcrossR604FromSucceeds(target);
		ChainLink_c[] elements = ChainLink_c
				.getManyACT_LNKsOnR604Succeeds(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR604FromSucceeds((ChainLink_c) elements[i]);
			}
			count++;
		}
		relateAcrossR604ToSucceeds(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR604ToSucceeds((ChainLink_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR604ToSucceeds(ChainLink_c target) {
		if (target != null) {
			target.relateAcrossR604ToPrecedes(this, true);
		}
	}

	public void relateAcrossR604ToSucceeds(ChainLink_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR604ToPrecedes(this, notifyChanges);
		}
	}

	public void setBackPointerR604ToSucceeds(ChainLink_c target) {
		backPointer_SucceedsChainLinkSucceeds_R604 = target;
	}

	public void unrelateAcrossR604FromSucceeds(ChainLink_c target) {
		if (target != null) {
			target.unrelateAcrossR604FromPrecedes(this, true);
		}
	}

	public void unrelateAcrossR604FromSucceeds(ChainLink_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR604FromPrecedes(this, notifyChanges);
		}
	}

	public void clearBackPointerR604ToSucceeds(ChainLink_c target) {
		if (target == backPointer_SucceedsChainLinkSucceeds_R604) {
			backPointer_SucceedsChainLinkSucceeds_R604 = null;
		}
	}

	public static ChainLink_c getOneACT_LNKOnR604Precedes(ChainLink_c[] targets) {
		return getOneACT_LNKOnR604Precedes(targets, null);
	}

	public static ChainLink_c getOneACT_LNKOnR604Precedes(
			ChainLink_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_LNKOnR604Precedes(targets, test, true);
	}

	public static ChainLink_c getOneACT_LNKOnR604Precedes(
			ChainLink_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ChainLink_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ChainLink_c candidate_val = getOneACT_LNKOnR604Precedes(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_LNKOnR604Precedes(targets[i],
							loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ChainLink_c getOneACT_LNKOnR604Precedes(ChainLink_c target) {
		return getOneACT_LNKOnR604Precedes(target, true);
	}
	public static ChainLink_c getOneACT_LNKOnR604Precedes(ChainLink_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.PrecedesChainLink;
		} else {
			return null;
		}
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Precedes(
			ChainLink_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR604Precedes(targets, test, true);
	}

	public static ChainLink_c [] getManyACT_LNKsOnR604Precedes(ChainLink_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ChainLink_c[0];
  
  
  LinkedHashSet<ChainLink_c> elementsSet = new LinkedHashSet<ChainLink_c>();
  for (int i = 0; i < targets.length; i++) {
    ChainLink_c associate = targets[i].PrecedesChainLink;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ChainLink_c[] result = new ChainLink_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ChainLink_c[] getManyACT_LNKsOnR604Precedes(
			ChainLink_c[] targets) {
		return getManyACT_LNKsOnR604Precedes(targets, null);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Precedes(
			ChainLink_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ChainLink_c[] targetArray = new ChainLink_c[1];
			targetArray[0] = target;
			return getManyACT_LNKsOnR604Precedes(targetArray, test,
					loadComponent);
		} else {
			ChainLink_c[] result = new ChainLink_c[0];
			return result;
		}

	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Precedes(
			ChainLink_c target, ClassQueryInterface_c test) {
		return getManyACT_LNKsOnR604Precedes(target, null, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Precedes(ChainLink_c target) {
		return getManyACT_LNKsOnR604Precedes(target, null, true);
	}

	public static ChainLink_c[] getManyACT_LNKsOnR604Precedes(
			ChainLink_c target, boolean loadComponent) {
		return getManyACT_LNKsOnR604Precedes(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (SpecifiesInstancesOfModelClass == null) {
			// R678
			ModelClass_c relInst39483 = (ModelClass_c) baseRoot
					.getInstanceList(ModelClass_c.class).get(
							new Object[]{m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39483 == null) {
				relInst39483 = (ModelClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ModelClass_c.class)
						.get(new Object[]{m_obj_id});
			}
			if (relInst39483 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39483 = (ModelClass_c) roots[i].getInstanceList(
							ModelClass_c.class).get(new Object[]{m_obj_id});
					if (relInst39483 != null)
						break;
				}
			}
			//synchronized
			if (relInst39483 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39483) && !isProxy())) {
					relInst39483.relateAcrossR678To(this, notifyChanges);
				}
			}
		}

		if (Select == null) {
			// R637
			Select_c relInst39484 = (Select_c) baseRoot.getInstanceList(
					Select_c.class).get(new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39484 == null) {
				relInst39484 = (Select_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Select_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst39484 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39484 = (Select_c) roots[i].getInstanceList(
							Select_c.class).get(new Object[]{m_statement_id});
					if (relInst39484 != null)
						break;
				}
			}
			//synchronized
			if (relInst39484 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39484) && !isProxy())) {
					relInst39484.relateAcrossR637To(this, notifyChanges);
				}
			}
		}

		if (PrecedesChainLink == null) {
			// R604
			ChainLink_c relInst39485 = (ChainLink_c) baseRoot.getInstanceList(
					ChainLink_c.class).get(new Object[]{m_next_link_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39485 == null) {
				relInst39485 = (ChainLink_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ChainLink_c.class)
						.get(new Object[]{m_next_link_id});
			}
			if (relInst39485 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39485 = (ChainLink_c) roots[i].getInstanceList(
							ChainLink_c.class)
							.get(new Object[]{m_next_link_id});
					if (relInst39485 != null)
						break;
				}
			}
			//synchronized
			if (relInst39485 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39485) && !isProxy())) {
					relInst39485
							.relateAcrossR604ToSucceeds(this, notifyChanges);
				}
			}
		}

		if (SpecifiesTraversalOfAssociation == null) {
			// R681
			Association_c relInst39486 = (Association_c) baseRoot
					.getInstanceList(Association_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39486 == null) {
				relInst39486 = (Association_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Association_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst39486 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39486 = (Association_c) roots[i].getInstanceList(
							Association_c.class).get(new Object[]{m_rel_id});
					if (relInst39486 != null)
						break;
				}
			}
			//synchronized
			if (relInst39486 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39486) && !isProxy())) {
					relInst39486.relateAcrossR681To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R678
		// O_OBJ
		inst = SpecifiesInstancesOfModelClass;
		unrelateAcrossR678From(SpecifiesInstancesOfModelClass, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R637
		// ACT_SEL
		inst = Select;
		unrelateAcrossR637From(Select, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R604
		// ACT_LNK
		inst = PrecedesChainLink;
		unrelateAcrossR604FromPrecedes(PrecedesChainLink, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R681
		// R_REL
		inst = SpecifiesTraversalOfAssociation;
		unrelateAcrossR681From(SpecifiesTraversalOfAssociation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ChainLink_c inst = (ChainLink_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ChainLink_c ChainLinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ChainLink_c result = findChainLinkInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static ChainLink_c findChainLinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ChainLink_c x = (ChainLink_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ChainLink_c ChainLinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ChainLinkInstance(modelRoot, test, true);
	}

	public static ChainLink_c ChainLinkInstance(ModelRoot modelRoot) {
		return ChainLinkInstance(modelRoot, null, true);
	}

	public static ChainLink_c[] ChainLinkInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ChainLink_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ChainLink_c x = (ChainLink_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ChainLink_c[] ret_set = new ChainLink_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ChainLink_c[0];
			}
		}
	}
	public static ChainLink_c[] ChainLinkInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ChainLinkInstances(modelRoot, test, true);
	}
	public static ChainLink_c[] ChainLinkInstances(ModelRoot modelRoot) {
		return ChainLinkInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Chain Link.dispose call: ";
		ModelClass_c testR678Inst = ModelClass_c.getOneO_OBJOnR678(this, false);

		if (testR678Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "678 ";
		}
		Select_c testR637Inst = Select_c.getOneACT_SELOnR637(this, false);

		if (testR637Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "637 ";
		}
		ChainLink_c testR604Inst = ChainLink_c.getOneACT_LNKOnR604Succeeds(
				this, false);

		if (testR604Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "604 ";
		}
		testR604Inst = ChainLink_c.getOneACT_LNKOnR604Precedes(this, false);

		if (testR604Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "604 ";
		}
		Association_c testR681Inst = Association_c.getOneR_RELOnR681(this,
				false);

		if (testR681Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "681 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Chain Link", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("link_id")) {
			return true;
		}
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("next_link_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getLink_idLongBased() {
		if (m_link_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_link_id)) {
			return 0xfffffff & m_link_id.getLeastSignificantBits();
		}
		return m_link_idLongBased;
	}
	public java.util.UUID getLink_id() {
		return m_link_id;
	}

	public void setLink_id(java.util.UUID newValue) {
		m_link_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getRel_phrase() {
		return m_rel_phrase;
	}

	public void setRel_phrase(String newValue) {
		m_rel_phrase = newValue;
	}
	public long getStatement_idLongBased() {
		if (Select != null) {
			return Select.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (Select != null) {
			return Select.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getNext_link_idLongBased() {
		if (PrecedesChainLink != null) {
			return PrecedesChainLink.getLink_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getNext_link_id() {
		if (PrecedesChainLink != null) {
			return PrecedesChainLink.getLink_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getNext_link_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_next_link_id))
			return m_next_link_id;
		else
			return getNext_link_id();
	}

	public void setNext_link_id(java.util.UUID newValue) {
		m_next_link_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getMult() {
		return m_mult;
	}

	public void setMult(int newValue) {
		m_mult = newValue;
	}
	public int getModelclasskeyletterslinenumber() {
		return m_modelclasskeyletterslinenumber;
	}

	public void setModelclasskeyletterslinenumber(int newValue) {
		m_modelclasskeyletterslinenumber = newValue;
	}
	public int getModelclasskeyletterscolumn() {
		return m_modelclasskeyletterscolumn;
	}

	public void setModelclasskeyletterscolumn(int newValue) {
		m_modelclasskeyletterscolumn = newValue;
	}
	public int getAssociationnumberlinenumber() {
		return m_associationnumberlinenumber;
	}

	public void setAssociationnumberlinenumber(int newValue) {
		m_associationnumberlinenumber = newValue;
	}
	public int getAssociationnumbercolumn() {
		return m_associationnumbercolumn;
	}

	public void setAssociationnumbercolumn(int newValue) {
		m_associationnumbercolumn = newValue;
	}
	public int getPhraselinenumber() {
		return m_phraselinenumber;
	}

	public void setPhraselinenumber(int newValue) {
		m_phraselinenumber = newValue;
	}
	public int getPhrasecolumn() {
		return m_phrasecolumn;
	}

	public void setPhrasecolumn(int newValue) {
		m_phrasecolumn = newValue;
	}
	public long getObj_idLongBased() {
		if (SpecifiesInstancesOfModelClass != null) {
			return SpecifiesInstancesOfModelClass.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (SpecifiesInstancesOfModelClass != null) {
			return SpecifiesInstancesOfModelClass.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		m_obj_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getRel_idLongBased() {
		if (SpecifiesTraversalOfAssociation != null) {
			return SpecifiesTraversalOfAssociation.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (SpecifiesTraversalOfAssociation != null) {
			return SpecifiesTraversalOfAssociation.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public void setRel_id(java.util.UUID newValue) {
		m_rel_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Chain Link", //$NON-NLS-1$
				" Operation entered: Chain Link::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ChainLink_c[] objs = ChainLink_c.ChainLinkInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Chain Link", //$NON-NLS-1$
				" Operation entered: Chain Link::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ChainLink_c_test39488_c implements ClassQueryInterface_c {
			ChainLink_c_test39488_c(java.util.UUID p39489) {
				m_p39489 = p39489;
			}
			private java.util.UUID m_p39489;
			public boolean evaluate(Object candidate) {
				ChainLink_c selected = (ChainLink_c) candidate;
				boolean retval = false;
				retval = (selected.getLink_id().equals(m_p39489));
				return retval;
			}
		}

		ChainLink_c[] objs39487 = ChainLink_c.ChainLinkInstances(modelRoot,
				new ChainLink_c_test39488_c(getLink_id()));

		if (((objs39487.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39487.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Chain Link: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39487.length), e);
			}
			retval = false;

		}

		if (((objs39487.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39487.length)
										+ " Link_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Chain Link: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39487.length)
										+ " Link_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Chain Link is a referring class in association: rel.Numb = 637
		// The participating class is: Select
		class Select_c_test39493_c implements ClassQueryInterface_c {
			Select_c_test39493_c(java.util.UUID p39494) {
				m_p39494 = p39494;
			}
			private java.util.UUID m_p39494;
			public boolean evaluate(Object candidate) {
				Select_c selected = (Select_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39494));
				return retval;
			}
		}

		Select_c[] objs39492 = Select_c.SelectInstances(modelRoot,
				new Select_c_test39493_c(getStatement_id()));

		if (((objs39492.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Association: 637: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39492.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Chain Link: Association: 637: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39492.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Chain Link is a referring class in association: rel.Numb = 604
		// The participating class is: Chain Link
		class ChainLink_c_test39496_c implements ClassQueryInterface_c {
			ChainLink_c_test39496_c(java.util.UUID p39497) {
				m_p39497 = p39497;
			}
			private java.util.UUID m_p39497;
			public boolean evaluate(Object candidate) {
				ChainLink_c selected = (ChainLink_c) candidate;
				boolean retval = false;
				retval = (selected.getLink_id().equals(m_p39497));
				return retval;
			}
		}

		ChainLink_c[] objs39495 = ChainLink_c.ChainLinkInstances(modelRoot,
				new ChainLink_c_test39496_c(getNext_link_id()));

		if (((objs39495.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Association: 604: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39495.length)
										+ " Next_Link_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Chain Link: Association: 604: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39495.length)
										+ " Next_Link_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Chain Link is a referring class in association: rel.Numb = 678
		// The participating class is: Model Class
		class ModelClass_c_test39499_c implements ClassQueryInterface_c {
			ModelClass_c_test39499_c(java.util.UUID p39500) {
				m_p39500 = p39500;
			}
			private java.util.UUID m_p39500;
			public boolean evaluate(Object candidate) {
				ModelClass_c selected = (ModelClass_c) candidate;
				boolean retval = false;
				retval = (selected.getObj_id().equals(m_p39500));
				return retval;
			}
		}

		ModelClass_c[] objs39498 = ModelClass_c.ModelClassInstances(modelRoot,
				new ModelClass_c_test39499_c(getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39498.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Association: 678: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39498.length)
										+ " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Chain Link: Association: 678: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39498.length)
										+ " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Chain Link is a referring class in association: rel.Numb = 681
		// The participating class is: Association
		class Association_c_test39502_c implements ClassQueryInterface_c {
			Association_c_test39502_c(java.util.UUID p39503) {
				m_p39503 = p39503;
			}
			private java.util.UUID m_p39503;
			public boolean evaluate(Object candidate) {
				Association_c selected = (Association_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p39503));
				return retval;
			}
		}

		Association_c[] objs39501 = Association_c.AssociationInstances(
				modelRoot, new Association_c_test39502_c(getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39501.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Association: 681: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39501.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Chain Link: Association: 681: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39501.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Chain Link is a participating class in association: rel.Numb = 604
		// Object: Chain Link
		class ChainLink_c_test39505_c implements ClassQueryInterface_c {
			ChainLink_c_test39505_c(java.util.UUID p39506) {
				m_p39506 = p39506;
			}
			private java.util.UUID m_p39506;
			public boolean evaluate(Object candidate) {
				ChainLink_c selected = (ChainLink_c) candidate;
				boolean retval = false;
				retval = (selected.getNext_link_id().equals(m_p39506));
				return retval;
			}
		}

		ChainLink_c[] objs39504 = ChainLink_c.ChainLinkInstances(modelRoot,
				new ChainLink_c_test39505_c(getLink_id()));

		if (((objs39504.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Chain Link", //$NON-NLS-1$
								"Consistency: Object: Chain Link: Association: 604: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39504.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Chain Link: Association: 604: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39504.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Chain Link",
				" Operation entered: ChainLink::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR678(this);

		if (((v_obj != null))) {

			this.unrelateAcrossR678From(v_obj);

		}

		Association_c v_rel = Association_c.getOneR_RELOnR681(this);

		if (((v_rel != null))) {

			this.unrelateAcrossR681From(v_rel);

		}

		Select_c v_selection = Select_c.getOneACT_SELOnR637(this);

		if (((v_selection != null))) {

			this.unrelateAcrossR637From(v_selection);

		}

		ChainLink_c v_next_link = ChainLink_c.getOneACT_LNKOnR604Precedes(this);

		ChainLink_c v_prior_link = ChainLink_c
				.getOneACT_LNKOnR604Succeeds(this);

		if (((v_next_link != null) && (v_prior_link != null))) {

			this.unrelateAcrossR604FromPrecedes(v_next_link);

			if (v_prior_link != null) {
				v_prior_link.unrelateAcrossR604FromPrecedes(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_prior_link != null) {
				v_prior_link.relateAcrossR604ToPrecedes(v_next_link);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

		}

		else {

			if (((v_prior_link != null) && (v_next_link == null))) {

				if (v_prior_link != null) {
					v_prior_link.unrelateAcrossR604FromPrecedes(this);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Unrelate attempted on null left hand instance.",
									t);
				}

			}

			else {

				this.unrelateAcrossR604FromPrecedes(v_next_link);

			}

		}

		delete();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Chain Link
