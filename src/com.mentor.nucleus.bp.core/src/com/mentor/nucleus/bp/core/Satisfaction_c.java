      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Satisfaction_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SATISFACTION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Satisfaction_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Satisfaction_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_requirement_id,
       java.util.UUID         p_m_provision_id,
       String       p_m_descrip,
       String       p_m_label)
  {
    super(modelRoot);
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_provision_id = IdAssigner.preprocessUUID(p_m_provision_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       m_label = p_m_label;
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public Satisfaction_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_requirement_id,
       java.util.UUID         p_m_provision_id,
       String       p_m_descrip,
       String       p_m_label, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);
      Satisfaction_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (Satisfaction_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_provision_id = IdAssigner.preprocessUUID(p_m_provision_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       new_inst.m_label = p_m_label;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Satisfaction_c(modelRoot,
p_m_id,
p_m_requirement_id,
p_m_provision_id,
p_m_descrip,
p_m_label
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Satisfaction_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_requirement_id,
       java.util.UUID         p_m_provision_id,
       String       p_m_descrip,
       String       p_m_label){
    InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);
    Satisfaction_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (Satisfaction_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_provision_id = IdAssigner.preprocessUUID(p_m_provision_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       source.m_label = p_m_label;
        
           return source ;
        }
      }
      // there is no instance matching the id
    Satisfaction_c new_inst = new Satisfaction_c(modelRoot,
p_m_id,
p_m_requirement_id,
p_m_provision_id,
p_m_descrip,
p_m_label
);
    return new_inst;
  }
  public Satisfaction_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_descrip = "";   
     m_requirement_id = IdAssigner.NULL_UUID;   
     m_provision_id = IdAssigner.NULL_UUID;   
     m_id = idAssigner.createUUID();
     m_label = "";   
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Satisfaction_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Satisfaction_c)) {
           return false;
       }
       
       Satisfaction_c me = (Satisfaction_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((Satisfaction_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((Satisfaction_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Satisfaction_c)) {
           return false;
       }
       
       Satisfaction_c me = (Satisfaction_c)elem;
      if (!getIdCachedValue().equals(((Satisfaction_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private String       m_descrip ;
  private java.util.UUID         m_requirement_id ;
  private java.util.UUID         m_provision_id ;
  private java.util.UUID         m_id ;
  private String       m_label ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Satisfaction_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Satisfaction to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Satisfaction_c getOneC_SFOnR8001(PackageableElement_c [] targets)
{
    return getOneC_SFOnR8001(targets, null);
}

public static Satisfaction_c getOneC_SFOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_SFOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR8001(PackageableElement_c target)
{
  return getOneC_SFOnR8001(target, null);
}

public static Satisfaction_c getOneC_SFOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneC_SFOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static Satisfaction_c getOneC_SFOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_SFOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static Satisfaction_c getOneC_SFOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneC_SFOnR8001(modelRoot, target, test, true);
}

public static Satisfaction_c getOneC_SFOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_SFOnR8001(modelRoot,target,test);
}
private static Satisfaction_c find_getOneC_SFOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Satisfaction_c source = (Satisfaction_c)target.backPointer_IsSubtypeSatisfactionIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Satisfaction_c [] getManyC_SFsOnR8001(PackageableElement_c [] targets)
{
  return getManyC_SFsOnR8001(targets, null);
}
public static Satisfaction_c [] getManyC_SFsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyC_SFsOnR8001(targets, null, loadComponent);
}
public static Satisfaction_c [] getManyC_SFsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_SFsOnR8001(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Satisfaction_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Satisfaction_c source = (Satisfaction_c)targets[i].backPointer_IsSubtypeSatisfactionIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Satisfaction_c[] ret_set = new Satisfaction_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Satisfaction_c[0];
  }
  }

public static Satisfaction_c [] getManyC_SFsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyC_SFsOnR8001(targetArray);
  } else {
    Satisfaction_c [] result = new Satisfaction_c [0] ;
  return result ;
}
}

public static Satisfaction_c [] getManyC_SFsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyC_SFsOnR8001(targetArray, loadComponent);
  } else {
    Satisfaction_c [] result = new Satisfaction_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Provision_c SatisfiesProvision ;
public void relateAcrossR4002To(Provision_c target)
{
	relateAcrossR4002To(target, true);
}
public void relateAcrossR4002To(Provision_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SatisfiesProvision) return;  // already related

    if ( SatisfiesProvision != target ) {
    
    Object oldKey = getInstanceKey();

    if (SatisfiesProvision != null) {
        UmlProblem.removeXtUMLProblem(this, SatisfiesProvision);
    
        SatisfiesProvision.clearBackPointerR4002To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Satisfaction_c.relateAcrossR4002To(Provision_c target)", 
			"Relate performed across R4002 from Satisfaction to Provision without unrelate of prior instance.");  
		}
    }
                
    	SatisfiesProvision = target ;
        if(IdAssigner.NULL_UUID.equals(target.getProvision_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_provision_id = target.getProvision_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4002To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4002", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4002From(Provision_c target)
{
	unrelateAcrossR4002From(target, true);
}
public void unrelateAcrossR4002From(Provision_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SatisfiesProvision == null) return;  // already unrelated
	
	if (target != SatisfiesProvision) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4002", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4002To(this);
    }
    

      if(SatisfiesProvision != null) {
      
        m_provision_id = SatisfiesProvision.getProvision_id();
        if(IdAssigner.NULL_UUID.equals(m_provision_id))
        {
          m_provision_id = SatisfiesProvision.getProvision_idCachedValue();
        }       
        SatisfiesProvision = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4002", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}


    
// referring navigation

Requirement_c DefinesRequiredSatisficationRequirement ;
public void relateAcrossR4002To(Requirement_c target)
{
	relateAcrossR4002To(target, true);
}
public void relateAcrossR4002To(Requirement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == DefinesRequiredSatisficationRequirement) return;  // already related

    if ( DefinesRequiredSatisficationRequirement != target ) {
    
    Object oldKey = getInstanceKey();

    if (DefinesRequiredSatisficationRequirement != null) {
        UmlProblem.removeXtUMLProblem(this, DefinesRequiredSatisficationRequirement);
    
        DefinesRequiredSatisficationRequirement.clearBackPointerR4002To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Satisfaction_c.relateAcrossR4002To(Requirement_c target)", 
			"Relate performed across R4002 from Satisfaction to Requirement without unrelate of prior instance.");  
		}
    }
                
    	DefinesRequiredSatisficationRequirement = target ;
        if(IdAssigner.NULL_UUID.equals(target.getRequirement_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_requirement_id = target.getRequirement_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4002To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4002", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4002From(Requirement_c target)
{
	unrelateAcrossR4002From(target, true);
}
public void unrelateAcrossR4002From(Requirement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (DefinesRequiredSatisficationRequirement == null) return;  // already unrelated
	
	if (target != DefinesRequiredSatisficationRequirement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4002", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4002To(this);
    }
    

      if(DefinesRequiredSatisficationRequirement != null) {
      
        m_requirement_id = DefinesRequiredSatisficationRequirement.getRequirement_id();
        if(IdAssigner.NULL_UUID.equals(m_requirement_id))
        {
          m_requirement_id = DefinesRequiredSatisficationRequirement.getRequirement_idCachedValue();
        }       
        DefinesRequiredSatisficationRequirement = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4002", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Satisfaction_c getOneC_SFOnR4002(Provision_c [] targets)
{
    return getOneC_SFOnR4002(targets, null);
}

public static Satisfaction_c getOneC_SFOnR4002(Provision_c [] targets, ClassQueryInterface_c test)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_SFOnR4002(targets[i], test);
        }
    }

    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR4002(Provision_c target)
{
  return getOneC_SFOnR4002(target, null);
}

public static Satisfaction_c getOneC_SFOnR4002(Provision_c target, boolean loadComponent)
{
    return getOneC_SFOnR4002(target.getModelRoot(), target, null, loadComponent);
}

public static Satisfaction_c getOneC_SFOnR4002(Provision_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_SFOnR4002(target.getModelRoot(), target, test);
  }
  return null;
}

public static Satisfaction_c getOneC_SFOnR4002(ModelRoot modelRoot, Provision_c target, ClassQueryInterface_c test)
{
	return getOneC_SFOnR4002(modelRoot, target, test, true);
}

public static Satisfaction_c getOneC_SFOnR4002(ModelRoot modelRoot, Provision_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  Satisfaction_c result = null;
  
  result=find_getOneC_SFOnR4002(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,Satisfaction_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneC_SFOnR4002(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static Satisfaction_c find_getOneC_SFOnR4002(ModelRoot modelRoot, Provision_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002) {
	    for ( int i = 0; i < target.backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002.size(); ++i ) {
	      Satisfaction_c source = (Satisfaction_c)target.backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c [] targets)
{
  return getManyC_SFsOnR4002(targets, null);
}
public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c [] targets, boolean loadComponent)
{
  return getManyC_SFsOnR4002(targets, null, loadComponent);
}
public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4002(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Satisfaction_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Satisfaction_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002) {
	    for (int j = 0; j < targets[i].backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002.size(); ++j) {
	      Satisfaction_c source = (Satisfaction_c)targets[i].backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Satisfaction_c[] ret_set = new Satisfaction_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Satisfaction_c[0];
  }
  }

public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c target)
{
  return getManyC_SFsOnR4002(target, null);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c target, boolean loadComponent)
{
  return getManyC_SFsOnR4002(target, null, loadComponent);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c target, ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4002(target, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Provision_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Satisfaction_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Satisfaction_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002) {
    for (int i = 0; i < target.backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002.size(); ++i) {
      Satisfaction_c source = (Satisfaction_c)target.backPointer_DefinesRequiredSatisficationSatisfactionDefinesRequiredSatisfication_R4002.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Satisfaction_c[] ret_set = new Satisfaction_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Satisfaction_c[0];
	}
  }

  
    
      
public static Satisfaction_c getOneC_SFOnR4002(Requirement_c [] targets)
{
    return getOneC_SFOnR4002(targets, null);
}

public static Satisfaction_c getOneC_SFOnR4002(Requirement_c [] targets, ClassQueryInterface_c test)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_SFOnR4002(targets[i], test);
        }
    }

    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR4002(Requirement_c target)
{
  return getOneC_SFOnR4002(target, null);
}

public static Satisfaction_c getOneC_SFOnR4002(Requirement_c target, boolean loadComponent)
{
    return getOneC_SFOnR4002(target.getModelRoot(), target, null, loadComponent);
}

public static Satisfaction_c getOneC_SFOnR4002(Requirement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_SFOnR4002(target.getModelRoot(), target, test);
  }
  return null;
}

public static Satisfaction_c getOneC_SFOnR4002(ModelRoot modelRoot, Requirement_c target, ClassQueryInterface_c test)
{
	return getOneC_SFOnR4002(modelRoot, target, test, true);
}

public static Satisfaction_c getOneC_SFOnR4002(ModelRoot modelRoot, Requirement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  Satisfaction_c result = null;
  
  result=find_getOneC_SFOnR4002(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,Satisfaction_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneC_SFOnR4002(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static Satisfaction_c find_getOneC_SFOnR4002(ModelRoot modelRoot, Requirement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_SatisfiesSatisfactionSatisfies_R4002) {
	    for ( int i = 0; i < target.backPointer_SatisfiesSatisfactionSatisfies_R4002.size(); ++i ) {
	      Satisfaction_c source = (Satisfaction_c)target.backPointer_SatisfiesSatisfactionSatisfies_R4002.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c [] targets)
{
  return getManyC_SFsOnR4002(targets, null);
}
public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c [] targets, boolean loadComponent)
{
  return getManyC_SFsOnR4002(targets, null, loadComponent);
}
public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4002(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Satisfaction_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Satisfaction_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_SatisfiesSatisfactionSatisfies_R4002) {
	    for (int j = 0; j < targets[i].backPointer_SatisfiesSatisfactionSatisfies_R4002.size(); ++j) {
	      Satisfaction_c source = (Satisfaction_c)targets[i].backPointer_SatisfiesSatisfactionSatisfies_R4002.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Satisfaction_c[] ret_set = new Satisfaction_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Satisfaction_c[0];
  }
  }

public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c target)
{
  return getManyC_SFsOnR4002(target, null);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c target, boolean loadComponent)
{
  return getManyC_SFsOnR4002(target, null, loadComponent);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c target, ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4002(target, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4002(Requirement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Satisfaction_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Satisfaction_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_SatisfiesSatisfactionSatisfies_R4002) {
    for (int i = 0; i < target.backPointer_SatisfiesSatisfactionSatisfies_R4002.size(); ++i) {
      Satisfaction_c source = (Satisfaction_c)target.backPointer_SatisfiesSatisfactionSatisfies_R4002.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Satisfaction_c[] ret_set = new Satisfaction_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Satisfaction_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SatisfactionInComponentPackage_c> backPointer_SatisfactionInComponentPackage_R9001 = new ArrayList<SatisfactionInComponentPackage_c>();

public void setSatisfactionInComponentPackageOrderInChildListR9001(SatisfactionInComponentPackage_c target, int index) {
	unrelateAcrossR9001From(target);
	SatisfactionInComponentPackage_c[] elements = SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR9001From((SatisfactionInComponentPackage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR9001To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR9001To((SatisfactionInComponentPackage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR9001To(SatisfactionInComponentPackage_c target)
{
  if (target != null) {
    target.relateAcrossR9001To(this, true) ;
  }
}

public void relateAcrossR9001To(SatisfactionInComponentPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR9001To(this, notifyChanges) ;
  }
}

public void setBackPointerR9001To(SatisfactionInComponentPackage_c target)
{
  	synchronized (backPointer_SatisfactionInComponentPackage_R9001) {
		backPointer_SatisfactionInComponentPackage_R9001.add(target);
	}
}

public void unrelateAcrossR9001From(SatisfactionInComponentPackage_c target)
{
  if (target != null) {
    target.unrelateAcrossR9001From(this, true) ;
  }
}

public void unrelateAcrossR9001From(SatisfactionInComponentPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR9001From(this, notifyChanges) ;
  }
}

public void clearBackPointerR9001To(SatisfactionInComponentPackage_c target)
{
  synchronized (backPointer_SatisfactionInComponentPackage_R9001) {
	    backPointer_SatisfactionInComponentPackage_R9001.remove(target);
	}
}

public static Satisfaction_c getOneC_SFOnR9001(SatisfactionInComponentPackage_c [] targets)
{
    return getOneC_SFOnR9001(targets, null);
}

public static Satisfaction_c getOneC_SFOnR9001(SatisfactionInComponentPackage_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_SFOnR9001(targets, test, true);
}

public static Satisfaction_c getOneC_SFOnR9001(SatisfactionInComponentPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Satisfaction_c candidate_val = getOneC_SFOnR9001(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_SFOnR9001(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR9001(SatisfactionInComponentPackage_c target)
{
	return getOneC_SFOnR9001(target, true);
}
public static Satisfaction_c getOneC_SFOnR9001(SatisfactionInComponentPackage_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Satisfaction ;
  } else {
    return null;
  }
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR9001(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Satisfaction_c[0];
  
  
  LinkedHashSet<Satisfaction_c> elementsSet = new LinkedHashSet<Satisfaction_c>();
  for (int i = 0; i < targets.length; i++) {
    Satisfaction_c associate = targets[i].Satisfaction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Satisfaction_c[] result = new Satisfaction_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c [] targets)
{
  return getManyC_SFsOnR9001(targets, null);
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SatisfactionInComponentPackage_c [] targetArray = new SatisfactionInComponentPackage_c[1];
    targetArray[0] = target;
    return getManyC_SFsOnR9001(targetArray, test, loadComponent);
  } else {
    Satisfaction_c [] result = new Satisfaction_c [0] ;
    return result ;
  }
  
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c target,
    ClassQueryInterface_c test)
{
    return getManyC_SFsOnR9001(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c target)
{
    return getManyC_SFsOnR9001(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR9001(SatisfactionInComponentPackage_c target, boolean loadComponent)
{
    return getManyC_SFsOnR9001(target, null, loadComponent);
}

public static Satisfaction_c getOneC_SFOnR9001(ComponentPackage_c target)
{
  return Satisfaction_c.getOneC_SFOnR9001(SatisfactionInComponentPackage_c.getOnePA_SICPOnR9001(target)) ;
}

public static Satisfaction_c getOneC_SFOnR9001(ComponentPackage_c target,
    ClassQueryInterface_c test)
{
  return Satisfaction_c.getOneC_SFOnR9001(SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001(target), test) ;
}

public static Satisfaction_c [] getManyC_SFsOnR9001(ComponentPackage_c target,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR9001(target, test, true);
}
public static Satisfaction_c [] getManyC_SFsOnR9001(ComponentPackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  SatisfactionInComponentPackage_c [] associators = SatisfactionInComponentPackage_c.getManyPA_SICPsOnR9001(target, loadComponent) ;
    return Satisfaction_c.getManyC_SFsOnR9001(associators, test, loadComponent) ;
}
public static Satisfaction_c [] getManyC_SFsOnR9001(ComponentPackage_c target)
{
    return getManyC_SFsOnR9001(target, null, true);
}
public static Satisfaction_c [] getManyC_SFsOnR9001(ComponentPackage_c target, boolean loadComponent)
{
    return getManyC_SFsOnR9001(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SatisfactionInComponent_c> backPointer_SatisfactionInComponent_R9000 = new ArrayList<SatisfactionInComponent_c>();

public void setSatisfactionInComponentOrderInChildListR9000(SatisfactionInComponent_c target, int index) {
	unrelateAcrossR9000From(target);
	SatisfactionInComponent_c[] elements = SatisfactionInComponent_c.getManyPA_SICsOnR9000(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR9000From((SatisfactionInComponent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR9000To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR9000To((SatisfactionInComponent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR9000To(SatisfactionInComponent_c target)
{
  if (target != null) {
    target.relateAcrossR9000To(this, true) ;
  }
}

public void relateAcrossR9000To(SatisfactionInComponent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR9000To(this, notifyChanges) ;
  }
}

public void setBackPointerR9000To(SatisfactionInComponent_c target)
{
  	synchronized (backPointer_SatisfactionInComponent_R9000) {
		backPointer_SatisfactionInComponent_R9000.add(target);
	}
}

public void unrelateAcrossR9000From(SatisfactionInComponent_c target)
{
  if (target != null) {
    target.unrelateAcrossR9000From(this, true) ;
  }
}

public void unrelateAcrossR9000From(SatisfactionInComponent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR9000From(this, notifyChanges) ;
  }
}

public void clearBackPointerR9000To(SatisfactionInComponent_c target)
{
  synchronized (backPointer_SatisfactionInComponent_R9000) {
	    backPointer_SatisfactionInComponent_R9000.remove(target);
	}
}

public static Satisfaction_c getOneC_SFOnR9000(SatisfactionInComponent_c [] targets)
{
    return getOneC_SFOnR9000(targets, null);
}

public static Satisfaction_c getOneC_SFOnR9000(SatisfactionInComponent_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_SFOnR9000(targets, test, true);
}

public static Satisfaction_c getOneC_SFOnR9000(SatisfactionInComponent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Satisfaction_c candidate_val = getOneC_SFOnR9000(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_SFOnR9000(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR9000(SatisfactionInComponent_c target)
{
	return getOneC_SFOnR9000(target, true);
}
public static Satisfaction_c getOneC_SFOnR9000(SatisfactionInComponent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Satisfaction ;
  } else {
    return null;
  }
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR9000(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Satisfaction_c[0];
  
  
  LinkedHashSet<Satisfaction_c> elementsSet = new LinkedHashSet<Satisfaction_c>();
  for (int i = 0; i < targets.length; i++) {
    Satisfaction_c associate = targets[i].Satisfaction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Satisfaction_c[] result = new Satisfaction_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c [] targets)
{
  return getManyC_SFsOnR9000(targets, null);
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SatisfactionInComponent_c [] targetArray = new SatisfactionInComponent_c[1];
    targetArray[0] = target;
    return getManyC_SFsOnR9000(targetArray, test, loadComponent);
  } else {
    Satisfaction_c [] result = new Satisfaction_c [0] ;
    return result ;
  }
  
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c target,
    ClassQueryInterface_c test)
{
    return getManyC_SFsOnR9000(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c target)
{
    return getManyC_SFsOnR9000(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR9000(SatisfactionInComponent_c target, boolean loadComponent)
{
    return getManyC_SFsOnR9000(target, null, loadComponent);
}

public static Satisfaction_c getOneC_SFOnR9000(Component_c target)
{
  return Satisfaction_c.getOneC_SFOnR9000(SatisfactionInComponent_c.getOnePA_SICOnR9000(target)) ;
}

public static Satisfaction_c getOneC_SFOnR9000(Component_c target,
    ClassQueryInterface_c test)
{
  return Satisfaction_c.getOneC_SFOnR9000(SatisfactionInComponent_c.getManyPA_SICsOnR9000(target), test) ;
}

public static Satisfaction_c [] getManyC_SFsOnR9000(Component_c target,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR9000(target, test, true);
}
public static Satisfaction_c [] getManyC_SFsOnR9000(Component_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  SatisfactionInComponent_c [] associators = SatisfactionInComponent_c.getManyPA_SICsOnR9000(target, loadComponent) ;
    return Satisfaction_c.getManyC_SFsOnR9000(associators, test, loadComponent) ;
}
public static Satisfaction_c [] getManyC_SFsOnR9000(Component_c target)
{
    return getManyC_SFsOnR9000(target, null, true);
}
public static Satisfaction_c [] getManyC_SFsOnR9000(Component_c target, boolean loadComponent)
{
    return getManyC_SFsOnR9000(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ImportedProvisionInSatisfaction_c> backPointer_SatisfactionMadeWithImportedProvisionInSatisfactionSatisfactionMadeWith_R4705 = new ArrayList<ImportedProvisionInSatisfaction_c>();

public void setImportedProvisionInSatisfactionOrderInChildListR4705(ImportedProvisionInSatisfaction_c target, int index) {
	unrelateAcrossR4705From(target);
	ImportedProvisionInSatisfaction_c[] elements = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4705From((ImportedProvisionInSatisfaction_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4705To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4705To((ImportedProvisionInSatisfaction_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4705To(ImportedProvisionInSatisfaction_c target)
{
  if (target != null) {
    target.relateAcrossR4705To(this, true) ;
  }
}

public void relateAcrossR4705To(ImportedProvisionInSatisfaction_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4705To(this, notifyChanges) ;
  }
}

public void setBackPointerR4705To(ImportedProvisionInSatisfaction_c target)
{
  	synchronized (backPointer_SatisfactionMadeWithImportedProvisionInSatisfactionSatisfactionMadeWith_R4705) {
		backPointer_SatisfactionMadeWithImportedProvisionInSatisfactionSatisfactionMadeWith_R4705.add(target);
	}
}

public void unrelateAcrossR4705From(ImportedProvisionInSatisfaction_c target)
{
  if (target != null) {
    target.unrelateAcrossR4705From(this, true) ;
  }
}

public void unrelateAcrossR4705From(ImportedProvisionInSatisfaction_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4705From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4705To(ImportedProvisionInSatisfaction_c target)
{
  synchronized (backPointer_SatisfactionMadeWithImportedProvisionInSatisfactionSatisfactionMadeWith_R4705) {
	    backPointer_SatisfactionMadeWithImportedProvisionInSatisfactionSatisfactionMadeWith_R4705.remove(target);
	}
}

public static Satisfaction_c getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c [] targets)
{
    return getOneC_SFOnR4705(targets, null);
}

public static Satisfaction_c getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_SFOnR4705(targets, test, true);
}

public static Satisfaction_c getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Satisfaction_c candidate_val = getOneC_SFOnR4705(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_SFOnR4705(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c target)
{
	return getOneC_SFOnR4705(target, true);
}
public static Satisfaction_c getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ProvidesSatisfactionThroughSatisfaction != null){
		target.ProvidesSatisfactionThroughSatisfaction.loadProxy();
	}
	}
    return target.ProvidesSatisfactionThroughSatisfaction ;
  } else {
    return null;
  }
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4705(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Satisfaction_c[0];
  
  
  LinkedHashSet<Satisfaction_c> elementsSet = new LinkedHashSet<Satisfaction_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ProvidesSatisfactionThroughSatisfaction == null)
	  targets[i].loadProxy();
    Satisfaction_c associate = targets[i].ProvidesSatisfactionThroughSatisfaction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Satisfaction_c[] result = new Satisfaction_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c [] targets)
{
  return getManyC_SFsOnR4705(targets, null);
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ImportedProvisionInSatisfaction_c [] targetArray = new ImportedProvisionInSatisfaction_c[1];
    targetArray[0] = target;
    return getManyC_SFsOnR4705(targetArray, test, loadComponent);
  } else {
    Satisfaction_c [] result = new Satisfaction_c [0] ;
    return result ;
  }
  
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c target,
    ClassQueryInterface_c test)
{
    return getManyC_SFsOnR4705(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c target)
{
    return getManyC_SFsOnR4705(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c target, boolean loadComponent)
{
    return getManyC_SFsOnR4705(target, null, loadComponent);
}

public static Satisfaction_c getOneC_SFOnR4705(ImportedProvision_c target)
{
  return Satisfaction_c.getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(target)) ;
}

public static Satisfaction_c getOneC_SFOnR4705(ImportedProvision_c target,
    ClassQueryInterface_c test)
{
  return Satisfaction_c.getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(target), test) ;
}

public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvision_c target,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4705(target, test, true);
}
public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvision_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ImportedProvisionInSatisfaction_c [] associators = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(target, loadComponent) ;
    return Satisfaction_c.getManyC_SFsOnR4705(associators, test, loadComponent) ;
}
public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvision_c target)
{
    return getManyC_SFsOnR4705(target, null, true);
}
public static Satisfaction_c [] getManyC_SFsOnR4705(ImportedProvision_c target, boolean loadComponent)
{
    return getManyC_SFsOnR4705(target, null, loadComponent);
}


    
  
  
// referred to navigation

ImportedRequirement_c backPointer_SatisfactionMadeWithImportedRequirementSatisfactionMadeWith_R4706;

public void setImportedRequirementOrderInChildListR4706(ImportedRequirement_c target, int index) {
	unrelateAcrossR4706From(target);
	ImportedRequirement_c[] elements = ImportedRequirement_c.getManyCL_IRsOnR4706(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4706From((ImportedRequirement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4706To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4706To((ImportedRequirement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4706To(ImportedRequirement_c target)
{
  if (target != null) {
    target.relateAcrossR4706To(this, true) ;
  }
}

public void relateAcrossR4706To(ImportedRequirement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4706To(this, notifyChanges) ;
  }
}

public void setBackPointerR4706To(ImportedRequirement_c target)
{
    backPointer_SatisfactionMadeWithImportedRequirementSatisfactionMadeWith_R4706 = target;
}

public void unrelateAcrossR4706From(ImportedRequirement_c target)
{
  if (target != null) {
    target.unrelateAcrossR4706From(this, true) ;
  }
}

public void unrelateAcrossR4706From(ImportedRequirement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4706From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4706To(ImportedRequirement_c target)
{
	if (target == backPointer_SatisfactionMadeWithImportedRequirementSatisfactionMadeWith_R4706) {
		backPointer_SatisfactionMadeWithImportedRequirementSatisfactionMadeWith_R4706 = null;
	}
}

public static Satisfaction_c getOneC_SFOnR4706(ImportedRequirement_c [] targets)
{
    return getOneC_SFOnR4706(targets, null);
}

public static Satisfaction_c getOneC_SFOnR4706(ImportedRequirement_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_SFOnR4706(targets, test, true);
}

public static Satisfaction_c getOneC_SFOnR4706(ImportedRequirement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Satisfaction_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Satisfaction_c candidate_val = getOneC_SFOnR4706(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_SFOnR4706(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Satisfaction_c getOneC_SFOnR4706(ImportedRequirement_c target)
{
	return getOneC_SFOnR4706(target, true);
}
public static Satisfaction_c getOneC_SFOnR4706(ImportedRequirement_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ProvidesSatisfactionThroughSatisfaction != null){
		target.ProvidesSatisfactionThroughSatisfaction.loadProxy();
	}
	}
    return target.ProvidesSatisfactionThroughSatisfaction ;
  } else {
    return null;
  }
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_SFsOnR4706(targets, test, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Satisfaction_c[0];
  
  
  LinkedHashSet<Satisfaction_c> elementsSet = new LinkedHashSet<Satisfaction_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ProvidesSatisfactionThroughSatisfaction == null)
	  targets[i].loadProxy();
    Satisfaction_c associate = targets[i].ProvidesSatisfactionThroughSatisfaction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Satisfaction_c[] result = new Satisfaction_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c [] targets)
{
  return getManyC_SFsOnR4706(targets, null);
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ImportedRequirement_c [] targetArray = new ImportedRequirement_c[1];
    targetArray[0] = target;
    return getManyC_SFsOnR4706(targetArray, test, loadComponent);
  } else {
    Satisfaction_c [] result = new Satisfaction_c [0] ;
    return result ;
  }
  
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c target,
    ClassQueryInterface_c test)
{
    return getManyC_SFsOnR4706(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c target)
{
    return getManyC_SFsOnR4706(target, null, true);
}

public static Satisfaction_c [] getManyC_SFsOnR4706(ImportedRequirement_c target, boolean loadComponent)
{
    return getManyC_SFsOnR4706(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst56898 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56898 == null) {
      			relInst56898 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
      		}
			if (relInst56898 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56898 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
					if (relInst56898 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56898 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56898) && !isProxy())) {
	      relInst56898.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          

      // R4002
      Requirement_c relInst56899 = (Requirement_c) baseRoot.getInstanceList(Requirement_c.class).get(new Object[] {m_requirement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56899 == null) {
      			relInst56899 = (Requirement_c) Ooaofooa.getDefaultInstance().getInstanceList(Requirement_c.class).get(new Object[] {m_requirement_id});
      		}
			if (relInst56899 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56899 = (Requirement_c) roots[i].getInstanceList(Requirement_c.class).get(new Object[] {m_requirement_id});
					if (relInst56899 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56899 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56899) && !isProxy())) {
	      relInst56899.relateAcrossR4002To(this, notifyChanges);
	  }
	  }
	          
      Provision_c relInst56900 = (Provision_c) baseRoot.getInstanceList(Provision_c.class).get(new Object[] {m_provision_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56900 == null) {
      			relInst56900 = (Provision_c) Ooaofooa.getDefaultInstance().getInstanceList(Provision_c.class).get(new Object[] {m_provision_id});
      		}
			if (relInst56900 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56900 = (Provision_c) roots[i].getInstanceList(Provision_c.class).get(new Object[] {m_provision_id});
					if (relInst56900 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56900 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56900) && !isProxy())) {
	      relInst56900.relateAcrossR4002To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R4002
      // C_R
		  inst=DefinesRequiredSatisficationRequirement;
			unrelateAcrossR4002From(DefinesRequiredSatisficationRequirement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // C_P
		  inst=SatisfiesProvision;
			unrelateAcrossR4002From(SatisfiesProvision, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Satisfaction_c inst = (Satisfaction_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Satisfaction_c SatisfactionInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Satisfaction_c result=findSatisfactionInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Satisfaction_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSatisfactionInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Satisfaction_c findSatisfactionInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Satisfaction_c x = (Satisfaction_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Satisfaction_c SatisfactionInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SatisfactionInstance(modelRoot,test,true);
  }
  
  public static Satisfaction_c SatisfactionInstance(ModelRoot modelRoot)
  {
	 return SatisfactionInstance(modelRoot,null,true);
  }

  public static Satisfaction_c [] SatisfactionInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Satisfaction_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Satisfaction_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Satisfaction_c x = (Satisfaction_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Satisfaction_c[] ret_set = new Satisfaction_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Satisfaction_c[0];
			}		
		} 
  }
  public static Satisfaction_c [] SatisfactionInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SatisfactionInstances(modelRoot,test,true);
  }
  public static Satisfaction_c [] SatisfactionInstances(ModelRoot modelRoot)
  {
	return SatisfactionInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Satisfaction.dispose call: ";
	PackageableElement_c testR8001Inst18 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst18 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
	SatisfactionInComponentPackage_c testR9001Inst = SatisfactionInComponentPackage_c.getOnePA_SICPOnR9001(this, false);

	if ( testR9001Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "9001 ";
	}
 	SatisfactionInComponent_c testR9000Inst = SatisfactionInComponent_c.getOnePA_SICOnR9000(this, false);

 	if ( testR9000Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "9000 ";
 	}
	Requirement_c testR4002Inst = Requirement_c.getOneC_ROnR4002(this, false);

	if ( testR4002Inst != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4002 ";	
 	}

   Provision_c testR4002InstOth = Provision_c.getOneC_POnR4002(this, false);

   if ( testR4002InstOth != null )
   {
   delete_error = true;
   errorMsg = errorMsg + "4002 ";   
	}		    
	ImportedProvisionInSatisfaction_c testR4705Inst = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(this, false);

	if ( testR4705Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4705 ";
	}
	ImportedRequirement_c testR4706Inst = ImportedRequirement_c.getOneCL_IROnR4706(this, false);

	if ( testR4706Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4706 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Satisfaction", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("requirement_id")){
         return true;
      }
      if(attributeName.equals("provision_id")){
         return true;
      }
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getRequirement_idLongBased()
  {
    if ( DefinesRequiredSatisficationRequirement != null )
    {
      return DefinesRequiredSatisficationRequirement.getRequirement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRequirement_id()
  {
    if ( DefinesRequiredSatisficationRequirement != null )
    {
      return DefinesRequiredSatisficationRequirement.getRequirement_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRequirement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_requirement_id) )
      return m_requirement_id;
    else
      return getRequirement_id();
  }
  
  public void setRequirement_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_requirement_id)){
	        return;
	    }
	}else if(m_requirement_id != null){
	    if(m_requirement_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Requirement_id", m_requirement_id, newValue,true); 
   m_requirement_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getProvision_idLongBased()
  {
    if ( SatisfiesProvision != null )
    {
      return SatisfiesProvision.getProvision_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getProvision_id()
  {
    if ( SatisfiesProvision != null )
    {
      return SatisfiesProvision.getProvision_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getProvision_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_provision_id) )
      return m_provision_id;
    else
      return getProvision_id();
  }
  
  public void setProvision_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_provision_id)){
	        return;
	    }
	}else if(m_provision_id != null){
	    if(m_provision_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Provision_id", m_provision_id, newValue,true); 
   m_provision_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIdLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getLabel()
  {
ModelRoot modelRoot = getModelRoot();
Provision_c v_provision = Provision_c.getOneC_POnR4002(this);


Requirement_c v_requirement = Requirement_c.getOneC_ROnR4002(this);


String       v_provision_path = "[undetermined path]" ;


String       v_requirement_path = "[undetermined path]" ;


if ( (  (v_provision != null)) )
{

v_provision_path = v_provision.getPathfromcomponent() ;



}

if ( (  (v_requirement != null)) )
{

v_requirement_path = v_requirement.getReversepathfromcomponent() ;



}

return v_provision_path + " -o)- " + v_requirement_path;



  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Satisfaction", //$NON-NLS-1$
	  " Operation entered: Satisfaction::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Satisfaction_c [] objs = Satisfaction_c.SatisfactionInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Satisfaction", //$NON-NLS-1$
	  " Operation entered: Satisfaction::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Satisfaction_c_test56902_c implements ClassQueryInterface_c
    {
	  Satisfaction_c_test56902_c( java.util.UUID            p56903 ) {
	  m_p56903 = p56903;
	  }
	  private java.util.UUID             m_p56903; 
	  public boolean evaluate (Object candidate)
	  {
	      Satisfaction_c selected = (Satisfaction_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56903));
	      return retval;
	  }
    }

    Satisfaction_c [] objs56901 = 
    Satisfaction_c.SatisfactionInstances(modelRoot, new Satisfaction_c_test56902_c(getId())) ;

    if ( (  (objs56901.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Satisfaction", //$NON-NLS-1$
           "Consistency: Object: Satisfaction: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56901.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Satisfaction: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56901.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56901.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Satisfaction", //$NON-NLS-1$
           "Consistency: Object: Satisfaction: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56901.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Satisfaction: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56901.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    class Satisfaction_c_test56905_c implements ClassQueryInterface_c
    {
	  Satisfaction_c_test56905_c( java.util.UUID            p56906, java.util.UUID            p56907 ) {
	       m_p56906 = p56906; 
m_p56907 = p56907;
	  }
	  private java.util.UUID             m_p56906; private java.util.UUID             m_p56907; 
	  public boolean evaluate (Object candidate)
	  {
	      Satisfaction_c selected = (Satisfaction_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRequirement_id().equals(m_p56906)) & (selected.getProvision_id().equals(m_p56907));
	      return retval;
	  }
    }

    Satisfaction_c [] objs56904 = 
    Satisfaction_c.SatisfactionInstances(modelRoot, new Satisfaction_c_test56905_c(getRequirement_id(), getProvision_id())) ;

    if ( (  (objs56904.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Satisfaction", //$NON-NLS-1$
           "Consistency: Object: Satisfaction: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56904.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Satisfaction: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56904.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56904.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Satisfaction", //$NON-NLS-1$
           "Consistency: Object: Satisfaction: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56904.length )  + " Requirement_Id: " + "Not Printable"  + " Provision_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Satisfaction: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56904.length )  + " Requirement_Id: " + "Not Printable"  + " Provision_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Satisfaction is a link class in association: rel.Numb = 4002
            // Other side
          // Satisfaction is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Associated One Side: rel.Numb = 9001
            // Link Object: Satisfaction In Component Package
            // Other Side Class: Component Package
          // Associated Other Side: rel.Numb = 9000
            // Link Object: Satisfaction In Component
          // Associated One Side: rel.Numb = 4705
            // Link Object: Imported Provision In Satisfaction
            // Other Side Class: Imported Provision
          // Satisfaction is a participating class in association: rel.Numb = 4706
             // Object: Imported Requirement
    class ImportedRequirement_c_test56913_c implements ClassQueryInterface_c
    {
	  ImportedRequirement_c_test56913_c( java.util.UUID            p56914 ) {
	  m_p56914 = p56914;
	  }
	  private java.util.UUID             m_p56914; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedRequirement_c selected = (ImportedRequirement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSatisfaction_element_id().equals(m_p56914));
	      return retval;
	  }
    }

    ImportedRequirement_c [] objs56912 = 
    ImportedRequirement_c.ImportedRequirementInstances(modelRoot, new ImportedRequirement_c_test56913_c(getId())) ;

    if ( (  (objs56912.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Satisfaction", //$NON-NLS-1$
           "Consistency: Object: Satisfaction: Association: 4706: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56912.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Satisfaction: Association: 4706: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56912.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  boolean      Satisfieswithimportedref()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Satisfaction", " Operation entered: Satisfaction::Satisfieswithimportedref") ; 
               final ModelRoot modelRoot = getModelRoot();
return Satisfieswithimportedpro() || Satisfieswithimportedreq();



   } // End satisfiesWithImportedRef
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Satisfaction", " Operation entered: Satisfaction::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


boolean      v_isInGenericPackage =   (v_pe != null) ;


if ( v_isInGenericPackage )
{

if (v_pe != null) {
v_pe.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return ;



}

else
{

Provision_c v_pro = Provision_c.getOneC_POnR4002(this);


Requirement_c v_req = Requirement_c.getOneC_ROnR4002(this);


if ( (  (v_pro != null)) && (  (v_req != null)) )
{

unrelateAcrossR4002From( v_req ) ; unrelateAcrossR4002From( v_pro ) ;



}

ImportedProvision_c v_importedPro = ImportedProvision_c.getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(this));


if ( (  (v_importedPro != null)) )
{

ImportedProvisionInSatisfaction_c v_ipins = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(this);


if (v_ipins != null) {
v_ipins.unrelateAcrossR4705From( this ) ; v_ipins.unrelateAcrossR4705From( v_importedPro ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_ipins != null) {
// get the location of this element in the instance list
// before deleting
if ( v_ipins.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_ipins));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

ImportedRequirement_c v_importedReq = ImportedRequirement_c.getOneCL_IROnR4706(this);


if ( (  (v_importedReq != null)) )
{

this.unrelateAcrossR4706From(v_importedReq);



}

SatisfactionInComponentPackage_c v_sicp = SatisfactionInComponentPackage_c.getOnePA_SICPOnR9001(this);


ComponentPackage_c v_comppkg = ComponentPackage_c.getOneCP_CPOnR9001(v_sicp);


if ( (  (v_sicp != null)) )
{

if (v_sicp != null) {
v_sicp.unrelateAcrossR9001From( this ) ; v_sicp.unrelateAcrossR9001From( v_comppkg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_sicp != null) {
// get the location of this element in the instance list
// before deleting
if ( v_sicp.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_sicp));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

SatisfactionInComponent_c v_sic = SatisfactionInComponent_c.getOnePA_SICOnR9000(this);


if ( (  (v_sic != null)) )
{

Component_c v_comp = Component_c.getOneC_COnR9000(v_sic);


if (v_sic != null) {
v_sic.unrelateAcrossR9000From( this ) ; v_sic.unrelateAcrossR9000From( v_comp ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_sic != null) {
// get the location of this element in the instance list
// before deleting
if ( v_sic.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_sic));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}


}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Satisfieswithimportedreq()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Satisfaction", " Operation entered: Satisfaction::Satisfieswithimportedreq") ; 
               final ModelRoot modelRoot = getModelRoot();
ImportedRequirement_c v_importedReq = ImportedRequirement_c.getOneCL_IROnR4706(this);


if ( (  (v_importedReq != null)) )
{

return true;



}

return false;



   } // End satisfiesWithImportedReq
  public  boolean      Satisfieswithimportedpro()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Satisfaction", " Operation entered: Satisfaction::Satisfieswithimportedpro") ; 
               final ModelRoot modelRoot = getModelRoot();
ImportedProvisionInSatisfaction_c v_importedPro = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(this);


if ( (  (v_importedPro != null)) )
{

return true;



}

return false;



   } // End satisfiesWithImportedPro
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Satisfaction", " Operation entered: Satisfaction::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Satisfaction", " Operation entered: Satisfaction::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return getLabel();



   } // End get_name

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Satisfaction
