package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ComponentVisibility_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_COMPONENT_VISIBILITY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ComponentVisibility_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ComponentVisibility_c(ModelRoot modelRoot,
			java.util.UUID p_m_visibility_id, java.util.UUID p_m_element_id,
			java.util.UUID p_m_id, String p_m_name, int p_m_type) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_element_id = IdAssigner.preprocessUUID(p_m_element_id);
		m_name = p_m_name;
		m_type = p_m_type;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_visibility_id = IdAssigner.preprocessUUID(p_m_visibility_id);
		//extract 28 bit value only            
		m_visibility_idLongBased = 0xfffffff & p_m_visibility_id
				.getLeastSignificantBits();

		setUniqueId(m_visibility_id);
		Object[] key = {m_id, m_element_id, m_visibility_id};
		addInstanceToMap(key);
	}
	static public ComponentVisibility_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_visibility_id, java.util.UUID p_m_element_id,
			java.util.UUID p_m_id, String p_m_name, int p_m_type,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);
		ComponentVisibility_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id, p_m_element_id, p_m_visibility_id};
			new_inst = (ComponentVisibility_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_element_id = IdAssigner
						.preprocessUUID(p_m_element_id);
				new_inst.m_name = p_m_name;
				new_inst.m_type = p_m_type;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_visibility_id = IdAssigner
						.preprocessUUID(p_m_visibility_id);
				//extract 28 bit value only            
				new_inst.m_visibility_idLongBased = 0xfffffff & p_m_visibility_id
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ComponentVisibility_c(modelRoot, p_m_visibility_id,
					p_m_element_id, p_m_id, p_m_name, p_m_type);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ComponentVisibility_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_visibility_id, java.util.UUID p_m_element_id,
			java.util.UUID p_m_id, String p_m_name, int p_m_type) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);
		ComponentVisibility_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id, p_m_element_id, p_m_visibility_id};
			source = (ComponentVisibility_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_element_id = IdAssigner.preprocessUUID(p_m_element_id);
				source.m_name = p_m_name;
				source.m_type = p_m_type;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_visibility_id = IdAssigner
						.preprocessUUID(p_m_visibility_id);
				//extract 28 bit value only            
				source.m_visibility_idLongBased = 0xfffffff & p_m_visibility_id
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		ComponentVisibility_c new_inst = new ComponentVisibility_c(modelRoot,
				p_m_visibility_id, p_m_element_id, p_m_id, p_m_name, p_m_type);
		return new_inst;
	}
	public ComponentVisibility_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = IdAssigner.NULL_UUID;
		m_element_id = IdAssigner.NULL_UUID;
		m_name = "";
		m_type = Elementtypeconstants_c.OOA_UNINITIALIZED_ENUM;
		m_visibility_id = idAssigner.createUUID();
		setUniqueId(m_visibility_id);
		Object[] key = {m_id, m_element_id, m_visibility_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id, m_element_id, m_visibility_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ComponentVisibility_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ComponentVisibility_c)) {
			return false;
		}

		ComponentVisibility_c me = (ComponentVisibility_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ComponentVisibility_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ComponentVisibility_c) elem).getId()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElement_id()) || IdAssigner.NULL_UUID
						.equals(((ComponentVisibility_c) elem).getElement_id())) && this != elem)) {
			return false;
		}
		if (!getElement_id().equals(
				((ComponentVisibility_c) elem).getElement_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getVisibility_id()) || IdAssigner.NULL_UUID
						.equals(((ComponentVisibility_c) elem)
								.getVisibility_id())) && this != elem)) {
			return false;
		}
		if (!getVisibility_id().equals(
				((ComponentVisibility_c) elem).getVisibility_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ComponentVisibility_c)) {
			return false;
		}

		ComponentVisibility_c me = (ComponentVisibility_c) elem;
		if (!getIdCachedValue().equals(
				((ComponentVisibility_c) elem).getIdCachedValue()))
			return false;
		if (!getElement_idCachedValue().equals(
				((ComponentVisibility_c) elem).getElement_idCachedValue()))
			return false;
		if (!getVisibility_id().equals(
				((ComponentVisibility_c) elem).getVisibility_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;
	private java.util.UUID m_element_id;
	private String m_name;
	private int m_type;
	private java.util.UUID m_visibility_id;
	private long m_visibility_idLongBased;

	// declare association references from this class

	// referring navigation

	PackageableElement_c HasVisibilityOfPackageableElement;
	public void relateAcrossR8004To(PackageableElement_c target) {
		relateAcrossR8004To(target, true);
	}
	public void relateAcrossR8004To(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasVisibilityOfPackageableElement)
			return; // already related

		if (HasVisibilityOfPackageableElement != target) {

			Object oldKey = getInstanceKey();

			if (HasVisibilityOfPackageableElement != null) {

				HasVisibilityOfPackageableElement.clearBackPointerR8004To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ComponentVisibility_c.relateAcrossR8004To(PackageableElement_c target)",
									"Relate performed across R8004 from Component Visibility to Packageable Element without unrelate of prior instance.");
				}
			}

			HasVisibilityOfPackageableElement = target;
			m_element_id = target.getElement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8004To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8004", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8004From(PackageableElement_c target) {
		unrelateAcrossR8004From(target, true);
	}
	public void unrelateAcrossR8004From(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasVisibilityOfPackageableElement == null)
			return; // already unrelated

		if (target != HasVisibilityOfPackageableElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8004",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8004To(this);
		}

		if (HasVisibilityOfPackageableElement != null) {

			m_element_id = HasVisibilityOfPackageableElement.getElement_id();
			HasVisibilityOfPackageableElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8004", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	Component_c IsVisibleToComponent;
	public void relateAcrossR8004To(Component_c target) {
		relateAcrossR8004To(target, true);
	}
	public void relateAcrossR8004To(Component_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsVisibleToComponent)
			return; // already related

		if (IsVisibleToComponent != target) {

			Object oldKey = getInstanceKey();

			if (IsVisibleToComponent != null) {

				IsVisibleToComponent.clearBackPointerR8004To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ComponentVisibility_c.relateAcrossR8004To(Component_c target)",
									"Relate performed across R8004 from Component Visibility to Component without unrelate of prior instance.");
				}
			}

			IsVisibleToComponent = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8004To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8004", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8004From(Component_c target) {
		unrelateAcrossR8004From(target, true);
	}
	public void unrelateAcrossR8004From(Component_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsVisibleToComponent == null)
			return; // already unrelated

		if (target != IsVisibleToComponent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8004",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8004To(this);
		}

		if (IsVisibleToComponent != null) {

			m_id = IsVisibleToComponent.getId();
			if (IdAssigner.NULL_UUID.equals(m_id)) {
				m_id = IsVisibleToComponent.getIdCachedValue();
			}
			IsVisibleToComponent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8004", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			PackageableElement_c[] targets) {
		return getOnePE_CVSOnR8004(targets, null);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		ComponentVisibility_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePE_CVSOnR8004(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			PackageableElement_c target) {
		return getOnePE_CVSOnR8004(target, null);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			PackageableElement_c target, boolean loadComponent) {
		return getOnePE_CVSOnR8004(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			PackageableElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePE_CVSOnR8004(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			ModelRoot modelRoot, PackageableElement_c target,
			ClassQueryInterface_c test) {
		return getOnePE_CVSOnR8004(modelRoot, target, test, true);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			ModelRoot modelRoot, PackageableElement_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOnePE_CVSOnR8004(modelRoot, target, test);
	}
	private static ComponentVisibility_c find_getOnePE_CVSOnR8004(
			ModelRoot modelRoot, PackageableElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004) {
				for (int i = 0; i < target.backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004
						.size(); ++i) {
					ComponentVisibility_c source = (ComponentVisibility_c) target.backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c[] targets) {
		return getManyPE_CVSsOnR8004(targets, null);
	}
	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c[] targets, boolean loadComponent) {
		return getManyPE_CVSsOnR8004(targets, null, loadComponent);
	}
	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		return getManyPE_CVSsOnR8004(targets, test, true);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ComponentVisibility_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004) {
				for (int j = 0; j < targets[i].backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004
						.size(); ++j) {
					ComponentVisibility_c source = (ComponentVisibility_c) targets[i].backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentVisibility_c[0];
		}
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c target) {
		return getManyPE_CVSsOnR8004(target, null);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c target, boolean loadComponent) {
		return getManyPE_CVSsOnR8004(target, null, loadComponent);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c target, ClassQueryInterface_c test) {
		return getManyPE_CVSsOnR8004(target, test, true);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			PackageableElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ComponentVisibility_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004) {
			for (int i = 0; i < target.backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004
					.size(); ++i) {
				ComponentVisibility_c source = (ComponentVisibility_c) target.backPointer_IsVisibleToComponentVisibilityIsVisibleTo_R8004
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentVisibility_c[0];
		}
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			Component_c[] targets) {
		return getOnePE_CVSOnR8004(targets, null);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			Component_c[] targets, ClassQueryInterface_c test) {
		ComponentVisibility_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePE_CVSOnR8004(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(Component_c target) {
		return getOnePE_CVSOnR8004(target, null);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(Component_c target,
			boolean loadComponent) {
		return getOnePE_CVSOnR8004(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(Component_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePE_CVSOnR8004(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test) {
		return getOnePE_CVSOnR8004(modelRoot, target, test, true);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8004(
			ModelRoot modelRoot, Component_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOnePE_CVSOnR8004(modelRoot, target, test);
	}
	private static ComponentVisibility_c find_getOnePE_CVSOnR8004(
			ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004) {
				for (int i = 0; i < target.backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004
						.size(); ++i) {
					ComponentVisibility_c source = (ComponentVisibility_c) target.backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c[] targets) {
		return getManyPE_CVSsOnR8004(targets, null);
	}
	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c[] targets, boolean loadComponent) {
		return getManyPE_CVSsOnR8004(targets, null, loadComponent);
	}
	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c[] targets, ClassQueryInterface_c test) {
		return getManyPE_CVSsOnR8004(targets, test, true);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ComponentVisibility_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004) {
				for (int j = 0; j < targets[i].backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004
						.size(); ++j) {
					ComponentVisibility_c source = (ComponentVisibility_c) targets[i].backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentVisibility_c[0];
		}
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c target) {
		return getManyPE_CVSsOnR8004(target, null);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c target, boolean loadComponent) {
		return getManyPE_CVSsOnR8004(target, null, loadComponent);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c target, ClassQueryInterface_c test) {
		return getManyPE_CVSsOnR8004(target, test, true);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8004(
			Component_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ComponentVisibility_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004) {
			for (int i = 0; i < target.backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004
					.size(); ++i) {
				ComponentVisibility_c source = (ComponentVisibility_c) target.backPointer_HasVisibilityOfComponentVisibilityHasVisibilityOf_R8004
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentVisibility_c[0];
		}
	}

	// referring navigation

	ComponentResultSet_c MakesUpAComponentResultSet;
	public void relateAcrossR8008To(ComponentResultSet_c target) {
		relateAcrossR8008To(target, true);
	}
	public void relateAcrossR8008To(ComponentResultSet_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MakesUpAComponentResultSet)
			return; // already related

		if (MakesUpAComponentResultSet != target) {

			Object oldKey = getInstanceKey();

			if (MakesUpAComponentResultSet != null) {

				MakesUpAComponentResultSet.clearBackPointerR8008To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ComponentVisibility_c.relateAcrossR8008To(ComponentResultSet_c target)",
									"Relate performed across R8008 from Component Visibility to Component Result Set without unrelate of prior instance.");
				}
			}

			MakesUpAComponentResultSet = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_id = target.getIdCachedValue();
			}
			m_name = target.getName();
			m_type = target.getType();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8008To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8008", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8008From(ComponentResultSet_c target) {
		unrelateAcrossR8008From(target, true);
	}
	public void unrelateAcrossR8008From(ComponentResultSet_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MakesUpAComponentResultSet == null)
			return; // already unrelated

		if (target != MakesUpAComponentResultSet) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8008",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8008To(this);
		}

		if (MakesUpAComponentResultSet != null) {

			m_id = MakesUpAComponentResultSet.getId();
			if (IdAssigner.NULL_UUID.equals(m_id)) {
				m_id = MakesUpAComponentResultSet.getIdCachedValue();
			}
			m_name = MakesUpAComponentResultSet.getName();
			m_type = MakesUpAComponentResultSet.getType();
			MakesUpAComponentResultSet = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8008", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ComponentResultSet_c[] targets) {
		return getOnePE_CVSOnR8008(targets, null);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ComponentResultSet_c[] targets, ClassQueryInterface_c test) {
		ComponentVisibility_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePE_CVSOnR8008(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ComponentResultSet_c target) {
		return getOnePE_CVSOnR8008(target, null);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ComponentResultSet_c target, boolean loadComponent) {
		return getOnePE_CVSOnR8008(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ComponentResultSet_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePE_CVSOnR8008(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ModelRoot modelRoot, ComponentResultSet_c target,
			ClassQueryInterface_c test) {
		return getOnePE_CVSOnR8008(modelRoot, target, test, true);
	}

	public static ComponentVisibility_c getOnePE_CVSOnR8008(
			ModelRoot modelRoot, ComponentResultSet_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOnePE_CVSOnR8008(modelRoot, target, test);
	}
	private static ComponentVisibility_c find_getOnePE_CVSOnR8008(
			ModelRoot modelRoot, ComponentResultSet_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008) {
				for (int i = 0; i < target.backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008
						.size(); ++i) {
					ComponentVisibility_c source = (ComponentVisibility_c) target.backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c[] targets) {
		return getManyPE_CVSsOnR8008(targets, null);
	}
	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c[] targets, boolean loadComponent) {
		return getManyPE_CVSsOnR8008(targets, null, loadComponent);
	}
	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c[] targets, ClassQueryInterface_c test) {
		return getManyPE_CVSsOnR8008(targets, test, true);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ComponentVisibility_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008) {
				for (int j = 0; j < targets[i].backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008
						.size(); ++j) {
					ComponentVisibility_c source = (ComponentVisibility_c) targets[i].backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentVisibility_c[0];
		}
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c target) {
		return getManyPE_CVSsOnR8008(target, null);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c target, boolean loadComponent) {
		return getManyPE_CVSsOnR8008(target, null, loadComponent);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c target, ClassQueryInterface_c test) {
		return getManyPE_CVSsOnR8008(target, test, true);
	}

	public static ComponentVisibility_c[] getManyPE_CVSsOnR8008(
			ComponentResultSet_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ComponentVisibility_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008) {
			for (int i = 0; i < target.backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008
					.size(); ++i) {
				ComponentVisibility_c source = (ComponentVisibility_c) target.backPointer_MadeUpOfComponentVisibilityMadeUpOf_R8008
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentVisibility_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R8004
		PackageableElement_c relInst39957 = (PackageableElement_c) baseRoot
				.getInstanceList(PackageableElement_c.class).get(
						new Object[]{m_element_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39957 == null) {
			relInst39957 = (PackageableElement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(PackageableElement_c.class)
					.get(new Object[]{m_element_id});
		}
		if (relInst39957 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39957 = (PackageableElement_c) roots[i].getInstanceList(
						PackageableElement_c.class).get(
						new Object[]{m_element_id});
				if (relInst39957 != null)
					break;
			}
		}
		//synchronized
		if (relInst39957 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39957) && !isProxy())) {
				relInst39957.relateAcrossR8004To(this, notifyChanges);
			}
		}

		Component_c relInst39958 = (Component_c) baseRoot.getInstanceList(
				Component_c.class).get(new Object[]{m_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39958 == null) {
			relInst39958 = (Component_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Component_c.class).get(new Object[]{m_id});
		}
		if (relInst39958 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39958 = (Component_c) roots[i].getInstanceList(
						Component_c.class).get(new Object[]{m_id});
				if (relInst39958 != null)
					break;
			}
		}
		//synchronized
		if (relInst39958 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39958) && !isProxy())) {
				relInst39958.relateAcrossR8004To(this, notifyChanges);
			}
		}

		if (MakesUpAComponentResultSet == null) {
			// R8008
			ComponentResultSet_c relInst39959 = (ComponentResultSet_c) baseRoot
					.getInstanceList(ComponentResultSet_c.class).get(
							new Object[]{m_name, m_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39959 == null) {
				relInst39959 = (ComponentResultSet_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ComponentResultSet_c.class)
						.get(new Object[]{m_name, m_id});
			}
			if (relInst39959 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39959 = (ComponentResultSet_c) roots[i]
							.getInstanceList(ComponentResultSet_c.class).get(
									new Object[]{m_name, m_id});
					if (relInst39959 != null)
						break;
				}
			}
			//synchronized
			if (relInst39959 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39959) && !isProxy())) {
					relInst39959.relateAcrossR8008To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R8004
		// PE_PE
		inst = HasVisibilityOfPackageableElement;
		unrelateAcrossR8004From(HasVisibilityOfPackageableElement,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// C_C
		inst = IsVisibleToComponent;
		unrelateAcrossR8004From(IsVisibleToComponent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R8008
		// PE_CRS
		inst = MakesUpAComponentResultSet;
		unrelateAcrossR8008From(MakesUpAComponentResultSet, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ComponentVisibility_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ComponentVisibility_c inst = (ComponentVisibility_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ComponentVisibility_c ComponentVisibilityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ComponentVisibility_c result = findComponentVisibilityInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static ComponentVisibility_c findComponentVisibilityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ComponentVisibility_c x = (ComponentVisibility_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ComponentVisibility_c ComponentVisibilityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ComponentVisibilityInstance(modelRoot, test, true);
	}

	public static ComponentVisibility_c ComponentVisibilityInstance(
			ModelRoot modelRoot) {
		return ComponentVisibilityInstance(modelRoot, null, true);
	}

	public static ComponentVisibility_c[] ComponentVisibilityInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentVisibility_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ComponentVisibility_c x = (ComponentVisibility_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ComponentVisibility_c[] ret_set = new ComponentVisibility_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ComponentVisibility_c[0];
			}
		}
	}
	public static ComponentVisibility_c[] ComponentVisibilityInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ComponentVisibilityInstances(modelRoot, test, true);
	}
	public static ComponentVisibility_c[] ComponentVisibilityInstances(
			ModelRoot modelRoot) {
		return ComponentVisibilityInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Component Visibility.dispose call: ";
		Component_c testR8004Inst = Component_c.getOneC_COnR8004(this, false);

		if (testR8004Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "8004 ";
		}

		PackageableElement_c testR8004InstOth = PackageableElement_c
				.getOnePE_PEOnR8004(this, false);

		if (testR8004InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "8004 ";
		}
		ComponentResultSet_c testR8008Inst = ComponentResultSet_c
				.getOnePE_CRSOnR8008(this, false);

		if (testR8008Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "8008 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Component Visibility",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("element_id")) {
			return true;
		}
		if (attributeName.equals("visibility_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (IsVisibleToComponent != null) {
			return IsVisibleToComponent.getIdLongBased();
		}
		if (MakesUpAComponentResultSet != null) {
			return MakesUpAComponentResultSet.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (IsVisibleToComponent != null) {
			return IsVisibleToComponent.getId();
		}
		if (MakesUpAComponentResultSet != null) {
			return MakesUpAComponentResultSet.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public long getElement_idLongBased() {
		if (HasVisibilityOfPackageableElement != null) {
			return HasVisibilityOfPackageableElement.getElement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getElement_id() {
		if (HasVisibilityOfPackageableElement != null) {
			return HasVisibilityOfPackageableElement.getElement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getElement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_element_id))
			return m_element_id;
		else
			return getElement_id();
	}

	public void setElement_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_element_id)) {
				return;
			}
		} else if (m_element_id != null) {
			if (m_element_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Element_id", m_element_id, newValue, false);
		m_element_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getName() {
		if (MakesUpAComponentResultSet != null) {
			return MakesUpAComponentResultSet.getName();
		}
		return "";
	}

	public String getNameCachedValue() {
		if (!m_name.equals(""))
			return m_name;
		else
			return getName();
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, false);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getType() {
		if (MakesUpAComponentResultSet != null) {
			return MakesUpAComponentResultSet.getType();
		}
		return 0;
	}

	public int getTypeCachedValue() {
		return m_type;
	}

	public void setType(int newValue) {
		if (m_type == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Type",
				new Integer(m_type), new Integer(newValue), false);

		m_type = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getVisibility_idLongBased() {
		if (m_visibility_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_visibility_id)) {
			return 0xfffffff & m_visibility_id.getLeastSignificantBits();
		}
		return m_visibility_idLongBased;
	}
	public java.util.UUID getVisibility_id() {
		return m_visibility_id;
	}

	public void setVisibility_id(java.util.UUID newValue) {
		m_visibility_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Component Visibility", //$NON-NLS-1$
						" Operation entered: Component Visibility::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ComponentVisibility_c[] objs = ComponentVisibility_c
				.ComponentVisibilityInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Component Visibility", //$NON-NLS-1$
				" Operation entered: Component Visibility::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ComponentVisibility_c_test39961_c
				implements
					ClassQueryInterface_c {
			ComponentVisibility_c_test39961_c(java.util.UUID p39962,
					java.util.UUID p39963, java.util.UUID p39964) {
				m_p39962 = p39962;
				m_p39963 = p39963;
				m_p39964 = p39964;
			}
			private java.util.UUID m_p39962;
			private java.util.UUID m_p39963;
			private java.util.UUID m_p39964;
			public boolean evaluate(Object candidate) {
				ComponentVisibility_c selected = (ComponentVisibility_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39962))
						& (selected.getElement_id().equals(m_p39963))
						& (selected.getVisibility_id().equals(m_p39964));
				return retval;
			}
		}

		ComponentVisibility_c[] objs39960 = ComponentVisibility_c
				.ComponentVisibilityInstances(modelRoot,
						new ComponentVisibility_c_test39961_c(getId(),
								getElement_id(), getVisibility_id()));

		if (((objs39960.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component Visibility", //$NON-NLS-1$
								"Consistency: Object: Component Visibility: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39960.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Visibility: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39960.length), e);
			}
			retval = false;

		}

		if (((objs39960.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component Visibility", //$NON-NLS-1$
								"Consistency: Object: Component Visibility: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39960.length)
										+ " Id: " + "Not Printable" + " Element_ID: " + "Not Printable" + " Visibility_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Visibility: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39960.length)
										+ " Id: " + "Not Printable" + " Element_ID: " + "Not Printable" + " Visibility_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Component Visibility is a link class in association: rel.Numb = 8004
		// Other side
		// Component Visibility is a referring class in association: rel.Numb = 8008
		// The participating class is: Component Result Set
		class ComponentResultSet_c_test39968_c implements ClassQueryInterface_c {
			ComponentResultSet_c_test39968_c(java.util.UUID p39969,
					String p39970, int p39971) {
				m_p39969 = p39969;
				m_p39970 = p39970;
				m_p39971 = p39971;
			}
			private java.util.UUID m_p39969;
			private String m_p39970;
			private int m_p39971;
			public boolean evaluate(Object candidate) {
				ComponentResultSet_c selected = (ComponentResultSet_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39969))
						& (selected.getName().equals(m_p39970))
						& (selected.getType() == (m_p39971));
				return retval;
			}
		}

		ComponentResultSet_c[] objs39967 = ComponentResultSet_c
				.ComponentResultSetInstances(modelRoot,
						new ComponentResultSet_c_test39968_c(getId(),
								getName(), getType()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39967.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component Visibility", //$NON-NLS-1$
								"Consistency: Object: Component Visibility: Association: 8008: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39967.length)
										+ " Id: " + "Not Printable" + " Name: " + getName() + " Type: " + Integer.toString(getType())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Visibility: Association: 8008: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39967.length)
										+ " Id: " + "Not Printable" + " Name: " + getName() + " Type: " + Integer.toString(getType()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Component Visibility
