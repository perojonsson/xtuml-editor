package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    CommunicationInstanceEventFormalizeOnMSG_AMWizardPage4.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class CommunicationInstanceEventFormalizeOnMSG_AMWizardPage4
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo MessageCombo;
	public Label MessageLabel;

	// cache for user choices
	StateMachineEvent_c Message = null;
	StateMachineEvent_c[] MessageInstances;

	/**
	 * Constructors for CommunicationInstanceEventFormalizeOnMSG_AMWizardPage4.
	 */
	public CommunicationInstanceEventFormalizeOnMSG_AMWizardPage4() {
		super("");
		init();
	}

	public CommunicationInstanceEventFormalizeOnMSG_AMWizardPage4(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Formalize");
		setDescription("Choose the message to send");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((CommunicationInstanceEventFormalizeOnMSG_AMWizard) getWizard())
						.getSelection());

		// cache for context
		AsynchronousMessage_c v_asyncMessage = ((CommunicationInstanceEventFormalizeOnMSG_AMWizard) getWizard()).v_asyncMessage;
		ClassInstanceParticipant_c v_cip = ((CommunicationInstanceEventFormalizeOnMSG_AMWizard) getWizard()).v_cip;

		if (((v_asyncMessage != null))) {

			if (((v_cip != null))) {

				Message_c v_message = Message_c
						.getOneMSG_MOnR1018(v_asyncMessage);

				InteractionParticipant_c v_participant = InteractionParticipant_c
						.getOneSQ_POnR930(v_cip);

				ModelClass_c v_mclass = ModelClass_c.getOneO_OBJOnR934(v_cip);

				if (((v_mclass != null))) {

					StateMachineEvent_c v_evt = StateMachineEvent_c
							.getOneSM_EVTOnR1009(EventMessage_c
									.getOneMSG_EOnR1019(v_asyncMessage));

					java.util.UUID v_existingId = Gd_c.Null_unique_id();

					if (((v_evt != null))) {

						v_existingId = v_evt.getSmevt_id();

					}

					StateMachine_c v_stateMachine = StateMachine_c
							.getOneSM_SMOnR517(InstanceStateMachine_c
									.getOneSM_ISMOnR518(v_mclass));

					StateMachine_c[] v_machines = StateMachine_c
							.getManySM_SMsOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(ModelClass_c.getManyO_OBJsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(SystemModel_c.getManyS_SYSsOnR1405(Package_c
									.getManyEP_PKGsOnR8000(PackageableElement_c
											.getManyPE_PEsOnR8001(v_mclass))))))));

					if (((v_machines.length == 0))) {

						v_machines = StateMachine_c
								.getManySM_SMsOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(ModelClass_c.getManyO_OBJsOnR2(Subsystem_c.getManyS_SSsOnR1(Domain_c
										.getManyS_DOMsOnR1(Subsystem_c
												.getManyS_SSsOnR2(v_mclass))))));

					}

					// select related by where USER::selectOne
					StateMachineEvent_c[] v_MessageInstances = StateMachineEvent_c
							.getManySM_EVTsOnR502(v_machines);
					StateMachineEvent_c v_Message = null;
					int MessageInstCount;
					int MessageResultCount = 0;
					for (MessageInstCount = 0; MessageInstCount < v_MessageInstances.length; MessageInstCount++) {
						StateMachineEvent_c selected = v_MessageInstances[MessageInstCount];
						if (User_c.Selectone(selected.getSmevt_id())
								&& ((v_stateMachine.Canassignevent(
										selected.getSmevt_id(),
										selected.getSm_id(), false)) && (!selected
										.getSmevt_id().equals(v_existingId)))) {
							MessageResultCount++;
						}
					}
					this.MessageInstances = new StateMachineEvent_c[MessageResultCount];
					MessageResultCount = 0;
					for (MessageInstCount = 0; MessageInstCount < v_MessageInstances.length; MessageInstCount++) {
						StateMachineEvent_c selected = v_MessageInstances[MessageInstCount];
						if (User_c.Selectone(selected.getSmevt_id())
								&& ((v_stateMachine.Canassignevent(
										selected.getSmevt_id(),
										selected.getSm_id(), false)) && (!selected
										.getSmevt_id().equals(v_existingId)))) {
							this.MessageInstances[MessageResultCount] = selected;
							MessageResultCount++;
						}
					}
					MessageCombo.removeAll();
					for (MessageInstCount = 0; MessageInstCount < MessageResultCount; MessageInstCount++)
						MessageCombo
								.add(((StateMachineEvent_c) this.MessageInstances[MessageInstCount])
										.Get_name());
					if (MessageResultCount == 1) {
						MessageCombo.select(0);
						updateSelectedMessage();
					}

					if (((v_Message != null))) {

					}

				}

			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		MessageLabel = new Label(composite, SWT.NONE);
		MessageLabel.setText("Message");
		MessageCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		MessageCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		MessageCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedMessage() {
		this.Message = MessageInstances[MessageCombo.getSelectionIndex()];
		((CommunicationInstanceEventFormalizeOnMSG_AMWizard) getWizard()).v_Message = this.Message;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == MessageCombo) {
			updateSelectedMessage();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Message == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((CommunicationInstanceEventFormalizeOnMSG_AMWizard) getWizard()).v_Message = Message;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Message == null)
			return false;
		return true;
	}

}
