package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Gd_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import java.util.UUID;
import java.util.Calendar;
import com.mentor.nucleus.bp.core.common.IdAssigner;

// Graphics Domain
public class Gd_c {
	public static String Newline() {
		return "\n";
	} // End newline

	public static String Int_to_string(final int p_Value) {
		return Integer.toString(p_Value);
	} // End int_to_string

	public static int Max_number() {
		return Integer.MAX_VALUE;
	} // End max_number

	public static java.util.UUID Null_unique_id() {
		return com.mentor.nucleus.bp.core.common.IdAssigner.NULL_UUID;
	} // End NULL_UNIQUE_ID

	public static int Strlen(final String p_S) {
		return p_S.length();
	} // End strlen

	public static int Numberoflines(final String p_String) {
		int count = 0;
		for (int i = 0; i < p_String.length(); i++) {
			if (p_String.toCharArray()[i] == '\n') {
				count = count + 1;
			}
		}
		return count;
	} // End numberOfLines

	public static int String_to_int(final String p_Value) {
		String value = p_Value;
		try {
			int val = 0;
			// Coerce reals to integers
			int decimal = p_Value.indexOf('.');
			int exponent = p_Value.toUpperCase().indexOf('E');
			if (decimal != -1 || exponent != -1) {
				val = (int) Float.parseFloat(p_Value);
				// Convert alternate base to base 10 if necessary
			} else if (p_Value.startsWith("0b")) {
				val = Integer.parseInt(p_Value.substring(2), 2);
			} else if (p_Value.startsWith("0x")) {
				val = Integer.parseInt(p_Value.substring(2), 16);
			} else {
				val = Integer.parseInt(value);
			}
			return val;
		} catch (NumberFormatException e) {
			//A number format exception was caught here, just return -1;
			CorePlugin.logError(
					"GD::string_to_int exception: NumberFormatException", e);
			return -1;
		} catch (Exception e) {
			//An exception was caught here, just return -1;
			CorePlugin.logError("GD::string_to_int exception: Exception", e);
			return -1;
		}
	} // End string_to_int

	public static float String_to_real(final String p_Value) {
		String value = p_Value;
		// Promote integers
		int decimal = p_Value.indexOf('.');
		if (decimal == -1) {
			value = value + ".0";
		}
		try {
			return Float.parseFloat(value);
		} catch (NumberFormatException e) {
			//A number format exception was caught here, just return -1.1;
			CorePlugin.logError(
					"GD::string_to_real exception: NumberFormatException", e);
			return -1;
		} catch (Exception e) {
			//An exception was caught here, just return -1.1;
			CorePlugin.logError("GD::string_to_real exception: Exception", e);
			return -1;
		}

	} // End string_to_real

	public static String Real_to_string(final float p_Value) {
		return Float.toString(p_Value);
	} // End real_to_string

	public static String Unique_id_to_string(final java.util.UUID p_Value) {
		return p_Value.toString();
	} // End unique_id_to_string

	public static String Boolean_to_string(final boolean p_Value) {
		return Boolean.toString(p_Value);
	} // End boolean_to_string

	public static boolean String_to_boolean(final String p_Value) {
		try {
			return (Boolean.valueOf(p_Value)).booleanValue();
		} catch (Exception e) {
			//An exception was caught here, just return false;
			CorePlugin
					.logError("GD::string_to_boolean exception: Exception", e);
			return false;
		}
	} // End string_to_boolean

	public static java.util.UUID String_to_unique_id(final String p_Value) {
		try {
			if (p_Value.contains("::Unknown")) {
				return Null_unique_id();
			} else {
				return UUID.fromString(p_Value);
			}
		} catch (Exception e) {
			//An exception was caught here, just return NULL_UUID;
			CorePlugin.logError("GD::string_to_unique_id exception: Exception",
					e);
			return Null_unique_id();
		}

	} // End string_to_unique_id

	public static String Tolower(final String p_Value) {
		return p_Value.toLowerCase();
	} // End toLower

	public static Object String_to_instance(final String p_Value) {
		return (Object) p_Value;

	} // End string_to_instance

	public static Object Boolean_to_instance(final boolean p_Value) {
		return (Object) Boolean.toString(p_Value);
	} // End boolean_to_instance

	public static String Instance_to_string(final Object p_Value) {
		if (p_Value == null) {
			return "";
		}
		try {
			if (p_Value instanceof lib.BPInteger) {
				Integer intValue = new Integer(
						((lib.BPInteger) p_Value).getValue());
				return intValue.toString();
			}
			if (p_Value instanceof lib.BPUniqueId) {
				return ((lib.BPUniqueId) p_Value).getValue().toString();
			}
			if (p_Value instanceof lib.BPFloat) {
				Float floatValue = new Float(((lib.BPFloat) p_Value).getValue());
				return floatValue.toString();
			}
			if (p_Value instanceof lib.BPBoolean) {
				Boolean boolValue = new Boolean(
						((lib.BPBoolean) p_Value).getValue());
				return boolValue.toString();
			}
			if (p_Value instanceof lib.BPString) {
				String stringValue = new String(
						((lib.BPString) p_Value).getValue());
				return stringValue;
			}

			return p_Value.toString();
		}

		catch (ClassCastException e) {
			CorePlugin.logError("GD::instance_to_string exception: Exception",
					e);
			return p_Value.toString();
		} catch (Exception e) {
			CorePlugin.logError("GD::instance_to_string exception: Exception",
					e);
			return p_Value.toString();
		}

	} // End instance_to_string

	public static Object Int_to_instance(final int p_Value) {
		return (Object) Integer.toString(p_Value);
	} // End int_to_instance

	public static Object Real_to_instance(final float p_Value) {
		return (Object) Float.toString(p_Value);

	} // End real_to_instance

	public static Object Unique_id_to_instance(final java.util.UUID p_Value) {
		return (Object) p_Value.toString();
	} // End unique_id_to_instance

	public static boolean Instance_to_boolean(final Object p_Value) {
		try {
			if (p_Value instanceof lib.BPString) {
				return String_to_boolean(((lib.BPString) p_Value).getValue());
			}
			if (p_Value instanceof lib.BPBoolean) {
				return ((lib.BPBoolean) p_Value).getValue();
			}

			//object has to be converted to string because it was originally stored as string 
			return String_to_boolean(p_Value.toString());
		} catch (Exception e) {
			//An exception was caught here, just return false;
			CorePlugin.logError("GD::instance_to_boolean exception: Exception",
					e);
			return false;
		}
	} // End instance_to_boolean

	public static float Instance_to_real(final Object p_Value) {
		try {
			if (p_Value instanceof lib.BPString) {
				return String_to_real(((lib.BPString) p_Value).getValue());
			}
			if (p_Value instanceof lib.BPFloat) {
				return ((lib.BPFloat) p_Value).getValue();
			}

			//object has to be converted to string because it was originally stored as string 
			return String_to_real(p_Value.toString());
		} catch (NumberFormatException e) {
			//A number format exception was caught here, just return -1.1;
			CorePlugin.logError(
					"GD::instance_to_real exception: NumberFormatException", e);
			return -1;
		} catch (Exception e) {
			//An exception was caught here, just return -1.1;
			CorePlugin.logError("GD::instance_to_real exception: Exception", e);
			return -1;
		}

	} // End instance_to_real

	public static int Instance_to_int(final Object p_Value) {
		try {
			if (p_Value instanceof lib.BPString) {
				return String_to_int(((lib.BPString) p_Value).getValue());
			}
			if (p_Value instanceof lib.BPInteger) {
				return ((lib.BPInteger) p_Value).getValue();
			}
			if (p_Value instanceof String) {
				if (((String) p_Value).equals("not participating")) {
					return 0;
				}
			}
			//object has to be converted to string because it was originally stored as string 
			return String_to_int(p_Value.toString());
		} catch (NumberFormatException e) {
			//A number format exception was caught here, just return -1;
			CorePlugin.logError(
					"GD::instance_to_int exception: NumberFormatException", e);
			return -1;
		} catch (Exception e) {
			//An exception was caught here, just return -1;
			CorePlugin.logError("GD::instance_to_int exception: Exception", e);
			return -1;
		}

	} // End instance_to_int

	public static java.util.UUID Instance_to_unique_id(final Object p_Value) {
		try {
			if (p_Value == null) {
				return Null_unique_id();
			}
			if (p_Value instanceof lib.BPString) {
				return String_to_unique_id(((lib.BPString) p_Value).getValue());
			}

			//object has to be converted to string because it was originally stored as string 
			return String_to_unique_id(p_Value.toString());
		} catch (NumberFormatException e) {
			//A number format exception was caught here, just return 0;
			CorePlugin
					.logError(
							"GD::instance_to_unique_id exception: NumberFormatException",
							e);
			return Null_unique_id();
		} catch (Exception e) {
			//An exception was caught here, just return 0;
			CorePlugin.logError(
					"GD::instance_to_unique_id exception: Exception", e);
			return Null_unique_id();
		}

	} // End instance_to_unique_id

	public static java.util.UUID Instance_to_pending_event_id(
			final Object p_Value) {
		return ((PendingEvent_c) p_Value).getEvent_id();
	} // End instance_to_pending_event_id

	public static Object Converttobpdatatype(final String p_Type,
			final Object p_Value) {
		try {
			if (p_Type.equals("boolean")) { //$NON-NLS-1$
				return new lib.BPBoolean(
						new Boolean((String) p_Value).booleanValue());
			} else if (p_Type.equals("integer")) { //$NON-NLS-1$
				return new lib.BPInteger(
						new Integer((String) p_Value).intValue());
			} else if (p_Type.equals("real")) { //$NON-NLS-1$
				return new lib.BPFloat(new Float((String) p_Value).floatValue());
			} else if (p_Type.equals("string")) { //$NON-NLS-1$
				return new lib.BPString((String) p_Value);
			} else if (p_Type.equals("unique_id")) { //$NON-NLS-1$
				return new lib.BPUniqueId(
						IdAssigner.createRuntimeUUIDFromString(
								(String) p_Value, null));
			} else {
				CorePlugin.logError(
						"GD::convertToBPType error: conversion not supported for"
								+ p_Type, null);
				return null;
			}
		} catch (ClassCastException e) {
			CorePlugin.logError(
					"GD::convertToBPType exception occurred when converting type "
							+ p_Type, e);
			return null;
		} catch (Exception e) {
			CorePlugin.logError(
					"GD::convertToBPType exception occurred when converting type "
							+ p_Type, e);
			return null;
		}
	} // End convertToBPDataType

	public static Object Convertfrombpdatatype(final String p_Type,
			final Object p_Value) {
		try {
			if (p_Type.equals("boolean")) { //$NON-NLS-1$
				return new Boolean(((lib.BPBoolean) p_Value).getValue());
			} else if (p_Type.equals("integer")) { //$NON-NLS-1$
				return new Integer(((lib.BPInteger) p_Value).getValue());
			} else if (p_Type.equals("real")) { //$NON-NLS-1$
				return new Float(((lib.BPFloat) p_Value).getValue());
			} else if (p_Type.equals("string")) { //$NON-NLS-1$
				return new String(((lib.BPString) p_Value).getValue());
			} else if (p_Type.equals("unique_id")) { //$NON-NLS-1$
				return ((lib.BPUniqueId) p_Value).getValue().toString();
			} else {
				CorePlugin.logError(
						"GD::convertfromBPType error: conversion not supported for"
								+ p_Type, null);
				return null;
			}
		} catch (ClassCastException e) {
			CorePlugin.logError(
					"GD::convertFromBPType exception occurred when converting type "
							+ p_Type, e);
			return null;
		} catch (Exception e) {
			CorePlugin.logError(
					"GD::convertFromBPType exception occurred when converting type "
							+ p_Type, e);
			return null;
		}
	} // End convertFromBPDataType

	public static Object Null_instance() {
		return null;

	} // End NULL_INSTANCE

	public static String Timestamp_to_string(final Object p_Value) {
		// Timestamps are already strings
		if (p_Value != null) {
			return p_Value.toString();
		}
		return "empty";
	} // End timestamp_to_string

	public static String Date_to_string(final Object p_Value) {
		if (p_Value instanceof Calendar) {
			String result = ((Calendar) p_Value).getTime().toLocaleString();
			return result;
		}
		return "empty";

	} // End date_to_string

	public static String Timer_to_string(final Object p_Value) {
		if (p_Value instanceof Timer_c) {
			String result = ((Timer_c) p_Value).getLabel();
			return result;
		}
		return "empty";

	} // End timer_to_string

	public static String Event_to_string(final Object p_Value) {
		if (p_Value instanceof PendingEvent_c) {
			String result = ((PendingEvent_c) p_Value).getLabel();
			return result;
		}
		return "empty";

	} // End event_to_string

	public static String Strip_tics(final String p_Value) {
		String rel_phrase = p_Value;
		if (rel_phrase.length() > 0 && rel_phrase.charAt(0) == '\''
				&& rel_phrase.charAt(rel_phrase.length() - 1) == '\'') {
			rel_phrase = rel_phrase.substring(1, rel_phrase.length() - 1);
		}
		return rel_phrase;
	} // End strip_tics

	public static int Compare_dates(final Object p_D1, final Object p_D2) {
		if ((p_D1 instanceof Calendar) && (p_D2 instanceof Calendar)) {
			long d1 = ((Calendar) p_D1).getTimeInMillis();
			long d2 = ((Calendar) p_D2).getTimeInMillis();
			if (d1 == d2)
				return 0;
			if (d1 < d2)
				return 1;
			if (d1 > d2)
				return 2;
		}
		return -1;
	} // End compare_dates

	public static int Compare_times(final Object p_T1, final Object p_T2) {
		long t1 = Long.parseLong((String) p_T1);
		long t2 = Long.parseLong((String) p_T2);
		if (t1 == t2)
			return 0;
		if (t1 < t2)
			return 1;
		if (t1 > t2)
			return 2;
		return -1;

	} // End compare_times

	public static String Component_instance_to_string(final Object p_Value) {
		if (p_Value instanceof ComponentInstance_c) {
			ComponentInstance_c ci = (ComponentInstance_c) p_Value;
			String label = ci.getLabel();
			int num = ci.Getenginenumber();
			String result = label + "[" + num + "]";
			return result;
		}
		return "Component not found";

	} // End component_instance_to_string

} // End Gd_c

