      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InterfaceSignal_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_INTERFACE_SIGNAL extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class InterfaceSignal_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public InterfaceSignal_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       int  p_m_direction,
       java.util.UUID         p_m_previous_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       m_direction = p_m_direction;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_id = IdAssigner.preprocessUUID(p_m_previous_id);
        
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public InterfaceSignal_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       int  p_m_direction,
       java.util.UUID         p_m_previous_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);
      InterfaceSignal_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (InterfaceSignal_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       new_inst.m_direction = p_m_direction;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_id = IdAssigner.preprocessUUID(p_m_previous_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new InterfaceSignal_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip,
p_m_direction,
p_m_previous_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public InterfaceSignal_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       int  p_m_direction,
       java.util.UUID         p_m_previous_id){
    InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);
    InterfaceSignal_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (InterfaceSignal_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       source.m_direction = p_m_direction;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_id = IdAssigner.preprocessUUID(p_m_previous_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    InterfaceSignal_c new_inst = new InterfaceSignal_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip,
p_m_direction,
p_m_previous_id
);
    return new_inst;
  }
  public InterfaceSignal_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_descrip = "";   
     m_direction = Ifdirectiontype_c.OOA_UNINITIALIZED_ENUM;
     m_previous_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof InterfaceSignal_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof InterfaceSignal_c)) {
           return false;
       }
       
       InterfaceSignal_c me = (InterfaceSignal_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((InterfaceSignal_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((InterfaceSignal_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof InterfaceSignal_c)) {
           return false;
       }
       
       InterfaceSignal_c me = (InterfaceSignal_c)elem;
      if (!getIdCachedValue().equals(((InterfaceSignal_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private String       m_name ;
  private String       m_descrip ;
  private int  m_direction ;
  private java.util.UUID         m_previous_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ExecutableProperty_c IsSupertypeExecutableProperty ;
public void relateAcrossR4004To(ExecutableProperty_c target)
{
	relateAcrossR4004To(target, true);
}
public void relateAcrossR4004To(ExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeExecutableProperty) return;  // already related

    if ( IsSupertypeExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeExecutableProperty != null) {
    
        IsSupertypeExecutableProperty.clearBackPointerR4004To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceSignal_c.relateAcrossR4004To(ExecutableProperty_c target)", 
			"Relate performed across R4004 from Interface Signal to Executable Property without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeExecutableProperty = target ;
        m_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4004To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4004", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4004From(ExecutableProperty_c target)
{
	unrelateAcrossR4004From(target, true);
}
public void unrelateAcrossR4004From(ExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeExecutableProperty == null) return;  // already unrelated
	
	if (target != IsSupertypeExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4004", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4004To(this);
    }
    

      if(IsSupertypeExecutableProperty != null) {
      
        m_id = IsSupertypeExecutableProperty.getId();
        IsSupertypeExecutableProperty = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4004", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static InterfaceSignal_c getOneC_ASOnR4004(ExecutableProperty_c [] targets)
{
    return getOneC_ASOnR4004(targets, null);
}

public static InterfaceSignal_c getOneC_ASOnR4004(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    InterfaceSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_ASOnR4004(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceSignal_c getOneC_ASOnR4004(ExecutableProperty_c target)
{
  return getOneC_ASOnR4004(target, null);
}

public static InterfaceSignal_c getOneC_ASOnR4004(ExecutableProperty_c target, boolean loadComponent)
{
    return getOneC_ASOnR4004(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceSignal_c getOneC_ASOnR4004(ExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_ASOnR4004(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceSignal_c getOneC_ASOnR4004(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneC_ASOnR4004(modelRoot, target, test, true);
}

public static InterfaceSignal_c getOneC_ASOnR4004(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_ASOnR4004(modelRoot,target,test);
}
private static InterfaceSignal_c find_getOneC_ASOnR4004(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    InterfaceSignal_c source = (InterfaceSignal_c)target.backPointer_IsSubtypeInterfaceSignalIsSubtype_R4004;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static InterfaceSignal_c [] getManyC_ASsOnR4004(ExecutableProperty_c [] targets)
{
  return getManyC_ASsOnR4004(targets, null);
}
public static InterfaceSignal_c [] getManyC_ASsOnR4004(ExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManyC_ASsOnR4004(targets, null, loadComponent);
}
public static InterfaceSignal_c [] getManyC_ASsOnR4004(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_ASsOnR4004(targets, test, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR4004(ExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceSignal_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      InterfaceSignal_c source = (InterfaceSignal_c)targets[i].backPointer_IsSubtypeInterfaceSignalIsSubtype_R4004;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	InterfaceSignal_c[] ret_set = new InterfaceSignal_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceSignal_c[0];
  }
  }

public static InterfaceSignal_c [] getManyC_ASsOnR4004(ExecutableProperty_c target)
{
  if (target != null) {
    ExecutableProperty_c [] targetArray = new ExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_ASsOnR4004(targetArray);
  } else {
    InterfaceSignal_c [] result = new InterfaceSignal_c [0] ;
  return result ;
}
}

public static InterfaceSignal_c [] getManyC_ASsOnR4004(ExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
    ExecutableProperty_c [] targetArray = new ExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_ASsOnR4004(targetArray, loadComponent);
  } else {
    InterfaceSignal_c [] result = new InterfaceSignal_c [0] ;
  return result ;
}
}



  
    
// referring navigation

InterfaceSignal_c SucceedsInterfaceSignal ;
public void relateAcrossR4020ToSucceeds(InterfaceSignal_c target)
{
	relateAcrossR4020ToSucceeds(target, true);
}
public void relateAcrossR4020ToSucceeds(InterfaceSignal_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SucceedsInterfaceSignal) return;  // already related

    if ( SucceedsInterfaceSignal != target ) {
    
    Object oldKey = getInstanceKey();

    if (SucceedsInterfaceSignal != null) {
    
        SucceedsInterfaceSignal.clearBackPointerR4020ToPrecedes(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceSignal_c.relateAcrossR4020ToSucceeds(InterfaceSignal_c target)", 
			"Relate performed across R4020 from Interface Signal to Interface Signal without unrelate of prior instance.");  
		}
    }
                
    	SucceedsInterfaceSignal = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_previous_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4020ToPrecedes(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4020", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4020FromSucceeds(InterfaceSignal_c target)
{
	unrelateAcrossR4020FromSucceeds(target, true);
}
public void unrelateAcrossR4020FromSucceeds(InterfaceSignal_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SucceedsInterfaceSignal == null) return;  // already unrelated
	
	if (target != SucceedsInterfaceSignal) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4020", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4020ToPrecedes(this);
    }
    

      if(SucceedsInterfaceSignal != null) {
      
        m_previous_id = SucceedsInterfaceSignal.getId();
        if(IdAssigner.NULL_UUID.equals(m_previous_id))
        {
          m_previous_id = SucceedsInterfaceSignal.getIdCachedValue();
        }       
        SucceedsInterfaceSignal = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4020", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static InterfaceSignal_c getOneC_ASOnR4020Precedes(InterfaceSignal_c [] targets)
{
    return getOneC_ASOnR4020Precedes(targets, null);
}

public static InterfaceSignal_c getOneC_ASOnR4020Precedes(InterfaceSignal_c [] targets, ClassQueryInterface_c test)
{
    InterfaceSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_ASOnR4020Precedes(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceSignal_c getOneC_ASOnR4020Precedes(InterfaceSignal_c target)
{
  return getOneC_ASOnR4020Precedes(target, null);
}

public static InterfaceSignal_c getOneC_ASOnR4020Precedes(InterfaceSignal_c target, boolean loadComponent)
{
    return getOneC_ASOnR4020Precedes(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceSignal_c getOneC_ASOnR4020Precedes(InterfaceSignal_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_ASOnR4020Precedes(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceSignal_c getOneC_ASOnR4020Precedes(ModelRoot modelRoot, InterfaceSignal_c target, ClassQueryInterface_c test)
{
	return getOneC_ASOnR4020Precedes(modelRoot, target, test, true);
}

public static InterfaceSignal_c getOneC_ASOnR4020Precedes(ModelRoot modelRoot, InterfaceSignal_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_ASOnR4020Precedes(modelRoot,target,test);
}
private static InterfaceSignal_c find_getOneC_ASOnR4020Precedes(ModelRoot modelRoot, InterfaceSignal_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    InterfaceSignal_c source = (InterfaceSignal_c)target.backPointer_PrecedesInterfaceSignalPrecedes_R4020;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Precedes(InterfaceSignal_c [] targets)
{
  return getManyC_ASsOnR4020Precedes(targets, null);
}
public static InterfaceSignal_c [] getManyC_ASsOnR4020Precedes(InterfaceSignal_c [] targets, boolean loadComponent)
{
  return getManyC_ASsOnR4020Precedes(targets, null, loadComponent);
}
public static InterfaceSignal_c [] getManyC_ASsOnR4020Precedes(InterfaceSignal_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_ASsOnR4020Precedes(targets, test, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Precedes(InterfaceSignal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceSignal_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      InterfaceSignal_c source = (InterfaceSignal_c)targets[i].backPointer_PrecedesInterfaceSignalPrecedes_R4020;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	InterfaceSignal_c[] ret_set = new InterfaceSignal_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceSignal_c[0];
  }
  }

public static InterfaceSignal_c [] getManyC_ASsOnR4020Precedes(InterfaceSignal_c target)
{
  if (target != null) {
    InterfaceSignal_c [] targetArray = new InterfaceSignal_c[1];
    targetArray[0] = target;
    return getManyC_ASsOnR4020Precedes(targetArray);
  } else {
    InterfaceSignal_c [] result = new InterfaceSignal_c [0] ;
  return result ;
}
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Precedes(InterfaceSignal_c target, boolean loadComponent)
{
  if (target != null) {
    InterfaceSignal_c [] targetArray = new InterfaceSignal_c[1];
    targetArray[0] = target;
    return getManyC_ASsOnR4020Precedes(targetArray, loadComponent);
  } else {
    InterfaceSignal_c [] result = new InterfaceSignal_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SignalMessage_c> backPointer_SentBySignalMessageSentBy_R1021 = new ArrayList<SignalMessage_c>();

public void setSignalMessageOrderInChildListR1021(SignalMessage_c target, int index) {
	unrelateAcrossR1021From(target);
	SignalMessage_c[] elements = SignalMessage_c.getManyMSG_SIGsOnR1021(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1021From((SignalMessage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1021To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1021To((SignalMessage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1021To(SignalMessage_c target)
{
  if (target != null) {
    target.relateAcrossR1021To(this, true) ;
  }
}

public void relateAcrossR1021To(SignalMessage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1021To(this, notifyChanges) ;
  }
}

public void setBackPointerR1021To(SignalMessage_c target)
{
  	synchronized (backPointer_SentBySignalMessageSentBy_R1021) {
		backPointer_SentBySignalMessageSentBy_R1021.add(target);
	}
}

public void unrelateAcrossR1021From(SignalMessage_c target)
{
  if (target != null) {
    target.unrelateAcrossR1021From(this, true) ;
  }
}

public void unrelateAcrossR1021From(SignalMessage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1021From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1021To(SignalMessage_c target)
{
  synchronized (backPointer_SentBySignalMessageSentBy_R1021) {
	    backPointer_SentBySignalMessageSentBy_R1021.remove(target);
	}
}

public static InterfaceSignal_c getOneC_ASOnR1021(SignalMessage_c [] targets)
{
    return getOneC_ASOnR1021(targets, null);
}

public static InterfaceSignal_c getOneC_ASOnR1021(SignalMessage_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_ASOnR1021(targets, test, true);
}

public static InterfaceSignal_c getOneC_ASOnR1021(SignalMessage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    InterfaceSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             InterfaceSignal_c candidate_val = getOneC_ASOnR1021(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_ASOnR1021(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static InterfaceSignal_c getOneC_ASOnR1021(SignalMessage_c target)
{
	return getOneC_ASOnR1021(target, true);
}
public static InterfaceSignal_c getOneC_ASOnR1021(SignalMessage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.SendsInterfaceSignal != null){
		target.SendsInterfaceSignal.loadProxy();
	}
	}
    return target.SendsInterfaceSignal ;
  } else {
    return null;
  }
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_ASsOnR1021(targets, test, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InterfaceSignal_c[0];
  
  
  LinkedHashSet<InterfaceSignal_c> elementsSet = new LinkedHashSet<InterfaceSignal_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SendsInterfaceSignal == null)
	  targets[i].loadProxy();
    InterfaceSignal_c associate = targets[i].SendsInterfaceSignal;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  InterfaceSignal_c[] result = new InterfaceSignal_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c [] targets)
{
  return getManyC_ASsOnR1021(targets, null);
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SignalMessage_c [] targetArray = new SignalMessage_c[1];
    targetArray[0] = target;
    return getManyC_ASsOnR1021(targetArray, test, loadComponent);
  } else {
    InterfaceSignal_c [] result = new InterfaceSignal_c [0] ;
    return result ;
  }
  
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c target,
    ClassQueryInterface_c test)
{
    return getManyC_ASsOnR1021(target, null, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c target)
{
    return getManyC_ASsOnR1021(target, null, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR1021(SignalMessage_c target, boolean loadComponent)
{
    return getManyC_ASsOnR1021(target, null, loadComponent);
}


    
  
  
// referred to navigation

InterfaceSignal_c backPointer_PrecedesInterfaceSignalPrecedes_R4020;

public void setInterfaceSignalOrderInChildListR4020(InterfaceSignal_c target, int index) {
	unrelateAcrossR4020FromPrecedes(target);
	InterfaceSignal_c[] elements = InterfaceSignal_c.getManyC_ASsOnR4020Precedes(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4020FromPrecedes((InterfaceSignal_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4020ToPrecedes(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4020ToPrecedes((InterfaceSignal_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4020ToPrecedes(InterfaceSignal_c target)
{
  if (target != null) {
    target.relateAcrossR4020ToSucceeds(this, true) ;
  }
}

public void relateAcrossR4020ToPrecedes(InterfaceSignal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4020ToSucceeds(this, notifyChanges) ;
  }
}

public void setBackPointerR4020ToPrecedes(InterfaceSignal_c target)
{
    backPointer_PrecedesInterfaceSignalPrecedes_R4020 = target;
}

public void unrelateAcrossR4020FromPrecedes(InterfaceSignal_c target)
{
  if (target != null) {
    target.unrelateAcrossR4020FromSucceeds(this, true) ;
  }
}

public void unrelateAcrossR4020FromPrecedes(InterfaceSignal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4020FromSucceeds(this, notifyChanges) ;
  }
}

public void clearBackPointerR4020ToPrecedes(InterfaceSignal_c target)
{
	if (target == backPointer_PrecedesInterfaceSignalPrecedes_R4020) {
		backPointer_PrecedesInterfaceSignalPrecedes_R4020 = null;
	}
}

public static InterfaceSignal_c getOneC_ASOnR4020Succeeds(InterfaceSignal_c [] targets)
{
    return getOneC_ASOnR4020Succeeds(targets, null);
}

public static InterfaceSignal_c getOneC_ASOnR4020Succeeds(InterfaceSignal_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_ASOnR4020Succeeds(targets, test, true);
}

public static InterfaceSignal_c getOneC_ASOnR4020Succeeds(InterfaceSignal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    InterfaceSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             InterfaceSignal_c candidate_val = getOneC_ASOnR4020Succeeds(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_ASOnR4020Succeeds(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static InterfaceSignal_c getOneC_ASOnR4020Succeeds(InterfaceSignal_c target)
{
	return getOneC_ASOnR4020Succeeds(target, true);
}
public static InterfaceSignal_c getOneC_ASOnR4020Succeeds(InterfaceSignal_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.SucceedsInterfaceSignal ;
  } else {
    return null;
  }
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_ASsOnR4020Succeeds(targets, test, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InterfaceSignal_c[0];
  
  
  LinkedHashSet<InterfaceSignal_c> elementsSet = new LinkedHashSet<InterfaceSignal_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SucceedsInterfaceSignal == null)
	  targets[i].loadProxy();
    InterfaceSignal_c associate = targets[i].SucceedsInterfaceSignal;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  InterfaceSignal_c[] result = new InterfaceSignal_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c [] targets)
{
  return getManyC_ASsOnR4020Succeeds(targets, null);
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceSignal_c [] targetArray = new InterfaceSignal_c[1];
    targetArray[0] = target;
    return getManyC_ASsOnR4020Succeeds(targetArray, test, loadComponent);
  } else {
    InterfaceSignal_c [] result = new InterfaceSignal_c [0] ;
    return result ;
  }
  
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c target,
    ClassQueryInterface_c test)
{
    return getManyC_ASsOnR4020Succeeds(target, null, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c target)
{
    return getManyC_ASsOnR4020Succeeds(target, null, true);
}

public static InterfaceSignal_c [] getManyC_ASsOnR4020Succeeds(InterfaceSignal_c target, boolean loadComponent)
{
    return getManyC_ASsOnR4020Succeeds(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R4004
      ExecutableProperty_c relInst56962 = (ExecutableProperty_c) baseRoot.getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56962 == null) {
      			relInst56962 = (ExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_id});
      		}
			if (relInst56962 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56962 = (ExecutableProperty_c) roots[i].getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_id});
					if (relInst56962 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56962 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56962) && !isProxy())) {
	      relInst56962.relateAcrossR4004To(this, notifyChanges);
	  }
	  }
	          

	if (SucceedsInterfaceSignal == null) {          
      // R4020
      InterfaceSignal_c relInst56963 = (InterfaceSignal_c) baseRoot.getInstanceList(InterfaceSignal_c.class).get(new Object[] {m_previous_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56963 == null) {
      			relInst56963 = (InterfaceSignal_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceSignal_c.class).get(new Object[] {m_previous_id});
      		}
			if (relInst56963 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56963 = (InterfaceSignal_c) roots[i].getInstanceList(InterfaceSignal_c.class).get(new Object[] {m_previous_id});
					if (relInst56963 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56963 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56963) && !isProxy())) {
	      relInst56963.relateAcrossR4020ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4004
      // C_EP
		  inst=IsSupertypeExecutableProperty;
			unrelateAcrossR4004From(IsSupertypeExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R4020
      // C_AS
		  inst=SucceedsInterfaceSignal;
			unrelateAcrossR4020FromSucceeds(SucceedsInterfaceSignal, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InterfaceSignal_c inst = (InterfaceSignal_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static InterfaceSignal_c InterfaceSignalInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		InterfaceSignal_c result=findInterfaceSignalInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,InterfaceSignal_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findInterfaceSignalInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static InterfaceSignal_c findInterfaceSignalInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				InterfaceSignal_c x = (InterfaceSignal_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static InterfaceSignal_c InterfaceSignalInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return InterfaceSignalInstance(modelRoot,test,true);
  }
  
  public static InterfaceSignal_c InterfaceSignalInstance(ModelRoot modelRoot)
  {
	 return InterfaceSignalInstance(modelRoot,null,true);
  }

  public static InterfaceSignal_c [] InterfaceSignalInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, InterfaceSignal_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(InterfaceSignal_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					InterfaceSignal_c x = (InterfaceSignal_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				InterfaceSignal_c[] ret_set = new InterfaceSignal_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InterfaceSignal_c[0];
			}		
		} 
  }
  public static InterfaceSignal_c [] InterfaceSignalInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  InterfaceSignalInstances(modelRoot,test,true);
  }
  public static InterfaceSignal_c [] InterfaceSignalInstances(ModelRoot modelRoot)
  {
	return InterfaceSignalInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Interface Signal.dispose call: ";
	SignalMessage_c testR1021Inst = SignalMessage_c.getOneMSG_SIGOnR1021(this, false);

	if ( testR1021Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1021 ";	
	}
	ExecutableProperty_c testR4004Inst1 = ExecutableProperty_c.getOneC_EPOnR4004(this, false);

	if ( testR4004Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4004 ";
	}
	InterfaceSignal_c testR4020Inst = InterfaceSignal_c.getOneC_ASOnR4020Precedes(this, false);

	if ( testR4020Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4020 ";	
	}
	 testR4020Inst = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(this, false);

	if ( testR4020Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4020 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Interface Signal", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      if(attributeName.equals("previous_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if ( IsSupertypeExecutableProperty != null )
    {
      return IsSupertypeExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypeExecutableProperty != null )
    {
      return IsSupertypeExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeExecutableProperty != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_id)){
	        return;
	    }
	}else if(m_id != null){
	    if(m_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id", m_id, newValue,true); 
   m_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getDirection()
  {
    return m_direction ;
  }


  public void setDirection(int newValue)
  {
    if(m_direction == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Direction", new Integer(m_direction), new Integer(newValue),true);

   m_direction = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPrevious_idLongBased()
  {
    if ( SucceedsInterfaceSignal != null )
    {
      return SucceedsInterfaceSignal.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_id()
  {
    if ( SucceedsInterfaceSignal != null )
    {
      return SucceedsInterfaceSignal.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_id) )
      return m_previous_id;
    else
      return getPrevious_id();
  }
  
  public void setPrevious_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_id)){
	        return;
	    }
	}else if(m_previous_id != null){
	    if(m_previous_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_id", m_previous_id, newValue,true); 
   m_previous_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface Signal", //$NON-NLS-1$
	  " Operation entered: Interface Signal::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     InterfaceSignal_c [] objs = InterfaceSignal_c.InterfaceSignalInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface Signal", //$NON-NLS-1$
	  " Operation entered: Interface Signal::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class InterfaceSignal_c_test56965_c implements ClassQueryInterface_c
    {
	  InterfaceSignal_c_test56965_c( java.util.UUID            p56966 ) {
	  m_p56966 = p56966;
	  }
	  private java.util.UUID             m_p56966; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceSignal_c selected = (InterfaceSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56966));
	      return retval;
	  }
    }

    InterfaceSignal_c [] objs56964 = 
    InterfaceSignal_c.InterfaceSignalInstances(modelRoot, new InterfaceSignal_c_test56965_c(getId())) ;

    if ( (  (objs56964.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Signal", //$NON-NLS-1$
           "Consistency: Object: Interface Signal: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56964.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Signal: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56964.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56964.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Signal", //$NON-NLS-1$
           "Consistency: Object: Interface Signal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56964.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Signal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56964.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Interface Signal is a subtype in association: rel.Numb = 4004
          // The supertype class is: Executable Property
    class ExecutableProperty_c_test56970_c implements ClassQueryInterface_c
    {
	  ExecutableProperty_c_test56970_c( java.util.UUID            p56971 ) {
	  m_p56971 = p56971;
	  }
	  private java.util.UUID             m_p56971; 
	  public boolean evaluate (Object candidate)
	  {
	      ExecutableProperty_c selected = (ExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56971));
	      return retval;
	  }
    }

    ExecutableProperty_c [] objs56969 = 
    ExecutableProperty_c.ExecutablePropertyInstances(modelRoot, new ExecutableProperty_c_test56970_c(getId())) ;

    if ( (  (objs56969.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Signal", //$NON-NLS-1$
           "Consistency: Object: Interface Signal: Association: 4004: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56969.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Signal: Association: 4004: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56969.length )  , e); 
      }
      retval = false;

    }

          // Interface Signal is a referring class in association: rel.Numb = 4020
          // The participating class is: Interface Signal
    class InterfaceSignal_c_test56973_c implements ClassQueryInterface_c
    {
	  InterfaceSignal_c_test56973_c( java.util.UUID            p56974 ) {
	  m_p56974 = p56974;
	  }
	  private java.util.UUID             m_p56974; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceSignal_c selected = (InterfaceSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56974));
	      return retval;
	  }
    }

    InterfaceSignal_c [] objs56972 = 
    InterfaceSignal_c.InterfaceSignalInstances(modelRoot, new InterfaceSignal_c_test56973_c(getPrevious_id())) ;

    if ( (  (objs56972.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Signal", //$NON-NLS-1$
           "Consistency: Object: Interface Signal: Association: 4020: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56972.length )  + " Previous_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Signal: Association: 4020: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56972.length )  + " Previous_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Interface Signal is a participating class in association: rel.Numb = 4020
             // Object: Interface Signal
    class InterfaceSignal_c_test56976_c implements ClassQueryInterface_c
    {
	  InterfaceSignal_c_test56976_c( java.util.UUID            p56977 ) {
	  m_p56977 = p56977;
	  }
	  private java.util.UUID             m_p56977; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceSignal_c selected = (InterfaceSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPrevious_id().equals(m_p56977));
	      return retval;
	  }
    }

    InterfaceSignal_c [] objs56975 = 
    InterfaceSignal_c.InterfaceSignalInstances(modelRoot, new InterfaceSignal_c_test56976_c(getId())) ;

    if ( (  (objs56975.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Signal", //$NON-NLS-1$
           "Consistency: Object: Interface Signal: Association: 4020: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56975.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Signal: Association: 4020: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56975.length )  , e); 
      }
      retval = false;

    }

          // Interface Signal is a participating class in association: rel.Numb = 1021
             // Object: Signal Message
    return retval;
  }


  // declare transform functions
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
Interface_c v_iface = Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this));


if (v_iface != null) {
v_iface.Addinterfacesignaltoorder(			    
getId() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


String       v_name = "Unnamed Signal" ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}

String       v_direction = Pref_c.Getstring(			    
"bridgepoint_prefs_message_direction") ;


if ( (v_direction.equals("from provider")) )
{

setDirection( Ifdirectiontype_c.ServerClient) ;



}

else
{

setDirection( Ifdirectiontype_c.ClientServer) ;



}


   } // End initialize
  public  void Newparameter()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Newparameter") ; 
               final ModelRoot modelRoot = getModelRoot();
PropertyParameter_c v_parameter = new PropertyParameter_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_parameter));


ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4004(this);


if (v_ep != null) {
  v_ep.relateAcrossR4006To(v_parameter);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_parameter != null) {
v_parameter.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_ep != null) {
v_ep.Createmessageargumentsforparameter(			    
v_parameter.getPp_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newParameter
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4004(this);


if ( (  (v_ep != null)) )
{

if (v_ep != null) {
v_ep.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

InterfaceSignal_c v_successor = InterfaceSignal_c.getOneC_ASOnR4020Precedes(this);


InterfaceSignal_c v_predecessor = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(this);


if ( (  !  (v_successor == null)) )
{

this.unrelateAcrossR4020FromPrecedes(v_successor);



}

if ( (  !  (v_predecessor == null)) )
{

this.unrelateAcrossR4020FromSucceeds(v_predecessor);



}

if ( (  (v_successor != null) &&   (v_predecessor != null)) )
{

if (v_successor != null) {
  v_successor.relateAcrossR4020ToSucceeds(v_predecessor);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

Message_c [] v_msgs = Message_c.getManyMSG_MsOnR1018(AsynchronousMessage_c.getManyMSG_AMsOnR1019(SignalMessage_c.getManyMSG_SIGsOnR1021(this)));


Message_c  v_msg = null;
for ( int i55188 = 0; i55188 < v_msgs.length; i55188++)
{
  v_msg = v_msgs[i55188] ;

if (v_msg != null) {
v_msg.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Moveup()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Moveup") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


InterfaceSignal_c v_prev_attr = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(this);


InterfaceSignal_c v_prev_prev_attr = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(v_prev_attr);


InterfaceSignal_c v_next_attr = InterfaceSignal_c.getOneC_ASOnR4020Precedes(this);


if ( (  (v_prev_prev_attr != null)) )
{

if (v_prev_attr != null) {
v_prev_attr.unrelateAcrossR4020FromSucceeds(v_prev_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_attr != null)) )
{

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR4020FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

this.unrelateAcrossR4020FromSucceeds(v_prev_attr);


if ( (  (v_prev_prev_attr != null)) )
{

  this.relateAcrossR4020ToSucceeds(v_prev_prev_attr);



}

if ( (  (v_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

if (v_prev_attr != null) {
  v_prev_attr.relateAcrossR4020ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_attr != null) {
  v_next_attr.relateAcrossR4020ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveUp
  public  void Movedown()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Movedown") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


InterfaceSignal_c v_next_attr = InterfaceSignal_c.getOneC_ASOnR4020Precedes(this);


InterfaceSignal_c v_prev_attr = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(this);


InterfaceSignal_c v_next_next_attr = InterfaceSignal_c.getOneC_ASOnR4020Precedes(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

if (v_next_next_attr != null) {
v_next_next_attr.unrelateAcrossR4020FromSucceeds(v_next_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_prev_attr != null)) )
{

this.unrelateAcrossR4020FromSucceeds(v_prev_attr);



}

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR4020FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if ( (  (v_prev_attr != null)) )
{

if (v_next_attr != null) {
  v_next_attr.relateAcrossR4020ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

  this.relateAcrossR4020ToSucceeds(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_next_attr != null) {
  v_next_next_attr.relateAcrossR4020ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveDown
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( (p_Value.equals("move up")) )
{

InterfaceSignal_c v_prev_attr = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(this);


return   (v_prev_attr != null);



}

else if ( (p_Value.equals("move down")) )
{

InterfaceSignal_c v_next_attr = InterfaceSignal_c.getOneC_ASOnR4020Precedes(this);


return   (v_next_attr != null);



}

else if ( (p_Value.equals("setToProvider")) )
{

return getDirection() == Ifdirectiontype_c.ServerClient;



}

else if ( (p_Value.equals("setFromProvider")) )
{

return getDirection() == Ifdirectiontype_c.ClientServer;



}


}

return false;



   } // End actionFilter
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getId();



   } // End get_ooa_id
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  void Pastepropertyparameter(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Pastepropertyparameter") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4004(this);


if (v_ep != null) {
v_ep.Pastepropertyparameter(			    
p_Id ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End pastePropertyParameter
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
Interface_c v_iface = Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this));


InterfaceSignal_c [] v_signals = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(v_iface));


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_iface)));


if ( (  (v_system == null)) )
{

Component_c v_component = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(v_iface));


java.util.UUID         v_pkgId = v_component.Getpackageid() ;


Package_c v_package = (Package_c) modelRoot.getInstanceList(Package_c.class).getGlobal(null, v_pkgId);


v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);



}

java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

InterfaceSignal_c  v_signal = null;
for ( int i55189 = 0; i55189 < v_signals.length; i55189++)
{
  v_signal = v_signals[i55189] ;

if ( (v_signal != this && v_signal.Getsignature().equals(Getsignature())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another signal under the same interface with a " + "matching signature." + Gd_c.Newline() + Gd_c.Newline() + "Signature: " + Getsignature()			    
,Converttoinstance()			    
,getId()			    
,getName()			    
,v_iface.Getpath(			    
true			    
,getName())			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity
  public  String       Getsignature()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Signal", " Operation entered: InterfaceSignal::Getsignature") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_signature = getName() ;


int          v_count = 0 ;


PropertyParameter_c [] v_parameters = PropertyParameter_c.getManyC_PPsOnR4006(ExecutableProperty_c.getManyC_EPsOnR4004(this));


int          v_paramLength =   (v_parameters.length) ;


if ( (v_paramLength > 0) )
{

v_signature = v_signature + "(" ;



}

PropertyParameter_c  v_parameter = null;
for ( int i55190 = 0; i55190 < v_parameters.length; i55190++)
{
  v_parameter = v_parameters[i55190] ;

DataType_c v_type = DataType_c.getOneS_DTOnR4007(v_parameter);


if ( (v_count > 0 && v_count != v_paramLength - 1) )
{

v_signature = v_signature + ", " ;



}

v_signature = v_signature + v_type.getName() ;


v_count = v_count + 1 ;



}

if ( (v_paramLength > 0) )
{

v_signature = v_signature + ")" ;



}

return v_signature;



   } // End getSignature

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return InterfaceSignalActionFilter.getSingleton();
    }
	  return null;
  }
} // end Interface Signal
