      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.MessageValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_MESSAGE_VALUE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class MessageValue_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public MessageValue_c(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_pep_id,
       java.util.UUID         p_m_rep_id,
       boolean      p_m_parmlistok,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_target_value_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       m_parmlistok = p_m_parmlistok;
       m_ownernamelinenumber = p_m_ownernamelinenumber;
       m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_rep_id = IdAssigner.preprocessUUID(p_m_rep_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_pep_id = IdAssigner.preprocessUUID(p_m_pep_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_target_value_id = IdAssigner.preprocessUUID(p_m_target_value_id);
        
    Object [] key = {m_value_id};
    addInstanceToMap(key);
  }
  static public MessageValue_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_pep_id,
       java.util.UUID         p_m_rep_id,
       boolean      p_m_parmlistok,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_target_value_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);
      MessageValue_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_value_id};
          new_inst = (MessageValue_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       new_inst.m_parmlistok = p_m_parmlistok;
       new_inst.m_ownernamelinenumber = p_m_ownernamelinenumber;
       new_inst.m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_rep_id = IdAssigner.preprocessUUID(p_m_rep_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_pep_id = IdAssigner.preprocessUUID(p_m_pep_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_target_value_id = IdAssigner.preprocessUUID(p_m_target_value_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new MessageValue_c(modelRoot,
p_m_value_id,
p_m_pep_id,
p_m_rep_id,
p_m_parmlistok,
p_m_ownernamelinenumber,
p_m_ownernamecolumn,
p_m_target_value_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public MessageValue_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_pep_id,
       java.util.UUID         p_m_rep_id,
       boolean      p_m_parmlistok,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_target_value_id){
    InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);
    MessageValue_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_value_id
            };
        source = (MessageValue_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       source.m_parmlistok = p_m_parmlistok;
       source.m_ownernamelinenumber = p_m_ownernamelinenumber;
       source.m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_rep_id = IdAssigner.preprocessUUID(p_m_rep_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_pep_id = IdAssigner.preprocessUUID(p_m_pep_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_target_value_id = IdAssigner.preprocessUUID(p_m_target_value_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    MessageValue_c new_inst = new MessageValue_c(modelRoot,
p_m_value_id,
p_m_pep_id,
p_m_rep_id,
p_m_parmlistok,
p_m_ownernamelinenumber,
p_m_ownernamecolumn,
p_m_target_value_id
);
    return new_inst;
  }
  public MessageValue_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_value_id = IdAssigner.NULL_UUID;   
     m_rep_id = IdAssigner.NULL_UUID;   
     m_pep_id = IdAssigner.NULL_UUID;   
     m_target_value_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_value_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_value_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_value_id !=  p_newKey ){
	
		m_value_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof MessageValue_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof MessageValue_c)) {
           return false;
       }
       
       MessageValue_c me = (MessageValue_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID.equals(((MessageValue_c)elem).getValue_id())) && this != elem)) {
      	return false;
      }
      if (!getValue_id().equals(((MessageValue_c)elem).getValue_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof MessageValue_c)) {
           return false;
       }
       
       MessageValue_c me = (MessageValue_c)elem;
      if (!getValue_idCachedValue().equals(((MessageValue_c)elem).getValue_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_value_id ;
  private boolean      m_parmlistok ;
  private int          m_ownernamelinenumber ;
  private int          m_ownernamecolumn ;
  private java.util.UUID         m_rep_id ;
  private java.util.UUID         m_pep_id ;
  private java.util.UUID         m_target_value_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Value_c IsSupertypeValue ;
public void relateAcrossR801To(Value_c target)
{
	relateAcrossR801To(target, true);
}
public void relateAcrossR801To(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeValue) return;  // already related

    if ( IsSupertypeValue != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeValue != null) {
    
        IsSupertypeValue.clearBackPointerR801To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"MessageValue_c.relateAcrossR801To(Value_c target)", 
			"Relate performed across R801 from Message Value to Value without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeValue = target ;
        m_value_id = target.getValue_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR801To(this);
        target.addRef();
    }
}
public void unrelateAcrossR801From(Value_c target)
{
	unrelateAcrossR801From(target, true);
}
public void unrelateAcrossR801From(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeValue == null) return;  // already unrelated
	
	if (target != IsSupertypeValue) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R801", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR801To(this);
    }
    

      if(IsSupertypeValue != null) {
      
        m_value_id = IsSupertypeValue.getValue_id();
        IsSupertypeValue = null ;
        target.removeRef();
    }
}

  
    
      
public static MessageValue_c getOneV_MSVOnR801(Value_c [] targets)
{
    return getOneV_MSVOnR801(targets, null);
}

public static MessageValue_c getOneV_MSVOnR801(Value_c [] targets, ClassQueryInterface_c test)
{
    MessageValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_MSVOnR801(targets[i], test);
        }
    }

    return ret_val;
}

public static MessageValue_c getOneV_MSVOnR801(Value_c target)
{
  return getOneV_MSVOnR801(target, null);
}

public static MessageValue_c getOneV_MSVOnR801(Value_c target, boolean loadComponent)
{
    return getOneV_MSVOnR801(target.getModelRoot(), target, null, loadComponent);
}

public static MessageValue_c getOneV_MSVOnR801(Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_MSVOnR801(target.getModelRoot(), target, test);
  }
  return null;
}

public static MessageValue_c getOneV_MSVOnR801(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
	return getOneV_MSVOnR801(modelRoot, target, test, true);
}

public static MessageValue_c getOneV_MSVOnR801(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_MSVOnR801(modelRoot,target,test);
}
private static MessageValue_c find_getOneV_MSVOnR801(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    MessageValue_c source = (MessageValue_c)target.backPointer_IsSubtypeMessageValueIsSubtype_R801;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static MessageValue_c [] getManyV_MSVsOnR801(Value_c [] targets)
{
  return getManyV_MSVsOnR801(targets, null);
}
public static MessageValue_c [] getManyV_MSVsOnR801(Value_c [] targets, boolean loadComponent)
{
  return getManyV_MSVsOnR801(targets, null, loadComponent);
}
public static MessageValue_c [] getManyV_MSVsOnR801(Value_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR801(targets, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR801(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new MessageValue_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      MessageValue_c source = (MessageValue_c)targets[i].backPointer_IsSubtypeMessageValueIsSubtype_R801;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new MessageValue_c[0];
  }
  }

public static MessageValue_c [] getManyV_MSVsOnR801(Value_c target)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyV_MSVsOnR801(targetArray);
  } else {
    MessageValue_c [] result = new MessageValue_c [0] ;
  return result ;
}
}

public static MessageValue_c [] getManyV_MSVsOnR801(Value_c target, boolean loadComponent)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyV_MSVsOnR801(targetArray, loadComponent);
  } else {
    MessageValue_c [] result = new MessageValue_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Value_c HasTargetValue ;
public void relateAcrossR851To(Value_c target)
{
	relateAcrossR851To(target, true);
}
public void relateAcrossR851To(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasTargetValue) return;  // already related

    if ( HasTargetValue != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasTargetValue != null) {
    
        HasTargetValue.clearBackPointerR851To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"MessageValue_c.relateAcrossR851To(Value_c target)", 
			"Relate performed across R851 from Message Value to Value without unrelate of prior instance.");  
		}
    }
                
    	HasTargetValue = target ;
        m_target_value_id = target.getValue_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR851To(this);
        target.addRef();
    }
}
public void unrelateAcrossR851From(Value_c target)
{
	unrelateAcrossR851From(target, true);
}
public void unrelateAcrossR851From(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasTargetValue == null) return;  // already unrelated
	
	if (target != HasTargetValue) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R851", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR851To(this);
    }
    

      if(HasTargetValue != null) {
      
        m_target_value_id = HasTargetValue.getValue_id();
        HasTargetValue = null ;
        target.removeRef();
    }
}

  
    
      
public static MessageValue_c getOneV_MSVOnR851(Value_c [] targets)
{
    return getOneV_MSVOnR851(targets, null);
}

public static MessageValue_c getOneV_MSVOnR851(Value_c [] targets, ClassQueryInterface_c test)
{
    MessageValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_MSVOnR851(targets[i], test);
        }
    }

    return ret_val;
}

public static MessageValue_c getOneV_MSVOnR851(Value_c target)
{
  return getOneV_MSVOnR851(target, null);
}

public static MessageValue_c getOneV_MSVOnR851(Value_c target, boolean loadComponent)
{
    return getOneV_MSVOnR851(target.getModelRoot(), target, null, loadComponent);
}

public static MessageValue_c getOneV_MSVOnR851(Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_MSVOnR851(target.getModelRoot(), target, test);
  }
  return null;
}

public static MessageValue_c getOneV_MSVOnR851(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
	return getOneV_MSVOnR851(modelRoot, target, test, true);
}

public static MessageValue_c getOneV_MSVOnR851(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_MSVOnR851(modelRoot,target,test);
}
private static MessageValue_c find_getOneV_MSVOnR851(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTargetOfMessageValueIsTargetOf_R851) {
	    for ( int i = 0; i < target.backPointer_IsTargetOfMessageValueIsTargetOf_R851.size(); ++i ) {
	      MessageValue_c source = (MessageValue_c)target.backPointer_IsTargetOfMessageValueIsTargetOf_R851.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static MessageValue_c [] getManyV_MSVsOnR851(Value_c [] targets)
{
  return getManyV_MSVsOnR851(targets, null);
}
public static MessageValue_c [] getManyV_MSVsOnR851(Value_c [] targets, boolean loadComponent)
{
  return getManyV_MSVsOnR851(targets, null, loadComponent);
}
public static MessageValue_c [] getManyV_MSVsOnR851(Value_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR851(targets, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR851(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new MessageValue_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTargetOfMessageValueIsTargetOf_R851) {
	    for (int j = 0; j < targets[i].backPointer_IsTargetOfMessageValueIsTargetOf_R851.size(); ++j) {
	      MessageValue_c source = (MessageValue_c)targets[i].backPointer_IsTargetOfMessageValueIsTargetOf_R851.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new MessageValue_c[0];
  }
  }

public static MessageValue_c [] getManyV_MSVsOnR851(Value_c target)
{
  return getManyV_MSVsOnR851(target, null);
}

public static MessageValue_c [] getManyV_MSVsOnR851(Value_c target, boolean loadComponent)
{
  return getManyV_MSVsOnR851(target, null, loadComponent);
}

public static MessageValue_c [] getManyV_MSVsOnR851(Value_c target, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR851(target, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR851(Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new MessageValue_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTargetOfMessageValueIsTargetOf_R851) {
    for (int i = 0; i < target.backPointer_IsTargetOfMessageValueIsTargetOf_R851.size(); ++i) {
      MessageValue_c source = (MessageValue_c)target.backPointer_IsTargetOfMessageValueIsTargetOf_R851.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new MessageValue_c[0];
	}
  }


  
    
// referring navigation

ProvidedExecutableProperty_c ProvidedExecutableProperty ;
public void relateAcrossR841To(ProvidedExecutableProperty_c target)
{
	relateAcrossR841To(target, true);
}
public void relateAcrossR841To(ProvidedExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ProvidedExecutableProperty) return;  // already related

    if ( ProvidedExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (ProvidedExecutableProperty != null) {
    
        ProvidedExecutableProperty.clearBackPointerR841To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"MessageValue_c.relateAcrossR841To(ProvidedExecutableProperty_c target)", 
			"Relate performed across R841 from Message Value to Provided Executable Property without unrelate of prior instance.");  
		}
    }
                
    	ProvidedExecutableProperty = target ;
        m_pep_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR841To(this);
        target.addRef();
    }
}
public void unrelateAcrossR841From(ProvidedExecutableProperty_c target)
{
	unrelateAcrossR841From(target, true);
}
public void unrelateAcrossR841From(ProvidedExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ProvidedExecutableProperty == null) return;  // already unrelated
	
	if (target != ProvidedExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R841", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR841To(this);
    }
    

      if(ProvidedExecutableProperty != null) {
      
        m_pep_id = ProvidedExecutableProperty.getId();
        ProvidedExecutableProperty = null ;
        target.removeRef();
    }
}

  
    
      
public static MessageValue_c getOneV_MSVOnR841(ProvidedExecutableProperty_c [] targets)
{
    return getOneV_MSVOnR841(targets, null);
}

public static MessageValue_c getOneV_MSVOnR841(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    MessageValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_MSVOnR841(targets[i], test);
        }
    }

    return ret_val;
}

public static MessageValue_c getOneV_MSVOnR841(ProvidedExecutableProperty_c target)
{
  return getOneV_MSVOnR841(target, null);
}

public static MessageValue_c getOneV_MSVOnR841(ProvidedExecutableProperty_c target, boolean loadComponent)
{
    return getOneV_MSVOnR841(target.getModelRoot(), target, null, loadComponent);
}

public static MessageValue_c getOneV_MSVOnR841(ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_MSVOnR841(target.getModelRoot(), target, test);
  }
  return null;
}

public static MessageValue_c getOneV_MSVOnR841(ModelRoot modelRoot, ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneV_MSVOnR841(modelRoot, target, test, true);
}

public static MessageValue_c getOneV_MSVOnR841(ModelRoot modelRoot, ProvidedExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_MSVOnR841(modelRoot,target,test);
}
private static MessageValue_c find_getOneV_MSVOnR841(ModelRoot modelRoot, ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_MessageValue_R841) {
	    for ( int i = 0; i < target.backPointer_MessageValue_R841.size(); ++i ) {
	      MessageValue_c source = (MessageValue_c)target.backPointer_MessageValue_R841.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c [] targets)
{
  return getManyV_MSVsOnR841(targets, null);
}
public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManyV_MSVsOnR841(targets, null, loadComponent);
}
public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR841(targets, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new MessageValue_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_MessageValue_R841) {
	    for (int j = 0; j < targets[i].backPointer_MessageValue_R841.size(); ++j) {
	      MessageValue_c source = (MessageValue_c)targets[i].backPointer_MessageValue_R841.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new MessageValue_c[0];
  }
  }

public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c target)
{
  return getManyV_MSVsOnR841(target, null);
}

public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c target, boolean loadComponent)
{
  return getManyV_MSVsOnR841(target, null, loadComponent);
}

public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR841(target, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR841(ProvidedExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new MessageValue_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_MessageValue_R841) {
    for (int i = 0; i < target.backPointer_MessageValue_R841.size(); ++i) {
      MessageValue_c source = (MessageValue_c)target.backPointer_MessageValue_R841.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new MessageValue_c[0];
	}
  }


  
    
// referring navigation

RequiredExecutableProperty_c RequiredExecutableProperty ;
public void relateAcrossR845To(RequiredExecutableProperty_c target)
{
	relateAcrossR845To(target, true);
}
public void relateAcrossR845To(RequiredExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == RequiredExecutableProperty) return;  // already related

    if ( RequiredExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (RequiredExecutableProperty != null) {
    
        RequiredExecutableProperty.clearBackPointerR845To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"MessageValue_c.relateAcrossR845To(RequiredExecutableProperty_c target)", 
			"Relate performed across R845 from Message Value to Required Executable Property without unrelate of prior instance.");  
		}
    }
                
    	RequiredExecutableProperty = target ;
        m_rep_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR845To(this);
        target.addRef();
    }
}
public void unrelateAcrossR845From(RequiredExecutableProperty_c target)
{
	unrelateAcrossR845From(target, true);
}
public void unrelateAcrossR845From(RequiredExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (RequiredExecutableProperty == null) return;  // already unrelated
	
	if (target != RequiredExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R845", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR845To(this);
    }
    

      if(RequiredExecutableProperty != null) {
      
        m_rep_id = RequiredExecutableProperty.getId();
        RequiredExecutableProperty = null ;
        target.removeRef();
    }
}

  
    
      
public static MessageValue_c getOneV_MSVOnR845(RequiredExecutableProperty_c [] targets)
{
    return getOneV_MSVOnR845(targets, null);
}

public static MessageValue_c getOneV_MSVOnR845(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    MessageValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_MSVOnR845(targets[i], test);
        }
    }

    return ret_val;
}

public static MessageValue_c getOneV_MSVOnR845(RequiredExecutableProperty_c target)
{
  return getOneV_MSVOnR845(target, null);
}

public static MessageValue_c getOneV_MSVOnR845(RequiredExecutableProperty_c target, boolean loadComponent)
{
    return getOneV_MSVOnR845(target.getModelRoot(), target, null, loadComponent);
}

public static MessageValue_c getOneV_MSVOnR845(RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_MSVOnR845(target.getModelRoot(), target, test);
  }
  return null;
}

public static MessageValue_c getOneV_MSVOnR845(ModelRoot modelRoot, RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneV_MSVOnR845(modelRoot, target, test, true);
}

public static MessageValue_c getOneV_MSVOnR845(ModelRoot modelRoot, RequiredExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_MSVOnR845(modelRoot,target,test);
}
private static MessageValue_c find_getOneV_MSVOnR845(ModelRoot modelRoot, RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_MessageValue_R845) {
	    for ( int i = 0; i < target.backPointer_MessageValue_R845.size(); ++i ) {
	      MessageValue_c source = (MessageValue_c)target.backPointer_MessageValue_R845.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c [] targets)
{
  return getManyV_MSVsOnR845(targets, null);
}
public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManyV_MSVsOnR845(targets, null, loadComponent);
}
public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR845(targets, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new MessageValue_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_MessageValue_R845) {
	    for (int j = 0; j < targets[i].backPointer_MessageValue_R845.size(); ++j) {
	      MessageValue_c source = (MessageValue_c)targets[i].backPointer_MessageValue_R845.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new MessageValue_c[0];
  }
  }

public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c target)
{
  return getManyV_MSVsOnR845(target, null);
}

public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c target, boolean loadComponent)
{
  return getManyV_MSVsOnR845(target, null, loadComponent);
}

public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR845(target, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR845(RequiredExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new MessageValue_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_MessageValue_R845) {
    for (int i = 0; i < target.backPointer_MessageValue_R845.size(); ++i) {
      MessageValue_c source = (MessageValue_c)target.backPointer_MessageValue_R845.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new MessageValue_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ActualParameter_c> backPointer_HasActualParameterHas_R842 = new ArrayList<ActualParameter_c>();

public void setActualParameterOrderInChildListR842(ActualParameter_c target, int index) {
	unrelateAcrossR842From(target);
	ActualParameter_c[] elements = ActualParameter_c.getManyV_PARsOnR842(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR842From((ActualParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR842To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR842To((ActualParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR842To(ActualParameter_c target)
{
  if (target != null) {
    target.relateAcrossR842To(this, true) ;
  }
}

public void relateAcrossR842To(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR842To(this, notifyChanges) ;
  }
}

public void setBackPointerR842To(ActualParameter_c target)
{
  	synchronized (backPointer_HasActualParameterHas_R842) {
		backPointer_HasActualParameterHas_R842.add(target);
	}
}

public void unrelateAcrossR842From(ActualParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR842From(this, true) ;
  }
}

public void unrelateAcrossR842From(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR842From(this, notifyChanges) ;
  }
}

public void clearBackPointerR842To(ActualParameter_c target)
{
  synchronized (backPointer_HasActualParameterHas_R842) {
	    backPointer_HasActualParameterHas_R842.remove(target);
	}
}

public static MessageValue_c getOneV_MSVOnR842(ActualParameter_c [] targets)
{
    return getOneV_MSVOnR842(targets, null);
}

public static MessageValue_c getOneV_MSVOnR842(ActualParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_MSVOnR842(targets, test, true);
}

public static MessageValue_c getOneV_MSVOnR842(ActualParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    MessageValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             MessageValue_c candidate_val = getOneV_MSVOnR842(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_MSVOnR842(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static MessageValue_c getOneV_MSVOnR842(ActualParameter_c target)
{
	return getOneV_MSVOnR842(target, true);
}
public static MessageValue_c getOneV_MSVOnR842(ActualParameter_c target, boolean loadComponent)
{
  if (target != null) {
    return target.MessageValue ;
  } else {
    return null;
  }
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_MSVsOnR842(targets, test, true);
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new MessageValue_c[0];
  
  
  LinkedHashSet<MessageValue_c> elementsSet = new LinkedHashSet<MessageValue_c>();
  for (int i = 0; i < targets.length; i++) {
    MessageValue_c associate = targets[i].MessageValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  MessageValue_c[] result = new MessageValue_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c [] targets)
{
  return getManyV_MSVsOnR842(targets, null);
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActualParameter_c [] targetArray = new ActualParameter_c[1];
    targetArray[0] = target;
    return getManyV_MSVsOnR842(targetArray, test, loadComponent);
  } else {
    MessageValue_c [] result = new MessageValue_c [0] ;
    return result ;
  }
  
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyV_MSVsOnR842(target, null, true);
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c target)
{
    return getManyV_MSVsOnR842(target, null, true);
}

public static MessageValue_c [] getManyV_MSVsOnR842(ActualParameter_c target, boolean loadComponent)
{
    return getManyV_MSVsOnR842(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R801
      Value_c relInst38088 = (Value_c) baseRoot.getInstanceList(Value_c.class).get(new Object[] {m_value_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38088 == null) {
      			relInst38088 = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).get(new Object[] {m_value_id});
      		}
			if (relInst38088 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38088 = (Value_c) roots[i].getInstanceList(Value_c.class).get(new Object[] {m_value_id});
					if (relInst38088 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38088 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38088) && !isProxy())) {
	      relInst38088.relateAcrossR801To(this, notifyChanges);
	  }
	  }
	          

	if (HasTargetValue == null) {          
      // R851
      Value_c relInst38089 = (Value_c) baseRoot.getInstanceList(Value_c.class).get(new Object[] {m_target_value_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38089 == null) {
      			relInst38089 = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).get(new Object[] {m_target_value_id});
      		}
			if (relInst38089 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38089 = (Value_c) roots[i].getInstanceList(Value_c.class).get(new Object[] {m_target_value_id});
					if (relInst38089 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38089 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38089) && !isProxy())) {
	      relInst38089.relateAcrossR851To(this, notifyChanges);
	  }
	  }
	}
	          

	if (ProvidedExecutableProperty == null) {          
      // R841
      ProvidedExecutableProperty_c relInst38090 = (ProvidedExecutableProperty_c) baseRoot.getInstanceList(ProvidedExecutableProperty_c.class).get(new Object[] {m_pep_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38090 == null) {
      			relInst38090 = (ProvidedExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ProvidedExecutableProperty_c.class).get(new Object[] {m_pep_id});
      		}
			if (relInst38090 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38090 = (ProvidedExecutableProperty_c) roots[i].getInstanceList(ProvidedExecutableProperty_c.class).get(new Object[] {m_pep_id});
					if (relInst38090 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38090 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38090) && !isProxy())) {
	      relInst38090.relateAcrossR841To(this, notifyChanges);
	  }
	  }
	}
	          

	if (RequiredExecutableProperty == null) {          
      // R845
      RequiredExecutableProperty_c relInst38091 = (RequiredExecutableProperty_c) baseRoot.getInstanceList(RequiredExecutableProperty_c.class).get(new Object[] {m_rep_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38091 == null) {
      			relInst38091 = (RequiredExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(RequiredExecutableProperty_c.class).get(new Object[] {m_rep_id});
      		}
			if (relInst38091 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38091 = (RequiredExecutableProperty_c) roots[i].getInstanceList(RequiredExecutableProperty_c.class).get(new Object[] {m_rep_id});
					if (relInst38091 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38091 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38091) && !isProxy())) {
	      relInst38091.relateAcrossR845To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R801
      // V_VAL
		  inst=IsSupertypeValue;
			unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R851
      // V_VAL
		  inst=HasTargetValue;
			unrelateAcrossR851From(HasTargetValue, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R841
      // SPR_PEP
		  inst=ProvidedExecutableProperty;
			unrelateAcrossR841From(ProvidedExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R845
      // SPR_REP
		  inst=RequiredExecutableProperty;
			unrelateAcrossR845From(RequiredExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final MessageValue_c inst = (MessageValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static MessageValue_c MessageValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		MessageValue_c result=findMessageValueInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static MessageValue_c findMessageValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				MessageValue_c x = (MessageValue_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static MessageValue_c MessageValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return MessageValueInstance(modelRoot,test,true);
  }
  
  public static MessageValue_c MessageValueInstance(ModelRoot modelRoot)
  {
	 return MessageValueInstance(modelRoot,null,true);
  }

  public static MessageValue_c [] MessageValueInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(MessageValue_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					MessageValue_c x = (MessageValue_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				MessageValue_c[] ret_set = new MessageValue_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new MessageValue_c[0];
			}		
		} 
  }
  public static MessageValue_c [] MessageValueInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  MessageValueInstances(modelRoot,test,true);
  }
  public static MessageValue_c [] MessageValueInstances(ModelRoot modelRoot)
  {
	return MessageValueInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Message Value.dispose call: ";
	Value_c testR801Inst21 = Value_c.getOneV_VALOnR801(this, false);

	if ( testR801Inst21 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "801 ";
	}
	Value_c testR851Inst = Value_c.getOneV_VALOnR851(this, false);

	if ( testR851Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "851 ";
	}
	ActualParameter_c testR842Inst = ActualParameter_c.getOneV_PAROnR842(this, false);

	if ( testR842Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "842 ";	
	}
	ProvidedExecutableProperty_c testR841Inst = ProvidedExecutableProperty_c.getOneSPR_PEPOnR841(this, false);

	if ( testR841Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "841 ";
	}
	RequiredExecutableProperty_c testR845Inst = RequiredExecutableProperty_c.getOneSPR_REPOnR845(this, false);

	if ( testR845Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "845 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Message Value", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("value_id")){
         return true;
      }
      if(attributeName.equals("rep_id")){
         return true;
      }
      if(attributeName.equals("pep_id")){
         return true;
      }
      if(attributeName.equals("target_value_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getValue_idLongBased()
  {
    if ( IsSupertypeValue != null )
    {
      return IsSupertypeValue.getValue_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getValue_id()
  {
    if ( IsSupertypeValue != null )
    {
      return IsSupertypeValue.getValue_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeValue != null );
 
 }                  

  public java.util.UUID getValue_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_value_id) )
      return m_value_id;
    else
      return getValue_id();
  }
  
  public void setValue_id(java.util.UUID newValue)
  {
   m_value_id = IdAssigner.preprocessUUID(newValue);
  }
  public boolean getParmlistok()
  {
    return m_parmlistok ;
  }


  public void setParmlistok(boolean newValue)
  {
   m_parmlistok = newValue ;
  }
  public int getOwnernamelinenumber()
  {
    return m_ownernamelinenumber ;
  }


  public void setOwnernamelinenumber(int newValue)
  {
   m_ownernamelinenumber = newValue ;
  }
  public int getOwnernamecolumn()
  {
    return m_ownernamecolumn ;
  }


  public void setOwnernamecolumn(int newValue)
  {
   m_ownernamecolumn = newValue ;
  }
  public long getRep_idLongBased()
  {
    if ( RequiredExecutableProperty != null )
    {
      return RequiredExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRep_id()
  {
    if ( RequiredExecutableProperty != null )
    {
      return RequiredExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRep_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_rep_id) )
      return m_rep_id;
    else
      return getRep_id();
  }
  
  public void setRep_id(java.util.UUID newValue)
  {
   m_rep_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getPep_idLongBased()
  {
    if ( ProvidedExecutableProperty != null )
    {
      return ProvidedExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPep_id()
  {
    if ( ProvidedExecutableProperty != null )
    {
      return ProvidedExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPep_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_pep_id) )
      return m_pep_id;
    else
      return getPep_id();
  }
  
  public void setPep_id(java.util.UUID newValue)
  {
   m_pep_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getTarget_value_idLongBased()
  {
    if ( HasTargetValue != null )
    {
      return HasTargetValue.getValue_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTarget_value_id()
  {
    if ( HasTargetValue != null )
    {
      return HasTargetValue.getValue_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getTarget_value_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_target_value_id) )
      return m_target_value_id;
    else
      return getTarget_value_id();
  }
  
  public void setTarget_value_id(java.util.UUID newValue)
  {
   m_target_value_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Message Value", //$NON-NLS-1$
	  " Operation entered: Message Value::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     MessageValue_c [] objs = MessageValue_c.MessageValueInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Message Value", //$NON-NLS-1$
	  " Operation entered: Message Value::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class MessageValue_c_test38093_c implements ClassQueryInterface_c
    {
	  MessageValue_c_test38093_c( java.util.UUID            p38094 ) {
	  m_p38094 = p38094;
	  }
	  private java.util.UUID             m_p38094; 
	  public boolean evaluate (Object candidate)
	  {
	      MessageValue_c selected = (MessageValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p38094));
	      return retval;
	  }
    }

    MessageValue_c [] objs38092 = 
    MessageValue_c.MessageValueInstances(modelRoot, new MessageValue_c_test38093_c(getValue_id())) ;

    if ( (  (objs38092.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Message Value", //$NON-NLS-1$
           "Consistency: Object: Message Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38092.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Message Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38092.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38092.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Message Value", //$NON-NLS-1$
           "Consistency: Object: Message Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38092.length )  + " Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Message Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38092.length )  + " Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Message Value is a subtype in association: rel.Numb = 801
          // The supertype class is: Value
    class Value_c_test38098_c implements ClassQueryInterface_c
    {
	  Value_c_test38098_c( java.util.UUID            p38099 ) {
	  m_p38099 = p38099;
	  }
	  private java.util.UUID             m_p38099; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p38099));
	      return retval;
	  }
    }

    Value_c [] objs38097 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test38098_c(getValue_id())) ;

    if ( (  (objs38097.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Message Value", //$NON-NLS-1$
           "Consistency: Object: Message Value: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38097.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Message Value: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38097.length )  , e); 
      }
      retval = false;

    }

          // Message Value is a referring class in association: rel.Numb = 845
          // The participating class is: Required Executable Property
    class RequiredExecutableProperty_c_test38101_c implements ClassQueryInterface_c
    {
	  RequiredExecutableProperty_c_test38101_c( java.util.UUID            p38102 ) {
	  m_p38102 = p38102;
	  }
	  private java.util.UUID             m_p38102; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredExecutableProperty_c selected = (RequiredExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p38102));
	      return retval;
	  }
    }

    RequiredExecutableProperty_c [] objs38100 = 
    RequiredExecutableProperty_c.RequiredExecutablePropertyInstances(modelRoot, new RequiredExecutableProperty_c_test38101_c(getRep_id())) ;

    if ( (  (objs38100.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Message Value", //$NON-NLS-1$
           "Consistency: Object: Message Value: Association: 845: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38100.length )  + " REP_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Message Value: Association: 845: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38100.length )  + " REP_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Message Value is a referring class in association: rel.Numb = 841
          // The participating class is: Provided Executable Property
    class ProvidedExecutableProperty_c_test38104_c implements ClassQueryInterface_c
    {
	  ProvidedExecutableProperty_c_test38104_c( java.util.UUID            p38105 ) {
	  m_p38105 = p38105;
	  }
	  private java.util.UUID             m_p38105; 
	  public boolean evaluate (Object candidate)
	  {
	      ProvidedExecutableProperty_c selected = (ProvidedExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p38105));
	      return retval;
	  }
    }

    ProvidedExecutableProperty_c [] objs38103 = 
    ProvidedExecutableProperty_c.ProvidedExecutablePropertyInstances(modelRoot, new ProvidedExecutableProperty_c_test38104_c(getPep_id())) ;

    if ( (  (objs38103.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Message Value", //$NON-NLS-1$
           "Consistency: Object: Message Value: Association: 841: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38103.length )  + " PEP_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Message Value: Association: 841: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38103.length )  + " PEP_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Message Value is a referring class in association: rel.Numb = 851
          // The participating class is: Value
    class Value_c_test38107_c implements ClassQueryInterface_c
    {
	  Value_c_test38107_c( java.util.UUID            p38108 ) {
	  m_p38108 = p38108;
	  }
	  private java.util.UUID             m_p38108; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p38108));
	      return retval;
	  }
    }

    Value_c [] objs38106 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test38107_c(getTarget_value_id())) ;

    if ( (  (objs38106.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Message Value", //$NON-NLS-1$
           "Consistency: Object: Message Value: Association: 851: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38106.length )  + " Target_Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Message Value: Association: 851: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38106.length )  + " Target_Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Message Value is a participating class in association: rel.Numb = 842
             // Object: Actual Parameter
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Message Value", " Operation entered: MessageValue::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ProvidedExecutableProperty_c v_proExProp = ProvidedExecutableProperty_c.getOneSPR_PEPOnR841(this);


if (   (v_proExProp != null) )
{

this.unrelateAcrossR841From(v_proExProp);



}

RequiredExecutableProperty_c v_reqExProp = RequiredExecutableProperty_c.getOneSPR_REPOnR845(this);


if ( (  (v_reqExProp != null)) )
{

this.unrelateAcrossR845From(v_reqExProp);



}

ActualParameter_c [] v_parm_set = ActualParameter_c.getManyV_PARsOnR842(this);


ActualParameter_c  v_parm = null;
for ( int i37047 = 0; i37047 < v_parm_set.length; i37047++)
{
  v_parm = v_parm_set[i37047] ;

this.unrelateAcrossR842From(v_parm);


if (v_parm != null) {
v_parm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Value_c v_targetVal = Value_c.getOneV_VALOnR851(this);


if (   (v_targetVal != null) )
{

this.unrelateAcrossR851From(v_targetVal);


if (v_targetVal != null) {
v_targetVal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

delete() ;



   } // End dispose
  public  void Getvalue(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Message Value", " Operation entered: MessageValue::Getvalue") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End getValue
  public  boolean      Setupparametervalues(final java.util.UUID         p_Channel_id,final java.util.UUID         p_Ee_id,final boolean      p_Executeremotely,final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Message Value", " Operation entered: MessageValue::Setupparametervalues") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End setupParameterValues

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Message Value
