package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassStateMachine_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLASS_STATE_MACHINE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClassStateMachine_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClassStateMachine_c(ModelRoot modelRoot, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_obj_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_sm_id};
		addInstanceToMap(key);
	}
	static public ClassStateMachine_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_obj_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);
		ClassStateMachine_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id};
			new_inst = (ClassStateMachine_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClassStateMachine_c(modelRoot, p_m_sm_id, p_m_obj_id);
			new_inst.m_contentPath = contentPath;
			new_inst.setComponent(null);
		}
		return new_inst;
	}

	static public ClassStateMachine_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_obj_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);
		ClassStateMachine_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id};
			source = (ClassStateMachine_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		ClassStateMachine_c new_inst = new ClassStateMachine_c(modelRoot,
				p_m_sm_id, p_m_obj_id);
		return new_inst;
	}
	public ClassStateMachine_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_sm_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_sm_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_sm_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_sm_id != p_newKey) {

			m_sm_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClassStateMachine_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClassStateMachine_c)) {
			return false;
		}

		ClassStateMachine_c me = (ClassStateMachine_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((ClassStateMachine_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((ClassStateMachine_c) elem).getSm_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClassStateMachine_c)) {
			return false;
		}

		ClassStateMachine_c me = (ClassStateMachine_c) elem;
		if (!getSm_idCachedValue().equals(
				((ClassStateMachine_c) elem).getSm_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_sm_id;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	ModelClass_c ModelClass;
	public void relateAcrossR519To(ModelClass_c target) {
		relateAcrossR519To(target, true);
	}
	public void relateAcrossR519To(ModelClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ModelClass)
			return; // already related

		if (ModelClass != target) {

			Object oldKey = getInstanceKey();

			if (ModelClass != null) {
				UmlProblem.removeXtUMLProblem(this, ModelClass);

				ModelClass.clearBackPointerR519To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassStateMachine_c.relateAcrossR519To(ModelClass_c target)",
									"Relate performed across R519 from Class State Machine to Model Class without unrelate of prior instance.");
				}
			}

			ModelClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR519To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "519", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR519From(ModelClass_c target) {
		unrelateAcrossR519From(target, true);
	}
	public void unrelateAcrossR519From(ModelClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ModelClass == null)
			return; // already unrelated

		if (target != ModelClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R519",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR519To(this);
		}

		if (ModelClass != null) {

			m_obj_id = ModelClass.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = ModelClass.getObj_idCachedValue();
			}
			ModelClass = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "519", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(ModelClass_c[] targets) {
		return getOneSM_ASMOnR519(targets, null);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		ClassStateMachine_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_ASMOnR519(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(ModelClass_c target) {
		return getOneSM_ASMOnR519(target, null);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(ModelClass_c target,
			boolean loadComponent) {
		return getOneSM_ASMOnR519(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(ModelClass_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_ASMOnR519(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test) {
		return getOneSM_ASMOnR519(modelRoot, target, test, true);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR519(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassStateMachine_c result = null;

		result = find_getOneSM_ASMOnR519(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// Containment Relation
			List comps = PersistenceManager.findAllChildComponents(
					target.getPersistableComponent(), modelRoot,
					ClassStateMachine_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneSM_ASMOnR519(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ClassStateMachine_c find_getOneSM_ASMOnR519(
			ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ClassStateMachine_c source = (ClassStateMachine_c) target.backPointer_ClassStateMachine_R519;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR519(
			ModelClass_c[] targets) {
		return getManySM_ASMsOnR519(targets, null);
	}
	public static ClassStateMachine_c[] getManySM_ASMsOnR519(
			ModelClass_c[] targets, boolean loadComponent) {
		return getManySM_ASMsOnR519(targets, null, loadComponent);
	}
	public static ClassStateMachine_c[] getManySM_ASMsOnR519(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		return getManySM_ASMsOnR519(targets, test, true);
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR519(
			ModelClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassStateMachine_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistableModelComponent[] pmcs = new PersistableModelComponent[targets.length];
			for (int i = 0; i < targets.length; i++) {
				pmcs[i] = targets[i].getPersistableComponent();
			}
			PersistenceManager.ensureAllChildInstancesLoaded(pmcs, modelRoot,
					ClassStateMachine_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassStateMachine_c source = (ClassStateMachine_c) targets[i].backPointer_ClassStateMachine_R519;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassStateMachine_c[] ret_set = new ClassStateMachine_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassStateMachine_c[0];
		}
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR519(ModelClass_c target) {
		if (target != null) {
			ModelClass_c[] targetArray = new ModelClass_c[1];
			targetArray[0] = target;
			return getManySM_ASMsOnR519(targetArray);
		} else {
			ClassStateMachine_c[] result = new ClassStateMachine_c[0];
			return result;
		}
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR519(
			ModelClass_c target, boolean loadComponent) {
		if (target != null) {
			ModelClass_c[] targetArray = new ModelClass_c[1];
			targetArray[0] = target;
			return getManySM_ASMsOnR519(targetArray, loadComponent);
		} else {
			ClassStateMachine_c[] result = new ClassStateMachine_c[0];
			return result;
		}
	}

	// referring navigation

	StateMachine_c IsSupertypeStateMachine;
	public void relateAcrossR517To(StateMachine_c target) {
		relateAcrossR517To(target, true);
	}
	public void relateAcrossR517To(StateMachine_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStateMachine)
			return; // already related

		if (IsSupertypeStateMachine != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStateMachine != null) {

				IsSupertypeStateMachine.clearBackPointerR517To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassStateMachine_c.relateAcrossR517To(StateMachine_c target)",
									"Relate performed across R517 from Class State Machine to State Machine without unrelate of prior instance.");
				}
			}

			IsSupertypeStateMachine = target;
			m_sm_id = target.getSm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR517To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "517", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR517From(StateMachine_c target) {
		unrelateAcrossR517From(target, true);
	}
	public void unrelateAcrossR517From(StateMachine_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStateMachine == null)
			return; // already unrelated

		if (target != IsSupertypeStateMachine) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R517",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR517To(this);
		}

		if (IsSupertypeStateMachine != null) {

			m_sm_id = IsSupertypeStateMachine.getSm_id();
			IsSupertypeStateMachine = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "517", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(
			StateMachine_c[] targets) {
		return getOneSM_ASMOnR517(targets, null);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(
			StateMachine_c[] targets, ClassQueryInterface_c test) {
		ClassStateMachine_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_ASMOnR517(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(StateMachine_c target) {
		return getOneSM_ASMOnR517(target, null);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(StateMachine_c target,
			boolean loadComponent) {
		return getOneSM_ASMOnR517(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(StateMachine_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_ASMOnR517(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test) {
		return getOneSM_ASMOnR517(modelRoot, target, test, true);
	}

	public static ClassStateMachine_c getOneSM_ASMOnR517(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_ASMOnR517(modelRoot, target, test);
	}
	private static ClassStateMachine_c find_getOneSM_ASMOnR517(
			ModelRoot modelRoot, StateMachine_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ClassStateMachine_c source = (ClassStateMachine_c) target.backPointer_IsSubtypeClassStateMachineIsSubtype_R517;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR517(
			StateMachine_c[] targets) {
		return getManySM_ASMsOnR517(targets, null);
	}
	public static ClassStateMachine_c[] getManySM_ASMsOnR517(
			StateMachine_c[] targets, boolean loadComponent) {
		return getManySM_ASMsOnR517(targets, null, loadComponent);
	}
	public static ClassStateMachine_c[] getManySM_ASMsOnR517(
			StateMachine_c[] targets, ClassQueryInterface_c test) {
		return getManySM_ASMsOnR517(targets, test, true);
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR517(
			StateMachine_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassStateMachine_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassStateMachine_c source = (ClassStateMachine_c) targets[i].backPointer_IsSubtypeClassStateMachineIsSubtype_R517;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassStateMachine_c[] ret_set = new ClassStateMachine_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassStateMachine_c[0];
		}
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR517(
			StateMachine_c target) {
		if (target != null) {
			StateMachine_c[] targetArray = new StateMachine_c[1];
			targetArray[0] = target;
			return getManySM_ASMsOnR517(targetArray);
		} else {
			ClassStateMachine_c[] result = new ClassStateMachine_c[0];
			return result;
		}
	}

	public static ClassStateMachine_c[] getManySM_ASMsOnR517(
			StateMachine_c target, boolean loadComponent) {
		if (target != null) {
			StateMachine_c[] targetArray = new StateMachine_c[1];
			targetArray[0] = target;
			return getManySM_ASMsOnR517(targetArray, loadComponent);
		} else {
			ClassStateMachine_c[] result = new ClassStateMachine_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ModelClass == null) {
			// R519
			ModelClass_c relInst39263 = (ModelClass_c) baseRoot
					.getInstanceList(ModelClass_c.class).get(
							new Object[]{m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39263 == null) {
				relInst39263 = (ModelClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ModelClass_c.class)
						.get(new Object[]{m_obj_id});
			}
			if (relInst39263 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39263 = (ModelClass_c) roots[i].getInstanceList(
							ModelClass_c.class).get(new Object[]{m_obj_id});
					if (relInst39263 != null)
						break;
				}
			}
			//synchronized
			if (relInst39263 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39263) && !isProxy())) {
					relInst39263.relateAcrossR519To(this, notifyChanges);
				}
			}
		}

		// R517
		StateMachine_c relInst39264 = (StateMachine_c) baseRoot
				.getInstanceList(StateMachine_c.class).get(
						new Object[]{m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39264 == null) {
			relInst39264 = (StateMachine_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(StateMachine_c.class)
					.get(new Object[]{m_sm_id});
		}
		if (relInst39264 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39264 = (StateMachine_c) roots[i].getInstanceList(
						StateMachine_c.class).get(new Object[]{m_sm_id});
				if (relInst39264 != null)
					break;
			}
		}
		//synchronized
		if (relInst39264 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39264) && !isProxy())) {
				relInst39264.relateAcrossR517To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R519
		// O_OBJ
		inst = ModelClass;
		unrelateAcrossR519From(ModelClass, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R517
		// SM_SM
		inst = IsSupertypeStateMachine;
		unrelateAcrossR517From(IsSupertypeStateMachine, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassStateMachine_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassStateMachine_c inst = (ClassStateMachine_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClassStateMachine_c ClassStateMachineInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassStateMachine_c result = findClassStateMachineInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ClassStateMachine_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findClassStateMachineInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ClassStateMachine_c findClassStateMachineInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassStateMachine_c x = (ClassStateMachine_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ClassStateMachine_c ClassStateMachineInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassStateMachineInstance(modelRoot, test, true);
	}

	public static ClassStateMachine_c ClassStateMachineInstance(
			ModelRoot modelRoot) {
		return ClassStateMachineInstance(modelRoot, null, true);
	}

	public static ClassStateMachine_c[] ClassStateMachineInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassStateMachine_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ClassStateMachine_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassStateMachine_c x = (ClassStateMachine_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClassStateMachine_c[] ret_set = new ClassStateMachine_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassStateMachine_c[0];
			}
		}
	}
	public static ClassStateMachine_c[] ClassStateMachineInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassStateMachineInstances(modelRoot, test, true);
	}
	public static ClassStateMachine_c[] ClassStateMachineInstances(
			ModelRoot modelRoot) {
		return ClassStateMachineInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Class State Machine.dispose call: ";
		ModelClass_c testR519Inst = ModelClass_c.getOneO_OBJOnR519(this, false);

		if (testR519Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "519 ";
		}
		StateMachine_c testR517Inst2 = StateMachine_c.getOneSM_SMOnR517(this,
				false);

		if (testR517Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "517 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Class State Machine",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSm_idLongBased() {
		if (IsSupertypeStateMachine != null) {
			return IsSupertypeStateMachine.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeStateMachine != null) {
			return IsSupertypeStateMachine.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStateMachine != null);

	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (ModelClass != null) {
			return ModelClass.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (ModelClass != null) {
			return ModelClass.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class State Machine", //$NON-NLS-1$
						" Operation entered: Class State Machine::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClassStateMachine_c[] objs = ClassStateMachine_c
				.ClassStateMachineInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine", //$NON-NLS-1$
				" Operation entered: Class State Machine::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClassStateMachine_c_test39266_c implements ClassQueryInterface_c {
			ClassStateMachine_c_test39266_c(java.util.UUID p39267) {
				m_p39267 = p39267;
			}
			private java.util.UUID m_p39267;
			public boolean evaluate(Object candidate) {
				ClassStateMachine_c selected = (ClassStateMachine_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39267));
				return retval;
			}
		}

		ClassStateMachine_c[] objs39265 = ClassStateMachine_c
				.ClassStateMachineInstances(modelRoot,
						new ClassStateMachine_c_test39266_c(getSm_id()));

		if (((objs39265.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class State Machine", //$NON-NLS-1$
								"Consistency: Object: Class State Machine: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39265.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class State Machine: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39265.length), e);
			}
			retval = false;

		}

		if (((objs39265.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class State Machine", //$NON-NLS-1$
								"Consistency: Object: Class State Machine: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39265.length)
										+ " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class State Machine: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39265.length)
										+ " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Class State Machine is a subtype in association: rel.Numb = 517
		// The supertype class is: State Machine
		class StateMachine_c_test39271_c implements ClassQueryInterface_c {
			StateMachine_c_test39271_c(java.util.UUID p39272) {
				m_p39272 = p39272;
			}
			private java.util.UUID m_p39272;
			public boolean evaluate(Object candidate) {
				StateMachine_c selected = (StateMachine_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39272));
				return retval;
			}
		}

		StateMachine_c[] objs39270 = StateMachine_c.StateMachineInstances(
				modelRoot, new StateMachine_c_test39271_c(getSm_id()));

		if (((objs39270.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class State Machine", //$NON-NLS-1$
								"Consistency: Object: Class State Machine: Association: 517: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39270.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class State Machine: Association: 517: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39270.length), e);
			}
			retval = false;

		}

		// Class State Machine is a referring class in association: rel.Numb = 519
		// The participating class is: Model Class
		class ModelClass_c_test39274_c implements ClassQueryInterface_c {
			ModelClass_c_test39274_c(java.util.UUID p39275) {
				m_p39275 = p39275;
			}
			private java.util.UUID m_p39275;
			public boolean evaluate(Object candidate) {
				ModelClass_c selected = (ModelClass_c) candidate;
				boolean retval = false;
				retval = (selected.getObj_id().equals(m_p39275));
				return retval;
			}
		}

		ModelClass_c[] objs39273 = ModelClass_c.ModelClassInstances(modelRoot,
				new ModelClass_c_test39274_c(getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39273.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class State Machine", //$NON-NLS-1$
								"Consistency: Object: Class State Machine: Association: 519: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39273.length)
										+ " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class State Machine: Association: 519: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39273.length)
										+ " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR519(this);

		if (((v_obj != null))) {

			return v_obj.getName();

		}

		else {

			return Ooaofooa.Getorphanedelementname(modelRoot);

		}

	} // End get_name
	public void Newstate() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Newstate");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		if (v_sm != null) {
			v_sm.Newstate();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End newState
	public void Newevent() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Newevent");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		if (v_sm != null) {
			v_sm.Newevent();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End newEvent
	public boolean Newtransition(final java.util.UUID p_From,
			final boolean p_Fromtypeisimportedclass, final java.util.UUID p_To,
			final boolean p_Totypeisimportedclass) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Newtransition");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		return v_sm.Newtransition(p_From, p_To);

	} // End newTransition
	public boolean Newcreationtransition(final java.util.UUID p_From,
			final boolean p_Fromtypeisimportedclass, final java.util.UUID p_To,
			final boolean p_Totypeisimportedclass) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Newcreationtransition");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		return v_sm.Newcreationtransition(p_From, p_To);

	} // End newCreationTransition
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getSm_id();

	} // End get_ooa_id
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		if (v_sm != null) {
			v_sm.Dispose();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End dispose
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Converttoinstance");
		return this;
	} // End convertToInstance
	public void Pastetransition(final java.util.UUID p_Id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Pastetransition");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		if (v_sm != null) {
			v_sm.Pastetransition(p_Id);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End pasteTransition
	public void Pastestatemachinestate(final java.util.UUID p_Id) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class State Machine",
						" Operation entered: ClassStateMachine::Pastestatemachinestate");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		if (v_sm != null) {
			v_sm.Pastestatemachinestate(p_Id);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End pasteStateMachineState
	public int Getstatecount() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Getstatecount");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineState_c[] v_states = StateMachineState_c
				.getManySM_STATEsOnR501(StateMachine_c
						.getManySM_SMsOnR517(this));

		return (v_states.length);

	} // End getStateCount
	public java.util.UUID Getstateid(final int p_Index) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class State Machine",
				" Operation entered: ClassStateMachine::Getstateid");
		final ModelRoot modelRoot = getModelRoot();
		java.util.UUID v_id = Gd_c.Null_unique_id();

		StateMachineState_c[] v_states = StateMachineState_c
				.getManySM_STATEsOnR501(StateMachine_c
						.getManySM_SMsOnR517(this));

		int v_count = -1;

		StateMachineState_c v_state = null;
		for (int i37225 = 0; i37225 < v_states.length; i37225++) {
			v_state = v_states[i37225];

			if (((v_state != null))) {

				v_count = v_count + 1;

			}

			if ((v_count == p_Index)) {

				return v_state.Get_ooa_id();

			}

		}

		return v_id;

	} // End getStateId
	public void Pastestatemachineevent(final java.util.UUID p_Id) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class State Machine",
						" Operation entered: ClassStateMachine::Pastestatemachineevent");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR517(this);

		if (v_sm != null) {
			v_sm.Pastestatemachineevent(p_Id);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

	} // End pasteStateMachineEvent

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		if (adapter == org.eclipse.core.resources.IResource.class) {
			PersistableModelComponent comp = getPersistableComponent(false);
			if (comp != null) {
				return comp.getFile().getParent();
			}
		} else if (adapter == org.eclipse.core.resources.IFile.class) {
			PersistableModelComponent comp = getPersistableComponent(false);
			if (comp != null) {
				return comp.getFile();
			}
		}
		return null;
	}
} // end Class State Machine
