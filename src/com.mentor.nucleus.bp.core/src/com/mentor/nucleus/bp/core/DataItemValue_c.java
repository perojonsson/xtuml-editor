package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.DataItemValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import java.util.concurrent.locks.ReentrantLock;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_DATA_ITEM_VALUE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class DataItemValue_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public DataItemValue_c(ModelRoot modelRoot, java.util.UUID p_m_div_id,
			java.util.UUID p_m_event_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_pp_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_event_id = IdAssigner.preprocessUUID(p_m_event_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_div_id = IdAssigner.preprocessUUID(p_m_div_id);
		//extract 28 bit value only            
		m_div_idLongBased = 0xfffffff & p_m_div_id.getLeastSignificantBits();

		setUniqueId(m_div_id);
		Object[] key = {m_div_id};
		addInstanceToMap(key);
	}
	static public DataItemValue_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_div_id, java.util.UUID p_m_event_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smedi_id,
			java.util.UUID p_m_pp_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);
		DataItemValue_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_div_id};
			new_inst = (DataItemValue_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_event_id = IdAssigner.preprocessUUID(p_m_event_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_div_id = IdAssigner.preprocessUUID(p_m_div_id);
				//extract 28 bit value only            
				new_inst.m_div_idLongBased = 0xfffffff & p_m_div_id
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new DataItemValue_c(modelRoot, p_m_div_id, p_m_event_id,
					p_m_sm_id, p_m_smedi_id, p_m_pp_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public DataItemValue_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_div_id, java.util.UUID p_m_event_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smedi_id,
			java.util.UUID p_m_pp_id) {
		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);
		DataItemValue_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_div_id};
			source = (DataItemValue_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_event_id = IdAssigner.preprocessUUID(p_m_event_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_div_id = IdAssigner.preprocessUUID(p_m_div_id);
				//extract 28 bit value only            
				source.m_div_idLongBased = 0xfffffff & p_m_div_id
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		DataItemValue_c new_inst = new DataItemValue_c(modelRoot, p_m_div_id,
				p_m_event_id, p_m_sm_id, p_m_smedi_id, p_m_pp_id);
		return new_inst;
	}
	public DataItemValue_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_event_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smedi_id = IdAssigner.NULL_UUID;
		m_pp_id = IdAssigner.NULL_UUID;
		m_div_id = idAssigner.createUUID();
		setUniqueId(m_div_id);
		Object[] key = {m_div_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_div_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_div_id != p_newKey) {

			m_div_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof DataItemValue_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof DataItemValue_c)) {
			return false;
		}

		DataItemValue_c me = (DataItemValue_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDiv_id()) || IdAssigner.NULL_UUID
						.equals(((DataItemValue_c) elem).getDiv_id())) && this != elem)) {
			return false;
		}
		if (!getDiv_id().equals(((DataItemValue_c) elem).getDiv_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof DataItemValue_c)) {
			return false;
		}

		DataItemValue_c me = (DataItemValue_c) elem;
		if (!getDiv_id().equals(((DataItemValue_c) elem).getDiv_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_event_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smedi_id;
	private java.util.UUID m_pp_id;
	private java.util.UUID m_div_id;
	private long m_div_idLongBased;

	// declare association references from this class

	// referring navigation

	StateMachineEventDataItem_c StateMachineEventDataItem;
	public void relateAcrossR2934To(StateMachineEventDataItem_c target) {
		relateAcrossR2934To(target, true);
	}
	public void relateAcrossR2934To(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == StateMachineEventDataItem)
			return; // already related

		if (StateMachineEventDataItem != target) {

			Object oldKey = getInstanceKey();

			if (StateMachineEventDataItem != null) {

				StateMachineEventDataItem.clearBackPointerR2934To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DataItemValue_c.relateAcrossR2934To(StateMachineEventDataItem_c target)",
									"Relate performed across R2934 from Data Item Value to State Machine Event Data Item without unrelate of prior instance.");
				}
			}

			StateMachineEventDataItem = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			m_smedi_id = target.getSmedi_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2934To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2934", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2934From(StateMachineEventDataItem_c target) {
		unrelateAcrossR2934From(target, true);
	}
	public void unrelateAcrossR2934From(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (StateMachineEventDataItem == null)
			return; // already unrelated

		if (target != StateMachineEventDataItem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2934",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2934To(this);
		}

		if (StateMachineEventDataItem != null) {

			m_sm_id = StateMachineEventDataItem.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = StateMachineEventDataItem.getSm_idCachedValue();
			}
			m_smedi_id = StateMachineEventDataItem.getSmedi_id();
			StateMachineEventDataItem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2934", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static DataItemValue_c getOneI_DIVOnR2934(
			StateMachineEventDataItem_c[] targets) {
		return getOneI_DIVOnR2934(targets, null);
	}

	public static DataItemValue_c getOneI_DIVOnR2934(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		DataItemValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_DIVOnR2934(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DataItemValue_c getOneI_DIVOnR2934(
			StateMachineEventDataItem_c target) {
		return getOneI_DIVOnR2934(target, null);
	}

	public static DataItemValue_c getOneI_DIVOnR2934(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getOneI_DIVOnR2934(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DataItemValue_c getOneI_DIVOnR2934(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_DIVOnR2934(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DataItemValue_c getOneI_DIVOnR2934(ModelRoot modelRoot,
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		return getOneI_DIVOnR2934(modelRoot, target, test, true);
	}

	public static DataItemValue_c getOneI_DIVOnR2934(ModelRoot modelRoot,
			StateMachineEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_DIVOnR2934(modelRoot, target, test);
	}
	private static DataItemValue_c find_getOneI_DIVOnR2934(ModelRoot modelRoot,
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DataItemValue_R2934) {
				for (int i = 0; i < target.backPointer_DataItemValue_R2934
						.size(); ++i) {
					DataItemValue_c source = (DataItemValue_c) target.backPointer_DataItemValue_R2934
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c[] targets) {
		return getManyI_DIVsOnR2934(targets, null);
	}
	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c[] targets, boolean loadComponent) {
		return getManyI_DIVsOnR2934(targets, null, loadComponent);
	}
	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		return getManyI_DIVsOnR2934(targets, test, true);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DataItemValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DataItemValue_R2934) {
				for (int j = 0; j < targets[i].backPointer_DataItemValue_R2934
						.size(); ++j) {
					DataItemValue_c source = (DataItemValue_c) targets[i].backPointer_DataItemValue_R2934
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DataItemValue_c[0];
		}
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c target) {
		return getManyI_DIVsOnR2934(target, null);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getManyI_DIVsOnR2934(target, null, loadComponent);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		return getManyI_DIVsOnR2934(target, test, true);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2934(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new DataItemValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_DataItemValue_R2934) {
			for (int i = 0; i < target.backPointer_DataItemValue_R2934.size(); ++i) {
				DataItemValue_c source = (DataItemValue_c) target.backPointer_DataItemValue_R2934
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DataItemValue_c[0];
		}
	}

	// referring navigation

	PendingEvent_c PendingEvent;
	public void relateAcrossR2933To(PendingEvent_c target) {
		relateAcrossR2933To(target, true);
	}
	public void relateAcrossR2933To(PendingEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == PendingEvent)
			return; // already related

		if (PendingEvent != target) {

			Object oldKey = getInstanceKey();

			if (PendingEvent != null) {

				PendingEvent.clearBackPointerR2933To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DataItemValue_c.relateAcrossR2933To(PendingEvent_c target)",
									"Relate performed across R2933 from Data Item Value to Pending Event without unrelate of prior instance.");
				}
			}

			PendingEvent = target;
			m_event_id = target.getEvent_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2933To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2933", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2933From(PendingEvent_c target) {
		unrelateAcrossR2933From(target, true);
	}
	public void unrelateAcrossR2933From(PendingEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (PendingEvent == null)
			return; // already unrelated

		if (target != PendingEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2933",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2933To(this);
		}

		if (PendingEvent != null) {

			m_event_id = PendingEvent.getEvent_id();
			PendingEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2933", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static DataItemValue_c getOneI_DIVOnR2933(PendingEvent_c[] targets) {
		return getOneI_DIVOnR2933(targets, null);
	}

	public static DataItemValue_c getOneI_DIVOnR2933(PendingEvent_c[] targets,
			ClassQueryInterface_c test) {
		DataItemValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_DIVOnR2933(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DataItemValue_c getOneI_DIVOnR2933(PendingEvent_c target) {
		return getOneI_DIVOnR2933(target, null);
	}

	public static DataItemValue_c getOneI_DIVOnR2933(PendingEvent_c target,
			boolean loadComponent) {
		return getOneI_DIVOnR2933(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DataItemValue_c getOneI_DIVOnR2933(PendingEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_DIVOnR2933(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DataItemValue_c getOneI_DIVOnR2933(ModelRoot modelRoot,
			PendingEvent_c target, ClassQueryInterface_c test) {
		return getOneI_DIVOnR2933(modelRoot, target, test, true);
	}

	public static DataItemValue_c getOneI_DIVOnR2933(ModelRoot modelRoot,
			PendingEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_DIVOnR2933(modelRoot, target, test);
	}
	private static DataItemValue_c find_getOneI_DIVOnR2933(ModelRoot modelRoot,
			PendingEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DataItemValue_R2933) {
				for (int i = 0; i < target.backPointer_DataItemValue_R2933
						.size(); ++i) {
					DataItemValue_c source = (DataItemValue_c) target.backPointer_DataItemValue_R2933
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2933(
			PendingEvent_c[] targets) {
		return getManyI_DIVsOnR2933(targets, null);
	}
	public static DataItemValue_c[] getManyI_DIVsOnR2933(
			PendingEvent_c[] targets, boolean loadComponent) {
		return getManyI_DIVsOnR2933(targets, null, loadComponent);
	}
	public static DataItemValue_c[] getManyI_DIVsOnR2933(
			PendingEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyI_DIVsOnR2933(targets, test, true);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2933(
			PendingEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DataItemValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DataItemValue_R2933) {
				for (int j = 0; j < targets[i].backPointer_DataItemValue_R2933
						.size(); ++j) {
					DataItemValue_c source = (DataItemValue_c) targets[i].backPointer_DataItemValue_R2933
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DataItemValue_c[0];
		}
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2933(PendingEvent_c target) {
		return getManyI_DIVsOnR2933(target, null);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2933(PendingEvent_c target,
			boolean loadComponent) {
		return getManyI_DIVsOnR2933(target, null, loadComponent);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2933(PendingEvent_c target,
			ClassQueryInterface_c test) {
		return getManyI_DIVsOnR2933(target, test, true);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2933(PendingEvent_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new DataItemValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_DataItemValue_R2933) {
			for (int i = 0; i < target.backPointer_DataItemValue_R2933.size(); ++i) {
				DataItemValue_c source = (DataItemValue_c) target.backPointer_DataItemValue_R2933
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DataItemValue_c[0];
		}
	}

	// referring navigation

	PropertyParameter_c PropertyParameter;
	public void relateAcrossR2956To(PropertyParameter_c target) {
		relateAcrossR2956To(target, true);
	}
	public void relateAcrossR2956To(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == PropertyParameter)
			return; // already related

		if (PropertyParameter != target) {

			Object oldKey = getInstanceKey();

			if (PropertyParameter != null) {

				PropertyParameter.clearBackPointerR2956To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"DataItemValue_c.relateAcrossR2956To(PropertyParameter_c target)",
									"Relate performed across R2956 from Data Item Value to Property Parameter without unrelate of prior instance.");
				}
			}

			PropertyParameter = target;
			m_pp_id = target.getPp_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2956To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2956", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2956From(PropertyParameter_c target) {
		unrelateAcrossR2956From(target, true);
	}
	public void unrelateAcrossR2956From(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (PropertyParameter == null)
			return; // already unrelated

		if (target != PropertyParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2956",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2956To(this);
		}

		if (PropertyParameter != null) {

			m_pp_id = PropertyParameter.getPp_id();
			PropertyParameter = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2956", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static DataItemValue_c getOneI_DIVOnR2956(
			PropertyParameter_c[] targets) {
		return getOneI_DIVOnR2956(targets, null);
	}

	public static DataItemValue_c getOneI_DIVOnR2956(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		DataItemValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_DIVOnR2956(targets[i], test);
			}
		}

		return ret_val;
	}

	public static DataItemValue_c getOneI_DIVOnR2956(PropertyParameter_c target) {
		return getOneI_DIVOnR2956(target, null);
	}

	public static DataItemValue_c getOneI_DIVOnR2956(
			PropertyParameter_c target, boolean loadComponent) {
		return getOneI_DIVOnR2956(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static DataItemValue_c getOneI_DIVOnR2956(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_DIVOnR2956(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static DataItemValue_c getOneI_DIVOnR2956(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getOneI_DIVOnR2956(modelRoot, target, test, true);
	}

	public static DataItemValue_c getOneI_DIVOnR2956(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_DIVOnR2956(modelRoot, target, test);
	}
	private static DataItemValue_c find_getOneI_DIVOnR2956(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DataItemValue_R2956) {
				for (int i = 0; i < target.backPointer_DataItemValue_R2956
						.size(); ++i) {
					DataItemValue_c source = (DataItemValue_c) target.backPointer_DataItemValue_R2956
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c[] targets) {
		return getManyI_DIVsOnR2956(targets, null);
	}
	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c[] targets, boolean loadComponent) {
		return getManyI_DIVsOnR2956(targets, null, loadComponent);
	}
	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyI_DIVsOnR2956(targets, test, true);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new DataItemValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DataItemValue_R2956) {
				for (int j = 0; j < targets[i].backPointer_DataItemValue_R2956
						.size(); ++j) {
					DataItemValue_c source = (DataItemValue_c) targets[i].backPointer_DataItemValue_R2956
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DataItemValue_c[0];
		}
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c target) {
		return getManyI_DIVsOnR2956(target, null);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c target, boolean loadComponent) {
		return getManyI_DIVsOnR2956(target, null, loadComponent);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getManyI_DIVsOnR2956(target, test, true);
	}

	public static DataItemValue_c[] getManyI_DIVsOnR2956(
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new DataItemValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_DataItemValue_R2956) {
			for (int i = 0; i < target.backPointer_DataItemValue_R2956.size(); ++i) {
				DataItemValue_c source = (DataItemValue_c) target.backPointer_DataItemValue_R2956
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new DataItemValue_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (StateMachineEventDataItem == null) {
			// R2934
			StateMachineEventDataItem_c relInst40869 = (StateMachineEventDataItem_c) baseRoot
					.getInstanceList(StateMachineEventDataItem_c.class).get(
							new Object[]{m_sm_id, m_smedi_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40869 == null) {
				relInst40869 = (StateMachineEventDataItem_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StateMachineEventDataItem_c.class)
						.get(new Object[]{m_sm_id, m_smedi_id});
			}
			if (relInst40869 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40869 = (StateMachineEventDataItem_c) roots[i]
							.getInstanceList(StateMachineEventDataItem_c.class)
							.get(new Object[]{m_sm_id, m_smedi_id});
					if (relInst40869 != null)
						break;
				}
			}
			//synchronized
			if (relInst40869 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40869) && !isProxy())) {
					relInst40869.relateAcrossR2934To(this, notifyChanges);
				}
			}
		}

		if (PendingEvent == null) {
			// R2933
			PendingEvent_c relInst40870 = (PendingEvent_c) baseRoot
					.getInstanceList(PendingEvent_c.class).get(
							new Object[]{m_event_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40870 == null) {
				relInst40870 = (PendingEvent_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(PendingEvent_c.class)
						.get(new Object[]{m_event_id});
			}
			if (relInst40870 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40870 = (PendingEvent_c) roots[i].getInstanceList(
							PendingEvent_c.class).get(new Object[]{m_event_id});
					if (relInst40870 != null)
						break;
				}
			}
			//synchronized
			if (relInst40870 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40870) && !isProxy())) {
					relInst40870.relateAcrossR2933To(this, notifyChanges);
				}
			}
		}

		if (PropertyParameter == null) {
			// R2956
			PropertyParameter_c relInst40871 = (PropertyParameter_c) baseRoot
					.getInstanceList(PropertyParameter_c.class).get(
							new Object[]{m_pp_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40871 == null) {
				relInst40871 = (PropertyParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(PropertyParameter_c.class)
						.get(new Object[]{m_pp_id});
			}
			if (relInst40871 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40871 = (PropertyParameter_c) roots[i]
							.getInstanceList(PropertyParameter_c.class).get(
									new Object[]{m_pp_id});
					if (relInst40871 != null)
						break;
				}
			}
			//synchronized
			if (relInst40871 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40871) && !isProxy())) {
					relInst40871.relateAcrossR2956To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R2934
		// SM_EVTDI
		inst = StateMachineEventDataItem;
		unrelateAcrossR2934From(StateMachineEventDataItem, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2933
		// I_EVI
		inst = PendingEvent;
		unrelateAcrossR2933From(PendingEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2956
		// C_PP
		inst = PropertyParameter;
		unrelateAcrossR2956From(PropertyParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(DataItemValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final DataItemValue_c inst = (DataItemValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static DataItemValue_c DataItemValueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		DataItemValue_c result = findDataItemValueInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static DataItemValue_c findDataItemValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DataItemValue_c x = (DataItemValue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static DataItemValue_c DataItemValueInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return DataItemValueInstance(modelRoot, test, true);
	}

	public static DataItemValue_c DataItemValueInstance(ModelRoot modelRoot) {
		return DataItemValueInstance(modelRoot, null, true);
	}

	public static DataItemValue_c[] DataItemValueInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(DataItemValue_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				DataItemValue_c x = (DataItemValue_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				DataItemValue_c[] ret_set = new DataItemValue_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new DataItemValue_c[0];
			}
		}
	}
	public static DataItemValue_c[] DataItemValueInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return DataItemValueInstances(modelRoot, test, true);
	}
	public static DataItemValue_c[] DataItemValueInstances(ModelRoot modelRoot) {
		return DataItemValueInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Data Item Value.dispose call: ";
		StateMachineEventDataItem_c testR2934Inst = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR2934(this, false);

		if (testR2934Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2934 ";
		}
		PendingEvent_c testR2933Inst = PendingEvent_c.getOneI_EVIOnR2933(this,
				false);

		if (testR2933Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2933 ";
		}
		PropertyParameter_c testR2956Inst = PropertyParameter_c
				.getOneC_PPOnR2956(this, false);

		if (testR2956Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2956 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Data Item Value",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("event_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smedi_id")) {
			return true;
		}
		if (attributeName.equals("pp_id")) {
			return true;
		}
		if (attributeName.equals("div_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getEvent_idLongBased() {
		if (PendingEvent != null) {
			return PendingEvent.getEvent_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEvent_id() {
		if (PendingEvent != null) {
			return PendingEvent.getEvent_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEvent_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_event_id))
			return m_event_id;
		else
			return getEvent_id();
	}

	public void setEvent_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_event_id)) {
				return;
			}
		} else if (m_event_id != null) {
			if (m_event_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Event_id", m_event_id, newValue, false);
		m_event_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, false);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmedi_idLongBased() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSmedi_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmedi_id() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSmedi_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmedi_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smedi_id))
			return m_smedi_id;
		else
			return getSmedi_id();
	}

	public void setSmedi_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smedi_id)) {
				return;
			}
		} else if (m_smedi_id != null) {
			if (m_smedi_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smedi_id", m_smedi_id, newValue, false);
		m_smedi_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPp_idLongBased() {
		if (PropertyParameter != null) {
			return PropertyParameter.getPp_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPp_id() {
		if (PropertyParameter != null) {
			return PropertyParameter.getPp_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPp_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_pp_id))
			return m_pp_id;
		else
			return getPp_id();
	}

	public void setPp_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_pp_id)) {
				return;
			}
		} else if (m_pp_id != null) {
			if (m_pp_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Pp_id",
				m_pp_id, newValue, false);
		m_pp_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDiv_idLongBased() {
		if (m_div_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_div_id)) {
			return 0xfffffff & m_div_id.getLeastSignificantBits();
		}
		return m_div_idLongBased;
	}
	public java.util.UUID getDiv_id() {
		return m_div_id;
	}

	public void setDiv_id(java.util.UUID newValue) {
		m_div_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value", //$NON-NLS-1$
				" Operation entered: Data Item Value::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		DataItemValue_c[] objs = DataItemValue_c.DataItemValueInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value", //$NON-NLS-1$
				" Operation entered: Data Item Value::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class DataItemValue_c_test40873_c implements ClassQueryInterface_c {
			DataItemValue_c_test40873_c(java.util.UUID p40874) {
				m_p40874 = p40874;
			}
			private java.util.UUID m_p40874;
			public boolean evaluate(Object candidate) {
				DataItemValue_c selected = (DataItemValue_c) candidate;
				boolean retval = false;
				retval = (selected.getDiv_id().equals(m_p40874));
				return retval;
			}
		}

		DataItemValue_c[] objs40872 = DataItemValue_c.DataItemValueInstances(
				modelRoot, new DataItemValue_c_test40873_c(getDiv_id()));

		if (((objs40872.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Data Item Value", //$NON-NLS-1$
								"Consistency: Object: Data Item Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40872.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Data Item Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40872.length), e);
			}
			retval = false;

		}

		if (((objs40872.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Data Item Value", //$NON-NLS-1$
								"Consistency: Object: Data Item Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40872.length)
										+ " DIV_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Data Item Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40872.length)
										+ " DIV_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Data Item Value is a referring class in association: rel.Numb = 2933
		// The participating class is: Pending Event
		class PendingEvent_c_test40878_c implements ClassQueryInterface_c {
			PendingEvent_c_test40878_c(java.util.UUID p40879) {
				m_p40879 = p40879;
			}
			private java.util.UUID m_p40879;
			public boolean evaluate(Object candidate) {
				PendingEvent_c selected = (PendingEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getEvent_id().equals(m_p40879));
				return retval;
			}
		}

		PendingEvent_c[] objs40877 = PendingEvent_c.PendingEventInstances(
				modelRoot, new PendingEvent_c_test40878_c(getEvent_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40877.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Data Item Value", //$NON-NLS-1$
								"Consistency: Object: Data Item Value: Association: 2933: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40877.length)
										+ " Event_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Data Item Value: Association: 2933: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40877.length)
										+ " Event_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Data Item Value is a referring class in association: rel.Numb = 2934
		// The participating class is: State Machine Event Data Item
		class StateMachineEventDataItem_c_test40881_c
				implements
					ClassQueryInterface_c {
			StateMachineEventDataItem_c_test40881_c(java.util.UUID p40882,
					java.util.UUID p40883) {
				m_p40882 = p40882;
				m_p40883 = p40883;
			}
			private java.util.UUID m_p40882;
			private java.util.UUID m_p40883;
			public boolean evaluate(Object candidate) {
				StateMachineEventDataItem_c selected = (StateMachineEventDataItem_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p40882))
						& (selected.getSmedi_id().equals(m_p40883));
				return retval;
			}
		}

		StateMachineEventDataItem_c[] objs40880 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstances(modelRoot,
						new StateMachineEventDataItem_c_test40881_c(getSm_id(),
								getSmedi_id()));

		if (((objs40880.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Data Item Value", //$NON-NLS-1$
								"Consistency: Object: Data Item Value: Association: 2934: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40880.length)
										+ " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Data Item Value: Association: 2934: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40880.length)
										+ " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Data Item Value is a referring class in association: rel.Numb = 2956
		// The participating class is: Property Parameter
		class PropertyParameter_c_test40885_c implements ClassQueryInterface_c {
			PropertyParameter_c_test40885_c(java.util.UUID p40886) {
				m_p40886 = p40886;
			}
			private java.util.UUID m_p40886;
			public boolean evaluate(Object candidate) {
				PropertyParameter_c selected = (PropertyParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getPp_id().equals(m_p40886));
				return retval;
			}
		}

		PropertyParameter_c[] objs40884 = PropertyParameter_c
				.PropertyParameterInstances(modelRoot,
						new PropertyParameter_c_test40885_c(getPp_id()));

		if (((objs40884.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Data Item Value", //$NON-NLS-1$
								"Consistency: Object: Data Item Value: Association: 2956: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40884.length)
										+ " PP_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Data Item Value: Association: 2956: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40884.length)
										+ " PP_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Setboolean(final boolean p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Setboolean");
		final ModelRoot modelRoot = getModelRoot();

	} // End setBoolean
	public void Setinteger(final int p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Setinteger");
		final ModelRoot modelRoot = getModelRoot();

	} // End setInteger
	public void Setreal(final float p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Setreal");
		final ModelRoot modelRoot = getModelRoot();

	} // End setReal
	public void Setstring(final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Setstring");
		final ModelRoot modelRoot = getModelRoot();

	} // End setString
	public void Setunique_id(final java.util.UUID p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Setunique_id");
		final ModelRoot modelRoot = getModelRoot();

	} // End setUnique_ID
	public Object Getvalue() {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_instance();

	} // End getValue
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Data Item Value",
				" Operation entered: DataItemValue::Dispose");
		final ModelRoot modelRoot = getModelRoot();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Data Item Value
