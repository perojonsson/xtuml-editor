package com.mentor.nucleus.bp.core.inspector;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/inspector/ComponentInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_object_inspector.inc
// Version:      $Revision: 1.23 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class Component_c from the traversal mechanisms that it provides to
// model diff.
//
import com.mentor.nucleus.bp.core.*;

import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import java.util.*;

/**
 * This file adapts the meta-model entity; 'Component_c' to provide 
 * support of traversing to its children and parents.
 * <p>
 * Do not edit this class, it was created using the Mentor Graphics
 * MC-Java code generator product.
 * </p>
 */
public class ComponentInspector extends BaseModelClassInspector {

  private String parentAssoc;
  
  public ComponentInspector(MetadataSortingManager sortingManager){
    super(sortingManager);
  }

  /**
   * @see IModelClassInspector#getParent(Object)
   * Returns the parent(s) of this node
   */
  public Object getParent(Object arg) {
    ComponentPackage_c result1 = ComponentPackage_c.getOneCP_CPOnR4604((Component_c)arg);
     if (result1 != null) {
        return result1;
    }               
    Component_c result2 = Component_c.getOneC_COnR4202(ComponentInComponent_c.getOneCN_CICOnR4203((Component_c)arg));
     if (result2 != null) {
        return result2;
    }               
    Package_c result3 = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001((Component_c)arg));
     if (result3 != null) {
        return result3;
    }               
    Component_c result4 = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001((Component_c)arg));
     if (result4 != null) {
        return result4;
    }               
        return null;    //No parent found           
  }
  	  
  /**
   * @see IModelClassInspector#getChildRelations(Object)
   * Returns the children of this node
   */
  public ObjectElement[] getChildRelations(Object arg) {
    int resultSize = 0;
    Domain_c [] v_xtumlmodel = 
Domain_c.getManyS_DOMsOnR4204(
DomainAsComponent_c.getManyCN_DCsOnR4204(
(Component_c)arg)
)
;



    sort(v_xtumlmodel);
    UserDataType_c [] v_userdefineddatatype = 
UserDataType_c.getManyS_UDTsOnR17(
DataType_c.getManyS_DTsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
)
;



    sort(v_userdefineddatatype);
    Sequence_c [] v_sequences = 
Sequence_c.getManySQ_SsOnR952(
(Component_c)arg)
;



    sort(v_sequences);
    Communication_c [] v_communications = 
Communication_c.getManyCOMM_COMMsOnR1138(
(Component_c)arg)
;



    sort(v_communications);
    UseCaseDiagram_c [] v_usecasediagrams = 
UseCaseDiagram_c.getManyUC_UCCsOnR1213(
(Component_c)arg)
;



    sort(v_usecasediagrams);
    Activity_c [] v_activities = 
Activity_c.getManyA_AsOnR1115(
(Component_c)arg)
;



    sort(v_activities);
    Component_c [] v_componentsSpecializedComponent = 
Component_c.getManyC_CsOnR4203(
ComponentInComponent_c.getManyCN_CICsOnR4202(
(Component_c)arg)
)
;



    sort(v_componentsSpecializedComponent);
    Component_c [] v_componentsComponent = 
Component_c.getManyC_CsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    sort(v_componentsComponent);
    Port_c [] v_port = 
Port_c.getManyC_POsOnR4010(
(Component_c)arg)
;



    sort(v_port);
    ComponentReference_c [] v_componentreferencesContainedComponentReferences = 
ComponentReference_c.getManyCL_ICsOnR4205(
(Component_c)arg)
;



    sort(v_componentreferencesContainedComponentReferences);
    InterfacePackage_c [] v_interfacepackages = 
InterfacePackage_c.getManyIP_IPsOnR4206(
(Component_c)arg)
;



    sort(v_interfacepackages);
    Package_c [] v_packages = 
Package_c.getManyEP_PKGsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    sort(v_packages);
    ComponentReference_c [] v_componentreferences = 
ComponentReference_c.getManyCL_ICsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    sort(v_componentreferences);
    Interface_c [] v_interfaces = 
Interface_c.getManyC_IsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    sort(v_interfaces);
    List<ObjectElement> result = new ArrayList<ObjectElement> ();
    for (int i = 0 ; i < v_xtumlmodel.length ; i++) {   
        result.add(new ObjectElement("v_xtumlmodel", ObjectElement.RELATION_ROLE_ELEMENT, v_xtumlmodel[i], arg, false));
    }
    for (int i = 0 ; i < v_userdefineddatatype.length ; i++) {   
        result.add(new ObjectElement("v_userdefineddatatype", ObjectElement.RELATION_ROLE_ELEMENT, v_userdefineddatatype[i], arg, false));
    }
    for (int i = 0 ; i < v_sequences.length ; i++) {   
        result.add(new ObjectElement("v_sequences", ObjectElement.RELATION_ROLE_ELEMENT, v_sequences[i], arg, false));
    }
    for (int i = 0 ; i < v_communications.length ; i++) {   
        result.add(new ObjectElement("v_communications", ObjectElement.RELATION_ROLE_ELEMENT, v_communications[i], arg, false));
    }
    for (int i = 0 ; i < v_usecasediagrams.length ; i++) {   
        result.add(new ObjectElement("v_usecasediagrams", ObjectElement.RELATION_ROLE_ELEMENT, v_usecasediagrams[i], arg, false));
    }
    for (int i = 0 ; i < v_activities.length ; i++) {   
        result.add(new ObjectElement("v_activities", ObjectElement.RELATION_ROLE_ELEMENT, v_activities[i], arg, false));
    }
    for (int i = 0 ; i < v_componentsSpecializedComponent.length ; i++) {   
        result.add(new ObjectElement("v_componentsSpecializedComponent", ObjectElement.RELATION_ROLE_ELEMENT, v_componentsSpecializedComponent[i], arg, false));
    }
    for (int i = 0 ; i < v_componentsComponent.length ; i++) {   
        result.add(new ObjectElement("v_componentsComponent", ObjectElement.RELATION_ROLE_ELEMENT, v_componentsComponent[i], arg, false));
    }
    for (int i = 0 ; i < v_port.length ; i++) {   
        result.add(new ObjectElement("v_port", ObjectElement.RELATION_ROLE_ELEMENT, v_port[i], arg, false));
    }
    for (int i = 0 ; i < v_componentreferencesContainedComponentReferences.length ; i++) {   
        result.add(new ObjectElement("v_componentreferencesContainedComponentReferences", ObjectElement.RELATION_ROLE_ELEMENT, v_componentreferencesContainedComponentReferences[i], arg, false));
    }
    for (int i = 0 ; i < v_interfacepackages.length ; i++) {   
        result.add(new ObjectElement("v_interfacepackages", ObjectElement.RELATION_ROLE_ELEMENT, v_interfacepackages[i], arg, false));
    }
    for (int i = 0 ; i < v_packages.length ; i++) {   
        result.add(new ObjectElement("v_packages", ObjectElement.RELATION_ROLE_ELEMENT, v_packages[i], arg, false));
    }
    for (int i = 0 ; i < v_componentreferences.length ; i++) {   
        result.add(new ObjectElement("v_componentreferences", ObjectElement.RELATION_ROLE_ELEMENT, v_componentreferences[i], arg, false));
    }
    for (int i = 0 ; i < v_interfaces.length ; i++) {   
        result.add(new ObjectElement("v_interfaces", ObjectElement.RELATION_ROLE_ELEMENT, v_interfaces[i], arg, false));
    }
    return result.toArray(new ObjectElement[result.size()]);
  }
  /**
   * @see IModelClassInspector#hasChildren(Object)
   * Returns true if this node has any children
   */
  public boolean hasChildRelations(Object arg) {
    Domain_c [] v_xtumlmodel = 
Domain_c.getManyS_DOMsOnR4204(
DomainAsComponent_c.getManyCN_DCsOnR4204(
(Component_c)arg)
)
;



    if (v_xtumlmodel.length > 0) return true;
    UserDataType_c [] v_userdefineddatatype = 
UserDataType_c.getManyS_UDTsOnR17(
DataType_c.getManyS_DTsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
)
;



    if (v_userdefineddatatype.length > 0) return true;
    Sequence_c [] v_sequences = 
Sequence_c.getManySQ_SsOnR952(
(Component_c)arg)
;



    if (v_sequences.length > 0) return true;
    Communication_c [] v_communications = 
Communication_c.getManyCOMM_COMMsOnR1138(
(Component_c)arg)
;



    if (v_communications.length > 0) return true;
    UseCaseDiagram_c [] v_usecasediagrams = 
UseCaseDiagram_c.getManyUC_UCCsOnR1213(
(Component_c)arg)
;



    if (v_usecasediagrams.length > 0) return true;
    Activity_c [] v_activities = 
Activity_c.getManyA_AsOnR1115(
(Component_c)arg)
;



    if (v_activities.length > 0) return true;
    Component_c [] v_componentsSpecializedComponent = 
Component_c.getManyC_CsOnR4203(
ComponentInComponent_c.getManyCN_CICsOnR4202(
(Component_c)arg)
)
;



    if (v_componentsSpecializedComponent.length > 0) return true;
    Component_c [] v_componentsComponent = 
Component_c.getManyC_CsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    if (v_componentsComponent.length > 0) return true;
    Port_c [] v_port = 
Port_c.getManyC_POsOnR4010(
(Component_c)arg)
;



    if (v_port.length > 0) return true;
    ComponentReference_c [] v_componentreferencesContainedComponentReferences = 
ComponentReference_c.getManyCL_ICsOnR4205(
(Component_c)arg)
;



    if (v_componentreferencesContainedComponentReferences.length > 0) return true;
    InterfacePackage_c [] v_interfacepackages = 
InterfacePackage_c.getManyIP_IPsOnR4206(
(Component_c)arg)
;



    if (v_interfacepackages.length > 0) return true;
    Package_c [] v_packages = 
Package_c.getManyEP_PKGsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    if (v_packages.length > 0) return true;
    ComponentReference_c [] v_componentreferences = 
ComponentReference_c.getManyCL_ICsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    if (v_componentreferences.length > 0) return true;
    Interface_c [] v_interfaces = 
Interface_c.getManyC_IsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8003(
(Component_c)arg)
)
;



    if (v_interfaces.length > 0) return true;
    return false;
  }
  
  public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
  	Object[] details = new Object[4];
	return details;
  }
  
  /**
  * @seee IModelClassInspector#getReferentials(Object)
  * Returns the an array of Role Objects specifying the referenctial attibutes of
  * this model element
  * Role Name: <T_TPS.NameOnly>
  * Role Value: <Chain_result>
  * Role Type: "Referential"
  */
  public ObjectElement[] getReferentials(Object arg) {
     List<ObjectElement> referentials = new ArrayList<ObjectElement>();
    return referentials.toArray(new ObjectElement [referentials.size()]);        
  }

  /**
  * @seee IModelClassInspector#getAttributes(Object)
  * Returns the an array of Role objects that give the attibutes of the model 
  * element it self e.g.
  * Role Name: "Name"
  * Role Value: metaModelElement.getName()
  * Role Type: "Primitive"
  */
  public ObjectElement[] getAttributes(Object arg) {
    ObjectElement attrSet[] = new ObjectElement[11];
      attrSet[0] = new ObjectElement("Name", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getName"), arg, "getName", true);
      attrSet[1] = new ObjectElement("Descrip", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getDescrip"), arg, "getDescrip", true);
      attrSet[2] = new ObjectElement("Mult", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getMult"), arg, "getMult", true);
      attrSet[3] = new ObjectElement("isRealized", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getIsrealized"), arg, "getIsrealized", true);
      attrSet[4] = new ObjectElement("Realized_Class_Path", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getRealized_class_path"), arg, "getRealized_class_path", true);
      PackageableElement_c VisibilityOwner = 
      PackageableElement_c.getOnePE_PEOnR8001(
(Component_c) arg)

;
      if(VisibilityOwner != null) {
		   attrSet[5] = new ObjectElement("Visibility", ObjectElement.ATTRIBUTE_ELEMENT, invokeMethod(VisibilityOwner, "getVisibility"), arg, "getVisibility", true);
		   attrSet[5].setAttributeOwner(VisibilityOwner);
  	  }
    ObjectElement compAttrSet[] = new ObjectElement[6];    
    for (int i = 0; i < 6 ; i++) {
        compAttrSet[i] = attrSet[i];
    }
    return compAttrSet;
  }

    /**
     * Return configured image if none exists for the element type
     */
    public Image getImage(Object element) {
		Image image = CorePlugin.getImageFor(element, false);
		if(image != null) {
			return image;
		}
		return CorePlugin.getImageFor("Component.gif");
	}

  /**
  * Returns a "slot number" to be used when comparing and merging tree elements
  * that contain multiple children.  All model element inspector's contain this 
  * function, but it only returns a value for cases where it a parent element
  * in a tree and the parent has multiple children.
  * 
  * @returns 0 if this is not a "parent" in the tree OR if the parent has less 
  * than 2 children. 
  */
	@Override
	public int getTreeDifferenceSlot(Object element) {
    	if (element instanceof Domain_c) {
			return 1;
		}
    	if (element instanceof UserDataType_c) {
			return 2;
		}
    	if (element instanceof Sequence_c) {
			return 3;
		}
    	if (element instanceof Communication_c) {
			return 4;
		}
    	if (element instanceof UseCaseDiagram_c) {
			return 5;
		}
    	if (element instanceof Activity_c) {
			return 6;
		}
    	if (element instanceof Component_c) {
			return 7;
		}
    	if (element instanceof Port_c) {
			return 8;
		}
    	if (element instanceof ComponentReference_c) {
			return 9;
		}
    	if (element instanceof InterfacePackage_c) {
			return 10;
		}
    	if (element instanceof Package_c) {
			return 11;
		}
    	if (element instanceof Interface_c) {
			return 12;
		}
		return 0;
	}

	}       

