package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Util_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import java.util.*;
import com.mentor.nucleus.bp.core.ui.actions.ElementChange;
import java.util.ArrayList;
import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.inspector.ModelInspector;
import com.mentor.nucleus.bp.core.ui.*;
import java.util.Iterator;
import com.mentor.nucleus.bp.core.ui.PasteAction;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;

// Utilities
public class Util_c {
	public static String Removeduplicatestrings(final String p_Completestring,
			final String p_Separator) {
		String[] stringArray = p_Completestring.split(p_Separator);
		ArrayList uniqueArray = new ArrayList();
		String result = "";
		for (int i = 0; i < stringArray.length; i++) {
			if (!uniqueArray.contains(stringArray[i])) {
				uniqueArray.add(stringArray[i]);
			}
		}
		for (int i = 0; i < uniqueArray.size(); i++) {
			result = result + uniqueArray.get(i) + p_Separator;
		}
		return result;
	} // End removeDuplicateStrings

	public static boolean Selectioncontainsvalidparticipant(final Object p_From) {
		Object foundElement = null;
		Iterator iterator = Selection.getInstance().getStructuredSelection()
				.iterator();
		while (iterator.hasNext()) {
			Object currentSelection = iterator.next();
			if ((currentSelection instanceof ClassParticipant_c)
					|| (currentSelection instanceof ClassInstanceParticipant_c)
					|| (currentSelection instanceof ExternalEntityParticipant_c)
					|| (currentSelection instanceof FunctionPackageParticipant_c)
					|| (currentSelection instanceof ComponentParticipant_c)
					|| (currentSelection instanceof PackageParticipant_c)) {
				foundElement = currentSelection;
				break;
			}
		}
		if (foundElement != null) {
			ModelInspector inspector = new ModelInspector();
			Object parent = inspector.getParent(foundElement);
			if (parent == p_From) {
				return true;
			}
		}
		return false;
	} // End selectionContainsValidParticipant

	public static Object Getcommunicationinstance(final java.util.UUID         p_Id)
    {
		final UUID finalId = p_Id;
		Iterator<?> iterator = Selection.getInstance().getStructuredSelection().iterator();
		SynchronousMessage_c synchronousMessage = null;
		AsynchronousMessage_c asynchronousMessage = null;
		while (iterator.hasNext()) {
			Object selection = iterator.next();
			if (selection instanceof SynchronousMessage_c) {
				synchronousMessage = (SynchronousMessage_c) selection;
			} else if (selection instanceof AsynchronousMessage_c) {
				asynchronousMessage = (AsynchronousMessage_c) selection;
			}
		}
		ModelRoot modelRoot = null;
		if (synchronousMessage != null)
			modelRoot = synchronousMessage.getModelRoot();
		if (asynchronousMessage != null)
			modelRoot = asynchronousMessage.getModelRoot();
		Communication_c communication = Communication_c.CommunicationInstance(
				modelRoot, new ClassQueryInterface_c() {

					public boolean evaluate(Object candidate) {
						Communication_c selected = (Communication_c) candidate;
						return selected.getPackage_id().equals(finalId);
					}

				});
		if(communication == null) {
			// should be in a package
			Package_c pkg = (Package_c) modelRoot.getInstanceList(
					Package_c.class).get(finalId);
			return pkg;
		}
		return communication;
    } // End getCommunicationInstance
	public static boolean Isallowedreturntype(final Object p_System,
			final String p_Typename) {
		SystemModel_c system = (SystemModel_c) p_System;
		DataType_c dt = DataType_c.getOneS_DTOnR4401(
				SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402(system),
				new ClassQueryInterface_c() {
					public boolean evaluate(Object candidate) {
						return ((DataType_c) candidate).getName().equals(
								p_Typename);
					}
				});
		if (system != null && system.getUseglobals()) {
			dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c
					.getManyPE_PEsOnR9100(GlobalElementInSystem_c
							.getManyG_EISsOnR9100(system)),
					new ClassQueryInterface_c() {
						public boolean evaluate(Object candidate) {
							return ((DataType_c) candidate).getName().equals(
									p_Typename);
						}
					});
		}
		if ((dt != null)) {
			if ((dt.Iscommonallowedtype())) {
				return true;
			} else if ((p_Typename.equals("void"))) {
				return true;
			}
		}
		return false;
	} // End isAllowedReturnType

	public static boolean Isallowedparametertype(final Object p_System,
			final String p_Typename) {
		SystemModel_c system = (SystemModel_c) p_System;
		DataType_c dt = DataType_c.getOneS_DTOnR4401(
				SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402(system),
				new ClassQueryInterface_c() {
					public boolean evaluate(Object candidate) {
						return ((DataType_c) candidate).getName().equals(
								p_Typename);
					}
				});
		if (system != null && system.getUseglobals()) {
			dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c
					.getManyPE_PEsOnR9100(GlobalElementInSystem_c
							.getManyG_EISsOnR9100(system)),
					new ClassQueryInterface_c() {
						public boolean evaluate(Object candidate) {
							return ((DataType_c) candidate).getName().equals(
									p_Typename);
						}
					});
		}
		if ((dt != null)) {
			return dt.Iscommonallowedtype();
		}
		return false;
	} // End isAllowedParameterType

	public static void Addpastedelementtoproblemlist(
			final String p_Elementname, final String p_Message) {
		PasteAction.addElementToProblemsList(p_Message, p_Elementname);
	} // End addPastedElementToProblemList

	public static boolean Isproxy(final Object p_Element) {
		return ((NonRootModelElement) p_Element).isProxy();
	} // End isProxy

	public static String Getsimpleclassname(final Object p_Element) {
		return p_Element.getClass().getSimpleName().replaceAll("_c", "");
	} // End getSimpleClassName

	public static boolean Hassamemodelroot(final Object p_Nrme1,
			final Object p_Nrme2) {
		boolean hasSameRoot = false;
		if (p_Nrme1 != null && p_Nrme2 != null) {
			if ((p_Nrme1 instanceof NonRootModelElement)
					&& (p_Nrme2 instanceof NonRootModelElement)) {
				ModelRoot root1 = ((NonRootModelElement) p_Nrme1)
						.getModelRoot();
				ModelRoot root2 = ((NonRootModelElement) p_Nrme2)
						.getModelRoot();
				if (root1.getId() != null
						&& root1.getId().equals(root2.getId())) {
					hasSameRoot = true;
				}
			}
		}
		return hasSameRoot;

	} // End hasSameModelRoot

	public static long Addinttolong(final int p_Intvar, final long p_Longvar) {
		return p_Longvar + p_Intvar;
	} // End addIntToLong

	public static int Difflongstoint(final long p_V1, final long p_V2) {
		return (int) (p_V1 - p_V2);
	} // End diffLongsToInt

	public static void Collectmodelelementsnames(final String p_Elementname,
			final String p_Elementtype) {
		TransactionManager.collectModelElementsNames(p_Elementtype,
				p_Elementname);
	} // End collectModelElementsNames

	public static int          Getelementcountinsystem(final Object p_Askingelement,final int  p_Elementtype)
    {
		Class<?> classType = null;
		if (p_Elementtype == Elementtypeconstants_c.EE) {
			classType = ExternalEntity_c.class;
		} else if (p_Elementtype == Elementtypeconstants_c.COMPONENT) {
			classType = Component_c.class;
		} else if (p_Elementtype == Elementtypeconstants_c.CLASS) {
			classType = ModelClass_c.class;
		} else if (p_Elementtype == Elementtypeconstants_c.PACKAGE) {
		    classType = Package_c.class;
		}
		int count = 0;
		Ooaofooa[] instances = OoaofooaBase.getInstancesUnderSystem(((NonRootModelElement) p_Askingelement).getModelRoot());
		for (int i = 0; i < instances.length; i++) {
			// if there is no package in this model root, skip it
			// this method currently is only used for generic package
			// cases
			if (instances[i].getInstanceList(Package_c.class).size() != 0) {
				count = count + instances[i].getInstanceList(classType).size();
			}
		}
		// look for other systems if IPRs are enabled
		SystemModel_c sys = (SystemModel_c) ((NonRootModelElement) p_Askingelement).getRoot();
		if (Pref_c.Getsystemboolean(
				"com.mentor.nucleus.bp.ui.project.references",
				sys.getName())) {
			SystemModel_c[] systems = SystemModel_c.SystemModelInstances(Ooaofooa.getDefaultInstance());
			for(SystemModel_c system : systems) {
				if(sys != system && system.getUseglobals()) {
					instances = OoaofooaBase.getInstancesUnderSystem(system.getName());
					for (int i = 0; i < instances.length; i++) {
						// if there is no package in this model root, skip it
						// this method currently is only used for generic
						// package
						// cases
						if (instances[i].getInstanceList(Package_c.class).size() != 0) {
							count = count + instances[i].getInstanceList(classType).size();
						}
					}
				}
			}
		}
		return count;

    } // End getElementCountInSystem
	public static void Logerror(final String p_Message) {
		//native
		CorePlugin.logError(p_Message, null);
	} // End logError

	public static String Getmodelrootid(final Object p_Element) {
		return "";
	} // End getModelRootId

	public static String Getfullyqualifiedclassname(final Object p_Element) {
		return p_Element.getClass().getName();
	} // End getFullyQualifiedClassName

	public static void Addelementtolist(final Object p_Element,final Object p_Elementlist)
    {
		if(!(p_Elementlist instanceof List<?>)) {
			CorePlugin.logError("Incorrect usage of Util::addElementToList() bridge.", null);
			return;
		}
		@SuppressWarnings("unchecked")
		List<Object> thisList = (List<Object>) p_Elementlist;
		thisList.add(p_Element);
    } // End addElementToList
	public static void Createelementchange(final String       p_Changelabel,final Object p_Changelist,final Object p_Elementchanged,final boolean      p_Isremoval)
    {
		if(!(p_Changelist instanceof List<?>)) {
			CorePlugin.logError("Incorrect usage of Util::createElementChange() bridge.", null);
			return;
		}
		@SuppressWarnings("unchecked")
		List<Object> thisList = (List<Object>) p_Changelist;
		thisList.add(new ElementChange(p_Elementchanged, p_Isremoval, p_Changelabel));
    } // End createElementChange
	public static boolean Isnull(final Object p_Element) {
		return p_Element == null;

	} // End isNull

	public static String Getlastsegmentforpath(final String p_Path) {
		String resultPath = p_Path.replace("\\", "/");
		if (resultPath.contains("/")) {
			String[] split = resultPath.split("/");
			return split[split.length - 1];
		}
		return resultPath;
	} // End getLastSegmentForPath

	public static String Gettic() {
		return "'";
	} // End getTic

	public static java.util.UUID Getuniquestatemachineid(
			final java.util.UUID p_Classid, final String p_Type) {
		IdAssigner assigner = new IdAssigner();
		int hashCode = p_Classid.hashCode() + p_Type.hashCode();
		assigner.setSeed(hashCode);
		UUID stateId = assigner.createUUID();
		return stateId;
	} // End getUniqueStateMachineId

} // End Util_c

