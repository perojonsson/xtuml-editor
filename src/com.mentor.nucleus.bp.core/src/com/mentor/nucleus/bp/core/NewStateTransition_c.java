package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.NewStateTransition_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_NEW_STATE_TRANSITION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class NewStateTransition_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public NewStateTransition_c(ModelRoot modelRoot,
			java.util.UUID p_m_trans_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_smspd_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

		Object[] key = {m_smevt_id, m_smstt_id, m_smspd_id, m_sm_id};
		addInstanceToMap(key);
	}
	static public NewStateTransition_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_trans_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_smspd_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);
		NewStateTransition_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smevt_id, p_m_smstt_id, p_m_smspd_id, p_m_sm_id};
			new_inst = (NewStateTransition_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new NewStateTransition_c(modelRoot, p_m_trans_id,
					p_m_sm_id, p_m_smstt_id, p_m_smevt_id, p_m_smspd_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public NewStateTransition_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_trans_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_smspd_id) {
		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);
		NewStateTransition_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smevt_id, p_m_smstt_id, p_m_smspd_id, p_m_sm_id};
			source = (NewStateTransition_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

				return source;
			}
		}
		// there is no instance matching the id
		NewStateTransition_c new_inst = new NewStateTransition_c(modelRoot,
				p_m_trans_id, p_m_sm_id, p_m_smstt_id, p_m_smevt_id,
				p_m_smspd_id);
		return new_inst;
	}
	public NewStateTransition_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_trans_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smstt_id = IdAssigner.NULL_UUID;
		m_smevt_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		Object[] key = {m_smevt_id, m_smstt_id, m_smspd_id, m_sm_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smevt_id, m_smstt_id, m_smspd_id, m_sm_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smevt_id != p_newKey) {

			m_smevt_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof NewStateTransition_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof NewStateTransition_c)) {
			return false;
		}

		NewStateTransition_c me = (NewStateTransition_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((NewStateTransition_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(((NewStateTransition_c) elem).getSmevt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmstt_id()) || IdAssigner.NULL_UUID
						.equals(((NewStateTransition_c) elem).getSmstt_id())) && this != elem)) {
			return false;
		}
		if (!getSmstt_id().equals(((NewStateTransition_c) elem).getSmstt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmspd_id()) || IdAssigner.NULL_UUID
						.equals(((NewStateTransition_c) elem).getSmspd_id())) && this != elem)) {
			return false;
		}
		if (!getSmspd_id().equals(((NewStateTransition_c) elem).getSmspd_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((NewStateTransition_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((NewStateTransition_c) elem).getSm_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof NewStateTransition_c)) {
			return false;
		}

		NewStateTransition_c me = (NewStateTransition_c) elem;
		if (!getSmevt_idCachedValue().equals(
				((NewStateTransition_c) elem).getSmevt_idCachedValue()))
			return false;
		if (!getSmstt_idCachedValue().equals(
				((NewStateTransition_c) elem).getSmstt_idCachedValue()))
			return false;
		if (!getSmspd_idCachedValue().equals(
				((NewStateTransition_c) elem).getSmspd_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((NewStateTransition_c) elem).getSm_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_trans_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smstt_id;
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_smspd_id;

	// declare association references from this class

	// referring navigation

	Transition_c IsSupertypeTransition;
	public void relateAcrossR507To(Transition_c target) {
		relateAcrossR507To(target, true);
	}
	public void relateAcrossR507To(Transition_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeTransition)
			return; // already related

		if (IsSupertypeTransition != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeTransition != null) {

				IsSupertypeTransition.clearBackPointerR507To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"NewStateTransition_c.relateAcrossR507To(Transition_c target)",
									"Relate performed across R507 from New State Transition to Transition without unrelate of prior instance.");
				}
			}

			IsSupertypeTransition = target;
			m_trans_id = target.getTrans_id();
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR507To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "507", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR507From(Transition_c target) {
		unrelateAcrossR507From(target, true);
	}
	public void unrelateAcrossR507From(Transition_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeTransition == null)
			return; // already unrelated

		if (target != IsSupertypeTransition) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R507",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR507To(this);
		}

		if (IsSupertypeTransition != null) {

			m_trans_id = IsSupertypeTransition.getTrans_id();
			m_sm_id = IsSupertypeTransition.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeTransition.getSm_idCachedValue();
			}
			IsSupertypeTransition = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "507", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(
			Transition_c[] targets) {
		return getOneSM_NSTXNOnR507(targets, null);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(
			Transition_c[] targets, ClassQueryInterface_c test) {
		NewStateTransition_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_NSTXNOnR507(targets[i], test);
			}
		}

		return ret_val;
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(Transition_c target) {
		return getOneSM_NSTXNOnR507(target, null);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(
			Transition_c target, boolean loadComponent) {
		return getOneSM_NSTXNOnR507(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(
			Transition_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_NSTXNOnR507(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(
			ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test) {
		return getOneSM_NSTXNOnR507(modelRoot, target, test, true);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR507(
			ModelRoot modelRoot, Transition_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_NSTXNOnR507(modelRoot, target, test);
	}
	private static NewStateTransition_c find_getOneSM_NSTXNOnR507(
			ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test) {
		if (target != null) {
			NewStateTransition_c source = (NewStateTransition_c) target.backPointer_IsSubtypeNewStateTransitionIsSubtype_R507;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR507(
			Transition_c[] targets) {
		return getManySM_NSTXNsOnR507(targets, null);
	}
	public static NewStateTransition_c[] getManySM_NSTXNsOnR507(
			Transition_c[] targets, boolean loadComponent) {
		return getManySM_NSTXNsOnR507(targets, null, loadComponent);
	}
	public static NewStateTransition_c[] getManySM_NSTXNsOnR507(
			Transition_c[] targets, ClassQueryInterface_c test) {
		return getManySM_NSTXNsOnR507(targets, test, true);
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR507(
			Transition_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new NewStateTransition_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			NewStateTransition_c source = (NewStateTransition_c) targets[i].backPointer_IsSubtypeNewStateTransitionIsSubtype_R507;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			NewStateTransition_c[] ret_set = new NewStateTransition_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new NewStateTransition_c[0];
		}
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR507(
			Transition_c target) {
		if (target != null) {
			Transition_c[] targetArray = new Transition_c[1];
			targetArray[0] = target;
			return getManySM_NSTXNsOnR507(targetArray);
		} else {
			NewStateTransition_c[] result = new NewStateTransition_c[0];
			return result;
		}
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR507(
			Transition_c target, boolean loadComponent) {
		if (target != null) {
			Transition_c[] targetArray = new Transition_c[1];
			targetArray[0] = target;
			return getManySM_NSTXNsOnR507(targetArray, loadComponent);
		} else {
			NewStateTransition_c[] result = new NewStateTransition_c[0];
			return result;
		}
	}

	// referring navigation

	StateEventMatrixEntry_c IsSupertypeStateEventMatrixEntry;
	public void relateAcrossR504To(StateEventMatrixEntry_c target) {
		relateAcrossR504To(target, true);
	}
	public void relateAcrossR504To(StateEventMatrixEntry_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStateEventMatrixEntry)
			return; // already related

		if (IsSupertypeStateEventMatrixEntry != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStateEventMatrixEntry != null) {

				IsSupertypeStateEventMatrixEntry.clearBackPointerR504To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"NewStateTransition_c.relateAcrossR504To(StateEventMatrixEntry_c target)",
									"Relate performed across R504 from New State Transition to State Event Matrix Entry without unrelate of prior instance.");
				}
			}

			IsSupertypeStateEventMatrixEntry = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmstt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smstt_id = target.getSmstt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmspd_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smspd_id = target.getSmspd_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR504To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "504", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR504From(StateEventMatrixEntry_c target) {
		unrelateAcrossR504From(target, true);
	}
	public void unrelateAcrossR504From(StateEventMatrixEntry_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStateEventMatrixEntry == null)
			return; // already unrelated

		if (target != IsSupertypeStateEventMatrixEntry) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R504",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR504To(this);
		}

		if (IsSupertypeStateEventMatrixEntry != null) {

			m_sm_id = IsSupertypeStateEventMatrixEntry.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeStateEventMatrixEntry
						.getSm_idCachedValue();
			}
			m_smstt_id = IsSupertypeStateEventMatrixEntry.getSmstt_id();
			if (IdAssigner.NULL_UUID.equals(m_smstt_id)) {
				m_smstt_id = IsSupertypeStateEventMatrixEntry
						.getSmstt_idCachedValue();
			}
			m_smevt_id = IsSupertypeStateEventMatrixEntry.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = IsSupertypeStateEventMatrixEntry
						.getSmevt_idCachedValue();
			}
			m_smspd_id = IsSupertypeStateEventMatrixEntry.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(m_smspd_id)) {
				m_smspd_id = IsSupertypeStateEventMatrixEntry
						.getSmspd_idCachedValue();
			}
			IsSupertypeStateEventMatrixEntry = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "504", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			StateEventMatrixEntry_c[] targets) {
		return getOneSM_NSTXNOnR504(targets, null);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			StateEventMatrixEntry_c[] targets, ClassQueryInterface_c test) {
		NewStateTransition_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_NSTXNOnR504(targets[i], test);
			}
		}

		return ret_val;
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			StateEventMatrixEntry_c target) {
		return getOneSM_NSTXNOnR504(target, null);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			StateEventMatrixEntry_c target, boolean loadComponent) {
		return getOneSM_NSTXNOnR504(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			StateEventMatrixEntry_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_NSTXNOnR504(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			ModelRoot modelRoot, StateEventMatrixEntry_c target,
			ClassQueryInterface_c test) {
		return getOneSM_NSTXNOnR504(modelRoot, target, test, true);
	}

	public static NewStateTransition_c getOneSM_NSTXNOnR504(
			ModelRoot modelRoot, StateEventMatrixEntry_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_NSTXNOnR504(modelRoot, target, test);
	}
	private static NewStateTransition_c find_getOneSM_NSTXNOnR504(
			ModelRoot modelRoot, StateEventMatrixEntry_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			NewStateTransition_c source = (NewStateTransition_c) target.backPointer_IsSubtypeNewStateTransitionIsSubtype_R504;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR504(
			StateEventMatrixEntry_c[] targets) {
		return getManySM_NSTXNsOnR504(targets, null);
	}
	public static NewStateTransition_c[] getManySM_NSTXNsOnR504(
			StateEventMatrixEntry_c[] targets, boolean loadComponent) {
		return getManySM_NSTXNsOnR504(targets, null, loadComponent);
	}
	public static NewStateTransition_c[] getManySM_NSTXNsOnR504(
			StateEventMatrixEntry_c[] targets, ClassQueryInterface_c test) {
		return getManySM_NSTXNsOnR504(targets, test, true);
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR504(
			StateEventMatrixEntry_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new NewStateTransition_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			NewStateTransition_c source = (NewStateTransition_c) targets[i].backPointer_IsSubtypeNewStateTransitionIsSubtype_R504;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			NewStateTransition_c[] ret_set = new NewStateTransition_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new NewStateTransition_c[0];
		}
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR504(
			StateEventMatrixEntry_c target) {
		if (target != null) {
			StateEventMatrixEntry_c[] targetArray = new StateEventMatrixEntry_c[1];
			targetArray[0] = target;
			return getManySM_NSTXNsOnR504(targetArray);
		} else {
			NewStateTransition_c[] result = new NewStateTransition_c[0];
			return result;
		}
	}

	public static NewStateTransition_c[] getManySM_NSTXNsOnR504(
			StateEventMatrixEntry_c target, boolean loadComponent) {
		if (target != null) {
			StateEventMatrixEntry_c[] targetArray = new StateEventMatrixEntry_c[1];
			targetArray[0] = target;
			return getManySM_NSTXNsOnR504(targetArray, loadComponent);
		} else {
			NewStateTransition_c[] result = new NewStateTransition_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R507
		Transition_c relInst39101 = (Transition_c) baseRoot.getInstanceList(
				Transition_c.class).get(new Object[]{m_trans_id, m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39101 == null) {
			relInst39101 = (Transition_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Transition_c.class)
					.get(new Object[]{m_trans_id, m_sm_id});
		}
		if (relInst39101 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39101 = (Transition_c) roots[i].getInstanceList(
						Transition_c.class).get(
						new Object[]{m_trans_id, m_sm_id});
				if (relInst39101 != null)
					break;
			}
		}
		//synchronized
		if (relInst39101 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39101) && !isProxy())) {
				relInst39101.relateAcrossR507To(this, notifyChanges);
			}
		}

		// R504
		StateEventMatrixEntry_c relInst39102 = (StateEventMatrixEntry_c) baseRoot
				.getInstanceList(StateEventMatrixEntry_c.class).get(
						new Object[]{m_smspd_id, m_smevt_id, m_sm_id,
								m_smstt_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39102 == null) {
			relInst39102 = (StateEventMatrixEntry_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(StateEventMatrixEntry_c.class)
					.get(new Object[]{m_smspd_id, m_smevt_id, m_sm_id,
							m_smstt_id});
		}
		if (relInst39102 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39102 = (StateEventMatrixEntry_c) roots[i]
						.getInstanceList(StateEventMatrixEntry_c.class).get(
								new Object[]{m_smspd_id, m_smevt_id, m_sm_id,
										m_smstt_id});
				if (relInst39102 != null)
					break;
			}
		}
		//synchronized
		if (relInst39102 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39102) && !isProxy())) {
				relInst39102.relateAcrossR504To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R507
		// SM_TXN
		inst = IsSupertypeTransition;
		unrelateAcrossR507From(IsSupertypeTransition, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R504
		// SM_SEME
		inst = IsSupertypeStateEventMatrixEntry;
		unrelateAcrossR504From(IsSupertypeStateEventMatrixEntry, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(NewStateTransition_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final NewStateTransition_c inst = (NewStateTransition_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static NewStateTransition_c NewStateTransitionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		NewStateTransition_c result = findNewStateTransitionInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					NewStateTransition_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findNewStateTransitionInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static NewStateTransition_c findNewStateTransitionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				NewStateTransition_c x = (NewStateTransition_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static NewStateTransition_c NewStateTransitionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return NewStateTransitionInstance(modelRoot, test, true);
	}

	public static NewStateTransition_c NewStateTransitionInstance(
			ModelRoot modelRoot) {
		return NewStateTransitionInstance(modelRoot, null, true);
	}

	public static NewStateTransition_c[] NewStateTransitionInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					NewStateTransition_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(NewStateTransition_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				NewStateTransition_c x = (NewStateTransition_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				NewStateTransition_c[] ret_set = new NewStateTransition_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new NewStateTransition_c[0];
			}
		}
	}
	public static NewStateTransition_c[] NewStateTransitionInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return NewStateTransitionInstances(modelRoot, test, true);
	}
	public static NewStateTransition_c[] NewStateTransitionInstances(
			ModelRoot modelRoot) {
		return NewStateTransitionInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the New State Transition.dispose call: ";
		Transition_c testR507Inst3 = Transition_c.getOneSM_TXNOnR507(this,
				false);

		if (testR507Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "507 ";
		}
		StateEventMatrixEntry_c testR504Inst3 = StateEventMatrixEntry_c
				.getOneSM_SEMEOnR504(this, false);

		if (testR504Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "504 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "New State Transition",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("trans_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smstt_id")) {
			return true;
		}
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmstt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmstt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmspd_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmspd_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getTrans_idLongBased() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getTrans_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTrans_id() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getTrans_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeTransition != null);

	}

	public java.util.UUID getTrans_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_trans_id))
			return m_trans_id;
		else
			return getTrans_id();
	}

	public void setTrans_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_trans_id)) {
				return;
			}
		} else if (m_trans_id != null) {
			if (m_trans_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Trans_id", m_trans_id, newValue, true);
		m_trans_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getSm_idLongBased();
		}
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getSm_id();
		}
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public long getSmstt_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmstt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmstt_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmstt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmstt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smstt_id))
			return m_smstt_id;
		else
			return getSmstt_id();
	}

	public void setSmstt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smstt_id)) {
				return;
			}
		} else if (m_smstt_id != null) {
			if (m_smstt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smstt_id", m_smstt_id, newValue, true);
		m_smstt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmevt_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "New State Transition", //$NON-NLS-1$
						" Operation entered: New State Transition::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		NewStateTransition_c[] objs = NewStateTransition_c
				.NewStateTransitionInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "New State Transition", //$NON-NLS-1$
				" Operation entered: New State Transition::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class NewStateTransition_c_test39104_c implements ClassQueryInterface_c {
			NewStateTransition_c_test39104_c(java.util.UUID p39105,
					java.util.UUID p39106, java.util.UUID p39107,
					java.util.UUID p39108) {
				m_p39105 = p39105;
				m_p39106 = p39106;
				m_p39107 = p39107;
				m_p39108 = p39108;
			}
			private java.util.UUID m_p39105;
			private java.util.UUID m_p39106;
			private java.util.UUID m_p39107;
			private java.util.UUID m_p39108;
			public boolean evaluate(Object candidate) {
				NewStateTransition_c selected = (NewStateTransition_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39105))
						& (selected.getSmstt_id().equals(m_p39106))
						& (selected.getSmspd_id().equals(m_p39107))
						& (selected.getSm_id().equals(m_p39108));
				return retval;
			}
		}

		NewStateTransition_c[] objs39103 = NewStateTransition_c
				.NewStateTransitionInstances(modelRoot,
						new NewStateTransition_c_test39104_c(getSmevt_id(),
								getSmstt_id(), getSmspd_id(), getSm_id()));

		if (((objs39103.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"New State Transition", //$NON-NLS-1$
								"Consistency: Object: New State Transition: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39103.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: New State Transition: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39103.length), e);
			}
			retval = false;

		}

		if (((objs39103.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"New State Transition", //$NON-NLS-1$
								"Consistency: Object: New State Transition: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39103.length)
										+ " SMevt_ID: " + "Not Printable" + " SMstt_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable" + " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: New State Transition: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39103.length)
										+ " SMevt_ID: " + "Not Printable" + " SMstt_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable" + " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		class NewStateTransition_c_test39110_c implements ClassQueryInterface_c {
			NewStateTransition_c_test39110_c(java.util.UUID p39111,
					java.util.UUID p39112) {
				m_p39111 = p39111;
				m_p39112 = p39112;
			}
			private java.util.UUID m_p39111;
			private java.util.UUID m_p39112;
			public boolean evaluate(Object candidate) {
				NewStateTransition_c selected = (NewStateTransition_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39111))
						& (selected.getTrans_id().equals(m_p39112));
				return retval;
			}
		}

		NewStateTransition_c[] objs39109 = NewStateTransition_c
				.NewStateTransitionInstances(modelRoot,
						new NewStateTransition_c_test39110_c(getSm_id(),
								getTrans_id()));

		if (((objs39109.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"New State Transition", //$NON-NLS-1$
								"Consistency: Object: New State Transition: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39109.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: New State Transition: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39109.length), e);
			}
			retval = false;

		}

		if (((objs39109.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"New State Transition", //$NON-NLS-1$
								"Consistency: Object: New State Transition: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39109.length)
										+ " SM_ID: " + "Not Printable" + " Trans_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: New State Transition: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39109.length)
										+ " SM_ID: " + "Not Printable" + " Trans_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// New State Transition is a subtype in association: rel.Numb = 507
		// The supertype class is: Transition
		class Transition_c_test39115_c implements ClassQueryInterface_c {
			Transition_c_test39115_c(java.util.UUID p39116,
					java.util.UUID p39117) {
				m_p39116 = p39116;
				m_p39117 = p39117;
			}
			private java.util.UUID m_p39116;
			private java.util.UUID m_p39117;
			public boolean evaluate(Object candidate) {
				Transition_c selected = (Transition_c) candidate;
				boolean retval = false;
				retval = (selected.getTrans_id().equals(m_p39116))
						& (selected.getSm_id().equals(m_p39117));
				return retval;
			}
		}

		Transition_c[] objs39114 = Transition_c.TransitionInstances(modelRoot,
				new Transition_c_test39115_c(getTrans_id(), getSm_id()));

		if (((objs39114.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"New State Transition", //$NON-NLS-1$
								"Consistency: Object: New State Transition: Association: 507: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39114.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: New State Transition: Association: 507: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39114.length), e);
			}
			retval = false;

		}

		// New State Transition is a subtype in association: rel.Numb = 504
		// The supertype class is: State Event Matrix Entry
		class StateEventMatrixEntry_c_test39119_c
				implements
					ClassQueryInterface_c {
			StateEventMatrixEntry_c_test39119_c(java.util.UUID p39120,
					java.util.UUID p39121, java.util.UUID p39122,
					java.util.UUID p39123) {
				m_p39120 = p39120;
				m_p39121 = p39121;
				m_p39122 = p39122;
				m_p39123 = p39123;
			}
			private java.util.UUID m_p39120;
			private java.util.UUID m_p39121;
			private java.util.UUID m_p39122;
			private java.util.UUID m_p39123;
			public boolean evaluate(Object candidate) {
				StateEventMatrixEntry_c selected = (StateEventMatrixEntry_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39120))
						& (selected.getSmstt_id().equals(m_p39121))
						& (selected.getSmevt_id().equals(m_p39122))
						& (selected.getSmspd_id().equals(m_p39123));
				return retval;
			}
		}

		StateEventMatrixEntry_c[] objs39118 = StateEventMatrixEntry_c
				.StateEventMatrixEntryInstances(modelRoot,
						new StateEventMatrixEntry_c_test39119_c(getSm_id(),
								getSmstt_id(), getSmevt_id(), getSmspd_id()));

		if (((objs39118.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"New State Transition", //$NON-NLS-1$
								"Consistency: Object: New State Transition: Association: 504: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39118.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: New State Transition: Association: 504: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39118.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text() {
		Ooaofooa.log.println(ILogger.OPERATION, "New State Transition",
				" Operation entered: NewStateTransition::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		SignalEvent_c v_signalEvt = SignalEvent_c
				.getOneSM_SGEVTOnR526(SemEvent_c
						.getOneSM_SEVTOnR503(StateEventMatrixEntry_c
								.getOneSM_SEMEOnR504(this)));

		if ((v_signalEvt != null)) {

			return v_signalEvt.Get_event_text();

		}

		else {

			StateMachineEvent_c v_evt = StateMachineEvent_c
					.getOneSM_EVTOnR525(SemEvent_c
							.getOneSM_SEVTOnR503(StateEventMatrixEntry_c
									.getOneSM_SEMEOnR504(this)));

			if (((v_evt != null))) {

				return v_evt.Get_event_text();

			}

			else {

				return Ooaofooa.Getorphanedelementname(modelRoot);

			}

		}

	} // End get_connector_text
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "New State Transition",
				" Operation entered: NewStateTransition::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		SignalEvent_c v_signalEvt = SignalEvent_c
				.getOneSM_SGEVTOnR526(SemEvent_c
						.getOneSM_SEVTOnR503(StateEventMatrixEntry_c
								.getOneSM_SEMEOnR504(this)));

		if ((v_signalEvt != null)) {

			return v_signalEvt.Get_name();

		}

		else {

			StateMachineEvent_c v_evt = StateMachineEvent_c
					.getOneSM_EVTOnR525(SemEvent_c
							.getOneSM_SEVTOnR503(StateEventMatrixEntry_c
									.getOneSM_SEMEOnR504(this)));

			if (((v_evt != null))) {

				return v_evt.Get_name();

			}

			else {

				return Ooaofooa.Getorphanedelementname(modelRoot);

			}

		}

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end New State Transition
