      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.RequiredOperation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_REQUIRED_OPERATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class RequiredOperation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public RequiredOperation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_action_semantics_internal,
       int  p_m_suc_pars)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       // default value for m_action_semantics
       m_action_semantics_internal = p_m_action_semantics_internal;
       m_suc_pars = p_m_suc_pars;
        
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public RequiredOperation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_action_semantics_internal,
       int  p_m_suc_pars, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);
      RequiredOperation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (RequiredOperation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       // default value for m_action_semantics
       new_inst.m_action_semantics_internal = p_m_action_semantics_internal;
       new_inst.m_suc_pars = p_m_suc_pars;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new RequiredOperation_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip,
p_m_action_semantics_internal,
p_m_suc_pars
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public RequiredOperation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_action_semantics_internal,
       int  p_m_suc_pars){
    InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);
    RequiredOperation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (RequiredOperation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       // default value for m_action_semantics
       source.m_action_semantics_internal = p_m_action_semantics_internal;
       source.m_suc_pars = p_m_suc_pars;
        
           return source ;
        }
      }
      // there is no instance matching the id
    RequiredOperation_c new_inst = new RequiredOperation_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip,
p_m_action_semantics_internal,
p_m_suc_pars
);
    return new_inst;
  }
  public RequiredOperation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_descrip = "";   
     m_action_semantics = "";   
     m_action_semantics_internal = "";   
     m_suc_pars = Parsestatus_c.OOA_UNINITIALIZED_ENUM;
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof RequiredOperation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof RequiredOperation_c)) {
           return false;
       }
       
       RequiredOperation_c me = (RequiredOperation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((RequiredOperation_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((RequiredOperation_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof RequiredOperation_c)) {
           return false;
       }
       
       RequiredOperation_c me = (RequiredOperation_c)elem;
      if (!getIdCachedValue().equals(((RequiredOperation_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private String       m_name ;
  private String       m_descrip ;
  private String       m_action_semantics ;
  private String       m_action_semantics_internal ;
  private int  m_suc_pars ;
      
// declare association references from this class
  
  
    
// referring navigation

RequiredExecutableProperty_c IsSupertypeRequiredExecutableProperty ;
public void relateAcrossR4502To(RequiredExecutableProperty_c target)
{
	relateAcrossR4502To(target, true);
}
public void relateAcrossR4502To(RequiredExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeRequiredExecutableProperty) return;  // already related

    if ( IsSupertypeRequiredExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeRequiredExecutableProperty != null) {
    
        IsSupertypeRequiredExecutableProperty.clearBackPointerR4502To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"RequiredOperation_c.relateAcrossR4502To(RequiredExecutableProperty_c target)", 
			"Relate performed across R4502 from Required Operation to Required Executable Property without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeRequiredExecutableProperty = target ;
        m_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4502To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4502", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4502From(RequiredExecutableProperty_c target)
{
	unrelateAcrossR4502From(target, true);
}
public void unrelateAcrossR4502From(RequiredExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeRequiredExecutableProperty == null) return;  // already unrelated
	
	if (target != IsSupertypeRequiredExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4502", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4502To(this);
    }
    

      if(IsSupertypeRequiredExecutableProperty != null) {
      
        m_id = IsSupertypeRequiredExecutableProperty.getId();
        IsSupertypeRequiredExecutableProperty = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4502", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static RequiredOperation_c getOneSPR_ROOnR4502(RequiredExecutableProperty_c [] targets)
{
    return getOneSPR_ROOnR4502(targets, null);
}

public static RequiredOperation_c getOneSPR_ROOnR4502(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    RequiredOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSPR_ROOnR4502(targets[i], test);
        }
    }

    return ret_val;
}

public static RequiredOperation_c getOneSPR_ROOnR4502(RequiredExecutableProperty_c target)
{
  return getOneSPR_ROOnR4502(target, null);
}

public static RequiredOperation_c getOneSPR_ROOnR4502(RequiredExecutableProperty_c target, boolean loadComponent)
{
    return getOneSPR_ROOnR4502(target.getModelRoot(), target, null, loadComponent);
}

public static RequiredOperation_c getOneSPR_ROOnR4502(RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSPR_ROOnR4502(target.getModelRoot(), target, test);
  }
  return null;
}

public static RequiredOperation_c getOneSPR_ROOnR4502(ModelRoot modelRoot, RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneSPR_ROOnR4502(modelRoot, target, test, true);
}

public static RequiredOperation_c getOneSPR_ROOnR4502(ModelRoot modelRoot, RequiredExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSPR_ROOnR4502(modelRoot,target,test);
}
private static RequiredOperation_c find_getOneSPR_ROOnR4502(ModelRoot modelRoot, RequiredExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    RequiredOperation_c source = (RequiredOperation_c)target.backPointer_IsSubtypeRequiredOperationIsSubtype_R4502;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static RequiredOperation_c [] getManySPR_ROsOnR4502(RequiredExecutableProperty_c [] targets)
{
  return getManySPR_ROsOnR4502(targets, null);
}
public static RequiredOperation_c [] getManySPR_ROsOnR4502(RequiredExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManySPR_ROsOnR4502(targets, null, loadComponent);
}
public static RequiredOperation_c [] getManySPR_ROsOnR4502(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManySPR_ROsOnR4502(targets, test, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR4502(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new RequiredOperation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      RequiredOperation_c source = (RequiredOperation_c)targets[i].backPointer_IsSubtypeRequiredOperationIsSubtype_R4502;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	RequiredOperation_c[] ret_set = new RequiredOperation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new RequiredOperation_c[0];
  }
  }

public static RequiredOperation_c [] getManySPR_ROsOnR4502(RequiredExecutableProperty_c target)
{
  if (target != null) {
    RequiredExecutableProperty_c [] targetArray = new RequiredExecutableProperty_c[1];
    targetArray[0] = target;
    return getManySPR_ROsOnR4502(targetArray);
  } else {
    RequiredOperation_c [] result = new RequiredOperation_c [0] ;
  return result ;
}
}

public static RequiredOperation_c [] getManySPR_ROsOnR4502(RequiredExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
    RequiredExecutableProperty_c [] targetArray = new RequiredExecutableProperty_c[1];
    targetArray[0] = target;
    return getManySPR_ROsOnR4502(targetArray, loadComponent);
  } else {
    RequiredOperation_c [] result = new RequiredOperation_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<InterfaceOperationInvocation_c> backPointer_InterfaceOperationInvocation_R657 = new ArrayList<InterfaceOperationInvocation_c>();

public void setInterfaceOperationInvocationOrderInChildListR657(InterfaceOperationInvocation_c target, int index) {
	unrelateAcrossR657From(target);
	InterfaceOperationInvocation_c[] elements = InterfaceOperationInvocation_c.getManyACT_IOPsOnR657(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR657From((InterfaceOperationInvocation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR657To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR657To((InterfaceOperationInvocation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR657To(InterfaceOperationInvocation_c target)
{
  if (target != null) {
    target.relateAcrossR657To(this, true) ;
  }
}

public void relateAcrossR657To(InterfaceOperationInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR657To(this, notifyChanges) ;
  }
}

public void setBackPointerR657To(InterfaceOperationInvocation_c target)
{
  	synchronized (backPointer_InterfaceOperationInvocation_R657) {
		backPointer_InterfaceOperationInvocation_R657.add(target);
	}
}

public void unrelateAcrossR657From(InterfaceOperationInvocation_c target)
{
  if (target != null) {
    target.unrelateAcrossR657From(this, true) ;
  }
}

public void unrelateAcrossR657From(InterfaceOperationInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR657From(this, notifyChanges) ;
  }
}

public void clearBackPointerR657To(InterfaceOperationInvocation_c target)
{
  synchronized (backPointer_InterfaceOperationInvocation_R657) {
	    backPointer_InterfaceOperationInvocation_R657.remove(target);
	}
}

public static RequiredOperation_c getOneSPR_ROOnR657(InterfaceOperationInvocation_c [] targets)
{
    return getOneSPR_ROOnR657(targets, null);
}

public static RequiredOperation_c getOneSPR_ROOnR657(InterfaceOperationInvocation_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_ROOnR657(targets, test, true);
}

public static RequiredOperation_c getOneSPR_ROOnR657(InterfaceOperationInvocation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    RequiredOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             RequiredOperation_c candidate_val = getOneSPR_ROOnR657(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_ROOnR657(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static RequiredOperation_c getOneSPR_ROOnR657(InterfaceOperationInvocation_c target)
{
	return getOneSPR_ROOnR657(target, true);
}
public static RequiredOperation_c getOneSPR_ROOnR657(InterfaceOperationInvocation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsInvocationOfRequiredOperation ;
  } else {
    return null;
  }
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_ROsOnR657(targets, test, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new RequiredOperation_c[0];
  
  
  LinkedHashSet<RequiredOperation_c> elementsSet = new LinkedHashSet<RequiredOperation_c>();
  for (int i = 0; i < targets.length; i++) {
    RequiredOperation_c associate = targets[i].IsInvocationOfRequiredOperation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  RequiredOperation_c[] result = new RequiredOperation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c [] targets)
{
  return getManySPR_ROsOnR657(targets, null);
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperationInvocation_c [] targetArray = new InterfaceOperationInvocation_c[1];
    targetArray[0] = target;
    return getManySPR_ROsOnR657(targetArray, test, loadComponent);
  } else {
    RequiredOperation_c [] result = new RequiredOperation_c [0] ;
    return result ;
  }
  
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_ROsOnR657(target, null, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c target)
{
    return getManySPR_ROsOnR657(target, null, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR657(InterfaceOperationInvocation_c target, boolean loadComponent)
{
    return getManySPR_ROsOnR657(target, null, loadComponent);
}


    
  
  
// referred to navigation

RequiredOperationBody_c backPointer_RequiredOperationBody_R685;

public void setRequiredOperationBodyOrderInChildListR685(RequiredOperationBody_c target, int index) {
	unrelateAcrossR685From(target);
	RequiredOperationBody_c[] elements = RequiredOperationBody_c.getManyACT_ROBsOnR685(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR685From((RequiredOperationBody_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR685To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR685To((RequiredOperationBody_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR685To(RequiredOperationBody_c target)
{
  if (target != null) {
    target.relateAcrossR685To(this, true) ;
  }
}

public void relateAcrossR685To(RequiredOperationBody_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR685To(this, notifyChanges) ;
  }
}

public void setBackPointerR685To(RequiredOperationBody_c target)
{
    backPointer_RequiredOperationBody_R685 = target;
}

public void unrelateAcrossR685From(RequiredOperationBody_c target)
{
  if (target != null) {
    target.unrelateAcrossR685From(this, true) ;
  }
}

public void unrelateAcrossR685From(RequiredOperationBody_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR685From(this, notifyChanges) ;
  }
}

public void clearBackPointerR685To(RequiredOperationBody_c target)
{
	if (target == backPointer_RequiredOperationBody_R685) {
		backPointer_RequiredOperationBody_R685 = null;
	}
}

public static RequiredOperation_c getOneSPR_ROOnR685(RequiredOperationBody_c [] targets)
{
    return getOneSPR_ROOnR685(targets, null);
}

public static RequiredOperation_c getOneSPR_ROOnR685(RequiredOperationBody_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_ROOnR685(targets, test, true);
}

public static RequiredOperation_c getOneSPR_ROOnR685(RequiredOperationBody_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    RequiredOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             RequiredOperation_c candidate_val = getOneSPR_ROOnR685(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_ROOnR685(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static RequiredOperation_c getOneSPR_ROOnR685(RequiredOperationBody_c target)
{
	return getOneSPR_ROOnR685(target, true);
}
public static RequiredOperation_c getOneSPR_ROOnR685(RequiredOperationBody_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SpecifiesProcessingForRequiredOperation ;
  } else {
    return null;
  }
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_ROsOnR685(targets, test, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new RequiredOperation_c[0];
  
  
  LinkedHashSet<RequiredOperation_c> elementsSet = new LinkedHashSet<RequiredOperation_c>();
  for (int i = 0; i < targets.length; i++) {
    RequiredOperation_c associate = targets[i].SpecifiesProcessingForRequiredOperation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  RequiredOperation_c[] result = new RequiredOperation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c [] targets)
{
  return getManySPR_ROsOnR685(targets, null);
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RequiredOperationBody_c [] targetArray = new RequiredOperationBody_c[1];
    targetArray[0] = target;
    return getManySPR_ROsOnR685(targetArray, test, loadComponent);
  } else {
    RequiredOperation_c [] result = new RequiredOperation_c [0] ;
    return result ;
  }
  
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_ROsOnR685(target, null, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c target)
{
    return getManySPR_ROsOnR685(target, null, true);
}

public static RequiredOperation_c [] getManySPR_ROsOnR685(RequiredOperationBody_c target, boolean loadComponent)
{
    return getManySPR_ROsOnR685(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R4502
      RequiredExecutableProperty_c relInst57110 = (RequiredExecutableProperty_c) baseRoot.getInstanceList(RequiredExecutableProperty_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57110 == null) {
      			relInst57110 = (RequiredExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(RequiredExecutableProperty_c.class).get(new Object[] {m_id});
      		}
			if (relInst57110 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57110 = (RequiredExecutableProperty_c) roots[i].getInstanceList(RequiredExecutableProperty_c.class).get(new Object[] {m_id});
					if (relInst57110 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57110 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57110) && !isProxy())) {
	      relInst57110.relateAcrossR4502To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4502
      // SPR_REP
		  inst=IsSupertypeRequiredExecutableProperty;
			unrelateAcrossR4502From(IsSupertypeRequiredExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final RequiredOperation_c inst = (RequiredOperation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static RequiredOperation_c RequiredOperationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		RequiredOperation_c result=findRequiredOperationInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,RequiredOperation_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findRequiredOperationInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static RequiredOperation_c findRequiredOperationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				RequiredOperation_c x = (RequiredOperation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static RequiredOperation_c RequiredOperationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return RequiredOperationInstance(modelRoot,test,true);
  }
  
  public static RequiredOperation_c RequiredOperationInstance(ModelRoot modelRoot)
  {
	 return RequiredOperationInstance(modelRoot,null,true);
  }

  public static RequiredOperation_c [] RequiredOperationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, RequiredOperation_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(RequiredOperation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					RequiredOperation_c x = (RequiredOperation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				RequiredOperation_c[] ret_set = new RequiredOperation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new RequiredOperation_c[0];
			}		
		} 
  }
  public static RequiredOperation_c [] RequiredOperationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  RequiredOperationInstances(modelRoot,test,true);
  }
  public static RequiredOperation_c [] RequiredOperationInstances(ModelRoot modelRoot)
  {
	return RequiredOperationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Required Operation.dispose call: ";
	RequiredExecutableProperty_c testR4502Inst2 = RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this, false);

	if ( testR4502Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4502 ";
	}
	InterfaceOperationInvocation_c testR657Inst = InterfaceOperationInvocation_c.getOneACT_IOPOnR657(this, false);

	if ( testR657Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "657 ";	
	}
	RequiredOperationBody_c testR685Inst = RequiredOperationBody_c.getOneACT_ROBOnR685(this, false);

	if ( testR685Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "685 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Required Operation", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if ( IsSupertypeRequiredExecutableProperty != null )
    {
      return IsSupertypeRequiredExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypeRequiredExecutableProperty != null )
    {
      return IsSupertypeRequiredExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeRequiredExecutableProperty != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_id)){
	        return;
	    }
	}else if(m_id != null){
	    if(m_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id", m_id, newValue,true); 
   m_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this));


InterfaceOperation_c v_operation = InterfaceOperation_c.getOneC_IOOnR4004(v_ep);


if ( (  (v_operation != null)) )
{

Setcachedname(			    
v_ep.getName() ) ;


return v_ep.getName();



}

else
{

if ( (  (v_ep != null)) )
{

return v_ep.Getcachedname();



}

else
{

return Getcachedname();



}


}


  }


  public String getDescrip()
  {
ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this));


InterfaceOperation_c v_operation = InterfaceOperation_c.getOneC_IOOnR4004(v_ep);


if ( (  (v_operation != null)) )
{

Setcacheddescrip(			    
v_ep.getDescrip() ) ;


return v_operation.getDescrip();



}

else
{

if ( (  (v_ep != null)) )
{

return v_ep.Getcacheddescrip();



}

else
{

return Getcacheddescrip();



}


}


  }


  public String getAction_semantics()
  {
ModelRoot modelRoot = getModelRoot();
return Ooaofooa.Convertrelocatabletags(modelRoot			    
,getAction_semantics_internal());



  }


  public String getAction_semantics_internal()
  {
    return m_action_semantics_internal ;
  }


  public void setAction_semantics_internal(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_action_semantics_internal)){
	        return;
	    }
	}else if(m_action_semantics_internal != null){
	    if(m_action_semantics_internal.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Action_semantics_internal", m_action_semantics_internal, newValue,true); 
   m_action_semantics_internal = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getSuc_pars()
  {
    return m_suc_pars ;
  }


  public void setSuc_pars(int newValue)
  {
    if(m_suc_pars == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Suc_pars", new Integer(m_suc_pars), new Integer(newValue),true);

   m_suc_pars = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Required Operation", //$NON-NLS-1$
	  " Operation entered: Required Operation::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     RequiredOperation_c [] objs = RequiredOperation_c.RequiredOperationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Required Operation", //$NON-NLS-1$
	  " Operation entered: Required Operation::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class RequiredOperation_c_test57112_c implements ClassQueryInterface_c
    {
	  RequiredOperation_c_test57112_c( java.util.UUID            p57113 ) {
	  m_p57113 = p57113;
	  }
	  private java.util.UUID             m_p57113; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredOperation_c selected = (RequiredOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57113));
	      return retval;
	  }
    }

    RequiredOperation_c [] objs57111 = 
    RequiredOperation_c.RequiredOperationInstances(modelRoot, new RequiredOperation_c_test57112_c(getId())) ;

    if ( (  (objs57111.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Operation", //$NON-NLS-1$
           "Consistency: Object: Required Operation: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57111.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Operation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57111.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57111.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Operation", //$NON-NLS-1$
           "Consistency: Object: Required Operation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57111.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Operation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57111.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Required Operation is a subtype in association: rel.Numb = 4502
          // The supertype class is: Required Executable Property
    class RequiredExecutableProperty_c_test57117_c implements ClassQueryInterface_c
    {
	  RequiredExecutableProperty_c_test57117_c( java.util.UUID            p57118 ) {
	  m_p57118 = p57118;
	  }
	  private java.util.UUID             m_p57118; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredExecutableProperty_c selected = (RequiredExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57118));
	      return retval;
	  }
    }

    RequiredExecutableProperty_c [] objs57116 = 
    RequiredExecutableProperty_c.RequiredExecutablePropertyInstances(modelRoot, new RequiredExecutableProperty_c_test57117_c(getId())) ;

    if ( (  (objs57116.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Operation", //$NON-NLS-1$
           "Consistency: Object: Required Operation: Association: 4502: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57116.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Operation: Association: 4502: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57116.length )  , e); 
      }
      retval = false;

    }

          // Required Operation is a participating class in association: rel.Numb = 657
             // Object: Interface Operation Invocation
          // Required Operation is a participating class in association: rel.Numb = 685
             // Object: Required Operation Body
    class RequiredOperationBody_c_test57120_c implements ClassQueryInterface_c
    {
	  RequiredOperationBody_c_test57120_c( java.util.UUID            p57121 ) {
	  m_p57121 = p57121;
	  }
	  private java.util.UUID             m_p57121; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredOperationBody_c selected = (RequiredOperationBody_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57121));
	      return retval;
	  }
    }

    RequiredOperationBody_c [] objs57119 = 
    RequiredOperationBody_c.RequiredOperationBodyInstances(modelRoot, new RequiredOperationBody_c_test57120_c(getId())) ;

    if ( (  (objs57119.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Required Operation", //$NON-NLS-1$
           "Consistency: Object: Required Operation: Association: 685: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57119.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Required Operation: Association: 685: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57119.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
setSuc_pars( Parsestatus_c.parseInitial) ;



   } // End initialize
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredExecutableProperty_c v_rep = RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this);


if ( (  (v_rep != null)) )
{

this.unrelateAcrossR4502From(v_rep);


if (v_rep != null) {
v_rep.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

RequiredOperationBody_c v_req_body = RequiredOperationBody_c.getOneACT_ROBOnR685(this);


if ( (  (v_req_body != null)) )
{

this.unrelateAcrossR685From(v_req_body);


if (v_req_body != null) {
v_req_body.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

InterfaceOperationInvocation_c [] v_invocations = InterfaceOperationInvocation_c.getManyACT_IOPsOnR657(this);


InterfaceOperationInvocation_c  v_iop = null;
for ( int i55321 = 0; i55321 < v_invocations.length; i55321++)
{
  v_iop = v_invocations[i55321] ;

this.unrelateAcrossR657From(v_iop);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  java.util.UUID         Getcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Getcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredExecutableProperty_c v_rep = RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this);


return v_rep.Getcomponentid();



   } // End getComponentId
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Converttoinstance") ; 
// just return this instance as an Object
return this;

   } // End convertToInstance
  public  int          Getmessagedirection()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Getmessagedirection") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceOperation_c v_operation = InterfaceOperation_c.getOneC_IOOnR4004(ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this)));


if ( (  (v_operation != null)) )
{

if ( (v_operation.getDirection() == Ifdirectiontype_c.ClientServer) )
{

return 0;



}

else if ( (v_operation.getDirection() == Ifdirectiontype_c.ServerClient) )
{

return 1;



}

else
{

return 2;



}


}

else
{

return -1;



}


   } // End getMessageDirection
  public  boolean      Issynchronized()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Issynchronized") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredExecutableProperty_c v_rep = RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this);


if ( (  (v_rep != null)) )
{

return v_rep.Issynchronized();



}

return true;



   } // End isSynchronized
  public  void Collectchanges(final Object p_Changelist)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Collectchanges") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Util_c.Createelementchange(			    
"removed"			    
,p_Changelist			    
,Converttoinstance()			    
,true ) ;



}


   } // End collectChanges
  public  void Synchronize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Synchronize") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Requirement_c v_requirement = Requirement_c.getOneC_ROnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR4502(this));


if ( (  (v_requirement != null)) )
{

if (v_requirement != null) {
v_requirement.Synchronize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End synchronize
  public  String       Getcachedname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Getcachedname") ; 
	return m_name;
   } // End getCachedName
  public  void Setcachedname(final String       p_Name)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Setcachedname") ; 
	m_name = p_Name;
   } // End setCachedName
  public  void Initializeunparsed()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Initializeunparsed") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredOperationBody_c v_rob = RequiredOperationBody_c.getOneACT_ROBOnR685(this);


if (   (v_rob == null) )
{

v_rob = new RequiredOperationBody_c(modelRoot) ;


  this.relateAcrossR685To(v_rob);



}

Body_c v_bdy = Body_c.getOneACT_ACTOnR698(v_rob);


if (   (v_bdy == null) )
{

v_bdy = new Body_c(modelRoot) ;


if (v_bdy != null) {
  v_bdy.relateAcrossR698To(v_rob);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

Block_c v_blk = Block_c.getOneACT_BLKOnR650(v_bdy);


if (   (v_blk == null) )
{

v_blk = new Block_c(modelRoot) ;


if (v_bdy != null) {
  v_bdy.relateAcrossR650To(v_blk);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_bdy != null) {
  v_bdy.relateAcrossR612To(v_blk);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End initializeUnparsed
  public  String       Getcacheddescrip()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Getcacheddescrip") ; 
	return m_descrip;
   } // End getCachedDescrip
  public  void Setcacheddescrip(final String       p_Descrip)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Required Operation", " Operation entered: RequiredOperation::Setcacheddescrip") ; 
	m_descrip = p_Descrip;
   } // End setCachedDescrip

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Required Operation
