      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ImportedClass_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_IMPORTED_CLASS extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ImportedClass_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ImportedClass_c(ModelRoot modelRoot,
       java.util.UUID         p_m_iobj_id,
       java.util.UUID         p_m_obj_id,
       int          p_m_modl_typ,
       java.util.UUID         p_m_ss_id,
       String       p_m_obj_name,
       String       p_m_obj_kl)
  {
    super(modelRoot);
       m_modl_typ = p_m_modl_typ;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       m_obj_name = p_m_obj_name;
       m_obj_kl = p_m_obj_kl;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
        
    setUniqueId(m_iobj_id);
    Object [] key = {m_iobj_id};
    addInstanceToMap(key);
  }
  static public ImportedClass_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_iobj_id,
       java.util.UUID         p_m_obj_id,
       int          p_m_modl_typ,
       java.util.UUID         p_m_ss_id,
       String       p_m_obj_name,
       String       p_m_obj_kl, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);
      ImportedClass_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_iobj_id};
          new_inst = (ImportedClass_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_modl_typ = p_m_modl_typ;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       new_inst.m_obj_name = p_m_obj_name;
       new_inst.m_obj_kl = p_m_obj_kl;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ImportedClass_c(modelRoot,
p_m_iobj_id,
p_m_obj_id,
p_m_modl_typ,
p_m_ss_id,
p_m_obj_name,
p_m_obj_kl
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ImportedClass_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_iobj_id,
       java.util.UUID         p_m_obj_id,
       int          p_m_modl_typ,
       java.util.UUID         p_m_ss_id,
       String       p_m_obj_name,
       String       p_m_obj_kl){
    InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);
    ImportedClass_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_iobj_id
            };
        source = (ImportedClass_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_modl_typ = p_m_modl_typ;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       source.m_obj_name = p_m_obj_name;
       source.m_obj_kl = p_m_obj_kl;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ImportedClass_c new_inst = new ImportedClass_c(modelRoot,
p_m_iobj_id,
p_m_obj_id,
p_m_modl_typ,
p_m_ss_id,
p_m_obj_name,
p_m_obj_kl
);
    return new_inst;
  }
  public ImportedClass_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_ss_id = IdAssigner.NULL_UUID;   
     m_obj_name = "";   
     m_obj_kl = "";   
     m_obj_id = IdAssigner.NULL_UUID;   
     m_iobj_id = idAssigner.createUUID();
    setUniqueId(m_iobj_id);
    Object [] key = {m_iobj_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_iobj_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_iobj_id !=  p_newKey ){
	
		m_iobj_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ImportedClass_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ImportedClass_c)) {
           return false;
       }
       
       ImportedClass_c me = (ImportedClass_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getIobj_id()) || IdAssigner.NULL_UUID.equals(((ImportedClass_c)elem).getIobj_id())) && this != elem)) {
      	return false;
      }
      if (!getIobj_id().equals(((ImportedClass_c)elem).getIobj_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ImportedClass_c)) {
           return false;
       }
       
       ImportedClass_c me = (ImportedClass_c)elem;
      if (!getIobj_idCachedValue().equals(((ImportedClass_c)elem).getIobj_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private int          m_modl_typ ;
  private java.util.UUID         m_ss_id ;
  private String       m_obj_name ;
  private String       m_obj_kl ;
  private java.util.UUID         m_obj_id ;
  private java.util.UUID         m_iobj_id ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ImportedClass_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Imported Class to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_iobj_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_iobj_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ImportedClass_c getOneO_IOBJOnR8001(PackageableElement_c [] targets)
{
    return getOneO_IOBJOnR8001(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_IOBJOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR8001(PackageableElement_c target)
{
  return getOneO_IOBJOnR8001(target, null);
}

public static ImportedClass_c getOneO_IOBJOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneO_IOBJOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static ImportedClass_c getOneO_IOBJOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_IOBJOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static ImportedClass_c getOneO_IOBJOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneO_IOBJOnR8001(modelRoot, target, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_IOBJOnR8001(modelRoot,target,test);
}
private static ImportedClass_c find_getOneO_IOBJOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ImportedClass_c source = (ImportedClass_c)target.backPointer_IsSubtypeImportedClassIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ImportedClass_c [] getManyO_IOBJsOnR8001(PackageableElement_c [] targets)
{
  return getManyO_IOBJsOnR8001(targets, null);
}
public static ImportedClass_c [] getManyO_IOBJsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyO_IOBJsOnR8001(targets, null, loadComponent);
}
public static ImportedClass_c [] getManyO_IOBJsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR8001(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ImportedClass_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ImportedClass_c source = (ImportedClass_c)targets[i].backPointer_IsSubtypeImportedClassIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ImportedClass_c[] ret_set = new ImportedClass_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ImportedClass_c[0];
  }
  }

public static ImportedClass_c [] getManyO_IOBJsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR8001(targetArray);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
  return result ;
}
}

public static ImportedClass_c [] getManyO_IOBJsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR8001(targetArray, loadComponent);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ModelClass_c RepresentsModelClass ;
public void relateAcrossR101To(ModelClass_c target)
{
	relateAcrossR101To(target, true);
}
public void relateAcrossR101To(ModelClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == RepresentsModelClass) return;  // already related

    if ( RepresentsModelClass != target ) {
    
    Object oldKey = getInstanceKey();

    if (RepresentsModelClass != null) {
        UmlProblem.removeXtUMLProblem(this, RepresentsModelClass);
    
        RepresentsModelClass.clearBackPointerR101To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ImportedClass_c.relateAcrossR101To(ModelClass_c target)", 
			"Relate performed across R101 from Imported Class to Model Class without unrelate of prior instance.");  
		}
    }
                
    	RepresentsModelClass = target ;
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR101To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "101", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR101From(ModelClass_c target)
{
	unrelateAcrossR101From(target, true);
}
public void unrelateAcrossR101From(ModelClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (RepresentsModelClass == null) return;  // already unrelated
	
	if (target != RepresentsModelClass) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R101", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR101To(this);
    }
    

      if(RepresentsModelClass != null) {
      
        m_obj_id = RepresentsModelClass.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = RepresentsModelClass.getObj_idCachedValue();
        }       
        RepresentsModelClass = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "101", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ImportedClass_c getOneO_IOBJOnR101(ModelClass_c [] targets)
{
    return getOneO_IOBJOnR101(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR101(ModelClass_c [] targets, ClassQueryInterface_c test)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_IOBJOnR101(targets[i], test);
        }
    }

    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR101(ModelClass_c target)
{
  return getOneO_IOBJOnR101(target, null);
}

public static ImportedClass_c getOneO_IOBJOnR101(ModelClass_c target, boolean loadComponent)
{
    return getOneO_IOBJOnR101(target.getModelRoot(), target, null, loadComponent);
}

public static ImportedClass_c getOneO_IOBJOnR101(ModelClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_IOBJOnR101(target.getModelRoot(), target, test);
  }
  return null;
}

public static ImportedClass_c getOneO_IOBJOnR101(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test)
{
	return getOneO_IOBJOnR101(modelRoot, target, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR101(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  ImportedClass_c result = null;
  
  result=find_getOneO_IOBJOnR101(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,ImportedClass_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneO_IOBJOnR101(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static ImportedClass_c find_getOneO_IOBJOnR101(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101) {
	    for ( int i = 0; i < target.backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101.size(); ++i ) {
	      ImportedClass_c source = (ImportedClass_c)target.backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c [] targets)
{
  return getManyO_IOBJsOnR101(targets, null);
}
public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c [] targets, boolean loadComponent)
{
  return getManyO_IOBJsOnR101(targets, null, loadComponent);
}
public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR101(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ImportedClass_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, ImportedClass_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101) {
	    for (int j = 0; j < targets[i].backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101.size(); ++j) {
	      ImportedClass_c source = (ImportedClass_c)targets[i].backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ImportedClass_c[] ret_set = new ImportedClass_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ImportedClass_c[0];
  }
  }

public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c target)
{
  return getManyO_IOBJsOnR101(target, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c target, boolean loadComponent)
{
  return getManyO_IOBJsOnR101(target, null, loadComponent);
}

public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c target, ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR101(target, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR101(ModelClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ImportedClass_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, ImportedClass_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101) {
    for (int i = 0; i < target.backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101.size(); ++i) {
      ImportedClass_c source = (ImportedClass_c)target.backPointer_HasPresenceInOtherSubsystemsImportedClassHasPresenceInOtherSubsystems_R101.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ImportedClass_c[] ret_set = new ImportedClass_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ImportedClass_c[0];
	}
  }


  
    
// referring navigation

Subsystem_c RepresentsAClassFromAnotherSubsystemInSubsystem ;
public void relateAcrossR3To(Subsystem_c target)
{
	relateAcrossR3To(target, true);
}
public void relateAcrossR3To(Subsystem_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == RepresentsAClassFromAnotherSubsystemInSubsystem) return;  // already related

    if ( RepresentsAClassFromAnotherSubsystemInSubsystem != target ) {
    
    Object oldKey = getInstanceKey();

    if (RepresentsAClassFromAnotherSubsystemInSubsystem != null) {
    
        RepresentsAClassFromAnotherSubsystemInSubsystem.clearBackPointerR3To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ImportedClass_c.relateAcrossR3To(Subsystem_c target)", 
			"Relate performed across R3 from Imported Class to Subsystem without unrelate of prior instance.");  
		}
    }
                
    	RepresentsAClassFromAnotherSubsystemInSubsystem = target ;
        m_ss_id = target.getSs_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR3To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "3", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR3From(Subsystem_c target)
{
	unrelateAcrossR3From(target, true);
}
public void unrelateAcrossR3From(Subsystem_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (RepresentsAClassFromAnotherSubsystemInSubsystem == null) return;  // already unrelated
	
	if (target != RepresentsAClassFromAnotherSubsystemInSubsystem) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R3", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR3To(this);
    }
    

      if(RepresentsAClassFromAnotherSubsystemInSubsystem != null) {
      
        m_ss_id = RepresentsAClassFromAnotherSubsystemInSubsystem.getSs_id();
        RepresentsAClassFromAnotherSubsystemInSubsystem = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "3", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ImportedClass_c getOneO_IOBJOnR3(Subsystem_c [] targets)
{
    return getOneO_IOBJOnR3(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR3(Subsystem_c [] targets, ClassQueryInterface_c test)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_IOBJOnR3(targets[i], test);
        }
    }

    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR3(Subsystem_c target)
{
  return getOneO_IOBJOnR3(target, null);
}

public static ImportedClass_c getOneO_IOBJOnR3(Subsystem_c target, boolean loadComponent)
{
    return getOneO_IOBJOnR3(target.getModelRoot(), target, null, loadComponent);
}

public static ImportedClass_c getOneO_IOBJOnR3(Subsystem_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_IOBJOnR3(target.getModelRoot(), target, test);
  }
  return null;
}

public static ImportedClass_c getOneO_IOBJOnR3(ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test)
{
	return getOneO_IOBJOnR3(modelRoot, target, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR3(ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_IOBJOnR3(modelRoot,target,test);
}
private static ImportedClass_c find_getOneO_IOBJOnR3(ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3) {
	    for ( int i = 0; i < target.backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.size(); ++i ) {
	      ImportedClass_c source = (ImportedClass_c)target.backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c [] targets)
{
  return getManyO_IOBJsOnR3(targets, null);
}
public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c [] targets, boolean loadComponent)
{
  return getManyO_IOBJsOnR3(targets, null, loadComponent);
}
public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR3(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ImportedClass_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3) {
	    for (int j = 0; j < targets[i].backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.size(); ++j) {
	      ImportedClass_c source = (ImportedClass_c)targets[i].backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ImportedClass_c[] ret_set = new ImportedClass_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ImportedClass_c[0];
  }
  }

public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c target)
{
  return getManyO_IOBJsOnR3(target, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c target, boolean loadComponent)
{
  return getManyO_IOBJsOnR3(target, null, loadComponent);
}

public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c target, ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR3(target, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR3(Subsystem_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ImportedClass_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3) {
    for (int i = 0; i < target.backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.size(); ++i) {
      ImportedClass_c source = (ImportedClass_c)target.backPointer_CanContainClasssFromOtherSubsystemsViaImportedClassCanContainClasssFromOtherSubsystemsVia_R3.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ImportedClass_c[] ret_set = new ImportedClass_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ImportedClass_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SmToSmCommPath_c> backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414 = new ArrayList<SmToSmCommPath_c>();

public void setSmToSmCommPathOrderInChildListR414(SmToSmCommPath_c target, int index) {
	unrelateAcrossR414From(target);
	SmToSmCommPath_c[] elements = SmToSmCommPath_c.getManyCA_SMSMCsOnR414(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR414From((SmToSmCommPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR414To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR414To((SmToSmCommPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR414To(SmToSmCommPath_c target)
{
  if (target != null) {
    target.relateAcrossR414To(this, true) ;
  }
}

public void relateAcrossR414To(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR414To(this, notifyChanges) ;
  }
}

public void setBackPointerR414To(SmToSmCommPath_c target)
{
  	synchronized (backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414) {
		backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.add(target);
	}
}

public void unrelateAcrossR414From(SmToSmCommPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR414From(this, true) ;
  }
}

public void unrelateAcrossR414From(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR414From(this, notifyChanges) ;
  }
}

public void clearBackPointerR414To(SmToSmCommPath_c target)
{
  synchronized (backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414) {
	    backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.remove(target);
	}
}

public static ImportedClass_c getOneO_IOBJOnR414(SmToSmCommPath_c [] targets)
{
    return getOneO_IOBJOnR414(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR414(SmToSmCommPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IOBJOnR414(targets, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR414(SmToSmCommPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ImportedClass_c candidate_val = getOneO_IOBJOnR414(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IOBJOnR414(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR414(SmToSmCommPath_c target)
{
	return getOneO_IOBJOnR414(target, true);
}
public static ImportedClass_c getOneO_IOBJOnR414(SmToSmCommPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.DestinationSmCanBeRepresentedByImportedClass ;
  } else {
    return null;
  }
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR414(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedClass_c[0];
  
  
  LinkedHashSet<ImportedClass_c> elementsSet = new LinkedHashSet<ImportedClass_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].DestinationSmCanBeRepresentedByImportedClass == null)
	  targets[i].loadProxy();
    ImportedClass_c associate = targets[i].DestinationSmCanBeRepresentedByImportedClass;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ImportedClass_c[] result = new ImportedClass_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c [] targets)
{
  return getManyO_IOBJsOnR414(targets, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToSmCommPath_c [] targetArray = new SmToSmCommPath_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR414(targetArray, test, loadComponent);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
    return result ;
  }
  
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IOBJsOnR414(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c target)
{
    return getManyO_IOBJsOnR414(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR414(SmToSmCommPath_c target, boolean loadComponent)
{
    return getManyO_IOBJsOnR414(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SmToObjAccessPath_c> backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420 = new ArrayList<SmToObjAccessPath_c>();

public void setSmToObjAccessPathOrderInChildListR420(SmToObjAccessPath_c target, int index) {
	unrelateAcrossR420From(target);
	SmToObjAccessPath_c[] elements = SmToObjAccessPath_c.getManyCA_SMOAsOnR420(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR420From((SmToObjAccessPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR420To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR420To((SmToObjAccessPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR420To(SmToObjAccessPath_c target)
{
  if (target != null) {
    target.relateAcrossR420To(this, true) ;
  }
}

public void relateAcrossR420To(SmToObjAccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR420To(this, notifyChanges) ;
  }
}

public void setBackPointerR420To(SmToObjAccessPath_c target)
{
  	synchronized (backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420) {
		backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.add(target);
	}
}

public void unrelateAcrossR420From(SmToObjAccessPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR420From(this, true) ;
  }
}

public void unrelateAcrossR420From(SmToObjAccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR420From(this, notifyChanges) ;
  }
}

public void clearBackPointerR420To(SmToObjAccessPath_c target)
{
  synchronized (backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420) {
	    backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.remove(target);
	}
}

public static ImportedClass_c getOneO_IOBJOnR420(SmToObjAccessPath_c [] targets)
{
    return getOneO_IOBJOnR420(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR420(SmToObjAccessPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IOBJOnR420(targets, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR420(SmToObjAccessPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ImportedClass_c candidate_val = getOneO_IOBJOnR420(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IOBJOnR420(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR420(SmToObjAccessPath_c target)
{
	return getOneO_IOBJOnR420(target, true);
}
public static ImportedClass_c getOneO_IOBJOnR420(SmToObjAccessPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.DestinationObjCanBeRepresentedByImportedClass ;
  } else {
    return null;
  }
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR420(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedClass_c[0];
  
  
  LinkedHashSet<ImportedClass_c> elementsSet = new LinkedHashSet<ImportedClass_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].DestinationObjCanBeRepresentedByImportedClass == null)
	  targets[i].loadProxy();
    ImportedClass_c associate = targets[i].DestinationObjCanBeRepresentedByImportedClass;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ImportedClass_c[] result = new ImportedClass_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c [] targets)
{
  return getManyO_IOBJsOnR420(targets, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToObjAccessPath_c [] targetArray = new SmToObjAccessPath_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR420(targetArray, test, loadComponent);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
    return result ;
  }
  
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IOBJsOnR420(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c target)
{
    return getManyO_IOBJsOnR420(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR420(SmToObjAccessPath_c target, boolean loadComponent)
{
    return getManyO_IOBJsOnR420(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SmToSmCommPath_c> backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424 = new ArrayList<SmToSmCommPath_c>();

public void setSmToSmCommPathOrderInChildListR424(SmToSmCommPath_c target, int index) {
	unrelateAcrossR424From(target);
	SmToSmCommPath_c[] elements = SmToSmCommPath_c.getManyCA_SMSMCsOnR424(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR424From((SmToSmCommPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR424To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR424To((SmToSmCommPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR424To(SmToSmCommPath_c target)
{
  if (target != null) {
    target.relateAcrossR424To(this, true) ;
  }
}

public void relateAcrossR424To(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR424To(this, notifyChanges) ;
  }
}

public void setBackPointerR424To(SmToSmCommPath_c target)
{
  	synchronized (backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424) {
		backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.add(target);
	}
}

public void unrelateAcrossR424From(SmToSmCommPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR424From(this, true) ;
  }
}

public void unrelateAcrossR424From(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR424From(this, notifyChanges) ;
  }
}

public void clearBackPointerR424To(SmToSmCommPath_c target)
{
  synchronized (backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424) {
	    backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.remove(target);
	}
}

public static ImportedClass_c getOneO_IOBJOnR424(SmToSmCommPath_c [] targets)
{
    return getOneO_IOBJOnR424(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR424(SmToSmCommPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IOBJOnR424(targets, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR424(SmToSmCommPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ImportedClass_c candidate_val = getOneO_IOBJOnR424(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IOBJOnR424(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR424(SmToSmCommPath_c target)
{
	return getOneO_IOBJOnR424(target, true);
}
public static ImportedClass_c getOneO_IOBJOnR424(SmToSmCommPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginationSmCanBeRepresentedByImportedClass ;
  } else {
    return null;
  }
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR424(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedClass_c[0];
  
  
  LinkedHashSet<ImportedClass_c> elementsSet = new LinkedHashSet<ImportedClass_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginationSmCanBeRepresentedByImportedClass == null)
	  targets[i].loadProxy();
    ImportedClass_c associate = targets[i].OriginationSmCanBeRepresentedByImportedClass;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ImportedClass_c[] result = new ImportedClass_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c [] targets)
{
  return getManyO_IOBJsOnR424(targets, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToSmCommPath_c [] targetArray = new SmToSmCommPath_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR424(targetArray, test, loadComponent);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
    return result ;
  }
  
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IOBJsOnR424(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c target)
{
    return getManyO_IOBJsOnR424(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR424(SmToSmCommPath_c target, boolean loadComponent)
{
    return getManyO_IOBJsOnR424(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<AccessPath_c> backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425 = new ArrayList<AccessPath_c>();

public void setAccessPathOrderInChildListR425(AccessPath_c target, int index) {
	unrelateAcrossR425From(target);
	AccessPath_c[] elements = AccessPath_c.getManyCA_ACCsOnR425(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR425From((AccessPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR425To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR425To((AccessPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR425To(AccessPath_c target)
{
  if (target != null) {
    target.relateAcrossR425To(this, true) ;
  }
}

public void relateAcrossR425To(AccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR425To(this, notifyChanges) ;
  }
}

public void setBackPointerR425To(AccessPath_c target)
{
  	synchronized (backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425) {
		backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425.add(target);
	}
}

public void unrelateAcrossR425From(AccessPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR425From(this, true) ;
  }
}

public void unrelateAcrossR425From(AccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR425From(this, notifyChanges) ;
  }
}

public void clearBackPointerR425To(AccessPath_c target)
{
  synchronized (backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425) {
	    backPointer_RepresentsOriginationObjForAccessPathRepresentsOriginationObjFor_R425.remove(target);
	}
}

public static ImportedClass_c getOneO_IOBJOnR425(AccessPath_c [] targets)
{
    return getOneO_IOBJOnR425(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR425(AccessPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IOBJOnR425(targets, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR425(AccessPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ImportedClass_c candidate_val = getOneO_IOBJOnR425(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IOBJOnR425(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR425(AccessPath_c target)
{
	return getOneO_IOBJOnR425(target, true);
}
public static ImportedClass_c getOneO_IOBJOnR425(AccessPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginationObjCanBeRepresentedByImportedClass ;
  } else {
    return null;
  }
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR425(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedClass_c[0];
  
  
  LinkedHashSet<ImportedClass_c> elementsSet = new LinkedHashSet<ImportedClass_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginationObjCanBeRepresentedByImportedClass == null)
	  targets[i].loadProxy();
    ImportedClass_c associate = targets[i].OriginationObjCanBeRepresentedByImportedClass;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ImportedClass_c[] result = new ImportedClass_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c [] targets)
{
  return getManyO_IOBJsOnR425(targets, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AccessPath_c [] targetArray = new AccessPath_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR425(targetArray, test, loadComponent);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
    return result ;
  }
  
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IOBJsOnR425(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c target)
{
    return getManyO_IOBJsOnR425(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR425(AccessPath_c target, boolean loadComponent)
{
    return getManyO_IOBJsOnR425(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ClassInAssociation_c> backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202 = new ArrayList<ClassInAssociation_c>();

public void setClassInAssociationOrderInChildListR202(ClassInAssociation_c target, int index) {
	unrelateAcrossR202From(target);
	ClassInAssociation_c[] elements = ClassInAssociation_c.getManyR_OIRsOnR202(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR202From((ClassInAssociation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR202To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR202To((ClassInAssociation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR202To(ClassInAssociation_c target)
{
  if (target != null) {
    target.relateAcrossR202To(this, true) ;
  }
}

public void relateAcrossR202To(ClassInAssociation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR202To(this, notifyChanges) ;
  }
}

public void setBackPointerR202To(ClassInAssociation_c target)
{
  	synchronized (backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202) {
		backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202.add(target);
	}
}

public void unrelateAcrossR202From(ClassInAssociation_c target)
{
  if (target != null) {
    target.unrelateAcrossR202From(this, true) ;
  }
}

public void unrelateAcrossR202From(ClassInAssociation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR202From(this, notifyChanges) ;
  }
}

public void clearBackPointerR202To(ClassInAssociation_c target)
{
  synchronized (backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202) {
	    backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202.remove(target);
	}
}

public static ImportedClass_c getOneO_IOBJOnR202(ClassInAssociation_c [] targets)
{
    return getOneO_IOBJOnR202(targets, null);
}

public static ImportedClass_c getOneO_IOBJOnR202(ClassInAssociation_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IOBJOnR202(targets, test, true);
}

public static ImportedClass_c getOneO_IOBJOnR202(ClassInAssociation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ImportedClass_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ImportedClass_c candidate_val = getOneO_IOBJOnR202(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IOBJOnR202(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ImportedClass_c getOneO_IOBJOnR202(ClassInAssociation_c target)
{
	return getOneO_IOBJOnR202(target, true);
}
public static ImportedClass_c getOneO_IOBJOnR202(ClassInAssociation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.MayBeRepresentedByImportedClass != null){
		target.MayBeRepresentedByImportedClass.loadProxy();
	}
	}
    return target.MayBeRepresentedByImportedClass ;
  } else {
    return null;
  }
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IOBJsOnR202(targets, test, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedClass_c[0];
  
  
  LinkedHashSet<ImportedClass_c> elementsSet = new LinkedHashSet<ImportedClass_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].MayBeRepresentedByImportedClass == null)
	  targets[i].loadProxy();
    ImportedClass_c associate = targets[i].MayBeRepresentedByImportedClass;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ImportedClass_c[] result = new ImportedClass_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c [] targets)
{
  return getManyO_IOBJsOnR202(targets, null);
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassInAssociation_c [] targetArray = new ClassInAssociation_c[1];
    targetArray[0] = target;
    return getManyO_IOBJsOnR202(targetArray, test, loadComponent);
  } else {
    ImportedClass_c [] result = new ImportedClass_c [0] ;
    return result ;
  }
  
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IOBJsOnR202(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c target)
{
    return getManyO_IOBJsOnR202(target, null, true);
}

public static ImportedClass_c [] getManyO_IOBJsOnR202(ClassInAssociation_c target, boolean loadComponent)
{
    return getManyO_IOBJsOnR202(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst38694 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_iobj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38694 == null) {
      			relInst38694 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_iobj_id});
      		}
			if (relInst38694 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38694 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_iobj_id});
					if (relInst38694 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38694 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38694) && !isProxy())) {
	      relInst38694.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          

	if (RepresentsModelClass == null) {          
      // R101
      ModelClass_c relInst38695 = (ModelClass_c) baseRoot.getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38695 == null) {
      			relInst38695 = (ModelClass_c) Ooaofooa.getDefaultInstance().getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
      		}
			if (relInst38695 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38695 = (ModelClass_c) roots[i].getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
					if (relInst38695 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38695 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38695) && !isProxy())) {
	      relInst38695.relateAcrossR101To(this, notifyChanges);
	  }
	  }
	}
	          

	if (RepresentsAClassFromAnotherSubsystemInSubsystem == null) {          
      // R3
      Subsystem_c relInst38696 = (Subsystem_c) baseRoot.getInstanceList(Subsystem_c.class).get(new Object[] {m_ss_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38696 == null) {
      			relInst38696 = (Subsystem_c) Ooaofooa.getDefaultInstance().getInstanceList(Subsystem_c.class).get(new Object[] {m_ss_id});
      		}
			if (relInst38696 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38696 = (Subsystem_c) roots[i].getInstanceList(Subsystem_c.class).get(new Object[] {m_ss_id});
					if (relInst38696 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38696 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38696) && !isProxy())) {
	      relInst38696.relateAcrossR3To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R101
      // O_OBJ
		  inst=RepresentsModelClass;
			unrelateAcrossR101From(RepresentsModelClass, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R3
      // S_SS
		  inst=RepresentsAClassFromAnotherSubsystemInSubsystem;
			unrelateAcrossR3From(RepresentsAClassFromAnotherSubsystemInSubsystem, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ImportedClass_c inst = (ImportedClass_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ImportedClass_c ImportedClassInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ImportedClass_c result=findImportedClassInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ImportedClass_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findImportedClassInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ImportedClass_c findImportedClassInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ImportedClass_c x = (ImportedClass_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ImportedClass_c ImportedClassInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ImportedClassInstance(modelRoot,test,true);
  }
  
  public static ImportedClass_c ImportedClassInstance(ModelRoot modelRoot)
  {
	 return ImportedClassInstance(modelRoot,null,true);
  }

  public static ImportedClass_c [] ImportedClassInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ImportedClass_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ImportedClass_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ImportedClass_c x = (ImportedClass_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ImportedClass_c[] ret_set = new ImportedClass_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ImportedClass_c[0];
			}		
		} 
  }
  public static ImportedClass_c [] ImportedClassInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ImportedClassInstances(modelRoot,test,true);
  }
  public static ImportedClass_c [] ImportedClassInstances(ModelRoot modelRoot)
  {
	return ImportedClassInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Imported Class.dispose call: ";
	PackageableElement_c testR8001Inst14 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst14 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
	ModelClass_c testR101Inst = ModelClass_c.getOneO_OBJOnR101(this, false);

	if ( testR101Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "101 ";
	}
	Subsystem_c testR3Inst = Subsystem_c.getOneS_SSOnR3(this, false);

	if ( testR3Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "3 ";
	}
	SmToSmCommPath_c testR414Inst = SmToSmCommPath_c.getOneCA_SMSMCOnR414(this, false);

	if ( testR414Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "414 ";	
	}
	SmToObjAccessPath_c testR420Inst = SmToObjAccessPath_c.getOneCA_SMOAOnR420(this, false);

	if ( testR420Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "420 ";	
	}
	SmToSmCommPath_c testR424Inst = SmToSmCommPath_c.getOneCA_SMSMCOnR424(this, false);

	if ( testR424Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "424 ";	
	}
	AccessPath_c testR425Inst = AccessPath_c.getOneCA_ACCOnR425(this, false);

	if ( testR425Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "425 ";	
	}
	ClassInAssociation_c testR202Inst = ClassInAssociation_c.getOneR_OIROnR202(this, false);

	if ( testR202Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "202 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Imported Class", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("ss_id")){
         return true;
      }
      if(attributeName.equals("obj_id")){
         return true;
      }
      if(attributeName.equals("iobj_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getIobj_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIobj_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public int getModl_typ()
  {
    return m_modl_typ ;
  }


  public void setModl_typ(int newValue)
  {
    if(m_modl_typ == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Modl_typ", new Integer(m_modl_typ), new Integer(newValue),true);

   m_modl_typ = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSs_idLongBased()
  {
    if ( RepresentsAClassFromAnotherSubsystemInSubsystem != null )
    {
      return RepresentsAClassFromAnotherSubsystemInSubsystem.getSs_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSs_id()
  {
    if ( RepresentsAClassFromAnotherSubsystemInSubsystem != null )
    {
      return RepresentsAClassFromAnotherSubsystemInSubsystem.getSs_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSs_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_ss_id) )
      return m_ss_id;
    else
      return getSs_id();
  }
  
  public void setSs_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_ss_id)){
	        return;
	    }
	}else if(m_ss_id != null){
	    if(m_ss_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ss_id", m_ss_id, newValue,true); 
   m_ss_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getObj_name()
  {
ModelRoot modelRoot = getModelRoot();
ModelClass_c v_model_class = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_model_class == null)) )
{

return "Unassigned Imported Class";



}

else
{

return v_model_class.getName();



}


  }


  public String getObj_kl()
  {
ModelRoot modelRoot = getModelRoot();
ModelClass_c v_model_class = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_model_class == null)) )
{

return Ooaofooa.Getorphanedelementkl(modelRoot);



}

else
{

return v_model_class.getKey_lett();



}


  }


  public long getObj_idLongBased()
  {
    if ( RepresentsModelClass != null )
    {
      return RepresentsModelClass.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getObj_id()
  {
    if ( RepresentsModelClass != null )
    {
      return RepresentsModelClass.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getObj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_obj_id) )
      return m_obj_id;
    else
      return getObj_id();
  }
  
  public void setObj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_obj_id)){
	        return;
	    }
	}else if(m_obj_id != null){
	    if(m_obj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Obj_id", m_obj_id, newValue,true); 
   m_obj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIobj_idLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getIobj_id()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_iobj_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getIobj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_iobj_id) )
      return m_iobj_id;
    else
      return getIobj_id();
  }
  
  public void setIobj_id(java.util.UUID newValue)
  {
   m_iobj_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Imported Class", //$NON-NLS-1$
	  " Operation entered: Imported Class::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ImportedClass_c [] objs = ImportedClass_c.ImportedClassInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Imported Class", //$NON-NLS-1$
	  " Operation entered: Imported Class::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ImportedClass_c_test38698_c implements ClassQueryInterface_c
    {
	  ImportedClass_c_test38698_c( java.util.UUID            p38699 ) {
	  m_p38699 = p38699;
	  }
	  private java.util.UUID             m_p38699; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedClass_c selected = (ImportedClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIobj_id().equals(m_p38699));
	      return retval;
	  }
    }

    ImportedClass_c [] objs38697 = 
    ImportedClass_c.ImportedClassInstances(modelRoot, new ImportedClass_c_test38698_c(getIobj_id())) ;

    if ( (  (objs38697.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Class", //$NON-NLS-1$
           "Consistency: Object: Imported Class: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38697.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Class: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38697.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38697.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Class", //$NON-NLS-1$
           "Consistency: Object: Imported Class: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38697.length )  + " IObj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Class: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38697.length )  + " IObj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Imported Class is a referring class in association: rel.Numb = 3
          // The participating class is: Subsystem
    class Subsystem_c_test38703_c implements ClassQueryInterface_c
    {
	  Subsystem_c_test38703_c( java.util.UUID            p38704 ) {
	  m_p38704 = p38704;
	  }
	  private java.util.UUID             m_p38704; 
	  public boolean evaluate (Object candidate)
	  {
	      Subsystem_c selected = (Subsystem_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSs_id().equals(m_p38704));
	      return retval;
	  }
    }

    Subsystem_c [] objs38702 = 
    Subsystem_c.SubsystemInstances(modelRoot, new Subsystem_c_test38703_c(getSs_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs38702.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Class", //$NON-NLS-1$
           "Consistency: Object: Imported Class: Association: 3: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38702.length )  + " SS_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Class: Association: 3: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38702.length )  + " SS_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Imported Class is a referring class in association: rel.Numb = 101
          // The participating class is: Model Class
    class ModelClass_c_test38706_c implements ClassQueryInterface_c
    {
	  ModelClass_c_test38706_c( java.util.UUID            p38707 ) {
	  m_p38707 = p38707;
	  }
	  private java.util.UUID             m_p38707; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelClass_c selected = (ModelClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getObj_id().equals(m_p38707));
	      return retval;
	  }
    }

    ModelClass_c [] objs38705 = 
    ModelClass_c.ModelClassInstances(modelRoot, new ModelClass_c_test38706_c(getObj_id())) ;

    if ( (  (objs38705.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Class", //$NON-NLS-1$
           "Consistency: Object: Imported Class: Association: 101: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38705.length )  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Class: Association: 101: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38705.length )  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Imported Class is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Imported Class is a participating class in association: rel.Numb = 414
             // Object: SM to SM Comm Path
          // Imported Class is a participating class in association: rel.Numb = 420
             // Object: SM to OBJ Access Path
          // Imported Class is a participating class in association: rel.Numb = 424
             // Object: SM to SM Comm Path
          // Imported Class is a participating class in association: rel.Numb = 425
             // Object: Access Path
          // Imported Class is a participating class in association: rel.Numb = 202
             // Object: Class In Association
    return retval;
  }


  // declare transform functions
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_cl = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_cl != null)) )
{

return v_cl.Get_style();



}

else
{

return Style_c.None;



}


   } // End get_style
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_cl = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_cl != null)) )
{

return v_cl.Get_compartments();



}

else
{

return 1;



}


   } // End get_compartments
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_cl = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_cl != null)) )
{

if ( (p_Comp_num == 1) )
{

if ( (p_Ent_num == 1) )
{

if ( (p_At == Justification_c.Center_in_X) )
{

return v_cl.Getpath(			    
true			    
,"");



}


}


}

return v_cl.Get_compartment_text(			    
p_At			    
,p_Comp_num			    
,p_Ent_num);



}

else
{

if ( (p_Comp_num == 1) )
{

if ( (p_Ent_num == 1) )
{

if ( (p_At == Justification_c.Center_in_X) )
{

return "Unassigned Imported Class";



}


}


}

return "";



}


   } // End get_compartment_text
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_cl = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_cl != null)) )
{

int          v_entries = v_cl.Get_entries(			    
p_Comp_num) ;


if ( (p_Comp_num == 1) )
{

v_entries = v_entries + 1 ;



}

return v_entries;



}

else
{

return 1;



}


   } // End get_entries
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_cl = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_cl != null)) )
{

return v_cl.Get_text_style(			    
p_At			    
,p_Comp_num			    
,p_Ent_num);



}

else
{

return Style_c.None;



}


   } // End get_text_style
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getIobj_id();



   } // End get_ooa_id
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_realObj = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_realObj != null)) )
{

this.unrelateAcrossR101From(v_realObj);



}

ClassInAssociation_c [] v_oirs = ClassInAssociation_c.getManyR_OIRsOnR202(this);


ClassInAssociation_c  v_oir = null;
for ( int i37113 = 0; i37113 < v_oirs.length; i37113++)
{
  v_oir = v_oirs[i37113] ;

Association_c v_assoc = Association_c.getOneR_RELOnR201(v_oir);


if (   (v_assoc != null) )
{

if ( v_realObj.Isessentialtoassoc(			    
v_assoc.getRel_id()) )
{

if (v_assoc != null) {
v_assoc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if (v_oir != null) {
v_oir.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

else
{

if (v_oir != null) {
v_oir.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

Subsystem_c v_ss = Subsystem_c.getOneS_SSOnR3(this);


if ( (  (v_ss != null)) )
{

this.unrelateAcrossR3From(v_ss);



}

AccessPath_c [] v_oaps = AccessPath_c.getManyCA_ACCsOnR425(this);


AccessPath_c  v_oap = null;
for ( int i37114 = 0; i37114 < v_oaps.length; i37114++)
{
  v_oap = v_oaps[i37114] ;

if (v_oap != null) {
v_oap.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

AccessPath_c [] v_daps = AccessPath_c.getManyCA_ACCsOnR415(SmToObjAccessPath_c.getManyCA_SMOAsOnR420(this));


AccessPath_c  v_dap = null;
for ( int i37115 = 0; i37115 < v_daps.length; i37115++)
{
  v_dap = v_daps[i37115] ;

if (v_dap != null) {
v_dap.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_dcps = CommunicationPath_c.getManyCA_COMMsOnR401(SmToSmCommPath_c.getManyCA_SMSMCsOnR414(this));


CommunicationPath_c  v_dcp = null;
for ( int i37116 = 0; i37116 < v_dcps.length; i37116++)
{
  v_dcp = v_dcps[i37116] ;

if (v_dcp != null) {
v_dcp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_ocps = CommunicationPath_c.getManyCA_COMMsOnR401(SmToSmCommPath_c.getManyCA_SMSMCsOnR424(this));


CommunicationPath_c  v_ocp = null;
for ( int i37117 = 0; i37117 < v_ocps.length; i37117++)
{
  v_ocp = v_ocps[i37117] ;

if (v_ocp != null) {
v_ocp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


if ( (  (v_pe != null)) )
{

this.unrelateAcrossR8001From(v_pe);


if (v_pe != null) {
v_pe.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_obj != null)) )
{

return v_obj.getName();



}

else
{

return "Unassigned Imported Class";



}


   } // End get_name
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("unassigned")) )
{

ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_obj != null)) )
{

return false;



}

PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( (p_Value.equals("generic pkg")) )
{

if ( (  !v_isInGenericPackage) )
{

return false;



}

if ( (  (v_package != null)) )
{

if (v_package != null) {
v_package.Clearscope() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_package != null) {
v_package.Collectvisibleelementsforname(			    
false			    
,Gd_c.Null_unique_id()			    
,false			    
,""			    
,v_package.getPackage_id()			    
,Elementtypeconstants_c.CLASS ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


  class SearchResultSet_test37523_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		SearchResultSet_c selected = (SearchResultSet_c)candidate;
		return (selected.getType() == Elementtypeconstants_c.CLASS) ;
	}
  }
SearchResultSet_c [] v_srs = SearchResultSet_c.getManyPE_SRSsOnR8005(v_package, new SearchResultSet_test37523_c());


PackageableElement_c [] v_pes = PackageableElement_c.getManyPE_PEsOnR8002(ElementVisibility_c.getManyPE_VISsOnR8006(v_srs));


return   (v_pes.length) != 0;



}


}

else if ( (p_Value.equals("spec pkg")) )
{

return (  !v_isInGenericPackage);



}


}

return false;



   } // End actionFilter
  public  boolean      Getelidecompartmenttextatend(final int          p_Compartmentnum,final int          p_Entrynum)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Getelidecompartmenttextatend") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR101(this);


boolean      v_elideAtFront = false ;


v_elideAtFront = p_Compartmentnum == 1 && p_Entrynum == 1 &&   (v_clazz != null) ;


return   !v_elideAtFront;



   } // End getElideCompartmentTextAtEnd
  public  void Resolvemodelclass()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Resolvemodelclass") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_proxyClass = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_proxyClass != null) &&   !Util_c.Isproxy(			    
Converttoinstance())) )
{

PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( (v_isInGenericPackage) )
{

ModelClass_c v_clazz = v_proxyClass ;


if ( (  (v_package == null)) )
{

java.util.UUID         v_rootCompIdInPkg = v_component.Getrootcomponentid() ;


Component_c v_rootComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_rootCompIdInPkg);


v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_rootComponent));



}

  class ModelClass_test37524_c implements ClassQueryInterface_c
  {
	ModelClass_test37524_c( String       p37525, String       p37526 ) {
		m_p37525 = p37525;
				m_p37526 = p37526;
	}
	private String       m_p37525;
		private String       m_p37526;
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getKey_lett().equals(m_p37525) && selected.getName().equals(m_p37526)) ;
	}
  }
v_clazz = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(SystemModel_c.getManyS_SYSsOnR1405(v_package))), new ModelClass_test37524_c(v_proxyClass.getKey_lett(), v_proxyClass.getName()));


if ( (  (v_clazz == null)) )
{

  class ModelClass_test37527_c implements ClassQueryInterface_c
  {
	ModelClass_test37527_c( String       p37528 ) {
		m_p37528 = p37528;
	}
	private String       m_p37528;
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getKey_lett().equals(m_p37528)) ;
	}
  }
v_clazz = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(SystemModel_c.getManyS_SYSsOnR1405(v_package))), new ModelClass_test37527_c(v_proxyClass.getKey_lett()));


if ( (  (v_clazz == null)) )
{

  class ModelClass_test37529_c implements ClassQueryInterface_c
  {
	ModelClass_test37529_c( String       p37530 ) {
		m_p37530 = p37530;
	}
	private String       m_p37530;
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getName().equals(m_p37530)) ;
	}
  }
v_clazz = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(SystemModel_c.getManyS_SYSsOnR1405(v_package))), new ModelClass_test37529_c(v_proxyClass.getName()));



}


}

boolean      v_classResolved =   (v_clazz != null) ;


if ( (v_classResolved) )
{

  this.relateAcrossR101To(v_clazz);


ClassInAssociation_c [] v_cias = ClassInAssociation_c.getManyR_OIRsOnR202(this);


ClassInAssociation_c  v_cia = null;
for ( int i37118 = 0; i37118 < v_cias.length; i37118++)
{
  v_cia = v_cias[i37118] ;

ModelClass_c v_existingClass = ModelClass_c.getOneO_OBJOnR201(v_cia);


Association_c v_assoc = Association_c.getOneR_RELOnR201(v_cia);


if ( (v_existingClass != v_clazz) )
{

if (v_cia != null) {
v_cia.unrelateAcrossR201From( v_existingClass ) ; v_cia.unrelateAcrossR201From( v_assoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_cia != null) {
  v_cia.relateAcrossR201To( v_clazz ) ;   v_cia.relateAcrossR201To( v_assoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


}

Association_c [] v_assocs = Association_c.getManyR_RELsOnR201(ClassInAssociation_c.getManyR_OIRsOnR202(this));


Association_c  v_assoc = null;
for ( int i37119 = 0; i37119 < v_assocs.length; i37119++)
{
  v_assoc = v_assocs[i37119] ;

if ( (v_assoc.Isformalized()) )
{

if (v_assoc != null) {
v_assoc.Unformalize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}

else
{

Association_c [] v_assocs = Association_c.getManyR_RELsOnR201(ClassInAssociation_c.getManyR_OIRsOnR202(this));


Association_c  v_assoc = null;
for ( int i37120 = 0; i37120 < v_assocs.length; i37120++)
{
  v_assoc = v_assocs[i37120] ;

if (v_assoc != null) {
v_assoc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

return ;



}

Subsystem_c v_ss = Subsystem_c.getOneS_SSOnR2(v_proxyClass);


if ( (  (v_ss == null) || Util_c.Isproxy(			    
v_ss.Converttoinstance())) )
{

String       v_name = v_proxyClass.getName() ;


String       v_key_letters = v_proxyClass.getKey_lett() ;


this.unrelateAcrossR101From(v_proxyClass);


Subsystem_c v_otherSS = Subsystem_c.getOneS_SSOnR3(this);


Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


  class ModelClass_test37531_c implements ClassQueryInterface_c
  {
	ModelClass_test37531_c( String       p37532, String       p37533, java.util.UUID         p37534 ) {
		m_p37532 = p37532;
				m_p37533 = p37533;
				m_p37534 = p37534;
	}
	private String       m_p37532;
		private String       m_p37533;
		private java.util.UUID         m_p37534;
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getKey_lett().equals(m_p37532) && selected.getName().equals(m_p37533) && ! selected.getSs_id().equals(m_p37534)) ;
	}
  }
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR2(Subsystem_c.getManyS_SSsOnR1(v_domain), new ModelClass_test37531_c(v_key_letters, v_name, v_otherSS.getSs_id()));


if ( (  (v_clazz == null)) )
{

  class ModelClass_test37535_c implements ClassQueryInterface_c
  {
	ModelClass_test37535_c( String       p37536, java.util.UUID         p37537 ) {
		m_p37536 = p37536;
				m_p37537 = p37537;
	}
	private String       m_p37536;
		private java.util.UUID         m_p37537;
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getKey_lett().equals(m_p37536) && ! selected.getSs_id().equals(m_p37537)) ;
	}
  }
v_clazz = ModelClass_c.getOneO_OBJOnR2(Subsystem_c.getManyS_SSsOnR1(v_domain), new ModelClass_test37535_c(v_key_letters, v_otherSS.getSs_id()));


if ( (  (v_clazz == null)) )
{

  class ModelClass_test37538_c implements ClassQueryInterface_c
  {
	ModelClass_test37538_c( String       p37539, java.util.UUID         p37540 ) {
		m_p37539 = p37539;
				m_p37540 = p37540;
	}
	private String       m_p37539;
		private java.util.UUID         m_p37540;
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getName().equals(m_p37539) && ! selected.getSs_id().equals(m_p37540)) ;
	}
  }
v_clazz = ModelClass_c.getOneO_OBJOnR2(Subsystem_c.getManyS_SSsOnR1(v_domain), new ModelClass_test37538_c(v_name, v_otherSS.getSs_id()));



}


}

boolean      v_classResolved =   (v_clazz != null) ;


v_ss = Subsystem_c.getOneS_SSOnR2(v_clazz);


if ( (v_ss == v_otherSS) )
{

v_classResolved = false ;



}

if ( (v_classResolved) )
{

  this.relateAcrossR101To(v_clazz);


ClassInAssociation_c [] v_cias = ClassInAssociation_c.getManyR_OIRsOnR202(this);


ClassInAssociation_c  v_cia = null;
for ( int i37121 = 0; i37121 < v_cias.length; i37121++)
{
  v_cia = v_cias[i37121] ;

ModelClass_c v_existingClass = ModelClass_c.getOneO_OBJOnR201(v_cia);


Association_c v_assoc = Association_c.getOneR_RELOnR201(v_cia);


if ( (v_existingClass != v_clazz) )
{

if (v_cia != null) {
v_cia.unrelateAcrossR201From( v_existingClass ) ; v_cia.unrelateAcrossR201From( v_assoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_cia != null) {
  v_cia.relateAcrossR201To( v_clazz ) ;   v_cia.relateAcrossR201To( v_assoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


}

Association_c [] v_assocs = Association_c.getManyR_RELsOnR201(ClassInAssociation_c.getManyR_OIRsOnR202(this));


Association_c  v_assoc = null;
for ( int i37122 = 0; i37122 < v_assocs.length; i37122++)
{
  v_assoc = v_assocs[i37122] ;

if ( (v_assoc.Isformalized()) )
{

if (v_assoc != null) {
v_assoc.Unformalize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}

else
{

String       v_message = Ooaofooa.Getmissingclassmessage(modelRoot) ;


Util_c.Addpastedelementtoproblemlist(			    
getObj_name() + "::" + getObj_kl()			    
,v_message ) ;


Association_c [] v_assocs = Association_c.getManyR_RELsOnR201(ClassInAssociation_c.getManyR_OIRsOnR202(this));


Association_c  v_assoc = null;
for ( int i37123 = 0; i37123 < v_assocs.length; i37123++)
{
  v_assoc = v_assocs[i37123] ;

if (v_assoc != null) {
v_assoc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


}


   } // End resolveModelClass
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  boolean      Canassigntoclass(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Canassigntoclass") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


if ( (  (v_package == null)) )
{

Component_c v_rootComponent = Component_c.getOneC_COnR8003(v_packageableElem);


if ( (  (v_rootComponent != null)) )
{

java.util.UUID         v_rootCompIdInPkg = v_rootComponent.Getrootcomponentid() ;


v_rootComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_rootCompIdInPkg);


v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_rootComponent));



}


}

boolean      v_isInGenericPackage =   (v_package != null) ;


if ( (v_isInGenericPackage) )
{

PackageableElement_c v_candidatePe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, p_Id);


if (   (v_candidatePe != null) )
{

Package_c v_candidatePkg = Package_c.getOneEP_PKGOnR8000(v_candidatePe);


if ( (  (v_candidatePkg == null)) )
{

Component_c v_candidateComp = Component_c.getOneC_COnR8003(v_candidatePe);


if ( (  (v_candidateComp != null)) )
{

java.util.UUID         v_rootCompIdInPkg = v_candidateComp.Getrootcomponentid() ;


Component_c v_rootCandidateComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_rootCompIdInPkg);


v_candidatePkg = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_rootCandidateComponent));



}


}

if (   (v_package != null) &&   (v_candidatePkg != null) )
{

return v_package != v_candidatePkg;



}

return true;



}


}

else
{

ModelClass_c v_candidateClass = (ModelClass_c) modelRoot.getInstanceList(ModelClass_c.class).getGlobal(null, p_Id);


Subsystem_c v_subsystem = Subsystem_c.getOneS_SSOnR3(this);


Subsystem_c v_candidateContainerSS = Subsystem_c.getOneS_SSOnR2(v_candidateClass);


if (   (v_subsystem != null) &&   (v_candidateContainerSS != null) )
{

return v_subsystem != v_candidateContainerSS;



}


}

return false;



   } // End canAssignToClass
  public  Object Getconfigurationinheritanceelementid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Class", " Operation entered: ImportedClass::Getconfigurationinheritanceelementid") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_importedClass = ModelClass_c.getOneO_OBJOnR101(this);


if ( (  (v_importedClass != null)) )
{

return v_importedClass.Converttoinstance();



}

return Converttoinstance();



   } // End getConfigurationInheritanceElementId

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return ImportedClassActionFilter.getSingleton();
    }
	  return null;
  }
} // end Imported Class
