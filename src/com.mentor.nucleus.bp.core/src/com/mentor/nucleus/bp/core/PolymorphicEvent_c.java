      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.PolymorphicEvent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_POLYMORPHIC_EVENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class PolymorphicEvent_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public PolymorphicEvent_c(ModelRoot modelRoot,
       java.util.UUID         p_m_smevt_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smspd_id,
       String       p_m_localclassname,
       String       p_m_localclasskl,
       String       p_m_localeventmning)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
       m_localclassname = p_m_localclassname;
       m_localclasskl = p_m_localclasskl;
       m_localeventmning = p_m_localeventmning;
        
    Object [] key = {m_sm_id,m_smevt_id};
    addInstanceToMap(key);
  }
  static public PolymorphicEvent_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_smevt_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smspd_id,
       String       p_m_localclassname,
       String       p_m_localclasskl,
       String       p_m_localeventmning, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);
      PolymorphicEvent_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_sm_id,p_m_smevt_id};
          new_inst = (PolymorphicEvent_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
       new_inst.m_localclassname = p_m_localclassname;
       new_inst.m_localclasskl = p_m_localclasskl;
       new_inst.m_localeventmning = p_m_localeventmning;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new PolymorphicEvent_c(modelRoot,
p_m_smevt_id,
p_m_sm_id,
p_m_smspd_id,
p_m_localclassname,
p_m_localclasskl,
p_m_localeventmning
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public PolymorphicEvent_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_smevt_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smspd_id,
       String       p_m_localclassname,
       String       p_m_localclasskl,
       String       p_m_localeventmning){
    InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);
    PolymorphicEvent_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_sm_id
        ,
        p_m_smevt_id
            };
        source = (PolymorphicEvent_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
       source.m_localclassname = p_m_localclassname;
       source.m_localclasskl = p_m_localclasskl;
       source.m_localeventmning = p_m_localeventmning;
        
           return source ;
        }
      }
      // there is no instance matching the id
    PolymorphicEvent_c new_inst = new PolymorphicEvent_c(modelRoot,
p_m_smevt_id,
p_m_sm_id,
p_m_smspd_id,
p_m_localclassname,
p_m_localclasskl,
p_m_localeventmning
);
    return new_inst;
  }
  public PolymorphicEvent_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_smevt_id = IdAssigner.NULL_UUID;   
     m_sm_id = IdAssigner.NULL_UUID;   
     m_smspd_id = IdAssigner.NULL_UUID;   
     m_localclassname = "";   
     m_localclasskl = "";   
     m_localeventmning = "";   
    Object [] key = {m_sm_id,m_smevt_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_sm_id,m_smevt_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_sm_id !=  p_newKey ){
	
		m_sm_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof PolymorphicEvent_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof PolymorphicEvent_c)) {
           return false;
       }
       
       PolymorphicEvent_c me = (PolymorphicEvent_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID.equals(((PolymorphicEvent_c)elem).getSm_id())) && this != elem)) {
      	return false;
      }
      if (!getSm_id().equals(((PolymorphicEvent_c)elem).getSm_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID.equals(((PolymorphicEvent_c)elem).getSmevt_id())) && this != elem)) {
      	return false;
      }
      if (!getSmevt_id().equals(((PolymorphicEvent_c)elem).getSmevt_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof PolymorphicEvent_c)) {
           return false;
       }
       
       PolymorphicEvent_c me = (PolymorphicEvent_c)elem;
      if (!getSm_idCachedValue().equals(((PolymorphicEvent_c)elem).getSm_idCachedValue())) return false;
      if (!getSmevt_idCachedValue().equals(((PolymorphicEvent_c)elem).getSmevt_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_smevt_id ;
  private java.util.UUID         m_sm_id ;
  private java.util.UUID         m_smspd_id ;
  private String       m_localclassname ;
  private String       m_localclasskl ;
  private String       m_localeventmning ;
      
// declare association references from this class
  
  
    
// referring navigation

StateMachineEvent_c IsSupertypeStateMachineEvent ;
public void relateAcrossR525To(StateMachineEvent_c target)
{
	relateAcrossR525To(target, true);
}
public void relateAcrossR525To(StateMachineEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeStateMachineEvent) return;  // already related

    if ( IsSupertypeStateMachineEvent != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeStateMachineEvent != null) {
    
        IsSupertypeStateMachineEvent.clearBackPointerR525To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PolymorphicEvent_c.relateAcrossR525To(StateMachineEvent_c target)", 
			"Relate performed across R525 from Polymorphic Event to State Machine Event without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeStateMachineEvent = target ;
        m_smevt_id = target.getSmevt_id();
        if(IdAssigner.NULL_UUID.equals(target.getSm_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_sm_id = target.getSm_idCachedValue();
        }
        if(IdAssigner.NULL_UUID.equals(target.getSmspd_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_smspd_id = target.getSmspd_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR525To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "525", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR525From(StateMachineEvent_c target)
{
	unrelateAcrossR525From(target, true);
}
public void unrelateAcrossR525From(StateMachineEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeStateMachineEvent == null) return;  // already unrelated
	
	if (target != IsSupertypeStateMachineEvent) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R525", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR525To(this);
    }
    

      if(IsSupertypeStateMachineEvent != null) {
      
        m_smevt_id = IsSupertypeStateMachineEvent.getSmevt_id();
        m_sm_id = IsSupertypeStateMachineEvent.getSm_id();
        if(IdAssigner.NULL_UUID.equals(m_sm_id))
        {
          m_sm_id = IsSupertypeStateMachineEvent.getSm_idCachedValue();
        }       
        m_smspd_id = IsSupertypeStateMachineEvent.getSmspd_id();
        if(IdAssigner.NULL_UUID.equals(m_smspd_id))
        {
          m_smspd_id = IsSupertypeStateMachineEvent.getSmspd_idCachedValue();
        }       
        IsSupertypeStateMachineEvent = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "525", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PolymorphicEvent_c getOneSM_PEVTOnR525(StateMachineEvent_c [] targets)
{
    return getOneSM_PEVTOnR525(targets, null);
}

public static PolymorphicEvent_c getOneSM_PEVTOnR525(StateMachineEvent_c [] targets, ClassQueryInterface_c test)
{
    PolymorphicEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSM_PEVTOnR525(targets[i], test);
        }
    }

    return ret_val;
}

public static PolymorphicEvent_c getOneSM_PEVTOnR525(StateMachineEvent_c target)
{
  return getOneSM_PEVTOnR525(target, null);
}

public static PolymorphicEvent_c getOneSM_PEVTOnR525(StateMachineEvent_c target, boolean loadComponent)
{
    return getOneSM_PEVTOnR525(target.getModelRoot(), target, null, loadComponent);
}

public static PolymorphicEvent_c getOneSM_PEVTOnR525(StateMachineEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSM_PEVTOnR525(target.getModelRoot(), target, test);
  }
  return null;
}

public static PolymorphicEvent_c getOneSM_PEVTOnR525(ModelRoot modelRoot, StateMachineEvent_c target, ClassQueryInterface_c test)
{
	return getOneSM_PEVTOnR525(modelRoot, target, test, true);
}

public static PolymorphicEvent_c getOneSM_PEVTOnR525(ModelRoot modelRoot, StateMachineEvent_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSM_PEVTOnR525(modelRoot,target,test);
}
private static PolymorphicEvent_c find_getOneSM_PEVTOnR525(ModelRoot modelRoot, StateMachineEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    PolymorphicEvent_c source = (PolymorphicEvent_c)target.backPointer_IsSubtypePolymorphicEventIsSubtype_R525;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR525(StateMachineEvent_c [] targets)
{
  return getManySM_PEVTsOnR525(targets, null);
}
public static PolymorphicEvent_c [] getManySM_PEVTsOnR525(StateMachineEvent_c [] targets, boolean loadComponent)
{
  return getManySM_PEVTsOnR525(targets, null, loadComponent);
}
public static PolymorphicEvent_c [] getManySM_PEVTsOnR525(StateMachineEvent_c [] targets, ClassQueryInterface_c test)
{
	return getManySM_PEVTsOnR525(targets, test, true);
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR525(StateMachineEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PolymorphicEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      PolymorphicEvent_c source = (PolymorphicEvent_c)targets[i].backPointer_IsSubtypePolymorphicEventIsSubtype_R525;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	PolymorphicEvent_c[] ret_set = new PolymorphicEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PolymorphicEvent_c[0];
  }
  }

public static PolymorphicEvent_c [] getManySM_PEVTsOnR525(StateMachineEvent_c target)
{
  if (target != null) {
    StateMachineEvent_c [] targetArray = new StateMachineEvent_c[1];
    targetArray[0] = target;
    return getManySM_PEVTsOnR525(targetArray);
  } else {
    PolymorphicEvent_c [] result = new PolymorphicEvent_c [0] ;
  return result ;
}
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR525(StateMachineEvent_c target, boolean loadComponent)
{
  if (target != null) {
    StateMachineEvent_c [] targetArray = new StateMachineEvent_c[1];
    targetArray[0] = target;
    return getManySM_PEVTsOnR525(targetArray, loadComponent);
  } else {
    PolymorphicEvent_c [] result = new PolymorphicEvent_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<NonLocalEvent_c> backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527 = new ArrayList<NonLocalEvent_c>();

public void setNonLocalEventOrderInChildListR527(NonLocalEvent_c target, int index) {
	unrelateAcrossR527From(target);
	NonLocalEvent_c[] elements = NonLocalEvent_c.getManySM_NLEVTsOnR527(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR527From((NonLocalEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR527To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR527To((NonLocalEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR527To(NonLocalEvent_c target)
{
  if (target != null) {
    target.relateAcrossR527To(this, true) ;
  }
}

public void relateAcrossR527To(NonLocalEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR527To(this, notifyChanges) ;
  }
}

public void setBackPointerR527To(NonLocalEvent_c target)
{
  	synchronized (backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527) {
		backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527.add(target);
	}
}

public void unrelateAcrossR527From(NonLocalEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR527From(this, true) ;
  }
}

public void unrelateAcrossR527From(NonLocalEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR527From(this, notifyChanges) ;
  }
}

public void clearBackPointerR527To(NonLocalEvent_c target)
{
  synchronized (backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527) {
	    backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527.remove(target);
	}
}

public static PolymorphicEvent_c getOneSM_PEVTOnR527(NonLocalEvent_c [] targets)
{
    return getOneSM_PEVTOnR527(targets, null);
}

public static PolymorphicEvent_c getOneSM_PEVTOnR527(NonLocalEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_PEVTOnR527(targets, test, true);
}

public static PolymorphicEvent_c getOneSM_PEVTOnR527(NonLocalEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    PolymorphicEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             PolymorphicEvent_c candidate_val = getOneSM_PEVTOnR527(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_PEVTOnR527(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static PolymorphicEvent_c getOneSM_PEVTOnR527(NonLocalEvent_c target)
{
	return getOneSM_PEVTOnR527(target, true);
}
public static PolymorphicEvent_c getOneSM_PEVTOnR527(NonLocalEvent_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByPolymorphicEvent != null){
		target.IsDefinedByPolymorphicEvent.loadProxy();
	}
	}
    return target.IsDefinedByPolymorphicEvent ;
  } else {
    return null;
  }
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_PEVTsOnR527(targets, test, true);
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new PolymorphicEvent_c[0];
  
  
  LinkedHashSet<PolymorphicEvent_c> elementsSet = new LinkedHashSet<PolymorphicEvent_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByPolymorphicEvent == null)
	  targets[i].loadProxy();
    PolymorphicEvent_c associate = targets[i].IsDefinedByPolymorphicEvent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  PolymorphicEvent_c[] result = new PolymorphicEvent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c [] targets)
{
  return getManySM_PEVTsOnR527(targets, null);
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    NonLocalEvent_c [] targetArray = new NonLocalEvent_c[1];
    targetArray[0] = target;
    return getManySM_PEVTsOnR527(targetArray, test, loadComponent);
  } else {
    PolymorphicEvent_c [] result = new PolymorphicEvent_c [0] ;
    return result ;
  }
  
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c target,
    ClassQueryInterface_c test)
{
    return getManySM_PEVTsOnR527(target, null, true);
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c target)
{
    return getManySM_PEVTsOnR527(target, null, true);
}

public static PolymorphicEvent_c [] getManySM_PEVTsOnR527(NonLocalEvent_c target, boolean loadComponent)
{
    return getManySM_PEVTsOnR527(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R525
	  instances = baseRoot.getInstanceList(StateMachineEvent_c.class);
      StateMachineEvent_c relInst39055 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           StateMachineEvent_c source = (StateMachineEvent_c)cursor.next() ;
           if (     source.getSm_idCachedValue().equals(m_sm_id) && 
     source.getSmevt_id().equals(m_smevt_id) && 
     source.getSmspd_idCachedValue().equals(m_smspd_id) 		){
  		relInst39055 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst39055 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst39055) && !isProxy())) {
	      relInst39055.relateAcrossR525To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R525
      // SM_EVT
		  inst=IsSupertypeStateMachineEvent;
			unrelateAcrossR525From(IsSupertypeStateMachineEvent, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final PolymorphicEvent_c inst = (PolymorphicEvent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static PolymorphicEvent_c PolymorphicEventInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		PolymorphicEvent_c result=findPolymorphicEventInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,PolymorphicEvent_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findPolymorphicEventInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static PolymorphicEvent_c findPolymorphicEventInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				PolymorphicEvent_c x = (PolymorphicEvent_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static PolymorphicEvent_c PolymorphicEventInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return PolymorphicEventInstance(modelRoot,test,true);
  }
  
  public static PolymorphicEvent_c PolymorphicEventInstance(ModelRoot modelRoot)
  {
	 return PolymorphicEventInstance(modelRoot,null,true);
  }

  public static PolymorphicEvent_c [] PolymorphicEventInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, PolymorphicEvent_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(PolymorphicEvent_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					PolymorphicEvent_c x = (PolymorphicEvent_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				PolymorphicEvent_c[] ret_set = new PolymorphicEvent_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new PolymorphicEvent_c[0];
			}		
		} 
  }
  public static PolymorphicEvent_c [] PolymorphicEventInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  PolymorphicEventInstances(modelRoot,test,true);
  }
  public static PolymorphicEvent_c [] PolymorphicEventInstances(ModelRoot modelRoot)
  {
	return PolymorphicEventInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Polymorphic Event.dispose call: ";
	StateMachineEvent_c testR525Inst2 = StateMachineEvent_c.getOneSM_EVTOnR525(this, false);

	if ( testR525Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "525 ";
	}
	NonLocalEvent_c testR527Inst = NonLocalEvent_c.getOneSM_NLEVTOnR527(this, false);

	if ( testR527Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "527 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Polymorphic Event", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("smevt_id")){
         return true;
      }
      if(attributeName.equals("sm_id")){
         return true;
      }
      if(attributeName.equals("smspd_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getSm_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getSm_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getSmevt_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getSmevt_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getSmevt_idLongBased()
  {
    if ( IsSupertypeStateMachineEvent != null )
    {
      return IsSupertypeStateMachineEvent.getSmevt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSmevt_id()
  {
    if ( IsSupertypeStateMachineEvent != null )
    {
      return IsSupertypeStateMachineEvent.getSmevt_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeStateMachineEvent != null );
 
 }                  

  public java.util.UUID getSmevt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_smevt_id) )
      return m_smevt_id;
    else
      return getSmevt_id();
  }
  
  public void setSmevt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_smevt_id)){
	        return;
	    }
	}else if(m_smevt_id != null){
	    if(m_smevt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Smevt_id", m_smevt_id, newValue,true); 
   m_smevt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSm_idLongBased()
  {
    if ( IsSupertypeStateMachineEvent != null )
    {
      return IsSupertypeStateMachineEvent.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSm_id()
  {
    if ( IsSupertypeStateMachineEvent != null )
    {
      return IsSupertypeStateMachineEvent.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sm_id) )
      return m_sm_id;
    else
      return getSm_id();
  }
  
  public void setSm_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_sm_id)){
	        return;
	    }
	}else if(m_sm_id != null){
	    if(m_sm_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id", m_sm_id, newValue,true); 
   m_sm_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSmspd_idLongBased()
  {
    if ( IsSupertypeStateMachineEvent != null )
    {
      return IsSupertypeStateMachineEvent.getSmspd_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSmspd_id()
  {
    if ( IsSupertypeStateMachineEvent != null )
    {
      return IsSupertypeStateMachineEvent.getSmspd_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSmspd_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_smspd_id) )
      return m_smspd_id;
    else
      return getSmspd_id();
  }
  
  public void setSmspd_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_smspd_id)){
	        return;
	    }
	}else if(m_smspd_id != null){
	    if(m_smspd_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Smspd_id", m_smspd_id, newValue,true); 
   m_smspd_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getLocalclassname()
  {
ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(this))));


if ( (  (v_clazz == null)) )
{

v_clazz = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(this))));



}

if ( (  (v_clazz != null)) )
{

Setcachedlocalclassname(			    
v_clazz.getName() ) ;


return v_clazz.getName();



}

else
{

return Getcachedlocalclassname();



}


  }


  public String getLocalclasskl()
  {
ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(this))));


if ( (  (v_clazz == null)) )
{

v_clazz = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(this))));



}

if ( (  (v_clazz != null)) )
{

Setcachedlocalclasskl(			    
v_clazz.getKey_lett() ) ;


return v_clazz.getKey_lett();



}

else
{

return Getcachedlocalclasskl();



}


  }


  public String getLocaleventmning()
  {
ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR525(this);


if ( (  (v_evt != null)) )
{

Setcachedlocaleventmning(			    
v_evt.getMning() ) ;


return v_evt.getMning();



}

else
{

return Getcachedlocaleventmning();



}


  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Polymorphic Event", //$NON-NLS-1$
	  " Operation entered: Polymorphic Event::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     PolymorphicEvent_c [] objs = PolymorphicEvent_c.PolymorphicEventInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Polymorphic Event", //$NON-NLS-1$
	  " Operation entered: Polymorphic Event::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class PolymorphicEvent_c_test39057_c implements ClassQueryInterface_c
    {
	  PolymorphicEvent_c_test39057_c( java.util.UUID            p39058, java.util.UUID            p39059 ) {
	       m_p39058 = p39058; 
m_p39059 = p39059;
	  }
	  private java.util.UUID             m_p39058; private java.util.UUID             m_p39059; 
	  public boolean evaluate (Object candidate)
	  {
	      PolymorphicEvent_c selected = (PolymorphicEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p39058)) & (selected.getSmevt_id().equals(m_p39059));
	      return retval;
	  }
    }

    PolymorphicEvent_c [] objs39056 = 
    PolymorphicEvent_c.PolymorphicEventInstances(modelRoot, new PolymorphicEvent_c_test39057_c(getSm_id(), getSmevt_id())) ;

    if ( (  (objs39056.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Polymorphic Event", //$NON-NLS-1$
           "Consistency: Object: Polymorphic Event: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs39056.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Polymorphic Event: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39056.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs39056.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Polymorphic Event", //$NON-NLS-1$
           "Consistency: Object: Polymorphic Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39056.length )  + " SM_ID: " + "Not Printable"  + " SMevt_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Polymorphic Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39056.length )  + " SM_ID: " + "Not Printable"  + " SMevt_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Polymorphic Event is a subtype in association: rel.Numb = 525
          // The supertype class is: State Machine Event
    class StateMachineEvent_c_test39063_c implements ClassQueryInterface_c
    {
	  StateMachineEvent_c_test39063_c( java.util.UUID            p39064, java.util.UUID            p39065, java.util.UUID            p39066 ) {
	            m_p39064 = p39064; 
m_p39065 = p39065; 
m_p39066 = p39066;
	  }
	  private java.util.UUID             m_p39064; private java.util.UUID             m_p39065; private java.util.UUID             m_p39066; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachineEvent_c selected = (StateMachineEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSmevt_id().equals(m_p39064)) & (selected.getSm_id().equals(m_p39065)) & (selected.getSmspd_id().equals(m_p39066));
	      return retval;
	  }
    }

    StateMachineEvent_c [] objs39062 = 
    StateMachineEvent_c.StateMachineEventInstances(modelRoot, new StateMachineEvent_c_test39063_c(getSmevt_id(), getSm_id(), getSmspd_id())) ;

    if ( (  (objs39062.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Polymorphic Event", //$NON-NLS-1$
           "Consistency: Object: Polymorphic Event: Association: 525: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs39062.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Polymorphic Event: Association: 525: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39062.length )  , e); 
      }
      retval = false;

    }

          // Polymorphic Event is a participating class in association: rel.Numb = 527
             // Object: Non Local Event
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR525(this);


this.unrelateAcrossR525From(v_evt);


NonLocalEvent_c [] v_nlevts = NonLocalEvent_c.getManySM_NLEVTsOnR527(this);


NonLocalEvent_c  v_nlevt = null;
for ( int i37211 = 0; i37211 < v_nlevts.length; i37211++)
{
  v_nlevt = v_nlevts[i37211] ;

this.unrelateAcrossR527From(v_nlevt);


if (v_nlevt != null) {
v_nlevt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End dispose
  public  java.util.UUID         Createnonlocaleventforstatemachine(final java.util.UUID         p_Statemachineid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Createnonlocaleventforstatemachine") ; 
               final ModelRoot modelRoot = getModelRoot();
NonLocalEvent_c v_nonlocalEvent = new NonLocalEvent_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_nonlocalEvent));


if (v_nonlocalEvent != null) {
  v_nonlocalEvent.relateAcrossR527To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


SemEvent_c v_matrixEvent = new SemEvent_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_matrixEvent));


if (v_matrixEvent != null) {
  v_matrixEvent.relateAcrossR526To(v_nonlocalEvent);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


StateMachineEvent_c v_newEvent = new StateMachineEvent_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_newEvent));


if (v_newEvent != null) {
  v_newEvent.relateAcrossR525To(v_matrixEvent);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


StateMachineEvent_c v_event = StateMachineEvent_c.getOneSM_EVTOnR525(this);


if (v_newEvent != null) {
  v_newEvent.setNumb( v_event.getNumb()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_newEvent != null) {
  v_newEvent.setMning( v_event.getMning()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_newEvent != null) {
  v_newEvent.setIs_lbl_u( v_event.getIs_lbl_u()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_newEvent != null) {
  v_newEvent.setUnq_lbl( v_event.getUnq_lbl()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_newEvent != null) {
  v_newEvent.setDescrip( v_event.getDescrip()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


StateMachine_c v_machine = (StateMachine_c) modelRoot.getInstanceList(StateMachine_c.class).getGlobal(null, p_Statemachineid);


if (v_newEvent != null) {
  v_newEvent.relateAcrossR502To(v_machine);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_matrixEvent != null) {
v_matrixEvent.Createdefaultmatrixentries() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return v_newEvent.getSmevt_id();



   } // End createNonLocalEventForStateMachine
  public  void Migratetolocalevent()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Migratetolocalevent") ; 
               final ModelRoot modelRoot = getModelRoot();
NonLocalEvent_c [] v_aliases = NonLocalEvent_c.getManySM_NLEVTsOnR527(this);


if ( (  (v_aliases.length == 0)) )
{

StateMachineEvent_c v_event = StateMachineEvent_c.getOneSM_EVTOnR525(this);


Dispose() ;


SemEvent_c v_matrixEvent = new SemEvent_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_matrixEvent));


if (v_matrixEvent != null) {
  v_matrixEvent.relateAcrossR525To(v_event);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_matrixEvent != null) {
v_matrixEvent.Createdefaultmatrixentries() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


LocalEvent_c v_localEvent = new LocalEvent_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_localEvent));


if (v_localEvent != null) {
  v_localEvent.relateAcrossR526To(v_matrixEvent);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End migrateToLocalEvent
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  String       Getcachedlocalclassname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Getcachedlocalclassname") ; 
	return m_localclassname;
   } // End getCachedLocalClassName
  public  String       Getcachedlocalclasskl()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Getcachedlocalclasskl") ; 
	return m_localclasskl;
   } // End getCachedLocalClassKL
  public  void Setcachedlocalclassname(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Setcachedlocalclassname") ; 
	m_localclassname = p_Value;
   } // End setCachedLocalClassName
  public  void Setcachedlocalclasskl(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Setcachedlocalclasskl") ; 
	m_localclasskl = p_Value;
   } // End setCachedLocalClassKL
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return getLocaleventmning();



   } // End get_name
  public  String       Getcachedlocaleventmning()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Getcachedlocaleventmning") ; 
	return m_localeventmning;
   } // End getCachedLocalEventMning
  public  void Setcachedlocaleventmning(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Polymorphic Event", " Operation entered: PolymorphicEvent::Setcachedlocaleventmning") ; 
	m_localeventmning = p_Value;
   } // End setCachedLocalEventMning

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Polymorphic Event
