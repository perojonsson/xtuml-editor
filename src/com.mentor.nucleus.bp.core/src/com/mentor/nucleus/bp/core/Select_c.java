package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Select_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SELECT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Select_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Select_c(ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_var_id, boolean p_m_is_implicit,
			String p_m_cardinality, java.util.UUID p_m_value_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
		m_is_implicit = p_m_is_implicit;
		m_cardinality = p_m_cardinality;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public Select_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_var_id,
			boolean p_m_is_implicit, String p_m_cardinality,
			java.util.UUID p_m_value_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Select_c.class);
		Select_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (Select_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
				new_inst.m_is_implicit = p_m_is_implicit;
				new_inst.m_cardinality = p_m_cardinality;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Select_c(modelRoot, p_m_statement_id, p_m_var_id,
					p_m_is_implicit, p_m_cardinality, p_m_value_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Select_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_var_id,
			boolean p_m_is_implicit, String p_m_cardinality,
			java.util.UUID p_m_value_id) {
		InstanceList instances = modelRoot.getInstanceList(Select_c.class);
		Select_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (Select_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
				source.m_is_implicit = p_m_is_implicit;
				source.m_cardinality = p_m_cardinality;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);

				return source;
			}
		}
		// there is no instance matching the id
		Select_c new_inst = new Select_c(modelRoot, p_m_statement_id,
				p_m_var_id, p_m_is_implicit, p_m_cardinality, p_m_value_id);
		return new_inst;
	}
	public Select_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_var_id = IdAssigner.NULL_UUID;
		m_cardinality = "";
		m_value_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Select_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Select_c)) {
			return false;
		}

		Select_c me = (Select_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((Select_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(((Select_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Select_c)) {
			return false;
		}

		Select_c me = (Select_c) elem;
		if (!getStatement_idCachedValue().equals(
				((Select_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_var_id;
	private boolean m_is_implicit;
	private String m_cardinality;
	private java.util.UUID m_value_id;

	// declare association references from this class

	// referring navigation

	Variable_c SelectionVariable;
	public void relateAcrossR638To(Variable_c target) {
		relateAcrossR638To(target, true);
	}
	public void relateAcrossR638To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SelectionVariable)
			return; // already related

		if (SelectionVariable != target) {

			Object oldKey = getInstanceKey();

			if (SelectionVariable != null) {

				SelectionVariable.clearBackPointerR638To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Select_c.relateAcrossR638To(Variable_c target)",
									"Relate performed across R638 from Select to Variable without unrelate of prior instance.");
				}
			}

			SelectionVariable = target;
			m_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR638To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR638From(Variable_c target) {
		unrelateAcrossR638From(target, true);
	}
	public void unrelateAcrossR638From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (SelectionVariable == null)
			return; // already unrelated

		if (target != SelectionVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R638",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR638To(this);
		}

		if (SelectionVariable != null) {

			m_var_id = SelectionVariable.getVar_id();
			SelectionVariable = null;
			target.removeRef();
		}
	}

	public static Select_c getOneACT_SELOnR638(Variable_c[] targets) {
		return getOneACT_SELOnR638(targets, null);
	}

	public static Select_c getOneACT_SELOnR638(Variable_c[] targets,
			ClassQueryInterface_c test) {
		Select_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SELOnR638(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Select_c getOneACT_SELOnR638(Variable_c target) {
		return getOneACT_SELOnR638(target, null);
	}

	public static Select_c getOneACT_SELOnR638(Variable_c target,
			boolean loadComponent) {
		return getOneACT_SELOnR638(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Select_c getOneACT_SELOnR638(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SELOnR638(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Select_c getOneACT_SELOnR638(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneACT_SELOnR638(modelRoot, target, test, true);
	}

	public static Select_c getOneACT_SELOnR638(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_SELOnR638(modelRoot, target, test);
	}
	private static Select_c find_getOneACT_SELOnR638(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_Select_R638) {
				for (int i = 0; i < target.backPointer_Select_R638.size(); ++i) {
					Select_c source = (Select_c) target.backPointer_Select_R638
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Select_c[] getManyACT_SELsOnR638(Variable_c[] targets) {
		return getManyACT_SELsOnR638(targets, null);
	}
	public static Select_c[] getManyACT_SELsOnR638(Variable_c[] targets,
			boolean loadComponent) {
		return getManyACT_SELsOnR638(targets, null, loadComponent);
	}
	public static Select_c[] getManyACT_SELsOnR638(Variable_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR638(targets, test, true);
	}

	public static Select_c[] getManyACT_SELsOnR638(Variable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Select_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Select_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_Select_R638) {
				for (int j = 0; j < targets[i].backPointer_Select_R638.size(); ++j) {
					Select_c source = (Select_c) targets[i].backPointer_Select_R638
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Select_c[] ret_set = new Select_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Select_c[0];
		}
	}

	public static Select_c[] getManyACT_SELsOnR638(Variable_c target) {
		return getManyACT_SELsOnR638(target, null);
	}

	public static Select_c[] getManyACT_SELsOnR638(Variable_c target,
			boolean loadComponent) {
		return getManyACT_SELsOnR638(target, null, loadComponent);
	}

	public static Select_c[] getManyACT_SELsOnR638(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR638(target, test, true);
	}

	public static Select_c[] getManyACT_SELsOnR638(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Select_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_Select_R638) {
			for (int i = 0; i < target.backPointer_Select_R638.size(); ++i) {
				Select_c source = (Select_c) target.backPointer_Select_R638
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Select_c[] ret_set = new Select_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Select_c[0];
		}
	}

	// referring navigation

	Value_c StartingPointValue;
	public void relateAcrossR613To(Value_c target) {
		relateAcrossR613To(target, true);
	}
	public void relateAcrossR613To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == StartingPointValue)
			return; // already related

		if (StartingPointValue != target) {

			Object oldKey = getInstanceKey();

			if (StartingPointValue != null) {

				StartingPointValue.clearBackPointerR613To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Select_c.relateAcrossR613To(Value_c target)",
									"Relate performed across R613 from Select to Value without unrelate of prior instance.");
				}
			}

			StartingPointValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR613To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR613From(Value_c target) {
		unrelateAcrossR613From(target, true);
	}
	public void unrelateAcrossR613From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (StartingPointValue == null)
			return; // already unrelated

		if (target != StartingPointValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R613",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR613To(this);
		}

		if (StartingPointValue != null) {

			m_value_id = StartingPointValue.getValue_id();
			StartingPointValue = null;
			target.removeRef();
		}
	}

	public static Select_c getOneACT_SELOnR613(Value_c[] targets) {
		return getOneACT_SELOnR613(targets, null);
	}

	public static Select_c getOneACT_SELOnR613(Value_c[] targets,
			ClassQueryInterface_c test) {
		Select_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SELOnR613(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Select_c getOneACT_SELOnR613(Value_c target) {
		return getOneACT_SELOnR613(target, null);
	}

	public static Select_c getOneACT_SELOnR613(Value_c target,
			boolean loadComponent) {
		return getOneACT_SELOnR613(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Select_c getOneACT_SELOnR613(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SELOnR613(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Select_c getOneACT_SELOnR613(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneACT_SELOnR613(modelRoot, target, test, true);
	}

	public static Select_c getOneACT_SELOnR613(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_SELOnR613(modelRoot, target, test);
	}
	private static Select_c find_getOneACT_SELOnR613(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Select_c source = (Select_c) target.backPointer_Select_R613;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Select_c[] getManyACT_SELsOnR613(Value_c[] targets) {
		return getManyACT_SELsOnR613(targets, null);
	}
	public static Select_c[] getManyACT_SELsOnR613(Value_c[] targets,
			boolean loadComponent) {
		return getManyACT_SELsOnR613(targets, null, loadComponent);
	}
	public static Select_c[] getManyACT_SELsOnR613(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR613(targets, test, true);
	}

	public static Select_c[] getManyACT_SELsOnR613(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Select_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Select_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Select_c source = (Select_c) targets[i].backPointer_Select_R613;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Select_c[] ret_set = new Select_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Select_c[0];
		}
	}

	public static Select_c[] getManyACT_SELsOnR613(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR613(targetArray);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}
	}

	public static Select_c[] getManyACT_SELsOnR613(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR613(targetArray, loadComponent);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}
	}

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Select_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from Select to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static Select_c getOneACT_SELOnR603(Statement_c[] targets) {
		return getOneACT_SELOnR603(targets, null);
	}

	public static Select_c getOneACT_SELOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		Select_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SELOnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Select_c getOneACT_SELOnR603(Statement_c target) {
		return getOneACT_SELOnR603(target, null);
	}

	public static Select_c getOneACT_SELOnR603(Statement_c target,
			boolean loadComponent) {
		return getOneACT_SELOnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Select_c getOneACT_SELOnR603(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SELOnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Select_c getOneACT_SELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_SELOnR603(modelRoot, target, test, true);
	}

	public static Select_c getOneACT_SELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_SELOnR603(modelRoot, target, test);
	}
	private static Select_c find_getOneACT_SELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Select_c source = (Select_c) target.backPointer_IsSubtypeSelectIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Select_c[] getManyACT_SELsOnR603(Statement_c[] targets) {
		return getManyACT_SELsOnR603(targets, null);
	}
	public static Select_c[] getManyACT_SELsOnR603(Statement_c[] targets,
			boolean loadComponent) {
		return getManyACT_SELsOnR603(targets, null, loadComponent);
	}
	public static Select_c[] getManyACT_SELsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR603(targets, test, true);
	}

	public static Select_c[] getManyACT_SELsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Select_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Select_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Select_c source = (Select_c) targets[i].backPointer_IsSubtypeSelectIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Select_c[] ret_set = new Select_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Select_c[0];
		}
	}

	public static Select_c[] getManyACT_SELsOnR603(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR603(targetArray);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}
	}

	public static Select_c[] getManyACT_SELsOnR603(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR603(targetArray, loadComponent);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	SelectRelatedWhere_c backPointer_IsSubtypeSelectRelatedWhereIsSubtype_R664;

	public void setSelectRelatedWhereOrderInChildListR664(
			SelectRelatedWhere_c target, int index) {
		unrelateAcrossR664From(target);
		SelectRelatedWhere_c[] elements = SelectRelatedWhere_c
				.getManyACT_SRWsOnR664(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR664From((SelectRelatedWhere_c) elements[i]);
			}
			count++;
		}
		relateAcrossR664To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR664To((SelectRelatedWhere_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR664To(SelectRelatedWhere_c target) {
		if (target != null) {
			target.relateAcrossR664To(this, true);
		}
	}

	public void relateAcrossR664To(SelectRelatedWhere_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR664To(this, notifyChanges);
		}
	}

	public void setBackPointerR664To(SelectRelatedWhere_c target) {
		backPointer_IsSubtypeSelectRelatedWhereIsSubtype_R664 = target;
	}

	public void unrelateAcrossR664From(SelectRelatedWhere_c target) {
		if (target != null) {
			target.unrelateAcrossR664From(this, true);
		}
	}

	public void unrelateAcrossR664From(SelectRelatedWhere_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR664From(this, notifyChanges);
		}
	}

	public void clearBackPointerR664To(SelectRelatedWhere_c target) {
		if (target == backPointer_IsSubtypeSelectRelatedWhereIsSubtype_R664) {
			backPointer_IsSubtypeSelectRelatedWhereIsSubtype_R664 = null;
		}
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedWhere_c[] targets) {
		return getOneACT_SELOnR664(targets, null);
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedWhere_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SELOnR664(targets, test, true);
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedWhere_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Select_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Select_c candidate_val = getOneACT_SELOnR664(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SELOnR664(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedWhere_c target) {
		return getOneACT_SELOnR664(target, true);
	}
	public static Select_c getOneACT_SELOnR664(SelectRelatedWhere_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeSelect;
		} else {
			return null;
		}
	}

	public static Select_c[] getManyACT_SELsOnR664(
			SelectRelatedWhere_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SELsOnR664(targets, test, true);
	}

	public static Select_c [] getManyACT_SELsOnR664(SelectRelatedWhere_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Select_c[0];
  
  
  LinkedHashSet<Select_c> elementsSet = new LinkedHashSet<Select_c>();
  for (int i = 0; i < targets.length; i++) {
    Select_c associate = targets[i].IsSupertypeSelect;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Select_c[] result = new Select_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Select_c[] getManyACT_SELsOnR664(
			SelectRelatedWhere_c[] targets) {
		return getManyACT_SELsOnR664(targets, null);
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedWhere_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			SelectRelatedWhere_c[] targetArray = new SelectRelatedWhere_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR664(targetArray, test, loadComponent);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}

	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedWhere_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR664(target, null, true);
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedWhere_c target) {
		return getManyACT_SELsOnR664(target, null, true);
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedWhere_c target,
			boolean loadComponent) {
		return getManyACT_SELsOnR664(target, null, loadComponent);
	}

	// referred to navigation

	SelectRelatedBy_c backPointer_IsSubtypeSelectRelatedByIsSubtype_R664;

	public void setSelectRelatedByOrderInChildListR664(
			SelectRelatedBy_c target, int index) {
		unrelateAcrossR664From(target);
		SelectRelatedBy_c[] elements = SelectRelatedBy_c
				.getManyACT_SRsOnR664(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR664From((SelectRelatedBy_c) elements[i]);
			}
			count++;
		}
		relateAcrossR664To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR664To((SelectRelatedBy_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR664To(SelectRelatedBy_c target) {
		if (target != null) {
			target.relateAcrossR664To(this, true);
		}
	}

	public void relateAcrossR664To(SelectRelatedBy_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR664To(this, notifyChanges);
		}
	}

	public void setBackPointerR664To(SelectRelatedBy_c target) {
		backPointer_IsSubtypeSelectRelatedByIsSubtype_R664 = target;
	}

	public void unrelateAcrossR664From(SelectRelatedBy_c target) {
		if (target != null) {
			target.unrelateAcrossR664From(this, true);
		}
	}

	public void unrelateAcrossR664From(SelectRelatedBy_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR664From(this, notifyChanges);
		}
	}

	public void clearBackPointerR664To(SelectRelatedBy_c target) {
		if (target == backPointer_IsSubtypeSelectRelatedByIsSubtype_R664) {
			backPointer_IsSubtypeSelectRelatedByIsSubtype_R664 = null;
		}
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedBy_c[] targets) {
		return getOneACT_SELOnR664(targets, null);
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedBy_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SELOnR664(targets, test, true);
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedBy_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Select_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Select_c candidate_val = getOneACT_SELOnR664(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SELOnR664(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Select_c getOneACT_SELOnR664(SelectRelatedBy_c target) {
		return getOneACT_SELOnR664(target, true);
	}
	public static Select_c getOneACT_SELOnR664(SelectRelatedBy_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeSelect;
		} else {
			return null;
		}
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedBy_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR664(targets, test, true);
	}

	public static Select_c [] getManyACT_SELsOnR664(SelectRelatedBy_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Select_c[0];
  
  
  LinkedHashSet<Select_c> elementsSet = new LinkedHashSet<Select_c>();
  for (int i = 0; i < targets.length; i++) {
    Select_c associate = targets[i].IsSupertypeSelect;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Select_c[] result = new Select_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedBy_c[] targets) {
		return getManyACT_SELsOnR664(targets, null);
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedBy_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			SelectRelatedBy_c[] targetArray = new SelectRelatedBy_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR664(targetArray, test, loadComponent);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}

	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedBy_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR664(target, null, true);
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedBy_c target) {
		return getManyACT_SELsOnR664(target, null, true);
	}

	public static Select_c[] getManyACT_SELsOnR664(SelectRelatedBy_c target,
			boolean loadComponent) {
		return getManyACT_SELsOnR664(target, null, loadComponent);
	}

	// referred to navigation

	ChainLink_c backPointer_StartsWithChainLinkStartsWith_R637;

	public void setChainLinkOrderInChildListR637(ChainLink_c target, int index) {
		unrelateAcrossR637From(target);
		ChainLink_c[] elements = ChainLink_c.getManyACT_LNKsOnR637(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR637From((ChainLink_c) elements[i]);
			}
			count++;
		}
		relateAcrossR637To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR637To((ChainLink_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR637To(ChainLink_c target) {
		if (target != null) {
			target.relateAcrossR637To(this, true);
		}
	}

	public void relateAcrossR637To(ChainLink_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR637To(this, notifyChanges);
		}
	}

	public void setBackPointerR637To(ChainLink_c target) {
		backPointer_StartsWithChainLinkStartsWith_R637 = target;
	}

	public void unrelateAcrossR637From(ChainLink_c target) {
		if (target != null) {
			target.unrelateAcrossR637From(this, true);
		}
	}

	public void unrelateAcrossR637From(ChainLink_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR637From(this, notifyChanges);
		}
	}

	public void clearBackPointerR637To(ChainLink_c target) {
		if (target == backPointer_StartsWithChainLinkStartsWith_R637) {
			backPointer_StartsWithChainLinkStartsWith_R637 = null;
		}
	}

	public static Select_c getOneACT_SELOnR637(ChainLink_c[] targets) {
		return getOneACT_SELOnR637(targets, null);
	}

	public static Select_c getOneACT_SELOnR637(ChainLink_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SELOnR637(targets, test, true);
	}

	public static Select_c getOneACT_SELOnR637(ChainLink_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Select_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Select_c candidate_val = getOneACT_SELOnR637(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SELOnR637(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Select_c getOneACT_SELOnR637(ChainLink_c target) {
		return getOneACT_SELOnR637(target, true);
	}
	public static Select_c getOneACT_SELOnR637(ChainLink_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.Select;
		} else {
			return null;
		}
	}

	public static Select_c[] getManyACT_SELsOnR637(ChainLink_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR637(targets, test, true);
	}

	public static Select_c [] getManyACT_SELsOnR637(ChainLink_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Select_c[0];
  
  
  LinkedHashSet<Select_c> elementsSet = new LinkedHashSet<Select_c>();
  for (int i = 0; i < targets.length; i++) {
    Select_c associate = targets[i].Select;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Select_c[] result = new Select_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Select_c[] getManyACT_SELsOnR637(ChainLink_c[] targets) {
		return getManyACT_SELsOnR637(targets, null);
	}

	public static Select_c[] getManyACT_SELsOnR637(ChainLink_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ChainLink_c[] targetArray = new ChainLink_c[1];
			targetArray[0] = target;
			return getManyACT_SELsOnR637(targetArray, test, loadComponent);
		} else {
			Select_c[] result = new Select_c[0];
			return result;
		}

	}

	public static Select_c[] getManyACT_SELsOnR637(ChainLink_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SELsOnR637(target, null, true);
	}

	public static Select_c[] getManyACT_SELsOnR637(ChainLink_c target) {
		return getManyACT_SELsOnR637(target, null, true);
	}

	public static Select_c[] getManyACT_SELsOnR637(ChainLink_c target,
			boolean loadComponent) {
		return getManyACT_SELsOnR637(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (SelectionVariable == null) {
			// R638
			Variable_c relInst39456 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39456 == null) {
				relInst39456 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_var_id});
			}
			if (relInst39456 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39456 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_var_id});
					if (relInst39456 != null)
						break;
				}
			}
			//synchronized
			if (relInst39456 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39456) && !isProxy())) {
					relInst39456.relateAcrossR638To(this, notifyChanges);
				}
			}
		}

		if (StartingPointValue == null) {
			// R613
			Value_c relInst39457 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39457 == null) {
				relInst39457 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_value_id});
			}
			if (relInst39457 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39457 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_value_id});
					if (relInst39457 != null)
						break;
				}
			}
			//synchronized
			if (relInst39457 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39457) && !isProxy())) {
					relInst39457.relateAcrossR613To(this, notifyChanges);
				}
			}
		}

		// R603
		Statement_c relInst39458 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39458 == null) {
			relInst39458 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst39458 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39458 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst39458 != null)
					break;
			}
		}
		//synchronized
		if (relInst39458 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39458) && !isProxy())) {
				relInst39458.relateAcrossR603To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R638
		// V_VAR
		inst = SelectionVariable;
		unrelateAcrossR638From(SelectionVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R613
		// V_VAL
		inst = StartingPointValue;
		unrelateAcrossR613From(StartingPointValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Select_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Select_c inst = (Select_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Select_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Select_c SelectInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Select_c result = findSelectInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Select_c findSelectInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Select_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Select_c x = (Select_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Select_c SelectInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return SelectInstance(modelRoot, test, true);
	}

	public static Select_c SelectInstance(ModelRoot modelRoot) {
		return SelectInstance(modelRoot, null, true);
	}

	public static Select_c[] SelectInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Select_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Select_c x = (Select_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Select_c[] ret_set = new Select_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Select_c[0];
			}
		}
	}
	public static Select_c[] SelectInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return SelectInstances(modelRoot, test, true);
	}
	public static Select_c[] SelectInstances(ModelRoot modelRoot) {
		return SelectInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Select.dispose call: ";
		Variable_c testR638Inst = Variable_c.getOneV_VAROnR638(this, false);

		if (testR638Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "638 ";
		}
		Value_c testR613Inst = Value_c.getOneV_VALOnR613(this, false);

		if (testR613Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "613 ";
		}
		SelectRelatedWhere_c testR664Inst1 = SelectRelatedWhere_c
				.getOneACT_SRWOnR664(this, false);

		if (testR664Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "664 ";
		}
		SelectRelatedBy_c testR664Inst2 = SelectRelatedBy_c.getOneACT_SROnR664(
				this, false);

		if (testR664Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "664 ";
		}
		Statement_c testR603Inst15 = Statement_c.getOneACT_SMTOnR603(this,
				false);

		if (testR603Inst15 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		ChainLink_c testR637Inst = ChainLink_c.getOneACT_LNKOnR637(this, false);

		if (testR637Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "637 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Select", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("var_id")) {
			return true;
		}
		if (attributeName.equals("value_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getVar_idLongBased() {
		if (SelectionVariable != null) {
			return SelectionVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getVar_id() {
		if (SelectionVariable != null) {
			return SelectionVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getVar_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_var_id))
			return m_var_id;
		else
			return getVar_id();
	}

	public void setVar_id(java.util.UUID newValue) {
		m_var_id = IdAssigner.preprocessUUID(newValue);
	}
	public boolean getIs_implicit() {
		return m_is_implicit;
	}

	public void setIs_implicit(boolean newValue) {
		m_is_implicit = newValue;
	}
	public String getCardinality() {
		return m_cardinality;
	}

	public void setCardinality(String newValue) {
		m_cardinality = newValue;
	}
	public long getValue_idLongBased() {
		if (StartingPointValue != null) {
			return StartingPointValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (StartingPointValue != null) {
			return StartingPointValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Select", //$NON-NLS-1$
				" Operation entered: Select::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Select_c[] objs = Select_c.SelectInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Select", //$NON-NLS-1$
				" Operation entered: Select::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Select_c_test39460_c implements ClassQueryInterface_c {
			Select_c_test39460_c(java.util.UUID p39461) {
				m_p39461 = p39461;
			}
			private java.util.UUID m_p39461;
			public boolean evaluate(Object candidate) {
				Select_c selected = (Select_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39461));
				return retval;
			}
		}

		Select_c[] objs39459 = Select_c.SelectInstances(modelRoot,
				new Select_c_test39460_c(getStatement_id()));

		if (((objs39459.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select", //$NON-NLS-1$
								"Consistency: Object: Select: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39459.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Select: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39459.length), e);
			}
			retval = false;

		}

		if (((objs39459.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.CONSISTENCY, "Select", //$NON-NLS-1$
						"Consistency: Object: Select: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs39459.length)
								+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Select: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39459.length)
								+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Select is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test39465_c implements ClassQueryInterface_c {
			Statement_c_test39465_c(java.util.UUID p39466) {
				m_p39466 = p39466;
			}
			private java.util.UUID m_p39466;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39466));
				return retval;
			}
		}

		Statement_c[] objs39464 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test39465_c(getStatement_id()));

		if (((objs39464.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select", //$NON-NLS-1$
								"Consistency: Object: Select: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39464.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39464.length), e);
			}
			retval = false;

		}

		// Select is a referring class in association: rel.Numb = 638
		// The participating class is: Variable
		class Variable_c_test39468_c implements ClassQueryInterface_c {
			Variable_c_test39468_c(java.util.UUID p39469) {
				m_p39469 = p39469;
			}
			private java.util.UUID m_p39469;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p39469));
				return retval;
			}
		}

		Variable_c[] objs39467 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test39468_c(getVar_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39467.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select", //$NON-NLS-1$
								"Consistency: Object: Select: Association: 638: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39467.length)
										+ " Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select: Association: 638: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39467.length)
										+ " Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Select is a referring class in association: rel.Numb = 613
		// The participating class is: Value
		class Value_c_test39471_c implements ClassQueryInterface_c {
			Value_c_test39471_c(java.util.UUID p39472) {
				m_p39472 = p39472;
			}
			private java.util.UUID m_p39472;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p39472));
				return retval;
			}
		}

		Value_c[] objs39470 = Value_c.ValueInstances(modelRoot,
				new Value_c_test39471_c(getValue_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39470.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select", //$NON-NLS-1$
								"Consistency: Object: Select: Association: 613: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39470.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select: Association: 613: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39470.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 664
		int objs39473 = 0;
		// Subtype Object: Select Related Where
		class SelectRelatedWhere_c_test39474_c implements ClassQueryInterface_c {
			SelectRelatedWhere_c_test39474_c(java.util.UUID p39475) {
				m_p39475 = p39475;
			}
			private java.util.UUID m_p39475;
			public boolean evaluate(Object candidate) {
				SelectRelatedWhere_c selected = (SelectRelatedWhere_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39475));
				return retval;
			}
		}

		SelectRelatedWhere_c[] objs39476 = SelectRelatedWhere_c
				.SelectRelatedWhereInstances(modelRoot,
						new SelectRelatedWhere_c_test39474_c(getStatement_id()));

		objs39473 = objs39473 + objs39476.length;
		// Subtype Object: Select Related By
		class SelectRelatedBy_c_test39477_c implements ClassQueryInterface_c {
			SelectRelatedBy_c_test39477_c(java.util.UUID p39478) {
				m_p39478 = p39478;
			}
			private java.util.UUID m_p39478;
			public boolean evaluate(Object candidate) {
				SelectRelatedBy_c selected = (SelectRelatedBy_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39478));
				return retval;
			}
		}

		SelectRelatedBy_c[] objs39479 = SelectRelatedBy_c
				.SelectRelatedByInstances(modelRoot,
						new SelectRelatedBy_c_test39477_c(getStatement_id()));

		objs39473 = objs39473 + objs39479.length;
		if (objs39473 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select", //$NON-NLS-1$
								"Consistency: Object: Select: Association: 664: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39473)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select: Association: 664: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39473), e);
			}
			retval = false;

		}

		// Select is a participating class in association: rel.Numb = 637
		// Object: Chain Link
		class ChainLink_c_test39481_c implements ClassQueryInterface_c {
			ChainLink_c_test39481_c(java.util.UUID p39482) {
				m_p39482 = p39482;
			}
			private java.util.UUID m_p39482;
			public boolean evaluate(Object candidate) {
				ChainLink_c selected = (ChainLink_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39482));
				return retval;
			}
		}

		ChainLink_c[] objs39480 = ChainLink_c.ChainLinkInstances(modelRoot,
				new ChainLink_c_test39481_c(getStatement_id()));

		if (((objs39480.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select", //$NON-NLS-1$
								"Consistency: Object: Select: Association: 637: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39480.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select: Association: 637: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39480.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Select",
				" Operation entered: Select::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SelectRelatedBy_c v_sr = SelectRelatedBy_c.getOneACT_SROnR664(this);

		if (((v_sr != null))) {

			this.unrelateAcrossR664From(v_sr);

			if (v_sr != null) {
				v_sr.delete();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		SelectRelatedWhere_c v_srw = SelectRelatedWhere_c
				.getOneACT_SRWOnR664(this);

		if (((v_srw != null))) {

			this.unrelateAcrossR664From(v_srw);

			Value_c v_val = Value_c.getOneV_VALOnR611(v_srw);

			if (((v_val != null))) {

				if (v_srw != null) {
					v_srw.unrelateAcrossR611From(v_val);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Unrelate attempted on null left hand instance.",
									t);
				}

				if (v_val != null) {
					v_val.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			if (v_srw != null) {
				v_srw.delete();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		Variable_c v_var = Variable_c.getOneV_VAROnR638(this);

		if (((v_var != null))) {

			this.unrelateAcrossR638From(v_var);

			if ((!v_var.getDeclared())) {

				if (v_var != null) {
					v_var.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

		Value_c v_val = Value_c.getOneV_VALOnR613(this);

		if (((v_val != null))) {

			this.unrelateAcrossR613From(v_val);

			if (v_val != null) {
				v_val.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ChainLink_c v_link = ChainLink_c.getOneACT_LNKOnR637(this);

		if (((v_link != null))) {

			this.unrelateAcrossR637From(v_link);

			while (((v_link != null))) {

				ChainLink_c v_this_link = v_link;

				v_link = ChainLink_c.getOneACT_LNKOnR604Precedes(v_this_link);

				if (v_this_link != null) {
					v_this_link.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Select",
				" Operation entered: Select::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Select
