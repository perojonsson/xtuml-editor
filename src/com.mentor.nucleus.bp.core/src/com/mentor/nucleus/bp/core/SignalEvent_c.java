package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SignalEvent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SIGNAL_EVENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SignalEvent_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SignalEvent_c(ModelRoot modelRoot, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id,
			java.util.UUID p_m_provided_signal_id,
			java.util.UUID p_m_required_signal_id, String p_m_signal_name) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_provided_signal_id = IdAssigner
				.preprocessUUID(p_m_provided_signal_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_required_signal_id = IdAssigner
				.preprocessUUID(p_m_required_signal_id);
		m_signal_name = p_m_signal_name;

		Object[] key = {m_smevt_id, m_sm_id, m_smspd_id};
		addInstanceToMap(key);
	}
	static public SignalEvent_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id, java.util.UUID p_m_provided_signal_id,
			java.util.UUID p_m_required_signal_id, String p_m_signal_name,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);
		SignalEvent_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smevt_id, p_m_sm_id, p_m_smspd_id};
			new_inst = (SignalEvent_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_provided_signal_id = IdAssigner
						.preprocessUUID(p_m_provided_signal_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_required_signal_id = IdAssigner
						.preprocessUUID(p_m_required_signal_id);
				new_inst.m_signal_name = p_m_signal_name;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SignalEvent_c(modelRoot, p_m_smevt_id, p_m_sm_id,
					p_m_smspd_id, p_m_provided_signal_id,
					p_m_required_signal_id, p_m_signal_name);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SignalEvent_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id, java.util.UUID p_m_provided_signal_id,
			java.util.UUID p_m_required_signal_id, String p_m_signal_name) {
		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);
		SignalEvent_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smevt_id, p_m_sm_id, p_m_smspd_id};
			source = (SignalEvent_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_provided_signal_id = IdAssigner
						.preprocessUUID(p_m_provided_signal_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_required_signal_id = IdAssigner
						.preprocessUUID(p_m_required_signal_id);
				source.m_signal_name = p_m_signal_name;

				return source;
			}
		}
		// there is no instance matching the id
		SignalEvent_c new_inst = new SignalEvent_c(modelRoot, p_m_smevt_id,
				p_m_sm_id, p_m_smspd_id, p_m_provided_signal_id,
				p_m_required_signal_id, p_m_signal_name);
		return new_inst;
	}
	public SignalEvent_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smevt_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		m_provided_signal_id = IdAssigner.NULL_UUID;
		m_required_signal_id = IdAssigner.NULL_UUID;
		m_signal_name = "";
		Object[] key = {m_smevt_id, m_sm_id, m_smspd_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smevt_id, m_sm_id, m_smspd_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smevt_id != p_newKey) {

			m_smevt_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SignalEvent_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SignalEvent_c)) {
			return false;
		}

		SignalEvent_c me = (SignalEvent_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((SignalEvent_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(((SignalEvent_c) elem).getSmevt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((SignalEvent_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((SignalEvent_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmspd_id()) || IdAssigner.NULL_UUID
						.equals(((SignalEvent_c) elem).getSmspd_id())) && this != elem)) {
			return false;
		}
		if (!getSmspd_id().equals(((SignalEvent_c) elem).getSmspd_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SignalEvent_c)) {
			return false;
		}

		SignalEvent_c me = (SignalEvent_c) elem;
		if (!getSmevt_idCachedValue().equals(
				((SignalEvent_c) elem).getSmevt_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((SignalEvent_c) elem).getSm_idCachedValue()))
			return false;
		if (!getSmspd_idCachedValue().equals(
				((SignalEvent_c) elem).getSmspd_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smspd_id;
	private java.util.UUID m_provided_signal_id;
	private java.util.UUID m_required_signal_id;
	private String m_signal_name;

	// declare association references from this class

	// referring navigation

	SemEvent_c IsSupertypeSemEvent;
	public void relateAcrossR526To(SemEvent_c target) {
		relateAcrossR526To(target, true);
	}
	public void relateAcrossR526To(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeSemEvent)
			return; // already related

		if (IsSupertypeSemEvent != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeSemEvent != null) {

				IsSupertypeSemEvent.clearBackPointerR526To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SignalEvent_c.relateAcrossR526To(SemEvent_c target)",
									"Relate performed across R526 from Signal Event to SEM Event without unrelate of prior instance.");
				}
			}

			IsSupertypeSemEvent = target;
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmspd_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smspd_id = target.getSmspd_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR526To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "526", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR526From(SemEvent_c target) {
		unrelateAcrossR526From(target, true);
	}
	public void unrelateAcrossR526From(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeSemEvent == null)
			return; // already unrelated

		if (target != IsSupertypeSemEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R526",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR526To(this);
		}

		if (IsSupertypeSemEvent != null) {

			m_smevt_id = IsSupertypeSemEvent.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = IsSupertypeSemEvent.getSmevt_idCachedValue();
			}
			m_sm_id = IsSupertypeSemEvent.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeSemEvent.getSm_idCachedValue();
			}
			m_smspd_id = IsSupertypeSemEvent.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(m_smspd_id)) {
				m_smspd_id = IsSupertypeSemEvent.getSmspd_idCachedValue();
			}
			IsSupertypeSemEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "526", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(SemEvent_c[] targets) {
		return getOneSM_SGEVTOnR526(targets, null);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test) {
		SignalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SGEVTOnR526(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(SemEvent_c target) {
		return getOneSM_SGEVTOnR526(target, null);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(SemEvent_c target,
			boolean loadComponent) {
		return getOneSM_SGEVTOnR526(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(SemEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SGEVTOnR526(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test) {
		return getOneSM_SGEVTOnR526(modelRoot, target, test, true);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_SGEVTOnR526(modelRoot, target, test);
	}
	private static SignalEvent_c find_getOneSM_SGEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SignalEvent_c source = (SignalEvent_c) target.backPointer_IsSubtypeSignalEventIsSubtype_R526;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR526(SemEvent_c[] targets) {
		return getManySM_SGEVTsOnR526(targets, null);
	}
	public static SignalEvent_c[] getManySM_SGEVTsOnR526(SemEvent_c[] targets,
			boolean loadComponent) {
		return getManySM_SGEVTsOnR526(targets, null, loadComponent);
	}
	public static SignalEvent_c[] getManySM_SGEVTsOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test) {
		return getManySM_SGEVTsOnR526(targets, test, true);
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SignalEvent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SignalEvent_c source = (SignalEvent_c) targets[i].backPointer_IsSubtypeSignalEventIsSubtype_R526;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SignalEvent_c[] ret_set = new SignalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SignalEvent_c[0];
		}
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR526(SemEvent_c target) {
		if (target != null) {
			SemEvent_c[] targetArray = new SemEvent_c[1];
			targetArray[0] = target;
			return getManySM_SGEVTsOnR526(targetArray);
		} else {
			SignalEvent_c[] result = new SignalEvent_c[0];
			return result;
		}
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR526(SemEvent_c target,
			boolean loadComponent) {
		if (target != null) {
			SemEvent_c[] targetArray = new SemEvent_c[1];
			targetArray[0] = target;
			return getManySM_SGEVTsOnR526(targetArray, loadComponent);
		} else {
			SignalEvent_c[] result = new SignalEvent_c[0];
			return result;
		}
	}

	// referring navigation

	ProvidedSignal_c ProvidedSignal;
	public void relateAcrossR528To(ProvidedSignal_c target) {
		relateAcrossR528To(target, true);
	}
	public void relateAcrossR528To(ProvidedSignal_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProvidedSignal)
			return; // already related

		if (ProvidedSignal != target) {

			Object oldKey = getInstanceKey();

			if (ProvidedSignal != null) {
				UmlProblem.removeXtUMLProblem(this, ProvidedSignal);

				ProvidedSignal.clearBackPointerR528To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SignalEvent_c.relateAcrossR528To(ProvidedSignal_c target)",
									"Relate performed across R528 from Signal Event to Provided Signal without unrelate of prior instance.");
				}
			}

			ProvidedSignal = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_provided_signal_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR528To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "528", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR528From(ProvidedSignal_c target) {
		unrelateAcrossR528From(target, true);
	}
	public void unrelateAcrossR528From(ProvidedSignal_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ProvidedSignal == null)
			return; // already unrelated

		if (target != ProvidedSignal) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R528",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR528To(this);
		}

		if (ProvidedSignal != null) {

			m_provided_signal_id = ProvidedSignal.getId();
			if (IdAssigner.NULL_UUID.equals(m_provided_signal_id)) {
				m_provided_signal_id = ProvidedSignal.getIdCachedValue();
			}
			ProvidedSignal = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "528", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(ProvidedSignal_c[] targets) {
		return getOneSM_SGEVTOnR528(targets, null);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(
			ProvidedSignal_c[] targets, ClassQueryInterface_c test) {
		SignalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SGEVTOnR528(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(ProvidedSignal_c target) {
		return getOneSM_SGEVTOnR528(target, null);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(ProvidedSignal_c target,
			boolean loadComponent) {
		return getOneSM_SGEVTOnR528(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(ProvidedSignal_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SGEVTOnR528(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(ModelRoot modelRoot,
			ProvidedSignal_c target, ClassQueryInterface_c test) {
		return getOneSM_SGEVTOnR528(modelRoot, target, test, true);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR528(ModelRoot modelRoot,
			ProvidedSignal_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		SignalEvent_c result = null;

		result = find_getOneSM_SGEVTOnR528(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					SignalEvent_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneSM_SGEVTOnR528(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static SignalEvent_c find_getOneSM_SGEVTOnR528(ModelRoot modelRoot,
			ProvidedSignal_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SignalEvent_c source = (SignalEvent_c) target.backPointer_SignalEvent_R528;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR528(
			ProvidedSignal_c[] targets) {
		return getManySM_SGEVTsOnR528(targets, null);
	}
	public static SignalEvent_c[] getManySM_SGEVTsOnR528(
			ProvidedSignal_c[] targets, boolean loadComponent) {
		return getManySM_SGEVTsOnR528(targets, null, loadComponent);
	}
	public static SignalEvent_c[] getManySM_SGEVTsOnR528(
			ProvidedSignal_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SGEVTsOnR528(targets, test, true);
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR528(
			ProvidedSignal_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SignalEvent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SignalEvent_c.class);

		}

		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SignalEvent_c source = (SignalEvent_c) targets[i].backPointer_SignalEvent_R528;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SignalEvent_c[] ret_set = new SignalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SignalEvent_c[0];
		}
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR528(ProvidedSignal_c target) {
		if (target != null) {
			ProvidedSignal_c[] targetArray = new ProvidedSignal_c[1];
			targetArray[0] = target;
			return getManySM_SGEVTsOnR528(targetArray);
		} else {
			SignalEvent_c[] result = new SignalEvent_c[0];
			return result;
		}
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR528(
			ProvidedSignal_c target, boolean loadComponent) {
		if (target != null) {
			ProvidedSignal_c[] targetArray = new ProvidedSignal_c[1];
			targetArray[0] = target;
			return getManySM_SGEVTsOnR528(targetArray, loadComponent);
		} else {
			SignalEvent_c[] result = new SignalEvent_c[0];
			return result;
		}
	}

	// referring navigation

	RequiredSignal_c RequiredSignal;
	public void relateAcrossR529To(RequiredSignal_c target) {
		relateAcrossR529To(target, true);
	}
	public void relateAcrossR529To(RequiredSignal_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == RequiredSignal)
			return; // already related

		if (RequiredSignal != target) {

			Object oldKey = getInstanceKey();

			if (RequiredSignal != null) {
				UmlProblem.removeXtUMLProblem(this, RequiredSignal);

				RequiredSignal.clearBackPointerR529To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SignalEvent_c.relateAcrossR529To(RequiredSignal_c target)",
									"Relate performed across R529 from Signal Event to Required Signal without unrelate of prior instance.");
				}
			}

			RequiredSignal = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_required_signal_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR529To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "529", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR529From(RequiredSignal_c target) {
		unrelateAcrossR529From(target, true);
	}
	public void unrelateAcrossR529From(RequiredSignal_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (RequiredSignal == null)
			return; // already unrelated

		if (target != RequiredSignal) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R529",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR529To(this);
		}

		if (RequiredSignal != null) {

			m_required_signal_id = RequiredSignal.getId();
			if (IdAssigner.NULL_UUID.equals(m_required_signal_id)) {
				m_required_signal_id = RequiredSignal.getIdCachedValue();
			}
			RequiredSignal = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "529", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(RequiredSignal_c[] targets) {
		return getOneSM_SGEVTOnR529(targets, null);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(
			RequiredSignal_c[] targets, ClassQueryInterface_c test) {
		SignalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SGEVTOnR529(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(RequiredSignal_c target) {
		return getOneSM_SGEVTOnR529(target, null);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(RequiredSignal_c target,
			boolean loadComponent) {
		return getOneSM_SGEVTOnR529(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(RequiredSignal_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SGEVTOnR529(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(ModelRoot modelRoot,
			RequiredSignal_c target, ClassQueryInterface_c test) {
		return getOneSM_SGEVTOnR529(modelRoot, target, test, true);
	}

	public static SignalEvent_c getOneSM_SGEVTOnR529(ModelRoot modelRoot,
			RequiredSignal_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		SignalEvent_c result = null;

		result = find_getOneSM_SGEVTOnR529(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					SignalEvent_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneSM_SGEVTOnR529(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static SignalEvent_c find_getOneSM_SGEVTOnR529(ModelRoot modelRoot,
			RequiredSignal_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SignalEvent_c source = (SignalEvent_c) target.backPointer_SignalEvent_R529;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR529(
			RequiredSignal_c[] targets) {
		return getManySM_SGEVTsOnR529(targets, null);
	}
	public static SignalEvent_c[] getManySM_SGEVTsOnR529(
			RequiredSignal_c[] targets, boolean loadComponent) {
		return getManySM_SGEVTsOnR529(targets, null, loadComponent);
	}
	public static SignalEvent_c[] getManySM_SGEVTsOnR529(
			RequiredSignal_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SGEVTsOnR529(targets, test, true);
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR529(
			RequiredSignal_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SignalEvent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SignalEvent_c.class);

		}

		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SignalEvent_c source = (SignalEvent_c) targets[i].backPointer_SignalEvent_R529;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SignalEvent_c[] ret_set = new SignalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SignalEvent_c[0];
		}
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR529(RequiredSignal_c target) {
		if (target != null) {
			RequiredSignal_c[] targetArray = new RequiredSignal_c[1];
			targetArray[0] = target;
			return getManySM_SGEVTsOnR529(targetArray);
		} else {
			SignalEvent_c[] result = new SignalEvent_c[0];
			return result;
		}
	}

	public static SignalEvent_c[] getManySM_SGEVTsOnR529(
			RequiredSignal_c target, boolean loadComponent) {
		if (target != null) {
			RequiredSignal_c[] targetArray = new RequiredSignal_c[1];
			targetArray[0] = target;
			return getManySM_SGEVTsOnR529(targetArray, loadComponent);
		} else {
			SignalEvent_c[] result = new SignalEvent_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R526
		SemEvent_c relInst39005 = (SemEvent_c) baseRoot.getInstanceList(
				SemEvent_c.class).get(
				new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39005 == null) {
			relInst39005 = (SemEvent_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(SemEvent_c.class)
					.get(new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		}
		if (relInst39005 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39005 = (SemEvent_c) roots[i].getInstanceList(
						SemEvent_c.class).get(
						new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
				if (relInst39005 != null)
					break;
			}
		}
		//synchronized
		if (relInst39005 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39005) && !isProxy())) {
				relInst39005.relateAcrossR526To(this, notifyChanges);
			}
		}

		if (ProvidedSignal == null) {
			// R528
			ProvidedSignal_c relInst39006 = (ProvidedSignal_c) baseRoot
					.getInstanceList(ProvidedSignal_c.class).get(
							new Object[]{m_provided_signal_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39006 == null) {
				relInst39006 = (ProvidedSignal_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ProvidedSignal_c.class)
						.get(new Object[]{m_provided_signal_id});
			}
			if (relInst39006 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39006 = (ProvidedSignal_c) roots[i].getInstanceList(
							ProvidedSignal_c.class).get(
							new Object[]{m_provided_signal_id});
					if (relInst39006 != null)
						break;
				}
			}
			//synchronized
			if (relInst39006 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39006) && !isProxy())) {
					relInst39006.relateAcrossR528To(this, notifyChanges);
				}
			}
		}

		if (RequiredSignal == null) {
			// R529
			RequiredSignal_c relInst39007 = (RequiredSignal_c) baseRoot
					.getInstanceList(RequiredSignal_c.class).get(
							new Object[]{m_required_signal_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39007 == null) {
				relInst39007 = (RequiredSignal_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(RequiredSignal_c.class)
						.get(new Object[]{m_required_signal_id});
			}
			if (relInst39007 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39007 = (RequiredSignal_c) roots[i].getInstanceList(
							RequiredSignal_c.class).get(
							new Object[]{m_required_signal_id});
					if (relInst39007 != null)
						break;
				}
			}
			//synchronized
			if (relInst39007 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39007) && !isProxy())) {
					relInst39007.relateAcrossR529To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R526
		// SM_SEVT
		inst = IsSupertypeSemEvent;
		unrelateAcrossR526From(IsSupertypeSemEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R528
		// SPR_PS
		inst = ProvidedSignal;
		unrelateAcrossR528From(ProvidedSignal, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R529
		// SPR_RS
		inst = RequiredSignal;
		unrelateAcrossR529From(RequiredSignal, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SignalEvent_c inst = (SignalEvent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SignalEvent_c SignalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		SignalEvent_c result = findSignalEventInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SignalEvent_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSignalEventInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SignalEvent_c findSignalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SignalEvent_c x = (SignalEvent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SignalEvent_c SignalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return SignalEventInstance(modelRoot, test, true);
	}

	public static SignalEvent_c SignalEventInstance(ModelRoot modelRoot) {
		return SignalEventInstance(modelRoot, null, true);
	}

	public static SignalEvent_c[] SignalEventInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SignalEvent_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(SignalEvent_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SignalEvent_c x = (SignalEvent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SignalEvent_c[] ret_set = new SignalEvent_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SignalEvent_c[0];
			}
		}
	}
	public static SignalEvent_c[] SignalEventInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return SignalEventInstances(modelRoot, test, true);
	}
	public static SignalEvent_c[] SignalEventInstances(ModelRoot modelRoot) {
		return SignalEventInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Signal Event.dispose call: ";
		SemEvent_c testR526Inst1 = SemEvent_c.getOneSM_SEVTOnR526(this, false);

		if (testR526Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "526 ";
		}
		ProvidedSignal_c testR528Inst = ProvidedSignal_c.getOneSPR_PSOnR528(
				this, false);

		if (testR528Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "528 ";
		}
		RequiredSignal_c testR529Inst = RequiredSignal_c.getOneSPR_RSOnR529(
				this, false);

		if (testR529Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "529 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Signal Event", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		if (attributeName.equals("provided_signal_id")) {
			return true;
		}
		if (attributeName.equals("required_signal_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmspd_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmspd_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmevt_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeSemEvent != null);

	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getProvided_signal_idLongBased() {
		if (ProvidedSignal != null) {
			return ProvidedSignal.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getProvided_signal_id() {
		if (ProvidedSignal != null) {
			return ProvidedSignal.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getProvided_signal_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_provided_signal_id))
			return m_provided_signal_id;
		else
			return getProvided_signal_id();
	}

	public void setProvided_signal_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_provided_signal_id)) {
				return;
			}
		} else if (m_provided_signal_id != null) {
			if (m_provided_signal_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Provided_signal_id", m_provided_signal_id, newValue, true);
		m_provided_signal_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getRequired_signal_idLongBased() {
		if (RequiredSignal != null) {
			return RequiredSignal.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getRequired_signal_id() {
		if (RequiredSignal != null) {
			return RequiredSignal.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRequired_signal_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_required_signal_id))
			return m_required_signal_id;
		else
			return getRequired_signal_id();
	}

	public void setRequired_signal_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_required_signal_id)) {
				return;
			}
		} else if (m_required_signal_id != null) {
			if (m_required_signal_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Required_signal_id", m_required_signal_id, newValue, true);
		m_required_signal_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getSignal_name() {
		ModelRoot modelRoot = getModelRoot();
		ProvidedSignal_c v_proSignal = ProvidedSignal_c
				.getOneSPR_PSOnR528(this);

		RequiredSignal_c v_reqSignal = RequiredSignal_c
				.getOneSPR_RSOnR529(this);

		if (((v_proSignal != null) || (v_reqSignal != null))) {

			String v_result = "";

			InterfaceReference_c v_ifRef = InterfaceReference_c
					.getOneC_IROnR4009(Provision_c
							.getOneC_POnR4501(ProvidedExecutableProperty_c
									.getOneSPR_PEPOnR4503(v_proSignal)));

			if ((v_ifRef == null)) {

				v_ifRef = InterfaceReference_c.getOneC_IROnR4009(Requirement_c
						.getOneC_ROnR4500(RequiredExecutableProperty_c
								.getOneSPR_REPOnR4502(v_reqSignal)));

			}

			Port_c v_port = Port_c.getOneC_POOnR4016(v_ifRef);

			if ((v_port != null)) {

				if (!v_port.getName().equals("")) {

					v_result = v_port.getName() + "::";

				}

				else {

					Interface_c v_interface = Interface_c
							.getOneC_IOnR4012(v_ifRef);

					if ((v_interface != null)) {

						if (!v_interface.getName().equals("")) {

							v_result = v_interface.getName() + "::";

						}

					}

					else {

						return Getcachedsignalname();

					}

				}

				if ((v_proSignal != null)) {

					v_result = v_result + v_proSignal.getName();

				}

				else {

					v_result = v_result + v_reqSignal.getName();

				}

				Setcachedsignalname(v_result);

				return v_result;

			}

			else {

				return Getcachedsignalname();

			}

		}

		else {

			return Getcachedsignalname();

		}

	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event", //$NON-NLS-1$
				" Operation entered: Signal Event::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SignalEvent_c[] objs = SignalEvent_c.SignalEventInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event", //$NON-NLS-1$
				" Operation entered: Signal Event::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SignalEvent_c_test39009_c implements ClassQueryInterface_c {
			SignalEvent_c_test39009_c(java.util.UUID p39010,
					java.util.UUID p39011, java.util.UUID p39012) {
				m_p39010 = p39010;
				m_p39011 = p39011;
				m_p39012 = p39012;
			}
			private java.util.UUID m_p39010;
			private java.util.UUID m_p39011;
			private java.util.UUID m_p39012;
			public boolean evaluate(Object candidate) {
				SignalEvent_c selected = (SignalEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39010))
						& (selected.getSm_id().equals(m_p39011))
						& (selected.getSmspd_id().equals(m_p39012));
				return retval;
			}
		}

		SignalEvent_c[] objs39008 = SignalEvent_c.SignalEventInstances(
				modelRoot, new SignalEvent_c_test39009_c(getSmevt_id(),
						getSm_id(), getSmspd_id()));

		if (((objs39008.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Signal Event", //$NON-NLS-1$
								"Consistency: Object: Signal Event: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39008.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Signal Event: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39008.length), e);
			}
			retval = false;

		}

		if (((objs39008.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Signal Event", //$NON-NLS-1$
								"Consistency: Object: Signal Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39008.length)
										+ " SMevt_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Signal Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39008.length)
										+ " SMevt_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Signal Event is a subtype in association: rel.Numb = 526
		// The supertype class is: SEM Event
		class SemEvent_c_test39016_c implements ClassQueryInterface_c {
			SemEvent_c_test39016_c(java.util.UUID p39017,
					java.util.UUID p39018, java.util.UUID p39019) {
				m_p39017 = p39017;
				m_p39018 = p39018;
				m_p39019 = p39019;
			}
			private java.util.UUID m_p39017;
			private java.util.UUID m_p39018;
			private java.util.UUID m_p39019;
			public boolean evaluate(Object candidate) {
				SemEvent_c selected = (SemEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39017))
						& (selected.getSm_id().equals(m_p39018))
						& (selected.getSmspd_id().equals(m_p39019));
				return retval;
			}
		}

		SemEvent_c[] objs39015 = SemEvent_c.SemEventInstances(modelRoot,
				new SemEvent_c_test39016_c(getSmevt_id(), getSm_id(),
						getSmspd_id()));

		if (((objs39015.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Signal Event", //$NON-NLS-1$
								"Consistency: Object: Signal Event: Association: 526: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39015.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Signal Event: Association: 526: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39015.length), e);
			}
			retval = false;

		}

		// Signal Event is a referring class in association: rel.Numb = 528
		// The participating class is: Provided Signal
		class ProvidedSignal_c_test39021_c implements ClassQueryInterface_c {
			ProvidedSignal_c_test39021_c(java.util.UUID p39022) {
				m_p39022 = p39022;
			}
			private java.util.UUID m_p39022;
			public boolean evaluate(Object candidate) {
				ProvidedSignal_c selected = (ProvidedSignal_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39022));
				return retval;
			}
		}

		ProvidedSignal_c[] objs39020 = ProvidedSignal_c
				.ProvidedSignalInstances(modelRoot,
						new ProvidedSignal_c_test39021_c(
								getProvided_signal_id()));

		if (((objs39020.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Signal Event", //$NON-NLS-1$
								"Consistency: Object: Signal Event: Association: 528: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39020.length)
										+ " Provided_Signal_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Signal Event: Association: 528: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39020.length)
										+ " Provided_Signal_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Signal Event is a referring class in association: rel.Numb = 529
		// The participating class is: Required Signal
		class RequiredSignal_c_test39024_c implements ClassQueryInterface_c {
			RequiredSignal_c_test39024_c(java.util.UUID p39025) {
				m_p39025 = p39025;
			}
			private java.util.UUID m_p39025;
			public boolean evaluate(Object candidate) {
				RequiredSignal_c selected = (RequiredSignal_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39025));
				return retval;
			}
		}

		RequiredSignal_c[] objs39023 = RequiredSignal_c
				.RequiredSignalInstances(modelRoot,
						new RequiredSignal_c_test39024_c(
								getRequired_signal_id()));

		if (((objs39023.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Signal Event", //$NON-NLS-1$
								"Consistency: Object: Signal Event: Association: 529: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39023.length)
										+ " Required_Signal_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Signal Event: Association: 529: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39023.length)
										+ " Required_Signal_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event",
				" Operation entered: SignalEvent::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ProvidedSignal_c v_provSig = ProvidedSignal_c.getOneSPR_PSOnR528(this);

		if ((v_provSig != null)) {

			this.unrelateAcrossR528From(v_provSig);

		}

		RequiredSignal_c v_reqSig = RequiredSignal_c.getOneSPR_RSOnR529(this);

		if ((v_reqSig != null)) {

			this.unrelateAcrossR529From(v_reqSig);

		}

		SemEvent_c v_sevt = SemEvent_c.getOneSM_SEVTOnR526(this);

		if ((v_sevt != null)) {

			this.unrelateAcrossR526From(v_sevt);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_event_text() {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event",
				" Operation entered: SignalEvent::Get_event_text");
		final ModelRoot modelRoot = getModelRoot();
		ProvidedSignal_c v_provSig = ProvidedSignal_c.getOneSPR_PSOnR528(this);

		RequiredSignal_c v_reqSig = RequiredSignal_c.getOneSPR_RSOnR529(this);

		if ((v_provSig == null) && (v_reqSig == null)) {

			return getSignal_name();

		}

		else {

			String v_result = getSignal_name();

			InterfaceReference_c v_ifRef = InterfaceReference_c
					.getOneC_IROnR4009(Provision_c
							.getOneC_POnR4501(ProvidedExecutableProperty_c
									.getOneSPR_PEPOnR4503(v_provSig)));

			if ((v_ifRef == null)) {

				v_ifRef = InterfaceReference_c.getOneC_IROnR4009(Requirement_c
						.getOneC_ROnR4500(RequiredExecutableProperty_c
								.getOneSPR_REPOnR4502(v_reqSig)));

			}

			PropertyParameter_c[] v_parameters = PropertyParameter_c
					.getManyC_PPsOnR4006(ExecutableProperty_c
							.getManyC_EPsOnR4501(ProvidedExecutableProperty_c
									.getManySPR_PEPsOnR4503(v_provSig)));

			if ((v_reqSig != null)) {

				v_parameters = PropertyParameter_c
						.getManyC_PPsOnR4006(ExecutableProperty_c
								.getManyC_EPsOnR4500(RequiredExecutableProperty_c
										.getManySPR_REPsOnR4502(v_reqSig)));

			}

			if (((v_parameters.length != 0))) {

				v_result = v_result + " (";

				String v_sep = "";

				PropertyParameter_c v_parameter = null;
				for (int i37208 = 0; i37208 < v_parameters.length; i37208++) {
					v_parameter = v_parameters[i37208];

					DataType_c v_dt = DataType_c.getOneS_DTOnR4007(v_parameter);

					v_result = v_result + v_sep + v_parameter.getName() + ":"
							+ v_dt.getName();

					v_sep = ", ";

				}

				v_result = v_result + ")";

			}

			return v_result;

		}

	} // End get_event_text
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event",
				" Operation entered: SignalEvent::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return getSignal_name();

	} // End get_name
	public String Getcachedsignalname() {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event",
				" Operation entered: SignalEvent::Getcachedsignalname");
		return m_signal_name;
	} // End getCachedSignalName
	public void Setcachedsignalname(final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Signal Event",
				" Operation entered: SignalEvent::Setcachedsignalname");
		m_signal_name = p_Value;
	} // End setCachedSignalName

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Signal Event
