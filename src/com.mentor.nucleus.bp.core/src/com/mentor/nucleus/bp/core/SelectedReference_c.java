package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SelectedReference_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SELECTED_REFERENCE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SelectedReference_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SelectedReference_c(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_op_value_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_op_value_id = IdAssigner.preprocessUUID(p_m_op_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}
	static public SelectedReference_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_op_value_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);
		SelectedReference_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			new_inst = (SelectedReference_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_op_value_id = IdAssigner
						.preprocessUUID(p_m_op_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SelectedReference_c(modelRoot, p_m_value_id,
					p_m_obj_id, p_m_attr_id, p_m_op_value_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SelectedReference_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_op_value_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);
		SelectedReference_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			source = (SelectedReference_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_op_value_id = IdAssigner
						.preprocessUUID(p_m_op_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		SelectedReference_c new_inst = new SelectedReference_c(modelRoot,
				p_m_value_id, p_m_obj_id, p_m_attr_id, p_m_op_value_id);
		return new_inst;
	}
	public SelectedReference_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_op_value_id = IdAssigner.NULL_UUID;
		m_attr_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SelectedReference_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SelectedReference_c)) {
			return false;
		}

		SelectedReference_c me = (SelectedReference_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
						.equals(((SelectedReference_c) elem).getValue_id())) && this != elem)) {
			return false;
		}
		if (!getValue_id().equals(((SelectedReference_c) elem).getValue_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SelectedReference_c)) {
			return false;
		}

		SelectedReference_c me = (SelectedReference_c) elem;
		if (!getValue_idCachedValue().equals(
				((SelectedReference_c) elem).getValue_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_op_value_id;
	private java.util.UUID m_attr_id;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	Value_c IsSupertypeValue;
	public void relateAcrossR801To(Value_c target) {
		relateAcrossR801To(target, true);
	}
	public void relateAcrossR801To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeValue)
			return; // already related

		if (IsSupertypeValue != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeValue != null) {

				IsSupertypeValue.clearBackPointerR801To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectedReference_c.relateAcrossR801To(Value_c target)",
									"Relate performed across R801 from Selected Reference to Value without unrelate of prior instance.");
				}
			}

			IsSupertypeValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR801To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR801From(Value_c target) {
		unrelateAcrossR801From(target, true);
	}
	public void unrelateAcrossR801From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeValue == null)
			return; // already unrelated

		if (target != IsSupertypeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R801",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR801To(this);
		}

		if (IsSupertypeValue != null) {

			m_value_id = IsSupertypeValue.getValue_id();
			IsSupertypeValue = null;
			target.removeRef();
		}
	}

	public static SelectedReference_c getOneV_SLROnR801(Value_c[] targets) {
		return getOneV_SLROnR801(targets, null);
	}

	public static SelectedReference_c getOneV_SLROnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		SelectedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_SLROnR801(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectedReference_c getOneV_SLROnR801(Value_c target) {
		return getOneV_SLROnR801(target, null);
	}

	public static SelectedReference_c getOneV_SLROnR801(Value_c target,
			boolean loadComponent) {
		return getOneV_SLROnR801(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectedReference_c getOneV_SLROnR801(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_SLROnR801(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectedReference_c getOneV_SLROnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_SLROnR801(modelRoot, target, test, true);
	}

	public static SelectedReference_c getOneV_SLROnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_SLROnR801(modelRoot, target, test);
	}
	private static SelectedReference_c find_getOneV_SLROnR801(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SelectedReference_c source = (SelectedReference_c) target.backPointer_IsSubtypeSelectedReferenceIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SelectedReference_c[] getManyV_SLRsOnR801(Value_c[] targets) {
		return getManyV_SLRsOnR801(targets, null);
	}
	public static SelectedReference_c[] getManyV_SLRsOnR801(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_SLRsOnR801(targets, null, loadComponent);
	}
	public static SelectedReference_c[] getManyV_SLRsOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_SLRsOnR801(targets, test, true);
	}

	public static SelectedReference_c[] getManyV_SLRsOnR801(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectedReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SelectedReference_c source = (SelectedReference_c) targets[i].backPointer_IsSubtypeSelectedReferenceIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SelectedReference_c[] ret_set = new SelectedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectedReference_c[0];
		}
	}

	public static SelectedReference_c[] getManyV_SLRsOnR801(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_SLRsOnR801(targetArray);
		} else {
			SelectedReference_c[] result = new SelectedReference_c[0];
			return result;
		}
	}

	public static SelectedReference_c[] getManyV_SLRsOnR801(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_SLRsOnR801(targetArray, loadComponent);
		} else {
			SelectedReference_c[] result = new SelectedReference_c[0];
			return result;
		}
	}

	// referring navigation

	OperationValue_c ValueOperationValue;
	public void relateAcrossR825To(OperationValue_c target) {
		relateAcrossR825To(target, true);
	}
	public void relateAcrossR825To(OperationValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ValueOperationValue)
			return; // already related

		if (ValueOperationValue != target) {

			Object oldKey = getInstanceKey();

			if (ValueOperationValue != null) {

				ValueOperationValue.clearBackPointerR825To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectedReference_c.relateAcrossR825To(OperationValue_c target)",
									"Relate performed across R825 from Selected Reference to Operation Value without unrelate of prior instance.");
				}
			}

			ValueOperationValue = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_op_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR825To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR825From(OperationValue_c target) {
		unrelateAcrossR825From(target, true);
	}
	public void unrelateAcrossR825From(OperationValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ValueOperationValue == null)
			return; // already unrelated

		if (target != ValueOperationValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R825",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR825To(this);
		}

		if (ValueOperationValue != null) {

			m_op_value_id = ValueOperationValue.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_op_value_id)) {
				m_op_value_id = ValueOperationValue.getValue_idCachedValue();
			}
			ValueOperationValue = null;
			target.removeRef();
		}
	}

	public static SelectedReference_c getOneV_SLROnR825(
			OperationValue_c[] targets) {
		return getOneV_SLROnR825(targets, null);
	}

	public static SelectedReference_c getOneV_SLROnR825(
			OperationValue_c[] targets, ClassQueryInterface_c test) {
		SelectedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_SLROnR825(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectedReference_c getOneV_SLROnR825(OperationValue_c target) {
		return getOneV_SLROnR825(target, null);
	}

	public static SelectedReference_c getOneV_SLROnR825(
			OperationValue_c target, boolean loadComponent) {
		return getOneV_SLROnR825(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectedReference_c getOneV_SLROnR825(
			OperationValue_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_SLROnR825(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectedReference_c getOneV_SLROnR825(ModelRoot modelRoot,
			OperationValue_c target, ClassQueryInterface_c test) {
		return getOneV_SLROnR825(modelRoot, target, test, true);
	}

	public static SelectedReference_c getOneV_SLROnR825(ModelRoot modelRoot,
			OperationValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_SLROnR825(modelRoot, target, test);
	}
	private static SelectedReference_c find_getOneV_SLROnR825(
			ModelRoot modelRoot, OperationValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			SelectedReference_c source = (SelectedReference_c) target.backPointer_SelectedReference_R825;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SelectedReference_c[] getManyV_SLRsOnR825(
			OperationValue_c[] targets) {
		return getManyV_SLRsOnR825(targets, null);
	}
	public static SelectedReference_c[] getManyV_SLRsOnR825(
			OperationValue_c[] targets, boolean loadComponent) {
		return getManyV_SLRsOnR825(targets, null, loadComponent);
	}
	public static SelectedReference_c[] getManyV_SLRsOnR825(
			OperationValue_c[] targets, ClassQueryInterface_c test) {
		return getManyV_SLRsOnR825(targets, test, true);
	}

	public static SelectedReference_c[] getManyV_SLRsOnR825(
			OperationValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectedReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SelectedReference_c source = (SelectedReference_c) targets[i].backPointer_SelectedReference_R825;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SelectedReference_c[] ret_set = new SelectedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectedReference_c[0];
		}
	}

	public static SelectedReference_c[] getManyV_SLRsOnR825(
			OperationValue_c target) {
		if (target != null) {
			OperationValue_c[] targetArray = new OperationValue_c[1];
			targetArray[0] = target;
			return getManyV_SLRsOnR825(targetArray);
		} else {
			SelectedReference_c[] result = new SelectedReference_c[0];
			return result;
		}
	}

	public static SelectedReference_c[] getManyV_SLRsOnR825(
			OperationValue_c target, boolean loadComponent) {
		if (target != null) {
			OperationValue_c[] targetArray = new OperationValue_c[1];
			targetArray[0] = target;
			return getManyV_SLRsOnR825(targetArray, loadComponent);
		} else {
			SelectedReference_c[] result = new SelectedReference_c[0];
			return result;
		}
	}

	// referring navigation

	Attribute_c MemberAttribute;
	public void relateAcrossR812To(Attribute_c target) {
		relateAcrossR812To(target, true);
	}
	public void relateAcrossR812To(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MemberAttribute)
			return; // already related

		if (MemberAttribute != target) {

			Object oldKey = getInstanceKey();

			if (MemberAttribute != null) {

				MemberAttribute.clearBackPointerR812To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectedReference_c.relateAcrossR812To(Attribute_c target)",
									"Relate performed across R812 from Selected Reference to Attribute without unrelate of prior instance.");
				}
			}

			MemberAttribute = target;
			m_attr_id = target.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR812To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR812From(Attribute_c target) {
		unrelateAcrossR812From(target, true);
	}
	public void unrelateAcrossR812From(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (MemberAttribute == null)
			return; // already unrelated

		if (target != MemberAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R812",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR812To(this);
		}

		if (MemberAttribute != null) {

			m_attr_id = MemberAttribute.getAttr_id();
			m_obj_id = MemberAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = MemberAttribute.getObj_idCachedValue();
			}
			MemberAttribute = null;
			target.removeRef();
		}
	}

	public static SelectedReference_c getOneV_SLROnR812(Attribute_c[] targets) {
		return getOneV_SLROnR812(targets, null);
	}

	public static SelectedReference_c getOneV_SLROnR812(Attribute_c[] targets,
			ClassQueryInterface_c test) {
		SelectedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_SLROnR812(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectedReference_c getOneV_SLROnR812(Attribute_c target) {
		return getOneV_SLROnR812(target, null);
	}

	public static SelectedReference_c getOneV_SLROnR812(Attribute_c target,
			boolean loadComponent) {
		return getOneV_SLROnR812(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectedReference_c getOneV_SLROnR812(Attribute_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_SLROnR812(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectedReference_c getOneV_SLROnR812(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test) {
		return getOneV_SLROnR812(modelRoot, target, test, true);
	}

	public static SelectedReference_c getOneV_SLROnR812(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_SLROnR812(modelRoot, target, test);
	}
	private static SelectedReference_c find_getOneV_SLROnR812(
			ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_SelectedReference_R812) {
				for (int i = 0; i < target.backPointer_SelectedReference_R812
						.size(); ++i) {
					SelectedReference_c source = (SelectedReference_c) target.backPointer_SelectedReference_R812
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SelectedReference_c[] getManyV_SLRsOnR812(
			Attribute_c[] targets) {
		return getManyV_SLRsOnR812(targets, null);
	}
	public static SelectedReference_c[] getManyV_SLRsOnR812(
			Attribute_c[] targets, boolean loadComponent) {
		return getManyV_SLRsOnR812(targets, null, loadComponent);
	}
	public static SelectedReference_c[] getManyV_SLRsOnR812(
			Attribute_c[] targets, ClassQueryInterface_c test) {
		return getManyV_SLRsOnR812(targets, test, true);
	}

	public static SelectedReference_c[] getManyV_SLRsOnR812(
			Attribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectedReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_SelectedReference_R812) {
				for (int j = 0; j < targets[i].backPointer_SelectedReference_R812
						.size(); ++j) {
					SelectedReference_c source = (SelectedReference_c) targets[i].backPointer_SelectedReference_R812
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SelectedReference_c[] ret_set = new SelectedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectedReference_c[0];
		}
	}

	public static SelectedReference_c[] getManyV_SLRsOnR812(Attribute_c target) {
		return getManyV_SLRsOnR812(target, null);
	}

	public static SelectedReference_c[] getManyV_SLRsOnR812(Attribute_c target,
			boolean loadComponent) {
		return getManyV_SLRsOnR812(target, null, loadComponent);
	}

	public static SelectedReference_c[] getManyV_SLRsOnR812(Attribute_c target,
			ClassQueryInterface_c test) {
		return getManyV_SLRsOnR812(target, test, true);
	}

	public static SelectedReference_c[] getManyV_SLRsOnR812(Attribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new SelectedReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_SelectedReference_R812) {
			for (int i = 0; i < target.backPointer_SelectedReference_R812
					.size(); ++i) {
				SelectedReference_c source = (SelectedReference_c) target.backPointer_SelectedReference_R812
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SelectedReference_c[] ret_set = new SelectedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectedReference_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R801
		Value_c relInst38025 = (Value_c) baseRoot
				.getInstanceList(Value_c.class).get(new Object[]{m_value_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38025 == null) {
			relInst38025 = (Value_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Value_c.class)
					.get(new Object[]{m_value_id});
		}
		if (relInst38025 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38025 = (Value_c) roots[i]
						.getInstanceList(Value_c.class).get(
								new Object[]{m_value_id});
				if (relInst38025 != null)
					break;
			}
		}
		//synchronized
		if (relInst38025 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38025) && !isProxy())) {
				relInst38025.relateAcrossR801To(this, notifyChanges);
			}
		}

		if (ValueOperationValue == null) {
			// R825
			OperationValue_c relInst38026 = (OperationValue_c) baseRoot
					.getInstanceList(OperationValue_c.class).get(
							new Object[]{m_op_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38026 == null) {
				relInst38026 = (OperationValue_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(OperationValue_c.class)
						.get(new Object[]{m_op_value_id});
			}
			if (relInst38026 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38026 = (OperationValue_c) roots[i].getInstanceList(
							OperationValue_c.class).get(
							new Object[]{m_op_value_id});
					if (relInst38026 != null)
						break;
				}
			}
			//synchronized
			if (relInst38026 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38026) && !isProxy())) {
					relInst38026.relateAcrossR825To(this, notifyChanges);
				}
			}
		}

		if (MemberAttribute == null) {
			// R812
			Attribute_c relInst38027 = (Attribute_c) baseRoot.getInstanceList(
					Attribute_c.class).get(new Object[]{m_attr_id, m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38027 == null) {
				relInst38027 = (Attribute_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Attribute_c.class)
						.get(new Object[]{m_attr_id, m_obj_id});
			}
			if (relInst38027 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38027 = (Attribute_c) roots[i].getInstanceList(
							Attribute_c.class).get(
							new Object[]{m_attr_id, m_obj_id});
					if (relInst38027 != null)
						break;
				}
			}
			//synchronized
			if (relInst38027 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38027) && !isProxy())) {
					relInst38027.relateAcrossR812To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R801
		// V_VAL
		inst = IsSupertypeValue;
		unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R825
		// V_TRV
		inst = ValueOperationValue;
		unrelateAcrossR825From(ValueOperationValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R812
		// O_ATTR
		inst = MemberAttribute;
		unrelateAcrossR812From(MemberAttribute, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SelectedReference_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SelectedReference_c inst = (SelectedReference_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SelectedReference_c SelectedReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SelectedReference_c result = findSelectedReferenceInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static SelectedReference_c findSelectedReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SelectedReference_c x = (SelectedReference_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static SelectedReference_c SelectedReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SelectedReferenceInstance(modelRoot, test, true);
	}

	public static SelectedReference_c SelectedReferenceInstance(
			ModelRoot modelRoot) {
		return SelectedReferenceInstance(modelRoot, null, true);
	}

	public static SelectedReference_c[] SelectedReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectedReference_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SelectedReference_c x = (SelectedReference_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SelectedReference_c[] ret_set = new SelectedReference_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SelectedReference_c[0];
			}
		}
	}
	public static SelectedReference_c[] SelectedReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SelectedReferenceInstances(modelRoot, test, true);
	}
	public static SelectedReference_c[] SelectedReferenceInstances(
			ModelRoot modelRoot) {
		return SelectedReferenceInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Selected Reference.dispose call: ";
		Value_c testR801Inst3 = Value_c.getOneV_VALOnR801(this, false);

		if (testR801Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "801 ";
		}
		OperationValue_c testR825Inst = OperationValue_c.getOneV_TRVOnR825(
				this, false);

		if (testR825Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "825 ";
		}
		Attribute_c testR812Inst = Attribute_c.getOneO_ATTROnR812(this, false);

		if (testR812Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "812 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Selected Reference",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("op_value_id")) {
			return true;
		}
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeValue != null);

	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getOp_value_idLongBased() {
		if (ValueOperationValue != null) {
			return ValueOperationValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getOp_value_id() {
		if (ValueOperationValue != null) {
			return ValueOperationValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getOp_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_op_value_id))
			return m_op_value_id;
		else
			return getOp_value_id();
	}

	public void setOp_value_id(java.util.UUID newValue) {
		m_op_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getAttr_idLongBased() {
		if (MemberAttribute != null) {
			return MemberAttribute.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (MemberAttribute != null) {
			return MemberAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		m_attr_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getObj_idLongBased() {
		if (MemberAttribute != null) {
			return MemberAttribute.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (MemberAttribute != null) {
			return MemberAttribute.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		m_obj_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Selected Reference", //$NON-NLS-1$
						" Operation entered: Selected Reference::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SelectedReference_c[] objs = SelectedReference_c
				.SelectedReferenceInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Selected Reference", //$NON-NLS-1$
				" Operation entered: Selected Reference::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SelectedReference_c_test38029_c implements ClassQueryInterface_c {
			SelectedReference_c_test38029_c(java.util.UUID p38030) {
				m_p38030 = p38030;
			}
			private java.util.UUID m_p38030;
			public boolean evaluate(Object candidate) {
				SelectedReference_c selected = (SelectedReference_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38030));
				return retval;
			}
		}

		SelectedReference_c[] objs38028 = SelectedReference_c
				.SelectedReferenceInstances(modelRoot,
						new SelectedReference_c_test38029_c(getValue_id()));

		if (((objs38028.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Selected Reference", //$NON-NLS-1$
								"Consistency: Object: Selected Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38028.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Selected Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38028.length), e);
			}
			retval = false;

		}

		if (((objs38028.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Selected Reference", //$NON-NLS-1$
								"Consistency: Object: Selected Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38028.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Selected Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38028.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Selected Reference is a subtype in association: rel.Numb = 801
		// The supertype class is: Value
		class Value_c_test38034_c implements ClassQueryInterface_c {
			Value_c_test38034_c(java.util.UUID p38035) {
				m_p38035 = p38035;
			}
			private java.util.UUID m_p38035;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38035));
				return retval;
			}
		}

		Value_c[] objs38033 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38034_c(getValue_id()));

		if (((objs38033.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Selected Reference", //$NON-NLS-1$
								"Consistency: Object: Selected Reference: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38033.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Selected Reference: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38033.length), e);
			}
			retval = false;

		}

		// Selected Reference is a referring class in association: rel.Numb = 825
		// The participating class is: Operation Value
		class OperationValue_c_test38037_c implements ClassQueryInterface_c {
			OperationValue_c_test38037_c(java.util.UUID p38038) {
				m_p38038 = p38038;
			}
			private java.util.UUID m_p38038;
			public boolean evaluate(Object candidate) {
				OperationValue_c selected = (OperationValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38038));
				return retval;
			}
		}

		OperationValue_c[] objs38036 = OperationValue_c
				.OperationValueInstances(modelRoot,
						new OperationValue_c_test38037_c(getOp_value_id()));

		if (((objs38036.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Selected Reference", //$NON-NLS-1$
								"Consistency: Object: Selected Reference: Association: 825: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38036.length)
										+ " Op_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Selected Reference: Association: 825: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38036.length)
										+ " Op_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Selected Reference is a referring class in association: rel.Numb = 812
		// The participating class is: Attribute
		class Attribute_c_test38040_c implements ClassQueryInterface_c {
			Attribute_c_test38040_c(java.util.UUID p38041, java.util.UUID p38042) {
				m_p38041 = p38041;
				m_p38042 = p38042;
			}
			private java.util.UUID m_p38041;
			private java.util.UUID m_p38042;
			public boolean evaluate(Object candidate) {
				Attribute_c selected = (Attribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p38041))
						& (selected.getObj_id().equals(m_p38042));
				return retval;
			}
		}

		Attribute_c[] objs38039 = Attribute_c.AttributeInstances(modelRoot,
				new Attribute_c_test38040_c(getAttr_id(), getObj_id()));

		if (((objs38039.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Selected Reference", //$NON-NLS-1$
								"Consistency: Object: Selected Reference: Association: 812: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38039.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Selected Reference: Association: 812: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38039.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Selected Reference",
				" Operation entered: SelectedReference::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Attribute_c v_attr = Attribute_c.getOneO_ATTROnR812(this);

		if (((v_attr != null))) {

			this.unrelateAcrossR812From(v_attr);

		}

		OperationValue_c v_trv = OperationValue_c.getOneV_TRVOnR825(this);

		if (((v_trv != null))) {

			this.unrelateAcrossR825From(v_trv);

			Value_c v_val = Value_c.getOneV_VALOnR801(v_trv);

			if (v_val != null) {
				v_val.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		delete();

	} // End dispose
	public Object Getvalue(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Selected Reference",
				" Operation entered: SelectedReference::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_instance();

	} // End getValue

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Selected Reference
