package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SelectRelatedWhere_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SELECT_RELATED_WHERE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SelectRelatedWhere_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SelectRelatedWhere_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id,
			java.util.UUID p_m_where_clause_value_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_where_clause_value_id = IdAssigner
				.preprocessUUID(p_m_where_clause_value_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public SelectRelatedWhere_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id,
			java.util.UUID p_m_where_clause_value_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);
		SelectRelatedWhere_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (SelectRelatedWhere_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_where_clause_value_id = IdAssigner
						.preprocessUUID(p_m_where_clause_value_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SelectRelatedWhere_c(modelRoot, p_m_statement_id,
					p_m_where_clause_value_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SelectRelatedWhere_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id,
			java.util.UUID p_m_where_clause_value_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);
		SelectRelatedWhere_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (SelectRelatedWhere_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_where_clause_value_id = IdAssigner
						.preprocessUUID(p_m_where_clause_value_id);

				return source;
			}
		}
		// there is no instance matching the id
		SelectRelatedWhere_c new_inst = new SelectRelatedWhere_c(modelRoot,
				p_m_statement_id, p_m_where_clause_value_id);
		return new_inst;
	}
	public SelectRelatedWhere_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_where_clause_value_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SelectRelatedWhere_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SelectRelatedWhere_c)) {
			return false;
		}

		SelectRelatedWhere_c me = (SelectRelatedWhere_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((SelectRelatedWhere_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((SelectRelatedWhere_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SelectRelatedWhere_c)) {
			return false;
		}

		SelectRelatedWhere_c me = (SelectRelatedWhere_c) elem;
		if (!getStatement_idCachedValue().equals(
				((SelectRelatedWhere_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_where_clause_value_id;

	// declare association references from this class

	// referring navigation

	Value_c WhereClauseValue;
	public void relateAcrossR611To(Value_c target) {
		relateAcrossR611To(target, true);
	}
	public void relateAcrossR611To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == WhereClauseValue)
			return; // already related

		if (WhereClauseValue != target) {

			Object oldKey = getInstanceKey();

			if (WhereClauseValue != null) {

				WhereClauseValue.clearBackPointerR611To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectRelatedWhere_c.relateAcrossR611To(Value_c target)",
									"Relate performed across R611 from Select Related Where to Value without unrelate of prior instance.");
				}
			}

			WhereClauseValue = target;
			m_where_clause_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR611To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR611From(Value_c target) {
		unrelateAcrossR611From(target, true);
	}
	public void unrelateAcrossR611From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (WhereClauseValue == null)
			return; // already unrelated

		if (target != WhereClauseValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R611",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR611To(this);
		}

		if (WhereClauseValue != null) {

			m_where_clause_value_id = WhereClauseValue.getValue_id();
			WhereClauseValue = null;
			target.removeRef();
		}
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(Value_c[] targets) {
		return getOneACT_SRWOnR611(targets, null);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(Value_c[] targets,
			ClassQueryInterface_c test) {
		SelectRelatedWhere_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SRWOnR611(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(Value_c target) {
		return getOneACT_SRWOnR611(target, null);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(Value_c target,
			boolean loadComponent) {
		return getOneACT_SRWOnR611(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SRWOnR611(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneACT_SRWOnR611(modelRoot, target, test, true);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR611(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_SRWOnR611(modelRoot, target, test);
	}
	private static SelectRelatedWhere_c find_getOneACT_SRWOnR611(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SelectRelatedWhere_c source = (SelectRelatedWhere_c) target.backPointer_SelectRelatedWhere_R611;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR611(Value_c[] targets) {
		return getManyACT_SRWsOnR611(targets, null);
	}
	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR611(
			Value_c[] targets, boolean loadComponent) {
		return getManyACT_SRWsOnR611(targets, null, loadComponent);
	}
	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR611(
			Value_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SRWsOnR611(targets, test, true);
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR611(
			Value_c[] targets, ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectRelatedWhere_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SelectRelatedWhere_c source = (SelectRelatedWhere_c) targets[i].backPointer_SelectRelatedWhere_R611;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SelectRelatedWhere_c[] ret_set = new SelectRelatedWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectRelatedWhere_c[0];
		}
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR611(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_SRWsOnR611(targetArray);
		} else {
			SelectRelatedWhere_c[] result = new SelectRelatedWhere_c[0];
			return result;
		}
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR611(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_SRWsOnR611(targetArray, loadComponent);
		} else {
			SelectRelatedWhere_c[] result = new SelectRelatedWhere_c[0];
			return result;
		}
	}

	// referring navigation

	Select_c IsSupertypeSelect;
	public void relateAcrossR664To(Select_c target) {
		relateAcrossR664To(target, true);
	}
	public void relateAcrossR664To(Select_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeSelect)
			return; // already related

		if (IsSupertypeSelect != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeSelect != null) {

				IsSupertypeSelect.clearBackPointerR664To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectRelatedWhere_c.relateAcrossR664To(Select_c target)",
									"Relate performed across R664 from Select Related Where to Select without unrelate of prior instance.");
				}
			}

			IsSupertypeSelect = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR664To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR664From(Select_c target) {
		unrelateAcrossR664From(target, true);
	}
	public void unrelateAcrossR664From(Select_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeSelect == null)
			return; // already unrelated

		if (target != IsSupertypeSelect) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R664",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR664To(this);
		}

		if (IsSupertypeSelect != null) {

			m_statement_id = IsSupertypeSelect.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = IsSupertypeSelect.getStatement_idCachedValue();
			}
			IsSupertypeSelect = null;
			target.removeRef();
		}
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(Select_c[] targets) {
		return getOneACT_SRWOnR664(targets, null);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(Select_c[] targets,
			ClassQueryInterface_c test) {
		SelectRelatedWhere_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SRWOnR664(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(Select_c target) {
		return getOneACT_SRWOnR664(target, null);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(Select_c target,
			boolean loadComponent) {
		return getOneACT_SRWOnR664(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(Select_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SRWOnR664(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(ModelRoot modelRoot,
			Select_c target, ClassQueryInterface_c test) {
		return getOneACT_SRWOnR664(modelRoot, target, test, true);
	}

	public static SelectRelatedWhere_c getOneACT_SRWOnR664(ModelRoot modelRoot,
			Select_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_SRWOnR664(modelRoot, target, test);
	}
	private static SelectRelatedWhere_c find_getOneACT_SRWOnR664(
			ModelRoot modelRoot, Select_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SelectRelatedWhere_c source = (SelectRelatedWhere_c) target.backPointer_IsSubtypeSelectRelatedWhereIsSubtype_R664;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR664(
			Select_c[] targets) {
		return getManyACT_SRWsOnR664(targets, null);
	}
	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR664(
			Select_c[] targets, boolean loadComponent) {
		return getManyACT_SRWsOnR664(targets, null, loadComponent);
	}
	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR664(
			Select_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SRWsOnR664(targets, test, true);
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR664(
			Select_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectRelatedWhere_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SelectRelatedWhere_c source = (SelectRelatedWhere_c) targets[i].backPointer_IsSubtypeSelectRelatedWhereIsSubtype_R664;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SelectRelatedWhere_c[] ret_set = new SelectRelatedWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectRelatedWhere_c[0];
		}
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR664(Select_c target) {
		if (target != null) {
			Select_c[] targetArray = new Select_c[1];
			targetArray[0] = target;
			return getManyACT_SRWsOnR664(targetArray);
		} else {
			SelectRelatedWhere_c[] result = new SelectRelatedWhere_c[0];
			return result;
		}
	}

	public static SelectRelatedWhere_c[] getManyACT_SRWsOnR664(Select_c target,
			boolean loadComponent) {
		if (target != null) {
			Select_c[] targetArray = new Select_c[1];
			targetArray[0] = target;
			return getManyACT_SRWsOnR664(targetArray, loadComponent);
		} else {
			SelectRelatedWhere_c[] result = new SelectRelatedWhere_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (WhereClauseValue == null) {
			// R611
			Value_c relInst39396 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_where_clause_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39396 == null) {
				relInst39396 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_where_clause_value_id});
			}
			if (relInst39396 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39396 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(
							new Object[]{m_where_clause_value_id});
					if (relInst39396 != null)
						break;
				}
			}
			//synchronized
			if (relInst39396 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39396) && !isProxy())) {
					relInst39396.relateAcrossR611To(this, notifyChanges);
				}
			}
		}

		// R664
		Select_c relInst39397 = (Select_c) baseRoot.getInstanceList(
				Select_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39397 == null) {
			relInst39397 = (Select_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Select_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst39397 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39397 = (Select_c) roots[i].getInstanceList(
						Select_c.class).get(new Object[]{m_statement_id});
				if (relInst39397 != null)
					break;
			}
		}
		//synchronized
		if (relInst39397 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39397) && !isProxy())) {
				relInst39397.relateAcrossR664To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R611
		// V_VAL
		inst = WhereClauseValue;
		unrelateAcrossR611From(WhereClauseValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R664
		// ACT_SEL
		inst = IsSupertypeSelect;
		unrelateAcrossR664From(IsSupertypeSelect, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SelectRelatedWhere_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SelectRelatedWhere_c inst = (SelectRelatedWhere_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SelectRelatedWhere_c SelectRelatedWhereInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SelectRelatedWhere_c result = findSelectRelatedWhereInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static SelectRelatedWhere_c findSelectRelatedWhereInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SelectRelatedWhere_c x = (SelectRelatedWhere_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static SelectRelatedWhere_c SelectRelatedWhereInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SelectRelatedWhereInstance(modelRoot, test, true);
	}

	public static SelectRelatedWhere_c SelectRelatedWhereInstance(
			ModelRoot modelRoot) {
		return SelectRelatedWhereInstance(modelRoot, null, true);
	}

	public static SelectRelatedWhere_c[] SelectRelatedWhereInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectRelatedWhere_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SelectRelatedWhere_c x = (SelectRelatedWhere_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SelectRelatedWhere_c[] ret_set = new SelectRelatedWhere_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SelectRelatedWhere_c[0];
			}
		}
	}
	public static SelectRelatedWhere_c[] SelectRelatedWhereInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SelectRelatedWhereInstances(modelRoot, test, true);
	}
	public static SelectRelatedWhere_c[] SelectRelatedWhereInstances(
			ModelRoot modelRoot) {
		return SelectRelatedWhereInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Select Related Where.dispose call: ";
		Value_c testR611Inst = Value_c.getOneV_VALOnR611(this, false);

		if (testR611Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "611 ";
		}
		Select_c testR664Inst1 = Select_c.getOneACT_SELOnR664(this, false);

		if (testR664Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "664 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Select Related Where",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("where_clause_value_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeSelect != null) {
			return IsSupertypeSelect.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeSelect != null) {
			return IsSupertypeSelect.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeSelect != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getWhere_clause_value_idLongBased() {
		if (WhereClauseValue != null) {
			return WhereClauseValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getWhere_clause_value_id() {
		if (WhereClauseValue != null) {
			return WhereClauseValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getWhere_clause_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_where_clause_value_id))
			return m_where_clause_value_id;
		else
			return getWhere_clause_value_id();
	}

	public void setWhere_clause_value_id(java.util.UUID newValue) {
		m_where_clause_value_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Select Related Where", //$NON-NLS-1$
						" Operation entered: Select Related Where::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SelectRelatedWhere_c[] objs = SelectRelatedWhere_c
				.SelectRelatedWhereInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Select Related Where", //$NON-NLS-1$
				" Operation entered: Select Related Where::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SelectRelatedWhere_c_test39399_c implements ClassQueryInterface_c {
			SelectRelatedWhere_c_test39399_c(java.util.UUID p39400) {
				m_p39400 = p39400;
			}
			private java.util.UUID m_p39400;
			public boolean evaluate(Object candidate) {
				SelectRelatedWhere_c selected = (SelectRelatedWhere_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39400));
				return retval;
			}
		}

		SelectRelatedWhere_c[] objs39398 = SelectRelatedWhere_c
				.SelectRelatedWhereInstances(modelRoot,
						new SelectRelatedWhere_c_test39399_c(getStatement_id()));

		if (((objs39398.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select Related Where", //$NON-NLS-1$
								"Consistency: Object: Select Related Where: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39398.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select Related Where: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39398.length), e);
			}
			retval = false;

		}

		if (((objs39398.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select Related Where", //$NON-NLS-1$
								"Consistency: Object: Select Related Where: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39398.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select Related Where: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39398.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Select Related Where is a subtype in association: rel.Numb = 664
		// The supertype class is: Select
		class Select_c_test39404_c implements ClassQueryInterface_c {
			Select_c_test39404_c(java.util.UUID p39405) {
				m_p39405 = p39405;
			}
			private java.util.UUID m_p39405;
			public boolean evaluate(Object candidate) {
				Select_c selected = (Select_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39405));
				return retval;
			}
		}

		Select_c[] objs39403 = Select_c.SelectInstances(modelRoot,
				new Select_c_test39404_c(getStatement_id()));

		if (((objs39403.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select Related Where", //$NON-NLS-1$
								"Consistency: Object: Select Related Where: Association: 664: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39403.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select Related Where: Association: 664: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39403.length), e);
			}
			retval = false;

		}

		// Select Related Where is a referring class in association: rel.Numb = 611
		// The participating class is: Value
		class Value_c_test39407_c implements ClassQueryInterface_c {
			Value_c_test39407_c(java.util.UUID p39408) {
				m_p39408 = p39408;
			}
			private java.util.UUID m_p39408;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p39408));
				return retval;
			}
		}

		Value_c[] objs39406 = Value_c.ValueInstances(modelRoot,
				new Value_c_test39407_c(getWhere_clause_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39406.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Select Related Where", //$NON-NLS-1$
								"Consistency: Object: Select Related Where: Association: 611: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39406.length)
										+ " Where_Clause_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select Related Where: Association: 611: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39406.length)
										+ " Where_Clause_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Select Related Where",
				" Operation entered: SelectRelatedWhere::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Select Related Where
