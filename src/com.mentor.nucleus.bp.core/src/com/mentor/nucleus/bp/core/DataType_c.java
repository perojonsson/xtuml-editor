      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.DataType_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_DATA_TYPE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class DataType_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public DataType_c(ModelRoot modelRoot,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_dom_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_defaultvalue)
  {
    super(modelRoot);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       m_defaultvalue = p_m_defaultvalue;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
    setUniqueId(m_dt_id);
    Object [] key = {m_dt_id};
    addInstanceToMap(key);
  }
  static public DataType_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_dom_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_defaultvalue, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(DataType_c.class);
      DataType_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_dt_id};
          new_inst = (DataType_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       new_inst.m_defaultvalue = p_m_defaultvalue;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new DataType_c(modelRoot,
p_m_dt_id,
p_m_dom_id,
p_m_name,
p_m_descrip,
p_m_defaultvalue
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public DataType_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_dom_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_defaultvalue){
    InstanceList instances = modelRoot.getInstanceList(DataType_c.class);
    DataType_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_dt_id
            };
        source = (DataType_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       source.m_defaultvalue = p_m_defaultvalue;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    DataType_c new_inst = new DataType_c(modelRoot,
p_m_dt_id,
p_m_dom_id,
p_m_name,
p_m_descrip,
p_m_defaultvalue
);
    return new_inst;
  }
  public DataType_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_name = "";   
     m_descrip = "";   
     m_dom_id = IdAssigner.NULL_UUID;   
     m_defaultvalue = "";   
     m_dt_id = idAssigner.createUUID();
    setUniqueId(m_dt_id);
    Object [] key = {m_dt_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_dt_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_dt_id !=  p_newKey ){
	
		m_dt_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  

	public void ResolveuserdatatypeforR17(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			UserDataType_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (UserDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(UserDataType_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR17(element);
				element.unrelateAcrossR17From(existingRTO);
				element.relateAcrossR17To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR17From(this);
					element.relateAcrossR17To(existingRTO);
				}
			}
		}
	}
	public void ResolvecoredatatypeforR17(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			CoreDataType_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (CoreDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(CoreDataType_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR17(element);
				element.unrelateAcrossR17From(existingRTO);
				element.relateAcrossR17To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR17From(this);
					element.relateAcrossR17To(existingRTO);
				}
			}
		}
	}
	public void ResolveenumerationdatatypeforR17(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			EnumerationDataType_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (EnumerationDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(EnumerationDataType_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR17(element);
				element.unrelateAcrossR17From(existingRTO);
				element.relateAcrossR17To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR17From(this);
					element.relateAcrossR17To(existingRTO);
				}
			}
		}
	}
	public void ResolvestructureddatatypeforR17(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			StructuredDataType_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (StructuredDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(StructuredDataType_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR17(element);
				element.unrelateAcrossR17From(existingRTO);
				element.relateAcrossR17To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR17From(this);
					element.relateAcrossR17To(existingRTO);
				}
			}
		}
	}
	public void ResolveinstancereferencedatatypeforR17(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			InstanceReferenceDataType_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (InstanceReferenceDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(InstanceReferenceDataType_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR17(element);
				element.unrelateAcrossR17From(existingRTO);
				element.relateAcrossR17To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR17From(this);
					element.relateAcrossR17To(existingRTO);
				}
			}
		}
	}
	public void ResolveuserdatatypeforR18(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			UserDataType_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (UserDataType_c) Ooaofooa.getDefaultInstance().getInstanceList(UserDataType_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR18(element);
				element.unrelateAcrossR18From(existingRTO);
				element.relateAcrossR18To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR18From(this);
					element.relateAcrossR18To(existingRTO);
				}
			}
		}
	}
	public void ResolvestructurememberforR45(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			StructureMember_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (StructureMember_c) Ooaofooa.getDefaultInstance().getInstanceList(StructureMember_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR45(element);
				element.unrelateAcrossR45From(existingRTO);
				element.relateAcrossR45To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR45From(this);
					element.relateAcrossR45To(existingRTO);
				}
			}
		}
	}
	public void ResolvefunctionparameterforR26(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			FunctionParameter_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (FunctionParameter_c) Ooaofooa.getDefaultInstance().getInstanceList(FunctionParameter_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR26(element);
				element.unrelateAcrossR26From(existingRTO);
				element.relateAcrossR26To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR26From(this);
					element.relateAcrossR26To(existingRTO);
				}
			}
		}
	}
	public void ResolvefunctionforR25(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			Function_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (Function_c) Ooaofooa.getDefaultInstance().getInstanceList(Function_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR25(element);
				element.unrelateAcrossR25From(existingRTO);
				element.relateAcrossR25To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR25From(this);
					element.relateAcrossR25To(existingRTO);
				}
			}
		}
	}
	public void ResolveexternalentityeventdataitemforR16(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			ExternalEntityEventDataItem_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (ExternalEntityEventDataItem_c) Ooaofooa.getDefaultInstance().getInstanceList(ExternalEntityEventDataItem_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR16(element);
				element.unrelateAcrossR16From(existingRTO);
				element.relateAcrossR16To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR16From(this);
					element.relateAcrossR16To(existingRTO);
				}
			}
		}
	}
	public void ResolveexternalentitydataitemforR15(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			ExternalEntityDataItem_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (ExternalEntityDataItem_c) Ooaofooa.getDefaultInstance().getInstanceList(ExternalEntityDataItem_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR15(element);
				element.unrelateAcrossR15From(existingRTO);
				element.relateAcrossR15To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR15From(this);
					element.relateAcrossR15To(existingRTO);
				}
			}
		}
	}
	public void ResolvedatatypeinsuppressionforR47(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			DatatypeInSuppression_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (DatatypeInSuppression_c) Ooaofooa.getDefaultInstance().getInstanceList(DatatypeInSuppression_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR47(element);
				element.unrelateAcrossR47From(existingRTO);
				element.relateAcrossR47To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR47From(this);
					element.relateAcrossR47To(existingRTO);
				}
			}
		}
	}
	public void ResolvesystemdatatypeinpackageforR4401(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			SystemDatatypeInPackage_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (SystemDatatypeInPackage_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemDatatypeInPackage_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR4401(element);
				element.unrelateAcrossR4401From(existingRTO);
				element.relateAcrossR4401To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4401From(this);
					element.relateAcrossR4401To(existingRTO);
				}
			}
		}
	}
	public void ResolvedatatypeinpackageforR39(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			DataTypeInPackage_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (DataTypeInPackage_c) Ooaofooa.getDefaultInstance().getInstanceList(DataTypeInPackage_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR39(element);
				element.unrelateAcrossR39From(existingRTO);
				element.relateAcrossR39To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR39From(this);
					element.relateAcrossR39To(existingRTO);
				}
			}
		}
	}
	public void ResolvevalueforR820(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			Value_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR820(element);
				element.unrelateAcrossR820From(existingRTO);
				element.relateAcrossR820To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR820From(this);
					element.relateAcrossR820To(existingRTO);
				}
			}
		}
	}
	public void ResolvetransientvarforR821(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			TransientVar_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (TransientVar_c) Ooaofooa.getDefaultInstance().getInstanceList(TransientVar_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR821(element);
				element.unrelateAcrossR821From(existingRTO);
				element.relateAcrossR821To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR821From(this);
					element.relateAcrossR821To(existingRTO);
				}
			}
		}
	}
	public void ResolvevariableforR848(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			Variable_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (Variable_c) Ooaofooa.getDefaultInstance().getInstanceList(Variable_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR848(element);
				element.unrelateAcrossR848From(existingRTO);
				element.relateAcrossR848To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR848From(this);
					element.relateAcrossR848To(existingRTO);
				}
			}
		}
	}
	public void ResolveoperationparameterforR118(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			OperationParameter_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (OperationParameter_c) Ooaofooa.getDefaultInstance().getInstanceList(OperationParameter_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR118(element);
				element.unrelateAcrossR118From(existingRTO);
				element.relateAcrossR118To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR118From(this);
					element.relateAcrossR118To(existingRTO);
				}
			}
		}
	}
	public void ResolveoperationforR116(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			Operation_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (Operation_c) Ooaofooa.getDefaultInstance().getInstanceList(Operation_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR116(element);
				element.unrelateAcrossR116From(existingRTO);
				element.relateAcrossR116To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR116From(this);
					element.relateAcrossR116To(existingRTO);
				}
			}
		}
	}
	public void ResolveattributeforR114(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			Attribute_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (Attribute_c) Ooaofooa.getDefaultInstance().getInstanceList(Attribute_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR114(element);
				element.unrelateAcrossR114From(existingRTO);
				element.relateAcrossR114To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR114From(this);
					element.relateAcrossR114To(existingRTO);
				}
			}
		}
	}
	public void ResolvestatemachineeventdataitemforR524(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			StateMachineEventDataItem_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (StateMachineEventDataItem_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachineEventDataItem_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR524(element);
				element.unrelateAcrossR524From(existingRTO);
				element.relateAcrossR524To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR524From(this);
					element.relateAcrossR524To(existingRTO);
				}
			}
		}
	}
	public void ResolvebridgeforR20(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			Bridge_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (Bridge_c) Ooaofooa.getDefaultInstance().getInstanceList(Bridge_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR20(element);
				element.unrelateAcrossR20From(existingRTO);
				element.relateAcrossR20To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR20From(this);
					element.relateAcrossR20To(existingRTO);
				}
			}
		}
	}
	public void ResolvebridgeparameterforR22(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			BridgeParameter_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (BridgeParameter_c) Ooaofooa.getDefaultInstance().getInstanceList(BridgeParameter_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR22(element);
				element.unrelateAcrossR22From(existingRTO);
				element.relateAcrossR22To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR22From(this);
					element.relateAcrossR22To(existingRTO);
				}
			}
		}
	}
	public void ResolvesymbolicconstantforR1500(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			SymbolicConstant_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (SymbolicConstant_c) Ooaofooa.getDefaultInstance().getInstanceList(SymbolicConstant_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR1500(element);
				element.unrelateAcrossR1500From(existingRTO);
				element.relateAcrossR1500To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR1500From(this);
					element.relateAcrossR1500To(existingRTO);
				}
			}
		}
	}
	public void ResolvepropertyparameterforR4007(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			PropertyParameter_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (PropertyParameter_c) Ooaofooa.getDefaultInstance().getInstanceList(PropertyParameter_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR4007(element);
				element.unrelateAcrossR4007From(existingRTO);
				element.relateAcrossR4007To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4007From(this);
					element.relateAcrossR4007To(existingRTO);
				}
			}
		}
	}
	public void ResolveinterfaceoperationforR4008(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			InterfaceOperation_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (InterfaceOperation_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceOperation_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultdatatype", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				DataType_c existingRTO = DataType_c.getOneS_DTOnR4008(element);
				element.unrelateAcrossR4008From(existingRTO);
				element.relateAcrossR4008To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertodatatype", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4008From(this);
					element.relateAcrossR4008To(existingRTO);
				}
			}
		}
	}


  public boolean equals (Object elem) {
     if (!(elem instanceof DataType_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof DataType_c)) {
           return false;
       }
       
       DataType_c me = (DataType_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getDt_id()) || IdAssigner.NULL_UUID.equals(((DataType_c)elem).getDt_id())) && this != elem)) {
      	return false;
      }
      if (!getDt_id().equals(((DataType_c)elem).getDt_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof DataType_c)) {
           return false;
       }
       
       DataType_c me = (DataType_c)elem;
      if (!getDt_idCachedValue().equals(((DataType_c)elem).getDt_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_dom_id ;
  private String       m_defaultvalue ;
  private java.util.UUID         m_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"DataType_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Data Type to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_dt_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_dt_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static DataType_c getOneS_DTOnR8001(PackageableElement_c [] targets)
{
    return getOneS_DTOnR8001(targets, null);
}

public static DataType_c getOneS_DTOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_DTOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static DataType_c getOneS_DTOnR8001(PackageableElement_c target)
{
  return getOneS_DTOnR8001(target, null);
}

public static DataType_c getOneS_DTOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneS_DTOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static DataType_c getOneS_DTOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_DTOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static DataType_c getOneS_DTOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneS_DTOnR8001(modelRoot, target, test, true);
}

public static DataType_c getOneS_DTOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneS_DTOnR8001(modelRoot,target,test);
}
private static DataType_c find_getOneS_DTOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    DataType_c source = (DataType_c)target.backPointer_IsSubtypeDataTypeIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static DataType_c [] getManyS_DTsOnR8001(PackageableElement_c [] targets)
{
  return getManyS_DTsOnR8001(targets, null);
}
public static DataType_c [] getManyS_DTsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyS_DTsOnR8001(targets, null, loadComponent);
}
public static DataType_c [] getManyS_DTsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_DTsOnR8001(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new DataType_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(DataType_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      DataType_c source = (DataType_c)targets[i].backPointer_IsSubtypeDataTypeIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	DataType_c[] ret_set = new DataType_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new DataType_c[0];
  }
  }

public static DataType_c [] getManyS_DTsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR8001(targetArray);
  } else {
    DataType_c [] result = new DataType_c [0] ;
  return result ;
}
}

public static DataType_c [] getManyS_DTsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR8001(targetArray, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Domain_c DefinesTypesAvailableWithinDomain ;
public void relateAcrossR14To(Domain_c target)
{
	relateAcrossR14To(target, true);
}
public void relateAcrossR14To(Domain_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == DefinesTypesAvailableWithinDomain) return;  // already related

    if ( DefinesTypesAvailableWithinDomain != target ) {
    
    Object oldKey = getInstanceKey();

    if (DefinesTypesAvailableWithinDomain != null) {
        UmlProblem.removeXtUMLProblem(this, DefinesTypesAvailableWithinDomain);
    
        DefinesTypesAvailableWithinDomain.clearBackPointerR14To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"DataType_c.relateAcrossR14To(Domain_c target)", 
			"Relate performed across R14 from Data Type to Domain without unrelate of prior instance.");  
		}
    }
                
    	DefinesTypesAvailableWithinDomain = target ;
        m_dom_id = target.getDom_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR14To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "14", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR14From(Domain_c target)
{
	unrelateAcrossR14From(target, true);
}
public void unrelateAcrossR14From(Domain_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (DefinesTypesAvailableWithinDomain == null) return;  // already unrelated
	
	if (target != DefinesTypesAvailableWithinDomain) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R14", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR14To(this);
    }
    

      if(DefinesTypesAvailableWithinDomain != null) {
      
        m_dom_id = DefinesTypesAvailableWithinDomain.getDom_id();
        DefinesTypesAvailableWithinDomain = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "14", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static DataType_c getOneS_DTOnR14(Domain_c [] targets)
{
    return getOneS_DTOnR14(targets, null);
}

public static DataType_c getOneS_DTOnR14(Domain_c [] targets, ClassQueryInterface_c test)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_DTOnR14(targets[i], test);
        }
    }

    return ret_val;
}

public static DataType_c getOneS_DTOnR14(Domain_c target)
{
  return getOneS_DTOnR14(target, null);
}

public static DataType_c getOneS_DTOnR14(Domain_c target, boolean loadComponent)
{
    return getOneS_DTOnR14(target.getModelRoot(), target, null, loadComponent);
}

public static DataType_c getOneS_DTOnR14(Domain_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_DTOnR14(target.getModelRoot(), target, test);
  }
  return null;
}

public static DataType_c getOneS_DTOnR14(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test)
{
	return getOneS_DTOnR14(modelRoot, target, test, true);
}

public static DataType_c getOneS_DTOnR14(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  DataType_c result = null;
  
  result=find_getOneS_DTOnR14(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,DataType_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneS_DTOnR14(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static DataType_c find_getOneS_DTOnR14(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ContainsDefinedDataTypeContainsDefined_R14) {
	    for ( int i = 0; i < target.backPointer_ContainsDefinedDataTypeContainsDefined_R14.size(); ++i ) {
	      DataType_c source = (DataType_c)target.backPointer_ContainsDefinedDataTypeContainsDefined_R14.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static DataType_c [] getManyS_DTsOnR14(Domain_c [] targets)
{
  return getManyS_DTsOnR14(targets, null);
}
public static DataType_c [] getManyS_DTsOnR14(Domain_c [] targets, boolean loadComponent)
{
  return getManyS_DTsOnR14(targets, null, loadComponent);
}
public static DataType_c [] getManyS_DTsOnR14(Domain_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_DTsOnR14(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR14(Domain_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new DataType_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, DataType_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(DataType_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ContainsDefinedDataTypeContainsDefined_R14) {
	    for (int j = 0; j < targets[i].backPointer_ContainsDefinedDataTypeContainsDefined_R14.size(); ++j) {
	      DataType_c source = (DataType_c)targets[i].backPointer_ContainsDefinedDataTypeContainsDefined_R14.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	DataType_c[] ret_set = new DataType_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new DataType_c[0];
  }
  }

public static DataType_c [] getManyS_DTsOnR14(Domain_c target)
{
  return getManyS_DTsOnR14(target, null);
}

public static DataType_c [] getManyS_DTsOnR14(Domain_c target, boolean loadComponent)
{
  return getManyS_DTsOnR14(target, null, loadComponent);
}

public static DataType_c [] getManyS_DTsOnR14(Domain_c target, ClassQueryInterface_c test)
{
	return getManyS_DTsOnR14(target, test, true);
}

public static DataType_c [] getManyS_DTsOnR14(Domain_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new DataType_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, DataType_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_ContainsDefinedDataTypeContainsDefined_R14) {
    for (int i = 0; i < target.backPointer_ContainsDefinedDataTypeContainsDefined_R14.size(); ++i) {
      DataType_c source = (DataType_c)target.backPointer_ContainsDefinedDataTypeContainsDefined_R14.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		DataType_c[] ret_set = new DataType_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new DataType_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

UserDataType_c backPointer_IsSubtypeUserDataTypeIsSubtype_R17;

public void setUserDataTypeOrderInChildListR17(UserDataType_c target, int index) {
	unrelateAcrossR17From(target);
	UserDataType_c[] elements = UserDataType_c.getManyS_UDTsOnR17(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR17From((UserDataType_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR17To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR17To((UserDataType_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR17To(UserDataType_c target)
{
  if (target != null) {
    target.relateAcrossR17To(this, true) ;
  }
}

public void relateAcrossR17To(UserDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR17To(this, notifyChanges) ;
  }
}

public void setBackPointerR17To(UserDataType_c target)
{
    backPointer_IsSubtypeUserDataTypeIsSubtype_R17 = target;
}

public void unrelateAcrossR17From(UserDataType_c target)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, true) ;
  }
}

public void unrelateAcrossR17From(UserDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, notifyChanges) ;
  }
}

public void clearBackPointerR17To(UserDataType_c target)
{
	if (target == backPointer_IsSubtypeUserDataTypeIsSubtype_R17) {
		backPointer_IsSubtypeUserDataTypeIsSubtype_R17 = null;
	}
}

public static DataType_c getOneS_DTOnR17(UserDataType_c [] targets)
{
    return getOneS_DTOnR17(targets, null);
}

public static DataType_c getOneS_DTOnR17(UserDataType_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR17(targets, test, true);
}

public static DataType_c getOneS_DTOnR17(UserDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR17(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR17(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR17(UserDataType_c target)
{
	return getOneS_DTOnR17(target, true);
}
public static DataType_c getOneS_DTOnR17(UserDataType_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR17(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsSupertypeDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c [] targets)
{
  return getManyS_DTsOnR17(targets, null);
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UserDataType_c [] targetArray = new UserDataType_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR17(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c target)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(UserDataType_c target, boolean loadComponent)
{
    return getManyS_DTsOnR17(target, null, loadComponent);
}

  
  
  
// referred to navigation

CoreDataType_c backPointer_IsSubtypeCoreDataTypeIsSubtype_R17;

public void setCoreDataTypeOrderInChildListR17(CoreDataType_c target, int index) {
	unrelateAcrossR17From(target);
	CoreDataType_c[] elements = CoreDataType_c.getManyS_CDTsOnR17(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR17From((CoreDataType_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR17To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR17To((CoreDataType_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR17To(CoreDataType_c target)
{
  if (target != null) {
    target.relateAcrossR17To(this, true) ;
  }
}

public void relateAcrossR17To(CoreDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR17To(this, notifyChanges) ;
  }
}

public void setBackPointerR17To(CoreDataType_c target)
{
    backPointer_IsSubtypeCoreDataTypeIsSubtype_R17 = target;
}

public void unrelateAcrossR17From(CoreDataType_c target)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, true) ;
  }
}

public void unrelateAcrossR17From(CoreDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, notifyChanges) ;
  }
}

public void clearBackPointerR17To(CoreDataType_c target)
{
	if (target == backPointer_IsSubtypeCoreDataTypeIsSubtype_R17) {
		backPointer_IsSubtypeCoreDataTypeIsSubtype_R17 = null;
	}
}

public static DataType_c getOneS_DTOnR17(CoreDataType_c [] targets)
{
    return getOneS_DTOnR17(targets, null);
}

public static DataType_c getOneS_DTOnR17(CoreDataType_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR17(targets, test, true);
}

public static DataType_c getOneS_DTOnR17(CoreDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR17(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR17(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR17(CoreDataType_c target)
{
	return getOneS_DTOnR17(target, true);
}
public static DataType_c getOneS_DTOnR17(CoreDataType_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR17(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsSupertypeDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c [] targets)
{
  return getManyS_DTsOnR17(targets, null);
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    CoreDataType_c [] targetArray = new CoreDataType_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR17(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c target)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(CoreDataType_c target, boolean loadComponent)
{
    return getManyS_DTsOnR17(target, null, loadComponent);
}

  
  
  
// referred to navigation

EnumerationDataType_c backPointer_IsSubtypeEnumerationDataTypeIsSubtype_R17;

public void setEnumerationDataTypeOrderInChildListR17(EnumerationDataType_c target, int index) {
	unrelateAcrossR17From(target);
	EnumerationDataType_c[] elements = EnumerationDataType_c.getManyS_EDTsOnR17(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR17From((EnumerationDataType_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR17To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR17To((EnumerationDataType_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR17To(EnumerationDataType_c target)
{
  if (target != null) {
    target.relateAcrossR17To(this, true) ;
  }
}

public void relateAcrossR17To(EnumerationDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR17To(this, notifyChanges) ;
  }
}

public void setBackPointerR17To(EnumerationDataType_c target)
{
    backPointer_IsSubtypeEnumerationDataTypeIsSubtype_R17 = target;
}

public void unrelateAcrossR17From(EnumerationDataType_c target)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, true) ;
  }
}

public void unrelateAcrossR17From(EnumerationDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, notifyChanges) ;
  }
}

public void clearBackPointerR17To(EnumerationDataType_c target)
{
	if (target == backPointer_IsSubtypeEnumerationDataTypeIsSubtype_R17) {
		backPointer_IsSubtypeEnumerationDataTypeIsSubtype_R17 = null;
	}
}

public static DataType_c getOneS_DTOnR17(EnumerationDataType_c [] targets)
{
    return getOneS_DTOnR17(targets, null);
}

public static DataType_c getOneS_DTOnR17(EnumerationDataType_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR17(targets, test, true);
}

public static DataType_c getOneS_DTOnR17(EnumerationDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR17(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR17(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR17(EnumerationDataType_c target)
{
	return getOneS_DTOnR17(target, true);
}
public static DataType_c getOneS_DTOnR17(EnumerationDataType_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR17(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsSupertypeDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c [] targets)
{
  return getManyS_DTsOnR17(targets, null);
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    EnumerationDataType_c [] targetArray = new EnumerationDataType_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR17(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c target)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(EnumerationDataType_c target, boolean loadComponent)
{
    return getManyS_DTsOnR17(target, null, loadComponent);
}

  
  
  
// referred to navigation

StructuredDataType_c backPointer_IsSubtypeStructuredDataTypeIsSubtype_R17;

public void setStructuredDataTypeOrderInChildListR17(StructuredDataType_c target, int index) {
	unrelateAcrossR17From(target);
	StructuredDataType_c[] elements = StructuredDataType_c.getManyS_SDTsOnR17(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR17From((StructuredDataType_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR17To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR17To((StructuredDataType_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR17To(StructuredDataType_c target)
{
  if (target != null) {
    target.relateAcrossR17To(this, true) ;
  }
}

public void relateAcrossR17To(StructuredDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR17To(this, notifyChanges) ;
  }
}

public void setBackPointerR17To(StructuredDataType_c target)
{
    backPointer_IsSubtypeStructuredDataTypeIsSubtype_R17 = target;
}

public void unrelateAcrossR17From(StructuredDataType_c target)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, true) ;
  }
}

public void unrelateAcrossR17From(StructuredDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, notifyChanges) ;
  }
}

public void clearBackPointerR17To(StructuredDataType_c target)
{
	if (target == backPointer_IsSubtypeStructuredDataTypeIsSubtype_R17) {
		backPointer_IsSubtypeStructuredDataTypeIsSubtype_R17 = null;
	}
}

public static DataType_c getOneS_DTOnR17(StructuredDataType_c [] targets)
{
    return getOneS_DTOnR17(targets, null);
}

public static DataType_c getOneS_DTOnR17(StructuredDataType_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR17(targets, test, true);
}

public static DataType_c getOneS_DTOnR17(StructuredDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR17(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR17(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR17(StructuredDataType_c target)
{
	return getOneS_DTOnR17(target, true);
}
public static DataType_c getOneS_DTOnR17(StructuredDataType_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR17(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsSupertypeDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c [] targets)
{
  return getManyS_DTsOnR17(targets, null);
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StructuredDataType_c [] targetArray = new StructuredDataType_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR17(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c target)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(StructuredDataType_c target, boolean loadComponent)
{
    return getManyS_DTsOnR17(target, null, loadComponent);
}

  
  
  
// referred to navigation

InstanceReferenceDataType_c backPointer_IsSubtypeInstanceReferenceDataTypeIsSubtype_R17;

public void setInstanceReferenceDataTypeOrderInChildListR17(InstanceReferenceDataType_c target, int index) {
	unrelateAcrossR17From(target);
	InstanceReferenceDataType_c[] elements = InstanceReferenceDataType_c.getManyS_IRDTsOnR17(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR17From((InstanceReferenceDataType_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR17To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR17To((InstanceReferenceDataType_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR17To(InstanceReferenceDataType_c target)
{
  if (target != null) {
    target.relateAcrossR17To(this, true) ;
  }
}

public void relateAcrossR17To(InstanceReferenceDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR17To(this, notifyChanges) ;
  }
}

public void setBackPointerR17To(InstanceReferenceDataType_c target)
{
    backPointer_IsSubtypeInstanceReferenceDataTypeIsSubtype_R17 = target;
}

public void unrelateAcrossR17From(InstanceReferenceDataType_c target)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, true) ;
  }
}

public void unrelateAcrossR17From(InstanceReferenceDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR17From(this, notifyChanges) ;
  }
}

public void clearBackPointerR17To(InstanceReferenceDataType_c target)
{
	if (target == backPointer_IsSubtypeInstanceReferenceDataTypeIsSubtype_R17) {
		backPointer_IsSubtypeInstanceReferenceDataTypeIsSubtype_R17 = null;
	}
}

public static DataType_c getOneS_DTOnR17(InstanceReferenceDataType_c [] targets)
{
    return getOneS_DTOnR17(targets, null);
}

public static DataType_c getOneS_DTOnR17(InstanceReferenceDataType_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR17(targets, test, true);
}

public static DataType_c getOneS_DTOnR17(InstanceReferenceDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR17(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR17(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR17(InstanceReferenceDataType_c target)
{
	return getOneS_DTOnR17(target, true);
}
public static DataType_c getOneS_DTOnR17(InstanceReferenceDataType_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR17(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsSupertypeDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c [] targets)
{
  return getManyS_DTsOnR17(targets, null);
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceReferenceDataType_c [] targetArray = new InstanceReferenceDataType_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR17(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c target)
{
    return getManyS_DTsOnR17(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR17(InstanceReferenceDataType_c target, boolean loadComponent)
{
    return getManyS_DTsOnR17(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<UserDataType_c> backPointer_DefinesDomainOfUserDataTypeDefinesDomainOf_R18 = new ArrayList<UserDataType_c>();

public void setUserDataTypeOrderInChildListR18(UserDataType_c target, int index) {
	unrelateAcrossR18From(target);
	UserDataType_c[] elements = UserDataType_c.getManyS_UDTsOnR18(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR18From((UserDataType_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR18To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR18To((UserDataType_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR18To(UserDataType_c target)
{
  if (target != null) {
    target.relateAcrossR18To(this, true) ;
  }
}

public void relateAcrossR18To(UserDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR18To(this, notifyChanges) ;
  }
}

public void setBackPointerR18To(UserDataType_c target)
{
  	synchronized (backPointer_DefinesDomainOfUserDataTypeDefinesDomainOf_R18) {
		backPointer_DefinesDomainOfUserDataTypeDefinesDomainOf_R18.add(target);
	}
}

public void unrelateAcrossR18From(UserDataType_c target)
{
  if (target != null) {
    target.unrelateAcrossR18From(this, true) ;
  }
}

public void unrelateAcrossR18From(UserDataType_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR18From(this, notifyChanges) ;
  }
}

public void clearBackPointerR18To(UserDataType_c target)
{
  synchronized (backPointer_DefinesDomainOfUserDataTypeDefinesDomainOf_R18) {
	    backPointer_DefinesDomainOfUserDataTypeDefinesDomainOf_R18.remove(target);
	}
}

public static DataType_c getOneS_DTOnR18(UserDataType_c [] targets)
{
    return getOneS_DTOnR18(targets, null);
}

public static DataType_c getOneS_DTOnR18(UserDataType_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR18(targets, test, true);
}

public static DataType_c getOneS_DTOnR18(UserDataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR18(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR18(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR18(UserDataType_c target)
{
	return getOneS_DTOnR18(target, true);
}
public static DataType_c getOneS_DTOnR18(UserDataType_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.AreDefinedWithinDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR18(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AreDefinedWithinDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].AreDefinedWithinDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c [] targets)
{
  return getManyS_DTsOnR18(targets, null);
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UserDataType_c [] targetArray = new UserDataType_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR18(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR18(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c target)
{
    return getManyS_DTsOnR18(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR18(UserDataType_c target, boolean loadComponent)
{
    return getManyS_DTsOnR18(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<StructureMember_c> backPointer_DefinesTheTypeOfStructureMemberDefinesTheTypeOf_R45 = new ArrayList<StructureMember_c>();

public void setStructureMemberOrderInChildListR45(StructureMember_c target, int index) {
	unrelateAcrossR45From(target);
	StructureMember_c[] elements = StructureMember_c.getManyS_MBRsOnR45(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR45From((StructureMember_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR45To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR45To((StructureMember_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR45To(StructureMember_c target)
{
  if (target != null) {
    target.relateAcrossR45To(this, true) ;
  }
}

public void relateAcrossR45To(StructureMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR45To(this, notifyChanges) ;
  }
}

public void setBackPointerR45To(StructureMember_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfStructureMemberDefinesTheTypeOf_R45) {
		backPointer_DefinesTheTypeOfStructureMemberDefinesTheTypeOf_R45.add(target);
	}
}

public void unrelateAcrossR45From(StructureMember_c target)
{
  if (target != null) {
    target.unrelateAcrossR45From(this, true) ;
  }
}

public void unrelateAcrossR45From(StructureMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR45From(this, notifyChanges) ;
  }
}

public void clearBackPointerR45To(StructureMember_c target)
{
  synchronized (backPointer_DefinesTheTypeOfStructureMemberDefinesTheTypeOf_R45) {
	    backPointer_DefinesTheTypeOfStructureMemberDefinesTheTypeOf_R45.remove(target);
	}
}

public static DataType_c getOneS_DTOnR45(StructureMember_c [] targets)
{
    return getOneS_DTOnR45(targets, null);
}

public static DataType_c getOneS_DTOnR45(StructureMember_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR45(targets, test, true);
}

public static DataType_c getOneS_DTOnR45(StructureMember_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR45(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR45(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR45(StructureMember_c target)
{
	return getOneS_DTOnR45(target, true);
}
public static DataType_c getOneS_DTOnR45(StructureMember_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR45(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c [] targets)
{
  return getManyS_DTsOnR45(targets, null);
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StructureMember_c [] targetArray = new StructureMember_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR45(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR45(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c target)
{
    return getManyS_DTsOnR45(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR45(StructureMember_c target, boolean loadComponent)
{
    return getManyS_DTsOnR45(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<FunctionParameter_c> backPointer_DescribesTypeOfFunctionParameterDescribesTypeOf_R26 = new ArrayList<FunctionParameter_c>();

public void setFunctionParameterOrderInChildListR26(FunctionParameter_c target, int index) {
	unrelateAcrossR26From(target);
	FunctionParameter_c[] elements = FunctionParameter_c.getManyS_SPARMsOnR26(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR26From((FunctionParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR26To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR26To((FunctionParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR26To(FunctionParameter_c target)
{
  if (target != null) {
    target.relateAcrossR26To(this, true) ;
  }
}

public void relateAcrossR26To(FunctionParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR26To(this, notifyChanges) ;
  }
}

public void setBackPointerR26To(FunctionParameter_c target)
{
  	synchronized (backPointer_DescribesTypeOfFunctionParameterDescribesTypeOf_R26) {
		backPointer_DescribesTypeOfFunctionParameterDescribesTypeOf_R26.add(target);
	}
}

public void unrelateAcrossR26From(FunctionParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR26From(this, true) ;
  }
}

public void unrelateAcrossR26From(FunctionParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR26From(this, notifyChanges) ;
  }
}

public void clearBackPointerR26To(FunctionParameter_c target)
{
  synchronized (backPointer_DescribesTypeOfFunctionParameterDescribesTypeOf_R26) {
	    backPointer_DescribesTypeOfFunctionParameterDescribesTypeOf_R26.remove(target);
	}
}

public static DataType_c getOneS_DTOnR26(FunctionParameter_c [] targets)
{
    return getOneS_DTOnR26(targets, null);
}

public static DataType_c getOneS_DTOnR26(FunctionParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR26(targets, test, true);
}

public static DataType_c getOneS_DTOnR26(FunctionParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR26(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR26(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR26(FunctionParameter_c target)
{
	return getOneS_DTOnR26(target, true);
}
public static DataType_c getOneS_DTOnR26(FunctionParameter_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsTypedByDataType != null){
		target.IsTypedByDataType.loadProxy();
	}
	}
    return target.IsTypedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR26(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsTypedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsTypedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c [] targets)
{
  return getManyS_DTsOnR26(targets, null);
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    FunctionParameter_c [] targetArray = new FunctionParameter_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR26(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR26(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c target)
{
    return getManyS_DTsOnR26(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR26(FunctionParameter_c target, boolean loadComponent)
{
    return getManyS_DTsOnR26(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Function_c> backPointer_DefinesReturnTypeFunctionDefinesReturnType_R25 = new ArrayList<Function_c>();

public void setFunctionOrderInChildListR25(Function_c target, int index) {
	unrelateAcrossR25From(target);
	Function_c[] elements = Function_c.getManyS_SYNCsOnR25(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR25From((Function_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR25To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR25To((Function_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR25To(Function_c target)
{
  if (target != null) {
    target.relateAcrossR25To(this, true) ;
  }
}

public void relateAcrossR25To(Function_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR25To(this, notifyChanges) ;
  }
}

public void setBackPointerR25To(Function_c target)
{
  	synchronized (backPointer_DefinesReturnTypeFunctionDefinesReturnType_R25) {
		backPointer_DefinesReturnTypeFunctionDefinesReturnType_R25.add(target);
	}
}

public void unrelateAcrossR25From(Function_c target)
{
  if (target != null) {
    target.unrelateAcrossR25From(this, true) ;
  }
}

public void unrelateAcrossR25From(Function_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR25From(this, notifyChanges) ;
  }
}

public void clearBackPointerR25To(Function_c target)
{
  synchronized (backPointer_DefinesReturnTypeFunctionDefinesReturnType_R25) {
	    backPointer_DefinesReturnTypeFunctionDefinesReturnType_R25.remove(target);
	}
}

public static DataType_c getOneS_DTOnR25(Function_c [] targets)
{
    return getOneS_DTOnR25(targets, null);
}

public static DataType_c getOneS_DTOnR25(Function_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR25(targets, test, true);
}

public static DataType_c getOneS_DTOnR25(Function_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR25(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR25(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR25(Function_c target)
{
	return getOneS_DTOnR25(target, true);
}
public static DataType_c getOneS_DTOnR25(Function_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.HasReturnTypeOfDataType != null){
		target.HasReturnTypeOfDataType.loadProxy();
	}
	}
    return target.HasReturnTypeOfDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR25(Function_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR25(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR25(Function_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HasReturnTypeOfDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].HasReturnTypeOfDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR25(Function_c [] targets)
{
  return getManyS_DTsOnR25(targets, null);
}

public static DataType_c [] getManyS_DTsOnR25(Function_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Function_c [] targetArray = new Function_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR25(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR25(Function_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR25(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR25(Function_c target)
{
    return getManyS_DTsOnR25(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR25(Function_c target, boolean loadComponent)
{
    return getManyS_DTsOnR25(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ExternalEntityEventDataItem_c> backPointer_DefinesTheTypeOfExternalEntityEventDataItemDefinesTheTypeOf_R16 = new ArrayList<ExternalEntityEventDataItem_c>();

public void setExternalEntityEventDataItemOrderInChildListR16(ExternalEntityEventDataItem_c target, int index) {
	unrelateAcrossR16From(target);
	ExternalEntityEventDataItem_c[] elements = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR16(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR16From((ExternalEntityEventDataItem_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR16To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR16To((ExternalEntityEventDataItem_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR16To(ExternalEntityEventDataItem_c target)
{
  if (target != null) {
    target.relateAcrossR16To(this, true) ;
  }
}

public void relateAcrossR16To(ExternalEntityEventDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR16To(this, notifyChanges) ;
  }
}

public void setBackPointerR16To(ExternalEntityEventDataItem_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfExternalEntityEventDataItemDefinesTheTypeOf_R16) {
		backPointer_DefinesTheTypeOfExternalEntityEventDataItemDefinesTheTypeOf_R16.add(target);
	}
}

public void unrelateAcrossR16From(ExternalEntityEventDataItem_c target)
{
  if (target != null) {
    target.unrelateAcrossR16From(this, true) ;
  }
}

public void unrelateAcrossR16From(ExternalEntityEventDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR16From(this, notifyChanges) ;
  }
}

public void clearBackPointerR16To(ExternalEntityEventDataItem_c target)
{
  synchronized (backPointer_DefinesTheTypeOfExternalEntityEventDataItemDefinesTheTypeOf_R16) {
	    backPointer_DefinesTheTypeOfExternalEntityEventDataItemDefinesTheTypeOf_R16.remove(target);
	}
}

public static DataType_c getOneS_DTOnR16(ExternalEntityEventDataItem_c [] targets)
{
    return getOneS_DTOnR16(targets, null);
}

public static DataType_c getOneS_DTOnR16(ExternalEntityEventDataItem_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR16(targets, test, true);
}

public static DataType_c getOneS_DTOnR16(ExternalEntityEventDataItem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR16(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR16(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR16(ExternalEntityEventDataItem_c target)
{
	return getOneS_DTOnR16(target, true);
}
public static DataType_c getOneS_DTOnR16(ExternalEntityEventDataItem_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR16(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c [] targets)
{
  return getManyS_DTsOnR16(targets, null);
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ExternalEntityEventDataItem_c [] targetArray = new ExternalEntityEventDataItem_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR16(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR16(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c target)
{
    return getManyS_DTsOnR16(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR16(ExternalEntityEventDataItem_c target, boolean loadComponent)
{
    return getManyS_DTsOnR16(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ExternalEntityDataItem_c> backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15 = new ArrayList<ExternalEntityDataItem_c>();

public void setExternalEntityDataItemOrderInChildListR15(ExternalEntityDataItem_c target, int index) {
	unrelateAcrossR15From(target);
	ExternalEntityDataItem_c[] elements = ExternalEntityDataItem_c.getManyS_EEDIsOnR15(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR15From((ExternalEntityDataItem_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR15To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR15To((ExternalEntityDataItem_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR15To(ExternalEntityDataItem_c target)
{
  if (target != null) {
    target.relateAcrossR15To(this, true) ;
  }
}

public void relateAcrossR15To(ExternalEntityDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR15To(this, notifyChanges) ;
  }
}

public void setBackPointerR15To(ExternalEntityDataItem_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15) {
		backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.add(target);
	}
}

public void unrelateAcrossR15From(ExternalEntityDataItem_c target)
{
  if (target != null) {
    target.unrelateAcrossR15From(this, true) ;
  }
}

public void unrelateAcrossR15From(ExternalEntityDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR15From(this, notifyChanges) ;
  }
}

public void clearBackPointerR15To(ExternalEntityDataItem_c target)
{
  synchronized (backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15) {
	    backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.remove(target);
	}
}

public static DataType_c getOneS_DTOnR15(ExternalEntityDataItem_c [] targets)
{
    return getOneS_DTOnR15(targets, null);
}

public static DataType_c getOneS_DTOnR15(ExternalEntityDataItem_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR15(targets, test, true);
}

public static DataType_c getOneS_DTOnR15(ExternalEntityDataItem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR15(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR15(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR15(ExternalEntityDataItem_c target)
{
	return getOneS_DTOnR15(target, true);
}
public static DataType_c getOneS_DTOnR15(ExternalEntityDataItem_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR15(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c [] targets)
{
  return getManyS_DTsOnR15(targets, null);
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ExternalEntityDataItem_c [] targetArray = new ExternalEntityDataItem_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR15(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR15(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c target)
{
    return getManyS_DTsOnR15(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR15(ExternalEntityDataItem_c target, boolean loadComponent)
{
    return getManyS_DTsOnR15(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<DatatypeInSuppression_c> backPointer_IsSuppressedInDatatypeInSuppressionIsSuppressedIn_R47 = new ArrayList<DatatypeInSuppression_c>();

public void setDatatypeInSuppressionOrderInChildListR47(DatatypeInSuppression_c target, int index) {
	unrelateAcrossR47From(target);
	DatatypeInSuppression_c[] elements = DatatypeInSuppression_c.getManyS_DISsOnR47(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR47From((DatatypeInSuppression_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR47To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR47To((DatatypeInSuppression_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR47To(DatatypeInSuppression_c target)
{
  if (target != null) {
    target.relateAcrossR47To(this, true) ;
  }
}

public void relateAcrossR47To(DatatypeInSuppression_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR47To(this, notifyChanges) ;
  }
}

public void setBackPointerR47To(DatatypeInSuppression_c target)
{
  	synchronized (backPointer_IsSuppressedInDatatypeInSuppressionIsSuppressedIn_R47) {
		backPointer_IsSuppressedInDatatypeInSuppressionIsSuppressedIn_R47.add(target);
	}
}

public void unrelateAcrossR47From(DatatypeInSuppression_c target)
{
  if (target != null) {
    target.unrelateAcrossR47From(this, true) ;
  }
}

public void unrelateAcrossR47From(DatatypeInSuppression_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR47From(this, notifyChanges) ;
  }
}

public void clearBackPointerR47To(DatatypeInSuppression_c target)
{
  synchronized (backPointer_IsSuppressedInDatatypeInSuppressionIsSuppressedIn_R47) {
	    backPointer_IsSuppressedInDatatypeInSuppressionIsSuppressedIn_R47.remove(target);
	}
}

public static DataType_c getOneS_DTOnR47(DatatypeInSuppression_c [] targets)
{
    return getOneS_DTOnR47(targets, null);
}

public static DataType_c getOneS_DTOnR47(DatatypeInSuppression_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR47(targets, test, true);
}

public static DataType_c getOneS_DTOnR47(DatatypeInSuppression_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR47(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR47(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR47(DatatypeInSuppression_c target)
{
	return getOneS_DTOnR47(target, true);
}
public static DataType_c getOneS_DTOnR47(DatatypeInSuppression_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ContainsSuppressedDataType != null){
		target.ContainsSuppressedDataType.loadProxy();
	}
	}
    return target.ContainsSuppressedDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR47(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainsSuppressedDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].ContainsSuppressedDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c [] targets)
{
  return getManyS_DTsOnR47(targets, null);
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    DatatypeInSuppression_c [] targetArray = new DatatypeInSuppression_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR47(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR47(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c target)
{
    return getManyS_DTsOnR47(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR47(DatatypeInSuppression_c target, boolean loadComponent)
{
    return getManyS_DTsOnR47(target, null, loadComponent);
}

public static DataType_c getOneS_DTOnR47(Domain_c target)
{
  return DataType_c.getOneS_DTOnR47(DatatypeInSuppression_c.getOneS_DISOnR47(target)) ;
}

public static DataType_c getOneS_DTOnR47(Domain_c target,
    ClassQueryInterface_c test)
{
  return DataType_c.getOneS_DTOnR47(DatatypeInSuppression_c.getManyS_DISsOnR47(target), test) ;
}

public static DataType_c [] getManyS_DTsOnR47(Domain_c target,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR47(target, test, true);
}
public static DataType_c [] getManyS_DTsOnR47(Domain_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  DatatypeInSuppression_c [] associators = DatatypeInSuppression_c.getManyS_DISsOnR47(target, loadComponent) ;
    return DataType_c.getManyS_DTsOnR47(associators, test, loadComponent) ;
}
public static DataType_c [] getManyS_DTsOnR47(Domain_c target)
{
    return getManyS_DTsOnR47(target, null, true);
}
public static DataType_c [] getManyS_DTsOnR47(Domain_c target, boolean loadComponent)
{
    return getManyS_DTsOnR47(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SystemDatatypeInPackage_c> backPointer_CanShowInLowerPackageSystemDatatypeInPackageCanShowInLowerPackage_R4401 = new ArrayList<SystemDatatypeInPackage_c>();

public void setSystemDatatypeInPackageOrderInChildListR4401(SystemDatatypeInPackage_c target, int index) {
	unrelateAcrossR4401From(target);
	SystemDatatypeInPackage_c[] elements = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4401From((SystemDatatypeInPackage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4401To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4401To((SystemDatatypeInPackage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4401To(SystemDatatypeInPackage_c target)
{
  if (target != null) {
    target.relateAcrossR4401To(this, true) ;
  }
}

public void relateAcrossR4401To(SystemDatatypeInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4401To(this, notifyChanges) ;
  }
}

public void setBackPointerR4401To(SystemDatatypeInPackage_c target)
{
  	synchronized (backPointer_CanShowInLowerPackageSystemDatatypeInPackageCanShowInLowerPackage_R4401) {
		backPointer_CanShowInLowerPackageSystemDatatypeInPackageCanShowInLowerPackage_R4401.add(target);
	}
}

public void unrelateAcrossR4401From(SystemDatatypeInPackage_c target)
{
  if (target != null) {
    target.unrelateAcrossR4401From(this, true) ;
  }
}

public void unrelateAcrossR4401From(SystemDatatypeInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4401From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4401To(SystemDatatypeInPackage_c target)
{
  synchronized (backPointer_CanShowInLowerPackageSystemDatatypeInPackageCanShowInLowerPackage_R4401) {
	    backPointer_CanShowInLowerPackageSystemDatatypeInPackageCanShowInLowerPackage_R4401.remove(target);
	}
}

public static DataType_c getOneS_DTOnR4401(SystemDatatypeInPackage_c [] targets)
{
    return getOneS_DTOnR4401(targets, null);
}

public static DataType_c getOneS_DTOnR4401(SystemDatatypeInPackage_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR4401(targets, test, true);
}

public static DataType_c getOneS_DTOnR4401(SystemDatatypeInPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR4401(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR4401(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR4401(SystemDatatypeInPackage_c target)
{
	return getOneS_DTOnR4401(target, true);
}
public static DataType_c getOneS_DTOnR4401(SystemDatatypeInPackage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.MayShowDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR4401(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].MayShowDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].MayShowDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c [] targets)
{
  return getManyS_DTsOnR4401(targets, null);
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SystemDatatypeInPackage_c [] targetArray = new SystemDatatypeInPackage_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR4401(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR4401(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c target)
{
    return getManyS_DTsOnR4401(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR4401(SystemDatatypeInPackage_c target, boolean loadComponent)
{
    return getManyS_DTsOnR4401(target, null, loadComponent);
}

public static DataType_c getOneS_DTOnR4401(DataTypePackage_c target)
{
  return DataType_c.getOneS_DTOnR4401(SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401(target)) ;
}

public static DataType_c getOneS_DTOnR4401(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
  return DataType_c.getOneS_DTOnR4401(SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401(target), test) ;
}

public static DataType_c [] getManyS_DTsOnR4401(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR4401(target, test, true);
}
public static DataType_c [] getManyS_DTsOnR4401(DataTypePackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  SystemDatatypeInPackage_c [] associators = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401(target, loadComponent) ;
    return DataType_c.getManyS_DTsOnR4401(associators, test, loadComponent) ;
}
public static DataType_c [] getManyS_DTsOnR4401(DataTypePackage_c target)
{
    return getManyS_DTsOnR4401(target, null, true);
}
public static DataType_c [] getManyS_DTsOnR4401(DataTypePackage_c target, boolean loadComponent)
{
    return getManyS_DTsOnR4401(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<DataTypeInPackage_c> backPointer_IsContainedInDataTypeInPackageIsContainedIn_R39 = new ArrayList<DataTypeInPackage_c>();

public void setDataTypeInPackageOrderInChildListR39(DataTypeInPackage_c target, int index) {
	unrelateAcrossR39From(target);
	DataTypeInPackage_c[] elements = DataTypeInPackage_c.getManyS_DIPsOnR39(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR39From((DataTypeInPackage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR39To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR39To((DataTypeInPackage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR39To(DataTypeInPackage_c target)
{
  if (target != null) {
    target.relateAcrossR39To(this, true) ;
  }
}

public void relateAcrossR39To(DataTypeInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR39To(this, notifyChanges) ;
  }
}

public void setBackPointerR39To(DataTypeInPackage_c target)
{
  	synchronized (backPointer_IsContainedInDataTypeInPackageIsContainedIn_R39) {
		backPointer_IsContainedInDataTypeInPackageIsContainedIn_R39.add(target);
	}
}

public void unrelateAcrossR39From(DataTypeInPackage_c target)
{
  if (target != null) {
    target.unrelateAcrossR39From(this, true) ;
  }
}

public void unrelateAcrossR39From(DataTypeInPackage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR39From(this, notifyChanges) ;
  }
}

public void clearBackPointerR39To(DataTypeInPackage_c target)
{
  synchronized (backPointer_IsContainedInDataTypeInPackageIsContainedIn_R39) {
	    backPointer_IsContainedInDataTypeInPackageIsContainedIn_R39.remove(target);
	}
}

public static DataType_c getOneS_DTOnR39(DataTypeInPackage_c [] targets)
{
    return getOneS_DTOnR39(targets, null);
}

public static DataType_c getOneS_DTOnR39(DataTypeInPackage_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR39(targets, test, true);
}

public static DataType_c getOneS_DTOnR39(DataTypeInPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR39(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR39(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR39(DataTypeInPackage_c target)
{
	return getOneS_DTOnR39(target, true);
}
public static DataType_c getOneS_DTOnR39(DataTypeInPackage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainsDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR39(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainsDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].ContainsDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c [] targets)
{
  return getManyS_DTsOnR39(targets, null);
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    DataTypeInPackage_c [] targetArray = new DataTypeInPackage_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR39(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR39(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c target)
{
    return getManyS_DTsOnR39(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR39(DataTypeInPackage_c target, boolean loadComponent)
{
    return getManyS_DTsOnR39(target, null, loadComponent);
}

public static DataType_c getOneS_DTOnR39(DataTypePackage_c target)
{
  return DataType_c.getOneS_DTOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(target)) ;
}

public static DataType_c getOneS_DTOnR39(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
  return DataType_c.getOneS_DTOnR39(DataTypeInPackage_c.getManyS_DIPsOnR39(target), test) ;
}

public static DataType_c [] getManyS_DTsOnR39(DataTypePackage_c target,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR39(target, test, true);
}
public static DataType_c [] getManyS_DTsOnR39(DataTypePackage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  DataTypeInPackage_c [] associators = DataTypeInPackage_c.getManyS_DIPsOnR39(target, loadComponent) ;
    return DataType_c.getManyS_DTsOnR39(associators, test, loadComponent) ;
}
public static DataType_c [] getManyS_DTsOnR39(DataTypePackage_c target)
{
    return getManyS_DTsOnR39(target, null, true);
}
public static DataType_c [] getManyS_DTsOnR39(DataTypePackage_c target, boolean loadComponent)
{
    return getManyS_DTsOnR39(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Value_c> backPointer_IsTypeOfValueIsTypeOf_R820 = new ArrayList<Value_c>();

public void setValueOrderInChildListR820(Value_c target, int index) {
	unrelateAcrossR820From(target);
	Value_c[] elements = Value_c.getManyV_VALsOnR820(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR820From((Value_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR820To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR820To((Value_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR820To(Value_c target)
{
  if (target != null) {
    target.relateAcrossR820To(this, true) ;
  }
}

public void relateAcrossR820To(Value_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR820To(this, notifyChanges) ;
  }
}

public void setBackPointerR820To(Value_c target)
{
  	synchronized (backPointer_IsTypeOfValueIsTypeOf_R820) {
		backPointer_IsTypeOfValueIsTypeOf_R820.add(target);
	}
}

public void unrelateAcrossR820From(Value_c target)
{
  if (target != null) {
    target.unrelateAcrossR820From(this, true) ;
  }
}

public void unrelateAcrossR820From(Value_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR820From(this, notifyChanges) ;
  }
}

public void clearBackPointerR820To(Value_c target)
{
  synchronized (backPointer_IsTypeOfValueIsTypeOf_R820) {
	    backPointer_IsTypeOfValueIsTypeOf_R820.remove(target);
	}
}

public static DataType_c getOneS_DTOnR820(Value_c [] targets)
{
    return getOneS_DTOnR820(targets, null);
}

public static DataType_c getOneS_DTOnR820(Value_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR820(targets, test, true);
}

public static DataType_c getOneS_DTOnR820(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR820(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR820(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR820(Value_c target)
{
	return getOneS_DTOnR820(target, true);
}
public static DataType_c getOneS_DTOnR820(Value_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasTypeDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR820(Value_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR820(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR820(Value_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
    DataType_c associate = targets[i].HasTypeDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR820(Value_c [] targets)
{
  return getManyS_DTsOnR820(targets, null);
}

public static DataType_c [] getManyS_DTsOnR820(Value_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR820(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR820(Value_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR820(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR820(Value_c target)
{
    return getManyS_DTsOnR820(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR820(Value_c target, boolean loadComponent)
{
    return getManyS_DTsOnR820(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<TransientVar_c> backPointer_IsTypeOfTransientVarIsTypeOf_R821 = new ArrayList<TransientVar_c>();

public void setTransientVarOrderInChildListR821(TransientVar_c target, int index) {
	unrelateAcrossR821From(target);
	TransientVar_c[] elements = TransientVar_c.getManyV_TRNsOnR821(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR821From((TransientVar_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR821To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR821To((TransientVar_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR821To(TransientVar_c target)
{
  if (target != null) {
    target.relateAcrossR821To(this, true) ;
  }
}

public void relateAcrossR821To(TransientVar_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR821To(this, notifyChanges) ;
  }
}

public void setBackPointerR821To(TransientVar_c target)
{
  	synchronized (backPointer_IsTypeOfTransientVarIsTypeOf_R821) {
		backPointer_IsTypeOfTransientVarIsTypeOf_R821.add(target);
	}
}

public void unrelateAcrossR821From(TransientVar_c target)
{
  if (target != null) {
    target.unrelateAcrossR821From(this, true) ;
  }
}

public void unrelateAcrossR821From(TransientVar_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR821From(this, notifyChanges) ;
  }
}

public void clearBackPointerR821To(TransientVar_c target)
{
  synchronized (backPointer_IsTypeOfTransientVarIsTypeOf_R821) {
	    backPointer_IsTypeOfTransientVarIsTypeOf_R821.remove(target);
	}
}

public static DataType_c getOneS_DTOnR821(TransientVar_c [] targets)
{
    return getOneS_DTOnR821(targets, null);
}

public static DataType_c getOneS_DTOnR821(TransientVar_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR821(targets, test, true);
}

public static DataType_c getOneS_DTOnR821(TransientVar_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR821(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR821(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR821(TransientVar_c target)
{
	return getOneS_DTOnR821(target, true);
}
public static DataType_c getOneS_DTOnR821(TransientVar_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR821(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
    DataType_c associate = targets[i].HasDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c [] targets)
{
  return getManyS_DTsOnR821(targets, null);
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TransientVar_c [] targetArray = new TransientVar_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR821(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR821(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c target)
{
    return getManyS_DTsOnR821(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR821(TransientVar_c target, boolean loadComponent)
{
    return getManyS_DTsOnR821(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Variable_c> backPointer_IsTypeOfVariableIsTypeOf_R848 = new ArrayList<Variable_c>();

public void setVariableOrderInChildListR848(Variable_c target, int index) {
	unrelateAcrossR848From(target);
	Variable_c[] elements = Variable_c.getManyV_VARsOnR848(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR848From((Variable_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR848To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR848To((Variable_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR848To(Variable_c target)
{
  if (target != null) {
    target.relateAcrossR848To(this, true) ;
  }
}

public void relateAcrossR848To(Variable_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR848To(this, notifyChanges) ;
  }
}

public void setBackPointerR848To(Variable_c target)
{
  	synchronized (backPointer_IsTypeOfVariableIsTypeOf_R848) {
		backPointer_IsTypeOfVariableIsTypeOf_R848.add(target);
	}
}

public void unrelateAcrossR848From(Variable_c target)
{
  if (target != null) {
    target.unrelateAcrossR848From(this, true) ;
  }
}

public void unrelateAcrossR848From(Variable_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR848From(this, notifyChanges) ;
  }
}

public void clearBackPointerR848To(Variable_c target)
{
  synchronized (backPointer_IsTypeOfVariableIsTypeOf_R848) {
	    backPointer_IsTypeOfVariableIsTypeOf_R848.remove(target);
	}
}

public static DataType_c getOneS_DTOnR848(Variable_c [] targets)
{
    return getOneS_DTOnR848(targets, null);
}

public static DataType_c getOneS_DTOnR848(Variable_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR848(targets, test, true);
}

public static DataType_c getOneS_DTOnR848(Variable_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR848(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR848(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR848(Variable_c target)
{
	return getOneS_DTOnR848(target, true);
}
public static DataType_c getOneS_DTOnR848(Variable_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR848(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
    DataType_c associate = targets[i].HasDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c [] targets)
{
  return getManyS_DTsOnR848(targets, null);
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Variable_c [] targetArray = new Variable_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR848(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR848(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c target)
{
    return getManyS_DTsOnR848(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR848(Variable_c target, boolean loadComponent)
{
    return getManyS_DTsOnR848(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<OperationParameter_c> backPointer_DefinesTheTypeOfOperationParameterDefinesTheTypeOf_R118 = new ArrayList<OperationParameter_c>();

public void setOperationParameterOrderInChildListR118(OperationParameter_c target, int index) {
	unrelateAcrossR118From(target);
	OperationParameter_c[] elements = OperationParameter_c.getManyO_TPARMsOnR118(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR118From((OperationParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR118To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR118To((OperationParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR118To(OperationParameter_c target)
{
  if (target != null) {
    target.relateAcrossR118To(this, true) ;
  }
}

public void relateAcrossR118To(OperationParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR118To(this, notifyChanges) ;
  }
}

public void setBackPointerR118To(OperationParameter_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfOperationParameterDefinesTheTypeOf_R118) {
		backPointer_DefinesTheTypeOfOperationParameterDefinesTheTypeOf_R118.add(target);
	}
}

public void unrelateAcrossR118From(OperationParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR118From(this, true) ;
  }
}

public void unrelateAcrossR118From(OperationParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR118From(this, notifyChanges) ;
  }
}

public void clearBackPointerR118To(OperationParameter_c target)
{
  synchronized (backPointer_DefinesTheTypeOfOperationParameterDefinesTheTypeOf_R118) {
	    backPointer_DefinesTheTypeOfOperationParameterDefinesTheTypeOf_R118.remove(target);
	}
}

public static DataType_c getOneS_DTOnR118(OperationParameter_c [] targets)
{
    return getOneS_DTOnR118(targets, null);
}

public static DataType_c getOneS_DTOnR118(OperationParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR118(targets, test, true);
}

public static DataType_c getOneS_DTOnR118(OperationParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR118(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR118(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR118(OperationParameter_c target)
{
	return getOneS_DTOnR118(target, true);
}
public static DataType_c getOneS_DTOnR118(OperationParameter_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR118(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c [] targets)
{
  return getManyS_DTsOnR118(targets, null);
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    OperationParameter_c [] targetArray = new OperationParameter_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR118(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR118(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c target)
{
    return getManyS_DTsOnR118(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR118(OperationParameter_c target, boolean loadComponent)
{
    return getManyS_DTsOnR118(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Operation_c> backPointer_DefinesTheTypeOfReturnCodeOperationDefinesTheTypeOfReturnCode_R116 = new ArrayList<Operation_c>();

public void setOperationOrderInChildListR116(Operation_c target, int index) {
	unrelateAcrossR116From(target);
	Operation_c[] elements = Operation_c.getManyO_TFRsOnR116(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR116From((Operation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR116To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR116To((Operation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR116To(Operation_c target)
{
  if (target != null) {
    target.relateAcrossR116To(this, true) ;
  }
}

public void relateAcrossR116To(Operation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR116To(this, notifyChanges) ;
  }
}

public void setBackPointerR116To(Operation_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfReturnCodeOperationDefinesTheTypeOfReturnCode_R116) {
		backPointer_DefinesTheTypeOfReturnCodeOperationDefinesTheTypeOfReturnCode_R116.add(target);
	}
}

public void unrelateAcrossR116From(Operation_c target)
{
  if (target != null) {
    target.unrelateAcrossR116From(this, true) ;
  }
}

public void unrelateAcrossR116From(Operation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR116From(this, notifyChanges) ;
  }
}

public void clearBackPointerR116To(Operation_c target)
{
  synchronized (backPointer_DefinesTheTypeOfReturnCodeOperationDefinesTheTypeOfReturnCode_R116) {
	    backPointer_DefinesTheTypeOfReturnCodeOperationDefinesTheTypeOfReturnCode_R116.remove(target);
	}
}

public static DataType_c getOneS_DTOnR116(Operation_c [] targets)
{
    return getOneS_DTOnR116(targets, null);
}

public static DataType_c getOneS_DTOnR116(Operation_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR116(targets, test, true);
}

public static DataType_c getOneS_DTOnR116(Operation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR116(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR116(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR116(Operation_c target)
{
	return getOneS_DTOnR116(target, true);
}
public static DataType_c getOneS_DTOnR116(Operation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ReturnCodeIsDefinedByDataType != null){
		target.ReturnCodeIsDefinedByDataType.loadProxy();
	}
	}
    return target.ReturnCodeIsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR116(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ReturnCodeIsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].ReturnCodeIsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c [] targets)
{
  return getManyS_DTsOnR116(targets, null);
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Operation_c [] targetArray = new Operation_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR116(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR116(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c target)
{
    return getManyS_DTsOnR116(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR116(Operation_c target, boolean loadComponent)
{
    return getManyS_DTsOnR116(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Attribute_c> backPointer_IsDefinedByAttributeIsDefinedBy_R114 = new ArrayList<Attribute_c>();

public void setAttributeOrderInChildListR114(Attribute_c target, int index) {
	unrelateAcrossR114From(target);
	Attribute_c[] elements = Attribute_c.getManyO_ATTRsOnR114(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR114From((Attribute_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR114To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR114To((Attribute_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR114To(Attribute_c target)
{
  if (target != null) {
    target.relateAcrossR114To(this, true) ;
  }
}

public void relateAcrossR114To(Attribute_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR114To(this, notifyChanges) ;
  }
}

public void setBackPointerR114To(Attribute_c target)
{
  	synchronized (backPointer_IsDefinedByAttributeIsDefinedBy_R114) {
		backPointer_IsDefinedByAttributeIsDefinedBy_R114.add(target);
	}
}

public void unrelateAcrossR114From(Attribute_c target)
{
  if (target != null) {
    target.unrelateAcrossR114From(this, true) ;
  }
}

public void unrelateAcrossR114From(Attribute_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR114From(this, notifyChanges) ;
  }
}

public void clearBackPointerR114To(Attribute_c target)
{
  synchronized (backPointer_IsDefinedByAttributeIsDefinedBy_R114) {
	    backPointer_IsDefinedByAttributeIsDefinedBy_R114.remove(target);
	}
}

public static DataType_c getOneS_DTOnR114(Attribute_c [] targets)
{
    return getOneS_DTOnR114(targets, null);
}

public static DataType_c getOneS_DTOnR114(Attribute_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR114(targets, test, true);
}

public static DataType_c getOneS_DTOnR114(Attribute_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR114(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR114(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR114(Attribute_c target)
{
	return getOneS_DTOnR114(target, true);
}
public static DataType_c getOneS_DTOnR114(Attribute_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.DefinesTypeOfDataType != null){
		target.DefinesTypeOfDataType.loadProxy();
	}
	}
    return target.DefinesTypeOfDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR114(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].DefinesTypeOfDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].DefinesTypeOfDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c [] targets)
{
  return getManyS_DTsOnR114(targets, null);
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Attribute_c [] targetArray = new Attribute_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR114(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR114(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c target)
{
    return getManyS_DTsOnR114(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR114(Attribute_c target, boolean loadComponent)
{
    return getManyS_DTsOnR114(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<StateMachineEventDataItem_c> backPointer_DefinesTheTypeOfStateMachineEventDataItemDefinesTheTypeOf_R524 = new ArrayList<StateMachineEventDataItem_c>();

public void setStateMachineEventDataItemOrderInChildListR524(StateMachineEventDataItem_c target, int index) {
	unrelateAcrossR524From(target);
	StateMachineEventDataItem_c[] elements = StateMachineEventDataItem_c.getManySM_EVTDIsOnR524(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR524From((StateMachineEventDataItem_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR524To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR524To((StateMachineEventDataItem_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR524To(StateMachineEventDataItem_c target)
{
  if (target != null) {
    target.relateAcrossR524To(this, true) ;
  }
}

public void relateAcrossR524To(StateMachineEventDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR524To(this, notifyChanges) ;
  }
}

public void setBackPointerR524To(StateMachineEventDataItem_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfStateMachineEventDataItemDefinesTheTypeOf_R524) {
		backPointer_DefinesTheTypeOfStateMachineEventDataItemDefinesTheTypeOf_R524.add(target);
	}
}

public void unrelateAcrossR524From(StateMachineEventDataItem_c target)
{
  if (target != null) {
    target.unrelateAcrossR524From(this, true) ;
  }
}

public void unrelateAcrossR524From(StateMachineEventDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR524From(this, notifyChanges) ;
  }
}

public void clearBackPointerR524To(StateMachineEventDataItem_c target)
{
  synchronized (backPointer_DefinesTheTypeOfStateMachineEventDataItemDefinesTheTypeOf_R524) {
	    backPointer_DefinesTheTypeOfStateMachineEventDataItemDefinesTheTypeOf_R524.remove(target);
	}
}

public static DataType_c getOneS_DTOnR524(StateMachineEventDataItem_c [] targets)
{
    return getOneS_DTOnR524(targets, null);
}

public static DataType_c getOneS_DTOnR524(StateMachineEventDataItem_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR524(targets, test, true);
}

public static DataType_c getOneS_DTOnR524(StateMachineEventDataItem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR524(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR524(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR524(StateMachineEventDataItem_c target)
{
	return getOneS_DTOnR524(target, true);
}
public static DataType_c getOneS_DTOnR524(StateMachineEventDataItem_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR524(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c [] targets)
{
  return getManyS_DTsOnR524(targets, null);
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StateMachineEventDataItem_c [] targetArray = new StateMachineEventDataItem_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR524(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR524(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c target)
{
    return getManyS_DTsOnR524(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR524(StateMachineEventDataItem_c target, boolean loadComponent)
{
    return getManyS_DTsOnR524(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Bridge_c> backPointer_DefinesTheReturnValueBridgeDefinesTheReturnValue_R20 = new ArrayList<Bridge_c>();

public void setBridgeOrderInChildListR20(Bridge_c target, int index) {
	unrelateAcrossR20From(target);
	Bridge_c[] elements = Bridge_c.getManyS_BRGsOnR20(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR20From((Bridge_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR20To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR20To((Bridge_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR20To(Bridge_c target)
{
  if (target != null) {
    target.relateAcrossR20To(this, true) ;
  }
}

public void relateAcrossR20To(Bridge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR20To(this, notifyChanges) ;
  }
}

public void setBackPointerR20To(Bridge_c target)
{
  	synchronized (backPointer_DefinesTheReturnValueBridgeDefinesTheReturnValue_R20) {
		backPointer_DefinesTheReturnValueBridgeDefinesTheReturnValue_R20.add(target);
	}
}

public void unrelateAcrossR20From(Bridge_c target)
{
  if (target != null) {
    target.unrelateAcrossR20From(this, true) ;
  }
}

public void unrelateAcrossR20From(Bridge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR20From(this, notifyChanges) ;
  }
}

public void clearBackPointerR20To(Bridge_c target)
{
  synchronized (backPointer_DefinesTheReturnValueBridgeDefinesTheReturnValue_R20) {
	    backPointer_DefinesTheReturnValueBridgeDefinesTheReturnValue_R20.remove(target);
	}
}

public static DataType_c getOneS_DTOnR20(Bridge_c [] targets)
{
    return getOneS_DTOnR20(targets, null);
}

public static DataType_c getOneS_DTOnR20(Bridge_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR20(targets, test, true);
}

public static DataType_c getOneS_DTOnR20(Bridge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR20(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR20(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR20(Bridge_c target)
{
	return getOneS_DTOnR20(target, true);
}
public static DataType_c getOneS_DTOnR20(Bridge_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ReturnValueDefinedByDataType != null){
		target.ReturnValueDefinedByDataType.loadProxy();
	}
	}
    return target.ReturnValueDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR20(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ReturnValueDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].ReturnValueDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c [] targets)
{
  return getManyS_DTsOnR20(targets, null);
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Bridge_c [] targetArray = new Bridge_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR20(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR20(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c target)
{
    return getManyS_DTsOnR20(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR20(Bridge_c target, boolean loadComponent)
{
    return getManyS_DTsOnR20(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<BridgeParameter_c> backPointer_DefinesTheTypeOfBridgeParameterDefinesTheTypeOf_R22 = new ArrayList<BridgeParameter_c>();

public void setBridgeParameterOrderInChildListR22(BridgeParameter_c target, int index) {
	unrelateAcrossR22From(target);
	BridgeParameter_c[] elements = BridgeParameter_c.getManyS_BPARMsOnR22(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR22From((BridgeParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR22To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR22To((BridgeParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR22To(BridgeParameter_c target)
{
  if (target != null) {
    target.relateAcrossR22To(this, true) ;
  }
}

public void relateAcrossR22To(BridgeParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR22To(this, notifyChanges) ;
  }
}

public void setBackPointerR22To(BridgeParameter_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfBridgeParameterDefinesTheTypeOf_R22) {
		backPointer_DefinesTheTypeOfBridgeParameterDefinesTheTypeOf_R22.add(target);
	}
}

public void unrelateAcrossR22From(BridgeParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR22From(this, true) ;
  }
}

public void unrelateAcrossR22From(BridgeParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR22From(this, notifyChanges) ;
  }
}

public void clearBackPointerR22To(BridgeParameter_c target)
{
  synchronized (backPointer_DefinesTheTypeOfBridgeParameterDefinesTheTypeOf_R22) {
	    backPointer_DefinesTheTypeOfBridgeParameterDefinesTheTypeOf_R22.remove(target);
	}
}

public static DataType_c getOneS_DTOnR22(BridgeParameter_c [] targets)
{
    return getOneS_DTOnR22(targets, null);
}

public static DataType_c getOneS_DTOnR22(BridgeParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR22(targets, test, true);
}

public static DataType_c getOneS_DTOnR22(BridgeParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR22(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR22(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR22(BridgeParameter_c target)
{
	return getOneS_DTOnR22(target, true);
}
public static DataType_c getOneS_DTOnR22(BridgeParameter_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR22(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c [] targets)
{
  return getManyS_DTsOnR22(targets, null);
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    BridgeParameter_c [] targetArray = new BridgeParameter_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR22(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR22(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c target)
{
    return getManyS_DTsOnR22(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR22(BridgeParameter_c target, boolean loadComponent)
{
    return getManyS_DTsOnR22(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SymbolicConstant_c> backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500 = new ArrayList<SymbolicConstant_c>();

public void setSymbolicConstantOrderInChildListR1500(SymbolicConstant_c target, int index) {
	unrelateAcrossR1500From(target);
	SymbolicConstant_c[] elements = SymbolicConstant_c.getManyCNST_SYCsOnR1500(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1500From((SymbolicConstant_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1500To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1500To((SymbolicConstant_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1500To(SymbolicConstant_c target)
{
  if (target != null) {
    target.relateAcrossR1500To(this, true) ;
  }
}

public void relateAcrossR1500To(SymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1500To(this, notifyChanges) ;
  }
}

public void setBackPointerR1500To(SymbolicConstant_c target)
{
  	synchronized (backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500) {
		backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.add(target);
	}
}

public void unrelateAcrossR1500From(SymbolicConstant_c target)
{
  if (target != null) {
    target.unrelateAcrossR1500From(this, true) ;
  }
}

public void unrelateAcrossR1500From(SymbolicConstant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1500From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1500To(SymbolicConstant_c target)
{
  synchronized (backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500) {
	    backPointer_DefinesTheTypeOfSymbolicConstantDefinesTheTypeOf_R1500.remove(target);
	}
}

public static DataType_c getOneS_DTOnR1500(SymbolicConstant_c [] targets)
{
    return getOneS_DTOnR1500(targets, null);
}

public static DataType_c getOneS_DTOnR1500(SymbolicConstant_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR1500(targets, test, true);
}

public static DataType_c getOneS_DTOnR1500(SymbolicConstant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR1500(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR1500(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR1500(SymbolicConstant_c target)
{
	return getOneS_DTOnR1500(target, true);
}
public static DataType_c getOneS_DTOnR1500(SymbolicConstant_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsDefinedByDataType != null){
		target.IsDefinedByDataType.loadProxy();
	}
	}
    return target.IsDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR1500(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c [] targets)
{
  return getManyS_DTsOnR1500(targets, null);
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SymbolicConstant_c [] targetArray = new SymbolicConstant_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR1500(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR1500(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c target)
{
    return getManyS_DTsOnR1500(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR1500(SymbolicConstant_c target, boolean loadComponent)
{
    return getManyS_DTsOnR1500(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<PropertyParameter_c> backPointer_DefinesTheTypePropertyParameterDefinesTheType_R4007 = new ArrayList<PropertyParameter_c>();

public void setPropertyParameterOrderInChildListR4007(PropertyParameter_c target, int index) {
	unrelateAcrossR4007From(target);
	PropertyParameter_c[] elements = PropertyParameter_c.getManyC_PPsOnR4007(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4007From((PropertyParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4007To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4007To((PropertyParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4007To(PropertyParameter_c target)
{
  if (target != null) {
    target.relateAcrossR4007To(this, true) ;
  }
}

public void relateAcrossR4007To(PropertyParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4007To(this, notifyChanges) ;
  }
}

public void setBackPointerR4007To(PropertyParameter_c target)
{
  	synchronized (backPointer_DefinesTheTypePropertyParameterDefinesTheType_R4007) {
		backPointer_DefinesTheTypePropertyParameterDefinesTheType_R4007.add(target);
	}
}

public void unrelateAcrossR4007From(PropertyParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR4007From(this, true) ;
  }
}

public void unrelateAcrossR4007From(PropertyParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4007From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4007To(PropertyParameter_c target)
{
  synchronized (backPointer_DefinesTheTypePropertyParameterDefinesTheType_R4007) {
	    backPointer_DefinesTheTypePropertyParameterDefinesTheType_R4007.remove(target);
	}
}

public static DataType_c getOneS_DTOnR4007(PropertyParameter_c [] targets)
{
    return getOneS_DTOnR4007(targets, null);
}

public static DataType_c getOneS_DTOnR4007(PropertyParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR4007(targets, test, true);
}

public static DataType_c getOneS_DTOnR4007(PropertyParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR4007(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR4007(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR4007(PropertyParameter_c target)
{
	return getOneS_DTOnR4007(target, true);
}
public static DataType_c getOneS_DTOnR4007(PropertyParameter_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsTypedByDataType != null){
		target.IsTypedByDataType.loadProxy();
	}
	}
    return target.IsTypedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR4007(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsTypedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].IsTypedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c [] targets)
{
  return getManyS_DTsOnR4007(targets, null);
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PropertyParameter_c [] targetArray = new PropertyParameter_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR4007(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR4007(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c target)
{
    return getManyS_DTsOnR4007(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR4007(PropertyParameter_c target, boolean loadComponent)
{
    return getManyS_DTsOnR4007(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<InterfaceOperation_c> backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008 = new ArrayList<InterfaceOperation_c>();

public void setInterfaceOperationOrderInChildListR4008(InterfaceOperation_c target, int index) {
	unrelateAcrossR4008From(target);
	InterfaceOperation_c[] elements = InterfaceOperation_c.getManyC_IOsOnR4008(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4008From((InterfaceOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4008To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4008To((InterfaceOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4008To(InterfaceOperation_c target)
{
  if (target != null) {
    target.relateAcrossR4008To(this, true) ;
  }
}

public void relateAcrossR4008To(InterfaceOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4008To(this, notifyChanges) ;
  }
}

public void setBackPointerR4008To(InterfaceOperation_c target)
{
  	synchronized (backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008) {
		backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.add(target);
	}
}

public void unrelateAcrossR4008From(InterfaceOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR4008From(this, true) ;
  }
}

public void unrelateAcrossR4008From(InterfaceOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4008From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4008To(InterfaceOperation_c target)
{
  synchronized (backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008) {
	    backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.remove(target);
	}
}

public static DataType_c getOneS_DTOnR4008(InterfaceOperation_c [] targets)
{
    return getOneS_DTOnR4008(targets, null);
}

public static DataType_c getOneS_DTOnR4008(InterfaceOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_DTOnR4008(targets, test, true);
}

public static DataType_c getOneS_DTOnR4008(InterfaceOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    DataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             DataType_c candidate_val = getOneS_DTOnR4008(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_DTOnR4008(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static DataType_c getOneS_DTOnR4008(InterfaceOperation_c target)
{
	return getOneS_DTOnR4008(target, true);
}
public static DataType_c getOneS_DTOnR4008(InterfaceOperation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.HasReturnDefinedByDataType != null){
		target.HasReturnDefinedByDataType.loadProxy();
	}
	}
    return target.HasReturnDefinedByDataType ;
  } else {
    return null;
  }
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_DTsOnR4008(targets, test, true);
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new DataType_c[0];
  
  
  LinkedHashSet<DataType_c> elementsSet = new LinkedHashSet<DataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HasReturnDefinedByDataType == null)
	  targets[i].loadProxy();
    DataType_c associate = targets[i].HasReturnDefinedByDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  DataType_c[] result = new DataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c [] targets)
{
  return getManyS_DTsOnR4008(targets, null);
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperation_c [] targetArray = new InterfaceOperation_c[1];
    targetArray[0] = target;
    return getManyS_DTsOnR4008(targetArray, test, loadComponent);
  } else {
    DataType_c [] result = new DataType_c [0] ;
    return result ;
  }
  
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyS_DTsOnR4008(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c target)
{
    return getManyS_DTsOnR4008(target, null, true);
}

public static DataType_c [] getManyS_DTsOnR4008(InterfaceOperation_c target, boolean loadComponent)
{
    return getManyS_DTsOnR4008(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst56717 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56717 == null) {
      			relInst56717 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst56717 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56717 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_dt_id});
					if (relInst56717 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56717 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56717) && !isProxy())) {
	      relInst56717.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          

	if (DefinesTypesAvailableWithinDomain == null) {          
      // R14
      Domain_c relInst56718 = (Domain_c) baseRoot.getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56718 == null) {
      			relInst56718 = (Domain_c) Ooaofooa.getDefaultInstance().getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
      		}
			if (relInst56718 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56718 = (Domain_c) roots[i].getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
					if (relInst56718 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56718 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56718) && !isProxy())) {
	      relInst56718.relateAcrossR14To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R14
      // S_DOM
		  inst=DefinesTypesAvailableWithinDomain;
			unrelateAcrossR14From(DefinesTypesAvailableWithinDomain, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(DataType_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final DataType_c inst = (DataType_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(DataType_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static DataType_c DataTypeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		DataType_c result=findDataTypeInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,DataType_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findDataTypeInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static DataType_c findDataTypeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(DataType_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				DataType_c x = (DataType_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static DataType_c DataTypeInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return DataTypeInstance(modelRoot,test,true);
  }
  
  public static DataType_c DataTypeInstance(ModelRoot modelRoot)
  {
	 return DataTypeInstance(modelRoot,null,true);
  }

  public static DataType_c [] DataTypeInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, DataType_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(DataType_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					DataType_c x = (DataType_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				DataType_c[] ret_set = new DataType_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new DataType_c[0];
			}		
		} 
  }
  public static DataType_c [] DataTypeInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  DataTypeInstances(modelRoot,test,true);
  }
  public static DataType_c [] DataTypeInstances(ModelRoot modelRoot)
  {
	return DataTypeInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Data Type.dispose call: ";
	PackageableElement_c testR8001Inst2 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
	UserDataType_c testR17Inst1 = UserDataType_c.getOneS_UDTOnR17(this, false);

	if ( testR17Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "17 ";
	}
	CoreDataType_c testR17Inst2 = CoreDataType_c.getOneS_CDTOnR17(this, false);

	if ( testR17Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "17 ";
	}
	EnumerationDataType_c testR17Inst3 = EnumerationDataType_c.getOneS_EDTOnR17(this, false);

	if ( testR17Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "17 ";
	}
	StructuredDataType_c testR17Inst4 = StructuredDataType_c.getOneS_SDTOnR17(this, false);

	if ( testR17Inst4 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "17 ";
	}
	InstanceReferenceDataType_c testR17Inst5 = InstanceReferenceDataType_c.getOneS_IRDTOnR17(this, false);

	if ( testR17Inst5 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "17 ";
	}
	UserDataType_c testR18Inst = UserDataType_c.getOneS_UDTOnR18(this, false);

	if ( testR18Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "18 ";	
	}
	StructureMember_c testR45Inst = StructureMember_c.getOneS_MBROnR45(this, false);

	if ( testR45Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "45 ";	
	}
	FunctionParameter_c testR26Inst = FunctionParameter_c.getOneS_SPARMOnR26(this, false);

	if ( testR26Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "26 ";	
	}
	Function_c testR25Inst = Function_c.getOneS_SYNCOnR25(this, false);

	if ( testR25Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "25 ";	
	}
	ExternalEntityEventDataItem_c testR16Inst = ExternalEntityEventDataItem_c.getOneS_EEEDIOnR16(this, false);

	if ( testR16Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "16 ";	
	}
	ExternalEntityDataItem_c testR15Inst = ExternalEntityDataItem_c.getOneS_EEDIOnR15(this, false);

	if ( testR15Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "15 ";	
	}
	Domain_c testR14Inst = Domain_c.getOneS_DOMOnR14(this, false);

	if ( testR14Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "14 ";
	}
 	DatatypeInSuppression_c testR47Inst = DatatypeInSuppression_c.getOneS_DISOnR47(this, false);

 	if ( testR47Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "47 ";
 	}
 	SystemDatatypeInPackage_c testR4401Inst = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401(this, false);

 	if ( testR4401Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "4401 ";
 	}
	DataTypeInPackage_c testR39Inst = DataTypeInPackage_c.getOneS_DIPOnR39(this, false);

	if ( testR39Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "39 ";
	}
	Value_c testR820Inst = Value_c.getOneV_VALOnR820(this, false);

	if ( testR820Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "820 ";	
	}
	TransientVar_c testR821Inst = TransientVar_c.getOneV_TRNOnR821(this, false);

	if ( testR821Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "821 ";	
	}
	Variable_c testR848Inst = Variable_c.getOneV_VAROnR848(this, false);

	if ( testR848Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "848 ";	
	}
	OperationParameter_c testR118Inst = OperationParameter_c.getOneO_TPARMOnR118(this, false);

	if ( testR118Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "118 ";	
	}
	Operation_c testR116Inst = Operation_c.getOneO_TFROnR116(this, false);

	if ( testR116Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "116 ";	
	}
	Attribute_c testR114Inst = Attribute_c.getOneO_ATTROnR114(this, false);

	if ( testR114Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "114 ";	
	}
	StateMachineEventDataItem_c testR524Inst = StateMachineEventDataItem_c.getOneSM_EVTDIOnR524(this, false);

	if ( testR524Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "524 ";	
	}
	Bridge_c testR20Inst = Bridge_c.getOneS_BRGOnR20(this, false);

	if ( testR20Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "20 ";	
	}
	BridgeParameter_c testR22Inst = BridgeParameter_c.getOneS_BPARMOnR22(this, false);

	if ( testR22Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "22 ";	
	}
	SymbolicConstant_c testR1500Inst = SymbolicConstant_c.getOneCNST_SYCOnR1500(this, false);

	if ( testR1500Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1500 ";	
	}
	PropertyParameter_c testR4007Inst = PropertyParameter_c.getOneC_PPOnR4007(this, false);

	if ( testR4007Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4007 ";	
	}
	InterfaceOperation_c testR4008Inst = InterfaceOperation_c.getOneC_IOOnR4008(this, false);

	if ( testR4008Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4008 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Data Type", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("dom_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getDt_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getDt_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDom_idLongBased()
  {
    if ( DefinesTypesAvailableWithinDomain != null )
    {
      return DefinesTypesAvailableWithinDomain.getDom_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDom_id()
  {
    if ( DefinesTypesAvailableWithinDomain != null )
    {
      return DefinesTypesAvailableWithinDomain.getDom_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDom_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dom_id) )
      return m_dom_id;
    else
      return getDom_id();
  }
  
  public void setDom_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dom_id)){
	        return;
	    }
	}else if(m_dom_id != null){
	    if(m_dom_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dom_id", m_dom_id, newValue,true); 
   m_dom_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDefaultvalue()
  {
    return m_defaultvalue ;
  }


  public void setDefaultvalue(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_defaultvalue)){
	        return;
	    }
	}else if(m_defaultvalue != null){
	    if(m_defaultvalue.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Defaultvalue", m_defaultvalue, newValue,true); 
   m_defaultvalue = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDt_idLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_dt_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
   m_dt_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Data Type", //$NON-NLS-1$
	  " Operation entered: Data Type::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     DataType_c [] objs = DataType_c.DataTypeInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Data Type", //$NON-NLS-1$
	  " Operation entered: Data Type::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class DataType_c_test56720_c implements ClassQueryInterface_c
    {
	  DataType_c_test56720_c( java.util.UUID            p56721 ) {
	  m_p56721 = p56721;
	  }
	  private java.util.UUID             m_p56721; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56721));
	      return retval;
	  }
    }

    DataType_c [] objs56719 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test56720_c(getDt_id())) ;

    if ( (  (objs56719.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type", //$NON-NLS-1$
           "Consistency: Object: Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56719.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56719.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56719.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type", //$NON-NLS-1$
           "Consistency: Object: Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56719.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56719.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    class DataType_c_test56723_c implements ClassQueryInterface_c
    {
	  DataType_c_test56723_c( java.util.UUID            p56724 ) {
	  m_p56724 = p56724;
	  }
	  private java.util.UUID             m_p56724; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56724));
	      return retval;
	  }
    }

    DataType_c [] objs56722 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test56723_c(getDt_id())) ;

    if ( (  (objs56722.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type", //$NON-NLS-1$
           "Consistency: Object: Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56722.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56722.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56722.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type", //$NON-NLS-1$
           "Consistency: Object: Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56722.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56722.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Data Type is a referring class in association: rel.Numb = 14
          // The participating class is: Domain
    class Domain_c_test56727_c implements ClassQueryInterface_c
    {
	  Domain_c_test56727_c( java.util.UUID            p56728 ) {
	  m_p56728 = p56728;
	  }
	  private java.util.UUID             m_p56728; 
	  public boolean evaluate (Object candidate)
	  {
	      Domain_c selected = (Domain_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDom_id().equals(m_p56728));
	      return retval;
	  }
    }

    Domain_c [] objs56726 = 
    Domain_c.DomainInstances(modelRoot, new Domain_c_test56727_c(getDom_id())) ;

    if ( (  (objs56726.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type", //$NON-NLS-1$
           "Consistency: Object: Data Type: Association: 14: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56726.length )  + " Dom_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type: Association: 14: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56726.length )  + " Dom_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Data Type is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Supertype: rel.Numb = 17
    int objs56732 = 0;
            // Subtype Object: User Data Type
    class UserDataType_c_test56733_c implements ClassQueryInterface_c
    {
	  UserDataType_c_test56733_c( java.util.UUID            p56734 ) {
	  m_p56734 = p56734;
	  }
	  private java.util.UUID             m_p56734; 
	  public boolean evaluate (Object candidate)
	  {
	      UserDataType_c selected = (UserDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56734));
	      return retval;
	  }
    }

    UserDataType_c [] objs56735 = 
    UserDataType_c.UserDataTypeInstances(modelRoot, new UserDataType_c_test56733_c(getDt_id())) ;
 
    objs56732 = objs56732 + objs56735.length;
            // Subtype Object: Core Data Type
    class CoreDataType_c_test56736_c implements ClassQueryInterface_c
    {
	  CoreDataType_c_test56736_c( java.util.UUID            p56737 ) {
	  m_p56737 = p56737;
	  }
	  private java.util.UUID             m_p56737; 
	  public boolean evaluate (Object candidate)
	  {
	      CoreDataType_c selected = (CoreDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56737));
	      return retval;
	  }
    }

    CoreDataType_c [] objs56738 = 
    CoreDataType_c.CoreDataTypeInstances(modelRoot, new CoreDataType_c_test56736_c(getDt_id())) ;
 
    objs56732 = objs56732 + objs56738.length;
            // Subtype Object: Enumeration Data Type
    class EnumerationDataType_c_test56739_c implements ClassQueryInterface_c
    {
	  EnumerationDataType_c_test56739_c( java.util.UUID            p56740 ) {
	  m_p56740 = p56740;
	  }
	  private java.util.UUID             m_p56740; 
	  public boolean evaluate (Object candidate)
	  {
	      EnumerationDataType_c selected = (EnumerationDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56740));
	      return retval;
	  }
    }

    EnumerationDataType_c [] objs56741 = 
    EnumerationDataType_c.EnumerationDataTypeInstances(modelRoot, new EnumerationDataType_c_test56739_c(getDt_id())) ;
 
    objs56732 = objs56732 + objs56741.length;
            // Subtype Object: Structured Data Type
    class StructuredDataType_c_test56742_c implements ClassQueryInterface_c
    {
	  StructuredDataType_c_test56742_c( java.util.UUID            p56743 ) {
	  m_p56743 = p56743;
	  }
	  private java.util.UUID             m_p56743; 
	  public boolean evaluate (Object candidate)
	  {
	      StructuredDataType_c selected = (StructuredDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56743));
	      return retval;
	  }
    }

    StructuredDataType_c [] objs56744 = 
    StructuredDataType_c.StructuredDataTypeInstances(modelRoot, new StructuredDataType_c_test56742_c(getDt_id())) ;
 
    objs56732 = objs56732 + objs56744.length;
            // Subtype Object: Instance Reference Data Type
    class InstanceReferenceDataType_c_test56745_c implements ClassQueryInterface_c
    {
	  InstanceReferenceDataType_c_test56745_c( java.util.UUID            p56746 ) {
	  m_p56746 = p56746;
	  }
	  private java.util.UUID             m_p56746; 
	  public boolean evaluate (Object candidate)
	  {
	      InstanceReferenceDataType_c selected = (InstanceReferenceDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56746));
	      return retval;
	  }
    }

    InstanceReferenceDataType_c [] objs56747 = 
    InstanceReferenceDataType_c.InstanceReferenceDataTypeInstances(modelRoot, new InstanceReferenceDataType_c_test56745_c(getDt_id())) ;
 
    objs56732 = objs56732 + objs56747.length;
    if ( objs56732 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Data Type", //$NON-NLS-1$
           "Consistency: Object: Data Type: Association: 17: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56732 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Data Type: Association: 17: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56732 )  , e); 
      }
      retval = false;

    }

          // Data Type is a participating class in association: rel.Numb = 18
             // Object: User Data Type
          // Data Type is a participating class in association: rel.Numb = 45
             // Object: Structure Member
          // Data Type is a participating class in association: rel.Numb = 26
             // Object: Function Parameter
          // Data Type is a participating class in association: rel.Numb = 25
             // Object: Function
          // Data Type is a participating class in association: rel.Numb = 16
             // Object: External Entity Event Data Item
          // Data Type is a participating class in association: rel.Numb = 15
             // Object: External Entity Data Item
          // Associated Other Side: rel.Numb = 47
            // Link Object: Datatype In Suppression
          // Associated Other Side: rel.Numb = 4401
            // Link Object: System Datatype in Package
          // Associated One Side: rel.Numb = 39
            // Link Object: Data Type in Package
            // Other Side Class: Data Type Package
          // Data Type is a participating class in association: rel.Numb = 820
             // Object: Value
          // Data Type is a participating class in association: rel.Numb = 821
             // Object: Transient Var
          // Data Type is a participating class in association: rel.Numb = 848
             // Object: Variable
          // Data Type is a participating class in association: rel.Numb = 118
             // Object: Operation Parameter
          // Data Type is a participating class in association: rel.Numb = 116
             // Object: Operation
          // Data Type is a participating class in association: rel.Numb = 114
             // Object: Attribute
          // Data Type is a participating class in association: rel.Numb = 524
             // Object: State Machine Event Data Item
          // Data Type is a participating class in association: rel.Numb = 20
             // Object: Bridge
          // Data Type is a participating class in association: rel.Numb = 22
             // Object: Bridge Parameter
          // Data Type is a participating class in association: rel.Numb = 1500
             // Object: Symbolic Constant
          // Data Type is a participating class in association: rel.Numb = 4007
             // Object: Property Parameter
          // Data Type is a participating class in association: rel.Numb = 4008
             // Object: Interface Operation
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_PKG = Package_c.getOneEP_PKGOnR8000(v_pe);


SystemModel_c v_systemModel = SystemModel_c.getOneS_SYSOnR1405(v_PKG);


Domain_c v_dom = Domain_c.DomainInstance(modelRoot) ;


  class DataType_test55748_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals("integer") ;
	}
  }
DataType_c v_intdt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test55748_c());


  class DataType_test55749_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals("void") ;
	}
  }
DataType_c v_voidDt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test55749_c());


DataTypePackage_c v_rootPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(this));


DataTypePackage_c v_actualRootPkg = v_rootPkg ;


SystemModel_c v_sys = SystemModel_c.getOneS_SYSOnR4400(SystemDatatypePackage_c.getOneSLD_SDPOnR4400(v_rootPkg));


if ( (  (v_sys == null)) )
{

while ( (  (v_rootPkg != null)) )
{

v_sys = SystemModel_c.getOneS_SYSOnR4400(SystemDatatypePackage_c.getOneSLD_SDPOnR4400(v_rootPkg));


v_rootPkg = DataTypePackage_c.getOneS_DPKOnR37(DataTypePackageInPackage_c.getOneS_DPIPOnR38(v_rootPkg));


if ( (  (v_rootPkg != null)) )
{

v_actualRootPkg = v_rootPkg ;



}


}


}

if ( (  (v_sys == null)) )
{

v_sys = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR1400(SpecificationPackage_c.getOneEP_SPKGOnR1402(v_actualRootPkg)));


if (   (v_sys == null) )
{

v_sys = SystemModel_c.getOneS_SYSOnR28(v_dom);



}


}

if ( ((  (v_intdt == null)) && (  (v_sys != null))) )
{

java.util.UUID         v_intdt_id = v_sys.Getcoretypeid(			    
"integer") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_intdt = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_voidDt == null) &&   (v_sys != null)) )
{

java.util.UUID         v_voiddt_id = v_sys.Getcoretypeid(			    
"void") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_voiddt_id);


v_voidDt = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_intdt == null) &&   (v_voidDt == null)) )
{

SystemModel_c v_compSys = SystemModel_c.getOneS_SYSOnR4606(ComponentPackage_c.getOneCP_CPOnR4608(Component_c.getOneC_COnR4204(DomainAsComponent_c.getOneCN_DCOnR4204(Domain_c.getOneS_DOMOnR14(this)))));


if (   (v_compSys != null) )
{

java.util.UUID         v_intdt_id = v_compSys.Getcoretypeid(			    
"integer") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_intdt = DataType_c.getOneS_DTOnR8001(v_pe);


java.util.UUID         v_voiddt_id = v_compSys.Getcoretypeid(			    
"void") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_voiddt_id);


v_voidDt = DataType_c.getOneS_DTOnR8001(v_pe);



}


}

if ( (  (v_intdt == null) &&   (v_voidDt == null)) )
{

if ( (  (v_systemModel != null)) )
{

java.util.UUID         v_intdt_id = v_systemModel.Getcoretypeid(			    
"integer") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_intdt = DataType_c.getOneS_DTOnR8001(v_pe);


java.util.UUID         v_voiddt_id = v_systemModel.Getcoretypeid(			    
"void") ;


v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_voiddt_id);


v_voidDt = DataType_c.getOneS_DTOnR8001(v_pe);



}


}

Bridge_c [] v_brgs = Bridge_c.getManyS_BRGsOnR20(this);


Bridge_c  v_brg = null;
for ( int i55121 = 0; i55121 < v_brgs.length; i55121++)
{
  v_brg = v_brgs[i55121] ;

this.unrelateAcrossR20From(v_brg);


if (v_brg != null) {
  v_brg.relateAcrossR20To(v_voidDt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_brg.getName()			    
,"- Bridge : " ) ;



}

BridgeParameter_c [] v_bparms = BridgeParameter_c.getManyS_BPARMsOnR22(this);


BridgeParameter_c  v_bparm = null;
for ( int i55122 = 0; i55122 < v_bparms.length; i55122++)
{
  v_bparm = v_bparms[i55122] ;

this.unrelateAcrossR22From(v_bparm);


if (v_bparm != null) {
  v_bparm.relateAcrossR22To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_bparm.getName()			    
,"- Bridge Parameter : " ) ;



}

ExternalEntityDataItem_c [] v_eedis = ExternalEntityDataItem_c.getManyS_EEDIsOnR15(this);


ExternalEntityDataItem_c  v_eedi = null;
for ( int i55123 = 0; i55123 < v_eedis.length; i55123++)
{
  v_eedi = v_eedis[i55123] ;

this.unrelateAcrossR15From(v_eedi);


if (v_eedi != null) {
  v_eedi.relateAcrossR15To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_eedi.getName()			    
,"- External Entity : " ) ;



}

ExternalEntityEventDataItem_c [] v_eeedis = ExternalEntityEventDataItem_c.getManyS_EEEDIsOnR16(this);


ExternalEntityEventDataItem_c  v_eeedi = null;
for ( int i55124 = 0; i55124 < v_eeedis.length; i55124++)
{
  v_eeedi = v_eeedis[i55124] ;

this.unrelateAcrossR16From(v_eeedi);


if (v_eeedi != null) {
  v_eeedi.relateAcrossR16To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_eeedi.getName()			    
,"- External Entity Event DataItem : " ) ;



}

FunctionParameter_c [] v_sparms = FunctionParameter_c.getManyS_SPARMsOnR26(this);


FunctionParameter_c  v_sparm = null;
for ( int i55125 = 0; i55125 < v_sparms.length; i55125++)
{
  v_sparm = v_sparms[i55125] ;

this.unrelateAcrossR26From(v_sparm);


if (v_sparm != null) {
  v_sparm.relateAcrossR26To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_sparm.getName()			    
,"- Function Parameter : " ) ;



}

Function_c [] v_fns = Function_c.getManyS_SYNCsOnR25(this);


Function_c  v_fn = null;
for ( int i55126 = 0; i55126 < v_fns.length; i55126++)
{
  v_fn = v_fns[i55126] ;

this.unrelateAcrossR25From(v_fn);


if (v_fn != null) {
  v_fn.relateAcrossR25To(v_voidDt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_fn.getName()			    
,"- Function : " ) ;



}

StateMachineEventDataItem_c [] v_evtdis = StateMachineEventDataItem_c.getManySM_EVTDIsOnR524(this);


StateMachineEventDataItem_c  v_evtdi = null;
for ( int i55127 = 0; i55127 < v_evtdis.length; i55127++)
{
  v_evtdi = v_evtdis[i55127] ;

this.unrelateAcrossR524From(v_evtdi);


if (v_evtdi != null) {
  v_evtdi.relateAcrossR524To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_evtdi.getName()			    
,"- State Machine Event DataItem : " ) ;



}

Operation_c [] v_opers = Operation_c.getManyO_TFRsOnR116(this);


Operation_c  v_oper = null;
for ( int i55128 = 0; i55128 < v_opers.length; i55128++)
{
  v_oper = v_opers[i55128] ;

this.unrelateAcrossR116From(v_oper);


if (v_oper != null) {
  v_oper.relateAcrossR116To(v_voidDt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_oper.getName()			    
,"- Operation : " ) ;



}

OperationParameter_c [] v_oparms = OperationParameter_c.getManyO_TPARMsOnR118(this);


OperationParameter_c  v_oparm = null;
for ( int i55129 = 0; i55129 < v_oparms.length; i55129++)
{
  v_oparm = v_oparms[i55129] ;

this.unrelateAcrossR118From(v_oparm);


if (v_oparm != null) {
  v_oparm.relateAcrossR118To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_oparm.getName()			    
,"- Operation Parameter : " ) ;



}

Attribute_c [] v_attrs = Attribute_c.getManyO_ATTRsOnR114(this);


Attribute_c  v_attr = null;
for ( int i55130 = 0; i55130 < v_attrs.length; i55130++)
{
  v_attr = v_attrs[i55130] ;

this.unrelateAcrossR114From(v_attr);


if (v_attr != null) {
  v_attr.relateAcrossR114To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_attr.getName()			    
,"- Attribute : " ) ;



}

StructureMember_c [] v_members = StructureMember_c.getManyS_MBRsOnR45(this);


StructureMember_c  v_member = null;
for ( int i55131 = 0; i55131 < v_members.length; i55131++)
{
  v_member = v_members[i55131] ;

this.unrelateAcrossR45From(v_member);


if (v_member != null) {
  v_member.relateAcrossR45To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_member.getName()			    
,"- Structure Member : " ) ;



}

UserDataType_c v_udt = UserDataType_c.getOneS_UDTOnR17(this);


EnumerationDataType_c v_edt = EnumerationDataType_c.getOneS_EDTOnR17(this);


CoreDataType_c v_cdt = CoreDataType_c.getOneS_CDTOnR17(this);


boolean      v_isCoreType =   (v_cdt != null) ;


StructuredDataType_c v_sdt = StructuredDataType_c.getOneS_SDTOnR17(this);


InstanceReferenceDataType_c v_irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(this);


if (   (v_udt != null) )
{

if (v_udt != null) {
v_udt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_edt != null)) )
{

if (v_edt != null) {
v_edt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_cdt != null)) )
{

if (v_cdt != null) {
v_cdt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_sdt != null)) )
{

if (v_sdt != null) {
v_sdt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else if ( (  (v_irdt != null)) )
{

if (v_irdt != null) {
v_irdt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SymbolicConstant_c [] v_sycs = SymbolicConstant_c.getManyCNST_SYCsOnR1500(this);


SymbolicConstant_c  v_syc = null;
for ( int i55132 = 0; i55132 < v_sycs.length; i55132++)
{
  v_syc = v_sycs[i55132] ;

if (v_syc != null) {
v_syc.Settodefaultdatatype() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_syc.getName()			    
,"- Symbolic Constant : " ) ;



}

Value_c [] v_vals = Value_c.getManyV_VALsOnR820(this);


Value_c  v_val = null;
for ( int i55133 = 0; i55133 < v_vals.length; i55133++)
{
  v_val = v_vals[i55133] ;

this.unrelateAcrossR820From(v_val);


if (v_val != null) {
  v_val.relateAcrossR820To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

TransientVar_c [] v_tvars = TransientVar_c.getManyV_TRNsOnR821(this);


TransientVar_c  v_tvar = null;
for ( int i55134 = 0; i55134 < v_tvars.length; i55134++)
{
  v_tvar = v_tvars[i55134] ;

this.unrelateAcrossR821From(v_tvar);


if (v_tvar != null) {
  v_tvar.relateAcrossR821To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

Variable_c [] v_vvars = Variable_c.getManyV_VARsOnR848(this);


Variable_c  v_vvar = null;
for ( int i55135 = 0; i55135 < v_vvars.length; i55135++)
{
  v_vvar = v_vvars[i55135] ;

this.unrelateAcrossR848From(v_vvar);


if (v_vvar != null) {
  v_vvar.relateAcrossR848To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_vvar.getName()			    
,"- Variable : " ) ;



}

DataTypeInPackage_c v_dip = DataTypeInPackage_c.getOneS_DIPOnR39(this);


if ( (  (v_dip != null)) )
{

DataTypePackage_c v_dpk = DataTypePackage_c.getOneS_DPKOnR39(this);


if (v_dip != null) {
v_dip.unrelateAcrossR39From( this ) ; v_dip.unrelateAcrossR39From( v_dpk ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_dip != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dip.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dip));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

SystemDatatypeInPackage_c [] v_sdips = SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401(this);


SystemDatatypeInPackage_c  v_sdip = null;
for ( int i55136 = 0; i55136 < v_sdips.length; i55136++)
{
  v_sdip = v_sdips[i55136] ;

DataTypePackage_c v_dtp = DataTypePackage_c.getOneS_DPKOnR4401(v_sdip);


if (v_sdip != null) {
v_sdip.unrelateAcrossR4401From( this ) ; v_sdip.unrelateAcrossR4401From( v_dtp ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4402(v_sdip);


if (v_sdip != null) {
v_sdip.unrelateAcrossR4402From(v_system);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_sdip != null) {
// get the location of this element in the instance list
// before deleting
if ( v_sdip.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_sdip));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

v_dom = Domain_c.getOneS_DOMOnR14(this);


if ( (  (v_dom != null)) )
{

this.unrelateAcrossR14From(v_dom);



}

DatatypeInSuppression_c [] v_diss = DatatypeInSuppression_c.getManyS_DISsOnR47(this);


DatatypeInSuppression_c  v_dis = null;
for ( int i55137 = 0; i55137 < v_diss.length; i55137++)
{
  v_dis = v_diss[i55137] ;

Domain_c v_domain = Domain_c.getOneS_DOMOnR47(v_dis);


if (v_dis != null) {
v_dis.unrelateAcrossR47From( this ) ; v_dis.unrelateAcrossR47From( v_domain ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_dis != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dis.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dis));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

InterfaceOperation_c [] v_ios = InterfaceOperation_c.getManyC_IOsOnR4008(this);


InterfaceOperation_c  v_io = null;
for ( int i55138 = 0; i55138 < v_ios.length; i55138++)
{
  v_io = v_ios[i55138] ;

this.unrelateAcrossR4008From(v_io);


if (v_io != null) {
  v_io.relateAcrossR4008To(v_voidDt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_io.getName()			    
,"- Interface Operation : " ) ;



}

PropertyParameter_c [] v_pps = PropertyParameter_c.getManyC_PPsOnR4007(this);


PropertyParameter_c  v_pp = null;
for ( int i55139 = 0; i55139 < v_pps.length; i55139++)
{
  v_pp = v_pps[i55139] ;

this.unrelateAcrossR4007From(v_pp);


if (v_pp != null) {
  v_pp.relateAcrossR4007To(v_intdt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Util_c.Collectmodelelementsnames(			    
v_pp.getName()			    
,"- Property Parameter : " ) ;



}

UserDataType_c [] v_udts = UserDataType_c.getManyS_UDTsOnR18(this);


for ( int i55140 = 0; i55140 < v_udts.length; i55140++)
{
  v_udt = v_udts[i55140] ;

this.unrelateAcrossR18From(v_udt);


if (v_udt != null) {
v_udt.Changecoretype(			    
"integer" ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


DataType_c v_udtDt = DataType_c.getOneS_DTOnR17(v_udt);


if ( (  !v_isCoreType &&   (v_udtDt != null)) )
{

Util_c.Collectmodelelementsnames(			    
v_udtDt.getName()			    
,"- User Data Type : " ) ;



}


}

PackageableElement_c v_packageableElement = PackageableElement_c.getOnePE_PEOnR8001(this);


if (   (v_packageableElement != null) )
{

this.unrelateAcrossR8001From(v_packageableElement);


if (v_packageableElement != null) {
v_packageableElement.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Initialize(final String       p_Newname)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_name = Ooaofooa.Getuniqueinitialname(modelRoot			    
,p_Newname			    
,Converttoinstance()) ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}


   } // End initialize
  public  boolean      Rename(final String       p_New_name)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Rename") ; 
               final ModelRoot modelRoot = getModelRoot();
CoreDataType_c v_cdt = CoreDataType_c.getOneS_CDTOnR17(this);


if ( (  (v_cdt != null)) )
{

return false;



}

setName( p_New_name) ;


return true;



   } // End rename
  public  boolean      Iscommonallowedtype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Iscommonallowedtype") ; 
               final ModelRoot modelRoot = getModelRoot();
UserDataType_c v_udt = UserDataType_c.getOneS_UDTOnR17(this);


if (   (v_udt != null) )
{

return true;



}

else
{

EnumerationDataType_c v_edt = EnumerationDataType_c.getOneS_EDTOnR17(this);


if (   (v_edt != null) )
{

return true;



}

else
{

StructuredDataType_c v_sdt = StructuredDataType_c.getOneS_SDTOnR17(this);


if (   (v_sdt != null) )
{

return true;



}

else
{

InstanceReferenceDataType_c v_irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(this);


if (   (v_irdt != null) )
{

return true;



}

else
{

if ( (getName().equals("boolean") || getName().equals("component_ref") || getName().equals("integer") || getName().equals("string") || getName().equals("real") || getName().equals("unique_id") || getName().equals("inst<Event>")) )
{

return true;



}


}


}


}


}

return false;



   } // End isCommonAllowedType
  public static boolean      Isallowedreturntype(ModelRoot modelRoot,final java.util.UUID         p_Dom_id,final String       p_Typename)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Isallowedreturntype") ; 
Domain_c v_dom = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, p_Dom_id);


  class DataType_test55750_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals(p_Typename) ;
	}
  }
DataType_c v_dt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test55750_c());


if ( (  (v_dt == null)) )
{

  class DataType_test55515_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getName().equals(p_Typename)) ;
	}
  }
v_dt = DataType_c.DataTypeInstance(modelRoot, new DataType_test55515_c()) ;



}

if (   (v_dt != null) )
{

if ( (v_dt.Iscommonallowedtype()) )
{

return true;



}

else if ( (p_Typename.equals("void")) )
{

return true;



}


}

return false;



   } // End isAllowedReturnType
  public static boolean      Isallowedparametertype(ModelRoot modelRoot,final java.util.UUID         p_Dom_id,final String       p_Typename)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Isallowedparametertype") ; 
Domain_c v_dom = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, p_Dom_id);


if ( (  (v_dom != null)) )
{

  class DataType_test55751_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals(p_Typename) ;
	}
  }
DataType_c v_dt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test55751_c());


if (   (v_dt != null) )
{

return v_dt.Iscommonallowedtype();



}


}

else
{

  class DataType_test55516_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getName().equals(p_Typename)) ;
	}
  }
DataType_c v_dt = DataType_c.DataTypeInstance(modelRoot, new DataType_test55516_c()) ;


if (   (v_dt != null) )
{

return v_dt.Iscommonallowedtype();



}


}

return false;



   } // End isAllowedParameterType
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  Object Getdefaultvalue()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Getdefaultvalue") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_dtName = Getcoredatatypename() ;


Object v_result = Gd_c.Null_instance() ;


String       v_default = getDefaultvalue() ;


if ( (v_dtName.equals("boolean")) )
{

if ( ! v_default.equals("") )
{

v_result = Gd_c.Boolean_to_instance(			    
Gd_c.String_to_boolean(			    
v_default)) ;



}

else
{

v_result = Gd_c.Boolean_to_instance(			    
false) ;



}


}

else if ( (v_dtName.equals("integer")) )
{

if ( ! v_default.equals("") )
{

v_result = Gd_c.Int_to_instance(			    
Gd_c.String_to_int(			    
v_default)) ;



}

else
{

v_result = Gd_c.Int_to_instance(			    
0) ;



}


}

else if ( (v_dtName.equals("real")) )
{

if ( ! v_default.equals("") )
{

v_result = Gd_c.Real_to_instance(			    
Gd_c.String_to_real(			    
v_default)) ;



}

else
{

v_result = Gd_c.Real_to_instance(			    
0) ;



}


}

else if ( (v_dtName.equals("string")) )
{

v_result = Gd_c.String_to_instance(			    
v_default) ;



}

else if ( (v_dtName.equals("unique_id")) )
{

v_result = Gd_c.Unique_id_to_instance(			    
Gd_c.Null_unique_id()) ;



}

else if ( (v_dtName.equals("void") || v_dtName.equals("current_state") || v_dtName.equals("same_as_base") || v_dtName.equals("inst_ref<Object>") || v_dtName.equals("inst<Event>") || v_dtName.equals("inst<Mapping>") || v_dtName.equals("inst_ref<Mapping>")) )
{

User_c.Logerror(			    
"Error: Attempted to get default value for data type, " + v_dtName			    
,"NoPathProvided" ) ;


v_result = Gd_c.Null_instance() ;



}

else
{

if ( ! v_default.equals("") )
{

v_result = Gd_c.String_to_instance(			    
v_default) ;



}

else
{

v_result = Gd_c.String_to_instance(			    
v_dtName + "::Unknown") ;



}


}

return v_result;



   } // End getDefaultValue
  public  String       Getcoredatatypename()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Getcoredatatypename") ; 
               final ModelRoot modelRoot = getModelRoot();
CoreDataType_c v_cdt = CoreDataType_c.getOneS_CDTOnR17(this);


UserDataType_c v_udt = UserDataType_c.getOneS_UDTOnR17(this);


EnumerationDataType_c v_edt = EnumerationDataType_c.getOneS_EDTOnR17(this);


InstanceReferenceDataType_c v_irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(this);


if ( (  (v_cdt != null)) )
{

if ( (v_cdt.getCore_typ() == 0) )
{

return "void";



}

else if ( (v_cdt.getCore_typ() == 1) )
{

return "boolean";



}

else if ( (v_cdt.getCore_typ() == 2) )
{

return "integer";



}

else if ( (v_cdt.getCore_typ() == 3) )
{

return "real";



}

else if ( (v_cdt.getCore_typ() == 4) )
{

return "string";



}

else if ( (v_cdt.getCore_typ() == 5) )
{

return "unique_id";



}

else if ( (v_cdt.getCore_typ() == 6) )
{

return "current_state";



}

else if ( (v_cdt.getCore_typ() == 7) )
{

return "same_as_base";



}

else if ( (v_cdt.getCore_typ() == 8) )
{

return "inst_ref<Object>";



}

else if ( (v_cdt.getCore_typ() == 9) )
{

return "inst_ref_set<Object>";



}

else if ( (v_cdt.getCore_typ() == 10) )
{

return "inst<Event>";



}

else if ( (v_cdt.getCore_typ() == 11) )
{

return "inst<Mapping>";



}

else if ( (v_cdt.getCore_typ() == 12) )
{

return "inst_ref<Mapping>";



}

else if ( (v_cdt.getCore_typ() == 13) )
{

return "component_ref";



}

else
{

User_c.Logerror(			    
"Data Type.getCoreDataType error: unknown data type"			    
,"" ) ;


return "";



}


}

else if ( (  (v_edt != null)) )
{

return v_edt.Get_name();



}

else if ( (  (v_irdt != null)) )
{

return v_irdt.Get_name();



}

else if ( (  (v_udt != null)) )
{

DataType_c v_core = DataType_c.getOneS_DTOnR18(v_udt);


return v_core.Getcoredatatypename();



}

else
{

User_c.Logerror(			    
"Data Type.getCoreDataType error: unable to get core data type, return the name of the data type"			    
,"" ) ;


return getName();



}


   } // End getCoreDataTypeName
  public  void Associatedtwithdomain(final java.util.UUID         p_Dom_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Associatedtwithdomain") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_domain = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, p_Dom_id);


SystemDatatypeInPackage_c v_systemDt = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401(this);


if ( (  (v_systemDt != null) &&   (v_domain != null)) )
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4402(v_systemDt);


if (v_systemDt != null) {
v_systemDt.unrelateAcrossR4402From(v_system);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


DataTypePackage_c v_pkg = DataTypePackage_c.getOneS_DPKOnR4401(v_systemDt);


if (v_systemDt != null) {
v_systemDt.unrelateAcrossR4401From( this ) ; v_systemDt.unrelateAcrossR4401From( v_pkg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_systemDt != null) {
// get the location of this element in the instance list
// before deleting
if ( v_systemDt.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_systemDt));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


if (v_domain != null) {
  v_domain.relateAcrossR14To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

else if ( (  (v_domain != null) &&   (v_systemDt == null)) )
{

Domain_c v_prevDomain = Domain_c.getOneS_DOMOnR14(this);


if ( (  (v_prevDomain != null)) )
{

this.unrelateAcrossR14From(v_prevDomain);


  this.relateAcrossR14To(v_domain);



}


}


   } // End associateDTWithDomain
  public  void Associatedtwithsystem(final java.util.UUID         p_Sys_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Associatedtwithsystem") ; 
               final ModelRoot modelRoot = getModelRoot();
SystemModel_c v_system = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(p_Sys_id);


Domain_c v_prevDomain = Domain_c.getOneS_DOMOnR14(this);


if ( (  (v_prevDomain != null) &&   (v_system != null)) )
{

this.unrelateAcrossR14From(v_prevDomain);


SystemDatatypeInPackage_c v_sdinp = new SystemDatatypeInPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sdinp));


if (v_sdinp != null) {
  v_sdinp.relateAcrossR4402To(v_system);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


DataTypePackage_c v_pkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(this));


if (v_sdinp != null) {
  v_sdinp.relateAcrossR4401To( v_pkg ) ;   v_sdinp.relateAcrossR4401To( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}

else if ( (  (v_prevDomain == null) &&   (v_system != null)) )
{

SystemDatatypeInPackage_c v_sdip = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401(this);


if ( (  (v_sdip != null)) )
{

SystemModel_c v_prevSystem = SystemModel_c.getOneS_SYSOnR4402(v_sdip);


if (v_sdip != null) {
v_sdip.unrelateAcrossR4402From(v_prevSystem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_sdip != null) {
  v_sdip.relateAcrossR4402To(v_system);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


DataTypePackage_c v_prevPkg = DataTypePackage_c.getOneS_DPKOnR4401(v_sdip);


if (v_sdip != null) {
v_sdip.unrelateAcrossR4401From( this ) ; v_sdip.unrelateAcrossR4401From( v_prevPkg ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


DataTypePackage_c v_pkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(this));


if (v_sdip != null) {
  v_sdip.relateAcrossR4401To( v_pkg ) ;   v_sdip.relateAcrossR4401To( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


}


   } // End associateDTWithSystem
  public  void Resolvedomain()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Resolvedomain") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(this);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


InstanceReferenceDataType_c v_irdt = InstanceReferenceDataType_c.getOneS_IRDTOnR17(this);


if ( ((  !v_isInGenericPackage) && (  (v_irdt != null))) )
{

Domain_c v_target_dom = Domain_c.getOneS_DOMOnR1(Subsystem_c.getOneS_SSOnR2(ModelClass_c.getOneO_OBJOnR123(v_irdt)));


Domain_c v_existing_dom = Domain_c.getOneS_DOMOnR14(this);


if ( (v_target_dom != v_existing_dom) )
{

this.unrelateAcrossR14From(v_existing_dom);


  this.relateAcrossR14To(v_target_dom);



}


}


   } // End resolveDomain
  public static String       Getdefaultdatatypename(ModelRoot modelRoot,final String       p_Elementtype)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Getdefaultdatatypename") ; 
if ( (p_Elementtype.equals("InterfaceOperation")) )
{

return "void";



}

else if ( (p_Elementtype.equals("PropertyParameter")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("Bridge")) )
{

return "void";



}

else if ( (p_Elementtype.equals("BridgeParameter")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("OperationParameter")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("Operation")) )
{

return "void";



}

else if ( (p_Elementtype.equals("Function")) )
{

return "void";



}

else if ( (p_Elementtype.equals("FunctionParameter")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("StateMachineEventDataItem")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("Attribute")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("StructureMember")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("Value")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("TransientVar")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("Variable")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("UserDataType")) )
{

return "integer";



}

else if ( (p_Elementtype.equals("SymbolicConstant")) )
{

return "integer";



}

return "";



   } // End getDefaultDataTypeName
  public  String       Getpath(final boolean      p_Includeself,final String       p_Path)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Data Type", " Operation entered: DataType::Getpath") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_path = "" ;


if ( (p_Includeself) )
{

v_path = getName() ;



}

if ( (! p_Path.equals("")) )
{

v_path = v_path + "::" + p_Path ;



}

DataTypePackage_c v_dtPackage = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(this));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(this));


Component_c v_component = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(this));


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( v_isInGenericPackage )
{

if (   (v_package != null) )
{

if ( (! v_path.equals("")) )
{

v_path = v_package.Getqualifiedname() + "::" + v_path ;



}

else
{

v_path = v_package.Getqualifiedname() ;



}


}

else
{

if ( (! v_path.equals("")) )
{

v_path = v_component.Getqualifiedname() + "::" + v_path ;



}

else
{

v_path = v_component.Getqualifiedname() ;



}


}


}

else
{

if (   (v_dtPackage != null) )
{

v_path = v_dtPackage.Getpath(			    
v_path) ;



}


}

return v_path;



   } // End getPath

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Data Type
