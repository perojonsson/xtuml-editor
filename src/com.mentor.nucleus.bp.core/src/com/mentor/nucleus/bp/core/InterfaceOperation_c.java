      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InterfaceOperation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_INTERFACE_OPERATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class InterfaceOperation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public InterfaceOperation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_dt_id,
       String       p_m_name,
       String       p_m_descrip,
       int  p_m_direction,
       String       p_m_return_dimensions,
       java.util.UUID         p_m_previous_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       m_direction = p_m_direction;
       m_return_dimensions = p_m_return_dimensions;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_previous_id = IdAssigner.preprocessUUID(p_m_previous_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public InterfaceOperation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_dt_id,
       String       p_m_name,
       String       p_m_descrip,
       int  p_m_direction,
       String       p_m_return_dimensions,
       java.util.UUID         p_m_previous_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);
      InterfaceOperation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (InterfaceOperation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       new_inst.m_direction = p_m_direction;
       new_inst.m_return_dimensions = p_m_return_dimensions;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_previous_id = IdAssigner.preprocessUUID(p_m_previous_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new InterfaceOperation_c(modelRoot,
p_m_id,
p_m_dt_id,
p_m_name,
p_m_descrip,
p_m_direction,
p_m_return_dimensions,
p_m_previous_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public InterfaceOperation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_dt_id,
       String       p_m_name,
       String       p_m_descrip,
       int  p_m_direction,
       String       p_m_return_dimensions,
       java.util.UUID         p_m_previous_id){
    InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);
    InterfaceOperation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (InterfaceOperation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       source.m_direction = p_m_direction;
       source.m_return_dimensions = p_m_return_dimensions;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_previous_id = IdAssigner.preprocessUUID(p_m_previous_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    InterfaceOperation_c new_inst = new InterfaceOperation_c(modelRoot,
p_m_id,
p_m_dt_id,
p_m_name,
p_m_descrip,
p_m_direction,
p_m_return_dimensions,
p_m_previous_id
);
    return new_inst;
  }
  public InterfaceOperation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_descrip = "";   
     m_direction = Ifdirectiontype_c.OOA_UNINITIALIZED_ENUM;
     m_return_dimensions = "";   
     m_previous_id = IdAssigner.NULL_UUID;   
     m_dt_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof InterfaceOperation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof InterfaceOperation_c)) {
           return false;
       }
       
       InterfaceOperation_c me = (InterfaceOperation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((InterfaceOperation_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((InterfaceOperation_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof InterfaceOperation_c)) {
           return false;
       }
       
       InterfaceOperation_c me = (InterfaceOperation_c)elem;
      if (!getIdCachedValue().equals(((InterfaceOperation_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private String       m_name ;
  private String       m_descrip ;
  private int  m_direction ;
  private String       m_return_dimensions ;
  private java.util.UUID         m_previous_id ;
  private java.util.UUID         m_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

DataType_c HasReturnDefinedByDataType ;
public void relateAcrossR4008To(DataType_c target)
{
	relateAcrossR4008To(target, true);
}
public void relateAcrossR4008To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasReturnDefinedByDataType) return;  // already related

    if ( HasReturnDefinedByDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasReturnDefinedByDataType != null) {
        UmlProblem.removeXtUMLProblem(this, HasReturnDefinedByDataType);
    
        HasReturnDefinedByDataType.clearBackPointerR4008To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperation_c.relateAcrossR4008To(DataType_c target)", 
			"Relate performed across R4008 from Interface Operation to Data Type without unrelate of prior instance.");  
		}
    }
                
    	HasReturnDefinedByDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4008To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4008", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4008From(DataType_c target)
{
	unrelateAcrossR4008From(target, true);
}
public void unrelateAcrossR4008From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasReturnDefinedByDataType == null) return;  // already unrelated
	
	if (target != HasReturnDefinedByDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4008", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4008To(this);
    }
    

      if(HasReturnDefinedByDataType != null) {
      
        m_dt_id = HasReturnDefinedByDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = HasReturnDefinedByDataType.getDt_idCachedValue();
        }       
        HasReturnDefinedByDataType = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4008", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static InterfaceOperation_c getOneC_IOOnR4008(DataType_c [] targets)
{
    return getOneC_IOOnR4008(targets, null);
}

public static InterfaceOperation_c getOneC_IOOnR4008(DataType_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_IOOnR4008(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperation_c getOneC_IOOnR4008(DataType_c target)
{
  return getOneC_IOOnR4008(target, null);
}

public static InterfaceOperation_c getOneC_IOOnR4008(DataType_c target, boolean loadComponent)
{
    return getOneC_IOOnR4008(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperation_c getOneC_IOOnR4008(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_IOOnR4008(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperation_c getOneC_IOOnR4008(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneC_IOOnR4008(modelRoot, target, test, true);
}

public static InterfaceOperation_c getOneC_IOOnR4008(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  InterfaceOperation_c result = null;
  
  result=find_getOneC_IOOnR4008(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,InterfaceOperation_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneC_IOOnR4008(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static InterfaceOperation_c find_getOneC_IOOnR4008(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008) {
	    for ( int i = 0; i < target.backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.size(); ++i ) {
	      InterfaceOperation_c source = (InterfaceOperation_c)target.backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c [] targets)
{
  return getManyC_IOsOnR4008(targets, null);
}
public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c [] targets, boolean loadComponent)
{
  return getManyC_IOsOnR4008(targets, null, loadComponent);
}
public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_IOsOnR4008(targets, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, InterfaceOperation_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008) {
	    for (int j = 0; j < targets[i].backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.size(); ++j) {
	      InterfaceOperation_c source = (InterfaceOperation_c)targets[i].backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	InterfaceOperation_c[] ret_set = new InterfaceOperation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperation_c[0];
  }
  }

public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c target)
{
  return getManyC_IOsOnR4008(target, null);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c target, boolean loadComponent)
{
  return getManyC_IOsOnR4008(target, null, loadComponent);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c target, ClassQueryInterface_c test)
{
	return getManyC_IOsOnR4008(target, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4008(DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new InterfaceOperation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, InterfaceOperation_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008) {
    for (int i = 0; i < target.backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.size(); ++i) {
      InterfaceOperation_c source = (InterfaceOperation_c)target.backPointer_DefinesReturnTypeInterfaceOperationDefinesReturnType_R4008.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		InterfaceOperation_c[] ret_set = new InterfaceOperation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new InterfaceOperation_c[0];
	}
  }


  
    
// referring navigation

ExecutableProperty_c IsSupertypeExecutableProperty ;
public void relateAcrossR4004To(ExecutableProperty_c target)
{
	relateAcrossR4004To(target, true);
}
public void relateAcrossR4004To(ExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeExecutableProperty) return;  // already related

    if ( IsSupertypeExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeExecutableProperty != null) {
    
        IsSupertypeExecutableProperty.clearBackPointerR4004To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperation_c.relateAcrossR4004To(ExecutableProperty_c target)", 
			"Relate performed across R4004 from Interface Operation to Executable Property without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeExecutableProperty = target ;
        m_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4004To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4004", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4004From(ExecutableProperty_c target)
{
	unrelateAcrossR4004From(target, true);
}
public void unrelateAcrossR4004From(ExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeExecutableProperty == null) return;  // already unrelated
	
	if (target != IsSupertypeExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4004", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4004To(this);
    }
    

      if(IsSupertypeExecutableProperty != null) {
      
        m_id = IsSupertypeExecutableProperty.getId();
        IsSupertypeExecutableProperty = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4004", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static InterfaceOperation_c getOneC_IOOnR4004(ExecutableProperty_c [] targets)
{
    return getOneC_IOOnR4004(targets, null);
}

public static InterfaceOperation_c getOneC_IOOnR4004(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_IOOnR4004(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperation_c getOneC_IOOnR4004(ExecutableProperty_c target)
{
  return getOneC_IOOnR4004(target, null);
}

public static InterfaceOperation_c getOneC_IOOnR4004(ExecutableProperty_c target, boolean loadComponent)
{
    return getOneC_IOOnR4004(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperation_c getOneC_IOOnR4004(ExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_IOOnR4004(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperation_c getOneC_IOOnR4004(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneC_IOOnR4004(modelRoot, target, test, true);
}

public static InterfaceOperation_c getOneC_IOOnR4004(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_IOOnR4004(modelRoot,target,test);
}
private static InterfaceOperation_c find_getOneC_IOOnR4004(ModelRoot modelRoot, ExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    InterfaceOperation_c source = (InterfaceOperation_c)target.backPointer_IsSubtypeInterfaceOperationIsSubtype_R4004;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static InterfaceOperation_c [] getManyC_IOsOnR4004(ExecutableProperty_c [] targets)
{
  return getManyC_IOsOnR4004(targets, null);
}
public static InterfaceOperation_c [] getManyC_IOsOnR4004(ExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManyC_IOsOnR4004(targets, null, loadComponent);
}
public static InterfaceOperation_c [] getManyC_IOsOnR4004(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_IOsOnR4004(targets, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4004(ExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      InterfaceOperation_c source = (InterfaceOperation_c)targets[i].backPointer_IsSubtypeInterfaceOperationIsSubtype_R4004;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	InterfaceOperation_c[] ret_set = new InterfaceOperation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperation_c[0];
  }
  }

public static InterfaceOperation_c [] getManyC_IOsOnR4004(ExecutableProperty_c target)
{
  if (target != null) {
    ExecutableProperty_c [] targetArray = new ExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR4004(targetArray);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
  return result ;
}
}

public static InterfaceOperation_c [] getManyC_IOsOnR4004(ExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
    ExecutableProperty_c [] targetArray = new ExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR4004(targetArray, loadComponent);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
  return result ;
}
}



  
    
// referring navigation

InterfaceOperation_c SucceedsInterfaceOperation ;
public void relateAcrossR4019ToSucceeds(InterfaceOperation_c target)
{
	relateAcrossR4019ToSucceeds(target, true);
}
public void relateAcrossR4019ToSucceeds(InterfaceOperation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SucceedsInterfaceOperation) return;  // already related

    if ( SucceedsInterfaceOperation != target ) {
    
    Object oldKey = getInstanceKey();

    if (SucceedsInterfaceOperation != null) {
    
        SucceedsInterfaceOperation.clearBackPointerR4019ToPrecedes(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"InterfaceOperation_c.relateAcrossR4019ToSucceeds(InterfaceOperation_c target)", 
			"Relate performed across R4019 from Interface Operation to Interface Operation without unrelate of prior instance.");  
		}
    }
                
    	SucceedsInterfaceOperation = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_previous_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4019ToPrecedes(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4019", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4019FromSucceeds(InterfaceOperation_c target)
{
	unrelateAcrossR4019FromSucceeds(target, true);
}
public void unrelateAcrossR4019FromSucceeds(InterfaceOperation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SucceedsInterfaceOperation == null) return;  // already unrelated
	
	if (target != SucceedsInterfaceOperation) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4019", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4019ToPrecedes(this);
    }
    

      if(SucceedsInterfaceOperation != null) {
      
        m_previous_id = SucceedsInterfaceOperation.getId();
        if(IdAssigner.NULL_UUID.equals(m_previous_id))
        {
          m_previous_id = SucceedsInterfaceOperation.getIdCachedValue();
        }       
        SucceedsInterfaceOperation = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4019", "Succeeds");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static InterfaceOperation_c getOneC_IOOnR4019Precedes(InterfaceOperation_c [] targets)
{
    return getOneC_IOOnR4019Precedes(targets, null);
}

public static InterfaceOperation_c getOneC_IOOnR4019Precedes(InterfaceOperation_c [] targets, ClassQueryInterface_c test)
{
    InterfaceOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_IOOnR4019Precedes(targets[i], test);
        }
    }

    return ret_val;
}

public static InterfaceOperation_c getOneC_IOOnR4019Precedes(InterfaceOperation_c target)
{
  return getOneC_IOOnR4019Precedes(target, null);
}

public static InterfaceOperation_c getOneC_IOOnR4019Precedes(InterfaceOperation_c target, boolean loadComponent)
{
    return getOneC_IOOnR4019Precedes(target.getModelRoot(), target, null, loadComponent);
}

public static InterfaceOperation_c getOneC_IOOnR4019Precedes(InterfaceOperation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_IOOnR4019Precedes(target.getModelRoot(), target, test);
  }
  return null;
}

public static InterfaceOperation_c getOneC_IOOnR4019Precedes(ModelRoot modelRoot, InterfaceOperation_c target, ClassQueryInterface_c test)
{
	return getOneC_IOOnR4019Precedes(modelRoot, target, test, true);
}

public static InterfaceOperation_c getOneC_IOOnR4019Precedes(ModelRoot modelRoot, InterfaceOperation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_IOOnR4019Precedes(modelRoot,target,test);
}
private static InterfaceOperation_c find_getOneC_IOOnR4019Precedes(ModelRoot modelRoot, InterfaceOperation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    InterfaceOperation_c source = (InterfaceOperation_c)target.backPointer_PrecedesInterfaceOperationPrecedes_R4019;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Precedes(InterfaceOperation_c [] targets)
{
  return getManyC_IOsOnR4019Precedes(targets, null);
}
public static InterfaceOperation_c [] getManyC_IOsOnR4019Precedes(InterfaceOperation_c [] targets, boolean loadComponent)
{
  return getManyC_IOsOnR4019Precedes(targets, null, loadComponent);
}
public static InterfaceOperation_c [] getManyC_IOsOnR4019Precedes(InterfaceOperation_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_IOsOnR4019Precedes(targets, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Precedes(InterfaceOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new InterfaceOperation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      InterfaceOperation_c source = (InterfaceOperation_c)targets[i].backPointer_PrecedesInterfaceOperationPrecedes_R4019;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	InterfaceOperation_c[] ret_set = new InterfaceOperation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new InterfaceOperation_c[0];
  }
  }

public static InterfaceOperation_c [] getManyC_IOsOnR4019Precedes(InterfaceOperation_c target)
{
  if (target != null) {
    InterfaceOperation_c [] targetArray = new InterfaceOperation_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR4019Precedes(targetArray);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
  return result ;
}
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Precedes(InterfaceOperation_c target, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperation_c [] targetArray = new InterfaceOperation_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR4019Precedes(targetArray, loadComponent);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Dimensions_c> backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018 = new ArrayList<Dimensions_c>();

public void setDimensionsOrderInChildListR4018(Dimensions_c target, int index) {
	unrelateAcrossR4018From(target);
	Dimensions_c[] elements = Dimensions_c.getManyS_DIMsOnR4018(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4018From((Dimensions_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4018To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4018To((Dimensions_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4018To(Dimensions_c target)
{
  if (target != null) {
    target.relateAcrossR4018To(this, true) ;
  }
}

public void relateAcrossR4018To(Dimensions_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4018To(this, notifyChanges) ;
  }
}

public void setBackPointerR4018To(Dimensions_c target)
{
  	synchronized (backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018) {
		backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018.add(target);
	}
}

public void unrelateAcrossR4018From(Dimensions_c target)
{
  if (target != null) {
    target.unrelateAcrossR4018From(this, true) ;
  }
}

public void unrelateAcrossR4018From(Dimensions_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4018From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4018To(Dimensions_c target)
{
  synchronized (backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018) {
	    backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018.remove(target);
	}
}

public static InterfaceOperation_c getOneC_IOOnR4018(Dimensions_c [] targets)
{
    return getOneC_IOOnR4018(targets, null);
}

public static InterfaceOperation_c getOneC_IOOnR4018(Dimensions_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_IOOnR4018(targets, test, true);
}

public static InterfaceOperation_c getOneC_IOOnR4018(Dimensions_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    InterfaceOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             InterfaceOperation_c candidate_val = getOneC_IOOnR4018(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_IOOnR4018(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static InterfaceOperation_c getOneC_IOOnR4018(Dimensions_c target)
{
	return getOneC_IOOnR4018(target, true);
}
public static InterfaceOperation_c getOneC_IOOnR4018(Dimensions_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.DefinesReturnValueDimensionsForInterfaceOperation ;
  } else {
    return null;
  }
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_IOsOnR4018(targets, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InterfaceOperation_c[0];
  
  
  LinkedHashSet<InterfaceOperation_c> elementsSet = new LinkedHashSet<InterfaceOperation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].DefinesReturnValueDimensionsForInterfaceOperation == null)
	  targets[i].loadProxy();
    InterfaceOperation_c associate = targets[i].DefinesReturnValueDimensionsForInterfaceOperation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  InterfaceOperation_c[] result = new InterfaceOperation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c [] targets)
{
  return getManyC_IOsOnR4018(targets, null);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Dimensions_c [] targetArray = new Dimensions_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR4018(targetArray, test, loadComponent);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
    return result ;
  }
  
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c target,
    ClassQueryInterface_c test)
{
    return getManyC_IOsOnR4018(target, null, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c target)
{
    return getManyC_IOsOnR4018(target, null, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4018(Dimensions_c target, boolean loadComponent)
{
    return getManyC_IOsOnR4018(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<InterfaceOperationMessage_c> backPointer_SentByInterfaceOperationMessageSentBy_R1022 = new ArrayList<InterfaceOperationMessage_c>();

public void setInterfaceOperationMessageOrderInChildListR1022(InterfaceOperationMessage_c target, int index) {
	unrelateAcrossR1022From(target);
	InterfaceOperationMessage_c[] elements = InterfaceOperationMessage_c.getManyMSG_IOPsOnR1022(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1022From((InterfaceOperationMessage_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1022To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1022To((InterfaceOperationMessage_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1022To(InterfaceOperationMessage_c target)
{
  if (target != null) {
    target.relateAcrossR1022To(this, true) ;
  }
}

public void relateAcrossR1022To(InterfaceOperationMessage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1022To(this, notifyChanges) ;
  }
}

public void setBackPointerR1022To(InterfaceOperationMessage_c target)
{
  	synchronized (backPointer_SentByInterfaceOperationMessageSentBy_R1022) {
		backPointer_SentByInterfaceOperationMessageSentBy_R1022.add(target);
	}
}

public void unrelateAcrossR1022From(InterfaceOperationMessage_c target)
{
  if (target != null) {
    target.unrelateAcrossR1022From(this, true) ;
  }
}

public void unrelateAcrossR1022From(InterfaceOperationMessage_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1022From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1022To(InterfaceOperationMessage_c target)
{
  synchronized (backPointer_SentByInterfaceOperationMessageSentBy_R1022) {
	    backPointer_SentByInterfaceOperationMessageSentBy_R1022.remove(target);
	}
}

public static InterfaceOperation_c getOneC_IOOnR1022(InterfaceOperationMessage_c [] targets)
{
    return getOneC_IOOnR1022(targets, null);
}

public static InterfaceOperation_c getOneC_IOOnR1022(InterfaceOperationMessage_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_IOOnR1022(targets, test, true);
}

public static InterfaceOperation_c getOneC_IOOnR1022(InterfaceOperationMessage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    InterfaceOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             InterfaceOperation_c candidate_val = getOneC_IOOnR1022(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_IOOnR1022(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static InterfaceOperation_c getOneC_IOOnR1022(InterfaceOperationMessage_c target)
{
	return getOneC_IOOnR1022(target, true);
}
public static InterfaceOperation_c getOneC_IOOnR1022(InterfaceOperationMessage_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.SendsInterfaceOperation != null){
		target.SendsInterfaceOperation.loadProxy();
	}
	}
    return target.SendsInterfaceOperation ;
  } else {
    return null;
  }
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_IOsOnR1022(targets, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InterfaceOperation_c[0];
  
  
  LinkedHashSet<InterfaceOperation_c> elementsSet = new LinkedHashSet<InterfaceOperation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SendsInterfaceOperation == null)
	  targets[i].loadProxy();
    InterfaceOperation_c associate = targets[i].SendsInterfaceOperation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  InterfaceOperation_c[] result = new InterfaceOperation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c [] targets)
{
  return getManyC_IOsOnR1022(targets, null);
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperationMessage_c [] targetArray = new InterfaceOperationMessage_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR1022(targetArray, test, loadComponent);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
    return result ;
  }
  
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c target,
    ClassQueryInterface_c test)
{
    return getManyC_IOsOnR1022(target, null, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c target)
{
    return getManyC_IOsOnR1022(target, null, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR1022(InterfaceOperationMessage_c target, boolean loadComponent)
{
    return getManyC_IOsOnR1022(target, null, loadComponent);
}


    
  
  
// referred to navigation

InterfaceOperation_c backPointer_PrecedesInterfaceOperationPrecedes_R4019;

public void setInterfaceOperationOrderInChildListR4019(InterfaceOperation_c target, int index) {
	unrelateAcrossR4019FromPrecedes(target);
	InterfaceOperation_c[] elements = InterfaceOperation_c.getManyC_IOsOnR4019Precedes(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4019FromPrecedes((InterfaceOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4019ToPrecedes(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4019ToPrecedes((InterfaceOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4019ToPrecedes(InterfaceOperation_c target)
{
  if (target != null) {
    target.relateAcrossR4019ToSucceeds(this, true) ;
  }
}

public void relateAcrossR4019ToPrecedes(InterfaceOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4019ToSucceeds(this, notifyChanges) ;
  }
}

public void setBackPointerR4019ToPrecedes(InterfaceOperation_c target)
{
    backPointer_PrecedesInterfaceOperationPrecedes_R4019 = target;
}

public void unrelateAcrossR4019FromPrecedes(InterfaceOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR4019FromSucceeds(this, true) ;
  }
}

public void unrelateAcrossR4019FromPrecedes(InterfaceOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4019FromSucceeds(this, notifyChanges) ;
  }
}

public void clearBackPointerR4019ToPrecedes(InterfaceOperation_c target)
{
	if (target == backPointer_PrecedesInterfaceOperationPrecedes_R4019) {
		backPointer_PrecedesInterfaceOperationPrecedes_R4019 = null;
	}
}

public static InterfaceOperation_c getOneC_IOOnR4019Succeeds(InterfaceOperation_c [] targets)
{
    return getOneC_IOOnR4019Succeeds(targets, null);
}

public static InterfaceOperation_c getOneC_IOOnR4019Succeeds(InterfaceOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_IOOnR4019Succeeds(targets, test, true);
}

public static InterfaceOperation_c getOneC_IOOnR4019Succeeds(InterfaceOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    InterfaceOperation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             InterfaceOperation_c candidate_val = getOneC_IOOnR4019Succeeds(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_IOOnR4019Succeeds(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static InterfaceOperation_c getOneC_IOOnR4019Succeeds(InterfaceOperation_c target)
{
	return getOneC_IOOnR4019Succeeds(target, true);
}
public static InterfaceOperation_c getOneC_IOOnR4019Succeeds(InterfaceOperation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.SucceedsInterfaceOperation ;
  } else {
    return null;
  }
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_IOsOnR4019Succeeds(targets, test, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InterfaceOperation_c[0];
  
  
  LinkedHashSet<InterfaceOperation_c> elementsSet = new LinkedHashSet<InterfaceOperation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SucceedsInterfaceOperation == null)
	  targets[i].loadProxy();
    InterfaceOperation_c associate = targets[i].SucceedsInterfaceOperation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  InterfaceOperation_c[] result = new InterfaceOperation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c [] targets)
{
  return getManyC_IOsOnR4019Succeeds(targets, null);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperation_c [] targetArray = new InterfaceOperation_c[1];
    targetArray[0] = target;
    return getManyC_IOsOnR4019Succeeds(targetArray, test, loadComponent);
  } else {
    InterfaceOperation_c [] result = new InterfaceOperation_c [0] ;
    return result ;
  }
  
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyC_IOsOnR4019Succeeds(target, null, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c target)
{
    return getManyC_IOsOnR4019Succeeds(target, null, true);
}

public static InterfaceOperation_c [] getManyC_IOsOnR4019Succeeds(InterfaceOperation_c target, boolean loadComponent)
{
    return getManyC_IOsOnR4019Succeeds(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (HasReturnDefinedByDataType == null) {          
      // R4008
      DataType_c relInst57010 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57010 == null) {
      			relInst57010 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst57010 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57010 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst57010 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57010 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57010) && !isProxy())) {
	      relInst57010.relateAcrossR4008To(this, notifyChanges);
	  }
	  }
	}
	          

      // R4004
      ExecutableProperty_c relInst57011 = (ExecutableProperty_c) baseRoot.getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57011 == null) {
      			relInst57011 = (ExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_id});
      		}
			if (relInst57011 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57011 = (ExecutableProperty_c) roots[i].getInstanceList(ExecutableProperty_c.class).get(new Object[] {m_id});
					if (relInst57011 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57011 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57011) && !isProxy())) {
	      relInst57011.relateAcrossR4004To(this, notifyChanges);
	  }
	  }
	          

	if (SucceedsInterfaceOperation == null) {          
      // R4019
      InterfaceOperation_c relInst57012 = (InterfaceOperation_c) baseRoot.getInstanceList(InterfaceOperation_c.class).get(new Object[] {m_previous_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57012 == null) {
      			relInst57012 = (InterfaceOperation_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceOperation_c.class).get(new Object[] {m_previous_id});
      		}
			if (relInst57012 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57012 = (InterfaceOperation_c) roots[i].getInstanceList(InterfaceOperation_c.class).get(new Object[] {m_previous_id});
					if (relInst57012 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57012 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57012) && !isProxy())) {
	      relInst57012.relateAcrossR4019ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4008
      // S_DT
		  inst=HasReturnDefinedByDataType;
			unrelateAcrossR4008From(HasReturnDefinedByDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R4004
      // C_EP
		  inst=IsSupertypeExecutableProperty;
			unrelateAcrossR4004From(IsSupertypeExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R4019
      // C_IO
		  inst=SucceedsInterfaceOperation;
			unrelateAcrossR4019FromSucceeds(SucceedsInterfaceOperation, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InterfaceOperation_c inst = (InterfaceOperation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static InterfaceOperation_c InterfaceOperationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		InterfaceOperation_c result=findInterfaceOperationInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,InterfaceOperation_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findInterfaceOperationInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static InterfaceOperation_c findInterfaceOperationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				InterfaceOperation_c x = (InterfaceOperation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static InterfaceOperation_c InterfaceOperationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return InterfaceOperationInstance(modelRoot,test,true);
  }
  
  public static InterfaceOperation_c InterfaceOperationInstance(ModelRoot modelRoot)
  {
	 return InterfaceOperationInstance(modelRoot,null,true);
  }

  public static InterfaceOperation_c [] InterfaceOperationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, InterfaceOperation_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(InterfaceOperation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					InterfaceOperation_c x = (InterfaceOperation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				InterfaceOperation_c[] ret_set = new InterfaceOperation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InterfaceOperation_c[0];
			}		
		} 
  }
  public static InterfaceOperation_c [] InterfaceOperationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  InterfaceOperationInstances(modelRoot,test,true);
  }
  public static InterfaceOperation_c [] InterfaceOperationInstances(ModelRoot modelRoot)
  {
	return InterfaceOperationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Interface Operation.dispose call: ";
	Dimensions_c testR4018Inst = Dimensions_c.getOneS_DIMOnR4018(this, false);

	if ( testR4018Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4018 ";	
	}
	DataType_c testR4008Inst = DataType_c.getOneS_DTOnR4008(this, false);

	if ( testR4008Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4008 ";
	}
	ExecutableProperty_c testR4004Inst2 = ExecutableProperty_c.getOneC_EPOnR4004(this, false);

	if ( testR4004Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4004 ";
	}
	InterfaceOperationMessage_c testR1022Inst = InterfaceOperationMessage_c.getOneMSG_IOPOnR1022(this, false);

	if ( testR1022Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1022 ";	
	}
	InterfaceOperation_c testR4019Inst = InterfaceOperation_c.getOneC_IOOnR4019Precedes(this, false);

	if ( testR4019Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4019 ";	
	}
	 testR4019Inst = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(this, false);

	if ( testR4019Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4019 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Interface Operation", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      if(attributeName.equals("previous_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if ( IsSupertypeExecutableProperty != null )
    {
      return IsSupertypeExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypeExecutableProperty != null )
    {
      return IsSupertypeExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeExecutableProperty != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_id)){
	        return;
	    }
	}else if(m_id != null){
	    if(m_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id", m_id, newValue,true); 
   m_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getDirection()
  {
    return m_direction ;
  }


  public void setDirection(int newValue)
  {
    if(m_direction == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Direction", new Integer(m_direction), new Integer(newValue),true);

   m_direction = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getReturn_dimensions()
  {
    return m_return_dimensions ;
  }


  public void setReturn_dimensions(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_return_dimensions)){
	        return;
	    }
	}else if(m_return_dimensions != null){
	    if(m_return_dimensions.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Return_dimensions", m_return_dimensions, newValue,true); 
   m_return_dimensions = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPrevious_idLongBased()
  {
    if ( SucceedsInterfaceOperation != null )
    {
      return SucceedsInterfaceOperation.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPrevious_id()
  {
    if ( SucceedsInterfaceOperation != null )
    {
      return SucceedsInterfaceOperation.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPrevious_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_previous_id) )
      return m_previous_id;
    else
      return getPrevious_id();
  }
  
  public void setPrevious_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_previous_id)){
	        return;
	    }
	}else if(m_previous_id != null){
	    if(m_previous_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Previous_id", m_previous_id, newValue,true); 
   m_previous_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDt_idLongBased()
  {
    if ( HasReturnDefinedByDataType != null )
    {
      return HasReturnDefinedByDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( HasReturnDefinedByDataType != null )
    {
      return HasReturnDefinedByDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dt_id)){
	        return;
	    }
	}else if(m_dt_id != null){
	    if(m_dt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id", m_dt_id, newValue,true); 
   m_dt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface Operation", //$NON-NLS-1$
	  " Operation entered: Interface Operation::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     InterfaceOperation_c [] objs = InterfaceOperation_c.InterfaceOperationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface Operation", //$NON-NLS-1$
	  " Operation entered: Interface Operation::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class InterfaceOperation_c_test57014_c implements ClassQueryInterface_c
    {
	  InterfaceOperation_c_test57014_c( java.util.UUID            p57015 ) {
	  m_p57015 = p57015;
	  }
	  private java.util.UUID             m_p57015; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceOperation_c selected = (InterfaceOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57015));
	      return retval;
	  }
    }

    InterfaceOperation_c [] objs57013 = 
    InterfaceOperation_c.InterfaceOperationInstances(modelRoot, new InterfaceOperation_c_test57014_c(getId())) ;

    if ( (  (objs57013.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57013.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57013.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57013.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57013.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57013.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Interface Operation is a subtype in association: rel.Numb = 4004
          // The supertype class is: Executable Property
    class ExecutableProperty_c_test57019_c implements ClassQueryInterface_c
    {
	  ExecutableProperty_c_test57019_c( java.util.UUID            p57020 ) {
	  m_p57020 = p57020;
	  }
	  private java.util.UUID             m_p57020; 
	  public boolean evaluate (Object candidate)
	  {
	      ExecutableProperty_c selected = (ExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57020));
	      return retval;
	  }
    }

    ExecutableProperty_c [] objs57018 = 
    ExecutableProperty_c.ExecutablePropertyInstances(modelRoot, new ExecutableProperty_c_test57019_c(getId())) ;

    if ( (  (objs57018.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation: Association: 4004: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57018.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation: Association: 4004: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57018.length )  , e); 
      }
      retval = false;

    }

          // Interface Operation is a referring class in association: rel.Numb = 4019
          // The participating class is: Interface Operation
    class InterfaceOperation_c_test57022_c implements ClassQueryInterface_c
    {
	  InterfaceOperation_c_test57022_c( java.util.UUID            p57023 ) {
	  m_p57023 = p57023;
	  }
	  private java.util.UUID             m_p57023; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceOperation_c selected = (InterfaceOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57023));
	      return retval;
	  }
    }

    InterfaceOperation_c [] objs57021 = 
    InterfaceOperation_c.InterfaceOperationInstances(modelRoot, new InterfaceOperation_c_test57022_c(getPrevious_id())) ;

    if ( (  (objs57021.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation: Association: 4019: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57021.length )  + " Previous_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation: Association: 4019: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57021.length )  + " Previous_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Interface Operation is a referring class in association: rel.Numb = 4008
          // The participating class is: Data Type
    class DataType_c_test57025_c implements ClassQueryInterface_c
    {
	  DataType_c_test57025_c( java.util.UUID            p57026 ) {
	  m_p57026 = p57026;
	  }
	  private java.util.UUID             m_p57026; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p57026));
	      return retval;
	  }
    }

    DataType_c [] objs57024 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test57025_c(getDt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57024.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation: Association: 4008: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57024.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation: Association: 4008: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57024.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Interface Operation is a participating class in association: rel.Numb = 4018
             // Object: Dimensions
          // Interface Operation is a participating class in association: rel.Numb = 4019
             // Object: Interface Operation
    class InterfaceOperation_c_test57028_c implements ClassQueryInterface_c
    {
	  InterfaceOperation_c_test57028_c( java.util.UUID            p57029 ) {
	  m_p57029 = p57029;
	  }
	  private java.util.UUID             m_p57029; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceOperation_c selected = (InterfaceOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPrevious_id().equals(m_p57029));
	      return retval;
	  }
    }

    InterfaceOperation_c [] objs57027 = 
    InterfaceOperation_c.InterfaceOperationInstances(modelRoot, new InterfaceOperation_c_test57028_c(getId())) ;

    if ( (  (objs57027.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface Operation", //$NON-NLS-1$
           "Consistency: Object: Interface Operation: Association: 4019: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57027.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface Operation: Association: 4019: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57027.length )  , e); 
      }
      retval = false;

    }

          // Interface Operation is a participating class in association: rel.Numb = 1022
             // Object: Interface Operation Message
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR4008(this);


if ( (  (v_dt != null)) )
{

this.unrelateAcrossR4008From(v_dt);



}

ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4004(this);


if ( (  (v_ep != null)) )
{

if (v_ep != null) {
v_ep.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

InterfaceOperation_c v_successor = InterfaceOperation_c.getOneC_IOOnR4019Precedes(this);


InterfaceOperation_c v_predecessor = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(this);


if ( (  !  (v_successor == null)) )
{

this.unrelateAcrossR4019FromPrecedes(v_successor);



}

if ( (  !  (v_predecessor == null)) )
{

this.unrelateAcrossR4019FromSucceeds(v_predecessor);



}

if ( (  (v_successor != null) &&   (v_predecessor != null)) )
{

if (v_successor != null) {
  v_successor.relateAcrossR4019ToSucceeds(v_predecessor);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

Message_c [] v_msgs = Message_c.getManyMSG_MsOnR1018(SynchronousMessage_c.getManyMSG_SMsOnR1020(InterfaceOperationMessage_c.getManyMSG_IOPsOnR1022(this)));


Message_c  v_msg = null;
for ( int i55236 = 0; i55236 < v_msgs.length; i55236++)
{
  v_msg = v_msgs[i55236] ;

if (v_msg != null) {
v_msg.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Dimensions_c [] v_dims = Dimensions_c.getManyS_DIMsOnR4018(this);


Dimensions_c  v_dim = null;
for ( int i55237 = 0; i55237 < v_dims.length; i55237++)
{
  v_dim = v_dims[i55237] ;

this.unrelateAcrossR4018From(v_dim);


if (v_dim != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dim.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dim));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4304(InterfacePackage_c.getOneIP_IPOnR4303(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this))));


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( (v_isInGenericPackage) )
{

if ( (  (v_package == null)) )
{

java.util.UUID         v_rootCompIdInPkg = v_component.Getrootcomponentid() ;


Component_c v_rootComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_rootCompIdInPkg);


v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_rootComponent)));



}

else
{

v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);



}


}

Interface_c v_interface = Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this));


if (v_interface != null) {
v_interface.Addinterfaceoperationtoorder(			    
getId() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if ( (v_isInGenericPackage) )
{

java.util.UUID         v_def_dt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_def_dt_id = v_system.Getcoretypeid(			    
"void") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_def_dt_id);


DataType_c v_def_dt = DataType_c.getOneS_DTOnR8001(v_pe);


  this.relateAcrossR4008To(v_def_dt);



}

else
{

  class DataType_test55861_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getName().equals("void")) ;
	}
  }
DataType_c v_def_dt = DataType_c.getOneS_DTOnR4401(SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4401(DataTypePackage_c.getManyS_DPKsOnR4400(SystemDatatypePackage_c.getManySLD_SDPsOnR4400(v_system))), new DataType_test55861_c());


  this.relateAcrossR4008To(v_def_dt);



}

String       v_name = "Unnamed Operation" ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}

String       v_direction = Pref_c.Getstring(			    
"bridgepoint_prefs_message_direction") ;


if ( (v_direction.equals("from provider")) )
{

setDirection( Ifdirectiontype_c.ServerClient) ;



}

else
{

setDirection( Ifdirectiontype_c.ClientServer) ;



}


   } // End initialize
  public  void Changereturntype(final String       p_Typename)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Changereturntype") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_isInGenericPkg = false ;


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4304(InterfacePackage_c.getOneIP_IPOnR4303(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this))));


if ( (  (v_system == null)) )
{

v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)))));



}

java.util.UUID         v_type_dt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_type_dt_id = v_system.Getcoretypeid(			    
p_Typename) ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_type_dt_id);


DataType_c v_dt = DataType_c.getOneS_DTOnR8001(v_pe);


if ( (  (v_dt != null)) )
{

DataType_c v_current_dt = DataType_c.getOneS_DTOnR4008(this);


this.unrelateAcrossR4008From(v_current_dt);


if (v_dt != null) {
  v_dt.relateAcrossR4008To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End changeReturnType
  public  boolean      Isallowedreturntype(final String       p_Typename)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Isallowedreturntype") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( v_isInGenericPackage )
{

if ( Getreturndimensionscnt() != 0 && p_Typename.equals("void") )
{

return false;



}

else
{

return v_packageableElem.Isallowedtype(			    
true			    
,p_Typename);



}


}

else
{

if ( Getreturndimensionscnt() != 0 && p_Typename.equals("void") )
{

return false;



}

else
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4304(InterfacePackage_c.getOneIP_IPOnR4303(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this))));


if ( (  (v_system == null)) )
{

v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)))));



}

return Util_c.Isallowedreturntype(			    
v_system.Converttoinstance()			    
,p_Typename);



}


}


   } // End isAllowedReturnType
  public  void Newparameter()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Newparameter") ; 
               final ModelRoot modelRoot = getModelRoot();
PropertyParameter_c v_parameter = new PropertyParameter_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_parameter));


ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4004(this);


if (v_ep != null) {
  v_ep.relateAcrossR4006To(v_parameter);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_parameter != null) {
v_parameter.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


if (v_ep != null) {
v_ep.Createmessageargumentsforparameter(			    
v_parameter.getPp_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newParameter
  public  boolean      Isvoid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Isvoid") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR4008(this);


return v_dt.getName().equals("void");



   } // End isVoid
  public  void Resolvedatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Resolvedatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dtProxy = DataType_c.getOneS_DTOnR4008(this);


if ( (  (v_dtProxy != null) &&   !Util_c.Isproxy(			    
Converttoinstance())) )
{

String       v_name = v_dtProxy.getName() ;


if (v_dtProxy != null) {
v_dtProxy.unrelateAcrossR4008From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( v_isInGenericPackage )
{

java.util.UUID         v_id = v_packageableElem.Resolvedatatyperelativetoself(			    
"void"			    
,v_name) ;


  class DataType_test55862_c implements ClassQueryInterface_c
  {
	DataType_test55862_c( java.util.UUID         p55863 ) {
		m_p55863 = p55863;
	}
	private java.util.UUID         m_p55863;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getDt_id().equals(m_p55863) ;
	}
  }
DataType_c v_resolvedDt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8002(ElementVisibility_c.getManyPE_VISsOnR8002(v_package)), new DataType_test55862_c(v_id));


if ( (  (v_resolvedDt == null)) )
{

  class DataType_test55864_c implements ClassQueryInterface_c
  {
	DataType_test55864_c( java.util.UUID         p55865 ) {
		m_p55865 = p55865;
	}
	private java.util.UUID         m_p55865;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getDt_id().equals(m_p55865) ;
	}
  }
v_resolvedDt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8004(ComponentVisibility_c.getManyPE_CVSsOnR8004(v_component)), new DataType_test55864_c(v_id));



}

if (   (v_resolvedDt != null) )
{

if (v_resolvedDt != null) {
  v_resolvedDt.relateAcrossR4008To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

else
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4304(InterfacePackage_c.getOneIP_IPOnR4303(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this))));


  class DataType_test55866_c implements ClassQueryInterface_c
  {
	DataType_test55866_c( String       p55867 ) {
		m_p55867 = p55867;
	}
	private String       m_p55867;
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getName().equals(m_p55867)) ;
	}
  }
DataType_c v_resolvedDT = DataType_c.getOneS_DTOnR4401(SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402(v_system), new DataType_test55866_c(v_name));


java.util.UUID         v_r_dt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_r_dt_id = v_system.Getcoretypeid(			    
v_name) ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_r_dt_id);


v_resolvedDT = DataType_c.getOneS_DTOnR8001(v_pe);


if ( (  (v_resolvedDT == null)) )
{

v_r_dt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_r_dt_id = v_system.Getcoretypeid(			    
"void") ;



}

v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_r_dt_id);


v_resolvedDT = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_resolvedDT != null)) )
{

if (v_resolvedDT != null) {
  v_resolvedDT.relateAcrossR4008To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}


   } // End resolveDatatype
  public  int          Getreturndimensionscnt()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Getreturndimensionscnt") ; 
               final ModelRoot modelRoot = getModelRoot();
Dimensions_c [] v_dims = Dimensions_c.getManyS_DIMsOnR4018(this);


int          v_dimensions =   (v_dims.length) ;


return v_dimensions;



   } // End getReturnDimensionsCnt
  public  void Resizereturn_dimensions(final int          p_Dimension,final int          p_Elementcount,final int          p_Numdimensions)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Resizereturn_dimensions") ; 
               final ModelRoot modelRoot = getModelRoot();
while ( (p_Numdimensions > Getreturndimensionscnt()) )
{

Dimensions_c v_dim = new Dimensions_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_dim));


if (v_dim != null) {
  v_dim.setDimensioncount( Getreturndimensionscnt()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_dim != null) {
  v_dim.relateAcrossR4018To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

while ( (p_Numdimensions < Getreturndimensionscnt()) )
{

  class Dimensions_test55868_c implements ClassQueryInterface_c
  {
	Dimensions_test55868_c( int          p55869 ) {
		m_p55869 = p55869;
	}
	private int          m_p55869;
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == (m_p55869 - 1)) ;
	}
  }
Dimensions_c v_dim = Dimensions_c.getOneS_DIMOnR4018(this, new Dimensions_test55868_c(Getreturndimensionscnt()));


if (v_dim != null) {
v_dim.unrelateAcrossR4018From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_dim != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dim.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dim));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( (p_Numdimensions > 0) )
{

  class Dimensions_test55870_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
Dimensions_c v_dim = Dimensions_c.getOneS_DIMOnR4018(this, new Dimensions_test55870_c());


if ( (v_dim.getElementcount() != p_Elementcount) )
{

if (v_dim != null) {
  v_dim.setElementcount( p_Elementcount) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}


   } // End resizeReturn_Dimensions
  public  void Moveup()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Moveup") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


InterfaceOperation_c v_prev_attr = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(this);


InterfaceOperation_c v_prev_prev_attr = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(v_prev_attr);


InterfaceOperation_c v_next_attr = InterfaceOperation_c.getOneC_IOOnR4019Precedes(this);


if ( (  (v_prev_prev_attr != null)) )
{

if (v_prev_attr != null) {
v_prev_attr.unrelateAcrossR4019FromSucceeds(v_prev_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_attr != null)) )
{

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR4019FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

this.unrelateAcrossR4019FromSucceeds(v_prev_attr);


if ( (  (v_prev_prev_attr != null)) )
{

  this.relateAcrossR4019ToSucceeds(v_prev_prev_attr);



}

if ( (  (v_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

if (v_prev_attr != null) {
  v_prev_attr.relateAcrossR4019ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_attr != null) {
  v_next_attr.relateAcrossR4019ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveUp
  public  void Movedown()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Movedown") ; 
               final ModelRoot modelRoot = getModelRoot();
Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


InterfaceOperation_c v_next_attr = InterfaceOperation_c.getOneC_IOOnR4019Precedes(this);


InterfaceOperation_c v_prev_attr = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(this);


InterfaceOperation_c v_next_next_attr = InterfaceOperation_c.getOneC_IOOnR4019Precedes(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

if (v_next_next_attr != null) {
v_next_next_attr.unrelateAcrossR4019FromSucceeds(v_next_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if ( (  (v_prev_attr != null)) )
{

this.unrelateAcrossR4019FromSucceeds(v_prev_attr);



}

if (v_next_attr != null) {
v_next_attr.unrelateAcrossR4019FromSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if ( (  (v_prev_attr != null)) )
{

if (v_next_attr != null) {
  v_next_attr.relateAcrossR4019ToSucceeds(v_prev_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( (  (v_next_next_attr == null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}

  this.relateAcrossR4019ToSucceeds(v_next_attr);


if ( (  (v_next_next_attr != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;


if (v_next_next_attr != null) {
  v_next_next_attr.relateAcrossR4019ToSucceeds(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End moveDown
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( (p_Value.equals("move up")) )
{

InterfaceOperation_c v_prev_attr = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(this);


return   (v_prev_attr != null);



}

else if ( (p_Value.equals("move down")) )
{

InterfaceOperation_c v_next_attr = InterfaceOperation_c.getOneC_IOOnR4019Precedes(this);


return   (v_next_attr != null);



}

else if ( (p_Value.equals("setToProvider")) )
{

return getDirection() == Ifdirectiontype_c.ServerClient;



}

else if ( (p_Value.equals("setFromProvider")) )
{

return getDirection() == Ifdirectiontype_c.ClientServer;



}


}

return false;



   } // End actionFilter
  public  boolean      Canrefertodatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Canrefertodatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR4008(this);


if ( (  (v_dt != null)) )
{

PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( (v_isInGenericPackage) )
{

return v_packageableElem.Canrefertodatatype(			    
v_dt.getDt_id()			    
,v_dt.getName());



}

else
{

DataTypePackage_c v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( ((  (v_dtPkg != null)) && (v_dtPkg.Isdomainlevel())) )
{

return false;



}

return true;



}


}

return false;



   } // End canReferToDataType
  public  boolean      Isreferringtodefaultdatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Isreferringtodefaultdatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR4008(this);


String       v_elementType = Util_c.Getsimpleclassname(			    
Converttoinstance()) ;


if ( (v_dt.getName().equals(DataType_c.Getdefaultdatatypename(modelRoot			    
,v_elementType))) )
{

return true;



}

return false;



   } // End isReferringToDefaultDataType
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Converttoinstance") ; 
// just return this instance as an Object
return this;

   } // End convertToInstance
  public  boolean      Canusedatatype(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Canusedatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( v_isInGenericPackage )
{

  class SearchResultSet_test55871_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		SearchResultSet_c selected = (SearchResultSet_c)candidate;
		return selected.getName().equals("") && selected.getType() == Elementtypeconstants_c.DATATYPE ;
	}
  }
SearchResultSet_c v_resultSet = SearchResultSet_c.getOnePE_SRSOnR8005(v_package, new SearchResultSet_test55871_c());


  class DataType_test55872_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getDt_id().equals(p_Id) ;
	}
  }
DataType_c v_dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8002(ElementVisibility_c.getManyPE_VISsOnR8006(v_resultSet)), new DataType_test55872_c());


if (   (v_component != null) )
{

  class ComponentResultSet_test55873_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ComponentResultSet_c selected = (ComponentResultSet_c)candidate;
		return selected.getName().equals("") && selected.getType() == Elementtypeconstants_c.DATATYPE ;
	}
  }
ComponentResultSet_c v_compResultSet = ComponentResultSet_c.getOnePE_CRSOnR8007(v_component, new ComponentResultSet_test55873_c());


  class DataType_test55874_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getDt_id().equals(p_Id) ;
	}
  }
v_dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8004(ComponentVisibility_c.getManyPE_CVSsOnR8008(v_compResultSet)), new DataType_test55874_c());



}

if ( (  (v_dt != null)) )
{

if ( (Isallowedreturntype(			    
v_dt.getName())) )
{

return true;



}


}

return false;



}

else
{

Interface_c v_interface = Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this));


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4304(InterfacePackage_c.getOneIP_IPOnR4303(v_interface));


if ( (  (v_system == null)) )
{

v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this)))));



}

  class DataType_test55875_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getDt_id().equals(p_Id)) ;
	}
  }
DataType_c v_dt = DataType_c.getOneS_DTOnR4401(SystemDatatypeInPackage_c.getManySLD_SDINPsOnR4402(v_system), new DataType_test55875_c());


if (   (v_dt == null) &&   (v_system != null) && v_system.getUseglobals() )
{

  class PackageableElement_test55876_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		PackageableElement_c selected = (PackageableElement_c)candidate;
		return selected.getElement_id().equals(p_Id) ;
	}
  }
PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR9100(GlobalElementInSystem_c.getManyG_EISsOnR9100(v_system), new PackageableElement_test55876_c());


v_dt = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_dt != null)) )
{

if ( (Isallowedreturntype(			    
v_dt.getName())) )
{

return true;



}


}


}

return false;



   } // End canUseDataType
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getId();



   } // End get_ooa_id
  public  void Pastepropertyparameter(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Pastepropertyparameter") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4004(this);


if (v_ep != null) {
v_ep.Pastepropertyparameter(			    
p_Id ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End pastePropertyParameter
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
Interface_c v_iface = Interface_c.getOneC_IOnR4003(ExecutableProperty_c.getOneC_EPOnR4004(this));


InterfaceOperation_c [] v_operations = InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(v_iface));


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_iface)));


if ( (  (v_system == null)) )
{

Component_c v_component = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(v_iface));


java.util.UUID         v_pkgId = v_component.Getpackageid() ;


Package_c v_package = (Package_c) modelRoot.getInstanceList(Package_c.class).getGlobal(null, v_pkgId);


v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);



}

java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

InterfaceOperation_c  v_operation = null;
for ( int i55238 = 0; i55238 < v_operations.length; i55238++)
{
  v_operation = v_operations[i55238] ;

if ( (v_operation != this && v_operation.Getsignature().equals(Getsignature())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another operation under the same interface with a " + "matching signature." + Gd_c.Newline() + Gd_c.Newline() + "Signature: " + Getsignature()			    
,Converttoinstance()			    
,getId()			    
,getName()			    
,v_iface.Getpath(			    
true			    
,getName())			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity
  public  String       Getsignature()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface Operation", " Operation entered: InterfaceOperation::Getsignature") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_signature = getName() ;


int          v_count = 0 ;


PropertyParameter_c [] v_parameters = PropertyParameter_c.getManyC_PPsOnR4006(ExecutableProperty_c.getManyC_EPsOnR4004(this));


int          v_paramLength =   (v_parameters.length) ;


if ( (v_paramLength > 0) )
{

v_signature = v_signature + "(" ;



}

PropertyParameter_c  v_parameter = null;
for ( int i55239 = 0; i55239 < v_parameters.length; i55239++)
{
  v_parameter = v_parameters[i55239] ;

DataType_c v_type = DataType_c.getOneS_DTOnR4007(v_parameter);


if ( (v_count > 0 && v_count != v_paramLength - 1) )
{

v_signature = v_signature + ", " ;



}

v_signature = v_signature + v_type.getName() ;


v_count = v_count + 1 ;



}

if ( (v_paramLength > 0) )
{

v_signature = v_signature + ")" ;



}

return v_signature;



   } // End getSignature

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return InterfaceOperationActionFilter.getSingleton();
    }
	  return null;
  }
} // end Interface Operation
