package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SupplementalDataItems_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SUPPLEMENTAL_DATA_ITEMS extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SupplementalDataItems_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SupplementalDataItems_c(ModelRoot modelRoot,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_smspd_id,
			java.util.UUID p_m_sm_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);

		Object[] key = {m_smedi_id, m_smspd_id, m_sm_id};
		addInstanceToMap(key);
	}
	static public SupplementalDataItems_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_smspd_id,
			java.util.UUID p_m_sm_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);
		SupplementalDataItems_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smedi_id, p_m_smspd_id, p_m_sm_id};
			new_inst = (SupplementalDataItems_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SupplementalDataItems_c(modelRoot, p_m_smedi_id,
					p_m_smspd_id, p_m_sm_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SupplementalDataItems_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_smspd_id,
			java.util.UUID p_m_sm_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);
		SupplementalDataItems_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smedi_id, p_m_smspd_id, p_m_sm_id};
			source = (SupplementalDataItems_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);

				return source;
			}
		}
		// there is no instance matching the id
		SupplementalDataItems_c new_inst = new SupplementalDataItems_c(
				modelRoot, p_m_smedi_id, p_m_smspd_id, p_m_sm_id);
		return new_inst;
	}
	public SupplementalDataItems_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smedi_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		Object[] key = {m_smedi_id, m_smspd_id, m_sm_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smedi_id, m_smspd_id, m_sm_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smedi_id != p_newKey) {

			m_smedi_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SupplementalDataItems_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SupplementalDataItems_c)) {
			return false;
		}

		SupplementalDataItems_c me = (SupplementalDataItems_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmedi_id()) || IdAssigner.NULL_UUID
						.equals(((SupplementalDataItems_c) elem).getSmedi_id())) && this != elem)) {
			return false;
		}
		if (!getSmedi_id().equals(
				((SupplementalDataItems_c) elem).getSmedi_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmspd_id()) || IdAssigner.NULL_UUID
						.equals(((SupplementalDataItems_c) elem).getSmspd_id())) && this != elem)) {
			return false;
		}
		if (!getSmspd_id().equals(
				((SupplementalDataItems_c) elem).getSmspd_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((SupplementalDataItems_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((SupplementalDataItems_c) elem).getSm_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SupplementalDataItems_c)) {
			return false;
		}

		SupplementalDataItems_c me = (SupplementalDataItems_c) elem;
		if (!getSmedi_idCachedValue().equals(
				((SupplementalDataItems_c) elem).getSmedi_idCachedValue()))
			return false;
		if (!getSmspd_idCachedValue().equals(
				((SupplementalDataItems_c) elem).getSmspd_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((SupplementalDataItems_c) elem).getSm_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smedi_id;
	private java.util.UUID m_smspd_id;
	private java.util.UUID m_sm_id;

	// declare association references from this class

	// referring navigation

	StateMachineEventDataItem_c IsMadeUpOfStateMachineEventDataItem;
	public void relateAcrossR522To(StateMachineEventDataItem_c target) {
		relateAcrossR522To(target, true);
	}
	public void relateAcrossR522To(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsMadeUpOfStateMachineEventDataItem)
			return; // already related

		if (IsMadeUpOfStateMachineEventDataItem != target) {

			Object oldKey = getInstanceKey();

			if (IsMadeUpOfStateMachineEventDataItem != null) {

				IsMadeUpOfStateMachineEventDataItem
						.clearBackPointerR522To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SupplementalDataItems_c.relateAcrossR522To(StateMachineEventDataItem_c target)",
									"Relate performed across R522 from Supplemental Data Items to State Machine Event Data Item without unrelate of prior instance.");
				}
			}

			IsMadeUpOfStateMachineEventDataItem = target;
			m_smedi_id = target.getSmedi_id();
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR522To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "522", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR522From(StateMachineEventDataItem_c target) {
		unrelateAcrossR522From(target, true);
	}
	public void unrelateAcrossR522From(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsMadeUpOfStateMachineEventDataItem == null)
			return; // already unrelated

		if (target != IsMadeUpOfStateMachineEventDataItem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R522",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR522To(this);
		}

		if (IsMadeUpOfStateMachineEventDataItem != null) {

			m_smedi_id = IsMadeUpOfStateMachineEventDataItem.getSmedi_id();
			m_sm_id = IsMadeUpOfStateMachineEventDataItem.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsMadeUpOfStateMachineEventDataItem
						.getSm_idCachedValue();
			}
			IsMadeUpOfStateMachineEventDataItem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "522", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	EventSupplementalData_c MakesUpEventSupplementalData;
	public void relateAcrossR522To(EventSupplementalData_c target) {
		relateAcrossR522To(target, true);
	}
	public void relateAcrossR522To(EventSupplementalData_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MakesUpEventSupplementalData)
			return; // already related

		if (MakesUpEventSupplementalData != target) {

			Object oldKey = getInstanceKey();

			if (MakesUpEventSupplementalData != null) {

				MakesUpEventSupplementalData.clearBackPointerR522To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SupplementalDataItems_c.relateAcrossR522To(EventSupplementalData_c target)",
									"Relate performed across R522 from Supplemental Data Items to Event Supplemental Data without unrelate of prior instance.");
				}
			}

			MakesUpEventSupplementalData = target;
			m_smspd_id = target.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR522To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "522", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR522From(EventSupplementalData_c target) {
		unrelateAcrossR522From(target, true);
	}
	public void unrelateAcrossR522From(EventSupplementalData_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MakesUpEventSupplementalData == null)
			return; // already unrelated

		if (target != MakesUpEventSupplementalData) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R522",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR522To(this);
		}

		if (MakesUpEventSupplementalData != null) {

			m_smspd_id = MakesUpEventSupplementalData.getSmspd_id();
			m_sm_id = MakesUpEventSupplementalData.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = MakesUpEventSupplementalData.getSm_idCachedValue();
			}
			MakesUpEventSupplementalData = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "522", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			StateMachineEventDataItem_c[] targets) {
		return getOneSM_SDIOnR522(targets, null);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		SupplementalDataItems_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SDIOnR522(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			StateMachineEventDataItem_c target) {
		return getOneSM_SDIOnR522(target, null);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getOneSM_SDIOnR522(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SDIOnR522(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			ModelRoot modelRoot, StateMachineEventDataItem_c target,
			ClassQueryInterface_c test) {
		return getOneSM_SDIOnR522(modelRoot, target, test, true);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			ModelRoot modelRoot, StateMachineEventDataItem_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_SDIOnR522(modelRoot, target, test);
	}
	private static SupplementalDataItems_c find_getOneSM_SDIOnR522(
			ModelRoot modelRoot, StateMachineEventDataItem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MakesUpSupplementalDataItemsMakesUp_R522) {
				for (int i = 0; i < target.backPointer_MakesUpSupplementalDataItemsMakesUp_R522
						.size(); ++i) {
					SupplementalDataItems_c source = (SupplementalDataItems_c) target.backPointer_MakesUpSupplementalDataItemsMakesUp_R522
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c[] targets) {
		return getManySM_SDIsOnR522(targets, null);
	}
	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c[] targets, boolean loadComponent) {
		return getManySM_SDIsOnR522(targets, null, loadComponent);
	}
	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SDIsOnR522(targets, test, true);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SupplementalDataItems_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MakesUpSupplementalDataItemsMakesUp_R522) {
				for (int j = 0; j < targets[i].backPointer_MakesUpSupplementalDataItemsMakesUp_R522
						.size(); ++j) {
					SupplementalDataItems_c source = (SupplementalDataItems_c) targets[i].backPointer_MakesUpSupplementalDataItemsMakesUp_R522
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SupplementalDataItems_c[] ret_set = new SupplementalDataItems_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SupplementalDataItems_c[0];
		}
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c target) {
		return getManySM_SDIsOnR522(target, null);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getManySM_SDIsOnR522(target, null, loadComponent);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		return getManySM_SDIsOnR522(target, test, true);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SupplementalDataItems_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MakesUpSupplementalDataItemsMakesUp_R522) {
			for (int i = 0; i < target.backPointer_MakesUpSupplementalDataItemsMakesUp_R522
					.size(); ++i) {
				SupplementalDataItems_c source = (SupplementalDataItems_c) target.backPointer_MakesUpSupplementalDataItemsMakesUp_R522
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SupplementalDataItems_c[] ret_set = new SupplementalDataItems_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SupplementalDataItems_c[0];
		}
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			EventSupplementalData_c[] targets) {
		return getOneSM_SDIOnR522(targets, null);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			EventSupplementalData_c[] targets, ClassQueryInterface_c test) {
		SupplementalDataItems_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SDIOnR522(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			EventSupplementalData_c target) {
		return getOneSM_SDIOnR522(target, null);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			EventSupplementalData_c target, boolean loadComponent) {
		return getOneSM_SDIOnR522(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			EventSupplementalData_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SDIOnR522(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			ModelRoot modelRoot, EventSupplementalData_c target,
			ClassQueryInterface_c test) {
		return getOneSM_SDIOnR522(modelRoot, target, test, true);
	}

	public static SupplementalDataItems_c getOneSM_SDIOnR522(
			ModelRoot modelRoot, EventSupplementalData_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_SDIOnR522(modelRoot, target, test);
	}
	private static SupplementalDataItems_c find_getOneSM_SDIOnR522(
			ModelRoot modelRoot, EventSupplementalData_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522) {
				for (int i = 0; i < target.backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522
						.size(); ++i) {
					SupplementalDataItems_c source = (SupplementalDataItems_c) target.backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c[] targets) {
		return getManySM_SDIsOnR522(targets, null);
	}
	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c[] targets, boolean loadComponent) {
		return getManySM_SDIsOnR522(targets, null, loadComponent);
	}
	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SDIsOnR522(targets, test, true);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SupplementalDataItems_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522) {
				for (int j = 0; j < targets[i].backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522
						.size(); ++j) {
					SupplementalDataItems_c source = (SupplementalDataItems_c) targets[i].backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SupplementalDataItems_c[] ret_set = new SupplementalDataItems_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SupplementalDataItems_c[0];
		}
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c target) {
		return getManySM_SDIsOnR522(target, null);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c target, boolean loadComponent) {
		return getManySM_SDIsOnR522(target, null, loadComponent);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c target, ClassQueryInterface_c test) {
		return getManySM_SDIsOnR522(target, test, true);
	}

	public static SupplementalDataItems_c[] getManySM_SDIsOnR522(
			EventSupplementalData_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SupplementalDataItems_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522) {
			for (int i = 0; i < target.backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522
					.size(); ++i) {
				SupplementalDataItems_c source = (SupplementalDataItems_c) target.backPointer_IsMadeUpOfSupplementalDataItemsIsMadeUpOf_R522
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SupplementalDataItems_c[] ret_set = new SupplementalDataItems_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SupplementalDataItems_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R522
		EventSupplementalData_c relInst38873 = (EventSupplementalData_c) baseRoot
				.getInstanceList(EventSupplementalData_c.class).get(
						new Object[]{m_smspd_id, m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38873 == null) {
			relInst38873 = (EventSupplementalData_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(EventSupplementalData_c.class)
					.get(new Object[]{m_smspd_id, m_sm_id});
		}
		if (relInst38873 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38873 = (EventSupplementalData_c) roots[i]
						.getInstanceList(EventSupplementalData_c.class).get(
								new Object[]{m_smspd_id, m_sm_id});
				if (relInst38873 != null)
					break;
			}
		}
		//synchronized
		if (relInst38873 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38873) && !isProxy())) {
				relInst38873.relateAcrossR522To(this, notifyChanges);
			}
		}

		StateMachineEventDataItem_c relInst38874 = (StateMachineEventDataItem_c) baseRoot
				.getInstanceList(StateMachineEventDataItem_c.class).get(
						new Object[]{m_sm_id, m_smedi_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38874 == null) {
			relInst38874 = (StateMachineEventDataItem_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(StateMachineEventDataItem_c.class)
					.get(new Object[]{m_sm_id, m_smedi_id});
		}
		if (relInst38874 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38874 = (StateMachineEventDataItem_c) roots[i]
						.getInstanceList(StateMachineEventDataItem_c.class)
						.get(new Object[]{m_sm_id, m_smedi_id});
				if (relInst38874 != null)
					break;
			}
		}
		//synchronized
		if (relInst38874 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38874) && !isProxy())) {
				relInst38874.relateAcrossR522To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R522
		// SM_SUPDT
		inst = MakesUpEventSupplementalData;
		unrelateAcrossR522From(MakesUpEventSupplementalData, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// SM_EVTDI
		inst = IsMadeUpOfStateMachineEventDataItem;
		unrelateAcrossR522From(IsMadeUpOfStateMachineEventDataItem,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SupplementalDataItems_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SupplementalDataItems_c inst = (SupplementalDataItems_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SupplementalDataItems_c SupplementalDataItemsInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SupplementalDataItems_c result = findSupplementalDataItemsInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SupplementalDataItems_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSupplementalDataItemsInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SupplementalDataItems_c findSupplementalDataItemsInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SupplementalDataItems_c x = (SupplementalDataItems_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SupplementalDataItems_c SupplementalDataItemsInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SupplementalDataItemsInstance(modelRoot, test, true);
	}

	public static SupplementalDataItems_c SupplementalDataItemsInstance(
			ModelRoot modelRoot) {
		return SupplementalDataItemsInstance(modelRoot, null, true);
	}

	public static SupplementalDataItems_c[] SupplementalDataItemsInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SupplementalDataItems_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SupplementalDataItems_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SupplementalDataItems_c x = (SupplementalDataItems_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SupplementalDataItems_c[] ret_set = new SupplementalDataItems_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SupplementalDataItems_c[0];
			}
		}
	}
	public static SupplementalDataItems_c[] SupplementalDataItemsInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SupplementalDataItemsInstances(modelRoot, test, true);
	}
	public static SupplementalDataItems_c[] SupplementalDataItemsInstances(
			ModelRoot modelRoot) {
		return SupplementalDataItemsInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Supplemental Data Items.dispose call: ";
		EventSupplementalData_c testR522Inst = EventSupplementalData_c
				.getOneSM_SUPDTOnR522(this, false);

		if (testR522Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "522 ";
		}

		StateMachineEventDataItem_c testR522InstOth = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR522(this, false);

		if (testR522InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "522 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Supplemental Data Items",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smedi_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSmedi_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmedi_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmspd_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmspd_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmedi_idLongBased() {
		if (IsMadeUpOfStateMachineEventDataItem != null) {
			return IsMadeUpOfStateMachineEventDataItem.getSmedi_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmedi_id() {
		if (IsMadeUpOfStateMachineEventDataItem != null) {
			return IsMadeUpOfStateMachineEventDataItem.getSmedi_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmedi_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smedi_id))
			return m_smedi_id;
		else
			return getSmedi_id();
	}

	public void setSmedi_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smedi_id)) {
				return;
			}
		} else if (m_smedi_id != null) {
			if (m_smedi_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smedi_id", m_smedi_id, newValue, true);
		m_smedi_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (MakesUpEventSupplementalData != null) {
			return MakesUpEventSupplementalData.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (MakesUpEventSupplementalData != null) {
			return MakesUpEventSupplementalData.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsMadeUpOfStateMachineEventDataItem != null) {
			return IsMadeUpOfStateMachineEventDataItem.getSm_idLongBased();
		}
		if (MakesUpEventSupplementalData != null) {
			return MakesUpEventSupplementalData.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsMadeUpOfStateMachineEventDataItem != null) {
			return IsMadeUpOfStateMachineEventDataItem.getSm_id();
		}
		if (MakesUpEventSupplementalData != null) {
			return MakesUpEventSupplementalData.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Supplemental Data Items", //$NON-NLS-1$
						" Operation entered: Supplemental Data Items::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SupplementalDataItems_c[] objs = SupplementalDataItems_c
				.SupplementalDataItemsInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Supplemental Data Items", //$NON-NLS-1$
						" Operation entered: Supplemental Data Items::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SupplementalDataItems_c_test38876_c
				implements
					ClassQueryInterface_c {
			SupplementalDataItems_c_test38876_c(java.util.UUID p38877,
					java.util.UUID p38878, java.util.UUID p38879) {
				m_p38877 = p38877;
				m_p38878 = p38878;
				m_p38879 = p38879;
			}
			private java.util.UUID m_p38877;
			private java.util.UUID m_p38878;
			private java.util.UUID m_p38879;
			public boolean evaluate(Object candidate) {
				SupplementalDataItems_c selected = (SupplementalDataItems_c) candidate;
				boolean retval = false;
				retval = (selected.getSmedi_id().equals(m_p38877))
						& (selected.getSmspd_id().equals(m_p38878))
						& (selected.getSm_id().equals(m_p38879));
				return retval;
			}
		}

		SupplementalDataItems_c[] objs38875 = SupplementalDataItems_c
				.SupplementalDataItemsInstances(modelRoot,
						new SupplementalDataItems_c_test38876_c(getSmedi_id(),
								getSmspd_id(), getSm_id()));

		if (((objs38875.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Supplemental Data Items", //$NON-NLS-1$
								"Consistency: Object: Supplemental Data Items: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38875.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Supplemental Data Items: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38875.length), e);
			}
			retval = false;

		}

		if (((objs38875.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Supplemental Data Items", //$NON-NLS-1$
								"Consistency: Object: Supplemental Data Items: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38875.length)
										+ " SMedi_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable" + " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Supplemental Data Items: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38875.length)
										+ " SMedi_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable" + " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supplemental Data Items is a link class in association: rel.Numb = 522
		// Other side
		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Supplemental Data Items",
				" Operation entered: SupplementalDataItems::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		EventSupplementalData_c v_supdt = EventSupplementalData_c
				.getOneSM_SUPDTOnR522(this);

		StateMachineEventDataItem_c v_evtdi = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR522(this);

		unrelateAcrossR522From(v_supdt);
		unrelateAcrossR522From(v_evtdi);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Supplemental Data Items",
				" Operation entered: SupplementalDataItems::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEventDataItem_c v_edi = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR522(this);

		return v_edi.getName();

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Supplemental Data Items
