package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.AssignToMember_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ASSIGN_TO_MEMBER extends genericEvent_c {
	public abstract int getEvtcode();
}

public class AssignToMember_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public AssignToMember_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_r_value_id,
			java.util.UUID p_m_l_value_id, int p_m_attributelinenumber,
			int p_m_attributecolumn) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_r_value_id = IdAssigner.preprocessUUID(p_m_r_value_id);
		m_attributelinenumber = p_m_attributelinenumber;
		m_attributecolumn = p_m_attributecolumn;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_l_value_id = IdAssigner.preprocessUUID(p_m_l_value_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public AssignToMember_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_r_value_id,
			java.util.UUID p_m_l_value_id, int p_m_attributelinenumber,
			int p_m_attributecolumn, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);
		AssignToMember_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (AssignToMember_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_r_value_id = IdAssigner
						.preprocessUUID(p_m_r_value_id);
				new_inst.m_attributelinenumber = p_m_attributelinenumber;
				new_inst.m_attributecolumn = p_m_attributecolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_l_value_id = IdAssigner
						.preprocessUUID(p_m_l_value_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new AssignToMember_c(modelRoot, p_m_statement_id,
					p_m_r_value_id, p_m_l_value_id, p_m_attributelinenumber,
					p_m_attributecolumn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public AssignToMember_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_r_value_id,
			java.util.UUID p_m_l_value_id, int p_m_attributelinenumber,
			int p_m_attributecolumn) {
		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);
		AssignToMember_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (AssignToMember_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_r_value_id = IdAssigner.preprocessUUID(p_m_r_value_id);
				source.m_attributelinenumber = p_m_attributelinenumber;
				source.m_attributecolumn = p_m_attributecolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_l_value_id = IdAssigner.preprocessUUID(p_m_l_value_id);

				return source;
			}
		}
		// there is no instance matching the id
		AssignToMember_c new_inst = new AssignToMember_c(modelRoot,
				p_m_statement_id, p_m_r_value_id, p_m_l_value_id,
				p_m_attributelinenumber, p_m_attributecolumn);
		return new_inst;
	}
	public AssignToMember_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_r_value_id = IdAssigner.NULL_UUID;
		m_l_value_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof AssignToMember_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof AssignToMember_c)) {
			return false;
		}

		AssignToMember_c me = (AssignToMember_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((AssignToMember_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((AssignToMember_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof AssignToMember_c)) {
			return false;
		}

		AssignToMember_c me = (AssignToMember_c) elem;
		if (!getStatement_idCachedValue().equals(
				((AssignToMember_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_r_value_id;
	private int m_attributelinenumber;
	private int m_attributecolumn;
	private java.util.UUID m_l_value_id;

	// declare association references from this class

	// referring navigation

	Value_c ReadsValue;
	public void relateAcrossR609To(Value_c target) {
		relateAcrossR609To(target, true);
	}
	public void relateAcrossR609To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ReadsValue)
			return; // already related

		if (ReadsValue != target) {

			Object oldKey = getInstanceKey();

			if (ReadsValue != null) {

				ReadsValue.clearBackPointerR609To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AssignToMember_c.relateAcrossR609To(Value_c target)",
									"Relate performed across R609 from Assign to Member to Value without unrelate of prior instance.");
				}
			}

			ReadsValue = target;
			m_r_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR609To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR609From(Value_c target) {
		unrelateAcrossR609From(target, true);
	}
	public void unrelateAcrossR609From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ReadsValue == null)
			return; // already unrelated

		if (target != ReadsValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R609",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR609To(this);
		}

		if (ReadsValue != null) {

			m_r_value_id = ReadsValue.getValue_id();
			ReadsValue = null;
			target.removeRef();
		}
	}

	public static AssignToMember_c getOneACT_AIOnR609(Value_c[] targets) {
		return getOneACT_AIOnR609(targets, null);
	}

	public static AssignToMember_c getOneACT_AIOnR609(Value_c[] targets,
			ClassQueryInterface_c test) {
		AssignToMember_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_AIOnR609(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AssignToMember_c getOneACT_AIOnR609(Value_c target) {
		return getOneACT_AIOnR609(target, null);
	}

	public static AssignToMember_c getOneACT_AIOnR609(Value_c target,
			boolean loadComponent) {
		return getOneACT_AIOnR609(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AssignToMember_c getOneACT_AIOnR609(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_AIOnR609(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AssignToMember_c getOneACT_AIOnR609(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneACT_AIOnR609(modelRoot, target, test, true);
	}

	public static AssignToMember_c getOneACT_AIOnR609(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_AIOnR609(modelRoot, target, test);
	}
	private static AssignToMember_c find_getOneACT_AIOnR609(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			AssignToMember_c source = (AssignToMember_c) target.backPointer_AssignToMember_R609;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static AssignToMember_c[] getManyACT_AIsOnR609(Value_c[] targets) {
		return getManyACT_AIsOnR609(targets, null);
	}
	public static AssignToMember_c[] getManyACT_AIsOnR609(Value_c[] targets,
			boolean loadComponent) {
		return getManyACT_AIsOnR609(targets, null, loadComponent);
	}
	public static AssignToMember_c[] getManyACT_AIsOnR609(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_AIsOnR609(targets, test, true);
	}

	public static AssignToMember_c[] getManyACT_AIsOnR609(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AssignToMember_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			AssignToMember_c source = (AssignToMember_c) targets[i].backPointer_AssignToMember_R609;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			AssignToMember_c[] ret_set = new AssignToMember_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AssignToMember_c[0];
		}
	}

	public static AssignToMember_c[] getManyACT_AIsOnR609(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_AIsOnR609(targetArray);
		} else {
			AssignToMember_c[] result = new AssignToMember_c[0];
			return result;
		}
	}

	public static AssignToMember_c[] getManyACT_AIsOnR609(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_AIsOnR609(targetArray, loadComponent);
		} else {
			AssignToMember_c[] result = new AssignToMember_c[0];
			return result;
		}
	}

	// referring navigation

	Value_c WritesValue;
	public void relateAcrossR689To(Value_c target) {
		relateAcrossR689To(target, true);
	}
	public void relateAcrossR689To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == WritesValue)
			return; // already related

		if (WritesValue != target) {

			Object oldKey = getInstanceKey();

			if (WritesValue != null) {

				WritesValue.clearBackPointerR689To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AssignToMember_c.relateAcrossR689To(Value_c target)",
									"Relate performed across R689 from Assign to Member to Value without unrelate of prior instance.");
				}
			}

			WritesValue = target;
			m_l_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR689To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR689From(Value_c target) {
		unrelateAcrossR689From(target, true);
	}
	public void unrelateAcrossR689From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (WritesValue == null)
			return; // already unrelated

		if (target != WritesValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R689",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR689To(this);
		}

		if (WritesValue != null) {

			m_l_value_id = WritesValue.getValue_id();
			WritesValue = null;
			target.removeRef();
		}
	}

	public static AssignToMember_c getOneACT_AIOnR689(Value_c[] targets) {
		return getOneACT_AIOnR689(targets, null);
	}

	public static AssignToMember_c getOneACT_AIOnR689(Value_c[] targets,
			ClassQueryInterface_c test) {
		AssignToMember_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_AIOnR689(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AssignToMember_c getOneACT_AIOnR689(Value_c target) {
		return getOneACT_AIOnR689(target, null);
	}

	public static AssignToMember_c getOneACT_AIOnR689(Value_c target,
			boolean loadComponent) {
		return getOneACT_AIOnR689(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AssignToMember_c getOneACT_AIOnR689(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_AIOnR689(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AssignToMember_c getOneACT_AIOnR689(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneACT_AIOnR689(modelRoot, target, test, true);
	}

	public static AssignToMember_c getOneACT_AIOnR689(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_AIOnR689(modelRoot, target, test);
	}
	private static AssignToMember_c find_getOneACT_AIOnR689(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			AssignToMember_c source = (AssignToMember_c) target.backPointer_AssignToMember_R689;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static AssignToMember_c[] getManyACT_AIsOnR689(Value_c[] targets) {
		return getManyACT_AIsOnR689(targets, null);
	}
	public static AssignToMember_c[] getManyACT_AIsOnR689(Value_c[] targets,
			boolean loadComponent) {
		return getManyACT_AIsOnR689(targets, null, loadComponent);
	}
	public static AssignToMember_c[] getManyACT_AIsOnR689(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_AIsOnR689(targets, test, true);
	}

	public static AssignToMember_c[] getManyACT_AIsOnR689(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AssignToMember_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			AssignToMember_c source = (AssignToMember_c) targets[i].backPointer_AssignToMember_R689;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			AssignToMember_c[] ret_set = new AssignToMember_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AssignToMember_c[0];
		}
	}

	public static AssignToMember_c[] getManyACT_AIsOnR689(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_AIsOnR689(targetArray);
		} else {
			AssignToMember_c[] result = new AssignToMember_c[0];
			return result;
		}
	}

	public static AssignToMember_c[] getManyACT_AIsOnR689(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_AIsOnR689(targetArray, loadComponent);
		} else {
			AssignToMember_c[] result = new AssignToMember_c[0];
			return result;
		}
	}

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AssignToMember_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from Assign to Member to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static AssignToMember_c getOneACT_AIOnR603(Statement_c[] targets) {
		return getOneACT_AIOnR603(targets, null);
	}

	public static AssignToMember_c getOneACT_AIOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		AssignToMember_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_AIOnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AssignToMember_c getOneACT_AIOnR603(Statement_c target) {
		return getOneACT_AIOnR603(target, null);
	}

	public static AssignToMember_c getOneACT_AIOnR603(Statement_c target,
			boolean loadComponent) {
		return getOneACT_AIOnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AssignToMember_c getOneACT_AIOnR603(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_AIOnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AssignToMember_c getOneACT_AIOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_AIOnR603(modelRoot, target, test, true);
	}

	public static AssignToMember_c getOneACT_AIOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_AIOnR603(modelRoot, target, test);
	}
	private static AssignToMember_c find_getOneACT_AIOnR603(
			ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			AssignToMember_c source = (AssignToMember_c) target.backPointer_IsSubtypeAssignToMemberIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static AssignToMember_c[] getManyACT_AIsOnR603(Statement_c[] targets) {
		return getManyACT_AIsOnR603(targets, null);
	}
	public static AssignToMember_c[] getManyACT_AIsOnR603(
			Statement_c[] targets, boolean loadComponent) {
		return getManyACT_AIsOnR603(targets, null, loadComponent);
	}
	public static AssignToMember_c[] getManyACT_AIsOnR603(
			Statement_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_AIsOnR603(targets, test, true);
	}

	public static AssignToMember_c[] getManyACT_AIsOnR603(
			Statement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AssignToMember_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			AssignToMember_c source = (AssignToMember_c) targets[i].backPointer_IsSubtypeAssignToMemberIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			AssignToMember_c[] ret_set = new AssignToMember_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AssignToMember_c[0];
		}
	}

	public static AssignToMember_c[] getManyACT_AIsOnR603(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_AIsOnR603(targetArray);
		} else {
			AssignToMember_c[] result = new AssignToMember_c[0];
			return result;
		}
	}

	public static AssignToMember_c[] getManyACT_AIsOnR603(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_AIsOnR603(targetArray, loadComponent);
		} else {
			AssignToMember_c[] result = new AssignToMember_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ReadsValue == null) {
			// R609
			Value_c relInst40728 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_r_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40728 == null) {
				relInst40728 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_r_value_id});
			}
			if (relInst40728 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40728 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_r_value_id});
					if (relInst40728 != null)
						break;
				}
			}
			//synchronized
			if (relInst40728 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40728) && !isProxy())) {
					relInst40728.relateAcrossR609To(this, notifyChanges);
				}
			}
		}

		if (WritesValue == null) {
			// R689
			Value_c relInst40729 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_l_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40729 == null) {
				relInst40729 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_l_value_id});
			}
			if (relInst40729 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40729 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_l_value_id});
					if (relInst40729 != null)
						break;
				}
			}
			//synchronized
			if (relInst40729 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40729) && !isProxy())) {
					relInst40729.relateAcrossR689To(this, notifyChanges);
				}
			}
		}

		// R603
		Statement_c relInst40730 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40730 == null) {
			relInst40730 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst40730 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40730 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst40730 != null)
					break;
			}
		}
		//synchronized
		if (relInst40730 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40730) && !isProxy())) {
				relInst40730.relateAcrossR603To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R609
		// V_VAL
		inst = ReadsValue;
		unrelateAcrossR609From(ReadsValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R689
		// V_VAL
		inst = WritesValue;
		unrelateAcrossR689From(WritesValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(AssignToMember_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final AssignToMember_c inst = (AssignToMember_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static AssignToMember_c AssignToMemberInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		AssignToMember_c result = findAssignToMemberInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static AssignToMember_c findAssignToMemberInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AssignToMember_c x = (AssignToMember_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static AssignToMember_c AssignToMemberInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return AssignToMemberInstance(modelRoot, test, true);
	}

	public static AssignToMember_c AssignToMemberInstance(ModelRoot modelRoot) {
		return AssignToMemberInstance(modelRoot, null, true);
	}

	public static AssignToMember_c[] AssignToMemberInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AssignToMember_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AssignToMember_c x = (AssignToMember_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				AssignToMember_c[] ret_set = new AssignToMember_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new AssignToMember_c[0];
			}
		}
	}
	public static AssignToMember_c[] AssignToMemberInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AssignToMemberInstances(modelRoot, test, true);
	}
	public static AssignToMember_c[] AssignToMemberInstances(ModelRoot modelRoot) {
		return AssignToMemberInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Assign to Member.dispose call: ";
		Value_c testR609Inst = Value_c.getOneV_VALOnR609(this, false);

		if (testR609Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "609 ";
		}
		Value_c testR689Inst = Value_c.getOneV_VALOnR689(this, false);

		if (testR689Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "689 ";
		}
		Statement_c testR603Inst11 = Statement_c.getOneACT_SMTOnR603(this,
				false);

		if (testR603Inst11 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Assign to Member",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("r_value_id")) {
			return true;
		}
		if (attributeName.equals("l_value_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getR_value_idLongBased() {
		if (ReadsValue != null) {
			return ReadsValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getR_value_id() {
		if (ReadsValue != null) {
			return ReadsValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getR_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_r_value_id))
			return m_r_value_id;
		else
			return getR_value_id();
	}

	public void setR_value_id(java.util.UUID newValue) {
		m_r_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getAttributelinenumber() {
		return m_attributelinenumber;
	}

	public void setAttributelinenumber(int newValue) {
		m_attributelinenumber = newValue;
	}
	public int getAttributecolumn() {
		return m_attributecolumn;
	}

	public void setAttributecolumn(int newValue) {
		m_attributecolumn = newValue;
	}
	public long getL_value_idLongBased() {
		if (WritesValue != null) {
			return WritesValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getL_value_id() {
		if (WritesValue != null) {
			return WritesValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getL_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_l_value_id))
			return m_l_value_id;
		else
			return getL_value_id();
	}

	public void setL_value_id(java.util.UUID newValue) {
		m_l_value_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Assign to Member", //$NON-NLS-1$
				" Operation entered: Assign to Member::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		AssignToMember_c[] objs = AssignToMember_c.AssignToMemberInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Assign to Member", //$NON-NLS-1$
				" Operation entered: Assign to Member::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class AssignToMember_c_test40732_c implements ClassQueryInterface_c {
			AssignToMember_c_test40732_c(java.util.UUID p40733) {
				m_p40733 = p40733;
			}
			private java.util.UUID m_p40733;
			public boolean evaluate(Object candidate) {
				AssignToMember_c selected = (AssignToMember_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p40733));
				return retval;
			}
		}

		AssignToMember_c[] objs40731 = AssignToMember_c
				.AssignToMemberInstances(modelRoot,
						new AssignToMember_c_test40732_c(getStatement_id()));

		if (((objs40731.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Assign to Member", //$NON-NLS-1$
								"Consistency: Object: Assign to Member: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40731.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Assign to Member: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40731.length), e);
			}
			retval = false;

		}

		if (((objs40731.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Assign to Member", //$NON-NLS-1$
								"Consistency: Object: Assign to Member: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40731.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Assign to Member: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40731.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Assign to Member is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test40737_c implements ClassQueryInterface_c {
			Statement_c_test40737_c(java.util.UUID p40738) {
				m_p40738 = p40738;
			}
			private java.util.UUID m_p40738;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p40738));
				return retval;
			}
		}

		Statement_c[] objs40736 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test40737_c(getStatement_id()));

		if (((objs40736.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Assign to Member", //$NON-NLS-1$
								"Consistency: Object: Assign to Member: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40736.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Assign to Member: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40736.length), e);
			}
			retval = false;

		}

		// Assign to Member is a referring class in association: rel.Numb = 609
		// The participating class is: Value
		class Value_c_test40740_c implements ClassQueryInterface_c {
			Value_c_test40740_c(java.util.UUID p40741) {
				m_p40741 = p40741;
			}
			private java.util.UUID m_p40741;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p40741));
				return retval;
			}
		}

		Value_c[] objs40739 = Value_c.ValueInstances(modelRoot,
				new Value_c_test40740_c(getR_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40739.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Assign to Member", //$NON-NLS-1$
								"Consistency: Object: Assign to Member: Association: 609: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40739.length)
										+ " r_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Assign to Member: Association: 609: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40739.length)
										+ " r_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Assign to Member is a referring class in association: rel.Numb = 689
		// The participating class is: Value
		class Value_c_test40743_c implements ClassQueryInterface_c {
			Value_c_test40743_c(java.util.UUID p40744) {
				m_p40744 = p40744;
			}
			private java.util.UUID m_p40744;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p40744));
				return retval;
			}
		}

		Value_c[] objs40742 = Value_c.ValueInstances(modelRoot,
				new Value_c_test40743_c(getL_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40742.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Assign to Member", //$NON-NLS-1$
								"Consistency: Object: Assign to Member: Association: 689: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40742.length)
										+ " l_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Assign to Member: Association: 689: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40742.length)
										+ " l_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Assign to Member",
				" Operation entered: AssignToMember::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Value_c v_value = Value_c.getOneV_VALOnR609(this);

		if (((v_value != null))) {

			this.unrelateAcrossR609From(v_value);

			if (v_value != null) {
				v_value.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		v_value = Value_c.getOneV_VALOnR689(this);

		if (((v_value != null))) {

			this.unrelateAcrossR689From(v_value);

			if (v_value != null) {
				v_value.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Assign to Member",
				" Operation entered: AssignToMember::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Assign to Member
