package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.CreateEventToExternalEntity_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CREATE_EVENT_TO_EXTERNAL_ENTITY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class CreateEventToExternalEntity_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public CreateEventToExternalEntity_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_ee_id,
			java.util.UUID p_m_eeevt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public CreateEventToExternalEntity_c createProxy(
			ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_ee_id, java.util.UUID p_m_eeevt_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);
		CreateEventToExternalEntity_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (CreateEventToExternalEntity_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new CreateEventToExternalEntity_c(modelRoot,
					p_m_statement_id, p_m_ee_id, p_m_eeevt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public CreateEventToExternalEntity_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_ee_id, java.util.UUID p_m_eeevt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);
		CreateEventToExternalEntity_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (CreateEventToExternalEntity_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

				return source;
			}
		}
		// there is no instance matching the id
		CreateEventToExternalEntity_c new_inst = new CreateEventToExternalEntity_c(
				modelRoot, p_m_statement_id, p_m_ee_id, p_m_eeevt_id);
		return new_inst;
	}
	public CreateEventToExternalEntity_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_eeevt_id = IdAssigner.NULL_UUID;
		m_ee_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof CreateEventToExternalEntity_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof CreateEventToExternalEntity_c)) {
			return false;
		}

		CreateEventToExternalEntity_c me = (CreateEventToExternalEntity_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((CreateEventToExternalEntity_c) elem)
								.getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((CreateEventToExternalEntity_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof CreateEventToExternalEntity_c)) {
			return false;
		}

		CreateEventToExternalEntity_c me = (CreateEventToExternalEntity_c) elem;
		if (!getStatement_idCachedValue().equals(
				((CreateEventToExternalEntity_c) elem)
						.getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_eeevt_id;
	private java.util.UUID m_ee_id;

	// declare association references from this class

	// referring navigation

	CreateEventStatement_c IsSupertypeCreateEventStatement;
	public void relateAcrossR702To(CreateEventStatement_c target) {
		relateAcrossR702To(target, true);
	}
	public void relateAcrossR702To(CreateEventStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeCreateEventStatement)
			return; // already related

		if (IsSupertypeCreateEventStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeCreateEventStatement != null) {

				IsSupertypeCreateEventStatement.clearBackPointerR702To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CreateEventToExternalEntity_c.relateAcrossR702To(CreateEventStatement_c target)",
									"Relate performed across R702 from Create Event to External Entity to Create Event Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeCreateEventStatement = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR702To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR702From(CreateEventStatement_c target) {
		unrelateAcrossR702From(target, true);
	}
	public void unrelateAcrossR702From(CreateEventStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeCreateEventStatement == null)
			return; // already unrelated

		if (target != IsSupertypeCreateEventStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R702",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR702To(this);
		}

		if (IsSupertypeCreateEventStatement != null) {

			m_statement_id = IsSupertypeCreateEventStatement.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = IsSupertypeCreateEventStatement
						.getStatement_idCachedValue();
			}
			IsSupertypeCreateEventStatement = null;
			target.removeRef();
		}
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			CreateEventStatement_c[] targets) {
		return getOneE_CEEOnR702(targets, null);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			CreateEventStatement_c[] targets, ClassQueryInterface_c test) {
		CreateEventToExternalEntity_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_CEEOnR702(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			CreateEventStatement_c target) {
		return getOneE_CEEOnR702(target, null);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			CreateEventStatement_c target, boolean loadComponent) {
		return getOneE_CEEOnR702(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			CreateEventStatement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_CEEOnR702(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			ModelRoot modelRoot, CreateEventStatement_c target,
			ClassQueryInterface_c test) {
		return getOneE_CEEOnR702(modelRoot, target, test, true);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR702(
			ModelRoot modelRoot, CreateEventStatement_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneE_CEEOnR702(modelRoot, target, test);
	}
	private static CreateEventToExternalEntity_c find_getOneE_CEEOnR702(
			ModelRoot modelRoot, CreateEventStatement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			CreateEventToExternalEntity_c source = (CreateEventToExternalEntity_c) target.backPointer_IsSubtypeCreateEventToExternalEntityIsSubtype_R702;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR702(
			CreateEventStatement_c[] targets) {
		return getManyE_CEEsOnR702(targets, null);
	}
	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR702(
			CreateEventStatement_c[] targets, boolean loadComponent) {
		return getManyE_CEEsOnR702(targets, null, loadComponent);
	}
	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR702(
			CreateEventStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyE_CEEsOnR702(targets, test, true);
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR702(
			CreateEventStatement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CreateEventToExternalEntity_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			CreateEventToExternalEntity_c source = (CreateEventToExternalEntity_c) targets[i].backPointer_IsSubtypeCreateEventToExternalEntityIsSubtype_R702;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			CreateEventToExternalEntity_c[] ret_set = new CreateEventToExternalEntity_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreateEventToExternalEntity_c[0];
		}
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR702(
			CreateEventStatement_c target) {
		if (target != null) {
			CreateEventStatement_c[] targetArray = new CreateEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_CEEsOnR702(targetArray);
		} else {
			CreateEventToExternalEntity_c[] result = new CreateEventToExternalEntity_c[0];
			return result;
		}
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR702(
			CreateEventStatement_c target, boolean loadComponent) {
		if (target != null) {
			CreateEventStatement_c[] targetArray = new CreateEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_CEEsOnR702(targetArray, loadComponent);
		} else {
			CreateEventToExternalEntity_c[] result = new CreateEventToExternalEntity_c[0];
			return result;
		}
	}

	// referring navigation

	ExternalEntityEvent_c CreatesExternalEntityEvent;
	public void relateAcrossR708To(ExternalEntityEvent_c target) {
		relateAcrossR708To(target, true);
	}
	public void relateAcrossR708To(ExternalEntityEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == CreatesExternalEntityEvent)
			return; // already related

		if (CreatesExternalEntityEvent != target) {

			Object oldKey = getInstanceKey();

			if (CreatesExternalEntityEvent != null) {

				CreatesExternalEntityEvent.clearBackPointerR708To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CreateEventToExternalEntity_c.relateAcrossR708To(ExternalEntityEvent_c target)",
									"Relate performed across R708 from Create Event to External Entity to External Entity Event without unrelate of prior instance.");
				}
			}

			CreatesExternalEntityEvent = target;
			m_eeevt_id = target.getEeevt_id();
			if (IdAssigner.NULL_UUID.equals(target.getEe_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ee_id = target.getEe_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR708To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR708From(ExternalEntityEvent_c target) {
		unrelateAcrossR708From(target, true);
	}
	public void unrelateAcrossR708From(ExternalEntityEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (CreatesExternalEntityEvent == null)
			return; // already unrelated

		if (target != CreatesExternalEntityEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R708",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR708To(this);
		}

		if (CreatesExternalEntityEvent != null) {

			m_eeevt_id = CreatesExternalEntityEvent.getEeevt_id();
			m_ee_id = CreatesExternalEntityEvent.getEe_id();
			if (IdAssigner.NULL_UUID.equals(m_ee_id)) {
				m_ee_id = CreatesExternalEntityEvent.getEe_idCachedValue();
			}
			CreatesExternalEntityEvent = null;
			target.removeRef();
		}
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ExternalEntityEvent_c[] targets) {
		return getOneE_CEEOnR708(targets, null);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test) {
		CreateEventToExternalEntity_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_CEEOnR708(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ExternalEntityEvent_c target) {
		return getOneE_CEEOnR708(target, null);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ExternalEntityEvent_c target, boolean loadComponent) {
		return getOneE_CEEOnR708(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_CEEOnR708(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test) {
		return getOneE_CEEOnR708(modelRoot, target, test, true);
	}

	public static CreateEventToExternalEntity_c getOneE_CEEOnR708(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneE_CEEOnR708(modelRoot, target, test);
	}
	private static CreateEventToExternalEntity_c find_getOneE_CEEOnR708(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CreateEventToExternalEntity_R708) {
				for (int i = 0; i < target.backPointer_CreateEventToExternalEntity_R708
						.size(); ++i) {
					CreateEventToExternalEntity_c source = (CreateEventToExternalEntity_c) target.backPointer_CreateEventToExternalEntity_R708
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c[] targets) {
		return getManyE_CEEsOnR708(targets, null);
	}
	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c[] targets, boolean loadComponent) {
		return getManyE_CEEsOnR708(targets, null, loadComponent);
	}
	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyE_CEEsOnR708(targets, test, true);
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CreateEventToExternalEntity_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CreateEventToExternalEntity_R708) {
				for (int j = 0; j < targets[i].backPointer_CreateEventToExternalEntity_R708
						.size(); ++j) {
					CreateEventToExternalEntity_c source = (CreateEventToExternalEntity_c) targets[i].backPointer_CreateEventToExternalEntity_R708
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			CreateEventToExternalEntity_c[] ret_set = new CreateEventToExternalEntity_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreateEventToExternalEntity_c[0];
		}
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c target) {
		return getManyE_CEEsOnR708(target, null);
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c target, boolean loadComponent) {
		return getManyE_CEEsOnR708(target, null, loadComponent);
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		return getManyE_CEEsOnR708(target, test, true);
	}

	public static CreateEventToExternalEntity_c[] getManyE_CEEsOnR708(
			ExternalEntityEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new CreateEventToExternalEntity_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CreateEventToExternalEntity_R708) {
			for (int i = 0; i < target.backPointer_CreateEventToExternalEntity_R708
					.size(); ++i) {
				CreateEventToExternalEntity_c source = (CreateEventToExternalEntity_c) target.backPointer_CreateEventToExternalEntity_R708
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			CreateEventToExternalEntity_c[] ret_set = new CreateEventToExternalEntity_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreateEventToExternalEntity_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R702
		CreateEventStatement_c relInst56149 = (CreateEventStatement_c) baseRoot
				.getInstanceList(CreateEventStatement_c.class).get(
						new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56149 == null) {
			relInst56149 = (CreateEventStatement_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(CreateEventStatement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst56149 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56149 = (CreateEventStatement_c) roots[i]
						.getInstanceList(CreateEventStatement_c.class).get(
								new Object[]{m_statement_id});
				if (relInst56149 != null)
					break;
			}
		}
		//synchronized
		if (relInst56149 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56149) && !isProxy())) {
				relInst56149.relateAcrossR702To(this, notifyChanges);
			}
		}

		if (CreatesExternalEntityEvent == null) {
			// R708
			ExternalEntityEvent_c relInst56150 = (ExternalEntityEvent_c) baseRoot
					.getInstanceList(ExternalEntityEvent_c.class).get(
							new Object[]{m_eeevt_id, m_ee_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56150 == null) {
				relInst56150 = (ExternalEntityEvent_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ExternalEntityEvent_c.class)
						.get(new Object[]{m_eeevt_id, m_ee_id});
			}
			if (relInst56150 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56150 = (ExternalEntityEvent_c) roots[i]
							.getInstanceList(ExternalEntityEvent_c.class).get(
									new Object[]{m_eeevt_id, m_ee_id});
					if (relInst56150 != null)
						break;
				}
			}
			//synchronized
			if (relInst56150 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56150) && !isProxy())) {
					relInst56150.relateAcrossR708To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R702
		// E_CES
		inst = IsSupertypeCreateEventStatement;
		unrelateAcrossR702From(IsSupertypeCreateEventStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R708
		// S_EEEVT
		inst = CreatesExternalEntityEvent;
		unrelateAcrossR708From(CreatesExternalEntityEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(CreateEventToExternalEntity_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final CreateEventToExternalEntity_c inst = (CreateEventToExternalEntity_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static CreateEventToExternalEntity_c CreateEventToExternalEntityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		CreateEventToExternalEntity_c result = findCreateEventToExternalEntityInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static CreateEventToExternalEntity_c findCreateEventToExternalEntityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CreateEventToExternalEntity_c x = (CreateEventToExternalEntity_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static CreateEventToExternalEntity_c CreateEventToExternalEntityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CreateEventToExternalEntityInstance(modelRoot, test, true);
	}

	public static CreateEventToExternalEntity_c CreateEventToExternalEntityInstance(
			ModelRoot modelRoot) {
		return CreateEventToExternalEntityInstance(modelRoot, null, true);
	}

	public static CreateEventToExternalEntity_c[] CreateEventToExternalEntityInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(CreateEventToExternalEntity_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CreateEventToExternalEntity_c x = (CreateEventToExternalEntity_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				CreateEventToExternalEntity_c[] ret_set = new CreateEventToExternalEntity_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new CreateEventToExternalEntity_c[0];
			}
		}
	}
	public static CreateEventToExternalEntity_c[] CreateEventToExternalEntityInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CreateEventToExternalEntityInstances(modelRoot, test, true);
	}
	public static CreateEventToExternalEntity_c[] CreateEventToExternalEntityInstances(
			ModelRoot modelRoot) {
		return CreateEventToExternalEntityInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Create Event to External Entity.dispose call: ";
		CreateEventStatement_c testR702Inst2 = CreateEventStatement_c
				.getOneE_CESOnR702(this, false);

		if (testR702Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "702 ";
		}
		ExternalEntityEvent_c testR708Inst = ExternalEntityEvent_c
				.getOneS_EEEVTOnR708(this, false);

		if (testR708Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "708 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Create Event to External Entity", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("eeevt_id")) {
			return true;
		}
		if (attributeName.equals("ee_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeCreateEventStatement != null) {
			return IsSupertypeCreateEventStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeCreateEventStatement != null) {
			return IsSupertypeCreateEventStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeCreateEventStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getEeevt_idLongBased() {
		if (CreatesExternalEntityEvent != null) {
			return CreatesExternalEntityEvent.getEeevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEeevt_id() {
		if (CreatesExternalEntityEvent != null) {
			return CreatesExternalEntityEvent.getEeevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEeevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_eeevt_id))
			return m_eeevt_id;
		else
			return getEeevt_id();
	}

	public void setEeevt_id(java.util.UUID newValue) {
		m_eeevt_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getEe_idLongBased() {
		if (CreatesExternalEntityEvent != null) {
			return CreatesExternalEntityEvent.getEe_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEe_id() {
		if (CreatesExternalEntityEvent != null) {
			return CreatesExternalEntityEvent.getEe_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEe_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ee_id))
			return m_ee_id;
		else
			return getEe_id();
	}

	public void setEe_id(java.util.UUID newValue) {
		m_ee_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Create Event to External Entity", //$NON-NLS-1$
						" Operation entered: Create Event to External Entity::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		CreateEventToExternalEntity_c[] objs = CreateEventToExternalEntity_c
				.CreateEventToExternalEntityInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Create Event to External Entity", //$NON-NLS-1$
						" Operation entered: Create Event to External Entity::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class CreateEventToExternalEntity_c_test56152_c
				implements
					ClassQueryInterface_c {
			CreateEventToExternalEntity_c_test56152_c(java.util.UUID p56153) {
				m_p56153 = p56153;
			}
			private java.util.UUID m_p56153;
			public boolean evaluate(Object candidate) {
				CreateEventToExternalEntity_c selected = (CreateEventToExternalEntity_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56153));
				return retval;
			}
		}

		CreateEventToExternalEntity_c[] objs56151 = CreateEventToExternalEntity_c
				.CreateEventToExternalEntityInstances(modelRoot,
						new CreateEventToExternalEntity_c_test56152_c(
								getStatement_id()));

		if (((objs56151.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Create Event to External Entity", //$NON-NLS-1$
								"Consistency: Object: Create Event to External Entity: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56151.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event to External Entity: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56151.length), e);
			}
			retval = false;

		}

		if (((objs56151.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Create Event to External Entity", //$NON-NLS-1$
								"Consistency: Object: Create Event to External Entity: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56151.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event to External Entity: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56151.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Create Event to External Entity is a subtype in association: rel.Numb = 702
		// The supertype class is: Create Event Statement
		class CreateEventStatement_c_test56157_c
				implements
					ClassQueryInterface_c {
			CreateEventStatement_c_test56157_c(java.util.UUID p56158) {
				m_p56158 = p56158;
			}
			private java.util.UUID m_p56158;
			public boolean evaluate(Object candidate) {
				CreateEventStatement_c selected = (CreateEventStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56158));
				return retval;
			}
		}

		CreateEventStatement_c[] objs56156 = CreateEventStatement_c
				.CreateEventStatementInstances(modelRoot,
						new CreateEventStatement_c_test56157_c(
								getStatement_id()));

		if (((objs56156.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Create Event to External Entity", //$NON-NLS-1$
								"Consistency: Object: Create Event to External Entity: Association: 702: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56156.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event to External Entity: Association: 702: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56156.length), e);
			}
			retval = false;

		}

		// Create Event to External Entity is a referring class in association: rel.Numb = 708
		// The participating class is: External Entity Event
		class ExternalEntityEvent_c_test56160_c
				implements
					ClassQueryInterface_c {
			ExternalEntityEvent_c_test56160_c(java.util.UUID p56161,
					java.util.UUID p56162) {
				m_p56161 = p56161;
				m_p56162 = p56162;
			}
			private java.util.UUID m_p56161;
			private java.util.UUID m_p56162;
			public boolean evaluate(Object candidate) {
				ExternalEntityEvent_c selected = (ExternalEntityEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getEeevt_id().equals(m_p56161))
						& (selected.getEe_id().equals(m_p56162));
				return retval;
			}
		}

		ExternalEntityEvent_c[] objs56159 = ExternalEntityEvent_c
				.ExternalEntityEventInstances(modelRoot,
						new ExternalEntityEvent_c_test56160_c(getEeevt_id(),
								getEe_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56159.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Create Event to External Entity", //$NON-NLS-1$
								"Consistency: Object: Create Event to External Entity: Association: 708: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56159.length)
										+ " EEevt_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Create Event to External Entity: Association: 708: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56159.length)
										+ " EEevt_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION,
				"Create Event to External Entity",
				" Operation entered: CreateEventToExternalEntity::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ExternalEntityEvent_c v_evt = ExternalEntityEvent_c
				.getOneS_EEEVTOnR708(this);

		if ((!(v_evt == null))) {

			this.unrelateAcrossR708From(v_evt);

		}

		delete();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Create Event to External Entity
