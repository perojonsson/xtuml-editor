package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.AssociationInUseCase_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ASSOCIATION_IN_USE_CASE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class AssociationInUseCase_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public AssociationInUseCase_c(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, java.util.UUID p_m_package_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_package_id = IdAssigner.preprocessUUID(p_m_package_id);

	}
	static public AssociationInUseCase_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, java.util.UUID p_m_package_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);
		AssociationInUseCase_c new_inst = null;
		synchronized (instances) {
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_package_id = IdAssigner
						.preprocessUUID(p_m_package_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new AssociationInUseCase_c(modelRoot, p_m_assoc_id,
					p_m_package_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public AssociationInUseCase_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, java.util.UUID p_m_package_id) {
		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);
		AssociationInUseCase_c source = null;
		synchronized (instances) {
			Object[] key = {};
			source = (AssociationInUseCase_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);

				return source;
			}
		}
		// there is no instance matching the id
		AssociationInUseCase_c new_inst = new AssociationInUseCase_c(modelRoot,
				p_m_assoc_id, p_m_package_id);
		return new_inst;
	}
	public AssociationInUseCase_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_assoc_id = IdAssigner.NULL_UUID;
		m_package_id = IdAssigner.NULL_UUID;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof AssociationInUseCase_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof AssociationInUseCase_c)) {
			return false;
		}

		AssociationInUseCase_c me = (AssociationInUseCase_c) elem;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof AssociationInUseCase_c)) {
			return false;
		}

		AssociationInUseCase_c me = (AssociationInUseCase_c) elem;
		return true;
	}

	// Attributes
	private java.util.UUID m_assoc_id;
	private java.util.UUID m_package_id;

	// declare association references from this class

	// referring navigation

	UseCaseDiagram_c ContainedInUseCaseDiagram;
	public void relateAcrossR1214To(UseCaseDiagram_c target) {
		relateAcrossR1214To(target, true);
	}
	public void relateAcrossR1214To(UseCaseDiagram_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainedInUseCaseDiagram)
			return; // already related

		if (ContainedInUseCaseDiagram != target) {

			Object oldKey = getInstanceKey();

			if (ContainedInUseCaseDiagram != null) {

				ContainedInUseCaseDiagram.clearBackPointerR1214To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AssociationInUseCase_c.relateAcrossR1214To(UseCaseDiagram_c target)",
									"Relate performed across R1214 from Association In Use Case to Use Case Diagram without unrelate of prior instance.");
				}
			}

			ContainedInUseCaseDiagram = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1214To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1214", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1214From(UseCaseDiagram_c target) {
		unrelateAcrossR1214From(target, true);
	}
	public void unrelateAcrossR1214From(UseCaseDiagram_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainedInUseCaseDiagram == null)
			return; // already unrelated

		if (target != ContainedInUseCaseDiagram) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1214",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1214To(this);
		}

		if (ContainedInUseCaseDiagram != null) {

			m_package_id = ContainedInUseCaseDiagram.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_package_id)) {
				m_package_id = ContainedInUseCaseDiagram
						.getPackage_idCachedValue();
			}
			ContainedInUseCaseDiagram = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1214", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			UseCaseDiagram_c[] targets) {
		return getOneUC_AIUCOnR1214(targets, null);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			UseCaseDiagram_c[] targets, ClassQueryInterface_c test) {
		AssociationInUseCase_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneUC_AIUCOnR1214(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			UseCaseDiagram_c target) {
		return getOneUC_AIUCOnR1214(target, null);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			UseCaseDiagram_c target, boolean loadComponent) {
		return getOneUC_AIUCOnR1214(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			UseCaseDiagram_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneUC_AIUCOnR1214(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			ModelRoot modelRoot, UseCaseDiagram_c target,
			ClassQueryInterface_c test) {
		return getOneUC_AIUCOnR1214(modelRoot, target, test, true);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1214(
			ModelRoot modelRoot, UseCaseDiagram_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneUC_AIUCOnR1214(modelRoot, target, test);
	}
	private static AssociationInUseCase_c find_getOneUC_AIUCOnR1214(
			ModelRoot modelRoot, UseCaseDiagram_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsAssociationInUseCaseContains_R1214) {
				for (int i = 0; i < target.backPointer_ContainsAssociationInUseCaseContains_R1214
						.size(); ++i) {
					AssociationInUseCase_c source = (AssociationInUseCase_c) target.backPointer_ContainsAssociationInUseCaseContains_R1214
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c[] targets) {
		return getManyUC_AIUCsOnR1214(targets, null);
	}
	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c[] targets, boolean loadComponent) {
		return getManyUC_AIUCsOnR1214(targets, null, loadComponent);
	}
	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_AIUCsOnR1214(targets, test, true);
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AssociationInUseCase_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsAssociationInUseCaseContains_R1214) {
				for (int j = 0; j < targets[i].backPointer_ContainsAssociationInUseCaseContains_R1214
						.size(); ++j) {
					AssociationInUseCase_c source = (AssociationInUseCase_c) targets[i].backPointer_ContainsAssociationInUseCaseContains_R1214
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			AssociationInUseCase_c[] ret_set = new AssociationInUseCase_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AssociationInUseCase_c[0];
		}
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c target) {
		return getManyUC_AIUCsOnR1214(target, null);
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c target, boolean loadComponent) {
		return getManyUC_AIUCsOnR1214(target, null, loadComponent);
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c target, ClassQueryInterface_c test) {
		return getManyUC_AIUCsOnR1214(target, test, true);
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1214(
			UseCaseDiagram_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new AssociationInUseCase_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsAssociationInUseCaseContains_R1214) {
			for (int i = 0; i < target.backPointer_ContainsAssociationInUseCaseContains_R1214
					.size(); ++i) {
				AssociationInUseCase_c source = (AssociationInUseCase_c) target.backPointer_ContainsAssociationInUseCaseContains_R1214
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			AssociationInUseCase_c[] ret_set = new AssociationInUseCase_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AssociationInUseCase_c[0];
		}
	}

	// referring navigation

	UseCaseAssociation_c ProvidesContainmentUseCaseAssociation;
	public void relateAcrossR1215To(UseCaseAssociation_c target) {
		relateAcrossR1215To(target, true);
	}
	public void relateAcrossR1215To(UseCaseAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProvidesContainmentUseCaseAssociation)
			return; // already related

		if (ProvidesContainmentUseCaseAssociation != target) {

			Object oldKey = getInstanceKey();

			if (ProvidesContainmentUseCaseAssociation != null) {

				ProvidesContainmentUseCaseAssociation
						.clearBackPointerR1215To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"AssociationInUseCase_c.relateAcrossR1215To(UseCaseAssociation_c target)",
									"Relate performed across R1215 from Association In Use Case to Use Case Association without unrelate of prior instance.");
				}
			}

			ProvidesContainmentUseCaseAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getAssoc_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_assoc_id = target.getAssoc_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1215To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1215", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1215From(UseCaseAssociation_c target) {
		unrelateAcrossR1215From(target, true);
	}
	public void unrelateAcrossR1215From(UseCaseAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ProvidesContainmentUseCaseAssociation == null)
			return; // already unrelated

		if (target != ProvidesContainmentUseCaseAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1215",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1215To(this);
		}

		if (ProvidesContainmentUseCaseAssociation != null) {

			m_assoc_id = ProvidesContainmentUseCaseAssociation.getAssoc_id();
			if (IdAssigner.NULL_UUID.equals(m_assoc_id)) {
				m_assoc_id = ProvidesContainmentUseCaseAssociation
						.getAssoc_idCachedValue();
			}
			ProvidesContainmentUseCaseAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1215", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			UseCaseAssociation_c[] targets) {
		return getOneUC_AIUCOnR1215(targets, null);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			UseCaseAssociation_c[] targets, ClassQueryInterface_c test) {
		AssociationInUseCase_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneUC_AIUCOnR1215(targets[i], test);
			}
		}

		return ret_val;
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			UseCaseAssociation_c target) {
		return getOneUC_AIUCOnR1215(target, null);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			UseCaseAssociation_c target, boolean loadComponent) {
		return getOneUC_AIUCOnR1215(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			UseCaseAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneUC_AIUCOnR1215(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			ModelRoot modelRoot, UseCaseAssociation_c target,
			ClassQueryInterface_c test) {
		return getOneUC_AIUCOnR1215(modelRoot, target, test, true);
	}

	public static AssociationInUseCase_c getOneUC_AIUCOnR1215(
			ModelRoot modelRoot, UseCaseAssociation_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneUC_AIUCOnR1215(modelRoot, target, test);
	}
	private static AssociationInUseCase_c find_getOneUC_AIUCOnR1215(
			ModelRoot modelRoot, UseCaseAssociation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			AssociationInUseCase_c source = (AssociationInUseCase_c) target.backPointer_ContainedThroughAssociationInUseCaseContainedThrough_R1215;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1215(
			UseCaseAssociation_c[] targets) {
		return getManyUC_AIUCsOnR1215(targets, null);
	}
	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1215(
			UseCaseAssociation_c[] targets, boolean loadComponent) {
		return getManyUC_AIUCsOnR1215(targets, null, loadComponent);
	}
	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1215(
			UseCaseAssociation_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_AIUCsOnR1215(targets, test, true);
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1215(
			UseCaseAssociation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new AssociationInUseCase_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			AssociationInUseCase_c source = (AssociationInUseCase_c) targets[i].backPointer_ContainedThroughAssociationInUseCaseContainedThrough_R1215;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			AssociationInUseCase_c[] ret_set = new AssociationInUseCase_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new AssociationInUseCase_c[0];
		}
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1215(
			UseCaseAssociation_c target) {
		if (target != null) {
			UseCaseAssociation_c[] targetArray = new UseCaseAssociation_c[1];
			targetArray[0] = target;
			return getManyUC_AIUCsOnR1215(targetArray);
		} else {
			AssociationInUseCase_c[] result = new AssociationInUseCase_c[0];
			return result;
		}
	}

	public static AssociationInUseCase_c[] getManyUC_AIUCsOnR1215(
			UseCaseAssociation_c target, boolean loadComponent) {
		if (target != null) {
			UseCaseAssociation_c[] targetArray = new UseCaseAssociation_c[1];
			targetArray[0] = target;
			return getManyUC_AIUCsOnR1215(targetArray, loadComponent);
		} else {
			AssociationInUseCase_c[] result = new AssociationInUseCase_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ContainedInUseCaseDiagram == null) {
			// R1214
			UseCaseDiagram_c relInst38530 = (UseCaseDiagram_c) baseRoot
					.getInstanceList(UseCaseDiagram_c.class).get(
							new Object[]{m_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38530 == null) {
				relInst38530 = (UseCaseDiagram_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(UseCaseDiagram_c.class)
						.get(new Object[]{m_package_id});
			}
			if (relInst38530 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38530 = (UseCaseDiagram_c) roots[i].getInstanceList(
							UseCaseDiagram_c.class).get(
							new Object[]{m_package_id});
					if (relInst38530 != null)
						break;
				}
			}
			//synchronized
			if (relInst38530 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38530) && !isProxy())) {
					relInst38530.relateAcrossR1214To(this, notifyChanges);
				}
			}
		}

		if (ProvidesContainmentUseCaseAssociation == null) {
			// R1215
			UseCaseAssociation_c relInst38531 = (UseCaseAssociation_c) baseRoot
					.getInstanceList(UseCaseAssociation_c.class).get(
							new Object[]{m_assoc_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38531 == null) {
				relInst38531 = (UseCaseAssociation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(UseCaseAssociation_c.class)
						.get(new Object[]{m_assoc_id});
			}
			if (relInst38531 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38531 = (UseCaseAssociation_c) roots[i]
							.getInstanceList(UseCaseAssociation_c.class).get(
									new Object[]{m_assoc_id});
					if (relInst38531 != null)
						break;
				}
			}
			//synchronized
			if (relInst38531 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38531) && !isProxy())) {
					relInst38531.relateAcrossR1215To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1214
		// UC_UCC
		inst = ContainedInUseCaseDiagram;
		unrelateAcrossR1214From(ContainedInUseCaseDiagram, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1215
		// UC_UCA
		inst = ProvidesContainmentUseCaseAssociation;
		unrelateAcrossR1215From(ProvidesContainmentUseCaseAssociation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(AssociationInUseCase_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final AssociationInUseCase_c inst = (AssociationInUseCase_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static AssociationInUseCase_c AssociationInUseCaseInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		AssociationInUseCase_c result = findAssociationInUseCaseInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					AssociationInUseCase_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findAssociationInUseCaseInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static AssociationInUseCase_c findAssociationInUseCaseInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AssociationInUseCase_c x = (AssociationInUseCase_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static AssociationInUseCase_c AssociationInUseCaseInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AssociationInUseCaseInstance(modelRoot, test, true);
	}

	public static AssociationInUseCase_c AssociationInUseCaseInstance(
			ModelRoot modelRoot) {
		return AssociationInUseCaseInstance(modelRoot, null, true);
	}

	public static AssociationInUseCase_c[] AssociationInUseCaseInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					AssociationInUseCase_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(AssociationInUseCase_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				AssociationInUseCase_c x = (AssociationInUseCase_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				AssociationInUseCase_c[] ret_set = new AssociationInUseCase_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new AssociationInUseCase_c[0];
			}
		}
	}
	public static AssociationInUseCase_c[] AssociationInUseCaseInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return AssociationInUseCaseInstances(modelRoot, test, true);
	}
	public static AssociationInUseCase_c[] AssociationInUseCaseInstances(
			ModelRoot modelRoot) {
		return AssociationInUseCaseInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Association In Use Case.dispose call: ";
		UseCaseDiagram_c testR1214Inst = UseCaseDiagram_c.getOneUC_UCCOnR1214(
				this, false);

		if (testR1214Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1214 ";
		}
		UseCaseAssociation_c testR1215Inst = UseCaseAssociation_c
				.getOneUC_UCAOnR1215(this, false);

		if (testR1215Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1215 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Association In Use Case",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("assoc_id")) {
			return true;
		}
		if (attributeName.equals("package_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getAssoc_idLongBased() {
		if (ProvidesContainmentUseCaseAssociation != null) {
			return ProvidesContainmentUseCaseAssociation.getAssoc_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAssoc_id() {
		if (ProvidesContainmentUseCaseAssociation != null) {
			return ProvidesContainmentUseCaseAssociation.getAssoc_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAssoc_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_assoc_id))
			return m_assoc_id;
		else
			return getAssoc_id();
	}

	public void setAssoc_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_assoc_id)) {
				return;
			}
		} else if (m_assoc_id != null) {
			if (m_assoc_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Assoc_id", m_assoc_id, newValue, true);
		m_assoc_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPackage_idLongBased() {
		if (ContainedInUseCaseDiagram != null) {
			return ContainedInUseCaseDiagram.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPackage_id() {
		if (ContainedInUseCaseDiagram != null) {
			return ContainedInUseCaseDiagram.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPackage_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_package_id))
			return m_package_id;
		else
			return getPackage_id();
	}

	public void setPackage_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_package_id)) {
				return;
			}
		} else if (m_package_id != null) {
			if (m_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Package_id", m_package_id, newValue, true);
		m_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Association In Use Case", //$NON-NLS-1$
						" Operation entered: Association In Use Case::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		AssociationInUseCase_c[] objs = AssociationInUseCase_c
				.AssociationInUseCaseInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Association In Use Case", //$NON-NLS-1$
						" Operation entered: Association In Use Case::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		// Association In Use Case is a referring class in association: rel.Numb = 1215
		// The participating class is: Use Case Association
		class UseCaseAssociation_c_test38536_c implements ClassQueryInterface_c {
			UseCaseAssociation_c_test38536_c(java.util.UUID p38537) {
				m_p38537 = p38537;
			}
			private java.util.UUID m_p38537;
			public boolean evaluate(Object candidate) {
				UseCaseAssociation_c selected = (UseCaseAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38537));
				return retval;
			}
		}

		UseCaseAssociation_c[] objs38535 = UseCaseAssociation_c
				.UseCaseAssociationInstances(modelRoot,
						new UseCaseAssociation_c_test38536_c(getAssoc_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38535.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Association In Use Case", //$NON-NLS-1$
								"Consistency: Object: Association In Use Case: Association: 1215: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38535.length)
										+ " Assoc_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Association In Use Case: Association: 1215: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38535.length)
										+ " Assoc_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Association In Use Case is a referring class in association: rel.Numb = 1214
		// The participating class is: Use Case Diagram
		class UseCaseDiagram_c_test38539_c implements ClassQueryInterface_c {
			UseCaseDiagram_c_test38539_c(java.util.UUID p38540) {
				m_p38540 = p38540;
			}
			private java.util.UUID m_p38540;
			public boolean evaluate(Object candidate) {
				UseCaseDiagram_c selected = (UseCaseDiagram_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p38540));
				return retval;
			}
		}

		UseCaseDiagram_c[] objs38538 = UseCaseDiagram_c
				.UseCaseDiagramInstances(modelRoot,
						new UseCaseDiagram_c_test38539_c(getPackage_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38538.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Association In Use Case", //$NON-NLS-1$
								"Consistency: Object: Association In Use Case: Association: 1214: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38538.length)
										+ " Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Association In Use Case: Association: 1214: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38538.length)
										+ " Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Association In Use Case
