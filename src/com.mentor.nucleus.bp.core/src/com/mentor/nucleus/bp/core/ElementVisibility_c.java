package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ElementVisibility_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ELEMENT_VISIBILITY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ElementVisibility_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ElementVisibility_c(ModelRoot modelRoot,
			java.util.UUID p_m_visibility_id, java.util.UUID p_m_element_id,
			java.util.UUID p_m_package_id, String p_m_name, int p_m_type) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_element_id = IdAssigner.preprocessUUID(p_m_element_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
		m_name = p_m_name;
		m_type = p_m_type;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_visibility_id = IdAssigner.preprocessUUID(p_m_visibility_id);
		//extract 28 bit value only            
		m_visibility_idLongBased = 0xfffffff & p_m_visibility_id
				.getLeastSignificantBits();

		setUniqueId(m_visibility_id);
		Object[] key = {m_element_id, m_package_id, m_visibility_id};
		addInstanceToMap(key);
	}
	static public ElementVisibility_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_visibility_id, java.util.UUID p_m_element_id,
			java.util.UUID p_m_package_id, String p_m_name, int p_m_type,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);
		ElementVisibility_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_element_id, p_m_package_id, p_m_visibility_id};
			new_inst = (ElementVisibility_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_element_id = IdAssigner
						.preprocessUUID(p_m_element_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_package_id = IdAssigner
						.preprocessUUID(p_m_package_id);
				new_inst.m_name = p_m_name;
				new_inst.m_type = p_m_type;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_visibility_id = IdAssigner
						.preprocessUUID(p_m_visibility_id);
				//extract 28 bit value only            
				new_inst.m_visibility_idLongBased = 0xfffffff & p_m_visibility_id
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ElementVisibility_c(modelRoot, p_m_visibility_id,
					p_m_element_id, p_m_package_id, p_m_name, p_m_type);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ElementVisibility_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_visibility_id, java.util.UUID p_m_element_id,
			java.util.UUID p_m_package_id, String p_m_name, int p_m_type) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);
		ElementVisibility_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_element_id, p_m_package_id, p_m_visibility_id};
			source = (ElementVisibility_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_element_id = IdAssigner.preprocessUUID(p_m_element_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
				source.m_name = p_m_name;
				source.m_type = p_m_type;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_visibility_id = IdAssigner
						.preprocessUUID(p_m_visibility_id);
				//extract 28 bit value only            
				source.m_visibility_idLongBased = 0xfffffff & p_m_visibility_id
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		ElementVisibility_c new_inst = new ElementVisibility_c(modelRoot,
				p_m_visibility_id, p_m_element_id, p_m_package_id, p_m_name,
				p_m_type);
		return new_inst;
	}
	public ElementVisibility_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_element_id = IdAssigner.NULL_UUID;
		m_package_id = IdAssigner.NULL_UUID;
		m_name = "";
		m_type = Elementtypeconstants_c.OOA_UNINITIALIZED_ENUM;
		m_visibility_id = idAssigner.createUUID();
		setUniqueId(m_visibility_id);
		Object[] key = {m_element_id, m_package_id, m_visibility_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_element_id, m_package_id, m_visibility_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_element_id != p_newKey) {

			m_element_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ElementVisibility_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ElementVisibility_c)) {
			return false;
		}

		ElementVisibility_c me = (ElementVisibility_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getElement_id()) || IdAssigner.NULL_UUID
						.equals(((ElementVisibility_c) elem).getElement_id())) && this != elem)) {
			return false;
		}
		if (!getElement_id().equals(
				((ElementVisibility_c) elem).getElement_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getPackage_id()) || IdAssigner.NULL_UUID
						.equals(((ElementVisibility_c) elem).getPackage_id())) && this != elem)) {
			return false;
		}
		if (!getPackage_id().equals(
				((ElementVisibility_c) elem).getPackage_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getVisibility_id()) || IdAssigner.NULL_UUID
						.equals(((ElementVisibility_c) elem).getVisibility_id())) && this != elem)) {
			return false;
		}
		if (!getVisibility_id().equals(
				((ElementVisibility_c) elem).getVisibility_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ElementVisibility_c)) {
			return false;
		}

		ElementVisibility_c me = (ElementVisibility_c) elem;
		if (!getElement_idCachedValue().equals(
				((ElementVisibility_c) elem).getElement_idCachedValue()))
			return false;
		if (!getPackage_idCachedValue().equals(
				((ElementVisibility_c) elem).getPackage_idCachedValue()))
			return false;
		if (!getVisibility_id().equals(
				((ElementVisibility_c) elem).getVisibility_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_element_id;
	private java.util.UUID m_package_id;
	private String m_name;
	private int m_type;
	private java.util.UUID m_visibility_id;
	private long m_visibility_idLongBased;

	// declare association references from this class

	// referring navigation

	SearchResultSet_c SearchResultSet;
	public void relateAcrossR8006To(SearchResultSet_c target) {
		relateAcrossR8006To(target, true);
	}
	public void relateAcrossR8006To(SearchResultSet_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SearchResultSet)
			return; // already related

		if (SearchResultSet != target) {

			Object oldKey = getInstanceKey();

			if (SearchResultSet != null) {

				SearchResultSet.clearBackPointerR8006To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElementVisibility_c.relateAcrossR8006To(SearchResultSet_c target)",
									"Relate performed across R8006 from Element Visibility to Search Result Set without unrelate of prior instance.");
				}
			}

			SearchResultSet = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_package_id = target.getPackage_idCachedValue();
			}
			m_name = target.getName();
			m_type = target.getType();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8006To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8006", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8006From(SearchResultSet_c target) {
		unrelateAcrossR8006From(target, true);
	}
	public void unrelateAcrossR8006From(SearchResultSet_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SearchResultSet == null)
			return; // already unrelated

		if (target != SearchResultSet) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8006",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8006To(this);
		}

		if (SearchResultSet != null) {

			m_package_id = SearchResultSet.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_package_id)) {
				m_package_id = SearchResultSet.getPackage_idCachedValue();
			}
			m_name = SearchResultSet.getName();
			m_type = SearchResultSet.getType();
			SearchResultSet = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8006", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(
			SearchResultSet_c[] targets) {
		return getOnePE_VISOnR8006(targets, null);
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(
			SearchResultSet_c[] targets, ClassQueryInterface_c test) {
		ElementVisibility_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePE_VISOnR8006(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(
			SearchResultSet_c target) {
		return getOnePE_VISOnR8006(target, null);
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(
			SearchResultSet_c target, boolean loadComponent) {
		return getOnePE_VISOnR8006(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(
			SearchResultSet_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePE_VISOnR8006(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(ModelRoot modelRoot,
			SearchResultSet_c target, ClassQueryInterface_c test) {
		return getOnePE_VISOnR8006(modelRoot, target, test, true);
	}

	public static ElementVisibility_c getOnePE_VISOnR8006(ModelRoot modelRoot,
			SearchResultSet_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOnePE_VISOnR8006(modelRoot, target, test);
	}
	private static ElementVisibility_c find_getOnePE_VISOnR8006(
			ModelRoot modelRoot, SearchResultSet_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ElementVisibility_R8006) {
				for (int i = 0; i < target.backPointer_ElementVisibility_R8006
						.size(); ++i) {
					ElementVisibility_c source = (ElementVisibility_c) target.backPointer_ElementVisibility_R8006
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c[] targets) {
		return getManyPE_VISsOnR8006(targets, null);
	}
	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c[] targets, boolean loadComponent) {
		return getManyPE_VISsOnR8006(targets, null, loadComponent);
	}
	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c[] targets, ClassQueryInterface_c test) {
		return getManyPE_VISsOnR8006(targets, test, true);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElementVisibility_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ElementVisibility_R8006) {
				for (int j = 0; j < targets[i].backPointer_ElementVisibility_R8006
						.size(); ++j) {
					ElementVisibility_c source = (ElementVisibility_c) targets[i].backPointer_ElementVisibility_R8006
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementVisibility_c[0];
		}
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c target) {
		return getManyPE_VISsOnR8006(target, null);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c target, boolean loadComponent) {
		return getManyPE_VISsOnR8006(target, null, loadComponent);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c target, ClassQueryInterface_c test) {
		return getManyPE_VISsOnR8006(target, test, true);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8006(
			SearchResultSet_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ElementVisibility_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ElementVisibility_R8006) {
			for (int i = 0; i < target.backPointer_ElementVisibility_R8006
					.size(); ++i) {
				ElementVisibility_c source = (ElementVisibility_c) target.backPointer_ElementVisibility_R8006
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementVisibility_c[0];
		}
	}

	// referring navigation

	Package_c IsVisibleToElementsInPackage;
	public void relateAcrossR8002To(Package_c target) {
		relateAcrossR8002To(target, true);
	}
	public void relateAcrossR8002To(Package_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsVisibleToElementsInPackage)
			return; // already related

		if (IsVisibleToElementsInPackage != target) {

			Object oldKey = getInstanceKey();

			if (IsVisibleToElementsInPackage != null) {

				IsVisibleToElementsInPackage.clearBackPointerR8002To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElementVisibility_c.relateAcrossR8002To(Package_c target)",
									"Relate performed across R8002 from Element Visibility to Package without unrelate of prior instance.");
				}
			}

			IsVisibleToElementsInPackage = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8002To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8002", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8002From(Package_c target) {
		unrelateAcrossR8002From(target, true);
	}
	public void unrelateAcrossR8002From(Package_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsVisibleToElementsInPackage == null)
			return; // already unrelated

		if (target != IsVisibleToElementsInPackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8002",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8002To(this);
		}

		if (IsVisibleToElementsInPackage != null) {

			m_package_id = IsVisibleToElementsInPackage.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_package_id)) {
				m_package_id = IsVisibleToElementsInPackage
						.getPackage_idCachedValue();
			}
			IsVisibleToElementsInPackage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8002", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	PackageableElement_c HasVisibilityOfPackageableElement;
	public void relateAcrossR8002To(PackageableElement_c target) {
		relateAcrossR8002To(target, true);
	}
	public void relateAcrossR8002To(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasVisibilityOfPackageableElement)
			return; // already related

		if (HasVisibilityOfPackageableElement != target) {

			Object oldKey = getInstanceKey();

			if (HasVisibilityOfPackageableElement != null) {

				HasVisibilityOfPackageableElement.clearBackPointerR8002To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElementVisibility_c.relateAcrossR8002To(PackageableElement_c target)",
									"Relate performed across R8002 from Element Visibility to Packageable Element without unrelate of prior instance.");
				}
			}

			HasVisibilityOfPackageableElement = target;
			m_element_id = target.getElement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8002To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8002", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8002From(PackageableElement_c target) {
		unrelateAcrossR8002From(target, true);
	}
	public void unrelateAcrossR8002From(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasVisibilityOfPackageableElement == null)
			return; // already unrelated

		if (target != HasVisibilityOfPackageableElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8002",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8002To(this);
		}

		if (HasVisibilityOfPackageableElement != null) {

			m_element_id = HasVisibilityOfPackageableElement.getElement_id();
			HasVisibilityOfPackageableElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8002", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(Package_c[] targets) {
		return getOnePE_VISOnR8002(targets, null);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(Package_c[] targets,
			ClassQueryInterface_c test) {
		ElementVisibility_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePE_VISOnR8002(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(Package_c target) {
		return getOnePE_VISOnR8002(target, null);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(Package_c target,
			boolean loadComponent) {
		return getOnePE_VISOnR8002(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(Package_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePE_VISOnR8002(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(ModelRoot modelRoot,
			Package_c target, ClassQueryInterface_c test) {
		return getOnePE_VISOnR8002(modelRoot, target, test, true);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(ModelRoot modelRoot,
			Package_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOnePE_VISOnR8002(modelRoot, target, test);
	}
	private static ElementVisibility_c find_getOnePE_VISOnR8002(
			ModelRoot modelRoot, Package_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002) {
				for (int i = 0; i < target.backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002
						.size(); ++i) {
					ElementVisibility_c source = (ElementVisibility_c) target.backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			Package_c[] targets) {
		return getManyPE_VISsOnR8002(targets, null);
	}
	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			Package_c[] targets, boolean loadComponent) {
		return getManyPE_VISsOnR8002(targets, null, loadComponent);
	}
	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			Package_c[] targets, ClassQueryInterface_c test) {
		return getManyPE_VISsOnR8002(targets, test, true);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			Package_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElementVisibility_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002) {
				for (int j = 0; j < targets[i].backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002
						.size(); ++j) {
					ElementVisibility_c source = (ElementVisibility_c) targets[i].backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementVisibility_c[0];
		}
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(Package_c target) {
		return getManyPE_VISsOnR8002(target, null);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(Package_c target,
			boolean loadComponent) {
		return getManyPE_VISsOnR8002(target, null, loadComponent);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(Package_c target,
			ClassQueryInterface_c test) {
		return getManyPE_VISsOnR8002(target, test, true);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(Package_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ElementVisibility_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002) {
			for (int i = 0; i < target.backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002
					.size(); ++i) {
				ElementVisibility_c source = (ElementVisibility_c) target.backPointer_HasVisibilityOfElementVisibilityHasVisibilityOf_R8002
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementVisibility_c[0];
		}
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(
			PackageableElement_c[] targets) {
		return getOnePE_VISOnR8002(targets, null);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		ElementVisibility_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePE_VISOnR8002(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(
			PackageableElement_c target) {
		return getOnePE_VISOnR8002(target, null);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(
			PackageableElement_c target, boolean loadComponent) {
		return getOnePE_VISOnR8002(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(
			PackageableElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePE_VISOnR8002(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test) {
		return getOnePE_VISOnR8002(modelRoot, target, test, true);
	}

	public static ElementVisibility_c getOnePE_VISOnR8002(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOnePE_VISOnR8002(modelRoot, target, test);
	}
	private static ElementVisibility_c find_getOnePE_VISOnR8002(
			ModelRoot modelRoot, PackageableElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002) {
				for (int i = 0; i < target.backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002
						.size(); ++i) {
					ElementVisibility_c source = (ElementVisibility_c) target.backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c[] targets) {
		return getManyPE_VISsOnR8002(targets, null);
	}
	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c[] targets, boolean loadComponent) {
		return getManyPE_VISsOnR8002(targets, null, loadComponent);
	}
	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		return getManyPE_VISsOnR8002(targets, test, true);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElementVisibility_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002) {
				for (int j = 0; j < targets[i].backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002
						.size(); ++j) {
					ElementVisibility_c source = (ElementVisibility_c) targets[i].backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementVisibility_c[0];
		}
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c target) {
		return getManyPE_VISsOnR8002(target, null);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c target, boolean loadComponent) {
		return getManyPE_VISsOnR8002(target, null, loadComponent);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c target, ClassQueryInterface_c test) {
		return getManyPE_VISsOnR8002(target, test, true);
	}

	public static ElementVisibility_c[] getManyPE_VISsOnR8002(
			PackageableElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ElementVisibility_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002) {
			for (int i = 0; i < target.backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002
					.size(); ++i) {
				ElementVisibility_c source = (ElementVisibility_c) target.backPointer_IsVisibleToElementsInElementVisibilityIsVisibleToElementsIn_R8002
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElementVisibility_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (SearchResultSet == null) {
			// R8006
			SearchResultSet_c relInst39942 = (SearchResultSet_c) baseRoot
					.getInstanceList(SearchResultSet_c.class).get(
							new Object[]{m_name, m_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39942 == null) {
				relInst39942 = (SearchResultSet_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(SearchResultSet_c.class)
						.get(new Object[]{m_name, m_package_id});
			}
			if (relInst39942 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39942 = (SearchResultSet_c) roots[i]
							.getInstanceList(SearchResultSet_c.class).get(
									new Object[]{m_name, m_package_id});
					if (relInst39942 != null)
						break;
				}
			}
			//synchronized
			if (relInst39942 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39942) && !isProxy())) {
					relInst39942.relateAcrossR8006To(this, notifyChanges);
				}
			}
		}

		// R8002
		PackageableElement_c relInst39943 = (PackageableElement_c) baseRoot
				.getInstanceList(PackageableElement_c.class).get(
						new Object[]{m_element_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39943 == null) {
			relInst39943 = (PackageableElement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(PackageableElement_c.class)
					.get(new Object[]{m_element_id});
		}
		if (relInst39943 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39943 = (PackageableElement_c) roots[i].getInstanceList(
						PackageableElement_c.class).get(
						new Object[]{m_element_id});
				if (relInst39943 != null)
					break;
			}
		}
		//synchronized
		if (relInst39943 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39943) && !isProxy())) {
				relInst39943.relateAcrossR8002To(this, notifyChanges);
			}
		}

		Package_c relInst39944 = (Package_c) baseRoot.getInstanceList(
				Package_c.class).get(new Object[]{m_package_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39944 == null) {
			relInst39944 = (Package_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Package_c.class)
					.get(new Object[]{m_package_id});
		}
		if (relInst39944 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39944 = (Package_c) roots[i].getInstanceList(
						Package_c.class).get(new Object[]{m_package_id});
				if (relInst39944 != null)
					break;
			}
		}
		//synchronized
		if (relInst39944 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39944) && !isProxy())) {
				relInst39944.relateAcrossR8002To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R8006
		// PE_SRS
		inst = SearchResultSet;
		unrelateAcrossR8006From(SearchResultSet, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R8002
		// PE_PE
		inst = HasVisibilityOfPackageableElement;
		unrelateAcrossR8002From(HasVisibilityOfPackageableElement,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// EP_PKG
		inst = IsVisibleToElementsInPackage;
		unrelateAcrossR8002From(IsVisibleToElementsInPackage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ElementVisibility_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ElementVisibility_c inst = (ElementVisibility_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ElementVisibility_c ElementVisibilityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ElementVisibility_c result = findElementVisibilityInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static ElementVisibility_c findElementVisibilityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElementVisibility_c x = (ElementVisibility_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ElementVisibility_c ElementVisibilityInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ElementVisibilityInstance(modelRoot, test, true);
	}

	public static ElementVisibility_c ElementVisibilityInstance(
			ModelRoot modelRoot) {
		return ElementVisibilityInstance(modelRoot, null, true);
	}

	public static ElementVisibility_c[] ElementVisibilityInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ElementVisibility_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElementVisibility_c x = (ElementVisibility_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ElementVisibility_c[] ret_set = new ElementVisibility_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ElementVisibility_c[0];
			}
		}
	}
	public static ElementVisibility_c[] ElementVisibilityInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ElementVisibilityInstances(modelRoot, test, true);
	}
	public static ElementVisibility_c[] ElementVisibilityInstances(
			ModelRoot modelRoot) {
		return ElementVisibilityInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Element Visibility.dispose call: ";
		SearchResultSet_c testR8006Inst = SearchResultSet_c
				.getOnePE_SRSOnR8006(this, false);

		if (testR8006Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "8006 ";
		}
		PackageableElement_c testR8002Inst = PackageableElement_c
				.getOnePE_PEOnR8002(this, false);

		if (testR8002Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "8002 ";
		}

		Package_c testR8002InstOth = Package_c.getOneEP_PKGOnR8002(this, false);

		if (testR8002InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "8002 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Element Visibility",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("element_id")) {
			return true;
		}
		if (attributeName.equals("package_id")) {
			return true;
		}
		if (attributeName.equals("visibility_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getElement_idLongBased() {
		if (HasVisibilityOfPackageableElement != null) {
			return HasVisibilityOfPackageableElement.getElement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getElement_id() {
		if (HasVisibilityOfPackageableElement != null) {
			return HasVisibilityOfPackageableElement.getElement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getElement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_element_id))
			return m_element_id;
		else
			return getElement_id();
	}

	public void setElement_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_element_id)) {
				return;
			}
		} else if (m_element_id != null) {
			if (m_element_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Element_id", m_element_id, newValue, false);
		m_element_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPackage_idLongBased() {
		if (SearchResultSet != null) {
			return SearchResultSet.getPackage_idLongBased();
		}
		if (IsVisibleToElementsInPackage != null) {
			return IsVisibleToElementsInPackage.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPackage_id() {
		if (SearchResultSet != null) {
			return SearchResultSet.getPackage_id();
		}
		if (IsVisibleToElementsInPackage != null) {
			return IsVisibleToElementsInPackage.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPackage_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_package_id))
			return m_package_id;
		else
			return getPackage_id();
	}

	public String getName() {
		if (SearchResultSet != null) {
			return SearchResultSet.getName();
		}
		return "";
	}

	public String getNameCachedValue() {
		if (!m_name.equals(""))
			return m_name;
		else
			return getName();
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, false);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getType() {
		if (SearchResultSet != null) {
			return SearchResultSet.getType();
		}
		return 0;
	}

	public int getTypeCachedValue() {
		return m_type;
	}

	public void setType(int newValue) {
		if (m_type == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Type",
				new Integer(m_type), new Integer(newValue), false);

		m_type = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getVisibility_idLongBased() {
		if (m_visibility_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_visibility_id)) {
			return 0xfffffff & m_visibility_id.getLeastSignificantBits();
		}
		return m_visibility_idLongBased;
	}
	public java.util.UUID getVisibility_id() {
		return m_visibility_id;
	}

	public void setVisibility_id(java.util.UUID newValue) {
		m_visibility_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Element Visibility", //$NON-NLS-1$
						" Operation entered: Element Visibility::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ElementVisibility_c[] objs = ElementVisibility_c
				.ElementVisibilityInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Element Visibility", //$NON-NLS-1$
				" Operation entered: Element Visibility::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ElementVisibility_c_test39946_c implements ClassQueryInterface_c {
			ElementVisibility_c_test39946_c(java.util.UUID p39947,
					java.util.UUID p39948, java.util.UUID p39949) {
				m_p39947 = p39947;
				m_p39948 = p39948;
				m_p39949 = p39949;
			}
			private java.util.UUID m_p39947;
			private java.util.UUID m_p39948;
			private java.util.UUID m_p39949;
			public boolean evaluate(Object candidate) {
				ElementVisibility_c selected = (ElementVisibility_c) candidate;
				boolean retval = false;
				retval = (selected.getElement_id().equals(m_p39947))
						& (selected.getPackage_id().equals(m_p39948))
						& (selected.getVisibility_id().equals(m_p39949));
				return retval;
			}
		}

		ElementVisibility_c[] objs39945 = ElementVisibility_c
				.ElementVisibilityInstances(modelRoot,
						new ElementVisibility_c_test39946_c(getElement_id(),
								getPackage_id(), getVisibility_id()));

		if (((objs39945.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Element Visibility", //$NON-NLS-1$
								"Consistency: Object: Element Visibility: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39945.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Element Visibility: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39945.length), e);
			}
			retval = false;

		}

		if (((objs39945.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Element Visibility", //$NON-NLS-1$
								"Consistency: Object: Element Visibility: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39945.length)
										+ " Element_ID: " + "Not Printable" + " Package_ID: " + "Not Printable" + " Visibility_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Element Visibility: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39945.length)
										+ " Element_ID: " + "Not Printable" + " Package_ID: " + "Not Printable" + " Visibility_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Element Visibility is a link class in association: rel.Numb = 8002
		// Other side
		// Element Visibility is a referring class in association: rel.Numb = 8006
		// The participating class is: Search Result Set
		class SearchResultSet_c_test39953_c implements ClassQueryInterface_c {
			SearchResultSet_c_test39953_c(java.util.UUID p39954, String p39955,
					int p39956) {
				m_p39954 = p39954;
				m_p39955 = p39955;
				m_p39956 = p39956;
			}
			private java.util.UUID m_p39954;
			private String m_p39955;
			private int m_p39956;
			public boolean evaluate(Object candidate) {
				SearchResultSet_c selected = (SearchResultSet_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p39954))
						& (selected.getName().equals(m_p39955))
						& (selected.getType() == (m_p39956));
				return retval;
			}
		}

		SearchResultSet_c[] objs39952 = SearchResultSet_c
				.SearchResultSetInstances(modelRoot,
						new SearchResultSet_c_test39953_c(getPackage_id(),
								getName(), getType()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39952.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Element Visibility", //$NON-NLS-1$
								"Consistency: Object: Element Visibility: Association: 8006: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39952.length)
										+ " Package_ID: " + "Not Printable" + " Name: " + getName() + " Type: " + Integer.toString(getType())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Element Visibility: Association: 8006: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39952.length)
										+ " Package_ID: " + "Not Printable" + " Name: " + getName() + " Type: " + Integer.toString(getType()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Element Visibility
