      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SimpleAssociation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SIMPLE_ASSOCIATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SimpleAssociation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SimpleAssociation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_rel_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
        
    Object [] key = {m_rel_id};
    addInstanceToMap(key);
  }
  static public SimpleAssociation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_rel_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);
      SimpleAssociation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_rel_id};
          new_inst = (SimpleAssociation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SimpleAssociation_c(modelRoot,
p_m_rel_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SimpleAssociation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_rel_id){
    InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);
    SimpleAssociation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_rel_id
            };
        source = (SimpleAssociation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SimpleAssociation_c new_inst = new SimpleAssociation_c(modelRoot,
p_m_rel_id
);
    return new_inst;
  }
  public SimpleAssociation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_rel_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_rel_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_rel_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_rel_id !=  p_newKey ){
	
		m_rel_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SimpleAssociation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SimpleAssociation_c)) {
           return false;
       }
       
       SimpleAssociation_c me = (SimpleAssociation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID.equals(((SimpleAssociation_c)elem).getRel_id())) && this != elem)) {
      	return false;
      }
      if (!getRel_id().equals(((SimpleAssociation_c)elem).getRel_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SimpleAssociation_c)) {
           return false;
       }
       
       SimpleAssociation_c me = (SimpleAssociation_c)elem;
      if (!getRel_idCachedValue().equals(((SimpleAssociation_c)elem).getRel_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_rel_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Association_c IsSupertypeAssociation ;
public void relateAcrossR206To(Association_c target)
{
	relateAcrossR206To(target, true);
}
public void relateAcrossR206To(Association_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeAssociation) return;  // already related

    if ( IsSupertypeAssociation != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeAssociation != null) {
    
        IsSupertypeAssociation.clearBackPointerR206To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SimpleAssociation_c.relateAcrossR206To(Association_c target)", 
			"Relate performed across R206 from Simple Association to Association without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeAssociation = target ;
        if(IdAssigner.NULL_UUID.equals(target.getRel_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_rel_id = target.getRel_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR206To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "206", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR206From(Association_c target)
{
	unrelateAcrossR206From(target, true);
}
public void unrelateAcrossR206From(Association_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeAssociation == null) return;  // already unrelated
	
	if (target != IsSupertypeAssociation) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R206", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR206To(this);
    }
    

      if(IsSupertypeAssociation != null) {
      
        m_rel_id = IsSupertypeAssociation.getRel_id();
        if(IdAssigner.NULL_UUID.equals(m_rel_id))
        {
          m_rel_id = IsSupertypeAssociation.getRel_idCachedValue();
        }       
        IsSupertypeAssociation = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "206", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SimpleAssociation_c getOneR_SIMPOnR206(Association_c [] targets)
{
    return getOneR_SIMPOnR206(targets, null);
}

public static SimpleAssociation_c getOneR_SIMPOnR206(Association_c [] targets, ClassQueryInterface_c test)
{
    SimpleAssociation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneR_SIMPOnR206(targets[i], test);
        }
    }

    return ret_val;
}

public static SimpleAssociation_c getOneR_SIMPOnR206(Association_c target)
{
  return getOneR_SIMPOnR206(target, null);
}

public static SimpleAssociation_c getOneR_SIMPOnR206(Association_c target, boolean loadComponent)
{
    return getOneR_SIMPOnR206(target.getModelRoot(), target, null, loadComponent);
}

public static SimpleAssociation_c getOneR_SIMPOnR206(Association_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneR_SIMPOnR206(target.getModelRoot(), target, test);
  }
  return null;
}

public static SimpleAssociation_c getOneR_SIMPOnR206(ModelRoot modelRoot, Association_c target, ClassQueryInterface_c test)
{
	return getOneR_SIMPOnR206(modelRoot, target, test, true);
}

public static SimpleAssociation_c getOneR_SIMPOnR206(ModelRoot modelRoot, Association_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneR_SIMPOnR206(modelRoot,target,test);
}
private static SimpleAssociation_c find_getOneR_SIMPOnR206(ModelRoot modelRoot, Association_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SimpleAssociation_c source = (SimpleAssociation_c)target.backPointer_IsSubtypeSimpleAssociationIsSubtype_R206;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR206(Association_c [] targets)
{
  return getManyR_SIMPsOnR206(targets, null);
}
public static SimpleAssociation_c [] getManyR_SIMPsOnR206(Association_c [] targets, boolean loadComponent)
{
  return getManyR_SIMPsOnR206(targets, null, loadComponent);
}
public static SimpleAssociation_c [] getManyR_SIMPsOnR206(Association_c [] targets, ClassQueryInterface_c test)
{
	return getManyR_SIMPsOnR206(targets, test, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR206(Association_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SimpleAssociation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SimpleAssociation_c source = (SimpleAssociation_c)targets[i].backPointer_IsSubtypeSimpleAssociationIsSubtype_R206;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SimpleAssociation_c[] ret_set = new SimpleAssociation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SimpleAssociation_c[0];
  }
  }

public static SimpleAssociation_c [] getManyR_SIMPsOnR206(Association_c target)
{
  if (target != null) {
    Association_c [] targetArray = new Association_c[1];
    targetArray[0] = target;
    return getManyR_SIMPsOnR206(targetArray);
  } else {
    SimpleAssociation_c [] result = new SimpleAssociation_c [0] ;
  return result ;
}
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR206(Association_c target, boolean loadComponent)
{
  if (target != null) {
    Association_c [] targetArray = new Association_c[1];
    targetArray[0] = target;
    return getManyR_SIMPsOnR206(targetArray, loadComponent);
  } else {
    SimpleAssociation_c [] result = new SimpleAssociation_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ClassAsSimpleParticipant_c> backPointer_RelatesClassAsSimpleParticipantRelates_R207 = new ArrayList<ClassAsSimpleParticipant_c>();

public void setClassAsSimpleParticipantOrderInChildListR207(ClassAsSimpleParticipant_c target, int index) {
	unrelateAcrossR207From(target);
	ClassAsSimpleParticipant_c[] elements = ClassAsSimpleParticipant_c.getManyR_PARTsOnR207(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR207From((ClassAsSimpleParticipant_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR207To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR207To((ClassAsSimpleParticipant_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR207To(ClassAsSimpleParticipant_c target)
{
  if (target != null) {
    target.relateAcrossR207To(this, true) ;
  }
}

public void relateAcrossR207To(ClassAsSimpleParticipant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR207To(this, notifyChanges) ;
  }
}

public void setBackPointerR207To(ClassAsSimpleParticipant_c target)
{
  	synchronized (backPointer_RelatesClassAsSimpleParticipantRelates_R207) {
		backPointer_RelatesClassAsSimpleParticipantRelates_R207.add(target);
	}
}

public void unrelateAcrossR207From(ClassAsSimpleParticipant_c target)
{
  if (target != null) {
    target.unrelateAcrossR207From(this, true) ;
  }
}

public void unrelateAcrossR207From(ClassAsSimpleParticipant_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR207From(this, notifyChanges) ;
  }
}

public void clearBackPointerR207To(ClassAsSimpleParticipant_c target)
{
  synchronized (backPointer_RelatesClassAsSimpleParticipantRelates_R207) {
	    backPointer_RelatesClassAsSimpleParticipantRelates_R207.remove(target);
	}
}

public static SimpleAssociation_c getOneR_SIMPOnR207(ClassAsSimpleParticipant_c [] targets)
{
    return getOneR_SIMPOnR207(targets, null);
}

public static SimpleAssociation_c getOneR_SIMPOnR207(ClassAsSimpleParticipant_c [] targets, ClassQueryInterface_c test)
{
    return getOneR_SIMPOnR207(targets, test, true);
}

public static SimpleAssociation_c getOneR_SIMPOnR207(ClassAsSimpleParticipant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SimpleAssociation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SimpleAssociation_c candidate_val = getOneR_SIMPOnR207(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneR_SIMPOnR207(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SimpleAssociation_c getOneR_SIMPOnR207(ClassAsSimpleParticipant_c target)
{
	return getOneR_SIMPOnR207(target, true);
}
public static SimpleAssociation_c getOneR_SIMPOnR207(ClassAsSimpleParticipant_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsRelatedToFormalizerViaSimpleAssociation ;
  } else {
    return null;
  }
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyR_SIMPsOnR207(targets, test, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SimpleAssociation_c[0];
  
  
  LinkedHashSet<SimpleAssociation_c> elementsSet = new LinkedHashSet<SimpleAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsRelatedToFormalizerViaSimpleAssociation == null)
	  targets[i].loadProxy();
    SimpleAssociation_c associate = targets[i].IsRelatedToFormalizerViaSimpleAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SimpleAssociation_c[] result = new SimpleAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c [] targets)
{
  return getManyR_SIMPsOnR207(targets, null);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassAsSimpleParticipant_c [] targetArray = new ClassAsSimpleParticipant_c[1];
    targetArray[0] = target;
    return getManyR_SIMPsOnR207(targetArray, test, loadComponent);
  } else {
    SimpleAssociation_c [] result = new SimpleAssociation_c [0] ;
    return result ;
  }
  
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c target,
    ClassQueryInterface_c test)
{
    return getManyR_SIMPsOnR207(target, null, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c target)
{
    return getManyR_SIMPsOnR207(target, null, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR207(ClassAsSimpleParticipant_c target, boolean loadComponent)
{
    return getManyR_SIMPsOnR207(target, null, loadComponent);
}


    
  
  
// referred to navigation

ClassAsSimpleFormalizer_c backPointer_RelatesClassAsSimpleFormalizerRelates_R208;

public void setClassAsSimpleFormalizerOrderInChildListR208(ClassAsSimpleFormalizer_c target, int index) {
	unrelateAcrossR208From(target);
	ClassAsSimpleFormalizer_c[] elements = ClassAsSimpleFormalizer_c.getManyR_FORMsOnR208(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR208From((ClassAsSimpleFormalizer_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR208To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR208To((ClassAsSimpleFormalizer_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR208To(ClassAsSimpleFormalizer_c target)
{
  if (target != null) {
    target.relateAcrossR208To(this, true) ;
  }
}

public void relateAcrossR208To(ClassAsSimpleFormalizer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR208To(this, notifyChanges) ;
  }
}

public void setBackPointerR208To(ClassAsSimpleFormalizer_c target)
{
    backPointer_RelatesClassAsSimpleFormalizerRelates_R208 = target;
}

public void unrelateAcrossR208From(ClassAsSimpleFormalizer_c target)
{
  if (target != null) {
    target.unrelateAcrossR208From(this, true) ;
  }
}

public void unrelateAcrossR208From(ClassAsSimpleFormalizer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR208From(this, notifyChanges) ;
  }
}

public void clearBackPointerR208To(ClassAsSimpleFormalizer_c target)
{
	if (target == backPointer_RelatesClassAsSimpleFormalizerRelates_R208) {
		backPointer_RelatesClassAsSimpleFormalizerRelates_R208 = null;
	}
}

public static SimpleAssociation_c getOneR_SIMPOnR208(ClassAsSimpleFormalizer_c [] targets)
{
    return getOneR_SIMPOnR208(targets, null);
}

public static SimpleAssociation_c getOneR_SIMPOnR208(ClassAsSimpleFormalizer_c [] targets, ClassQueryInterface_c test)
{
    return getOneR_SIMPOnR208(targets, test, true);
}

public static SimpleAssociation_c getOneR_SIMPOnR208(ClassAsSimpleFormalizer_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SimpleAssociation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SimpleAssociation_c candidate_val = getOneR_SIMPOnR208(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneR_SIMPOnR208(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SimpleAssociation_c getOneR_SIMPOnR208(ClassAsSimpleFormalizer_c target)
{
	return getOneR_SIMPOnR208(target, true);
}
public static SimpleAssociation_c getOneR_SIMPOnR208(ClassAsSimpleFormalizer_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsRelatedToParticipantViaSimpleAssociation ;
  } else {
    return null;
  }
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyR_SIMPsOnR208(targets, test, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SimpleAssociation_c[0];
  
  
  LinkedHashSet<SimpleAssociation_c> elementsSet = new LinkedHashSet<SimpleAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsRelatedToParticipantViaSimpleAssociation == null)
	  targets[i].loadProxy();
    SimpleAssociation_c associate = targets[i].IsRelatedToParticipantViaSimpleAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SimpleAssociation_c[] result = new SimpleAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c [] targets)
{
  return getManyR_SIMPsOnR208(targets, null);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassAsSimpleFormalizer_c [] targetArray = new ClassAsSimpleFormalizer_c[1];
    targetArray[0] = target;
    return getManyR_SIMPsOnR208(targetArray, test, loadComponent);
  } else {
    SimpleAssociation_c [] result = new SimpleAssociation_c [0] ;
    return result ;
  }
  
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c target,
    ClassQueryInterface_c test)
{
    return getManyR_SIMPsOnR208(target, null, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c target)
{
    return getManyR_SIMPsOnR208(target, null, true);
}

public static SimpleAssociation_c [] getManyR_SIMPsOnR208(ClassAsSimpleFormalizer_c target, boolean loadComponent)
{
    return getManyR_SIMPsOnR208(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R206
      Association_c relInst58119 = (Association_c) baseRoot.getInstanceList(Association_c.class).get(new Object[] {m_rel_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst58119 == null) {
      			relInst58119 = (Association_c) Ooaofooa.getDefaultInstance().getInstanceList(Association_c.class).get(new Object[] {m_rel_id});
      		}
			if (relInst58119 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst58119 = (Association_c) roots[i].getInstanceList(Association_c.class).get(new Object[] {m_rel_id});
					if (relInst58119 != null)
						break;
				}
			}
			//synchronized
      if ( relInst58119 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst58119) && !isProxy())) {
	      relInst58119.relateAcrossR206To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R206
      // R_REL
		  inst=IsSupertypeAssociation;
			unrelateAcrossR206From(IsSupertypeAssociation, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SimpleAssociation_c inst = (SimpleAssociation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SimpleAssociation_c SimpleAssociationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SimpleAssociation_c result=findSimpleAssociationInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,SimpleAssociation_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSimpleAssociationInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static SimpleAssociation_c findSimpleAssociationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SimpleAssociation_c x = (SimpleAssociation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static SimpleAssociation_c SimpleAssociationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SimpleAssociationInstance(modelRoot,test,true);
  }
  
  public static SimpleAssociation_c SimpleAssociationInstance(ModelRoot modelRoot)
  {
	 return SimpleAssociationInstance(modelRoot,null,true);
  }

  public static SimpleAssociation_c [] SimpleAssociationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, SimpleAssociation_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(SimpleAssociation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SimpleAssociation_c x = (SimpleAssociation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SimpleAssociation_c[] ret_set = new SimpleAssociation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SimpleAssociation_c[0];
			}		
		} 
  }
  public static SimpleAssociation_c [] SimpleAssociationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SimpleAssociationInstances(modelRoot,test,true);
  }
  public static SimpleAssociation_c [] SimpleAssociationInstances(ModelRoot modelRoot)
  {
	return SimpleAssociationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Simple Association.dispose call: ";
	Association_c testR206Inst2 = Association_c.getOneR_RELOnR206(this, false);

	if ( testR206Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "206 ";
	}
	ClassAsSimpleParticipant_c testR207Inst = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, false);

	if ( testR207Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "207 ";	
	}
	ClassAsSimpleFormalizer_c testR208Inst = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this, false);

	if ( testR208Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "208 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Simple Association", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("rel_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getRel_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getRel_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getRel_idLongBased()
  {
    if ( IsSupertypeAssociation != null )
    {
      return IsSupertypeAssociation.getRel_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRel_id()
  {
    if ( IsSupertypeAssociation != null )
    {
      return IsSupertypeAssociation.getRel_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeAssociation != null );
 
 }                  

  public java.util.UUID getRel_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_rel_id) )
      return m_rel_id;
    else
      return getRel_id();
  }
  
  public void setRel_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_rel_id)){
	        return;
	    }
	}else if(m_rel_id != null){
	    if(m_rel_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Rel_id", m_rel_id, newValue,true); 
   m_rel_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Simple Association", //$NON-NLS-1$
	  " Operation entered: Simple Association::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SimpleAssociation_c [] objs = SimpleAssociation_c.SimpleAssociationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Simple Association", //$NON-NLS-1$
	  " Operation entered: Simple Association::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SimpleAssociation_c_test58121_c implements ClassQueryInterface_c
    {
	  SimpleAssociation_c_test58121_c( java.util.UUID            p58122 ) {
	  m_p58122 = p58122;
	  }
	  private java.util.UUID             m_p58122; 
	  public boolean evaluate (Object candidate)
	  {
	      SimpleAssociation_c selected = (SimpleAssociation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRel_id().equals(m_p58122));
	      return retval;
	  }
    }

    SimpleAssociation_c [] objs58120 = 
    SimpleAssociation_c.SimpleAssociationInstances(modelRoot, new SimpleAssociation_c_test58121_c(getRel_id())) ;

    if ( (  (objs58120.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Simple Association", //$NON-NLS-1$
           "Consistency: Object: Simple Association: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58120.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Simple Association: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58120.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs58120.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Simple Association", //$NON-NLS-1$
           "Consistency: Object: Simple Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58120.length )  + " Rel_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Simple Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58120.length )  + " Rel_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Simple Association is a subtype in association: rel.Numb = 206
          // The supertype class is: Association
    class Association_c_test58126_c implements ClassQueryInterface_c
    {
	  Association_c_test58126_c( java.util.UUID            p58127 ) {
	  m_p58127 = p58127;
	  }
	  private java.util.UUID             m_p58127; 
	  public boolean evaluate (Object candidate)
	  {
	      Association_c selected = (Association_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRel_id().equals(m_p58127));
	      return retval;
	  }
    }

    Association_c [] objs58125 = 
    Association_c.AssociationInstances(modelRoot, new Association_c_test58126_c(getRel_id())) ;

    if ( (  (objs58125.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Simple Association", //$NON-NLS-1$
           "Consistency: Object: Simple Association: Association: 206: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58125.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Simple Association: Association: 206: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58125.length )  , e); 
      }
      retval = false;

    }

          // Simple Association is a participating class in association: rel.Numb = 207
             // Object: Class As Simple Participant
    class ClassAsSimpleParticipant_c_test58129_c implements ClassQueryInterface_c
    {
	  ClassAsSimpleParticipant_c_test58129_c( java.util.UUID            p58130 ) {
	  m_p58130 = p58130;
	  }
	  private java.util.UUID             m_p58130; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRel_id().equals(m_p58130));
	      return retval;
	  }
    }

    ClassAsSimpleParticipant_c [] objs58128 = 
    ClassAsSimpleParticipant_c.ClassAsSimpleParticipantInstances(modelRoot, new ClassAsSimpleParticipant_c_test58129_c(getRel_id())) ;

    if ( (  (objs58128.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Simple Association", //$NON-NLS-1$
           "Consistency: Object: Simple Association: Association: 207: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58128.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Simple Association: Association: 207: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58128.length )  , e); 
      }
      retval = false;

    }
                
          // Simple Association is a participating class in association: rel.Numb = 208
             // Object: Class As Simple Formalizer
    class ClassAsSimpleFormalizer_c_test58132_c implements ClassQueryInterface_c
    {
	  ClassAsSimpleFormalizer_c_test58132_c( java.util.UUID            p58133 ) {
	  m_p58133 = p58133;
	  }
	  private java.util.UUID             m_p58133; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassAsSimpleFormalizer_c selected = (ClassAsSimpleFormalizer_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRel_id().equals(m_p58133));
	      return retval;
	  }
    }

    ClassAsSimpleFormalizer_c [] objs58131 = 
    ClassAsSimpleFormalizer_c.ClassAsSimpleFormalizerInstances(modelRoot, new ClassAsSimpleFormalizer_c_test58132_c(getRel_id())) ;

    if ( (  (objs58131.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Simple Association", //$NON-NLS-1$
           "Consistency: Object: Simple Association: Association: 208: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58131.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Simple Association: Association: 208: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58131.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  String       Get_connector_text(final java.util.UUID         p_Obj_id,final int  p_At)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Get_connector_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


Association_c v_rel = Association_c.getOneR_RELOnR206(this);


boolean      v_isReflexive = false ;


if ( (  (v_rel != null)) )
{

v_isReflexive = v_rel.Is_reflexive() ;



}

ClassAsSimpleParticipant_c [] v_part_set = ClassAsSimpleParticipant_c.getManyR_PARTsOnR207(this);


if ( (  (v_part_set.length) > 1) )
{

if ( (v_isReflexive) )
{

ClassAsSimpleParticipant_c v_part1 = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this);


if ( (p_At == End_c.Start || p_At == End_c.Start_Fixed) )
{

if ( (  (v_part1 != null)) )
{

v_result = v_part1.Get_connector_text(			    
p_At) ;



}


}

else if ( (p_At == End_c.End || p_At == End_c.End_Fixed) )
{

  class ClassAsSimpleParticipant_test55973_c implements ClassQueryInterface_c
  {
	ClassAsSimpleParticipant_test55973_c( java.util.UUID         p55974 ) {
		m_p55974 = p55974;
	}
	private java.util.UUID         m_p55974;
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c)candidate;
		return ! selected.getOir_id().equals(m_p55974) ;
	}
  }
ClassAsSimpleParticipant_c v_part2 = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, new ClassAsSimpleParticipant_test55973_c(v_part1.getOir_id()));


if ( (  (v_part2 != null)) )
{

v_result = v_part2.Get_connector_text(			    
p_At) ;



}


}


}

else
{

  class ClassAsSimpleParticipant_test55975_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c)candidate;
		return (selected.getObj_id().equals(p_Obj_id)) ;
	}
  }
ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, new ClassAsSimpleParticipant_test55975_c());


if ( (  (v_part != null)) )
{

v_result = v_part.Get_connector_text(			    
p_At) ;



}


}


}

else
{

if ( (v_isReflexive) )
{

if ( (p_At == End_c.Start || p_At == End_c.Start_Fixed) )
{

ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this);


if ( (  (v_part != null)) )
{

v_result = v_part.Get_connector_text(			    
p_At) ;



}


}

else if ( (p_At == End_c.End || p_At == End_c.End_Fixed) )
{

ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this);


if ( (  (v_form != null)) )
{

v_result = v_form.Get_connector_text(			    
p_At) ;



}


}


}

else
{

  class ClassAsSimpleParticipant_test55976_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c)candidate;
		return (selected.getObj_id().equals(p_Obj_id)) ;
	}
  }
ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, new ClassAsSimpleParticipant_test55976_c());


if ( (  (v_part != null)) )
{

v_result = v_part.Get_connector_text(			    
p_At) ;



}

else
{

  class ClassAsSimpleFormalizer_test55977_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleFormalizer_c selected = (ClassAsSimpleFormalizer_c)candidate;
		return (selected.getObj_id().equals(p_Obj_id)) ;
	}
  }
ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this, new ClassAsSimpleFormalizer_test55977_c());


if ( (  (v_form != null)) )
{

v_result = v_form.Get_connector_text(			    
p_At) ;



}


}


}


}

return v_result;



   } // End get_connector_text
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Association_c v_assoc = Association_c.getOneR_RELOnR206(this);


this.unrelateAcrossR206From(v_assoc);


ClassAsSimpleParticipant_c [] v_parts = ClassAsSimpleParticipant_c.getManyR_PARTsOnR207(this);


ClassAsSimpleParticipant_c  v_part = null;
for ( int i55423 = 0; i55423 < v_parts.length; i55423++)
{
  v_part = v_parts[i55423] ;

this.unrelateAcrossR207From(v_part);



}

ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this);


if ( (  (v_form != null)) )
{

this.unrelateAcrossR208From(v_form);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Migratetolinked(final java.util.UUID         p_Imported_id,final java.util.UUID         p_Using)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Migratetolinked") ; 
               final ModelRoot modelRoot = getModelRoot();
ClassAsLink_c v_assr = new ClassAsLink_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_assr));


if ( (Isformalized()) )
{

Unformalize() ;



}

Association_c v_toAssoc = Association_c.getOneR_RELOnR206(this);


  class ModelClass_test55978_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_Using)) ;
	}
  }
ModelClass_c v_fromClass = ModelClass_c.getOneO_OBJOnR2(Subsystem_c.getManyS_SSsOnR1(Domain_c.getManyS_DOMsOnR1(Subsystem_c.getManyS_SSsOnR4(Association_c.getManyR_RELsOnR206(this)))), new ModelClass_test55978_c());


if ( (  (v_fromClass == null)) )
{

  class ModelClass_test55979_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ModelClass_c selected = (ModelClass_c)candidate;
		return (selected.getObj_id().equals(p_Using)) ;
	}
  }
v_fromClass = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(SystemModel_c.getManyS_SYSsOnR1405(Package_c.getManyEP_PKGsOnR8000(PackageableElement_c.getManyPE_PEsOnR8001(Association_c.getManyR_RELsOnR206(this)))))), new ModelClass_test55979_c());



}

LinkedAssociation_c v_assoc = new LinkedAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_assoc));


this.unrelateAcrossR206From(v_toAssoc);


if (v_assoc != null) {
  v_assoc.relateAcrossR206To(v_toAssoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsSimpleParticipant_c [] v_parts = ClassAsSimpleParticipant_c.getManyR_PARTsOnR207(this);


if ( (  (v_parts.length) == 1) )
{

ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this);


ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(v_part);


if (v_part != null) {
v_part.unrelateAcrossR204From(v_rto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


this.unrelateAcrossR207From(v_part);


ClassAsAssociatedOneSide_c v_aone = new ClassAsAssociatedOneSide_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aone));


if (v_aone != null) {
  v_aone.setMult( v_part.getMult()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aone != null) {
  v_aone.setCond( v_part.getCond()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aone != null) {
  v_aone.setTxt_phrs( v_part.getTxt_phrs()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_rto != null) {
  v_rto.relateAcrossR204To(v_aone);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_part != null) {
// get the location of this element in the instance list
// before deleting
if ( v_part.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_part));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


if (v_aone != null) {
  v_aone.relateAcrossR209To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this);


ReferringClassInAssoc_c v_rgo = ReferringClassInAssoc_c.getOneR_RGOOnR205(v_form);


if (v_form != null) {
v_form.unrelateAcrossR205From(v_rgo);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


this.unrelateAcrossR208From(v_form);


ClassInAssociation_c v_oir = ClassInAssociation_c.getOneR_OIROnR203(v_rgo);


if (v_oir != null) {
v_oir.unrelateAcrossR203From(v_rgo);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_rgo != null) {
v_rgo.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


ReferredToClassInAssoc_c v_othRto = new ReferredToClassInAssoc_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_othRto));


if (v_oir != null) {
  v_oir.relateAcrossR203To(v_othRto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassAsAssociatedOtherSide_c v_aoth = new ClassAsAssociatedOtherSide_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aoth));


if (v_aoth != null) {
  v_aoth.setMult( v_form.getMult()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aoth != null) {
  v_aoth.setCond( v_form.getCond()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aoth != null) {
  v_aoth.setTxt_phrs( v_form.getTxt_phrs()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_form != null) {
// get the location of this element in the instance list
// before deleting
if ( v_form.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_form));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


if (v_othRto != null) {
  v_othRto.relateAcrossR204To(v_aoth);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_aoth != null) {
  v_aoth.relateAcrossR210To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ModelClass_c v_refClass = ModelClass_c.getOneO_OBJOnR201(v_oir);



}

else
{

boolean      v_doingOneSide = true ;


ClassAsSimpleParticipant_c  v_part = null;
for ( int i55424 = 0; i55424 < v_parts.length; i55424++)
{
  v_part = v_parts[i55424] ;

if ( (v_doingOneSide) )
{

ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(v_part);


if (v_part != null) {
v_part.unrelateAcrossR204From(v_rto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


this.unrelateAcrossR207From(v_part);


ClassAsAssociatedOneSide_c v_aone = new ClassAsAssociatedOneSide_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aone));


if (v_aone != null) {
  v_aone.setMult( v_part.getMult()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aone != null) {
  v_aone.setCond( v_part.getCond()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aone != null) {
  v_aone.setTxt_phrs( v_part.getTxt_phrs()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_part != null) {
// get the location of this element in the instance list
// before deleting
if ( v_part.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_part));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


if (v_rto != null) {
  v_rto.relateAcrossR204To(v_aone);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_aone != null) {
  v_aone.relateAcrossR209To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_doingOneSide = false ;



}

else
{

ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(v_part);


if (v_part != null) {
v_part.unrelateAcrossR204From(v_rto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


this.unrelateAcrossR207From(v_part);


ClassAsAssociatedOtherSide_c v_aoth = new ClassAsAssociatedOtherSide_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aoth));


if (v_aoth != null) {
  v_aoth.setMult( v_part.getMult()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aoth != null) {
  v_aoth.setCond( v_part.getCond()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_aoth != null) {
  v_aoth.setTxt_phrs( v_part.getTxt_phrs()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_part != null) {
// get the location of this element in the instance list
// before deleting
if ( v_part.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_part));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


if (v_rto != null) {
  v_rto.relateAcrossR204To(v_aoth);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_aoth != null) {
  v_aoth.relateAcrossR210To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

ClassInAssociation_c v_oir = new ClassInAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_oir));


if (v_oir != null) {
  v_oir.relateAcrossR201To( v_fromClass ) ;   v_oir.relateAcrossR201To( v_toAssoc ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


ReferringClassInAssoc_c v_rgo = new ReferringClassInAssoc_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_rgo));


if (v_rgo != null) {
  v_rgo.relateAcrossR203To(v_oir);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_rgo != null) {
  v_rgo.relateAcrossR205To(v_assr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_assr != null) {
  v_assr.relateAcrossR211To(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (! p_Imported_id.equals(Gd_c.Null_unique_id())) )
{

  class ImportedClass_test55980_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ImportedClass_c selected = (ImportedClass_c)candidate;
		return selected.getIobj_id().equals(p_Imported_id) ;
	}
  }
ImportedClass_c v_imp_class = ImportedClass_c.getOneO_IOBJOnR101(v_fromClass, new ImportedClass_test55980_c());


if (v_imp_class != null) {
  v_imp_class.relateAcrossR202To(v_oir);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End migrateToLinked
  public  boolean      Isformalized()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Isformalized") ; 
               final ModelRoot modelRoot = getModelRoot();
ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this);


if ( (  (v_form != null)) )
{

ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(ClassAsSimpleParticipant_c.getManyR_PARTsOnR207(this));


ReferredToIdentifierAttribute_c v_rtida = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(v_rto);


if ( (  (v_rtida == null)) )
{

Association_c v_assoc = Association_c.getOneR_RELOnR206(this);


String       v_rel_num = Gd_c.Int_to_string(			    
v_assoc.getNumb()) ;


User_c.Logerror(			    
"Association R" + v_rel_num + " has inconsistent formalization data"			    
,"" ) ;



}

return true;



}

return false;



   } // End isFormalized
  public  void Formalize(final int          p_Id_id,final java.util.UUID         p_Part_oir_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Formalize") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Isformalized()) )
{

Unformalize() ;



}

  class ClassAsSimpleParticipant_test55981_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c)candidate;
		return selected.getOir_id().equals(p_Part_oir_id) ;
	}
  }
ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, new ClassAsSimpleParticipant_test55981_c());


  class ClassAsSimpleParticipant_test55982_c implements ClassQueryInterface_c
  {
	ClassAsSimpleParticipant_test55982_c( java.util.UUID         p55983 ) {
		m_p55983 = p55983;
	}
	private java.util.UUID         m_p55983;
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c)candidate;
		return ! selected.getOir_id().equals(m_p55983) ;
	}
  }
ClassAsSimpleParticipant_c v_form_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, new ClassAsSimpleParticipant_test55982_c(v_part.getOir_id()));


if (v_form_part != null) {
v_form_part.Migratetoformalizer() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this);


ReferredToClassInAssoc_c v_part_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(v_part);


ModelClass_c v_part_obj = ModelClass_c.getOneO_OBJOnR201(ClassInAssociation_c.getOneR_OIROnR203(v_part_rto));


  class ClassIdentifier_test55984_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassIdentifier_c selected = (ClassIdentifier_c)candidate;
		return selected.getOid_id() == p_Id_id ;
	}
  }
ClassIdentifier_c v_oid = ClassIdentifier_c.getOneO_IDOnR104(v_part_obj, new ClassIdentifier_test55984_c());


if (v_oid != null) {
  v_oid.relateAcrossR109To(v_part_rto);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ClassIdentifierAttribute_c [] v_oida_set = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(v_oid);


ReferringClassInAssoc_c v_form_rgo = ReferringClassInAssoc_c.getOneR_RGOOnR205(v_form);


ModelClass_c v_form_obj = ModelClass_c.getOneO_OBJOnR201(ClassInAssociation_c.getOneR_OIROnR203(v_form_rgo));


ClassIdentifierAttribute_c  v_oida = null;
for ( int i55425 = 0; i55425 < v_oida_set.length; i55425++)
{
  v_oida = v_oida_set[i55425] ;

java.util.UUID         v_newAttr_id = v_oida.Addreference(			    
-1			    
,getRel_id()			    
,v_form_rgo.getObj_id()			    
,v_form_rgo.getOir_id()			    
,v_part_rto.getObj_id()			    
,v_part_rto.getOir_id()) ;



}


   } // End formalize
  public  void Unformalize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Unformalize") ; 
               final ModelRoot modelRoot = getModelRoot();
ReferredToClassInAssoc_c v_part_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(ClassAsSimpleParticipant_c.getManyR_PARTsOnR207(this));


if (v_part_rto != null) {
v_part_rto.Unformalize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c.getOneR_FORMOnR208(this);


if (v_form != null) {
v_form.Migratetoparticipant() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End unformalize
  public  boolean      Canparticipate(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Simple Association", " Operation entered: SimpleAssociation::Canparticipate") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ClassAsSimpleParticipant_test55985_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassAsSimpleParticipant_c selected = (ClassAsSimpleParticipant_c)candidate;
		return selected.getObj_id().equals(p_Id) ;
	}
  }
ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(this, new ClassAsSimpleParticipant_test55985_c());


if ( (  (v_part != null)) )
{

ClassIdentifierAttribute_c v_oida = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(ClassIdentifier_c.getManyO_IDsOnR104(ModelClass_c.getManyO_OBJsOnR201(ClassInAssociation_c.getManyR_OIRsOnR203(ReferredToClassInAssoc_c.getManyR_RTOsOnR204(v_part)))));


return   (v_oida != null) && v_part.getMult() == 0;



}

return false;



   } // End canParticipate

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Simple Association
