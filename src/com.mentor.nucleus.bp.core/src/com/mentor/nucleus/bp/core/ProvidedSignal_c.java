      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ProvidedSignal_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_PROVIDED_SIGNAL extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ProvidedSignal_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ProvidedSignal_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_action_semantics_internal,
       int  p_m_suc_pars)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       // default value for m_action_semantics
       m_action_semantics_internal = p_m_action_semantics_internal;
       m_suc_pars = p_m_suc_pars;
        
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public ProvidedSignal_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_action_semantics_internal,
       int  p_m_suc_pars, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);
      ProvidedSignal_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (ProvidedSignal_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       // default value for m_action_semantics
       new_inst.m_action_semantics_internal = p_m_action_semantics_internal;
       new_inst.m_suc_pars = p_m_suc_pars;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ProvidedSignal_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip,
p_m_action_semantics_internal,
p_m_suc_pars
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ProvidedSignal_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_action_semantics_internal,
       int  p_m_suc_pars){
    InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);
    ProvidedSignal_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (ProvidedSignal_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       // default value for m_action_semantics
       source.m_action_semantics_internal = p_m_action_semantics_internal;
       source.m_suc_pars = p_m_suc_pars;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ProvidedSignal_c new_inst = new ProvidedSignal_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip,
p_m_action_semantics_internal,
p_m_suc_pars
);
    return new_inst;
  }
  public ProvidedSignal_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_descrip = "";   
     m_action_semantics = "";   
     m_action_semantics_internal = "";   
     m_suc_pars = Parsestatus_c.OOA_UNINITIALIZED_ENUM;
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ProvidedSignal_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ProvidedSignal_c)) {
           return false;
       }
       
       ProvidedSignal_c me = (ProvidedSignal_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((ProvidedSignal_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((ProvidedSignal_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ProvidedSignal_c)) {
           return false;
       }
       
       ProvidedSignal_c me = (ProvidedSignal_c)elem;
      if (!getIdCachedValue().equals(((ProvidedSignal_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private String       m_name ;
  private String       m_descrip ;
  private String       m_action_semantics ;
  private String       m_action_semantics_internal ;
  private int  m_suc_pars ;
      
// declare association references from this class
  
  
    
// referring navigation

ProvidedExecutableProperty_c IsSupertypeProvidedExecutableProperty ;
public void relateAcrossR4503To(ProvidedExecutableProperty_c target)
{
	relateAcrossR4503To(target, true);
}
public void relateAcrossR4503To(ProvidedExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeProvidedExecutableProperty) return;  // already related

    if ( IsSupertypeProvidedExecutableProperty != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeProvidedExecutableProperty != null) {
    
        IsSupertypeProvidedExecutableProperty.clearBackPointerR4503To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ProvidedSignal_c.relateAcrossR4503To(ProvidedExecutableProperty_c target)", 
			"Relate performed across R4503 from Provided Signal to Provided Executable Property without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeProvidedExecutableProperty = target ;
        m_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4503To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4503", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4503From(ProvidedExecutableProperty_c target)
{
	unrelateAcrossR4503From(target, true);
}
public void unrelateAcrossR4503From(ProvidedExecutableProperty_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeProvidedExecutableProperty == null) return;  // already unrelated
	
	if (target != IsSupertypeProvidedExecutableProperty) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4503", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4503To(this);
    }
    

      if(IsSupertypeProvidedExecutableProperty != null) {
      
        m_id = IsSupertypeProvidedExecutableProperty.getId();
        IsSupertypeProvidedExecutableProperty = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4503", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ProvidedSignal_c getOneSPR_PSOnR4503(ProvidedExecutableProperty_c [] targets)
{
    return getOneSPR_PSOnR4503(targets, null);
}

public static ProvidedSignal_c getOneSPR_PSOnR4503(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    ProvidedSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSPR_PSOnR4503(targets[i], test);
        }
    }

    return ret_val;
}

public static ProvidedSignal_c getOneSPR_PSOnR4503(ProvidedExecutableProperty_c target)
{
  return getOneSPR_PSOnR4503(target, null);
}

public static ProvidedSignal_c getOneSPR_PSOnR4503(ProvidedExecutableProperty_c target, boolean loadComponent)
{
    return getOneSPR_PSOnR4503(target.getModelRoot(), target, null, loadComponent);
}

public static ProvidedSignal_c getOneSPR_PSOnR4503(ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSPR_PSOnR4503(target.getModelRoot(), target, test);
  }
  return null;
}

public static ProvidedSignal_c getOneSPR_PSOnR4503(ModelRoot modelRoot, ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
	return getOneSPR_PSOnR4503(modelRoot, target, test, true);
}

public static ProvidedSignal_c getOneSPR_PSOnR4503(ModelRoot modelRoot, ProvidedExecutableProperty_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSPR_PSOnR4503(modelRoot,target,test);
}
private static ProvidedSignal_c find_getOneSPR_PSOnR4503(ModelRoot modelRoot, ProvidedExecutableProperty_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ProvidedSignal_c source = (ProvidedSignal_c)target.backPointer_IsSubtypeProvidedSignalIsSubtype_R4503;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ProvidedSignal_c [] getManySPR_PSsOnR4503(ProvidedExecutableProperty_c [] targets)
{
  return getManySPR_PSsOnR4503(targets, null);
}
public static ProvidedSignal_c [] getManySPR_PSsOnR4503(ProvidedExecutableProperty_c [] targets, boolean loadComponent)
{
  return getManySPR_PSsOnR4503(targets, null, loadComponent);
}
public static ProvidedSignal_c [] getManySPR_PSsOnR4503(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
	return getManySPR_PSsOnR4503(targets, test, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR4503(ProvidedExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ProvidedSignal_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ProvidedSignal_c source = (ProvidedSignal_c)targets[i].backPointer_IsSubtypeProvidedSignalIsSubtype_R4503;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ProvidedSignal_c[] ret_set = new ProvidedSignal_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ProvidedSignal_c[0];
  }
  }

public static ProvidedSignal_c [] getManySPR_PSsOnR4503(ProvidedExecutableProperty_c target)
{
  if (target != null) {
    ProvidedExecutableProperty_c [] targetArray = new ProvidedExecutableProperty_c[1];
    targetArray[0] = target;
    return getManySPR_PSsOnR4503(targetArray);
  } else {
    ProvidedSignal_c [] result = new ProvidedSignal_c [0] ;
  return result ;
}
}

public static ProvidedSignal_c [] getManySPR_PSsOnR4503(ProvidedExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
    ProvidedExecutableProperty_c [] targetArray = new ProvidedExecutableProperty_c[1];
    targetArray[0] = target;
    return getManySPR_PSsOnR4503(targetArray, loadComponent);
  } else {
    ProvidedSignal_c [] result = new ProvidedSignal_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

SignalEvent_c backPointer_SignalEvent_R528;

public void setSignalEventOrderInChildListR528(SignalEvent_c target, int index) {
	unrelateAcrossR528From(target);
	SignalEvent_c[] elements = SignalEvent_c.getManySM_SGEVTsOnR528(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR528From((SignalEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR528To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR528To((SignalEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR528To(SignalEvent_c target)
{
  if (target != null) {
    target.relateAcrossR528To(this, true) ;
  }
}

public void relateAcrossR528To(SignalEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR528To(this, notifyChanges) ;
  }
}

public void setBackPointerR528To(SignalEvent_c target)
{
    backPointer_SignalEvent_R528 = target;
}

public void unrelateAcrossR528From(SignalEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR528From(this, true) ;
  }
}

public void unrelateAcrossR528From(SignalEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR528From(this, notifyChanges) ;
  }
}

public void clearBackPointerR528To(SignalEvent_c target)
{
	if (target == backPointer_SignalEvent_R528) {
		backPointer_SignalEvent_R528 = null;
	}
}

public static ProvidedSignal_c getOneSPR_PSOnR528(SignalEvent_c [] targets)
{
    return getOneSPR_PSOnR528(targets, null);
}

public static ProvidedSignal_c getOneSPR_PSOnR528(SignalEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_PSOnR528(targets, test, true);
}

public static ProvidedSignal_c getOneSPR_PSOnR528(SignalEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ProvidedSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ProvidedSignal_c candidate_val = getOneSPR_PSOnR528(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_PSOnR528(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ProvidedSignal_c getOneSPR_PSOnR528(SignalEvent_c target)
{
	return getOneSPR_PSOnR528(target, true);
}
public static ProvidedSignal_c getOneSPR_PSOnR528(SignalEvent_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ProvidedSignal != null){
		target.ProvidedSignal.loadProxy();
	}
	}
    return target.ProvidedSignal ;
  } else {
    return null;
  }
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_PSsOnR528(targets, test, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ProvidedSignal_c[0];
  
  
  LinkedHashSet<ProvidedSignal_c> elementsSet = new LinkedHashSet<ProvidedSignal_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ProvidedSignal == null)
	  targets[i].loadProxy();
    ProvidedSignal_c associate = targets[i].ProvidedSignal;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ProvidedSignal_c[] result = new ProvidedSignal_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c [] targets)
{
  return getManySPR_PSsOnR528(targets, null);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SignalEvent_c [] targetArray = new SignalEvent_c[1];
    targetArray[0] = target;
    return getManySPR_PSsOnR528(targetArray, test, loadComponent);
  } else {
    ProvidedSignal_c [] result = new ProvidedSignal_c [0] ;
    return result ;
  }
  
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_PSsOnR528(target, null, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c target)
{
    return getManySPR_PSsOnR528(target, null, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR528(SignalEvent_c target, boolean loadComponent)
{
    return getManySPR_PSsOnR528(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SignalInvocation_c> backPointer_SignalInvocation_R663 = new ArrayList<SignalInvocation_c>();

public void setSignalInvocationOrderInChildListR663(SignalInvocation_c target, int index) {
	unrelateAcrossR663From(target);
	SignalInvocation_c[] elements = SignalInvocation_c.getManyACT_SGNsOnR663(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR663From((SignalInvocation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR663To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR663To((SignalInvocation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR663To(SignalInvocation_c target)
{
  if (target != null) {
    target.relateAcrossR663To(this, true) ;
  }
}

public void relateAcrossR663To(SignalInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR663To(this, notifyChanges) ;
  }
}

public void setBackPointerR663To(SignalInvocation_c target)
{
  	synchronized (backPointer_SignalInvocation_R663) {
		backPointer_SignalInvocation_R663.add(target);
	}
}

public void unrelateAcrossR663From(SignalInvocation_c target)
{
  if (target != null) {
    target.unrelateAcrossR663From(this, true) ;
  }
}

public void unrelateAcrossR663From(SignalInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR663From(this, notifyChanges) ;
  }
}

public void clearBackPointerR663To(SignalInvocation_c target)
{
  synchronized (backPointer_SignalInvocation_R663) {
	    backPointer_SignalInvocation_R663.remove(target);
	}
}

public static ProvidedSignal_c getOneSPR_PSOnR663(SignalInvocation_c [] targets)
{
    return getOneSPR_PSOnR663(targets, null);
}

public static ProvidedSignal_c getOneSPR_PSOnR663(SignalInvocation_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_PSOnR663(targets, test, true);
}

public static ProvidedSignal_c getOneSPR_PSOnR663(SignalInvocation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ProvidedSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ProvidedSignal_c candidate_val = getOneSPR_PSOnR663(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_PSOnR663(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ProvidedSignal_c getOneSPR_PSOnR663(SignalInvocation_c target)
{
	return getOneSPR_PSOnR663(target, true);
}
public static ProvidedSignal_c getOneSPR_PSOnR663(SignalInvocation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsInvocationOfProvidedSignal ;
  } else {
    return null;
  }
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_PSsOnR663(targets, test, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ProvidedSignal_c[0];
  
  
  LinkedHashSet<ProvidedSignal_c> elementsSet = new LinkedHashSet<ProvidedSignal_c>();
  for (int i = 0; i < targets.length; i++) {
    ProvidedSignal_c associate = targets[i].IsInvocationOfProvidedSignal;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ProvidedSignal_c[] result = new ProvidedSignal_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c [] targets)
{
  return getManySPR_PSsOnR663(targets, null);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SignalInvocation_c [] targetArray = new SignalInvocation_c[1];
    targetArray[0] = target;
    return getManySPR_PSsOnR663(targetArray, test, loadComponent);
  } else {
    ProvidedSignal_c [] result = new ProvidedSignal_c [0] ;
    return result ;
  }
  
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_PSsOnR663(target, null, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c target)
{
    return getManySPR_PSsOnR663(target, null, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR663(SignalInvocation_c target, boolean loadComponent)
{
    return getManySPR_PSsOnR663(target, null, loadComponent);
}


    
  
  
// referred to navigation

ProvidedSignalBody_c backPointer_ProvidedSignalBody_R686;

public void setProvidedSignalBodyOrderInChildListR686(ProvidedSignalBody_c target, int index) {
	unrelateAcrossR686From(target);
	ProvidedSignalBody_c[] elements = ProvidedSignalBody_c.getManyACT_PSBsOnR686(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR686From((ProvidedSignalBody_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR686To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR686To((ProvidedSignalBody_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR686To(ProvidedSignalBody_c target)
{
  if (target != null) {
    target.relateAcrossR686To(this, true) ;
  }
}

public void relateAcrossR686To(ProvidedSignalBody_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR686To(this, notifyChanges) ;
  }
}

public void setBackPointerR686To(ProvidedSignalBody_c target)
{
    backPointer_ProvidedSignalBody_R686 = target;
}

public void unrelateAcrossR686From(ProvidedSignalBody_c target)
{
  if (target != null) {
    target.unrelateAcrossR686From(this, true) ;
  }
}

public void unrelateAcrossR686From(ProvidedSignalBody_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR686From(this, notifyChanges) ;
  }
}

public void clearBackPointerR686To(ProvidedSignalBody_c target)
{
	if (target == backPointer_ProvidedSignalBody_R686) {
		backPointer_ProvidedSignalBody_R686 = null;
	}
}

public static ProvidedSignal_c getOneSPR_PSOnR686(ProvidedSignalBody_c [] targets)
{
    return getOneSPR_PSOnR686(targets, null);
}

public static ProvidedSignal_c getOneSPR_PSOnR686(ProvidedSignalBody_c [] targets, ClassQueryInterface_c test)
{
    return getOneSPR_PSOnR686(targets, test, true);
}

public static ProvidedSignal_c getOneSPR_PSOnR686(ProvidedSignalBody_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ProvidedSignal_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ProvidedSignal_c candidate_val = getOneSPR_PSOnR686(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSPR_PSOnR686(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ProvidedSignal_c getOneSPR_PSOnR686(ProvidedSignalBody_c target)
{
	return getOneSPR_PSOnR686(target, true);
}
public static ProvidedSignal_c getOneSPR_PSOnR686(ProvidedSignalBody_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SpecifiesProcessingForProvidedSignal ;
  } else {
    return null;
  }
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySPR_PSsOnR686(targets, test, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ProvidedSignal_c[0];
  
  
  LinkedHashSet<ProvidedSignal_c> elementsSet = new LinkedHashSet<ProvidedSignal_c>();
  for (int i = 0; i < targets.length; i++) {
    ProvidedSignal_c associate = targets[i].SpecifiesProcessingForProvidedSignal;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ProvidedSignal_c[] result = new ProvidedSignal_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c [] targets)
{
  return getManySPR_PSsOnR686(targets, null);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ProvidedSignalBody_c [] targetArray = new ProvidedSignalBody_c[1];
    targetArray[0] = target;
    return getManySPR_PSsOnR686(targetArray, test, loadComponent);
  } else {
    ProvidedSignal_c [] result = new ProvidedSignal_c [0] ;
    return result ;
  }
  
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c target,
    ClassQueryInterface_c test)
{
    return getManySPR_PSsOnR686(target, null, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c target)
{
    return getManySPR_PSsOnR686(target, null, true);
}

public static ProvidedSignal_c [] getManySPR_PSsOnR686(ProvidedSignalBody_c target, boolean loadComponent)
{
    return getManySPR_PSsOnR686(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R4503
      ProvidedExecutableProperty_c relInst57136 = (ProvidedExecutableProperty_c) baseRoot.getInstanceList(ProvidedExecutableProperty_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57136 == null) {
      			relInst57136 = (ProvidedExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ProvidedExecutableProperty_c.class).get(new Object[] {m_id});
      		}
			if (relInst57136 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57136 = (ProvidedExecutableProperty_c) roots[i].getInstanceList(ProvidedExecutableProperty_c.class).get(new Object[] {m_id});
					if (relInst57136 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57136 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57136) && !isProxy())) {
	      relInst57136.relateAcrossR4503To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4503
      // SPR_PEP
		  inst=IsSupertypeProvidedExecutableProperty;
			unrelateAcrossR4503From(IsSupertypeProvidedExecutableProperty, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ProvidedSignal_c inst = (ProvidedSignal_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ProvidedSignal_c ProvidedSignalInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ProvidedSignal_c result=findProvidedSignalInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ProvidedSignal_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findProvidedSignalInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ProvidedSignal_c findProvidedSignalInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ProvidedSignal_c x = (ProvidedSignal_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ProvidedSignal_c ProvidedSignalInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ProvidedSignalInstance(modelRoot,test,true);
  }
  
  public static ProvidedSignal_c ProvidedSignalInstance(ModelRoot modelRoot)
  {
	 return ProvidedSignalInstance(modelRoot,null,true);
  }

  public static ProvidedSignal_c [] ProvidedSignalInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ProvidedSignal_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ProvidedSignal_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ProvidedSignal_c x = (ProvidedSignal_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ProvidedSignal_c[] ret_set = new ProvidedSignal_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ProvidedSignal_c[0];
			}		
		} 
  }
  public static ProvidedSignal_c [] ProvidedSignalInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ProvidedSignalInstances(modelRoot,test,true);
  }
  public static ProvidedSignal_c [] ProvidedSignalInstances(ModelRoot modelRoot)
  {
	return ProvidedSignalInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Provided Signal.dispose call: ";
	SignalEvent_c testR528Inst = SignalEvent_c.getOneSM_SGEVTOnR528(this, false);

	if ( testR528Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "528 ";	
	}
	SignalInvocation_c testR663Inst = SignalInvocation_c.getOneACT_SGNOnR663(this, false);

	if ( testR663Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "663 ";	
	}
	ProvidedExecutableProperty_c testR4503Inst1 = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this, false);

	if ( testR4503Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4503 ";
	}
	ProvidedSignalBody_c testR686Inst = ProvidedSignalBody_c.getOneACT_PSBOnR686(this, false);

	if ( testR686Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "686 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Provided Signal", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if ( IsSupertypeProvidedExecutableProperty != null )
    {
      return IsSupertypeProvidedExecutableProperty.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypeProvidedExecutableProperty != null )
    {
      return IsSupertypeProvidedExecutableProperty.getId();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeProvidedExecutableProperty != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_id)){
	        return;
	    }
	}else if(m_id != null){
	    if(m_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id", m_id, newValue,true); 
   m_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this));


InterfaceSignal_c v_signal = InterfaceSignal_c.getOneC_ASOnR4004(v_ep);


if ( (  (v_signal != null)) )
{

Setcachedname(			    
v_ep.getName() ) ;


return v_ep.getName();



}

else
{

if ( (  (v_ep != null)) )
{

return v_ep.Getcachedname();



}

else
{

return Getcachedname();



}


}


  }


  public String getDescrip()
  {
ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this));


InterfaceSignal_c v_signal = InterfaceSignal_c.getOneC_ASOnR4004(v_ep);


if ( (  (v_signal != null)) )
{

Setcacheddescrip(			    
v_ep.getDescrip() ) ;


return v_signal.getDescrip();



}

else
{

if ( (  (v_ep != null)) )
{

return v_ep.Getcacheddescrip();



}

else
{

return Getcacheddescrip();



}


}


  }


  public String getAction_semantics()
  {
ModelRoot modelRoot = getModelRoot();
return Ooaofooa.Convertrelocatabletags(modelRoot			    
,getAction_semantics_internal());



  }


  public String getAction_semantics_internal()
  {
    return m_action_semantics_internal ;
  }


  public void setAction_semantics_internal(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_action_semantics_internal)){
	        return;
	    }
	}else if(m_action_semantics_internal != null){
	    if(m_action_semantics_internal.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Action_semantics_internal", m_action_semantics_internal, newValue,true); 
   m_action_semantics_internal = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getSuc_pars()
  {
    return m_suc_pars ;
  }


  public void setSuc_pars(int newValue)
  {
    if(m_suc_pars == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Suc_pars", new Integer(m_suc_pars), new Integer(newValue),true);

   m_suc_pars = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Provided Signal", //$NON-NLS-1$
	  " Operation entered: Provided Signal::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ProvidedSignal_c [] objs = ProvidedSignal_c.ProvidedSignalInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Provided Signal", //$NON-NLS-1$
	  " Operation entered: Provided Signal::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ProvidedSignal_c_test57138_c implements ClassQueryInterface_c
    {
	  ProvidedSignal_c_test57138_c( java.util.UUID            p57139 ) {
	  m_p57139 = p57139;
	  }
	  private java.util.UUID             m_p57139; 
	  public boolean evaluate (Object candidate)
	  {
	      ProvidedSignal_c selected = (ProvidedSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57139));
	      return retval;
	  }
    }

    ProvidedSignal_c [] objs57137 = 
    ProvidedSignal_c.ProvidedSignalInstances(modelRoot, new ProvidedSignal_c_test57138_c(getId())) ;

    if ( (  (objs57137.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Provided Signal", //$NON-NLS-1$
           "Consistency: Object: Provided Signal: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57137.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Provided Signal: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57137.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57137.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Provided Signal", //$NON-NLS-1$
           "Consistency: Object: Provided Signal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57137.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Provided Signal: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57137.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Provided Signal is a subtype in association: rel.Numb = 4503
          // The supertype class is: Provided Executable Property
    class ProvidedExecutableProperty_c_test57143_c implements ClassQueryInterface_c
    {
	  ProvidedExecutableProperty_c_test57143_c( java.util.UUID            p57144 ) {
	  m_p57144 = p57144;
	  }
	  private java.util.UUID             m_p57144; 
	  public boolean evaluate (Object candidate)
	  {
	      ProvidedExecutableProperty_c selected = (ProvidedExecutableProperty_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57144));
	      return retval;
	  }
    }

    ProvidedExecutableProperty_c [] objs57142 = 
    ProvidedExecutableProperty_c.ProvidedExecutablePropertyInstances(modelRoot, new ProvidedExecutableProperty_c_test57143_c(getId())) ;

    if ( (  (objs57142.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Provided Signal", //$NON-NLS-1$
           "Consistency: Object: Provided Signal: Association: 4503: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57142.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Provided Signal: Association: 4503: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57142.length )  , e); 
      }
      retval = false;

    }

          // Provided Signal is a participating class in association: rel.Numb = 528
             // Object: Signal Event
    class SignalEvent_c_test57146_c implements ClassQueryInterface_c
    {
	  SignalEvent_c_test57146_c( java.util.UUID            p57147 ) {
	  m_p57147 = p57147;
	  }
	  private java.util.UUID             m_p57147; 
	  public boolean evaluate (Object candidate)
	  {
	      SignalEvent_c selected = (SignalEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getProvided_signal_id().equals(m_p57147));
	      return retval;
	  }
    }

    SignalEvent_c [] objs57145 = 
    SignalEvent_c.SignalEventInstances(modelRoot, new SignalEvent_c_test57146_c(getId())) ;

    if ( (  (objs57145.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Provided Signal", //$NON-NLS-1$
           "Consistency: Object: Provided Signal: Association: 528: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57145.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Provided Signal: Association: 528: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57145.length )  , e); 
      }
      retval = false;

    }

          // Provided Signal is a participating class in association: rel.Numb = 663
             // Object: Signal Invocation
          // Provided Signal is a participating class in association: rel.Numb = 686
             // Object: Provided Signal Body
    class ProvidedSignalBody_c_test57149_c implements ClassQueryInterface_c
    {
	  ProvidedSignalBody_c_test57149_c( java.util.UUID            p57150 ) {
	  m_p57150 = p57150;
	  }
	  private java.util.UUID             m_p57150; 
	  public boolean evaluate (Object candidate)
	  {
	      ProvidedSignalBody_c selected = (ProvidedSignalBody_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57150));
	      return retval;
	  }
    }

    ProvidedSignalBody_c [] objs57148 = 
    ProvidedSignalBody_c.ProvidedSignalBodyInstances(modelRoot, new ProvidedSignalBody_c_test57149_c(getId())) ;

    if ( (  (objs57148.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Provided Signal", //$NON-NLS-1$
           "Consistency: Object: Provided Signal: Association: 686: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57148.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Provided Signal: Association: 686: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57148.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
setSuc_pars( Parsestatus_c.parseInitial) ;



   } // End initialize
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ProvidedExecutableProperty_c v_pep = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this);


if ( (  (v_pep != null)) )
{

this.unrelateAcrossR4503From(v_pep);


if (v_pep != null) {
v_pep.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ProvidedSignalBody_c v_pro_body = ProvidedSignalBody_c.getOneACT_PSBOnR686(this);


if ( (  (v_pro_body != null)) )
{

this.unrelateAcrossR686From(v_pro_body);


if (v_pro_body != null) {
v_pro_body.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(SignalEvent_c.getOneSM_SGEVTOnR528(this)));


if (   (v_evt != null) )
{

if (v_evt != null) {
v_evt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SignalInvocation_c [] v_invocations = SignalInvocation_c.getManyACT_SGNsOnR663(this);


SignalInvocation_c  v_sgn = null;
for ( int i55324 = 0; i55324 < v_invocations.length; i55324++)
{
  v_sgn = v_invocations[i55324] ;

this.unrelateAcrossR663From(v_sgn);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Isavailableforallocationto(final java.util.UUID         p_Transition_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Isavailableforallocationto") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c v_ifSig = InterfaceSignal_c.getOneC_ASOnR4004(ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this)));


if ( v_ifSig.getDirection() == Ifdirectiontype_c.ClientServer )
{

StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(SignalEvent_c.getOneSM_SGEVTOnR528(this))));


if (   (v_sm != null) )
{

  class Transition_test55564_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Transition_c selected = (Transition_c)candidate;
		return selected.getTrans_id().equals(p_Transition_id) ;
	}
  }
Transition_c v_transition = Transition_c.TransitionInstance(modelRoot, new Transition_test55564_c()) ;


if (   (v_transition != null) )
{

NoEventTransition_c v_ne_txn = NoEventTransition_c.getOneSM_NETXNOnR507(v_transition);


StateMachineState_c v_originatingState = StateMachineState_c.getOneSM_STATEOnR508(v_ne_txn);


if (   (v_ne_txn == null) )
{

v_originatingState = StateMachineState_c.getOneSM_STATEOnR503(StateEventMatrixEntry_c.getOneSM_SEMEOnR504(NewStateTransition_c.getOneSM_NSTXNOnR507(v_transition)));



}

StateEventMatrixEntry_c [] v_semes = StateEventMatrixEntry_c.getManySM_SEMEsOnR503(v_originatingState);


StateEventMatrixEntry_c  v_seme = null;
for ( int i55325 = 0; i55325 < v_semes.length; i55325++)
{
  v_seme = v_semes[i55325] ;

CantHappen_c v_ch = CantHappen_c.getOneSM_CHOnR504(v_seme);


if (   (v_ch == null) )
{

ProvidedSignal_c v_outGoingSig = ProvidedSignal_c.getOneSPR_PSOnR528(SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR503(v_seme)));


if (   (v_outGoingSig != null) && v_outGoingSig == this )
{

return false;



}


}


}

return v_sm.getSm_id().equals(v_transition.getSm_id());



}


}

else
{

return true;



}


}

return false;



   } // End isAvailableForAllocationTo
  public  java.util.UUID         Getcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Getcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
ProvidedExecutableProperty_c v_pep = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this);


return v_pep.Getcomponentid();



   } // End getComponentId
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Converttoinstance") ; 
// just return this instance as an Object
return this;

   } // End convertToInstance
  public  int          Getmessagedirection()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Getmessagedirection") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c v_signal = InterfaceSignal_c.getOneC_ASOnR4004(ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this)));


if ( (  (v_signal != null)) )
{

if ( (v_signal.getDirection() == Ifdirectiontype_c.ClientServer) )
{

return 0;



}

else if ( (v_signal.getDirection() == Ifdirectiontype_c.ServerClient) )
{

return 1;



}

else
{

return 2;



}


}

else
{

return -1;



}


   } // End getMessageDirection
  public  boolean      Issynchronized()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Issynchronized") ; 
               final ModelRoot modelRoot = getModelRoot();
ProvidedExecutableProperty_c v_pep = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this);


if ( (  (v_pep != null)) )
{

return v_pep.Issynchronized();



}

return true;



   } // End isSynchronized
  public  void Collectchanges(final Object p_Changelist)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Collectchanges") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Util_c.Createelementchange(			    
"removed"			    
,p_Changelist			    
,Converttoinstance()			    
,true ) ;



}


   } // End collectChanges
  public  void Synchronize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Synchronize") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Provision_c v_provision = Provision_c.getOneC_POnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(this));


if ( (  (v_provision != null)) )
{

if (v_provision != null) {
v_provision.Synchronize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End synchronize
  public  String       Getcachedname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Getcachedname") ; 
	return m_name;
   } // End getCachedName
  public  void Setcachedname(final String       p_Name)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Setcachedname") ; 
	m_name = p_Name;
   } // End setCachedName
  public  void Initializeunparsed()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Initializeunparsed") ; 
               final ModelRoot modelRoot = getModelRoot();
ProvidedSignalBody_c v_psb = ProvidedSignalBody_c.getOneACT_PSBOnR686(this);


if (   (v_psb == null) )
{

v_psb = new ProvidedSignalBody_c(modelRoot) ;


  this.relateAcrossR686To(v_psb);



}

Body_c v_bdy = Body_c.getOneACT_ACTOnR698(v_psb);


if (   (v_bdy == null) )
{

v_bdy = new Body_c(modelRoot) ;


if (v_bdy != null) {
  v_bdy.relateAcrossR698To(v_psb);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

Block_c v_blk = Block_c.getOneACT_BLKOnR650(v_bdy);


if (   (v_blk == null) )
{

v_blk = new Block_c(modelRoot) ;


if (v_bdy != null) {
  v_bdy.relateAcrossR650To(v_blk);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_bdy != null) {
  v_bdy.relateAcrossR612To(v_blk);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End initializeUnparsed
  public  String       Getcacheddescrip()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Getcacheddescrip") ; 
	return m_descrip;
   } // End getCachedDescrip
  public  void Setcacheddescrip(final String       p_Descrip)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Provided Signal", " Operation entered: ProvidedSignal::Setcacheddescrip") ; 
	m_descrip = p_Descrip;
   } // End setCachedDescrip

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Provided Signal
