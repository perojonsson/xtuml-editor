package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ElseStmt_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ELSE_STMT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ElseStmt_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ElseStmt_c(ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_block_id, java.util.UUID p_m_if_statement_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_if_statement_id = IdAssigner.preprocessUUID(p_m_if_statement_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public ElseStmt_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			java.util.UUID p_m_if_statement_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);
		ElseStmt_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (ElseStmt_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_if_statement_id = IdAssigner
						.preprocessUUID(p_m_if_statement_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ElseStmt_c(modelRoot, p_m_statement_id,
					p_m_block_id, p_m_if_statement_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ElseStmt_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			java.util.UUID p_m_if_statement_id) {
		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);
		ElseStmt_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (ElseStmt_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_if_statement_id = IdAssigner
						.preprocessUUID(p_m_if_statement_id);

				return source;
			}
		}
		// there is no instance matching the id
		ElseStmt_c new_inst = new ElseStmt_c(modelRoot, p_m_statement_id,
				p_m_block_id, p_m_if_statement_id);
		return new_inst;
	}
	public ElseStmt_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_block_id = IdAssigner.NULL_UUID;
		m_if_statement_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ElseStmt_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ElseStmt_c)) {
			return false;
		}

		ElseStmt_c me = (ElseStmt_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((ElseStmt_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(((ElseStmt_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ElseStmt_c)) {
			return false;
		}

		ElseStmt_c me = (ElseStmt_c) elem;
		if (!getStatement_idCachedValue().equals(
				((ElseStmt_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_block_id;
	private java.util.UUID m_if_statement_id;

	// declare association references from this class

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseStmt_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from Else Stmt to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static ElseStmt_c getOneACT_EOnR603(Statement_c[] targets) {
		return getOneACT_EOnR603(targets, null);
	}

	public static ElseStmt_c getOneACT_EOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		ElseStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_EOnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseStmt_c getOneACT_EOnR603(Statement_c target) {
		return getOneACT_EOnR603(target, null);
	}

	public static ElseStmt_c getOneACT_EOnR603(Statement_c target,
			boolean loadComponent) {
		return getOneACT_EOnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseStmt_c getOneACT_EOnR603(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_EOnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseStmt_c getOneACT_EOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_EOnR603(modelRoot, target, test, true);
	}

	public static ElseStmt_c getOneACT_EOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_EOnR603(modelRoot, target, test);
	}
	private static ElseStmt_c find_getOneACT_EOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ElseStmt_c source = (ElseStmt_c) target.backPointer_IsSubtypeElseStmtIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ElseStmt_c[] getManyACT_EsOnR603(Statement_c[] targets) {
		return getManyACT_EsOnR603(targets, null);
	}
	public static ElseStmt_c[] getManyACT_EsOnR603(Statement_c[] targets,
			boolean loadComponent) {
		return getManyACT_EsOnR603(targets, null, loadComponent);
	}
	public static ElseStmt_c[] getManyACT_EsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_EsOnR603(targets, test, true);
	}

	public static ElseStmt_c[] getManyACT_EsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ElseStmt_c source = (ElseStmt_c) targets[i].backPointer_IsSubtypeElseStmtIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ElseStmt_c[] ret_set = new ElseStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseStmt_c[0];
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR603(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR603(targetArray);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR603(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR603(targetArray, loadComponent);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}
	}

	// referring navigation

	IfStmt_c IfStmt;
	public void relateAcrossR683To(IfStmt_c target) {
		relateAcrossR683To(target, true);
	}
	public void relateAcrossR683To(IfStmt_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IfStmt)
			return; // already related

		if (IfStmt != target) {

			Object oldKey = getInstanceKey();

			if (IfStmt != null) {

				IfStmt.clearBackPointerR683To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseStmt_c.relateAcrossR683To(IfStmt_c target)",
									"Relate performed across R683 from Else Stmt to If Stmt without unrelate of prior instance.");
				}
			}

			IfStmt = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_if_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR683To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR683From(IfStmt_c target) {
		unrelateAcrossR683From(target, true);
	}
	public void unrelateAcrossR683From(IfStmt_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IfStmt == null)
			return; // already unrelated

		if (target != IfStmt) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R683",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR683To(this);
		}

		if (IfStmt != null) {

			m_if_statement_id = IfStmt.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_if_statement_id)) {
				m_if_statement_id = IfStmt.getStatement_idCachedValue();
			}
			IfStmt = null;
			target.removeRef();
		}
	}

	public static ElseStmt_c getOneACT_EOnR683(IfStmt_c[] targets) {
		return getOneACT_EOnR683(targets, null);
	}

	public static ElseStmt_c getOneACT_EOnR683(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		ElseStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_EOnR683(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseStmt_c getOneACT_EOnR683(IfStmt_c target) {
		return getOneACT_EOnR683(target, null);
	}

	public static ElseStmt_c getOneACT_EOnR683(IfStmt_c target,
			boolean loadComponent) {
		return getOneACT_EOnR683(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseStmt_c getOneACT_EOnR683(IfStmt_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_EOnR683(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseStmt_c getOneACT_EOnR683(ModelRoot modelRoot,
			IfStmt_c target, ClassQueryInterface_c test) {
		return getOneACT_EOnR683(modelRoot, target, test, true);
	}

	public static ElseStmt_c getOneACT_EOnR683(ModelRoot modelRoot,
			IfStmt_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_EOnR683(modelRoot, target, test);
	}
	private static ElseStmt_c find_getOneACT_EOnR683(ModelRoot modelRoot,
			IfStmt_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ElseStmt_c source = (ElseStmt_c) target.backPointer_HasElseStmtHas_R683;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ElseStmt_c[] getManyACT_EsOnR683(IfStmt_c[] targets) {
		return getManyACT_EsOnR683(targets, null);
	}
	public static ElseStmt_c[] getManyACT_EsOnR683(IfStmt_c[] targets,
			boolean loadComponent) {
		return getManyACT_EsOnR683(targets, null, loadComponent);
	}
	public static ElseStmt_c[] getManyACT_EsOnR683(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_EsOnR683(targets, test, true);
	}

	public static ElseStmt_c[] getManyACT_EsOnR683(IfStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ElseStmt_c source = (ElseStmt_c) targets[i].backPointer_HasElseStmtHas_R683;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ElseStmt_c[] ret_set = new ElseStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseStmt_c[0];
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR683(IfStmt_c target) {
		if (target != null) {
			IfStmt_c[] targetArray = new IfStmt_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR683(targetArray);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR683(IfStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			IfStmt_c[] targetArray = new IfStmt_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR683(targetArray, loadComponent);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}
	}

	// referring navigation

	Block_c ControlsBlock;
	public void relateAcrossR606To(Block_c target) {
		relateAcrossR606To(target, true);
	}
	public void relateAcrossR606To(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ControlsBlock)
			return; // already related

		if (ControlsBlock != target) {

			Object oldKey = getInstanceKey();

			if (ControlsBlock != null) {

				ControlsBlock.clearBackPointerR606To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseStmt_c.relateAcrossR606To(Block_c target)",
									"Relate performed across R606 from Else Stmt to Block without unrelate of prior instance.");
				}
			}

			ControlsBlock = target;
			m_block_id = target.getBlock_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR606To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR606From(Block_c target) {
		unrelateAcrossR606From(target, true);
	}
	public void unrelateAcrossR606From(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ControlsBlock == null)
			return; // already unrelated

		if (target != ControlsBlock) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R606",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR606To(this);
		}

		if (ControlsBlock != null) {

			m_block_id = ControlsBlock.getBlock_id();
			ControlsBlock = null;
			target.removeRef();
		}
	}

	public static ElseStmt_c getOneACT_EOnR606(Block_c[] targets) {
		return getOneACT_EOnR606(targets, null);
	}

	public static ElseStmt_c getOneACT_EOnR606(Block_c[] targets,
			ClassQueryInterface_c test) {
		ElseStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_EOnR606(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseStmt_c getOneACT_EOnR606(Block_c target) {
		return getOneACT_EOnR606(target, null);
	}

	public static ElseStmt_c getOneACT_EOnR606(Block_c target,
			boolean loadComponent) {
		return getOneACT_EOnR606(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseStmt_c getOneACT_EOnR606(Block_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_EOnR606(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseStmt_c getOneACT_EOnR606(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		return getOneACT_EOnR606(modelRoot, target, test, true);
	}

	public static ElseStmt_c getOneACT_EOnR606(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_EOnR606(modelRoot, target, test);
	}
	private static ElseStmt_c find_getOneACT_EOnR606(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ElseStmt_c source = (ElseStmt_c) target.backPointer_ElseStmt_R606;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ElseStmt_c[] getManyACT_EsOnR606(Block_c[] targets) {
		return getManyACT_EsOnR606(targets, null);
	}
	public static ElseStmt_c[] getManyACT_EsOnR606(Block_c[] targets,
			boolean loadComponent) {
		return getManyACT_EsOnR606(targets, null, loadComponent);
	}
	public static ElseStmt_c[] getManyACT_EsOnR606(Block_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_EsOnR606(targets, test, true);
	}

	public static ElseStmt_c[] getManyACT_EsOnR606(Block_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ElseStmt_c source = (ElseStmt_c) targets[i].backPointer_ElseStmt_R606;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ElseStmt_c[] ret_set = new ElseStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseStmt_c[0];
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR606(Block_c target) {
		if (target != null) {
			Block_c[] targetArray = new Block_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR606(targetArray);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR606(Block_c target,
			boolean loadComponent) {
		if (target != null) {
			Block_c[] targetArray = new Block_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR606(targetArray, loadComponent);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	IfStmt_c backPointer_IfStmt_R692;

	public void setIfStmtOrderInChildListR692(IfStmt_c target, int index) {
		unrelateAcrossR692From(target);
		IfStmt_c[] elements = IfStmt_c.getManyACT_IFsOnR692(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR692From((IfStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR692To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR692To((IfStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR692To(IfStmt_c target) {
		if (target != null) {
			target.relateAcrossR692To(this, true);
		}
	}

	public void relateAcrossR692To(IfStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR692To(this, notifyChanges);
		}
	}

	public void setBackPointerR692To(IfStmt_c target) {
		backPointer_IfStmt_R692 = target;
	}

	public void unrelateAcrossR692From(IfStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR692From(this, true);
		}
	}

	public void unrelateAcrossR692From(IfStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR692From(this, notifyChanges);
		}
	}

	public void clearBackPointerR692To(IfStmt_c target) {
		if (target == backPointer_IfStmt_R692) {
			backPointer_IfStmt_R692 = null;
		}
	}

	public static ElseStmt_c getOneACT_EOnR692(IfStmt_c[] targets) {
		return getOneACT_EOnR692(targets, null);
	}

	public static ElseStmt_c getOneACT_EOnR692(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_EOnR692(targets, test, true);
	}

	public static ElseStmt_c getOneACT_EOnR692(IfStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ElseStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ElseStmt_c candidate_val = getOneACT_EOnR692(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_EOnR692(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ElseStmt_c getOneACT_EOnR692(IfStmt_c target) {
		return getOneACT_EOnR692(target, true);
	}
	public static ElseStmt_c getOneACT_EOnR692(IfStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.WasExecutingWhenHaltedElseStmt;
		} else {
			return null;
		}
	}

	public static ElseStmt_c[] getManyACT_EsOnR692(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_EsOnR692(targets, test, true);
	}

	public static ElseStmt_c [] getManyACT_EsOnR692(IfStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ElseStmt_c[0];
  
  
  LinkedHashSet<ElseStmt_c> elementsSet = new LinkedHashSet<ElseStmt_c>();
  for (int i = 0; i < targets.length; i++) {
    ElseStmt_c associate = targets[i].WasExecutingWhenHaltedElseStmt;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ElseStmt_c[] result = new ElseStmt_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ElseStmt_c[] getManyACT_EsOnR692(IfStmt_c[] targets) {
		return getManyACT_EsOnR692(targets, null);
	}

	public static ElseStmt_c[] getManyACT_EsOnR692(IfStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			IfStmt_c[] targetArray = new IfStmt_c[1];
			targetArray[0] = target;
			return getManyACT_EsOnR692(targetArray, test, loadComponent);
		} else {
			ElseStmt_c[] result = new ElseStmt_c[0];
			return result;
		}

	}

	public static ElseStmt_c[] getManyACT_EsOnR692(IfStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_EsOnR692(target, null, true);
	}

	public static ElseStmt_c[] getManyACT_EsOnR692(IfStmt_c target) {
		return getManyACT_EsOnR692(target, null, true);
	}

	public static ElseStmt_c[] getManyACT_EsOnR692(IfStmt_c target,
			boolean loadComponent) {
		return getManyACT_EsOnR692(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R603
		Statement_c relInst57926 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst57926 == null) {
			relInst57926 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst57926 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst57926 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst57926 != null)
					break;
			}
		}
		//synchronized
		if (relInst57926 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst57926) && !isProxy())) {
				relInst57926.relateAcrossR603To(this, notifyChanges);
			}
		}

		if (IfStmt == null) {
			// R683
			IfStmt_c relInst57927 = (IfStmt_c) baseRoot.getInstanceList(
					IfStmt_c.class).get(new Object[]{m_if_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57927 == null) {
				relInst57927 = (IfStmt_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(IfStmt_c.class)
						.get(new Object[]{m_if_statement_id});
			}
			if (relInst57927 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57927 = (IfStmt_c) roots[i].getInstanceList(
							IfStmt_c.class)
							.get(new Object[]{m_if_statement_id});
					if (relInst57927 != null)
						break;
				}
			}
			//synchronized
			if (relInst57927 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57927) && !isProxy())) {
					relInst57927.relateAcrossR683To(this, notifyChanges);
				}
			}
		}

		if (ControlsBlock == null) {
			// R606
			Block_c relInst57928 = (Block_c) baseRoot.getInstanceList(
					Block_c.class).get(new Object[]{m_block_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57928 == null) {
				relInst57928 = (Block_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Block_c.class)
						.get(new Object[]{m_block_id});
			}
			if (relInst57928 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57928 = (Block_c) roots[i].getInstanceList(
							Block_c.class).get(new Object[]{m_block_id});
					if (relInst57928 != null)
						break;
				}
			}
			//synchronized
			if (relInst57928 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57928) && !isProxy())) {
					relInst57928.relateAcrossR606To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R683
		// ACT_IF
		inst = IfStmt;
		unrelateAcrossR683From(IfStmt, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R606
		// ACT_BLK
		inst = ControlsBlock;
		unrelateAcrossR606From(ControlsBlock, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ElseStmt_c inst = (ElseStmt_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ElseStmt_c ElseStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ElseStmt_c result = findElseStmtInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static ElseStmt_c findElseStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElseStmt_c x = (ElseStmt_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ElseStmt_c ElseStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ElseStmtInstance(modelRoot, test, true);
	}

	public static ElseStmt_c ElseStmtInstance(ModelRoot modelRoot) {
		return ElseStmtInstance(modelRoot, null, true);
	}

	public static ElseStmt_c[] ElseStmtInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ElseStmt_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElseStmt_c x = (ElseStmt_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ElseStmt_c[] ret_set = new ElseStmt_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ElseStmt_c[0];
			}
		}
	}
	public static ElseStmt_c[] ElseStmtInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ElseStmtInstances(modelRoot, test, true);
	}
	public static ElseStmt_c[] ElseStmtInstances(ModelRoot modelRoot) {
		return ElseStmtInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Else Stmt.dispose call: ";
		Statement_c testR603Inst6 = Statement_c
				.getOneACT_SMTOnR603(this, false);

		if (testR603Inst6 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		IfStmt_c testR692Inst = IfStmt_c.getOneACT_IFOnR692(this, false);

		if (testR692Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "692 ";
		}
		IfStmt_c testR683Inst = IfStmt_c.getOneACT_IFOnR683(this, false);

		if (testR683Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "683 ";
		}
		Block_c testR606Inst = Block_c.getOneACT_BLKOnR606(this, false);

		if (testR606Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "606 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Else Stmt", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("block_id")) {
			return true;
		}
		if (attributeName.equals("if_statement_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getBlock_idLongBased() {
		if (ControlsBlock != null) {
			return ControlsBlock.getBlock_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBlock_id() {
		if (ControlsBlock != null) {
			return ControlsBlock.getBlock_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBlock_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_block_id))
			return m_block_id;
		else
			return getBlock_id();
	}

	public void setBlock_id(java.util.UUID newValue) {
		m_block_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getIf_statement_idLongBased() {
		if (IfStmt != null) {
			return IfStmt.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getIf_statement_id() {
		if (IfStmt != null) {
			return IfStmt.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIf_statement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_if_statement_id))
			return m_if_statement_id;
		else
			return getIf_statement_id();
	}

	public void setIf_statement_id(java.util.UUID newValue) {
		m_if_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Else Stmt", //$NON-NLS-1$
				" Operation entered: Else Stmt::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ElseStmt_c[] objs = ElseStmt_c
				.ElseStmtInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Else Stmt", //$NON-NLS-1$
				" Operation entered: Else Stmt::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ElseStmt_c_test57930_c implements ClassQueryInterface_c {
			ElseStmt_c_test57930_c(java.util.UUID p57931) {
				m_p57931 = p57931;
			}
			private java.util.UUID m_p57931;
			public boolean evaluate(Object candidate) {
				ElseStmt_c selected = (ElseStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57931));
				return retval;
			}
		}

		ElseStmt_c[] objs57929 = ElseStmt_c.ElseStmtInstances(modelRoot,
				new ElseStmt_c_test57930_c(getStatement_id()));

		if (((objs57929.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Else Stmt", //$NON-NLS-1$
								"Consistency: Object: Else Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57929.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Else Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs57929.length), e);
			}
			retval = false;

		}

		if (((objs57929.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Else Stmt", //$NON-NLS-1$
								"Consistency: Object: Else Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57929.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Else Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57929.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Else Stmt is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test57935_c implements ClassQueryInterface_c {
			Statement_c_test57935_c(java.util.UUID p57936) {
				m_p57936 = p57936;
			}
			private java.util.UUID m_p57936;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57936));
				return retval;
			}
		}

		Statement_c[] objs57934 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57935_c(getStatement_id()));

		if (((objs57934.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Else Stmt", //$NON-NLS-1$
								"Consistency: Object: Else Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57934.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Else Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57934.length), e);
			}
			retval = false;

		}

		// Else Stmt is a referring class in association: rel.Numb = 606
		// The participating class is: Block
		class Block_c_test57938_c implements ClassQueryInterface_c {
			Block_c_test57938_c(java.util.UUID p57939) {
				m_p57939 = p57939;
			}
			private java.util.UUID m_p57939;
			public boolean evaluate(Object candidate) {
				Block_c selected = (Block_c) candidate;
				boolean retval = false;
				retval = (selected.getBlock_id().equals(m_p57939));
				return retval;
			}
		}

		Block_c[] objs57937 = Block_c.BlockInstances(modelRoot,
				new Block_c_test57938_c(getBlock_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57937.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Else Stmt", //$NON-NLS-1$
								"Consistency: Object: Else Stmt: Association: 606: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57937.length)
										+ " Block_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Else Stmt: Association: 606: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57937.length)
										+ " Block_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Else Stmt is a referring class in association: rel.Numb = 683
		// The participating class is: If Stmt
		class IfStmt_c_test57941_c implements ClassQueryInterface_c {
			IfStmt_c_test57941_c(java.util.UUID p57942) {
				m_p57942 = p57942;
			}
			private java.util.UUID m_p57942;
			public boolean evaluate(Object candidate) {
				IfStmt_c selected = (IfStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57942));
				return retval;
			}
		}

		IfStmt_c[] objs57940 = IfStmt_c.IfStmtInstances(modelRoot,
				new IfStmt_c_test57941_c(getIf_statement_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57940.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Else Stmt", //$NON-NLS-1$
								"Consistency: Object: Else Stmt: Association: 683: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57940.length)
										+ " If_Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Else Stmt: Association: 683: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57940.length)
										+ " If_Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Else Stmt is a participating class in association: rel.Numb = 692
		// Object: If Stmt
		class IfStmt_c_test57944_c implements ClassQueryInterface_c {
			IfStmt_c_test57944_c(java.util.UUID p57945) {
				m_p57945 = p57945;
			}
			private java.util.UUID m_p57945;
			public boolean evaluate(Object candidate) {
				IfStmt_c selected = (IfStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getElse_statement_id().equals(m_p57945));
				return retval;
			}
		}

		IfStmt_c[] objs57943 = IfStmt_c.IfStmtInstances(modelRoot,
				new IfStmt_c_test57944_c(getStatement_id()));

		if (((objs57943.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Else Stmt", //$NON-NLS-1$
								"Consistency: Object: Else Stmt: Association: 692: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57943.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Else Stmt: Association: 692: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57943.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Else Stmt",
				" Operation entered: ElseStmt::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Block_c v_blk = Block_c.getOneACT_BLKOnR606(this);

		if (((v_blk != null))) {

			this.unrelateAcrossR606From(v_blk);

			if (v_blk != null) {
				v_blk.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		IfStmt_c v_ifstmt = IfStmt_c.getOneACT_IFOnR683(this);

		if (((v_ifstmt != null))) {

			this.unrelateAcrossR683From(v_ifstmt);

		}

		Statement_c v_stmt = Statement_c.getOneACT_SMTOnR603(this);

		if (((v_stmt != null))) {

			this.unrelateAcrossR603From(v_stmt);

		}

		delete();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Else Stmt
