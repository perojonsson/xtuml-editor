package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.GenerateToClass_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_GENERATE_TO_CLASS extends genericEvent_c {
	public abstract int getEvtcode();
}

public class GenerateToClass_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public GenerateToClass_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public GenerateToClass_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(GenerateToClass_c.class);
		GenerateToClass_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (GenerateToClass_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new GenerateToClass_c(modelRoot, p_m_statement_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public GenerateToClass_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateToClass_c.class);
		GenerateToClass_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (GenerateToClass_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);

				return source;
			}
		}
		// there is no instance matching the id
		GenerateToClass_c new_inst = new GenerateToClass_c(modelRoot,
				p_m_statement_id);
		return new_inst;
	}
	public GenerateToClass_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof GenerateToClass_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof GenerateToClass_c)) {
			return false;
		}

		GenerateToClass_c me = (GenerateToClass_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((GenerateToClass_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((GenerateToClass_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof GenerateToClass_c)) {
			return false;
		}

		GenerateToClass_c me = (GenerateToClass_c) elem;
		if (!getStatement_idCachedValue().equals(
				((GenerateToClass_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;

	// declare association references from this class

	// referring navigation

	GenerateSmEventStatement_c IsSupertypeGenerateSmEventStatement;
	public void relateAcrossR705To(GenerateSmEventStatement_c target) {
		relateAcrossR705To(target, true);
	}
	public void relateAcrossR705To(GenerateSmEventStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeGenerateSmEventStatement)
			return; // already related

		if (IsSupertypeGenerateSmEventStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeGenerateSmEventStatement != null) {

				IsSupertypeGenerateSmEventStatement
						.clearBackPointerR705To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"GenerateToClass_c.relateAcrossR705To(GenerateSmEventStatement_c target)",
									"Relate performed across R705 from Generate to Class to Generate SM Event Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeGenerateSmEventStatement = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR705To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR705From(GenerateSmEventStatement_c target) {
		unrelateAcrossR705From(target, true);
	}
	public void unrelateAcrossR705From(GenerateSmEventStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeGenerateSmEventStatement == null)
			return; // already unrelated

		if (target != IsSupertypeGenerateSmEventStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R705",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR705To(this);
		}

		if (IsSupertypeGenerateSmEventStatement != null) {

			m_statement_id = IsSupertypeGenerateSmEventStatement
					.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = IsSupertypeGenerateSmEventStatement
						.getStatement_idCachedValue();
			}
			IsSupertypeGenerateSmEventStatement = null;
			target.removeRef();
		}
	}

	public static GenerateToClass_c getOneE_GAROnR705(
			GenerateSmEventStatement_c[] targets) {
		return getOneE_GAROnR705(targets, null);
	}

	public static GenerateToClass_c getOneE_GAROnR705(
			GenerateSmEventStatement_c[] targets, ClassQueryInterface_c test) {
		GenerateToClass_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneE_GAROnR705(targets[i], test);
			}
		}

		return ret_val;
	}

	public static GenerateToClass_c getOneE_GAROnR705(
			GenerateSmEventStatement_c target) {
		return getOneE_GAROnR705(target, null);
	}

	public static GenerateToClass_c getOneE_GAROnR705(
			GenerateSmEventStatement_c target, boolean loadComponent) {
		return getOneE_GAROnR705(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static GenerateToClass_c getOneE_GAROnR705(
			GenerateSmEventStatement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneE_GAROnR705(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static GenerateToClass_c getOneE_GAROnR705(ModelRoot modelRoot,
			GenerateSmEventStatement_c target, ClassQueryInterface_c test) {
		return getOneE_GAROnR705(modelRoot, target, test, true);
	}

	public static GenerateToClass_c getOneE_GAROnR705(ModelRoot modelRoot,
			GenerateSmEventStatement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneE_GAROnR705(modelRoot, target, test);
	}
	private static GenerateToClass_c find_getOneE_GAROnR705(
			ModelRoot modelRoot, GenerateSmEventStatement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			GenerateToClass_c source = (GenerateToClass_c) target.backPointer_IsSubtypeGenerateToClassIsSubtype_R705;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static GenerateToClass_c[] getManyE_GARsOnR705(
			GenerateSmEventStatement_c[] targets) {
		return getManyE_GARsOnR705(targets, null);
	}
	public static GenerateToClass_c[] getManyE_GARsOnR705(
			GenerateSmEventStatement_c[] targets, boolean loadComponent) {
		return getManyE_GARsOnR705(targets, null, loadComponent);
	}
	public static GenerateToClass_c[] getManyE_GARsOnR705(
			GenerateSmEventStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyE_GARsOnR705(targets, test, true);
	}

	public static GenerateToClass_c[] getManyE_GARsOnR705(
			GenerateSmEventStatement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new GenerateToClass_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(GenerateToClass_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			GenerateToClass_c source = (GenerateToClass_c) targets[i].backPointer_IsSubtypeGenerateToClassIsSubtype_R705;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			GenerateToClass_c[] ret_set = new GenerateToClass_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new GenerateToClass_c[0];
		}
	}

	public static GenerateToClass_c[] getManyE_GARsOnR705(
			GenerateSmEventStatement_c target) {
		if (target != null) {
			GenerateSmEventStatement_c[] targetArray = new GenerateSmEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_GARsOnR705(targetArray);
		} else {
			GenerateToClass_c[] result = new GenerateToClass_c[0];
			return result;
		}
	}

	public static GenerateToClass_c[] getManyE_GARsOnR705(
			GenerateSmEventStatement_c target, boolean loadComponent) {
		if (target != null) {
			GenerateSmEventStatement_c[] targetArray = new GenerateSmEventStatement_c[1];
			targetArray[0] = target;
			return getManyE_GARsOnR705(targetArray, loadComponent);
		} else {
			GenerateToClass_c[] result = new GenerateToClass_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R705
		GenerateSmEventStatement_c relInst56023 = (GenerateSmEventStatement_c) baseRoot
				.getInstanceList(GenerateSmEventStatement_c.class).get(
						new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56023 == null) {
			relInst56023 = (GenerateSmEventStatement_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(GenerateSmEventStatement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst56023 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56023 = (GenerateSmEventStatement_c) roots[i]
						.getInstanceList(GenerateSmEventStatement_c.class).get(
								new Object[]{m_statement_id});
				if (relInst56023 != null)
					break;
			}
		}
		//synchronized
		if (relInst56023 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56023) && !isProxy())) {
				relInst56023.relateAcrossR705To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R705
		// E_GSME
		inst = IsSupertypeGenerateSmEventStatement;
		unrelateAcrossR705From(IsSupertypeGenerateSmEventStatement,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(GenerateToClass_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final GenerateToClass_c inst = (GenerateToClass_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateToClass_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static GenerateToClass_c GenerateToClassInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		GenerateToClass_c result = findGenerateToClassInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static GenerateToClass_c findGenerateToClassInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateToClass_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				GenerateToClass_c x = (GenerateToClass_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static GenerateToClass_c GenerateToClassInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return GenerateToClassInstance(modelRoot, test, true);
	}

	public static GenerateToClass_c GenerateToClassInstance(ModelRoot modelRoot) {
		return GenerateToClassInstance(modelRoot, null, true);
	}

	public static GenerateToClass_c[] GenerateToClassInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(GenerateToClass_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				GenerateToClass_c x = (GenerateToClass_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				GenerateToClass_c[] ret_set = new GenerateToClass_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new GenerateToClass_c[0];
			}
		}
	}
	public static GenerateToClass_c[] GenerateToClassInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return GenerateToClassInstances(modelRoot, test, true);
	}
	public static GenerateToClass_c[] GenerateToClassInstances(
			ModelRoot modelRoot) {
		return GenerateToClassInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Generate to Class.dispose call: ";
		GenerateSmEventStatement_c testR705Inst3 = GenerateSmEventStatement_c
				.getOneE_GSMEOnR705(this, false);

		if (testR705Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "705 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Generate to Class",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeGenerateSmEventStatement != null) {
			return IsSupertypeGenerateSmEventStatement
					.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeGenerateSmEventStatement != null) {
			return IsSupertypeGenerateSmEventStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeGenerateSmEventStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Generate to Class", //$NON-NLS-1$
				" Operation entered: Generate to Class::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		GenerateToClass_c[] objs = GenerateToClass_c.GenerateToClassInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generate to Class", //$NON-NLS-1$
				" Operation entered: Generate to Class::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class GenerateToClass_c_test56025_c implements ClassQueryInterface_c {
			GenerateToClass_c_test56025_c(java.util.UUID p56026) {
				m_p56026 = p56026;
			}
			private java.util.UUID m_p56026;
			public boolean evaluate(Object candidate) {
				GenerateToClass_c selected = (GenerateToClass_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56026));
				return retval;
			}
		}

		GenerateToClass_c[] objs56024 = GenerateToClass_c
				.GenerateToClassInstances(modelRoot,
						new GenerateToClass_c_test56025_c(getStatement_id()));

		if (((objs56024.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Generate to Class", //$NON-NLS-1$
								"Consistency: Object: Generate to Class: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56024.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate to Class: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56024.length), e);
			}
			retval = false;

		}

		if (((objs56024.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Generate to Class", //$NON-NLS-1$
								"Consistency: Object: Generate to Class: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56024.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate to Class: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56024.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Generate to Class is a subtype in association: rel.Numb = 705
		// The supertype class is: Generate SM Event Statement
		class GenerateSmEventStatement_c_test56030_c
				implements
					ClassQueryInterface_c {
			GenerateSmEventStatement_c_test56030_c(java.util.UUID p56031) {
				m_p56031 = p56031;
			}
			private java.util.UUID m_p56031;
			public boolean evaluate(Object candidate) {
				GenerateSmEventStatement_c selected = (GenerateSmEventStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p56031));
				return retval;
			}
		}

		GenerateSmEventStatement_c[] objs56029 = GenerateSmEventStatement_c
				.GenerateSmEventStatementInstances(modelRoot,
						new GenerateSmEventStatement_c_test56030_c(
								getStatement_id()));

		if (((objs56029.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Generate to Class", //$NON-NLS-1$
								"Consistency: Object: Generate to Class: Association: 705: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56029.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generate to Class: Association: 705: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56029.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generate to Class",
				" Operation entered: GenerateToClass::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Generate to Class",
				" Operation entered: GenerateToClass::Execute");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR707(GenerateSmEventStatement_c
						.getOneE_GSMEOnR705(this));

		PendingEvent_c v_evtInst = new PendingEvent_c(modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_evtInst));

		if (v_evt != null) {
			v_evt.relateAcrossR2906To(v_evtInst);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		EventSpecificationStatement_c v_evt_spec_stmt = EventSpecificationStatement_c
				.getOneE_ESSOnR701(GenerateEventStatement_c
						.getOneE_GESOnR703(GenerateSmEventStatement_c
								.getOneE_GSMEOnR705(this)));

		boolean v_valueComputationComplete = v_evt_spec_stmt.Hookupeventdata(
				v_evtInst.getEvent_id(), p_Stack_frame_id);

		if ((v_valueComputationComplete)) {

			if (v_evt_spec_stmt != null) {
				v_evt_spec_stmt.Relatetooriginatinginst(
						v_evtInst.getEvent_id(), p_Stack_frame_id);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			if (v_evtInst != null) {
				v_evtInst.Fire();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Generate to Class
