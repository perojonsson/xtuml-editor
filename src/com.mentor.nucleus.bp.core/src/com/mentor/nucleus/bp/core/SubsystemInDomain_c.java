package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SubsystemInDomain_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SUBSYSTEM_IN_DOMAIN extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SubsystemInDomain_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SubsystemInDomain_c(ModelRoot modelRoot, java.util.UUID p_m_dom_id,
			java.util.UUID p_m_ss_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);

		Object[] key = {m_ss_id, m_dom_id};
		addInstanceToMap(key);
	}
	static public SubsystemInDomain_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_dom_id, java.util.UUID p_m_ss_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);
		SubsystemInDomain_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_ss_id, p_m_dom_id};
			new_inst = (SubsystemInDomain_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SubsystemInDomain_c(modelRoot, p_m_dom_id, p_m_ss_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SubsystemInDomain_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_dom_id, java.util.UUID p_m_ss_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);
		SubsystemInDomain_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_ss_id, p_m_dom_id};
			source = (SubsystemInDomain_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);

				return source;
			}
		}
		// there is no instance matching the id
		SubsystemInDomain_c new_inst = new SubsystemInDomain_c(modelRoot,
				p_m_dom_id, p_m_ss_id);
		return new_inst;
	}
	public SubsystemInDomain_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_dom_id = IdAssigner.NULL_UUID;
		m_ss_id = IdAssigner.NULL_UUID;
		Object[] key = {m_ss_id, m_dom_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_ss_id, m_dom_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_ss_id != p_newKey) {

			m_ss_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SubsystemInDomain_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SubsystemInDomain_c)) {
			return false;
		}

		SubsystemInDomain_c me = (SubsystemInDomain_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSs_id()) || IdAssigner.NULL_UUID
						.equals(((SubsystemInDomain_c) elem).getSs_id())) && this != elem)) {
			return false;
		}
		if (!getSs_id().equals(((SubsystemInDomain_c) elem).getSs_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDom_id()) || IdAssigner.NULL_UUID
						.equals(((SubsystemInDomain_c) elem).getDom_id())) && this != elem)) {
			return false;
		}
		if (!getDom_id().equals(((SubsystemInDomain_c) elem).getDom_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SubsystemInDomain_c)) {
			return false;
		}

		SubsystemInDomain_c me = (SubsystemInDomain_c) elem;
		if (!getSs_idCachedValue().equals(
				((SubsystemInDomain_c) elem).getSs_idCachedValue()))
			return false;
		if (!getDom_idCachedValue().equals(
				((SubsystemInDomain_c) elem).getDom_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_dom_id;
	private java.util.UUID m_ss_id;

	// declare association references from this class

	// referring navigation

	Domain_c IsTopLevelOfSubsystemsDomain;
	public void relateAcrossR43To(Domain_c target) {
		relateAcrossR43To(target, true);
	}
	public void relateAcrossR43To(Domain_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsTopLevelOfSubsystemsDomain)
			return; // already related

		if (IsTopLevelOfSubsystemsDomain != target) {

			Object oldKey = getInstanceKey();

			if (IsTopLevelOfSubsystemsDomain != null) {
				UmlProblem.removeXtUMLProblem(this,
						IsTopLevelOfSubsystemsDomain);

				IsTopLevelOfSubsystemsDomain.clearBackPointerR43To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SubsystemInDomain_c.relateAcrossR43To(Domain_c target)",
									"Relate performed across R43 from Subsystem in Domain to Domain without unrelate of prior instance.");
				}
			}

			IsTopLevelOfSubsystemsDomain = target;
			m_dom_id = target.getDom_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR43To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "43", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR43From(Domain_c target) {
		unrelateAcrossR43From(target, true);
	}
	public void unrelateAcrossR43From(Domain_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsTopLevelOfSubsystemsDomain == null)
			return; // already unrelated

		if (target != IsTopLevelOfSubsystemsDomain) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R43",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR43To(this);
		}

		if (IsTopLevelOfSubsystemsDomain != null) {

			m_dom_id = IsTopLevelOfSubsystemsDomain.getDom_id();
			IsTopLevelOfSubsystemsDomain = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "43", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	Subsystem_c HasTopLevelSubsystemsSubsystem;
	public void relateAcrossR43To(Subsystem_c target) {
		relateAcrossR43To(target, true);
	}
	public void relateAcrossR43To(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasTopLevelSubsystemsSubsystem)
			return; // already related

		if (HasTopLevelSubsystemsSubsystem != target) {

			Object oldKey = getInstanceKey();

			if (HasTopLevelSubsystemsSubsystem != null) {
				UmlProblem.removeXtUMLProblem(this,
						HasTopLevelSubsystemsSubsystem);

				HasTopLevelSubsystemsSubsystem.clearBackPointerR43To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SubsystemInDomain_c.relateAcrossR43To(Subsystem_c target)",
									"Relate performed across R43 from Subsystem in Domain to Subsystem without unrelate of prior instance.");
				}
			}

			HasTopLevelSubsystemsSubsystem = target;
			m_ss_id = target.getSs_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR43To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "43", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR43From(Subsystem_c target) {
		unrelateAcrossR43From(target, true);
	}
	public void unrelateAcrossR43From(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (HasTopLevelSubsystemsSubsystem == null)
			return; // already unrelated

		if (target != HasTopLevelSubsystemsSubsystem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R43",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR43To(this);
		}

		if (HasTopLevelSubsystemsSubsystem != null) {

			m_ss_id = HasTopLevelSubsystemsSubsystem.getSs_id();
			HasTopLevelSubsystemsSubsystem = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "43", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Domain_c[] targets) {
		return getOneS_SIDOnR43(targets, null);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Domain_c[] targets,
			ClassQueryInterface_c test) {
		SubsystemInDomain_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_SIDOnR43(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Domain_c target) {
		return getOneS_SIDOnR43(target, null);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Domain_c target,
			boolean loadComponent) {
		return getOneS_SIDOnR43(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Domain_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_SIDOnR43(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(ModelRoot modelRoot,
			Domain_c target, ClassQueryInterface_c test) {
		return getOneS_SIDOnR43(modelRoot, target, test, true);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(ModelRoot modelRoot,
			Domain_c target, ClassQueryInterface_c test, boolean loadComponent) {
		SubsystemInDomain_c result = null;

		result = find_getOneS_SIDOnR43(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// Containment Relation
			List comps = PersistenceManager.findAllChildComponents(
					target.getPersistableComponent(), modelRoot,
					SubsystemInDomain_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneS_SIDOnR43(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static SubsystemInDomain_c find_getOneS_SIDOnR43(
			ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43) {
				for (int i = 0; i < target.backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43
						.size(); ++i) {
					SubsystemInDomain_c source = (SubsystemInDomain_c) target.backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c[] targets) {
		return getManyS_SIDsOnR43(targets, null);
	}
	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c[] targets,
			boolean loadComponent) {
		return getManyS_SIDsOnR43(targets, null, loadComponent);
	}
	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_SIDsOnR43(targets, test, true);
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SubsystemInDomain_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistableModelComponent[] pmcs = new PersistableModelComponent[targets.length];
			for (int i = 0; i < targets.length; i++) {
				pmcs[i] = targets[i].getPersistableComponent();
			}
			PersistenceManager.ensureAllChildInstancesLoaded(pmcs, modelRoot,
					SubsystemInDomain_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43) {
				for (int j = 0; j < targets[i].backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43
						.size(); ++j) {
					SubsystemInDomain_c source = (SubsystemInDomain_c) targets[i].backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SubsystemInDomain_c[] ret_set = new SubsystemInDomain_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SubsystemInDomain_c[0];
		}
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c target) {
		return getManyS_SIDsOnR43(target, null);
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c target,
			boolean loadComponent) {
		return getManyS_SIDsOnR43(target, null, loadComponent);
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c target,
			ClassQueryInterface_c test) {
		return getManyS_SIDsOnR43(target, test, true);
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Domain_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new SubsystemInDomain_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistenceManager.ensureAllChildInstancesLoaded(
					target.getPersistableComponent(), modelRoot,
					SubsystemInDomain_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43) {
			for (int i = 0; i < target.backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43
					.size(); ++i) {
				SubsystemInDomain_c source = (SubsystemInDomain_c) target.backPointer_HasTopLevelSubsystemsSubsystemInDomainHasTopLevelSubsystems_R43
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SubsystemInDomain_c[] ret_set = new SubsystemInDomain_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SubsystemInDomain_c[0];
		}
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Subsystem_c[] targets) {
		return getOneS_SIDOnR43(targets, null);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Subsystem_c[] targets,
			ClassQueryInterface_c test) {
		SubsystemInDomain_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_SIDOnR43(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Subsystem_c target) {
		return getOneS_SIDOnR43(target, null);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Subsystem_c target,
			boolean loadComponent) {
		return getOneS_SIDOnR43(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(Subsystem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_SIDOnR43(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test) {
		return getOneS_SIDOnR43(modelRoot, target, test, true);
	}

	public static SubsystemInDomain_c getOneS_SIDOnR43(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		SubsystemInDomain_c result = null;

		result = find_getOneS_SIDOnR43(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// Containment Relation
			List comps = PersistenceManager.findAllChildComponents(
					target.getPersistableComponent(), modelRoot,
					SubsystemInDomain_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneS_SIDOnR43(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static SubsystemInDomain_c find_getOneS_SIDOnR43(
			ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43) {
				for (int i = 0; i < target.backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43
						.size(); ++i) {
					SubsystemInDomain_c source = (SubsystemInDomain_c) target.backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Subsystem_c[] targets) {
		return getManyS_SIDsOnR43(targets, null);
	}
	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(
			Subsystem_c[] targets, boolean loadComponent) {
		return getManyS_SIDsOnR43(targets, null, loadComponent);
	}
	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(
			Subsystem_c[] targets, ClassQueryInterface_c test) {
		return getManyS_SIDsOnR43(targets, test, true);
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(
			Subsystem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SubsystemInDomain_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistableModelComponent[] pmcs = new PersistableModelComponent[targets.length];
			for (int i = 0; i < targets.length; i++) {
				pmcs[i] = targets[i].getPersistableComponent();
			}
			PersistenceManager.ensureAllChildInstancesLoaded(pmcs, modelRoot,
					SubsystemInDomain_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43) {
				for (int j = 0; j < targets[i].backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43
						.size(); ++j) {
					SubsystemInDomain_c source = (SubsystemInDomain_c) targets[i].backPointer_IsTopLevelOfSubsystemsSubsystemInDomainIsTopLevelOfSubsystems_R43
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SubsystemInDomain_c[] ret_set = new SubsystemInDomain_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SubsystemInDomain_c[0];
		}
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Subsystem_c target) {
		if (target != null) {
			Subsystem_c[] targetArray = new Subsystem_c[1];
			targetArray[0] = target;
			return getManyS_SIDsOnR43(targetArray);
		} else {
			SubsystemInDomain_c[] result = new SubsystemInDomain_c[0];
			return result;
		}
	}

	public static SubsystemInDomain_c[] getManyS_SIDsOnR43(Subsystem_c target,
			boolean loadComponent) {
		if (target != null) {
			Subsystem_c[] targetArray = new Subsystem_c[1];
			targetArray[0] = target;
			return getManyS_SIDsOnR43(targetArray, loadComponent);
		} else {
			SubsystemInDomain_c[] result = new SubsystemInDomain_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R43
		Domain_c relInst56304 = (Domain_c) baseRoot.getInstanceList(
				Domain_c.class).get(new Object[]{m_dom_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56304 == null) {
			relInst56304 = (Domain_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Domain_c.class)
					.get(new Object[]{m_dom_id});
		}
		if (relInst56304 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56304 = (Domain_c) roots[i].getInstanceList(
						Domain_c.class).get(new Object[]{m_dom_id});
				if (relInst56304 != null)
					break;
			}
		}
		//synchronized
		if (relInst56304 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56304) && !isProxy())) {
				relInst56304.relateAcrossR43To(this, notifyChanges);
			}
		}

		Subsystem_c relInst56305 = (Subsystem_c) baseRoot.getInstanceList(
				Subsystem_c.class).get(new Object[]{m_ss_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56305 == null) {
			relInst56305 = (Subsystem_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Subsystem_c.class)
					.get(new Object[]{m_ss_id});
		}
		if (relInst56305 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56305 = (Subsystem_c) roots[i].getInstanceList(
						Subsystem_c.class).get(new Object[]{m_ss_id});
				if (relInst56305 != null)
					break;
			}
		}
		//synchronized
		if (relInst56305 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56305) && !isProxy())) {
				relInst56305.relateAcrossR43To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R43
		// S_DOM
		inst = IsTopLevelOfSubsystemsDomain;
		unrelateAcrossR43From(IsTopLevelOfSubsystemsDomain, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// S_SS
		inst = HasTopLevelSubsystemsSubsystem;
		unrelateAcrossR43From(HasTopLevelSubsystemsSubsystem, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SubsystemInDomain_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SubsystemInDomain_c inst = (SubsystemInDomain_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SubsystemInDomain_c SubsystemInDomainInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SubsystemInDomain_c result = findSubsystemInDomainInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SubsystemInDomain_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSubsystemInDomainInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SubsystemInDomain_c findSubsystemInDomainInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SubsystemInDomain_c x = (SubsystemInDomain_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SubsystemInDomain_c SubsystemInDomainInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SubsystemInDomainInstance(modelRoot, test, true);
	}

	public static SubsystemInDomain_c SubsystemInDomainInstance(
			ModelRoot modelRoot) {
		return SubsystemInDomainInstance(modelRoot, null, true);
	}

	public static SubsystemInDomain_c[] SubsystemInDomainInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SubsystemInDomain_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInDomain_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SubsystemInDomain_c x = (SubsystemInDomain_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SubsystemInDomain_c[] ret_set = new SubsystemInDomain_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SubsystemInDomain_c[0];
			}
		}
	}
	public static SubsystemInDomain_c[] SubsystemInDomainInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SubsystemInDomainInstances(modelRoot, test, true);
	}
	public static SubsystemInDomain_c[] SubsystemInDomainInstances(
			ModelRoot modelRoot) {
		return SubsystemInDomainInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Subsystem in Domain.dispose call: ";
		Subsystem_c testR43Inst = Subsystem_c.getOneS_SSOnR43(this, false);

		if (testR43Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "43 ";
		}

		Domain_c testR43InstOth = Domain_c.getOneS_DOMOnR43(this, false);

		if (testR43InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "43 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Subsystem in Domain",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("dom_id")) {
			return true;
		}
		if (attributeName.equals("ss_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSs_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSs_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getDom_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getDom_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getDom_idLongBased() {
		if (IsTopLevelOfSubsystemsDomain != null) {
			return IsTopLevelOfSubsystemsDomain.getDom_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDom_id() {
		if (IsTopLevelOfSubsystemsDomain != null) {
			return IsTopLevelOfSubsystemsDomain.getDom_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDom_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dom_id))
			return m_dom_id;
		else
			return getDom_id();
	}

	public void setDom_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_dom_id)) {
				return;
			}
		} else if (m_dom_id != null) {
			if (m_dom_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Dom_id", m_dom_id, newValue, true);
		m_dom_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSs_idLongBased() {
		if (HasTopLevelSubsystemsSubsystem != null) {
			return HasTopLevelSubsystemsSubsystem.getSs_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSs_id() {
		if (HasTopLevelSubsystemsSubsystem != null) {
			return HasTopLevelSubsystemsSubsystem.getSs_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSs_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ss_id))
			return m_ss_id;
		else
			return getSs_id();
	}

	public void setSs_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_ss_id)) {
				return;
			}
		} else if (m_ss_id != null) {
			if (m_ss_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ss_id",
				m_ss_id, newValue, true);
		m_ss_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Subsystem in Domain", //$NON-NLS-1$
						" Operation entered: Subsystem in Domain::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SubsystemInDomain_c[] objs = SubsystemInDomain_c
				.SubsystemInDomainInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Subsystem in Domain", //$NON-NLS-1$
				" Operation entered: Subsystem in Domain::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SubsystemInDomain_c_test56307_c implements ClassQueryInterface_c {
			SubsystemInDomain_c_test56307_c(java.util.UUID p56308,
					java.util.UUID p56309) {
				m_p56308 = p56308;
				m_p56309 = p56309;
			}
			private java.util.UUID m_p56308;
			private java.util.UUID m_p56309;
			public boolean evaluate(Object candidate) {
				SubsystemInDomain_c selected = (SubsystemInDomain_c) candidate;
				boolean retval = false;
				retval = (selected.getSs_id().equals(m_p56308))
						& (selected.getDom_id().equals(m_p56309));
				return retval;
			}
		}

		SubsystemInDomain_c[] objs56306 = SubsystemInDomain_c
				.SubsystemInDomainInstances(modelRoot,
						new SubsystemInDomain_c_test56307_c(getSs_id(),
								getDom_id()));

		if (((objs56306.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Domain", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Domain: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56306.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Domain: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56306.length), e);
			}
			retval = false;

		}

		if (((objs56306.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Domain", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Domain: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56306.length)
										+ " SS_ID: " + "Not Printable" + " Dom_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Domain: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56306.length)
										+ " SS_ID: " + "Not Printable" + " Dom_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Subsystem in Domain is a link class in association: rel.Numb = 43
		// Other side
		// The other side class in the association is: Domain
		class Domain_c_test56313_c implements ClassQueryInterface_c {
			Domain_c_test56313_c(java.util.UUID p56314) {
				m_p56314 = p56314;
			}
			private java.util.UUID m_p56314;
			public boolean evaluate(Object candidate) {
				Domain_c selected = (Domain_c) candidate;
				boolean retval = false;
				retval = (selected.getDom_id().equals(m_p56314));
				return retval;
			}
		}

		Domain_c[] objs56312 = Domain_c.DomainInstances(modelRoot,
				new Domain_c_test56313_c(getDom_id()));

		if (((objs56312.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Domain", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Domain: Association: 43: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56312.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Domain: Association: 43: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56312.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Subsystem in Domain
