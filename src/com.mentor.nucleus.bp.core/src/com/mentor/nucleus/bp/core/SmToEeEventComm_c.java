package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToEeEventComm_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SM_TO_EE_EVENT_COMM extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SmToEeEventComm_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SmToEeEventComm_c(ModelRoot modelRoot, java.util.UUID p_m_cpath_id,
			java.util.UUID p_m_ee_id, java.util.UUID p_m_eeevt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

		Object[] key = {m_eeevt_id, m_cpath_id, m_ee_id};
		addInstanceToMap(key);
	}
	static public SmToEeEventComm_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_ee_id,
			java.util.UUID p_m_eeevt_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);
		SmToEeEventComm_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_eeevt_id, p_m_cpath_id, p_m_ee_id};
			new_inst = (SmToEeEventComm_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SmToEeEventComm_c(modelRoot, p_m_cpath_id,
					p_m_ee_id, p_m_eeevt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SmToEeEventComm_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_ee_id,
			java.util.UUID p_m_eeevt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);
		SmToEeEventComm_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_eeevt_id, p_m_cpath_id, p_m_ee_id};
			source = (SmToEeEventComm_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_eeevt_id = IdAssigner.preprocessUUID(p_m_eeevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);

				return source;
			}
		}
		// there is no instance matching the id
		SmToEeEventComm_c new_inst = new SmToEeEventComm_c(modelRoot,
				p_m_cpath_id, p_m_ee_id, p_m_eeevt_id);
		return new_inst;
	}
	public SmToEeEventComm_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_cpath_id = IdAssigner.NULL_UUID;
		m_eeevt_id = IdAssigner.NULL_UUID;
		m_ee_id = IdAssigner.NULL_UUID;
		Object[] key = {m_eeevt_id, m_cpath_id, m_ee_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_eeevt_id, m_cpath_id, m_ee_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_eeevt_id != p_newKey) {

			m_eeevt_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SmToEeEventComm_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SmToEeEventComm_c)) {
			return false;
		}

		SmToEeEventComm_c me = (SmToEeEventComm_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEeevt_id()) || IdAssigner.NULL_UUID
						.equals(((SmToEeEventComm_c) elem).getEeevt_id())) && this != elem)) {
			return false;
		}
		if (!getEeevt_id().equals(((SmToEeEventComm_c) elem).getEeevt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getCpath_id()) || IdAssigner.NULL_UUID
						.equals(((SmToEeEventComm_c) elem).getCpath_id())) && this != elem)) {
			return false;
		}
		if (!getCpath_id().equals(((SmToEeEventComm_c) elem).getCpath_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getEe_id()) || IdAssigner.NULL_UUID
						.equals(((SmToEeEventComm_c) elem).getEe_id())) && this != elem)) {
			return false;
		}
		if (!getEe_id().equals(((SmToEeEventComm_c) elem).getEe_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SmToEeEventComm_c)) {
			return false;
		}

		SmToEeEventComm_c me = (SmToEeEventComm_c) elem;
		if (!getEeevt_idCachedValue().equals(
				((SmToEeEventComm_c) elem).getEeevt_idCachedValue()))
			return false;
		if (!getCpath_idCachedValue().equals(
				((SmToEeEventComm_c) elem).getCpath_idCachedValue()))
			return false;
		if (!getEe_idCachedValue().equals(
				((SmToEeEventComm_c) elem).getEe_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_cpath_id;
	private java.util.UUID m_eeevt_id;
	private java.util.UUID m_ee_id;

	// declare association references from this class

	// referring navigation

	ExternalEntityEvent_c RepresentsCommunicationOfExternalEntityEvent;
	public void relateAcrossR413To(ExternalEntityEvent_c target) {
		relateAcrossR413To(target, true);
	}
	public void relateAcrossR413To(ExternalEntityEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == RepresentsCommunicationOfExternalEntityEvent)
			return; // already related

		if (RepresentsCommunicationOfExternalEntityEvent != target) {

			Object oldKey = getInstanceKey();

			if (RepresentsCommunicationOfExternalEntityEvent != null) {

				RepresentsCommunicationOfExternalEntityEvent
						.clearBackPointerR413To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToEeEventComm_c.relateAcrossR413To(ExternalEntityEvent_c target)",
									"Relate performed across R413 from SM to EE Event Comm to External Entity Event without unrelate of prior instance.");
				}
			}

			RepresentsCommunicationOfExternalEntityEvent = target;
			m_eeevt_id = target.getEeevt_id();
			if (IdAssigner.NULL_UUID.equals(target.getEe_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ee_id = target.getEe_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR413To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "413", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR413From(ExternalEntityEvent_c target) {
		unrelateAcrossR413From(target, true);
	}
	public void unrelateAcrossR413From(ExternalEntityEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (RepresentsCommunicationOfExternalEntityEvent == null)
			return; // already unrelated

		if (target != RepresentsCommunicationOfExternalEntityEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R413",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR413To(this);
		}

		if (RepresentsCommunicationOfExternalEntityEvent != null) {

			m_eeevt_id = RepresentsCommunicationOfExternalEntityEvent
					.getEeevt_id();
			m_ee_id = RepresentsCommunicationOfExternalEntityEvent.getEe_id();
			if (IdAssigner.NULL_UUID.equals(m_ee_id)) {
				m_ee_id = RepresentsCommunicationOfExternalEntityEvent
						.getEe_idCachedValue();
			}
			RepresentsCommunicationOfExternalEntityEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "413", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(
			ExternalEntityEvent_c[] targets) {
		return getOneCA_SMEEEOnR413(targets, null);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test) {
		SmToEeEventComm_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMEEEOnR413(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(
			ExternalEntityEvent_c target) {
		return getOneCA_SMEEEOnR413(target, null);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(
			ExternalEntityEvent_c target, boolean loadComponent) {
		return getOneCA_SMEEEOnR413(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMEEEOnR413(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(ModelRoot modelRoot,
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		return getOneCA_SMEEEOnR413(modelRoot, target, test, true);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR413(ModelRoot modelRoot,
			ExternalEntityEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_SMEEEOnR413(modelRoot, target, test);
	}
	private static SmToEeEventComm_c find_getOneCA_SMEEEOnR413(
			ModelRoot modelRoot, ExternalEntityEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413) {
				for (int i = 0; i < target.backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413
						.size(); ++i) {
					SmToEeEventComm_c source = (SmToEeEventComm_c) target.backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c[] targets) {
		return getManyCA_SMEEEsOnR413(targets, null);
	}
	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c[] targets, boolean loadComponent) {
		return getManyCA_SMEEEsOnR413(targets, null, loadComponent);
	}
	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMEEEsOnR413(targets, test, true);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToEeEventComm_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413) {
				for (int j = 0; j < targets[i].backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413
						.size(); ++j) {
					SmToEeEventComm_c source = (SmToEeEventComm_c) targets[i].backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToEeEventComm_c[] ret_set = new SmToEeEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeEventComm_c[0];
		}
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c target) {
		return getManyCA_SMEEEsOnR413(target, null);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c target, boolean loadComponent) {
		return getManyCA_SMEEEsOnR413(target, null, loadComponent);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c target, ClassQueryInterface_c test) {
		return getManyCA_SMEEEsOnR413(target, test, true);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR413(
			ExternalEntityEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToEeEventComm_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413) {
			for (int i = 0; i < target.backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413
					.size(); ++i) {
				SmToEeEventComm_c source = (SmToEeEventComm_c) target.backPointer_IsCarriedToEeViaSmToEeEventCommIsCarriedToEeVia_R413
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToEeEventComm_c[] ret_set = new SmToEeEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeEventComm_c[0];
		}
	}

	// referring navigation

	SmToEeCommPath_c IsCarriedBySmToEeCommPath;
	public void relateAcrossR412To(SmToEeCommPath_c target) {
		relateAcrossR412To(target, true);
	}
	public void relateAcrossR412To(SmToEeCommPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsCarriedBySmToEeCommPath)
			return; // already related

		if (IsCarriedBySmToEeCommPath != target) {

			Object oldKey = getInstanceKey();

			if (IsCarriedBySmToEeCommPath != null) {

				IsCarriedBySmToEeCommPath.clearBackPointerR412To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SmToEeEventComm_c.relateAcrossR412To(SmToEeCommPath_c target)",
									"Relate performed across R412 from SM to EE Event Comm to SM to EE Comm Path without unrelate of prior instance.");
				}
			}

			IsCarriedBySmToEeCommPath = target;
			if (IdAssigner.NULL_UUID.equals(target.getCpath_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_cpath_id = target.getCpath_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR412To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "412", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR412From(SmToEeCommPath_c target) {
		unrelateAcrossR412From(target, true);
	}
	public void unrelateAcrossR412From(SmToEeCommPath_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsCarriedBySmToEeCommPath == null)
			return; // already unrelated

		if (target != IsCarriedBySmToEeCommPath) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R412",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR412To(this);
		}

		if (IsCarriedBySmToEeCommPath != null) {

			m_cpath_id = IsCarriedBySmToEeCommPath.getCpath_id();
			if (IdAssigner.NULL_UUID.equals(m_cpath_id)) {
				m_cpath_id = IsCarriedBySmToEeCommPath.getCpath_idCachedValue();
			}
			IsCarriedBySmToEeCommPath = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "412", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(
			SmToEeCommPath_c[] targets) {
		return getOneCA_SMEEEOnR412(targets, null);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(
			SmToEeCommPath_c[] targets, ClassQueryInterface_c test) {
		SmToEeEventComm_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_SMEEEOnR412(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(SmToEeCommPath_c target) {
		return getOneCA_SMEEEOnR412(target, null);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(
			SmToEeCommPath_c target, boolean loadComponent) {
		return getOneCA_SMEEEOnR412(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(
			SmToEeCommPath_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_SMEEEOnR412(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(ModelRoot modelRoot,
			SmToEeCommPath_c target, ClassQueryInterface_c test) {
		return getOneCA_SMEEEOnR412(modelRoot, target, test, true);
	}

	public static SmToEeEventComm_c getOneCA_SMEEEOnR412(ModelRoot modelRoot,
			SmToEeCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_SMEEEOnR412(modelRoot, target, test);
	}
	private static SmToEeEventComm_c find_getOneCA_SMEEEOnR412(
			ModelRoot modelRoot, SmToEeCommPath_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CarriesSmToEeEventCommCarries_R412) {
				for (int i = 0; i < target.backPointer_CarriesSmToEeEventCommCarries_R412
						.size(); ++i) {
					SmToEeEventComm_c source = (SmToEeEventComm_c) target.backPointer_CarriesSmToEeEventCommCarries_R412
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c[] targets) {
		return getManyCA_SMEEEsOnR412(targets, null);
	}
	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c[] targets, boolean loadComponent) {
		return getManyCA_SMEEEsOnR412(targets, null, loadComponent);
	}
	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_SMEEEsOnR412(targets, test, true);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SmToEeEventComm_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CarriesSmToEeEventCommCarries_R412) {
				for (int j = 0; j < targets[i].backPointer_CarriesSmToEeEventCommCarries_R412
						.size(); ++j) {
					SmToEeEventComm_c source = (SmToEeEventComm_c) targets[i].backPointer_CarriesSmToEeEventCommCarries_R412
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SmToEeEventComm_c[] ret_set = new SmToEeEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeEventComm_c[0];
		}
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c target) {
		return getManyCA_SMEEEsOnR412(target, null);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c target, boolean loadComponent) {
		return getManyCA_SMEEEsOnR412(target, null, loadComponent);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c target, ClassQueryInterface_c test) {
		return getManyCA_SMEEEsOnR412(target, test, true);
	}

	public static SmToEeEventComm_c[] getManyCA_SMEEEsOnR412(
			SmToEeCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SmToEeEventComm_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CarriesSmToEeEventCommCarries_R412) {
			for (int i = 0; i < target.backPointer_CarriesSmToEeEventCommCarries_R412
					.size(); ++i) {
				SmToEeEventComm_c source = (SmToEeEventComm_c) target.backPointer_CarriesSmToEeEventCommCarries_R412
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SmToEeEventComm_c[] ret_set = new SmToEeEventComm_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SmToEeEventComm_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (RepresentsCommunicationOfExternalEntityEvent == null) {
			// R413
			ExternalEntityEvent_c relInst57393 = (ExternalEntityEvent_c) baseRoot
					.getInstanceList(ExternalEntityEvent_c.class).get(
							new Object[]{m_eeevt_id, m_ee_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57393 == null) {
				relInst57393 = (ExternalEntityEvent_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ExternalEntityEvent_c.class)
						.get(new Object[]{m_eeevt_id, m_ee_id});
			}
			if (relInst57393 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57393 = (ExternalEntityEvent_c) roots[i]
							.getInstanceList(ExternalEntityEvent_c.class).get(
									new Object[]{m_eeevt_id, m_ee_id});
					if (relInst57393 != null)
						break;
				}
			}
			//synchronized
			if (relInst57393 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57393) && !isProxy())) {
					relInst57393.relateAcrossR413To(this, notifyChanges);
				}
			}
		}

		if (IsCarriedBySmToEeCommPath == null) {
			// R412
			SmToEeCommPath_c relInst57394 = (SmToEeCommPath_c) baseRoot
					.getInstanceList(SmToEeCommPath_c.class).get(
							new Object[]{m_cpath_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57394 == null) {
				relInst57394 = (SmToEeCommPath_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(SmToEeCommPath_c.class)
						.get(new Object[]{m_cpath_id});
			}
			if (relInst57394 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57394 = (SmToEeCommPath_c) roots[i].getInstanceList(
							SmToEeCommPath_c.class).get(
							new Object[]{m_cpath_id});
					if (relInst57394 != null)
						break;
				}
			}
			//synchronized
			if (relInst57394 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57394) && !isProxy())) {
					relInst57394.relateAcrossR412To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R413
		// S_EEEVT
		inst = RepresentsCommunicationOfExternalEntityEvent;
		unrelateAcrossR413From(RepresentsCommunicationOfExternalEntityEvent,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R412
		// CA_SMEEC
		inst = IsCarriedBySmToEeCommPath;
		unrelateAcrossR412From(IsCarriedBySmToEeCommPath, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToEeEventComm_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToEeEventComm_c inst = (SmToEeEventComm_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SmToEeEventComm_c SmToEeEventCommInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SmToEeEventComm_c result = findSmToEeEventCommInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SmToEeEventComm_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSmToEeEventCommInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SmToEeEventComm_c findSmToEeEventCommInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToEeEventComm_c x = (SmToEeEventComm_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SmToEeEventComm_c SmToEeEventCommInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToEeEventCommInstance(modelRoot, test, true);
	}

	public static SmToEeEventComm_c SmToEeEventCommInstance(ModelRoot modelRoot) {
		return SmToEeEventCommInstance(modelRoot, null, true);
	}

	public static SmToEeEventComm_c[] SmToEeEventCommInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SmToEeEventComm_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SmToEeEventComm_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SmToEeEventComm_c x = (SmToEeEventComm_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SmToEeEventComm_c[] ret_set = new SmToEeEventComm_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToEeEventComm_c[0];
			}
		}
	}
	public static SmToEeEventComm_c[] SmToEeEventCommInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SmToEeEventCommInstances(modelRoot, test, true);
	}
	public static SmToEeEventComm_c[] SmToEeEventCommInstances(
			ModelRoot modelRoot) {
		return SmToEeEventCommInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the SM to EE Event Comm.dispose call: ";
		ExternalEntityEvent_c testR413Inst = ExternalEntityEvent_c
				.getOneS_EEEVTOnR413(this, false);

		if (testR413Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "413 ";
		}
		SmToEeCommPath_c testR412Inst = SmToEeCommPath_c.getOneCA_SMEECOnR412(
				this, false);

		if (testR412Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "412 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "SM to EE Event Comm",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("cpath_id")) {
			return true;
		}
		if (attributeName.equals("eeevt_id")) {
			return true;
		}
		if (attributeName.equals("ee_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getEeevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEeevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getCpath_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getCpath_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getEe_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getEe_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getCpath_idLongBased() {
		if (IsCarriedBySmToEeCommPath != null) {
			return IsCarriedBySmToEeCommPath.getCpath_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getCpath_id() {
		if (IsCarriedBySmToEeCommPath != null) {
			return IsCarriedBySmToEeCommPath.getCpath_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getCpath_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_cpath_id))
			return m_cpath_id;
		else
			return getCpath_id();
	}

	public void setCpath_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_cpath_id)) {
				return;
			}
		} else if (m_cpath_id != null) {
			if (m_cpath_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Cpath_id", m_cpath_id, newValue, true);
		m_cpath_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEeevt_idLongBased() {
		if (RepresentsCommunicationOfExternalEntityEvent != null) {
			return RepresentsCommunicationOfExternalEntityEvent
					.getEeevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEeevt_id() {
		if (RepresentsCommunicationOfExternalEntityEvent != null) {
			return RepresentsCommunicationOfExternalEntityEvent.getEeevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEeevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_eeevt_id))
			return m_eeevt_id;
		else
			return getEeevt_id();
	}

	public void setEeevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_eeevt_id)) {
				return;
			}
		} else if (m_eeevt_id != null) {
			if (m_eeevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Eeevt_id", m_eeevt_id, newValue, true);
		m_eeevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEe_idLongBased() {
		if (RepresentsCommunicationOfExternalEntityEvent != null) {
			return RepresentsCommunicationOfExternalEntityEvent
					.getEe_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEe_id() {
		if (RepresentsCommunicationOfExternalEntityEvent != null) {
			return RepresentsCommunicationOfExternalEntityEvent.getEe_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEe_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ee_id))
			return m_ee_id;
		else
			return getEe_id();
	}

	public void setEe_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_ee_id)) {
				return;
			}
		} else if (m_ee_id != null) {
			if (m_ee_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ee_id",
				m_ee_id, newValue, true);
		m_ee_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "SM to EE Event Comm", //$NON-NLS-1$
						" Operation entered: SM to EE Event Comm::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SmToEeEventComm_c[] objs = SmToEeEventComm_c.SmToEeEventCommInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "SM to EE Event Comm", //$NON-NLS-1$
				" Operation entered: SM to EE Event Comm::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SmToEeEventComm_c_test57396_c implements ClassQueryInterface_c {
			SmToEeEventComm_c_test57396_c(java.util.UUID p57397,
					java.util.UUID p57398, java.util.UUID p57399) {
				m_p57397 = p57397;
				m_p57398 = p57398;
				m_p57399 = p57399;
			}
			private java.util.UUID m_p57397;
			private java.util.UUID m_p57398;
			private java.util.UUID m_p57399;
			public boolean evaluate(Object candidate) {
				SmToEeEventComm_c selected = (SmToEeEventComm_c) candidate;
				boolean retval = false;
				retval = (selected.getEeevt_id().equals(m_p57397))
						& (selected.getCpath_id().equals(m_p57398))
						& (selected.getEe_id().equals(m_p57399));
				return retval;
			}
		}

		SmToEeEventComm_c[] objs57395 = SmToEeEventComm_c
				.SmToEeEventCommInstances(modelRoot,
						new SmToEeEventComm_c_test57396_c(getEeevt_id(),
								getCpath_id(), getEe_id()));

		if (((objs57395.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to EE Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to EE Event Comm: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57395.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Event Comm: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57395.length), e);
			}
			retval = false;

		}

		if (((objs57395.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to EE Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to EE Event Comm: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57395.length)
										+ " EEevt_ID: " + "Not Printable" + " CPath_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Event Comm: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57395.length)
										+ " EEevt_ID: " + "Not Printable" + " CPath_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to EE Event Comm is a referring class in association: rel.Numb = 412
		// The participating class is: SM to EE Comm Path
		class SmToEeCommPath_c_test57403_c implements ClassQueryInterface_c {
			SmToEeCommPath_c_test57403_c(java.util.UUID p57404) {
				m_p57404 = p57404;
			}
			private java.util.UUID m_p57404;
			public boolean evaluate(Object candidate) {
				SmToEeCommPath_c selected = (SmToEeCommPath_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57404));
				return retval;
			}
		}

		SmToEeCommPath_c[] objs57402 = SmToEeCommPath_c
				.SmToEeCommPathInstances(modelRoot,
						new SmToEeCommPath_c_test57403_c(getCpath_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57402.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to EE Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to EE Event Comm: Association: 412: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57402.length)
										+ " CPath_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Event Comm: Association: 412: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57402.length)
										+ " CPath_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// SM to EE Event Comm is a referring class in association: rel.Numb = 413
		// The participating class is: External Entity Event
		class ExternalEntityEvent_c_test57406_c
				implements
					ClassQueryInterface_c {
			ExternalEntityEvent_c_test57406_c(java.util.UUID p57407,
					java.util.UUID p57408) {
				m_p57407 = p57407;
				m_p57408 = p57408;
			}
			private java.util.UUID m_p57407;
			private java.util.UUID m_p57408;
			public boolean evaluate(Object candidate) {
				ExternalEntityEvent_c selected = (ExternalEntityEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getEeevt_id().equals(m_p57407))
						& (selected.getEe_id().equals(m_p57408));
				return retval;
			}
		}

		ExternalEntityEvent_c[] objs57405 = ExternalEntityEvent_c
				.ExternalEntityEventInstances(modelRoot,
						new ExternalEntityEvent_c_test57406_c(getEeevt_id(),
								getEe_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57405.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"SM to EE Event Comm", //$NON-NLS-1$
								"Consistency: Object: SM to EE Event Comm: Association: 413: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57405.length)
										+ " EEevt_ID: " + "Not Printable" + " EE_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: SM to EE Event Comm: Association: 413: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57405.length)
										+ " EEevt_ID: " + "Not Printable" + " EE_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "SM to EE Event Comm",
				" Operation entered: SmToEeEventComm::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SmToEeEventComm_c[] v_peers = SmToEeEventComm_c
				.getManyCA_SMEEEsOnR412(SmToEeCommPath_c
						.getManyCA_SMEECsOnR412(this));

		if (((v_peers.length) == 1)) {

			CommunicationPath_c v_path = CommunicationPath_c
					.getOneCA_COMMOnR401(SmToEeCommPath_c
							.getOneCA_SMEECOnR412(this));

			if (v_path != null) {
				v_path.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			SmToEeCommPath_c v_smeec = SmToEeCommPath_c
					.getOneCA_SMEECOnR412(this);

			this.unrelateAcrossR412From(v_smeec);

			ExternalEntityEvent_c v_eeevt = ExternalEntityEvent_c
					.getOneS_EEEVTOnR413(this);

			this.unrelateAcrossR413From(v_eeevt);

			if (delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end SM to EE Event Comm
