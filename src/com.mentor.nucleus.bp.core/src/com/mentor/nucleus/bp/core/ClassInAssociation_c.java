package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassInAssociation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLASS_IN_ASSOCIATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClassInAssociation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClassInAssociation_c(ModelRoot modelRoot, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_rel_id, java.util.UUID p_m_oir_id,
			java.util.UUID p_m_iobj_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
		//extract 28 bit value only            
		m_oir_idLongBased = 0xfffffff & p_m_oir_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		setUniqueId(m_oir_id);
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}
	static public ClassInAssociation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id, java.util.UUID p_m_iobj_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);
		ClassInAssociation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			new_inst = (ClassInAssociation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				//extract 28 bit value only            
				new_inst.m_oir_idLongBased = 0xfffffff & p_m_oir_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClassInAssociation_c(modelRoot, p_m_obj_id,
					p_m_rel_id, p_m_oir_id, p_m_iobj_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ClassInAssociation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id, java.util.UUID p_m_iobj_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);
		ClassInAssociation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			source = (ClassInAssociation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				//extract 28 bit value only            
				source.m_oir_idLongBased = 0xfffffff & p_m_oir_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		ClassInAssociation_c new_inst = new ClassInAssociation_c(modelRoot,
				p_m_obj_id, p_m_rel_id, p_m_oir_id, p_m_iobj_id);
		return new_inst;
	}
	public ClassInAssociation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_oir_id = idAssigner.createUUID();
		m_obj_id = IdAssigner.NULL_UUID;
		m_iobj_id = IdAssigner.NULL_UUID;
		m_rel_id = IdAssigner.NULL_UUID;
		setUniqueId(m_oir_id);
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_oir_id != p_newKey) {

			m_oir_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClassInAssociation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClassInAssociation_c)) {
			return false;
		}

		ClassInAssociation_c me = (ClassInAssociation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getOir_id()) || IdAssigner.NULL_UUID
						.equals(((ClassInAssociation_c) elem).getOir_id())) && this != elem)) {
			return false;
		}
		if (!getOir_id().equals(((ClassInAssociation_c) elem).getOir_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID
						.equals(((ClassInAssociation_c) elem).getObj_id())) && this != elem)) {
			return false;
		}
		if (!getObj_id().equals(((ClassInAssociation_c) elem).getObj_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((ClassInAssociation_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((ClassInAssociation_c) elem).getRel_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClassInAssociation_c)) {
			return false;
		}

		ClassInAssociation_c me = (ClassInAssociation_c) elem;
		if (!getOir_id().equals(((ClassInAssociation_c) elem).getOir_id()))
			return false;
		if (!getObj_idCachedValue().equals(
				((ClassInAssociation_c) elem).getObj_idCachedValue()))
			return false;
		if (!getRel_idCachedValue().equals(
				((ClassInAssociation_c) elem).getRel_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_oir_id;
	private long m_oir_idLongBased;
	private java.util.UUID m_obj_id;
	private java.util.UUID m_iobj_id;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	ModelClass_c AbstractsAssociationBetweenInstancesOfModelClass;
	public void relateAcrossR201To(ModelClass_c target) {
		relateAcrossR201To(target, true);
	}
	public void relateAcrossR201To(ModelClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == AbstractsAssociationBetweenInstancesOfModelClass)
			return; // already related

		if (AbstractsAssociationBetweenInstancesOfModelClass != target) {

			Object oldKey = getInstanceKey();

			if (AbstractsAssociationBetweenInstancesOfModelClass != null) {
				UmlProblem.removeXtUMLProblem(this,
						AbstractsAssociationBetweenInstancesOfModelClass);

				AbstractsAssociationBetweenInstancesOfModelClass
						.clearBackPointerR201To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassInAssociation_c.relateAcrossR201To(ModelClass_c target)",
									"Relate performed across R201 from Class In Association to Model Class without unrelate of prior instance.");
				}
			}

			AbstractsAssociationBetweenInstancesOfModelClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR201To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "201", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR201From(ModelClass_c target) {
		unrelateAcrossR201From(target, true);
	}
	public void unrelateAcrossR201From(ModelClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (AbstractsAssociationBetweenInstancesOfModelClass == null)
			return; // already unrelated

		if (target != AbstractsAssociationBetweenInstancesOfModelClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R201",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR201To(this);
		}

		if (AbstractsAssociationBetweenInstancesOfModelClass != null) {

			m_obj_id = AbstractsAssociationBetweenInstancesOfModelClass
					.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = AbstractsAssociationBetweenInstancesOfModelClass
						.getObj_idCachedValue();
			}
			AbstractsAssociationBetweenInstancesOfModelClass = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "201", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	Association_c HasInstanceAssociationsAbstractedAssociation;
	public void relateAcrossR201To(Association_c target) {
		relateAcrossR201To(target, true);
	}
	public void relateAcrossR201To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasInstanceAssociationsAbstractedAssociation)
			return; // already related

		if (HasInstanceAssociationsAbstractedAssociation != target) {

			Object oldKey = getInstanceKey();

			if (HasInstanceAssociationsAbstractedAssociation != null) {
				UmlProblem.removeXtUMLProblem(this,
						HasInstanceAssociationsAbstractedAssociation);

				HasInstanceAssociationsAbstractedAssociation
						.clearBackPointerR201To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassInAssociation_c.relateAcrossR201To(Association_c target)",
									"Relate performed across R201 from Class In Association to Association without unrelate of prior instance.");
				}
			}

			HasInstanceAssociationsAbstractedAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR201To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "201", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR201From(Association_c target) {
		unrelateAcrossR201From(target, true);
	}
	public void unrelateAcrossR201From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasInstanceAssociationsAbstractedAssociation == null)
			return; // already unrelated

		if (target != HasInstanceAssociationsAbstractedAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R201",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR201To(this);
		}

		if (HasInstanceAssociationsAbstractedAssociation != null) {

			m_rel_id = HasInstanceAssociationsAbstractedAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = HasInstanceAssociationsAbstractedAssociation
						.getRel_idCachedValue();
			}
			HasInstanceAssociationsAbstractedAssociation = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "201", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelClass_c[] targets) {
		return getOneR_OIROnR201(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_OIROnR201(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelClass_c target) {
		return getOneR_OIROnR201(target, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelClass_c target,
			boolean loadComponent) {
		return getOneR_OIROnR201(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelClass_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_OIROnR201(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test) {
		return getOneR_OIROnR201(modelRoot, target, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c result = null;

		result = find_getOneR_OIROnR201(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ClassInAssociation_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneR_OIROnR201(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ClassInAssociation_c find_getOneR_OIROnR201(
			ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201) {
				for (int i = 0; i < target.backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201
						.size(); ++i) {
					ClassInAssociation_c source = (ClassInAssociation_c) target.backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c[] targets) {
		return getManyR_OIRsOnR201(targets, null);
	}
	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c[] targets, boolean loadComponent) {
		return getManyR_OIRsOnR201(targets, null, loadComponent);
	}
	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR201(targets, test, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassInAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201) {
				for (int j = 0; j < targets[i].backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201
						.size(); ++j) {
					ClassInAssociation_c source = (ClassInAssociation_c) targets[i].backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassInAssociation_c[0];
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(ModelClass_c target) {
		return getManyR_OIRsOnR201(target, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c target, boolean loadComponent) {
		return getManyR_OIRsOnR201(target, null, loadComponent);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR201(target, test, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ClassInAssociation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201) {
			for (int i = 0; i < target.backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201
					.size(); ++i) {
				ClassInAssociation_c source = (ClassInAssociation_c) target.backPointer_HasInstanceAssociationsAbstractedClassInAssociationHasInstanceAssociationsAbstracted_R201
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassInAssociation_c[0];
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR201(Association_c[] targets) {
		return getOneR_OIROnR201(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(
			Association_c[] targets, ClassQueryInterface_c test) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_OIROnR201(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR201(Association_c target) {
		return getOneR_OIROnR201(target, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(Association_c target,
			boolean loadComponent) {
		return getOneR_OIROnR201(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_OIROnR201(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneR_OIROnR201(modelRoot, target, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR201(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c result = null;

		result = find_getOneR_OIROnR201(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ClassInAssociation_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneR_OIROnR201(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ClassInAssociation_c find_getOneR_OIROnR201(
			ModelRoot modelRoot, Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201) {
				for (int i = 0; i < target.backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201
						.size(); ++i) {
					ClassInAssociation_c source = (ClassInAssociation_c) target.backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c[] targets) {
		return getManyR_OIRsOnR201(targets, null);
	}
	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c[] targets, boolean loadComponent) {
		return getManyR_OIRsOnR201(targets, null, loadComponent);
	}
	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR201(targets, test, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassInAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201) {
				for (int j = 0; j < targets[i].backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201
						.size(); ++j) {
					ClassInAssociation_c source = (ClassInAssociation_c) targets[i].backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassInAssociation_c[0];
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c target) {
		return getManyR_OIRsOnR201(target, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c target, boolean loadComponent) {
		return getManyR_OIRsOnR201(target, null, loadComponent);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR201(target, test, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR201(
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ClassInAssociation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201) {
			for (int i = 0; i < target.backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201
					.size(); ++i) {
				ClassInAssociation_c source = (ClassInAssociation_c) target.backPointer_AbstractsAssociationBetweenInstancesOfClassInAssociationAbstractsAssociationBetweenInstancesOf_R201
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassInAssociation_c[0];
		}
	}

	// referring navigation

	ImportedClass_c MayBeRepresentedByImportedClass;
	public void relateAcrossR202To(ImportedClass_c target) {
		relateAcrossR202To(target, true);
	}
	public void relateAcrossR202To(ImportedClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MayBeRepresentedByImportedClass)
			return; // already related

		if (MayBeRepresentedByImportedClass != target) {

			Object oldKey = getInstanceKey();

			if (MayBeRepresentedByImportedClass != null) {
				UmlProblem.removeXtUMLProblem(this,
						MayBeRepresentedByImportedClass);

				MayBeRepresentedByImportedClass.clearBackPointerR202To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassInAssociation_c.relateAcrossR202To(ImportedClass_c target)",
									"Relate performed across R202 from Class In Association to Imported Class without unrelate of prior instance.");
				}
			}

			MayBeRepresentedByImportedClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getIobj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_iobj_id = target.getIobj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR202To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "202", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR202From(ImportedClass_c target) {
		unrelateAcrossR202From(target, true);
	}
	public void unrelateAcrossR202From(ImportedClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MayBeRepresentedByImportedClass == null)
			return; // already unrelated

		if (target != MayBeRepresentedByImportedClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R202",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR202To(this);
		}

		if (MayBeRepresentedByImportedClass != null) {

			m_iobj_id = MayBeRepresentedByImportedClass.getIobj_id();
			if (IdAssigner.NULL_UUID.equals(m_iobj_id)) {
				m_iobj_id = MayBeRepresentedByImportedClass
						.getIobj_idCachedValue();
			}
			MayBeRepresentedByImportedClass = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "202", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR202(
			ImportedClass_c[] targets) {
		return getOneR_OIROnR202(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR202(
			ImportedClass_c[] targets, ClassQueryInterface_c test) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_OIROnR202(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR202(ImportedClass_c target) {
		return getOneR_OIROnR202(target, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR202(
			ImportedClass_c target, boolean loadComponent) {
		return getOneR_OIROnR202(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassInAssociation_c getOneR_OIROnR202(
			ImportedClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_OIROnR202(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassInAssociation_c getOneR_OIROnR202(ModelRoot modelRoot,
			ImportedClass_c target, ClassQueryInterface_c test) {
		return getOneR_OIROnR202(modelRoot, target, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR202(ModelRoot modelRoot,
			ImportedClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c result = null;

		result = find_getOneR_OIROnR202(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ClassInAssociation_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneR_OIROnR202(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ClassInAssociation_c find_getOneR_OIROnR202(
			ModelRoot modelRoot, ImportedClass_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202) {
				for (int i = 0; i < target.backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202
						.size(); ++i) {
					ClassInAssociation_c source = (ClassInAssociation_c) target.backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c[] targets) {
		return getManyR_OIRsOnR202(targets, null);
	}
	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c[] targets, boolean loadComponent) {
		return getManyR_OIRsOnR202(targets, null, loadComponent);
	}
	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR202(targets, test, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassInAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202) {
				for (int j = 0; j < targets[i].backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202
						.size(); ++j) {
					ClassInAssociation_c source = (ClassInAssociation_c) targets[i].backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassInAssociation_c[0];
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c target) {
		return getManyR_OIRsOnR202(target, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c target, boolean loadComponent) {
		return getManyR_OIRsOnR202(target, null, loadComponent);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR202(target, test, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR202(
			ImportedClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ClassInAssociation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202) {
			for (int i = 0; i < target.backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202
					.size(); ++i) {
				ClassInAssociation_c source = (ClassInAssociation_c) target.backPointer_IsUsedForSpanningAssociationsAsClassInAssociationIsUsedForSpanningAssociationsAs_R202
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassInAssociation_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ReferringClassInAssoc_c backPointer_IsSubtypeReferringClassInAssocIsSubtype_R203;

	public void setReferringClassInAssocOrderInChildListR203(
			ReferringClassInAssoc_c target, int index) {
		unrelateAcrossR203From(target);
		ReferringClassInAssoc_c[] elements = ReferringClassInAssoc_c
				.getManyR_RGOsOnR203(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR203From((ReferringClassInAssoc_c) elements[i]);
			}
			count++;
		}
		relateAcrossR203To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR203To((ReferringClassInAssoc_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR203To(ReferringClassInAssoc_c target) {
		if (target != null) {
			target.relateAcrossR203To(this, true);
		}
	}

	public void relateAcrossR203To(ReferringClassInAssoc_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR203To(this, notifyChanges);
		}
	}

	public void setBackPointerR203To(ReferringClassInAssoc_c target) {
		backPointer_IsSubtypeReferringClassInAssocIsSubtype_R203 = target;
	}

	public void unrelateAcrossR203From(ReferringClassInAssoc_c target) {
		if (target != null) {
			target.unrelateAcrossR203From(this, true);
		}
	}

	public void unrelateAcrossR203From(ReferringClassInAssoc_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR203From(this, notifyChanges);
		}
	}

	public void clearBackPointerR203To(ReferringClassInAssoc_c target) {
		if (target == backPointer_IsSubtypeReferringClassInAssocIsSubtype_R203) {
			backPointer_IsSubtypeReferringClassInAssocIsSubtype_R203 = null;
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferringClassInAssoc_c[] targets) {
		return getOneR_OIROnR203(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getOneR_OIROnR203(targets, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ClassInAssociation_c candidate_val = getOneR_OIROnR203(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_OIROnR203(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferringClassInAssoc_c target) {
		return getOneR_OIROnR203(target, true);
	}
	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferringClassInAssoc_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeClassInAssociation;
		} else {
			return null;
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferringClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(targets, test, true);
	}

	public static ClassInAssociation_c [] getManyR_OIRsOnR203(ReferringClassInAssoc_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassInAssociation_c[0];
  
  
  LinkedHashSet<ClassInAssociation_c> elementsSet = new LinkedHashSet<ClassInAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeClassInAssociation == null)
	  targets[i].loadProxy();
    ClassInAssociation_c associate = targets[i].IsSupertypeClassInAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassInAssociation_c[] result = new ClassInAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferringClassInAssoc_c[] targets) {
		return getManyR_OIRsOnR203(targets, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferringClassInAssoc_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ReferringClassInAssoc_c[] targetArray = new ReferringClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_OIRsOnR203(targetArray, test, loadComponent);
		} else {
			ClassInAssociation_c[] result = new ClassInAssociation_c[0];
			return result;
		}

	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferringClassInAssoc_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferringClassInAssoc_c target) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferringClassInAssoc_c target, boolean loadComponent) {
		return getManyR_OIRsOnR203(target, null, loadComponent);
	}

	// referred to navigation

	ReferredToClassInAssoc_c backPointer_IsSubtypeReferredToClassInAssocIsSubtype_R203;

	public void setReferredToClassInAssocOrderInChildListR203(
			ReferredToClassInAssoc_c target, int index) {
		unrelateAcrossR203From(target);
		ReferredToClassInAssoc_c[] elements = ReferredToClassInAssoc_c
				.getManyR_RTOsOnR203(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR203From((ReferredToClassInAssoc_c) elements[i]);
			}
			count++;
		}
		relateAcrossR203To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR203To((ReferredToClassInAssoc_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR203To(ReferredToClassInAssoc_c target) {
		if (target != null) {
			target.relateAcrossR203To(this, true);
		}
	}

	public void relateAcrossR203To(ReferredToClassInAssoc_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR203To(this, notifyChanges);
		}
	}

	public void setBackPointerR203To(ReferredToClassInAssoc_c target) {
		backPointer_IsSubtypeReferredToClassInAssocIsSubtype_R203 = target;
	}

	public void unrelateAcrossR203From(ReferredToClassInAssoc_c target) {
		if (target != null) {
			target.unrelateAcrossR203From(this, true);
		}
	}

	public void unrelateAcrossR203From(ReferredToClassInAssoc_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR203From(this, notifyChanges);
		}
	}

	public void clearBackPointerR203To(ReferredToClassInAssoc_c target) {
		if (target == backPointer_IsSubtypeReferredToClassInAssocIsSubtype_R203) {
			backPointer_IsSubtypeReferredToClassInAssocIsSubtype_R203 = null;
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferredToClassInAssoc_c[] targets) {
		return getOneR_OIROnR203(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferredToClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getOneR_OIROnR203(targets, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferredToClassInAssoc_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ClassInAssociation_c candidate_val = getOneR_OIROnR203(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_OIROnR203(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferredToClassInAssoc_c target) {
		return getOneR_OIROnR203(target, true);
	}
	public static ClassInAssociation_c getOneR_OIROnR203(
			ReferredToClassInAssoc_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeClassInAssociation;
		} else {
			return null;
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferredToClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(targets, test, true);
	}

	public static ClassInAssociation_c [] getManyR_OIRsOnR203(ReferredToClassInAssoc_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassInAssociation_c[0];
  
  
  LinkedHashSet<ClassInAssociation_c> elementsSet = new LinkedHashSet<ClassInAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeClassInAssociation == null)
	  targets[i].loadProxy();
    ClassInAssociation_c associate = targets[i].IsSupertypeClassInAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassInAssociation_c[] result = new ClassInAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferredToClassInAssoc_c[] targets) {
		return getManyR_OIRsOnR203(targets, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferredToClassInAssoc_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ReferredToClassInAssoc_c[] targetArray = new ReferredToClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_OIRsOnR203(targetArray, test, loadComponent);
		} else {
			ClassInAssociation_c[] result = new ClassInAssociation_c[0];
			return result;
		}

	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferredToClassInAssoc_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferredToClassInAssoc_c target) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ReferredToClassInAssoc_c target, boolean loadComponent) {
		return getManyR_OIRsOnR203(target, null, loadComponent);
	}

	// referred to navigation

	ClassAsDerivedOneSide_c backPointer_IsSubtypeClassAsDerivedOneSideIsSubtype_R203;

	public void setClassAsDerivedOneSideOrderInChildListR203(
			ClassAsDerivedOneSide_c target, int index) {
		unrelateAcrossR203From(target);
		ClassAsDerivedOneSide_c[] elements = ClassAsDerivedOneSide_c
				.getManyR_CONEsOnR203(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR203From((ClassAsDerivedOneSide_c) elements[i]);
			}
			count++;
		}
		relateAcrossR203To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR203To((ClassAsDerivedOneSide_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR203To(ClassAsDerivedOneSide_c target) {
		if (target != null) {
			target.relateAcrossR203To(this, true);
		}
	}

	public void relateAcrossR203To(ClassAsDerivedOneSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR203To(this, notifyChanges);
		}
	}

	public void setBackPointerR203To(ClassAsDerivedOneSide_c target) {
		backPointer_IsSubtypeClassAsDerivedOneSideIsSubtype_R203 = target;
	}

	public void unrelateAcrossR203From(ClassAsDerivedOneSide_c target) {
		if (target != null) {
			target.unrelateAcrossR203From(this, true);
		}
	}

	public void unrelateAcrossR203From(ClassAsDerivedOneSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR203From(this, notifyChanges);
		}
	}

	public void clearBackPointerR203To(ClassAsDerivedOneSide_c target) {
		if (target == backPointer_IsSubtypeClassAsDerivedOneSideIsSubtype_R203) {
			backPointer_IsSubtypeClassAsDerivedOneSideIsSubtype_R203 = null;
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOneSide_c[] targets) {
		return getOneR_OIROnR203(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOneSide_c[] targets, ClassQueryInterface_c test) {
		return getOneR_OIROnR203(targets, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOneSide_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ClassInAssociation_c candidate_val = getOneR_OIROnR203(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_OIROnR203(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOneSide_c target) {
		return getOneR_OIROnR203(target, true);
	}
	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOneSide_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeClassInAssociation;
		} else {
			return null;
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOneSide_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(targets, test, true);
	}

	public static ClassInAssociation_c [] getManyR_OIRsOnR203(ClassAsDerivedOneSide_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassInAssociation_c[0];
  
  
  LinkedHashSet<ClassInAssociation_c> elementsSet = new LinkedHashSet<ClassInAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeClassInAssociation == null)
	  targets[i].loadProxy();
    ClassInAssociation_c associate = targets[i].IsSupertypeClassInAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassInAssociation_c[] result = new ClassInAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOneSide_c[] targets) {
		return getManyR_OIRsOnR203(targets, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOneSide_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsDerivedOneSide_c[] targetArray = new ClassAsDerivedOneSide_c[1];
			targetArray[0] = target;
			return getManyR_OIRsOnR203(targetArray, test, loadComponent);
		} else {
			ClassInAssociation_c[] result = new ClassInAssociation_c[0];
			return result;
		}

	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOneSide_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOneSide_c target) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOneSide_c target, boolean loadComponent) {
		return getManyR_OIRsOnR203(target, null, loadComponent);
	}

	// referred to navigation

	ClassAsDerivedOtherSide_c backPointer_IsSubtypeClassAsDerivedOtherSideIsSubtype_R203;

	public void setClassAsDerivedOtherSideOrderInChildListR203(
			ClassAsDerivedOtherSide_c target, int index) {
		unrelateAcrossR203From(target);
		ClassAsDerivedOtherSide_c[] elements = ClassAsDerivedOtherSide_c
				.getManyR_COTHsOnR203(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR203From((ClassAsDerivedOtherSide_c) elements[i]);
			}
			count++;
		}
		relateAcrossR203To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR203To((ClassAsDerivedOtherSide_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR203To(ClassAsDerivedOtherSide_c target) {
		if (target != null) {
			target.relateAcrossR203To(this, true);
		}
	}

	public void relateAcrossR203To(ClassAsDerivedOtherSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR203To(this, notifyChanges);
		}
	}

	public void setBackPointerR203To(ClassAsDerivedOtherSide_c target) {
		backPointer_IsSubtypeClassAsDerivedOtherSideIsSubtype_R203 = target;
	}

	public void unrelateAcrossR203From(ClassAsDerivedOtherSide_c target) {
		if (target != null) {
			target.unrelateAcrossR203From(this, true);
		}
	}

	public void unrelateAcrossR203From(ClassAsDerivedOtherSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR203From(this, notifyChanges);
		}
	}

	public void clearBackPointerR203To(ClassAsDerivedOtherSide_c target) {
		if (target == backPointer_IsSubtypeClassAsDerivedOtherSideIsSubtype_R203) {
			backPointer_IsSubtypeClassAsDerivedOtherSideIsSubtype_R203 = null;
		}
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOtherSide_c[] targets) {
		return getOneR_OIROnR203(targets, null);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOtherSide_c[] targets, ClassQueryInterface_c test) {
		return getOneR_OIROnR203(targets, test, true);
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOtherSide_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ClassInAssociation_c candidate_val = getOneR_OIROnR203(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_OIROnR203(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOtherSide_c target) {
		return getOneR_OIROnR203(target, true);
	}
	public static ClassInAssociation_c getOneR_OIROnR203(
			ClassAsDerivedOtherSide_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeClassInAssociation;
		} else {
			return null;
		}
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOtherSide_c[] targets, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(targets, test, true);
	}

	public static ClassInAssociation_c [] getManyR_OIRsOnR203(ClassAsDerivedOtherSide_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassInAssociation_c[0];
  
  
  LinkedHashSet<ClassInAssociation_c> elementsSet = new LinkedHashSet<ClassInAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeClassInAssociation == null)
	  targets[i].loadProxy();
    ClassInAssociation_c associate = targets[i].IsSupertypeClassInAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassInAssociation_c[] result = new ClassInAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOtherSide_c[] targets) {
		return getManyR_OIRsOnR203(targets, null);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOtherSide_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsDerivedOtherSide_c[] targetArray = new ClassAsDerivedOtherSide_c[1];
			targetArray[0] = target;
			return getManyR_OIRsOnR203(targetArray, test, loadComponent);
		} else {
			ClassInAssociation_c[] result = new ClassInAssociation_c[0];
			return result;
		}

	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOtherSide_c target, ClassQueryInterface_c test) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOtherSide_c target) {
		return getManyR_OIRsOnR203(target, null, true);
	}

	public static ClassInAssociation_c[] getManyR_OIRsOnR203(
			ClassAsDerivedOtherSide_c target, boolean loadComponent) {
		return getManyR_OIRsOnR203(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R201
		Association_c relInst58240 = (Association_c) baseRoot.getInstanceList(
				Association_c.class).get(new Object[]{m_rel_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58240 == null) {
			relInst58240 = (Association_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Association_c.class)
					.get(new Object[]{m_rel_id});
		}
		if (relInst58240 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58240 = (Association_c) roots[i].getInstanceList(
						Association_c.class).get(new Object[]{m_rel_id});
				if (relInst58240 != null)
					break;
			}
		}
		//synchronized
		if (relInst58240 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58240) && !isProxy())) {
				relInst58240.relateAcrossR201To(this, notifyChanges);
			}
		}

		ModelClass_c relInst58241 = (ModelClass_c) baseRoot.getInstanceList(
				ModelClass_c.class).get(new Object[]{m_obj_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58241 == null) {
			relInst58241 = (ModelClass_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ModelClass_c.class)
					.get(new Object[]{m_obj_id});
		}
		if (relInst58241 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58241 = (ModelClass_c) roots[i].getInstanceList(
						ModelClass_c.class).get(new Object[]{m_obj_id});
				if (relInst58241 != null)
					break;
			}
		}
		//synchronized
		if (relInst58241 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58241) && !isProxy())) {
				relInst58241.relateAcrossR201To(this, notifyChanges);
			}
		}

		if (MayBeRepresentedByImportedClass == null) {
			// R202
			ImportedClass_c relInst58242 = (ImportedClass_c) baseRoot
					.getInstanceList(ImportedClass_c.class).get(
							new Object[]{m_iobj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58242 == null) {
				relInst58242 = (ImportedClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ImportedClass_c.class)
						.get(new Object[]{m_iobj_id});
			}
			if (relInst58242 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58242 = (ImportedClass_c) roots[i].getInstanceList(
							ImportedClass_c.class).get(new Object[]{m_iobj_id});
					if (relInst58242 != null)
						break;
				}
			}
			//synchronized
			if (relInst58242 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58242) && !isProxy())) {
					relInst58242.relateAcrossR202To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R201
		// R_REL
		inst = HasInstanceAssociationsAbstractedAssociation;
		unrelateAcrossR201From(HasInstanceAssociationsAbstractedAssociation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// O_OBJ
		inst = AbstractsAssociationBetweenInstancesOfModelClass;
		unrelateAcrossR201From(
				AbstractsAssociationBetweenInstancesOfModelClass, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R202
		// O_IOBJ
		inst = MayBeRepresentedByImportedClass;
		unrelateAcrossR202From(MayBeRepresentedByImportedClass, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassInAssociation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassInAssociation_c inst = (ClassInAssociation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClassInAssociation_c ClassInAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassInAssociation_c result = findClassInAssociationInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ClassInAssociation_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findClassInAssociationInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ClassInAssociation_c findClassInAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassInAssociation_c x = (ClassInAssociation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ClassInAssociation_c ClassInAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassInAssociationInstance(modelRoot, test, true);
	}

	public static ClassInAssociation_c ClassInAssociationInstance(
			ModelRoot modelRoot) {
		return ClassInAssociationInstance(modelRoot, null, true);
	}

	public static ClassInAssociation_c[] ClassInAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassInAssociation_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ClassInAssociation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassInAssociation_c x = (ClassInAssociation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClassInAssociation_c[] ret_set = new ClassInAssociation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassInAssociation_c[0];
			}
		}
	}
	public static ClassInAssociation_c[] ClassInAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassInAssociationInstances(modelRoot, test, true);
	}
	public static ClassInAssociation_c[] ClassInAssociationInstances(
			ModelRoot modelRoot) {
		return ClassInAssociationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Class In Association.dispose call: ";
		ReferringClassInAssoc_c testR203Inst1 = ReferringClassInAssoc_c
				.getOneR_RGOOnR203(this, false);

		if (testR203Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "203 ";
		}
		ReferredToClassInAssoc_c testR203Inst2 = ReferredToClassInAssoc_c
				.getOneR_RTOOnR203(this, false);

		if (testR203Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "203 ";
		}
		ClassAsDerivedOneSide_c testR203Inst3 = ClassAsDerivedOneSide_c
				.getOneR_CONEOnR203(this, false);

		if (testR203Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "203 ";
		}
		ClassAsDerivedOtherSide_c testR203Inst4 = ClassAsDerivedOtherSide_c
				.getOneR_COTHOnR203(this, false);

		if (testR203Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "203 ";
		}
		Association_c testR201Inst = Association_c.getOneR_RELOnR201(this,
				false);

		if (testR201Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "201 ";
		}

		ModelClass_c testR201InstOth = ModelClass_c.getOneO_OBJOnR201(this,
				false);

		if (testR201InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "201 ";
		}
		ImportedClass_c testR202Inst = ImportedClass_c.getOneO_IOBJOnR202(this,
				false);

		if (testR202Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "202 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Class In Association",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("oir_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		if (attributeName.equals("iobj_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getOir_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getObj_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getObj_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getRel_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getRel_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getOir_idLongBased() {
		if (m_oir_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_oir_id)) {
			return 0xfffffff & m_oir_id.getLeastSignificantBits();
		}
		return m_oir_idLongBased;
	}
	public java.util.UUID getOir_id() {
		return m_oir_id;
	}

	public void setOir_id(java.util.UUID newValue) {
		m_oir_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getObj_idLongBased() {
		if (AbstractsAssociationBetweenInstancesOfModelClass != null) {
			return AbstractsAssociationBetweenInstancesOfModelClass
					.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (AbstractsAssociationBetweenInstancesOfModelClass != null) {
			return AbstractsAssociationBetweenInstancesOfModelClass.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIobj_idLongBased() {
		if (MayBeRepresentedByImportedClass != null) {
			return MayBeRepresentedByImportedClass.getIobj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getIobj_id() {
		if (MayBeRepresentedByImportedClass != null) {
			return MayBeRepresentedByImportedClass.getIobj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIobj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_iobj_id))
			return m_iobj_id;
		else
			return getIobj_id();
	}

	public void setIobj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_iobj_id)) {
				return;
			}
		} else if (m_iobj_id != null) {
			if (m_iobj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Iobj_id", m_iobj_id, newValue, true);
		m_iobj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getRel_idLongBased() {
		if (HasInstanceAssociationsAbstractedAssociation != null) {
			return HasInstanceAssociationsAbstractedAssociation
					.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (HasInstanceAssociationsAbstractedAssociation != null) {
			return HasInstanceAssociationsAbstractedAssociation.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public void setRel_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_rel_id)) {
				return;
			}
		} else if (m_rel_id != null) {
			if (m_rel_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Rel_id", m_rel_id, newValue, true);
		m_rel_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class In Association", //$NON-NLS-1$
						" Operation entered: Class In Association::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClassInAssociation_c[] objs = ClassInAssociation_c
				.ClassInAssociationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class In Association", //$NON-NLS-1$
				" Operation entered: Class In Association::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClassInAssociation_c_test58244_c implements ClassQueryInterface_c {
			ClassInAssociation_c_test58244_c(java.util.UUID p58245,
					java.util.UUID p58246, java.util.UUID p58247) {
				m_p58245 = p58245;
				m_p58246 = p58246;
				m_p58247 = p58247;
			}
			private java.util.UUID m_p58245;
			private java.util.UUID m_p58246;
			private java.util.UUID m_p58247;
			public boolean evaluate(Object candidate) {
				ClassInAssociation_c selected = (ClassInAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58245))
						& (selected.getObj_id().equals(m_p58246))
						& (selected.getRel_id().equals(m_p58247));
				return retval;
			}
		}

		ClassInAssociation_c[] objs58243 = ClassInAssociation_c
				.ClassInAssociationInstances(modelRoot,
						new ClassInAssociation_c_test58244_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58243.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class In Association", //$NON-NLS-1$
								"Consistency: Object: Class In Association: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58243.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class In Association: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58243.length), e);
			}
			retval = false;

		}

		if (((objs58243.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class In Association", //$NON-NLS-1$
								"Consistency: Object: Class In Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58243.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class In Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58243.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Class In Association is a link class in association: rel.Numb = 201
		// Other side
		// The other side class in the association is: Model Class
		class ModelClass_c_test58251_c implements ClassQueryInterface_c {
			ModelClass_c_test58251_c(java.util.UUID p58252) {
				m_p58252 = p58252;
			}
			private java.util.UUID m_p58252;
			public boolean evaluate(Object candidate) {
				ModelClass_c selected = (ModelClass_c) candidate;
				boolean retval = false;
				retval = (selected.getObj_id().equals(m_p58252));
				return retval;
			}
		}

		ModelClass_c[] objs58250 = ModelClass_c.ModelClassInstances(modelRoot,
				new ModelClass_c_test58251_c(getObj_id()));

		// The other side class is unconditional
		if (((objs58250.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class In Association", //$NON-NLS-1$
								"Consistency: Object: Class In Association: Association: 201: Cardinality of unconditional other side of link is equal to zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58250.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class In Association: Association: 201: Cardinality of unconditional other side of link is equal to zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58250.length), e);
			}
			retval = false;

		}

		// Class In Association is a referring class in association: rel.Numb = 202
		// The participating class is: Imported Class
		class ImportedClass_c_test58254_c implements ClassQueryInterface_c {
			ImportedClass_c_test58254_c(java.util.UUID p58255) {
				m_p58255 = p58255;
			}
			private java.util.UUID m_p58255;
			public boolean evaluate(Object candidate) {
				ImportedClass_c selected = (ImportedClass_c) candidate;
				boolean retval = false;
				retval = (selected.getIobj_id().equals(m_p58255));
				return retval;
			}
		}

		ImportedClass_c[] objs58253 = ImportedClass_c.ImportedClassInstances(
				modelRoot, new ImportedClass_c_test58254_c(getIobj_id()));

		if (((objs58253.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class In Association", //$NON-NLS-1$
								"Consistency: Object: Class In Association: Association: 202: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58253.length)
										+ " IObj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class In Association: Association: 202: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58253.length)
										+ " IObj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 203
		int objs58256 = 0;
		// Subtype Object: Referring Class In Assoc
		class ReferringClassInAssoc_c_test58257_c
				implements
					ClassQueryInterface_c {
			ReferringClassInAssoc_c_test58257_c(java.util.UUID p58258,
					java.util.UUID p58259, java.util.UUID p58260) {
				m_p58258 = p58258;
				m_p58259 = p58259;
				m_p58260 = p58260;
			}
			private java.util.UUID m_p58258;
			private java.util.UUID m_p58259;
			private java.util.UUID m_p58260;
			public boolean evaluate(Object candidate) {
				ReferringClassInAssoc_c selected = (ReferringClassInAssoc_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58258))
						& (selected.getObj_id().equals(m_p58259))
						& (selected.getRel_id().equals(m_p58260));
				return retval;
			}
		}

		ReferringClassInAssoc_c[] objs58261 = ReferringClassInAssoc_c
				.ReferringClassInAssocInstances(modelRoot,
						new ReferringClassInAssoc_c_test58257_c(getOir_id(),
								getObj_id(), getRel_id()));

		objs58256 = objs58256 + objs58261.length;
		// Subtype Object: Referred To Class in Assoc
		class ReferredToClassInAssoc_c_test58262_c
				implements
					ClassQueryInterface_c {
			ReferredToClassInAssoc_c_test58262_c(java.util.UUID p58263,
					java.util.UUID p58264, java.util.UUID p58265) {
				m_p58263 = p58263;
				m_p58264 = p58264;
				m_p58265 = p58265;
			}
			private java.util.UUID m_p58263;
			private java.util.UUID m_p58264;
			private java.util.UUID m_p58265;
			public boolean evaluate(Object candidate) {
				ReferredToClassInAssoc_c selected = (ReferredToClassInAssoc_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58263))
						& (selected.getObj_id().equals(m_p58264))
						& (selected.getRel_id().equals(m_p58265));
				return retval;
			}
		}

		ReferredToClassInAssoc_c[] objs58266 = ReferredToClassInAssoc_c
				.ReferredToClassInAssocInstances(modelRoot,
						new ReferredToClassInAssoc_c_test58262_c(getOir_id(),
								getObj_id(), getRel_id()));

		objs58256 = objs58256 + objs58266.length;
		// Subtype Object: Class As Derived One Side
		class ClassAsDerivedOneSide_c_test58267_c
				implements
					ClassQueryInterface_c {
			ClassAsDerivedOneSide_c_test58267_c(java.util.UUID p58268,
					java.util.UUID p58269, java.util.UUID p58270) {
				m_p58268 = p58268;
				m_p58269 = p58269;
				m_p58270 = p58270;
			}
			private java.util.UUID m_p58268;
			private java.util.UUID m_p58269;
			private java.util.UUID m_p58270;
			public boolean evaluate(Object candidate) {
				ClassAsDerivedOneSide_c selected = (ClassAsDerivedOneSide_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58268))
						& (selected.getObj_id().equals(m_p58269))
						& (selected.getRel_id().equals(m_p58270));
				return retval;
			}
		}

		ClassAsDerivedOneSide_c[] objs58271 = ClassAsDerivedOneSide_c
				.ClassAsDerivedOneSideInstances(modelRoot,
						new ClassAsDerivedOneSide_c_test58267_c(getOir_id(),
								getObj_id(), getRel_id()));

		objs58256 = objs58256 + objs58271.length;
		// Subtype Object: Class As Derived Other Side
		class ClassAsDerivedOtherSide_c_test58272_c
				implements
					ClassQueryInterface_c {
			ClassAsDerivedOtherSide_c_test58272_c(java.util.UUID p58273,
					java.util.UUID p58274, java.util.UUID p58275) {
				m_p58273 = p58273;
				m_p58274 = p58274;
				m_p58275 = p58275;
			}
			private java.util.UUID m_p58273;
			private java.util.UUID m_p58274;
			private java.util.UUID m_p58275;
			public boolean evaluate(Object candidate) {
				ClassAsDerivedOtherSide_c selected = (ClassAsDerivedOtherSide_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58273))
						& (selected.getObj_id().equals(m_p58274))
						& (selected.getRel_id().equals(m_p58275));
				return retval;
			}
		}

		ClassAsDerivedOtherSide_c[] objs58276 = ClassAsDerivedOtherSide_c
				.ClassAsDerivedOtherSideInstances(modelRoot,
						new ClassAsDerivedOtherSide_c_test58272_c(getOir_id(),
								getObj_id(), getRel_id()));

		objs58256 = objs58256 + objs58276.length;
		if (objs58256 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class In Association", //$NON-NLS-1$
								"Consistency: Object: Class In Association: Association: 203: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58256)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class In Association: Association: 203: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58256), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_text_phrase() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class In Association",
				" Operation entered: ClassInAssociation::Get_text_phrase");
		final ModelRoot modelRoot = getModelRoot();
		ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c
				.getOneR_PARTOnR204(ReferredToClassInAssoc_c
						.getOneR_RTOOnR203(this));

		if (((v_part != null))) {

			return v_part.getTxt_phrs();

		}

		ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c
				.getOneR_FORMOnR205(ReferringClassInAssoc_c
						.getOneR_RGOOnR203(this));

		if (((v_form != null))) {

			return v_form.getTxt_phrs();

		}

		ClassAsAssociatedOneSide_c v_aone = ClassAsAssociatedOneSide_c
				.getOneR_AONEOnR204(ReferredToClassInAssoc_c
						.getOneR_RTOOnR203(this));

		if (((v_aone != null))) {

			return v_aone.getTxt_phrs();

		}

		ClassAsAssociatedOtherSide_c v_aoth = ClassAsAssociatedOtherSide_c
				.getOneR_AOTHOnR204(ReferredToClassInAssoc_c
						.getOneR_RTOOnR203(this));

		if (((v_aoth != null))) {

			return v_aoth.getTxt_phrs();

		}

		ClassAsDerivedOneSide_c v_cone = ClassAsDerivedOneSide_c
				.getOneR_CONEOnR203(this);

		if (((v_cone != null))) {

			return v_cone.getTxt_phrs();

		}

		ClassAsDerivedOtherSide_c v_coth = ClassAsDerivedOtherSide_c
				.getOneR_COTHOnR203(this);

		if (((v_coth != null))) {

			return v_coth.getTxt_phrs();

		}

		return "";

	} // End get_text_phrase
	public int Get_multiplicity() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class In Association",
				" Operation entered: ClassInAssociation::Get_multiplicity");
		final ModelRoot modelRoot = getModelRoot();
		ClassAsSimpleParticipant_c v_part = ClassAsSimpleParticipant_c
				.getOneR_PARTOnR204(ReferredToClassInAssoc_c
						.getOneR_RTOOnR203(this));

		if (((v_part != null))) {

			if ((v_part.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c
				.getOneR_FORMOnR205(ReferringClassInAssoc_c
						.getOneR_RGOOnR203(this));

		if (((v_form != null))) {

			if ((v_form.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		ClassAsAssociatedOneSide_c v_aone = ClassAsAssociatedOneSide_c
				.getOneR_AONEOnR204(ReferredToClassInAssoc_c
						.getOneR_RTOOnR203(this));

		if (((v_aone != null))) {

			if ((v_aone.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		ClassAsAssociatedOtherSide_c v_aoth = ClassAsAssociatedOtherSide_c
				.getOneR_AOTHOnR204(ReferredToClassInAssoc_c
						.getOneR_RTOOnR203(this));

		if (((v_aoth != null))) {

			if ((v_aoth.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		ClassAsLink_c v_assr = ClassAsLink_c
				.getOneR_ASSROnR205(ReferringClassInAssoc_c
						.getOneR_RGOOnR203(this));

		if (((v_assr != null))) {

			if ((v_assr.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		ClassAsDerivedOneSide_c v_cone = ClassAsDerivedOneSide_c
				.getOneR_CONEOnR203(this);

		if (((v_cone != null))) {

			if ((v_cone.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		ClassAsDerivedOtherSide_c v_coth = ClassAsDerivedOtherSide_c
				.getOneR_COTHOnR203(this);

		if (((v_coth != null))) {

			if ((v_coth.getMult() == 0)) {

				return Multiplicity_c.One;

			}

			else {

				return Multiplicity_c.Many;

			}

		}

		return Multiplicity_c.Unknown;

	} // End get_multiplicity
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class In Association",
				" Operation entered: ClassInAssociation::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ReferringClassInAssoc_c v_rgo = ReferringClassInAssoc_c
				.getOneR_RGOOnR203(this);

		ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR203(this);

		ClassAsDerivedOneSide_c v_cone = ClassAsDerivedOneSide_c
				.getOneR_CONEOnR203(this);

		ClassAsDerivedOtherSide_c v_coth = ClassAsDerivedOtherSide_c
				.getOneR_COTHOnR203(this);

		if (((v_rgo != null))) {

			if (v_rgo != null) {
				v_rgo.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_rto != null))) {

			if (v_rto != null) {
				v_rto.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_cone != null))) {

			if (v_cone != null) {
				v_cone.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else if (((v_coth != null))) {

			if (v_coth != null) {
				v_coth.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ImportedClass_c v_iobj = ImportedClass_c.getOneO_IOBJOnR202(this);

		if (((v_iobj != null))) {

			this.unrelateAcrossR202From(v_iobj);

		}

		ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR201(this);

		Association_c v_rel = Association_c.getOneR_RELOnR201(this);

		unrelateAcrossR201From(v_obj);
		unrelateAcrossR201From(v_rel);

		ClassInAssociation_c[] v_oirs = ClassInAssociation_c
				.getManyR_OIRsOnR201(v_rel);

		if (((v_rel != null) && (v_oirs.length) == 0)) {

			if (v_rel != null) {
				v_rel.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Class In Association
