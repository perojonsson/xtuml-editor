package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActivityEdge_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTIVITY_EDGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ActivityEdge_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ActivityEdge_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_package_id, String p_m_guard,
			String p_m_descrip, java.util.UUID p_m_targetid,
			java.util.UUID p_m_sourceid) {
		super(modelRoot);
		m_guard = p_m_guard;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_targetid = IdAssigner.preprocessUUID(p_m_targetid);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sourceid = IdAssigner.preprocessUUID(p_m_sourceid);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ActivityEdge_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_package_id,
			String p_m_guard, String p_m_descrip, java.util.UUID p_m_targetid,
			java.util.UUID p_m_sourceid, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);
		ActivityEdge_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ActivityEdge_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_guard = p_m_guard;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_package_id = IdAssigner
						.preprocessUUID(p_m_package_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_targetid = IdAssigner.preprocessUUID(p_m_targetid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sourceid = IdAssigner.preprocessUUID(p_m_sourceid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ActivityEdge_c(modelRoot, p_m_id, p_m_package_id,
					p_m_guard, p_m_descrip, p_m_targetid, p_m_sourceid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ActivityEdge_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_package_id,
			String p_m_guard, String p_m_descrip, java.util.UUID p_m_targetid,
			java.util.UUID p_m_sourceid) {
		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);
		ActivityEdge_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ActivityEdge_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_guard = p_m_guard;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_targetid = IdAssigner.preprocessUUID(p_m_targetid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sourceid = IdAssigner.preprocessUUID(p_m_sourceid);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);

				return source;
			}
		}
		// there is no instance matching the id
		ActivityEdge_c new_inst = new ActivityEdge_c(modelRoot, p_m_id,
				p_m_package_id, p_m_guard, p_m_descrip, p_m_targetid,
				p_m_sourceid);
		return new_inst;
	}
	public ActivityEdge_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_guard = "";
		m_descrip = "";
		m_package_id = IdAssigner.NULL_UUID;
		m_targetid = IdAssigner.NULL_UUID;
		m_sourceid = IdAssigner.NULL_UUID;
		m_id = idAssigner.createUUID();
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ActivityEdge_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ActivityEdge_c)) {
			return false;
		}

		ActivityEdge_c me = (ActivityEdge_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ActivityEdge_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ActivityEdge_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ActivityEdge_c)) {
			return false;
		}

		ActivityEdge_c me = (ActivityEdge_c) elem;
		if (!getIdCachedValue().equals(
				((ActivityEdge_c) elem).getIdCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_guard;
	private String m_descrip;
	private java.util.UUID m_package_id;
	private java.util.UUID m_targetid;
	private java.util.UUID m_sourceid;
	private java.util.UUID m_id;

	// declare association references from this class

	// referring navigation

	PackageableElement_c IsSupertypePackageableElement;
	public void relateAcrossR8001To(PackageableElement_c target) {
		relateAcrossR8001To(target, true);
	}
	public void relateAcrossR8001To(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypePackageableElement)
			return; // already related

		if (IsSupertypePackageableElement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypePackageableElement != null) {

				IsSupertypePackageableElement.clearBackPointerR8001To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActivityEdge_c.relateAcrossR8001To(PackageableElement_c target)",
									"Relate performed across R8001 from Activity Edge to Packageable Element without unrelate of prior instance.");
				}
			}

			IsSupertypePackageableElement = target;
			m_id = target.getElement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR8001To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "8001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR8001From(PackageableElement_c target) {
		unrelateAcrossR8001From(target, true);
	}
	public void unrelateAcrossR8001From(PackageableElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypePackageableElement == null)
			return; // already unrelated

		if (target != IsSupertypePackageableElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R8001",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR8001To(this);
		}

		if (IsSupertypePackageableElement != null) {

			m_id = IsSupertypePackageableElement.getElement_id();
			IsSupertypePackageableElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "8001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActivityEdge_c getOneA_EOnR8001(PackageableElement_c[] targets) {
		return getOneA_EOnR8001(targets, null);
	}

	public static ActivityEdge_c getOneA_EOnR8001(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		ActivityEdge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_EOnR8001(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActivityEdge_c getOneA_EOnR8001(PackageableElement_c target) {
		return getOneA_EOnR8001(target, null);
	}

	public static ActivityEdge_c getOneA_EOnR8001(PackageableElement_c target,
			boolean loadComponent) {
		return getOneA_EOnR8001(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActivityEdge_c getOneA_EOnR8001(PackageableElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_EOnR8001(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActivityEdge_c getOneA_EOnR8001(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test) {
		return getOneA_EOnR8001(modelRoot, target, test, true);
	}

	public static ActivityEdge_c getOneA_EOnR8001(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneA_EOnR8001(modelRoot, target, test);
	}
	private static ActivityEdge_c find_getOneA_EOnR8001(ModelRoot modelRoot,
			PackageableElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ActivityEdge_c source = (ActivityEdge_c) target.backPointer_IsSubtypeActivityEdgeIsSubtype_R8001;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActivityEdge_c[] getManyA_EsOnR8001(
			PackageableElement_c[] targets) {
		return getManyA_EsOnR8001(targets, null);
	}
	public static ActivityEdge_c[] getManyA_EsOnR8001(
			PackageableElement_c[] targets, boolean loadComponent) {
		return getManyA_EsOnR8001(targets, null, loadComponent);
	}
	public static ActivityEdge_c[] getManyA_EsOnR8001(
			PackageableElement_c[] targets, ClassQueryInterface_c test) {
		return getManyA_EsOnR8001(targets, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR8001(
			PackageableElement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActivityEdge_c source = (ActivityEdge_c) targets[i].backPointer_IsSubtypeActivityEdgeIsSubtype_R8001;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	public static ActivityEdge_c[] getManyA_EsOnR8001(
			PackageableElement_c target) {
		if (target != null) {
			PackageableElement_c[] targetArray = new PackageableElement_c[1];
			targetArray[0] = target;
			return getManyA_EsOnR8001(targetArray);
		} else {
			ActivityEdge_c[] result = new ActivityEdge_c[0];
			return result;
		}
	}

	public static ActivityEdge_c[] getManyA_EsOnR8001(
			PackageableElement_c target, boolean loadComponent) {
		if (target != null) {
			PackageableElement_c[] targetArray = new PackageableElement_c[1];
			targetArray[0] = target;
			return getManyA_EsOnR8001(targetArray, loadComponent);
		} else {
			ActivityEdge_c[] result = new ActivityEdge_c[0];
			return result;
		}
	}

	// referring navigation

	ActivityNode_c TargetActivityNode;
	public void relateAcrossR1103To(ActivityNode_c target) {
		relateAcrossR1103To(target, true);
	}
	public void relateAcrossR1103To(ActivityNode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == TargetActivityNode)
			return; // already related

		if (TargetActivityNode != target) {

			Object oldKey = getInstanceKey();

			if (TargetActivityNode != null) {

				TargetActivityNode.clearBackPointerR1103To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActivityEdge_c.relateAcrossR1103To(ActivityNode_c target)",
									"Relate performed across R1103 from Activity Edge to Activity Node without unrelate of prior instance.");
				}
			}

			TargetActivityNode = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_targetid = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1103To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1103", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1103From(ActivityNode_c target) {
		unrelateAcrossR1103From(target, true);
	}
	public void unrelateAcrossR1103From(ActivityNode_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (TargetActivityNode == null)
			return; // already unrelated

		if (target != TargetActivityNode) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1103",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1103To(this);
		}

		if (TargetActivityNode != null) {

			m_targetid = TargetActivityNode.getId();
			if (IdAssigner.NULL_UUID.equals(m_targetid)) {
				m_targetid = TargetActivityNode.getIdCachedValue();
			}
			TargetActivityNode = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1103", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActivityEdge_c getOneA_EOnR1103(ActivityNode_c[] targets) {
		return getOneA_EOnR1103(targets, null);
	}

	public static ActivityEdge_c getOneA_EOnR1103(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		ActivityEdge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_EOnR1103(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActivityEdge_c getOneA_EOnR1103(ActivityNode_c target) {
		return getOneA_EOnR1103(target, null);
	}

	public static ActivityEdge_c getOneA_EOnR1103(ActivityNode_c target,
			boolean loadComponent) {
		return getOneA_EOnR1103(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActivityEdge_c getOneA_EOnR1103(ActivityNode_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_EOnR1103(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActivityEdge_c getOneA_EOnR1103(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		return getOneA_EOnR1103(modelRoot, target, test, true);
	}

	public static ActivityEdge_c getOneA_EOnR1103(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneA_EOnR1103(modelRoot, target, test);
	}
	private static ActivityEdge_c find_getOneA_EOnR1103(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IncomingActivityEdgeIncoming_R1103) {
				for (int i = 0; i < target.backPointer_IncomingActivityEdgeIncoming_R1103
						.size(); ++i) {
					ActivityEdge_c source = (ActivityEdge_c) target.backPointer_IncomingActivityEdgeIncoming_R1103
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c[] targets) {
		return getManyA_EsOnR1103(targets, null);
	}
	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c[] targets,
			boolean loadComponent) {
		return getManyA_EsOnR1103(targets, null, loadComponent);
	}
	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_EsOnR1103(targets, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IncomingActivityEdgeIncoming_R1103) {
				for (int j = 0; j < targets[i].backPointer_IncomingActivityEdgeIncoming_R1103
						.size(); ++j) {
					ActivityEdge_c source = (ActivityEdge_c) targets[i].backPointer_IncomingActivityEdgeIncoming_R1103
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c target) {
		return getManyA_EsOnR1103(target, null);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c target,
			boolean loadComponent) {
		return getManyA_EsOnR1103(target, null, loadComponent);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c target,
			ClassQueryInterface_c test) {
		return getManyA_EsOnR1103(target, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1103(ActivityNode_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IncomingActivityEdgeIncoming_R1103) {
			for (int i = 0; i < target.backPointer_IncomingActivityEdgeIncoming_R1103
					.size(); ++i) {
				ActivityEdge_c source = (ActivityEdge_c) target.backPointer_IncomingActivityEdgeIncoming_R1103
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	// referring navigation

	ActivityNode_c SourceActivityNode;
	public void relateAcrossR1104To(ActivityNode_c target) {
		relateAcrossR1104To(target, true);
	}
	public void relateAcrossR1104To(ActivityNode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SourceActivityNode)
			return; // already related

		if (SourceActivityNode != target) {

			Object oldKey = getInstanceKey();

			if (SourceActivityNode != null) {

				SourceActivityNode.clearBackPointerR1104To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActivityEdge_c.relateAcrossR1104To(ActivityNode_c target)",
									"Relate performed across R1104 from Activity Edge to Activity Node without unrelate of prior instance.");
				}
			}

			SourceActivityNode = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_sourceid = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1104To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1104", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1104From(ActivityNode_c target) {
		unrelateAcrossR1104From(target, true);
	}
	public void unrelateAcrossR1104From(ActivityNode_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SourceActivityNode == null)
			return; // already unrelated

		if (target != SourceActivityNode) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1104",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1104To(this);
		}

		if (SourceActivityNode != null) {

			m_sourceid = SourceActivityNode.getId();
			if (IdAssigner.NULL_UUID.equals(m_sourceid)) {
				m_sourceid = SourceActivityNode.getIdCachedValue();
			}
			SourceActivityNode = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1104", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActivityEdge_c getOneA_EOnR1104(ActivityNode_c[] targets) {
		return getOneA_EOnR1104(targets, null);
	}

	public static ActivityEdge_c getOneA_EOnR1104(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		ActivityEdge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_EOnR1104(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActivityEdge_c getOneA_EOnR1104(ActivityNode_c target) {
		return getOneA_EOnR1104(target, null);
	}

	public static ActivityEdge_c getOneA_EOnR1104(ActivityNode_c target,
			boolean loadComponent) {
		return getOneA_EOnR1104(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActivityEdge_c getOneA_EOnR1104(ActivityNode_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_EOnR1104(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActivityEdge_c getOneA_EOnR1104(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		return getOneA_EOnR1104(modelRoot, target, test, true);
	}

	public static ActivityEdge_c getOneA_EOnR1104(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneA_EOnR1104(modelRoot, target, test);
	}
	private static ActivityEdge_c find_getOneA_EOnR1104(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_OutgoingActivityEdgeOutgoing_R1104) {
				for (int i = 0; i < target.backPointer_OutgoingActivityEdgeOutgoing_R1104
						.size(); ++i) {
					ActivityEdge_c source = (ActivityEdge_c) target.backPointer_OutgoingActivityEdgeOutgoing_R1104
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c[] targets) {
		return getManyA_EsOnR1104(targets, null);
	}
	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c[] targets,
			boolean loadComponent) {
		return getManyA_EsOnR1104(targets, null, loadComponent);
	}
	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_EsOnR1104(targets, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_OutgoingActivityEdgeOutgoing_R1104) {
				for (int j = 0; j < targets[i].backPointer_OutgoingActivityEdgeOutgoing_R1104
						.size(); ++j) {
					ActivityEdge_c source = (ActivityEdge_c) targets[i].backPointer_OutgoingActivityEdgeOutgoing_R1104
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c target) {
		return getManyA_EsOnR1104(target, null);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c target,
			boolean loadComponent) {
		return getManyA_EsOnR1104(target, null, loadComponent);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c target,
			ClassQueryInterface_c test) {
		return getManyA_EsOnR1104(target, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1104(ActivityNode_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_OutgoingActivityEdgeOutgoing_R1104) {
			for (int i = 0; i < target.backPointer_OutgoingActivityEdgeOutgoing_R1104
					.size(); ++i) {
				ActivityEdge_c source = (ActivityEdge_c) target.backPointer_OutgoingActivityEdgeOutgoing_R1104
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	// referring navigation

	Activity_c Activity;
	public void relateAcrossR1102To(Activity_c target) {
		relateAcrossR1102To(target, true);
	}
	public void relateAcrossR1102To(Activity_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Activity)
			return; // already related

		if (Activity != target) {

			Object oldKey = getInstanceKey();

			if (Activity != null) {

				Activity.clearBackPointerR1102To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActivityEdge_c.relateAcrossR1102To(Activity_c target)",
									"Relate performed across R1102 from Activity Edge to Activity without unrelate of prior instance.");
				}
			}

			Activity = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1102To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1102", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1102From(Activity_c target) {
		unrelateAcrossR1102From(target, true);
	}
	public void unrelateAcrossR1102From(Activity_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (Activity == null)
			return; // already unrelated

		if (target != Activity) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1102",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1102To(this);
		}

		if (Activity != null) {

			m_package_id = Activity.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_package_id)) {
				m_package_id = Activity.getPackage_idCachedValue();
			}
			Activity = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1102", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActivityEdge_c getOneA_EOnR1102(Activity_c[] targets) {
		return getOneA_EOnR1102(targets, null);
	}

	public static ActivityEdge_c getOneA_EOnR1102(Activity_c[] targets,
			ClassQueryInterface_c test) {
		ActivityEdge_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_EOnR1102(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActivityEdge_c getOneA_EOnR1102(Activity_c target) {
		return getOneA_EOnR1102(target, null);
	}

	public static ActivityEdge_c getOneA_EOnR1102(Activity_c target,
			boolean loadComponent) {
		return getOneA_EOnR1102(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActivityEdge_c getOneA_EOnR1102(Activity_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_EOnR1102(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActivityEdge_c getOneA_EOnR1102(ModelRoot modelRoot,
			Activity_c target, ClassQueryInterface_c test) {
		return getOneA_EOnR1102(modelRoot, target, test, true);
	}

	public static ActivityEdge_c getOneA_EOnR1102(ModelRoot modelRoot,
			Activity_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneA_EOnR1102(modelRoot, target, test);
	}
	private static ActivityEdge_c find_getOneA_EOnR1102(ModelRoot modelRoot,
			Activity_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102) {
				for (int i = 0; i < target.backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102
						.size(); ++i) {
					ActivityEdge_c source = (ActivityEdge_c) target.backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c[] targets) {
		return getManyA_EsOnR1102(targets, null);
	}
	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c[] targets,
			boolean loadComponent) {
		return getManyA_EsOnR1102(targets, null, loadComponent);
	}
	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_EsOnR1102(targets, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102) {
				for (int j = 0; j < targets[i].backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102
						.size(); ++j) {
					ActivityEdge_c source = (ActivityEdge_c) targets[i].backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c target) {
		return getManyA_EsOnR1102(target, null);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c target,
			boolean loadComponent) {
		return getManyA_EsOnR1102(target, null, loadComponent);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c target,
			ClassQueryInterface_c test) {
		return getManyA_EsOnR1102(target, test, true);
	}

	public static ActivityEdge_c[] getManyA_EsOnR1102(Activity_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ActivityEdge_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102) {
			for (int i = 0; i < target.backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102
					.size(); ++i) {
				ActivityEdge_c source = (ActivityEdge_c) target.backPointer_ContainedEdgeActivityEdgeContainedEdge_R1102
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityEdge_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R8001
		PackageableElement_c relInst58594 = (PackageableElement_c) baseRoot
				.getInstanceList(PackageableElement_c.class).get(
						new Object[]{m_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58594 == null) {
			relInst58594 = (PackageableElement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(PackageableElement_c.class)
					.get(new Object[]{m_id});
		}
		if (relInst58594 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58594 = (PackageableElement_c) roots[i].getInstanceList(
						PackageableElement_c.class).get(new Object[]{m_id});
				if (relInst58594 != null)
					break;
			}
		}
		//synchronized
		if (relInst58594 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58594) && !isProxy())) {
				relInst58594.relateAcrossR8001To(this, notifyChanges);
			}
		}

		if (TargetActivityNode == null) {
			// R1103
			ActivityNode_c relInst58595 = (ActivityNode_c) baseRoot
					.getInstanceList(ActivityNode_c.class).get(
							new Object[]{m_targetid});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58595 == null) {
				relInst58595 = (ActivityNode_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ActivityNode_c.class)
						.get(new Object[]{m_targetid});
			}
			if (relInst58595 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58595 = (ActivityNode_c) roots[i].getInstanceList(
							ActivityNode_c.class).get(new Object[]{m_targetid});
					if (relInst58595 != null)
						break;
				}
			}
			//synchronized
			if (relInst58595 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58595) && !isProxy())) {
					relInst58595.relateAcrossR1103To(this, notifyChanges);
				}
			}
		}

		if (SourceActivityNode == null) {
			// R1104
			ActivityNode_c relInst58596 = (ActivityNode_c) baseRoot
					.getInstanceList(ActivityNode_c.class).get(
							new Object[]{m_sourceid});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58596 == null) {
				relInst58596 = (ActivityNode_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ActivityNode_c.class)
						.get(new Object[]{m_sourceid});
			}
			if (relInst58596 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58596 = (ActivityNode_c) roots[i].getInstanceList(
							ActivityNode_c.class).get(new Object[]{m_sourceid});
					if (relInst58596 != null)
						break;
				}
			}
			//synchronized
			if (relInst58596 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58596) && !isProxy())) {
					relInst58596.relateAcrossR1104To(this, notifyChanges);
				}
			}
		}

		if (Activity == null) {
			// R1102
			Activity_c relInst58597 = (Activity_c) baseRoot.getInstanceList(
					Activity_c.class).get(new Object[]{m_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58597 == null) {
				relInst58597 = (Activity_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Activity_c.class)
						.get(new Object[]{m_package_id});
			}
			if (relInst58597 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58597 = (Activity_c) roots[i].getInstanceList(
							Activity_c.class).get(new Object[]{m_package_id});
					if (relInst58597 != null)
						break;
				}
			}
			//synchronized
			if (relInst58597 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58597) && !isProxy())) {
					relInst58597.relateAcrossR1102To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R8001
		// PE_PE
		inst = IsSupertypePackageableElement;
		unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1103
		// A_N
		inst = TargetActivityNode;
		unrelateAcrossR1103From(TargetActivityNode, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1104
		// A_N
		inst = SourceActivityNode;
		unrelateAcrossR1104From(SourceActivityNode, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1102
		// A_A
		inst = Activity;
		unrelateAcrossR1102From(Activity, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActivityEdge_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActivityEdge_c inst = (ActivityEdge_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ActivityEdge_c ActivityEdgeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActivityEdge_c result = findActivityEdgeInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ActivityEdge_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findActivityEdgeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ActivityEdge_c findActivityEdgeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActivityEdge_c x = (ActivityEdge_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ActivityEdge_c ActivityEdgeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActivityEdgeInstance(modelRoot, test, true);
	}

	public static ActivityEdge_c ActivityEdgeInstance(ModelRoot modelRoot) {
		return ActivityEdgeInstance(modelRoot, null, true);
	}

	public static ActivityEdge_c[] ActivityEdgeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ActivityEdge_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ActivityEdge_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActivityEdge_c x = (ActivityEdge_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ActivityEdge_c[] ret_set = new ActivityEdge_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActivityEdge_c[0];
			}
		}
	}
	public static ActivityEdge_c[] ActivityEdgeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActivityEdgeInstances(modelRoot, test, true);
	}
	public static ActivityEdge_c[] ActivityEdgeInstances(ModelRoot modelRoot) {
		return ActivityEdgeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Activity Edge.dispose call: ";
		PackageableElement_c testR8001Inst12 = PackageableElement_c
				.getOnePE_PEOnR8001(this, false);

		if (testR8001Inst12 != null) {
			delete_error = true;
			errorMsg = errorMsg + "8001 ";
		}
		ActivityNode_c testR1103Inst = ActivityNode_c.getOneA_NOnR1103(this,
				false);

		if (testR1103Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1103 ";
		}
		ActivityNode_c testR1104Inst = ActivityNode_c.getOneA_NOnR1104(this,
				false);

		if (testR1104Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1104 ";
		}
		Activity_c testR1102Inst = Activity_c.getOneA_AOnR1102(this, false);

		if (testR1102Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1102 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Activity Edge", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("package_id")) {
			return true;
		}
		if (attributeName.equals("targetid")) {
			return true;
		}
		if (attributeName.equals("sourceid")) {
			return true;
		}
		if (attributeName.equals("id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getIdCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getGuard() {
		return m_guard;
	}

	public void setGuard(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_guard)) {
				return;
			}
		} else if (m_guard != null) {
			if (m_guard.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Guard",
				m_guard, newValue, true);
		m_guard = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPackage_idLongBased() {
		if (Activity != null) {
			return Activity.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPackage_id() {
		if (Activity != null) {
			return Activity.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPackage_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_package_id))
			return m_package_id;
		else
			return getPackage_id();
	}

	public void setPackage_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_package_id)) {
				return;
			}
		} else if (m_package_id != null) {
			if (m_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Package_id", m_package_id, newValue, true);
		m_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getTargetidLongBased() {
		if (TargetActivityNode != null) {
			return TargetActivityNode.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getTargetid() {
		if (TargetActivityNode != null) {
			return TargetActivityNode.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getTargetidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_targetid))
			return m_targetid;
		else
			return getTargetid();
	}

	public void setTargetid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_targetid)) {
				return;
			}
		} else if (m_targetid != null) {
			if (m_targetid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Targetid", m_targetid, newValue, true);
		m_targetid = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSourceidLongBased() {
		if (SourceActivityNode != null) {
			return SourceActivityNode.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getSourceid() {
		if (SourceActivityNode != null) {
			return SourceActivityNode.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSourceidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sourceid))
			return m_sourceid;
		else
			return getSourceid();
	}

	public void setSourceid(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sourceid)) {
				return;
			}
		} else if (m_sourceid != null) {
			if (m_sourceid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Sourceid", m_sourceid, newValue, true);
		m_sourceid = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIdLongBased() {
		if (IsSupertypePackageableElement != null) {
			return IsSupertypePackageableElement.getElement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (IsSupertypePackageableElement != null) {
			return IsSupertypePackageableElement.getElement_id();
		}
		return m_id; // Supertype existence is optional, just return the local cached referential value
	}

	public boolean hasSuperType() {
		return (IsSupertypePackageableElement != null);

	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge", //$NON-NLS-1$
				" Operation entered: Activity Edge::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ActivityEdge_c[] objs = ActivityEdge_c.ActivityEdgeInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge", //$NON-NLS-1$
				" Operation entered: Activity Edge::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ActivityEdge_c_test58599_c implements ClassQueryInterface_c {
			ActivityEdge_c_test58599_c(java.util.UUID p58600) {
				m_p58600 = p58600;
			}
			private java.util.UUID m_p58600;
			public boolean evaluate(Object candidate) {
				ActivityEdge_c selected = (ActivityEdge_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58600));
				return retval;
			}
		}

		ActivityEdge_c[] objs58598 = ActivityEdge_c.ActivityEdgeInstances(
				modelRoot, new ActivityEdge_c_test58599_c(getId()));

		if (((objs58598.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Activity Edge", //$NON-NLS-1$
								"Consistency: Object: Activity Edge: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58598.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Activity Edge: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs58598.length), e);
			}
			retval = false;

		}

		if (((objs58598.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Activity Edge", //$NON-NLS-1$
								"Consistency: Object: Activity Edge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58598.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Edge: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58598.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Activity Edge is a referring class in association: rel.Numb = 1102
		// The participating class is: Activity
		class Activity_c_test58604_c implements ClassQueryInterface_c {
			Activity_c_test58604_c(java.util.UUID p58605) {
				m_p58605 = p58605;
			}
			private java.util.UUID m_p58605;
			public boolean evaluate(Object candidate) {
				Activity_c selected = (Activity_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p58605));
				return retval;
			}
		}

		Activity_c[] objs58603 = Activity_c.ActivityInstances(modelRoot,
				new Activity_c_test58604_c(getPackage_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs58603.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Activity Edge", //$NON-NLS-1$
								"Consistency: Object: Activity Edge: Association: 1102: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58603.length)
										+ " Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Edge: Association: 1102: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58603.length)
										+ " Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Activity Edge is a referring class in association: rel.Numb = 1103
		// The participating class is: Activity Node
		class ActivityNode_c_test58607_c implements ClassQueryInterface_c {
			ActivityNode_c_test58607_c(java.util.UUID p58608) {
				m_p58608 = p58608;
			}
			private java.util.UUID m_p58608;
			public boolean evaluate(Object candidate) {
				ActivityNode_c selected = (ActivityNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58608));
				return retval;
			}
		}

		ActivityNode_c[] objs58606 = ActivityNode_c.ActivityNodeInstances(
				modelRoot, new ActivityNode_c_test58607_c(getTargetid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs58606.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Activity Edge", //$NON-NLS-1$
								"Consistency: Object: Activity Edge: Association: 1103: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58606.length)
										+ " TargetId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Edge: Association: 1103: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58606.length)
										+ " TargetId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Activity Edge is a referring class in association: rel.Numb = 1104
		// The participating class is: Activity Node
		class ActivityNode_c_test58610_c implements ClassQueryInterface_c {
			ActivityNode_c_test58610_c(java.util.UUID p58611) {
				m_p58611 = p58611;
			}
			private java.util.UUID m_p58611;
			public boolean evaluate(Object candidate) {
				ActivityNode_c selected = (ActivityNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58611));
				return retval;
			}
		}

		ActivityNode_c[] objs58609 = ActivityNode_c.ActivityNodeInstances(
				modelRoot, new ActivityNode_c_test58610_c(getSourceid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs58609.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Activity Edge", //$NON-NLS-1$
								"Consistency: Object: Activity Edge: Association: 1104: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58609.length)
										+ " SourceId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Edge: Association: 1104: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58609.length)
										+ " SourceId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Activity Edge is a subtype in association: rel.Numb = 8001
		// The supertype class is: Packageable Element
		//    Note: The consistency test for this supertype has been removed 
		//          until generic package _migration_ is complete.
		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge",
				" Operation entered: ActivityEdge::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Activity_c v_parent = Activity_c.getOneA_AOnR1102(this);

		if (((v_parent != null))) {

			this.unrelateAcrossR1102From(v_parent);

		}

		ActivityNode_c v_source = ActivityNode_c.getOneA_NOnR1104(this);

		if (((v_source != null))) {

			this.unrelateAcrossR1104From(v_source);

		}

		ActivityNode_c v_target = ActivityNode_c.getOneA_NOnR1103(this);

		if (((v_target != null))) {

			this.unrelateAcrossR1103From(v_target);

		}

		PackageableElement_c v_pe = PackageableElement_c
				.getOnePE_PEOnR8001(this);

		if (((v_pe != null))) {

			this.unrelateAcrossR8001From(v_pe);

			if (v_pe != null) {
				v_pe.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge",
				" Operation entered: ActivityEdge::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getId();

	} // End get_ooa_id
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge",
				" Operation entered: ActivityEdge::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.End)) {

			return Style_c.OpenArrow;

		}

		else {

			return Style_c.None;

		}

	} // End get_style
	public String Get_connector_text(final java.util.UUID p_Ooa_id,
			final boolean p_Ooa_typeisimportedclass, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge",
				" Operation entered: ActivityEdge::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		if ((p_At == End_c.Middle)) {

			if ((!getGuard().equals(""))) {

				v_result = "[" + getGuard() + "]";

			}

		}

		return v_result;

	} // End get_connector_text
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Edge",
				" Operation entered: ActivityEdge::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return getGuard();

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Activity Edge
