package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Generalization_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_GENERALIZATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Generalization_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Generalization_c(ModelRoot modelRoot, java.util.UUID p_m_assoc_id,
			String p_m_descrip) {
		super(modelRoot);
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);

		Object[] key = {m_assoc_id};
		addInstanceToMap(key);
	}
	static public Generalization_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, String p_m_descrip,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Generalization_c.class);
		Generalization_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_assoc_id};
			new_inst = (Generalization_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Generalization_c(modelRoot, p_m_assoc_id,
					p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Generalization_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_assoc_id, String p_m_descrip) {
		InstanceList instances = modelRoot
				.getInstanceList(Generalization_c.class);
		Generalization_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_assoc_id};
			source = (Generalization_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_assoc_id = IdAssigner.preprocessUUID(p_m_assoc_id);

				return source;
			}
		}
		// there is no instance matching the id
		Generalization_c new_inst = new Generalization_c(modelRoot,
				p_m_assoc_id, p_m_descrip);
		return new_inst;
	}
	public Generalization_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_descrip = "";
		m_assoc_id = IdAssigner.NULL_UUID;
		Object[] key = {m_assoc_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_assoc_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_assoc_id != p_newKey) {

			m_assoc_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Generalization_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Generalization_c)) {
			return false;
		}

		Generalization_c me = (Generalization_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAssoc_id()) || IdAssigner.NULL_UUID
						.equals(((Generalization_c) elem).getAssoc_id())) && this != elem)) {
			return false;
		}
		if (!getAssoc_id().equals(((Generalization_c) elem).getAssoc_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Generalization_c)) {
			return false;
		}

		Generalization_c me = (Generalization_c) elem;
		if (!getAssoc_idCachedValue().equals(
				((Generalization_c) elem).getAssoc_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_descrip;
	private java.util.UUID m_assoc_id;

	// declare association references from this class

	// referring navigation

	UseCaseAssociation_c IsSupertypeUseCaseAssociation;
	public void relateAcrossR1210To(UseCaseAssociation_c target) {
		relateAcrossR1210To(target, true);
	}
	public void relateAcrossR1210To(UseCaseAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeUseCaseAssociation)
			return; // already related

		if (IsSupertypeUseCaseAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeUseCaseAssociation != null) {

				IsSupertypeUseCaseAssociation.clearBackPointerR1210To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Generalization_c.relateAcrossR1210To(UseCaseAssociation_c target)",
									"Relate performed across R1210 from Generalization to Use Case Association without unrelate of prior instance.");
				}
			}

			IsSupertypeUseCaseAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getAssoc_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_assoc_id = target.getAssoc_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1210To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1210", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1210From(UseCaseAssociation_c target) {
		unrelateAcrossR1210From(target, true);
	}
	public void unrelateAcrossR1210From(UseCaseAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeUseCaseAssociation == null)
			return; // already unrelated

		if (target != IsSupertypeUseCaseAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1210",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1210To(this);
		}

		if (IsSupertypeUseCaseAssociation != null) {

			m_assoc_id = IsSupertypeUseCaseAssociation.getAssoc_id();
			if (IdAssigner.NULL_UUID.equals(m_assoc_id)) {
				m_assoc_id = IsSupertypeUseCaseAssociation
						.getAssoc_idCachedValue();
			}
			IsSupertypeUseCaseAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1210", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Generalization_c getOneUC_GOnR1210(
			UseCaseAssociation_c[] targets) {
		return getOneUC_GOnR1210(targets, null);
	}

	public static Generalization_c getOneUC_GOnR1210(
			UseCaseAssociation_c[] targets, ClassQueryInterface_c test) {
		Generalization_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneUC_GOnR1210(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Generalization_c getOneUC_GOnR1210(UseCaseAssociation_c target) {
		return getOneUC_GOnR1210(target, null);
	}

	public static Generalization_c getOneUC_GOnR1210(
			UseCaseAssociation_c target, boolean loadComponent) {
		return getOneUC_GOnR1210(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Generalization_c getOneUC_GOnR1210(
			UseCaseAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneUC_GOnR1210(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Generalization_c getOneUC_GOnR1210(ModelRoot modelRoot,
			UseCaseAssociation_c target, ClassQueryInterface_c test) {
		return getOneUC_GOnR1210(modelRoot, target, test, true);
	}

	public static Generalization_c getOneUC_GOnR1210(ModelRoot modelRoot,
			UseCaseAssociation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneUC_GOnR1210(modelRoot, target, test);
	}
	private static Generalization_c find_getOneUC_GOnR1210(ModelRoot modelRoot,
			UseCaseAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Generalization_c source = (Generalization_c) target.backPointer_IsSubtypeGeneralizationIsSubtype_R1210;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Generalization_c[] getManyUC_GsOnR1210(
			UseCaseAssociation_c[] targets) {
		return getManyUC_GsOnR1210(targets, null);
	}
	public static Generalization_c[] getManyUC_GsOnR1210(
			UseCaseAssociation_c[] targets, boolean loadComponent) {
		return getManyUC_GsOnR1210(targets, null, loadComponent);
	}
	public static Generalization_c[] getManyUC_GsOnR1210(
			UseCaseAssociation_c[] targets, ClassQueryInterface_c test) {
		return getManyUC_GsOnR1210(targets, test, true);
	}

	public static Generalization_c[] getManyUC_GsOnR1210(
			UseCaseAssociation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Generalization_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Generalization_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Generalization_c source = (Generalization_c) targets[i].backPointer_IsSubtypeGeneralizationIsSubtype_R1210;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Generalization_c[] ret_set = new Generalization_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Generalization_c[0];
		}
	}

	public static Generalization_c[] getManyUC_GsOnR1210(
			UseCaseAssociation_c target) {
		if (target != null) {
			UseCaseAssociation_c[] targetArray = new UseCaseAssociation_c[1];
			targetArray[0] = target;
			return getManyUC_GsOnR1210(targetArray);
		} else {
			Generalization_c[] result = new Generalization_c[0];
			return result;
		}
	}

	public static Generalization_c[] getManyUC_GsOnR1210(
			UseCaseAssociation_c target, boolean loadComponent) {
		if (target != null) {
			UseCaseAssociation_c[] targetArray = new UseCaseAssociation_c[1];
			targetArray[0] = target;
			return getManyUC_GsOnR1210(targetArray, loadComponent);
		} else {
			Generalization_c[] result = new Generalization_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1210
		UseCaseAssociation_c relInst38503 = (UseCaseAssociation_c) baseRoot
				.getInstanceList(UseCaseAssociation_c.class).get(
						new Object[]{m_assoc_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38503 == null) {
			relInst38503 = (UseCaseAssociation_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(UseCaseAssociation_c.class)
					.get(new Object[]{m_assoc_id});
		}
		if (relInst38503 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38503 = (UseCaseAssociation_c) roots[i].getInstanceList(
						UseCaseAssociation_c.class).get(
						new Object[]{m_assoc_id});
				if (relInst38503 != null)
					break;
			}
		}
		//synchronized
		if (relInst38503 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38503) && !isProxy())) {
				relInst38503.relateAcrossR1210To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1210
		// UC_UCA
		inst = IsSupertypeUseCaseAssociation;
		unrelateAcrossR1210From(IsSupertypeUseCaseAssociation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Generalization_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Generalization_c inst = (Generalization_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Generalization_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Generalization_c GeneralizationInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Generalization_c result = findGeneralizationInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					Generalization_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findGeneralizationInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static Generalization_c findGeneralizationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Generalization_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Generalization_c x = (Generalization_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static Generalization_c GeneralizationInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return GeneralizationInstance(modelRoot, test, true);
	}

	public static Generalization_c GeneralizationInstance(ModelRoot modelRoot) {
		return GeneralizationInstance(modelRoot, null, true);
	}

	public static Generalization_c[] GeneralizationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					Generalization_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(Generalization_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Generalization_c x = (Generalization_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Generalization_c[] ret_set = new Generalization_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Generalization_c[0];
			}
		}
	}
	public static Generalization_c[] GeneralizationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return GeneralizationInstances(modelRoot, test, true);
	}
	public static Generalization_c[] GeneralizationInstances(ModelRoot modelRoot) {
		return GeneralizationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Generalization.dispose call: ";
		UseCaseAssociation_c testR1210Inst2 = UseCaseAssociation_c
				.getOneUC_UCAOnR1210(this, false);

		if (testR1210Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1210 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.DELETE, "Generalization", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("assoc_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAssoc_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getAssoc_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getAssoc_idLongBased() {
		if (IsSupertypeUseCaseAssociation != null) {
			return IsSupertypeUseCaseAssociation.getAssoc_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAssoc_id() {
		if (IsSupertypeUseCaseAssociation != null) {
			return IsSupertypeUseCaseAssociation.getAssoc_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeUseCaseAssociation != null);

	}

	public java.util.UUID getAssoc_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_assoc_id))
			return m_assoc_id;
		else
			return getAssoc_id();
	}

	public void setAssoc_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_assoc_id)) {
				return;
			}
		} else if (m_assoc_id != null) {
			if (m_assoc_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Assoc_id", m_assoc_id, newValue, true);
		m_assoc_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization", //$NON-NLS-1$
				" Operation entered: Generalization::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Generalization_c[] objs = Generalization_c.GeneralizationInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization", //$NON-NLS-1$
				" Operation entered: Generalization::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Generalization_c_test38505_c implements ClassQueryInterface_c {
			Generalization_c_test38505_c(java.util.UUID p38506) {
				m_p38506 = p38506;
			}
			private java.util.UUID m_p38506;
			public boolean evaluate(Object candidate) {
				Generalization_c selected = (Generalization_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38506));
				return retval;
			}
		}

		Generalization_c[] objs38504 = Generalization_c
				.GeneralizationInstances(modelRoot,
						new Generalization_c_test38505_c(getAssoc_id()));

		if (((objs38504.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Generalization", //$NON-NLS-1$
								"Consistency: Object: Generalization: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38504.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Generalization: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs38504.length), e);
			}
			retval = false;

		}

		if (((objs38504.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Generalization", //$NON-NLS-1$
								"Consistency: Object: Generalization: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38504.length)
										+ " Assoc_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generalization: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38504.length)
										+ " Assoc_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Generalization is a subtype in association: rel.Numb = 1210
		// The supertype class is: Use Case Association
		class UseCaseAssociation_c_test38510_c implements ClassQueryInterface_c {
			UseCaseAssociation_c_test38510_c(java.util.UUID p38511) {
				m_p38511 = p38511;
			}
			private java.util.UUID m_p38511;
			public boolean evaluate(Object candidate) {
				UseCaseAssociation_c selected = (UseCaseAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getAssoc_id().equals(m_p38511));
				return retval;
			}
		}

		UseCaseAssociation_c[] objs38509 = UseCaseAssociation_c
				.UseCaseAssociationInstances(modelRoot,
						new UseCaseAssociation_c_test38510_c(getAssoc_id()));

		if (((objs38509.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Generalization", //$NON-NLS-1$
								"Consistency: Object: Generalization: Association: 1210: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38509.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Generalization: Association: 1210: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38509.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization",
				" Operation entered: Generalization::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		UseCaseAssociation_c v_uca = UseCaseAssociation_c
				.getOneUC_UCAOnR1210(this);

		if (((v_uca != null))) {

			if (v_uca != null) {
				v_uca.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization",
				" Operation entered: Generalization::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.End)) {

			return Style_c.Triangle;

		}

		else if ((p_At == End_c.Middle)) {

			return Style_c.Solid;

		}

		else {

			return Style_c.None;

		}

	} // End get_style
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final boolean p_Obj_typeisimported, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization",
				" Operation entered: Generalization::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		return "";

	} // End get_connector_text
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization",
				" Operation entered: Generalization::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getAssoc_id();

	} // End get_ooa_id
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Generalization",
				" Operation entered: Generalization::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return "";

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Generalization
