package com.mentor.nucleus.bp.core.ui;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/ui/RenameAction.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_rename_action.inc
// Version:      $Revision: 1.45 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is the main BridgePoint entry point for the retargetable
// action, Rename.
//
import java.util.Iterator;
import java.util.Collection;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.TreeEditor;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.actions.ActionFactory;
import org.eclipse.ui.actions.TextActionHandler;
import com.mentor.nucleus.bp.core.util.UIUtil;

import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.inspector.ModelInspector;
import com.mentor.nucleus.bp.core.util.TransactionUtil;

public class RenameAction extends Action {
	private TreeEditor treeEditor;
	private TreeViewer treeViewer;
	private Text textEditor;
	private Composite textEditorParent;
	private TextActionHandler textActionHandler;
	private Object inlinedSelection;
	public RenameAction(TreeViewer treeViewer) {
		super(ActionFactory.RENAME.getId());
		this.treeViewer = treeViewer;
		this.treeEditor = new TreeEditor(treeViewer.getTree());
		setText("Rename");
		setToolTipText("Rename this model Element");
	}
	public void run() {
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		Iterator iterator = structuredSelection.iterator();
		if (iterator.hasNext()) {
			Object selection = iterator.next();
			queryNewResourceNameInline(selection);
		}
	}
	Composite createParent() {
		Tree tree = getTree();
		Composite result = new Composite(tree, SWT.NONE);
		TreeItem[] selectedItems = tree.getSelection();
		treeEditor.horizontalAlignment = SWT.LEFT;
		treeEditor.grabHorizontal = true;
		treeEditor.setEditor(result, selectedItems[0]);
		return result;
	}
	/**
	 * Create the text editor widget.
	 *
	 * @param resource the resource to rename
	 */
	private void createTextEditor(final Object resource) {
		// Create text editor parent.  This draws a nice bounding rect.
		textEditorParent = createParent();
		textEditorParent.setVisible(false);
		textEditorParent.addListener(SWT.Paint, new Listener() {
			public void handleEvent(Event e) {
				Point textSize = textEditor.getSize();
				Point parentSize = textEditorParent.getSize();
				e.gc.drawRectangle(0, 0,
						Math.min(textSize.x + 4, parentSize.x - 1),
						parentSize.y - 1);
			}
		});

		// Create inner text editor.
		textEditor = new Text(textEditorParent, SWT.NONE);
		textEditorParent.setBackground(textEditor.getBackground());
		textEditor.addListener(SWT.Modify, new Listener() {
			public void handleEvent(Event e) {
				Point textSize = textEditor.computeSize(SWT.DEFAULT,
						SWT.DEFAULT);
				textSize.x += textSize.y; // Add extra space for new characters.
				Point parentSize = textEditorParent.getSize();
				textEditor.setBounds(2, 1,
						Math.min(textSize.x, parentSize.x - 4),
						parentSize.y - 2);
				textEditorParent.redraw();
			}
		});
		textEditor.addListener(SWT.Traverse, new Listener() {
			public void handleEvent(Event event) {

				//Workaround for Bug 20214 due to extra
				//traverse events
				switch (event.detail) {
					case SWT.TRAVERSE_ESCAPE :
						//Do nothing in this case
						disposeTextWidget();
						event.doit = true;
						event.detail = SWT.TRAVERSE_NONE;
						break;
					case SWT.TRAVERSE_RETURN :
						saveChangesAndDispose(resource);
						event.doit = true;
						event.detail = SWT.TRAVERSE_NONE;
						break;
				}
			}
		});
		textEditor.addFocusListener(new FocusAdapter() {
			public void focusLost(FocusEvent fe) {
				saveChangesAndDispose(resource);
			}
		});

		if (textActionHandler != null)
			textActionHandler.addText(textEditor);
	}
	/**
	 * Close the text widget and reset the editorText field.
	 */
	private void disposeTextWidget() {
		if (textActionHandler != null)
			textActionHandler.removeText(textEditor);

		if (textEditorParent != null) {
			textEditorParent.dispose();
			textEditorParent = null;
			textEditor = null;
			treeEditor.setEditor(null, null);
		}
	}
	/**
	 * Get the Tree being edited.
	 * @returnTree
	 */
	public Tree getTree() {
		return this.treeViewer.getTree();
	}
	/**
	 * Get the TextEditor being edited. Only used by unit test
	 * @return Text
	 */
	public Text getTextEditor() {
		return textEditor;
	}
	/**
	 * Return the new name to be given to the target resource or <code>null<code>
	 * if the query was canceled. Rename the currently selected resource using the table editor.
	 * Continue the action when the user is done.
	 *
	 * @return java.lang.String
	 * @param resource the resource to rename
	 */
	private void queryNewResourceNameInline(final Object selection) {
		// Make sure text editor is created only once. Simply reset text
		// editor when action is executed more than once. Fixes bug 22269.
		if (textEditorParent == null) {
			createTextEditor(selection);
		}
		textEditor.setText(getEditorText(selection));

		// Open text editor with initial size.
		textEditorParent.setVisible(true);
		Point textSize = textEditor.computeSize(SWT.DEFAULT, SWT.DEFAULT);
		textSize.x += textSize.y; // Add extra space for new characters.
		Point parentSize = textEditorParent.getSize();
		textEditor.setBounds(2, 1, Math.min(textSize.x, parentSize.x - 4),
				parentSize.y - 2);
		textEditorParent.redraw();
		textEditor.selectAll();
		textEditor.setFocus();
	}
	/**
	 * Save the changes and dispose of the text widget.
	 * @param resource - the resource to move.
	 */
	private void saveChangesAndDispose(final Object selection) {
		// Cache the resource to avoid selection loss since a selection of
		// another item can trigger this method
		inlinedSelection = selection;
		final String newName = textEditor.getText();
		// Run this in an async to make sure that the operation that triggered
		// this action is completed.  Otherwise this leads to problems when the
		// icon of the item being renamed is clicked (i.e., which causes the rename
		// text widget to lose focus and trigger this method).
		Runnable query = getRenameQuery(selection, newName,
				getEditorText(selection), true);
		//Dispose the text widget regardless
		disposeTextWidget();
		getTree().getShell().getDisplay().asyncExec(query);
		inlinedSelection = null;
	}
	public static Runnable getRenameQuery(final Object selection,
			final String newName, final String oldName,
			final boolean displayWarning) {
		return new Runnable() {
			public void run() {
				boolean success = false;
				if (!newName.equals(oldName)) {
					String message = isNameValid(newName,
							(ModelElement) selection);
					if (message != null && displayWarning) {
						UIUtil.openWarning(null, "Invalid Name", message);
						return;
					}
					if (!TransactionUtil
							.modifySelectedResources("Confirm Element Rename",
									"The selected element is read only.  Do you still wish to rename it?"))
						return;
					IStructuredSelection structuredSelection = new StructuredSelection(
							selection);
					if (selection instanceof SystemModel_c) {
						success = S_SYS_Rename(structuredSelection, newName);
					} else if (selection instanceof Domain_c) {
						success = S_DOM_Rename(structuredSelection, newName);
					} else if (selection instanceof ComponentPackage_c) {
						success = CP_CP_Rename(structuredSelection, newName);
					} else if (selection instanceof InterfacePackage_c) {
						success = IP_IP_Rename(structuredSelection, newName);
					} else if (selection instanceof Component_c) {
						success = C_C_Rename(structuredSelection, newName);
					} else if (selection instanceof Interface_c) {
						success = C_I_Rename(structuredSelection, newName);
					} else if (selection instanceof Provision_c) {
						success = C_P_Rename(structuredSelection, newName);
					} else if (selection instanceof Requirement_c) {
						success = C_R_Rename(structuredSelection, newName);
					} else if (selection instanceof Port_c) {
						success = C_PO_Rename(structuredSelection, newName);
					} else if (selection instanceof InterfaceSignal_c) {
						success = C_AS_Rename(structuredSelection, newName);
					} else if (selection instanceof InterfaceOperation_c) {
						success = C_IO_Rename(structuredSelection, newName);
					} else if (selection instanceof PropertyParameter_c) {
						success = C_PP_Rename(structuredSelection, newName);
					} else if (selection instanceof Sequence_c) {
						success = SQ_S_Rename(structuredSelection, newName);
					} else if (selection instanceof ClassParticipant_c) {
						success = SQ_CP_Rename(structuredSelection, newName);
					} else if (selection instanceof MessageArgument_c) {
						success = MSG_A_Rename(structuredSelection, newName);
					} else if (selection instanceof ComponentParticipant_c) {
						success = SQ_COP_Rename(structuredSelection, newName);
					} else if (selection instanceof InstanceAttributeValue_c) {
						success = SQ_AV_Rename(structuredSelection, newName);
					} else if (selection instanceof ClassParticipantAttribute_c) {
						success = SQ_CPA_Rename(structuredSelection, newName);
					} else if (selection instanceof ExternalEntityParticipant_c) {
						success = SQ_EEP_Rename(structuredSelection, newName);
					} else if (selection instanceof FunctionPackageParticipant_c) {
						success = SQ_FPP_Rename(structuredSelection, newName);
					} else if (selection instanceof ClassInstanceParticipant_c) {
						success = SQ_CIP_Rename(structuredSelection, newName);
					} else if (selection instanceof ReturnMessage_c) {
						success = MSG_R_Rename(structuredSelection, newName);
					} else if (selection instanceof SynchronousMessage_c) {
						success = MSG_SM_Rename(structuredSelection, newName);
					} else if (selection instanceof AsynchronousMessage_c) {
						success = MSG_AM_Rename(structuredSelection, newName);
					} else if (selection instanceof TimingMark_c) {
						success = SQ_TM_Rename(structuredSelection, newName);
					} else if (selection instanceof TimeSpan_c) {
						success = SQ_TS_Rename(structuredSelection, newName);
					} else if (selection instanceof ActorParticipant_c) {
						success = SQ_AP_Rename(structuredSelection, newName);
					} else if (selection instanceof PackageParticipant_c) {
						success = SQ_PP_Rename(structuredSelection, newName);
					} else if (selection instanceof DataTypePackage_c) {
						success = S_DPK_Rename(structuredSelection, newName);
					} else if (selection instanceof UserDataType_c) {
						success = S_UDT_Rename(structuredSelection, newName);
					} else if (selection instanceof EnumerationDataType_c) {
						success = S_EDT_Rename(structuredSelection, newName);
					} else if (selection instanceof Enumerator_c) {
						success = S_ENUM_Rename(structuredSelection, newName);
					} else if (selection instanceof ConstantSpecification_c) {
						success = CNST_CSP_Rename(structuredSelection, newName);
					} else if (selection instanceof LiteralSymbolicConstant_c) {
						success = CNST_LSC_Rename(structuredSelection, newName);
					} else if (selection instanceof FunctionPackage_c) {
						success = S_FPK_Rename(structuredSelection, newName);
					} else if (selection instanceof Function_c) {
						success = S_SYNC_Rename(structuredSelection, newName);
					} else if (selection instanceof FunctionParameter_c) {
						success = S_SPARM_Rename(structuredSelection, newName);
					} else if (selection instanceof ExternalEntityPackage_c) {
						success = S_EEPK_Rename(structuredSelection, newName);
					} else if (selection instanceof ExternalEntity_c) {
						success = S_EE_Rename(structuredSelection, newName);
					} else if (selection instanceof Bridge_c) {
						success = S_BRG_Rename(structuredSelection, newName);
					} else if (selection instanceof BridgeParameter_c) {
						success = S_BPARM_Rename(structuredSelection, newName);
					} else if (selection instanceof Subsystem_c) {
						success = S_SS_Rename(structuredSelection, newName);
					} else if (selection instanceof ModelClass_c) {
						success = O_OBJ_Rename(structuredSelection, newName);
					} else if (selection instanceof Attribute_c) {
						success = O_ATTR_Rename(structuredSelection, newName);
					} else if (selection instanceof Operation_c) {
						success = O_TFR_Rename(structuredSelection, newName);
					} else if (selection instanceof OperationParameter_c) {
						success = O_TPARM_Rename(structuredSelection, newName);
					} else if (selection instanceof StateMachineEvent_c) {
						success = SM_EVT_Rename(structuredSelection, newName);
					} else if (selection instanceof StateMachineEventDataItem_c) {
						success = SM_EVTDI_Rename(structuredSelection, newName);
					} else if (selection instanceof StateMachineState_c) {
						success = SM_STATE_Rename(structuredSelection, newName);
					} else if (selection instanceof Communication_c) {
						success = COMM_COMM_Rename(structuredSelection, newName);
					} else if (selection instanceof UseCaseDiagram_c) {
						success = UC_UCC_Rename(structuredSelection, newName);
					} else if (selection instanceof UseCaseParticipant_c) {
						success = IA_UCP_Rename(structuredSelection, newName);
					} else if (selection instanceof Activity_c) {
						success = A_A_Rename(structuredSelection, newName);
					} else if (selection instanceof ForkJoinNode_c) {
						success = A_FJ_Rename(structuredSelection, newName);
					} else if (selection instanceof ActivityEdge_c) {
						success = A_E_Rename(structuredSelection, newName);
					} else if (selection instanceof ActivityDiagramAction_c) {
						success = A_GA_Rename(structuredSelection, newName);
					} else if (selection instanceof DecisionMergeNode_c) {
						success = A_DM_Rename(structuredSelection, newName);
					} else if (selection instanceof ObjectNode_c) {
						success = A_OBJ_Rename(structuredSelection, newName);
					} else if (selection instanceof AcceptEventAction_c) {
						success = A_AEA_Rename(structuredSelection, newName);
					} else if (selection instanceof AcceptTimeEventAction_c) {
						success = A_ATE_Rename(structuredSelection, newName);
					} else if (selection instanceof SendSignal_c) {
						success = A_SS_Rename(structuredSelection, newName);
					} else if (selection instanceof ActivityPartition_c) {
						success = A_AP_Rename(structuredSelection, newName);
					} else if (selection instanceof StructuredDataType_c) {
						success = S_SDT_Rename(structuredSelection, newName);
					} else if (selection instanceof StructureMember_c) {
						success = S_MBR_Rename(structuredSelection, newName);
					} else if (selection instanceof Package_c) {
						success = EP_PKG_Rename(structuredSelection, newName);
					}
				}
			}
		};
	}
	private static boolean S_SYS_Rename(IStructuredSelection selection,
			String p_New_name) {
		SystemModel_c element = (SystemModel_c) selection.iterator().next();
		IStatus name_ok = validateSystemModelName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		SystemModel_c v_sys = (SystemModel_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_sys
				.getModelRoot());
		PersistableModelComponent.ensureSystemCoreDataTypesAvailable(v_sys);

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of System Model");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_sys != null) {
				v_sys.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of System Model failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_DOM_Rename(IStructuredSelection selection,
			String p_New_name) {
		Domain_c element = (Domain_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Domain_c v_dom = (Domain_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_dom
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Domain");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_dom != null) {
				v_dom.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Domain failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean CP_CP_Rename(IStructuredSelection selection,
			String p_New_name) {
		ComponentPackage_c element = (ComponentPackage_c) selection.iterator()
				.next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ComponentPackage_c v_package = (ComponentPackage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_package
				.getModelRoot());
		PersistableModelComponent
				.ensureComponentPackageCoreDataTypesAvailable(v_package);

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Component Package");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_package != null))) {

				if (v_package != null) {
					v_package.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Component Package failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean IP_IP_Rename(IStructuredSelection selection,
			String p_New_name) {
		InterfacePackage_c element = (InterfacePackage_c) selection.iterator()
				.next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		InterfacePackage_c v_diagram = (InterfacePackage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_diagram
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Interface Package");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_diagram != null))) {

				if (v_diagram != null) {
					v_diagram.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Interface Package failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_C_Rename(IStructuredSelection selection,
			String p_New_name) {
		Component_c element = (Component_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Component_c v_comp = (Component_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_comp
				.getModelRoot());
		PersistableModelComponent.ensureComponentCoreDataTypesAvailable(v_comp);

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Component");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_comp != null))) {

				Domain_c v_domain = Domain_c
						.getOneS_DOMOnR4204(DomainAsComponent_c
								.getOneCN_DCOnR4204(v_comp));

				if (((v_domain != null))) {

					if (v_domain != null) {
						v_domain.setName(p_New_name);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

					if (v_comp != null) {
						v_comp.setName(p_New_name);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

				else {

					if (v_comp != null) {
						v_comp.setName(p_New_name);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Component failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_I_Rename(IStructuredSelection selection,
			String p_New_name) {
		Interface_c element = (Interface_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Interface_c v_interface = (Interface_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_interface
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Interface");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_interface != null))) {

				if (v_interface != null) {
					v_interface.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Interface failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_P_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Provision_c v_provision = (Provision_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_provision
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Provision");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_provision != null))) {

				if (v_provision != null) {
					v_provision.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Provision failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_R_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Requirement_c v_req = (Requirement_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_req
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Requirement");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_req != null))) {

				if (v_req != null) {
					v_req.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Requirement failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_PO_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Port_c v_port = (Port_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_port
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Port");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_port != null))) {

				if (v_port != null) {
					v_port.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Port failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_AS_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		InterfaceSignal_c v_signal = (InterfaceSignal_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_signal
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Interface Signal");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_signal != null))) {

				if (v_signal != null) {
					v_signal.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Interface Signal failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_IO_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		InterfaceOperation_c v_op = (InterfaceOperation_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_op
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Interface Operation");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_op != null))) {

				if (v_op != null) {
					v_op.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Interface Operation failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean C_PP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		PropertyParameter_c v_parm = (PropertyParameter_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_parm
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Property Parameter");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_parm != null))) {

				if (v_parm != null) {
					v_parm.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Property Parameter failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_S_Rename(IStructuredSelection selection,
			String p_New_name) {
		Sequence_c element = (Sequence_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Sequence_c v_sequence = (Sequence_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_sequence
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Sequence");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_sequence != null))) {

				if (v_sequence != null) {
					v_sequence.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Sequence failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_CP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ClassParticipant_c v_participant = (ClassParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_participant
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Class Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_participant != null))) {

				if (v_participant != null) {
					v_participant.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Class Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean MSG_A_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		MessageArgument_c v_argument = (MessageArgument_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_argument
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Message Argument");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_argument != null))) {

				if (v_argument != null) {
					v_argument.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Message Argument failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_COP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ComponentParticipant_c v_compPart = (ComponentParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_compPart
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Component Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_compPart != null))) {

				if (v_compPart != null) {
					v_compPart.setInformalcomponentname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Component Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_AV_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		InstanceAttributeValue_c v_av = (InstanceAttributeValue_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_av
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Instance Attribute Value");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_av != null))) {

				if (v_av != null) {
					v_av.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Instance Attribute Value failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_CPA_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ClassParticipantAttribute_c v_attr = (ClassParticipantAttribute_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_attr
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Class Participant Attribute");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_attr != null))) {

				if (v_attr != null) {
					v_attr.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Class Participant Attribute failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_EEP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ExternalEntityParticipant_c v_participant = (ExternalEntityParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_participant
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of External Entity Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_participant != null))) {

				if (v_participant != null) {
					v_participant.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of External Entity Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_FPP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		FunctionPackageParticipant_c v_participant = (FunctionPackageParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_participant
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Function Package Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_participant != null))) {

				if (v_participant != null) {
					v_participant.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Function Package Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_CIP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ClassInstanceParticipant_c v_participant = (ClassInstanceParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_participant
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Class Instance Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_participant != null))) {

				if (v_participant != null) {
					v_participant.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Class Instance Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean MSG_R_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ReturnMessage_c v_message = (ReturnMessage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_message
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Return Message");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_message != null))) {

				if (v_message != null) {
					v_message.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Return Message failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean MSG_SM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		SynchronousMessage_c v_message = (SynchronousMessage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_message
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Synchronous Message");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_message != null))) {

				if (v_message != null) {
					v_message.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Synchronous Message failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean MSG_AM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		AsynchronousMessage_c v_message = (AsynchronousMessage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_message
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Asynchronous Message");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_message != null))) {

				if (v_message != null) {
					v_message.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Asynchronous Message failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_TM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		TimingMark_c v_mark = (TimingMark_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_mark
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Timing Mark");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_mark != null))) {

				if (v_mark != null) {
					v_mark.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Timing Mark failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_TS_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		TimeSpan_c v_span = (TimeSpan_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_span
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Time Span");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_span != null))) {

				if (v_span != null) {
					v_span.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Time Span failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_AP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ActorParticipant_c v_ap = (ActorParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ap
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Actor Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_ap != null))) {

				if (v_ap != null) {
					v_ap.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Actor Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SQ_PP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		PackageParticipant_c v_participant = (PackageParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_participant
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Package Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_participant != null))) {

				if (v_participant != null) {
					v_participant.setInformalname(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Package Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_DPK_Rename(IStructuredSelection selection,
			String p_New_name) {
		DataTypePackage_c element = (DataTypePackage_c) selection.iterator()
				.next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		DataTypePackage_c v_dPkg = (DataTypePackage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_dPkg
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Data Type Package");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_dPkg != null) {
				v_dPkg.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Data Type Package failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_UDT_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		UserDataType_c v_udt = (UserDataType_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_udt
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of User Data Type");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_udt != null) {
				v_udt.Rename(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of User Data Type failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_EDT_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		EnumerationDataType_c v_edt = (EnumerationDataType_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_edt
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Enumeration Data Type");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_edt != null) {
				v_edt.Rename(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Enumeration Data Type failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_ENUM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Enumerator_c v_enumerator = (Enumerator_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_enumerator
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Enumerator");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_enumerator != null) {
				v_enumerator.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Enumerator failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean CNST_CSP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ConstantSpecification_c v_csp = (ConstantSpecification_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_csp
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Constant Specification");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_csp != null) {
				v_csp.setInformalgroupname(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Constant Specification failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean CNST_LSC_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		LiteralSymbolicConstant_c v_lsc = (LiteralSymbolicConstant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_lsc
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Literal Symbolic Constant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			SymbolicConstant_c v_syc = SymbolicConstant_c
					.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
							.getOneCNST_LFSCOnR1503(v_lsc));

			if (v_syc != null) {
				v_syc.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Literal Symbolic Constant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_FPK_Rename(IStructuredSelection selection,
			String p_New_name) {
		FunctionPackage_c element = (FunctionPackage_c) selection.iterator()
				.next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		FunctionPackage_c v_fPkg = (FunctionPackage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_fPkg
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Function Package");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_fPkg != null) {
				v_fPkg.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Function Package failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_SYNC_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Function_c v_fn = (Function_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_fn
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Function");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_fn != null) {
				v_fn.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Function failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_SPARM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		FunctionParameter_c v_fnp = (FunctionParameter_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_fnp
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Function Parameter");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_fnp != null) {
				v_fnp.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Function Parameter failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_EEPK_Rename(IStructuredSelection selection,
			String p_New_name) {
		ExternalEntityPackage_c element = (ExternalEntityPackage_c) selection
				.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ExternalEntityPackage_c v_ePkg = (ExternalEntityPackage_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ePkg
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of External Entity Package");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ePkg != null) {
				v_ePkg.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of External Entity Package failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_EE_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ExternalEntity_c v_ee = (ExternalEntity_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ee
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of External Entity");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ee != null) {
				v_ee.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of External Entity failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_BRG_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Bridge_c v_brg = (Bridge_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_brg
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Bridge");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_brg != null) {
				v_brg.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Bridge failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_BPARM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		BridgeParameter_c v_bparm = (BridgeParameter_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_bparm
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Bridge Parameter");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_bparm != null) {
				v_bparm.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Bridge Parameter failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_SS_Rename(IStructuredSelection selection,
			String p_New_name) {
		Subsystem_c element = (Subsystem_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Subsystem_c v_ss = (Subsystem_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ss
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Subsystem");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ss != null) {
				v_ss.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Subsystem failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean O_OBJ_Rename(IStructuredSelection selection,
			String p_New_name) {
		ModelClass_c element = (ModelClass_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ModelClass_c v_clazz = (ModelClass_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_clazz
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Model Class");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_clazz != null) {
				v_clazz.Rename(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Model Class failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean O_ATTR_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Attribute_c v_attr = (Attribute_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_attr
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Attribute");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_attr != null) {
				v_attr.setRoot_nam(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Attribute failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean O_TFR_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Operation_c v_operation = (Operation_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_operation
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Operation");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_operation != null) {
				v_operation.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Operation failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean O_TPARM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		OperationParameter_c v_parm = (OperationParameter_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_parm
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Operation Parameter");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_parm != null) {
				v_parm.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Operation Parameter failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SM_EVT_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		StateMachineEvent_c v_evt = (StateMachineEvent_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_evt
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of State Machine Event");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			PolymorphicEvent_c v_pevt = PolymorphicEvent_c
					.getOneSM_PEVTOnR525(v_evt);

			if (((v_pevt != null))) {

				NonLocalEvent_c[] v_nlevts = NonLocalEvent_c
						.getManySM_NLEVTsOnR527(v_pevt);

				NonLocalEvent_c v_nlevt = null;
				for (int i9624 = 0; i9624 < v_nlevts.length; i9624++) {
					v_nlevt = v_nlevts[i9624];

					StateMachineEvent_c v_childEvt = StateMachineEvent_c
							.getOneSM_EVTOnR525(SemEvent_c
									.getOneSM_SEVTOnR526(v_nlevt));

					if (v_childEvt != null) {
						v_childEvt.setMning(p_New_name);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

			}

			if (v_evt != null) {
				v_evt.setMning(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of State Machine Event failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SM_EVTDI_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		StateMachineEventDataItem_c v_evtdi = (StateMachineEventDataItem_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_evtdi
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of State Machine Event Data Item");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_evtdi != null) {
				v_evtdi.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of State Machine Event Data Item failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean SM_STATE_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		StateMachineState_c v_smstate = (StateMachineState_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_smstate
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of State Machine State");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_smstate != null) {
				v_smstate.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of State Machine State failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean COMM_COMM_Rename(IStructuredSelection selection,
			String p_New_name) {
		Communication_c element = (Communication_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Communication_c v_comm = (Communication_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_comm
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Communication");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_comm != null))) {

				if (v_comm != null) {
					v_comm.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Communication failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean UC_UCC_Rename(IStructuredSelection selection,
			String p_New_name) {
		UseCaseDiagram_c element = (UseCaseDiagram_c) selection.iterator()
				.next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		UseCaseDiagram_c v_ucc = (UseCaseDiagram_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ucc
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Use Case Diagram");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_ucc != null))) {

				if (v_ucc != null) {
					v_ucc.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Use Case Diagram failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean IA_UCP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		UseCaseParticipant_c v_uc = (UseCaseParticipant_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_uc
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Use Case Participant");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_uc != null))) {

				if (v_uc != null) {
					v_uc.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Use Case Participant failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_A_Rename(IStructuredSelection selection,
			String p_New_name) {
		Activity_c element = (Activity_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Activity_c v_act = (Activity_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_act
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Activity");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_act != null) {
				v_act.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Activity failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_FJ_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ForkJoinNode_c v_fj = (ForkJoinNode_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_fj
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Fork Join Node");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_fj != null) {
				v_fj.setGuardcondition(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Fork Join Node failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_E_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ActivityEdge_c v_ae = (ActivityEdge_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ae
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Activity Edge");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ae != null) {
				v_ae.setGuard(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Activity Edge failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_GA_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ActivityDiagramAction_c v_ga = (ActivityDiagramAction_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ga
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Activity Diagram Action");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ga != null) {
				v_ga.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Activity Diagram Action failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_DM_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		DecisionMergeNode_c v_dm = (DecisionMergeNode_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_dm
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Decision Merge Node");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_dm != null) {
				v_dm.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Decision Merge Node failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_OBJ_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ObjectNode_c v_obj = (ObjectNode_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_obj
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Object Node");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_obj != null) {
				v_obj.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Object Node failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_AEA_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		AcceptEventAction_c v_aea = (AcceptEventAction_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_aea
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Accept Event Action");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_aea != null) {
				v_aea.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Accept Event Action failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_ATE_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		AcceptTimeEventAction_c v_ate = (AcceptTimeEventAction_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ate
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Accept Time Event Action");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ate != null) {
				v_ate.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Accept Time Event Action failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_SS_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		SendSignal_c v_ss = (SendSignal_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ss
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Send Signal");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ss != null) {
				v_ss.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Send Signal failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean A_AP_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ActivityPartition_c v_ap = (ActivityPartition_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_ap
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Activity Partition");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_ap != null) {
				v_ap.setName(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Activity Partition failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_SDT_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		StructuredDataType_c v_sdt = (StructuredDataType_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_sdt
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Structured Data Type");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_sdt != null) {
				v_sdt.Rename(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Structured Data Type failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean S_MBR_Rename(IStructuredSelection selection,
			String p_New_name) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		StructureMember_c v_member = (StructureMember_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_member
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Structure Member");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (v_member != null) {
				v_member.Rename(p_New_name);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Rename instance(s) of Structure Member failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}
	private static boolean EP_PKG_Rename(IStructuredSelection selection,
			String p_New_name) {
		Package_c element = (Package_c) selection.iterator().next();
		IStatus name_ok = validateComponentName(element, p_New_name);
		if (!name_ok.isOK()) {
			notifyUserOfNameConflict(name_ok);
			return false;
		}
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		Package_c v_package = (Package_c) context;
		PersistableModelComponent.ensureCoreDataTypesAvailable(v_package
				.getModelRoot());

		TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
				.startTransactionsOnSelectedModelRoots("Rename instance(s) of Package");
		try {
			// Ensure that actions take place between Verifier Activity executions
			Ooaofooa.beginSaveOperation();
			if (((v_package != null))) {

				if (v_package != null) {
					v_package.setName(p_New_name);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

			// end critical section
			Ooaofooa.endSaveOperation();
			// catch all exceptions and cancel the transactions
		} catch (Exception e) {
			Ooaofooa.endSaveOperation();
			TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Rename instance(s) of Package failed", e);//$NON-NLS-1$
		}
		TransactionUtil.endTransactions(transactionGroup);

		return true;
	}

	public static IStatus validateSystemModelName(SystemModel_c systemModel,
			String new_name) {
		return validateName(systemModel, new_name, IResource.PROJECT);
	}

	public static IStatus validateComponentName(NonRootModelElement element,
			String new_name) {
		return validateName(element, new_name, IResource.FILE
				| IResource.FOLDER);
	}

	public static IStatus validateName(NonRootModelElement element,
			String new_name, int type) {
		IPersistenceHierarchyMetaData hmd = PersistenceManager
				.getHierarchyMetaData();
		if (hmd.isComponentRoot(element)) {
			IStatus nameOK = CorePlugin.getWorkspace().validateName(new_name,
					type);

			if (nameOK.isOK()) {
				/* new_name must not begin or end with a whitespace */
				if (Character.isWhitespace(new_name.charAt(0))
						|| Character.isWhitespace(new_name.charAt(new_name
								.length() - 1))) {
					String name = CorePlugin.getDefault().getBundle()
							.getSymbolicName();
					return new Status(
							IStatus.ERROR,
							name,
							1,
							"Resource name cannot begin or end with whitespace",
							null);
				}

				// still need to check for duplicate name
				if (type == IResource.PROJECT) {
					IProject[] sys_set = CorePlugin.getWorkspace().getRoot()
							.getProjects();
					IProject selection = (IProject) ((SystemModel_c) element)
							.getAdapter(IProject.class);
					for (int i = 0; i < sys_set.length; ++i) {
						if (selection != sys_set[i]) {
							if (CorePlugin.osIsCaseInsensitive()) {
								if (new_name.toLowerCase().equals(
										(sys_set[i]).getName().toLowerCase())) {
									String name = CorePlugin.getDefault()
											.getBundle().getSymbolicName();
									return new Status(
											IStatus.ERROR,
											name,
											1,
											"Resource already exists with that name",
											null);
								}
							} else {
								if (new_name.equals((sys_set[i]).getName())) {
									String name = CorePlugin.getDefault()
											.getBundle().getSymbolicName();
									return new Status(
											IStatus.ERROR,
											name,
											1,
											"Resource already exists with that name",
											null);
								}
							}
						}
					}
				} else {
					String name = CorePlugin.getDefault().getBundle()
							.getSymbolicName();
					if (PersistenceManager.getDefaultInstance().nameIsUnique(
							element, new_name)) {
						// in some cases the name may not be unique, this
						// happens when dealing with a team provider like
						// SVN.  Old folders may exist that are scheduled
						// for deletion, so we need to warn if the resulting
						// folder exists
						IFile file = element.getFile();
						if (file == null) {
							// this happens during name validation at creation time
							// we need to build the file path and create an in-memory
							// workspace file
							NonRootModelElement parent = hmd.getParent(element);
							while (parent.getFile() == null) {
								parent = hmd.getParent(parent);
							}
							if (parent != null) {
								IPath fullPath = parent.getFile().getFullPath()
										.removeLastSegments(1);
								fullPath = fullPath
										.append(new_name)
										.addTrailingSeparator()
										.append(new_name + "."
												+ Ooaofooa.MODELS_EXT);
								file = ResourcesPlugin.getWorkspace().getRoot()
										.getFile(fullPath);
							}
						}
						IPath newPath = file.getFullPath()
								.removeLastSegments(2).append(new_name);
						IFolder folder = ResourcesPlugin.getWorkspace()
								.getRoot().getFolder(newPath);
						if (folder.exists() && !file.exists()) {
							return new Status(
									IStatus.ERROR,
									name,
									1,
									"A model element with the same name already exists.\n\n"
											+ "This is most likely due to uncommitted renames or deletions."
											+ "  If this is the case, please commit any outstanding changes before proceeding.\n\n"
											+ "If the project is not connected to a configuration management system"
											+ ", you will need to remove the target manually.",
									null);
						}
						return Status.OK_STATUS;
					} else {
						return new Status(IStatus.ERROR, name, 1,
								"Resource already exists with that name", null);
					}
				}
			} else {
				// there was a problem
				return nameOK;
			}
		}
		return Status.OK_STATUS;
	}

	private static void notifyUserOfNameConflict(IStatus stat) {
		org.eclipse.swt.widgets.Shell sh = CorePlugin.getDefault()
				.getWorkbench().getActiveWorkbenchWindow().getShell();
		org.eclipse.jface.dialogs.MessageDialog.openError(sh, "Name Conflict",
				stat.getMessage());
	}

	/**
	 * This method returns a string which does not
	 * contain any label related values.  This is
	 * necessary when an element is represented by
	 * a label which contains more than the elements
	 * name.
	 *
	 * @param Object the currently selected element
	 * @return String the string used in the text editor
	 */
	private String getEditorText(Object element) {

		if (element instanceof SystemModel_c) {
			String text = ((SystemModel_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Domain_c) {
			String text = ((Domain_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Subsystem_c) {
			String text = ((Subsystem_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ModelClass_c) {
			String text = ((ModelClass_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof FunctionPackage_c) {
			String text = ((FunctionPackage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Function_c) {
			String text = ((Function_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof FunctionParameter_c) {
			String text = ((FunctionParameter_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Operation_c) {
			String text = ((Operation_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof OperationParameter_c) {
			String text = ((OperationParameter_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof InstanceStateMachine_c) {
			return "Instance State Chart";
		} else if (element instanceof ClassStateMachine_c) {
			return "Class State Chart";
		} else if (element instanceof StateMachineState_c) {
			String text = ((StateMachineState_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof StateMachineEvent_c) {
			String text = ((StateMachineEvent_c) element).getMning();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof StateMachineEventDataItem_c) {
			String text = ((StateMachineEventDataItem_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Attribute_c) {
			String text = ((Attribute_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof DataType_c) {
		} else if (element instanceof Enumerator_c) {
			String text = ((Enumerator_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ExternalEntity_c) {
			String text = ((ExternalEntity_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Bridge_c) {
			String text = ((Bridge_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof BridgeParameter_c) {
			String text = ((BridgeParameter_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Association_c) {
		} else if (element instanceof ImportedClass_c) {
		} else if (element instanceof ClassIdentifierAttribute_c) {
		} else if (element instanceof DerivedBaseAttribute_c) {
		} else if (element instanceof AttributeReferenceInClass_c) {
		} else if (element instanceof ClassAsSimpleParticipant_c) {
		} else if (element instanceof ClassAsSimpleFormalizer_c) {
		} else if (element instanceof ClassAsAssociatedOneSide_c) {
		} else if (element instanceof ClassAsAssociatedOtherSide_c) {
		} else if (element instanceof ClassAsLink_c) {
		} else if (element instanceof ClassAsSupertype_c) {
		} else if (element instanceof ClassAsSubtype_c) {
		} else if (element instanceof ClassAsDerivedOneSide_c) {
		} else if (element instanceof ClassAsDerivedOtherSide_c) {
		} else if (element instanceof Action_c) {
		} else if (element instanceof EventIgnored_c) {
		} else if (element instanceof CantHappen_c) {
		} else if (element instanceof StateEventMatrixEntry_c) {
		} else if (element instanceof DataTypePackage_c) {
			String text = ((DataTypePackage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ExternalEntityPackage_c) {
			String text = ((ExternalEntityPackage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof UserDataType_c) {
			DataType_c result = DataType_c
					.getOneS_DTOnR17((UserDataType_c) element);

			String text = result.getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof CoreDataType_c) {
			DataType_c result = DataType_c
					.getOneS_DTOnR17((CoreDataType_c) element);

			String text = result.getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof EnumerationDataType_c) {
			DataType_c result = DataType_c
					.getOneS_DTOnR17((EnumerationDataType_c) element);

			String text = result.getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof DerivedAssociation_c) {
		} else if (element instanceof ReferentialAttribute_c) {
		} else if (element instanceof NonLocalEvent_c) {
			String text = ((NonLocalEvent_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ExternalEntityEventData_c) {
		} else if (element instanceof Sequence_c) {
			String text = ((Sequence_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ClassInstanceParticipant_c) {
			String text = ((ClassInstanceParticipant_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof InstanceAttributeValue_c) {
			String text = ((InstanceAttributeValue_c) element)
					.getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof ExternalEntityParticipant_c) {
			String text = ((ExternalEntityParticipant_c) element)
					.getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof FunctionPackageParticipant_c) {
			String text = ((FunctionPackageParticipant_c) element)
					.getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof PackageParticipant_c) {
			String text = ((PackageParticipant_c) element).getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof ClassParticipant_c) {
			String text = ((ClassParticipant_c) element).getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof Lifespan_c) {
		} else if (element instanceof ClassParticipantAttribute_c) {
			String text = ((ClassParticipantAttribute_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof TimingMark_c) {
			String text = ((TimingMark_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof TimeSpan_c) {
			String text = ((TimeSpan_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof SynchronousMessage_c) {
			String text = ((SynchronousMessage_c) element).getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof AsynchronousMessage_c) {
			String text = ((AsynchronousMessage_c) element).getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof MessageArgument_c) {
			String text = ((MessageArgument_c) element).getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof MessageArgument_c) {
			String text = ((MessageArgument_c) element).getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof InstanceAttributeValue_c) {
			String text = ((InstanceAttributeValue_c) element)
					.getInformalname();
			if (text == null)
				return "";
			else
				return text;
		} else if (element instanceof ActorParticipant_c) {
			String text = ((ActorParticipant_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ReturnMessage_c) {
			String text = ((ReturnMessage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Communication_c) {
			String text = ((Communication_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof CommunicationLink_c) {
		} else if (element instanceof UseCaseDiagram_c) {
			String text = ((UseCaseDiagram_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof UseCaseParticipant_c) {
			String text = ((UseCaseParticipant_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof BinaryAssociation_c) {
		} else if (element instanceof Generalization_c) {
		} else if (element instanceof Include_c) {
		} else if (element instanceof Extend_c) {
		} else if (element instanceof Activity_c) {
			String text = ((Activity_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ForkJoinNode_c) {
			String text = ((ForkJoinNode_c) element).getGuardcondition();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof InitialNode_c) {
		} else if (element instanceof ActivityEdge_c) {
			String text = ((ActivityEdge_c) element).getGuard();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ActivityFinalNode_c) {
		} else if (element instanceof FlowFinalNode_c) {
		} else if (element instanceof ActivityDiagramAction_c) {
			String text = ((ActivityDiagramAction_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof DecisionMergeNode_c) {
		} else if (element instanceof ObjectNode_c) {
			String text = ((ObjectNode_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof AcceptEventAction_c) {
			String text = ((AcceptEventAction_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof SendSignal_c) {
			String text = ((SendSignal_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ActivityPartition_c) {
			String text = ((ActivityPartition_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof AcceptTimeEventAction_c) {
			String text = ((AcceptTimeEventAction_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentPackage_c) {
			String text = ((ComponentPackage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Component_c) {
			String text = ((Component_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentReference_c) {
		} else if (element instanceof Provision_c) {
			String text = ((Provision_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Requirement_c) {
			String text = ((Requirement_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof InterfacePackage_c) {
			String text = ((InterfacePackage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Interface_c) {
			String text = ((Interface_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof InterfaceSignal_c) {
			String text = ((InterfaceSignal_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof InterfaceOperation_c) {
			String text = ((InterfaceOperation_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof PropertyParameter_c) {
			String text = ((PropertyParameter_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof RequiredOperation_c) {
		} else if (element instanceof RequiredSignal_c) {
		} else if (element instanceof ProvidedOperation_c) {
		} else if (element instanceof ProvidedSignal_c) {
		} else if (element instanceof Instance_c) {
			String text = ((Instance_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof AttributeValue_c) {
		} else if (element instanceof PendingEvent_c) {
		} else if (element instanceof StructuredDataType_c) {
			DataType_c result = DataType_c
					.getOneS_DTOnR17((StructuredDataType_c) element);

			String text = result.getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof StructureMember_c) {
			String text = ((StructureMember_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Port_c) {
			String text = ((Port_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ImportedProvision_c) {
			String text = ((ImportedProvision_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ImportedRequirement_c) {
			String text = ((ImportedRequirement_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Transition_c) {
			String text = ((Transition_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentInstance_c) {
			String text = ((ComponentInstance_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentParticipant_c) {
			String text = ((ComponentParticipant_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Package_c) {
			String text = ((Package_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof LinkParticipation_c) {
			String text = ((LinkParticipation_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ConstantSpecification_c) {
			String text = ((ConstantSpecification_c) element)
					.getInformalgroupname();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof LiteralSymbolicConstant_c) {
			SymbolicConstant_c result = SymbolicConstant_c
					.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
							.getOneCNST_LFSCOnR1503((LiteralSymbolicConstant_c) element));

			String text = result.getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof SymbolicConstant_c) {
		} else if (element instanceof Satisfaction_c) {
			String text = ((Satisfaction_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof NewBaseAttribute_c) {
		} else if (element instanceof PolymorphicEvent_c) {
		} else if (element instanceof ReferredToIdentifierAttribute_c) {
		} else if (element instanceof Delegation_c) {
		} else if (element instanceof SemEvent_c) {
		} else if (element instanceof InformalSynchronousMessage_c) {
		} else if (element instanceof InformalAsynchronousMessage_c) {
		} else if (element instanceof FunctionMessage_c) {
		} else if (element instanceof BridgeMessage_c) {
		} else if (element instanceof OperationMessage_c) {
		} else if (element instanceof InterfaceOperationMessage_c) {
		} else if (element instanceof EventMessage_c) {
		} else if (element instanceof SignalMessage_c) {
		} else if (element instanceof InformalArgument_c) {
		} else if (element instanceof CreationTransition_c) {
		}
		return "Unknown Model Element";
	}

	static public boolean canRenameAction() {
		PersistenceManager pm = PersistenceManager.getDefaultInstance();
		PersistableModelComponent component = null;

		boolean result = false;
		final IStructuredSelection structuredSelection = Selection
				.getInstance().getStructuredSelection();
		if (structuredSelection.size() > 1) {
			return false;
		}
		Object context = structuredSelection.getFirstElement();
		component = pm.getComponent((NonRootModelElement) context);
		if (context instanceof SystemModel_c) {
			result = true;
		} else if (context instanceof Domain_c) {
			result = true;
		} else if (context instanceof ComponentPackage_c) {
			result = true;
		} else if (context instanceof InterfacePackage_c) {
			result = true;
		} else if (context instanceof Component_c) {
			result = true;
		} else if (context instanceof Interface_c) {
			result = true;
		} else if (context instanceof Provision_c) {
			result = ((Provision_c) context).Canrename();
		} else if (context instanceof Requirement_c) {
			result = ((Requirement_c) context).Canrename();
		} else if (context instanceof Port_c) {
			result = true;
		} else if (context instanceof InterfaceSignal_c) {
			result = true;
		} else if (context instanceof InterfaceOperation_c) {
			result = true;
		} else if (context instanceof PropertyParameter_c) {
			result = true;
		} else if (context instanceof Sequence_c) {
			result = true;
		} else if (context instanceof ClassParticipant_c) {
			result = ((ClassParticipant_c) context).Canrename();
		} else if (context instanceof MessageArgument_c) {
			result = ((MessageArgument_c) context).Canrename();
		} else if (context instanceof ComponentParticipant_c) {
			result = ((ComponentParticipant_c) context).Canrename();
		} else if (context instanceof InstanceAttributeValue_c) {
			result = ((InstanceAttributeValue_c) context).Canrename();
		} else if (context instanceof ClassParticipantAttribute_c) {
			result = true;
		} else if (context instanceof ExternalEntityParticipant_c) {
			result = ((ExternalEntityParticipant_c) context).Canrename();
		} else if (context instanceof FunctionPackageParticipant_c) {
			result = ((FunctionPackageParticipant_c) context).Canrename();
		} else if (context instanceof ClassInstanceParticipant_c) {
			result = true;
		} else if (context instanceof ReturnMessage_c) {
			result = true;
		} else if (context instanceof SynchronousMessage_c) {
			result = ((SynchronousMessage_c) context).Canrename();
		} else if (context instanceof AsynchronousMessage_c) {
			result = ((AsynchronousMessage_c) context).Canrename();
		} else if (context instanceof TimingMark_c) {
			result = true;
		} else if (context instanceof TimeSpan_c) {
			result = true;
		} else if (context instanceof ActorParticipant_c) {
			result = true;
		} else if (context instanceof PackageParticipant_c) {
			result = ((PackageParticipant_c) context).Canrename();
		} else if (context instanceof DataTypePackage_c) {
			result = ((DataTypePackage_c) context).Canrename();
		} else if (context instanceof UserDataType_c) {
			result = ((UserDataType_c) context).Canrename();
		} else if (context instanceof EnumerationDataType_c) {
			result = true;
		} else if (context instanceof Enumerator_c) {
			result = true;
		} else if (context instanceof ConstantSpecification_c) {
			result = true;
		} else if (context instanceof LiteralSymbolicConstant_c) {
			result = true;
		} else if (context instanceof FunctionPackage_c) {
			result = true;
		} else if (context instanceof Function_c) {
			result = true;
		} else if (context instanceof FunctionParameter_c) {
			result = true;
		} else if (context instanceof ExternalEntityPackage_c) {
			result = true;
		} else if (context instanceof ExternalEntity_c) {
			result = true;
		} else if (context instanceof Bridge_c) {
			result = true;
		} else if (context instanceof BridgeParameter_c) {
			result = true;
		} else if (context instanceof Subsystem_c) {
			result = true;
		} else if (context instanceof ModelClass_c) {
			result = true;
		} else if (context instanceof Attribute_c) {
			result = ((Attribute_c) context).Canrename();
		} else if (context instanceof Operation_c) {
			result = true;
		} else if (context instanceof OperationParameter_c) {
			result = true;
		} else if (context instanceof StateMachineEvent_c) {
			result = ((StateMachineEvent_c) context).Canrename();
		} else if (context instanceof StateMachineEventDataItem_c) {
			result = true;
		} else if (context instanceof StateMachineState_c) {
			result = true;
		} else if (context instanceof Communication_c) {
			result = true;
		} else if (context instanceof UseCaseDiagram_c) {
			result = true;
		} else if (context instanceof UseCaseParticipant_c) {
			result = true;
		} else if (context instanceof Activity_c) {
			result = true;
		} else if (context instanceof ForkJoinNode_c) {
			result = true;
		} else if (context instanceof ActivityEdge_c) {
			result = true;
		} else if (context instanceof ActivityDiagramAction_c) {
			result = true;
		} else if (context instanceof DecisionMergeNode_c) {
			result = true;
		} else if (context instanceof ObjectNode_c) {
			result = true;
		} else if (context instanceof AcceptEventAction_c) {
			result = true;
		} else if (context instanceof AcceptTimeEventAction_c) {
			result = true;
		} else if (context instanceof SendSignal_c) {
			result = true;
		} else if (context instanceof ActivityPartition_c) {
			result = true;
		} else if (context instanceof StructuredDataType_c) {
			result = true;
		} else if (context instanceof StructureMember_c) {
			result = true;
		} else if (context instanceof Package_c) {
			result = true;
		} else {
			result = false;
		}
		return result;
	}

	/**
	 * Returns null if the given name is valid for the given model element.
	 * Otherwise, returns a message stating why the name is invalid.
	 */
	public static String isNameValid(String name, ModelElement element) {
		// if the given element is of a type whose instances may not have
		// spaces in their names, and there is a space in the given name
		if ((element instanceof Attribute_c
				|| element instanceof FunctionParameter_c
				|| element instanceof OperationParameter_c
				|| element instanceof BridgeParameter_c
				|| element instanceof Function_c
				|| element instanceof Operation_c
				|| element instanceof Bridge_c
				|| element instanceof StateMachineEventDataItem_c
				|| element instanceof DataType_c
				|| element instanceof Enumerator_c
				|| element instanceof SymbolicConstant_c
				|| element instanceof LiteralSymbolicConstant_c
				|| element instanceof StructureMember_c
				|| element instanceof InterfaceOperation_c
				|| element instanceof InterfaceSignal_c
				|| element instanceof SignalEvent_c || element instanceof MessageArgument_c)
				&& name.contains(" ")) {
			// the name is not valid
			return CorePlugin.INVALID_NAME_SPACES;
		}

		final ModelRoot modelRoot = ((NonRootModelElement) element)
				.getModelRoot();

		if (!(Ooaofooa.Getuniqueinitialname(modelRoot, name, element)
				.equals(name))) {
			return CorePlugin.DUPLICATE_NAME_ERROR;
		}

		return null;
	}

	public static void handleRename(Object selection, String oldName, Shell sh) {
		InputDialog id = new InputDialog(sh, "Rename", "Enter the new name:",
				oldName, UIUtil.newRenameValidator((ModelElement) selection));
		int result = id.open();
		if (result == InputDialog.OK) {
			String newName = id.getValue();
			// Run this in an async to make sure that the operation that
			// triggered this action is completed. Otherwise this
			// leads to problems when the icon of the item being renamed
			// is clicked (i.e., which causes the rename text widget
			// to lose focus and trigger this method).
			Runnable query = RenameAction.getRenameQuery(selection, newName,
					oldName, false);
			if (sh != null) {
				sh.getDisplay().asyncExec(query);
			} else {
				PlatformUI.getWorkbench().getDisplay().asyncExec(query);
			}
		}
	}
} // end RenameAction

