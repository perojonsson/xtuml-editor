package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.EventMessage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_EVENT_MESSAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class EventMessage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public EventMessage_c(ModelRoot modelRoot, java.util.UUID p_m_msg_id,
			java.util.UUID p_m_smevt_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

		Object[] key = {m_msg_id};
		addInstanceToMap(key);
	}
	static public EventMessage_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, java.util.UUID p_m_smevt_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);
		EventMessage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id};
			new_inst = (EventMessage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new EventMessage_c(modelRoot, p_m_msg_id, p_m_smevt_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public EventMessage_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, java.util.UUID p_m_smevt_id) {
		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);
		EventMessage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id};
			source = (EventMessage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

				return source;
			}
		}
		// there is no instance matching the id
		EventMessage_c new_inst = new EventMessage_c(modelRoot, p_m_msg_id,
				p_m_smevt_id);
		return new_inst;
	}
	public EventMessage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smevt_id = IdAssigner.NULL_UUID;
		m_msg_id = IdAssigner.NULL_UUID;
		Object[] key = {m_msg_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_msg_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_msg_id != p_newKey) {

			m_msg_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof EventMessage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof EventMessage_c)) {
			return false;
		}

		EventMessage_c me = (EventMessage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getMsg_id()) || IdAssigner.NULL_UUID
						.equals(((EventMessage_c) elem).getMsg_id())) && this != elem)) {
			return false;
		}
		if (!getMsg_id().equals(((EventMessage_c) elem).getMsg_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof EventMessage_c)) {
			return false;
		}

		EventMessage_c me = (EventMessage_c) elem;
		if (!getMsg_idCachedValue().equals(
				((EventMessage_c) elem).getMsg_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_msg_id;

	// declare association references from this class

	// referring navigation

	StateMachineEvent_c GeneratesStateMachineEvent;
	public void relateAcrossR1009To(StateMachineEvent_c target) {
		relateAcrossR1009To(target, true);
	}
	public void relateAcrossR1009To(StateMachineEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == GeneratesStateMachineEvent)
			return; // already related

		if (GeneratesStateMachineEvent != target) {

			Object oldKey = getInstanceKey();

			if (GeneratesStateMachineEvent != null) {
				UmlProblem.removeXtUMLProblem(this, GeneratesStateMachineEvent);

				GeneratesStateMachineEvent.clearBackPointerR1009To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"EventMessage_c.relateAcrossR1009To(StateMachineEvent_c target)",
									"Relate performed across R1009 from Event Message to State Machine Event without unrelate of prior instance.");
				}
			}

			GeneratesStateMachineEvent = target;
			m_smevt_id = target.getSmevt_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1009To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1009", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1009From(StateMachineEvent_c target) {
		unrelateAcrossR1009From(target, true);
	}
	public void unrelateAcrossR1009From(StateMachineEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (GeneratesStateMachineEvent == null)
			return; // already unrelated

		if (target != GeneratesStateMachineEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1009",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1009To(this);
		}

		if (GeneratesStateMachineEvent != null) {

			m_smevt_id = GeneratesStateMachineEvent.getSmevt_id();
			GeneratesStateMachineEvent = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1009", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static EventMessage_c getOneMSG_EOnR1009(
			StateMachineEvent_c[] targets) {
		return getOneMSG_EOnR1009(targets, null);
	}

	public static EventMessage_c getOneMSG_EOnR1009(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test) {
		EventMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_EOnR1009(targets[i], test);
			}
		}

		return ret_val;
	}

	public static EventMessage_c getOneMSG_EOnR1009(StateMachineEvent_c target) {
		return getOneMSG_EOnR1009(target, null);
	}

	public static EventMessage_c getOneMSG_EOnR1009(StateMachineEvent_c target,
			boolean loadComponent) {
		return getOneMSG_EOnR1009(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static EventMessage_c getOneMSG_EOnR1009(StateMachineEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_EOnR1009(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static EventMessage_c getOneMSG_EOnR1009(ModelRoot modelRoot,
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		return getOneMSG_EOnR1009(modelRoot, target, test, true);
	}

	public static EventMessage_c getOneMSG_EOnR1009(ModelRoot modelRoot,
			StateMachineEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		EventMessage_c result = null;

		result = find_getOneMSG_EOnR1009(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					EventMessage_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneMSG_EOnR1009(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static EventMessage_c find_getOneMSG_EOnR1009(ModelRoot modelRoot,
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009) {
				for (int i = 0; i < target.backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009
						.size(); ++i) {
					EventMessage_c source = (EventMessage_c) target.backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c[] targets) {
		return getManyMSG_EsOnR1009(targets, null);
	}
	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c[] targets, boolean loadComponent) {
		return getManyMSG_EsOnR1009(targets, null, loadComponent);
	}
	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_EsOnR1009(targets, test, true);
	}

	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new EventMessage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					EventMessage_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009) {
				for (int j = 0; j < targets[i].backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009
						.size(); ++j) {
					EventMessage_c source = (EventMessage_c) targets[i].backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			EventMessage_c[] ret_set = new EventMessage_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventMessage_c[0];
		}
	}

	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c target) {
		return getManyMSG_EsOnR1009(target, null);
	}

	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c target, boolean loadComponent) {
		return getManyMSG_EsOnR1009(target, null, loadComponent);
	}

	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c target, ClassQueryInterface_c test) {
		return getManyMSG_EsOnR1009(target, test, true);
	}

	public static EventMessage_c[] getManyMSG_EsOnR1009(
			StateMachineEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new EventMessage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					EventMessage_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009) {
			for (int i = 0; i < target.backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009
					.size(); ++i) {
				EventMessage_c source = (EventMessage_c) target.backPointer_IsGeneratedByEventMessageIsGeneratedBy_R1009
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			EventMessage_c[] ret_set = new EventMessage_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventMessage_c[0];
		}
	}

	// referring navigation

	AsynchronousMessage_c IsSupertypeAsynchronousMessage;
	public void relateAcrossR1019To(AsynchronousMessage_c target) {
		relateAcrossR1019To(target, true);
	}
	public void relateAcrossR1019To(AsynchronousMessage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeAsynchronousMessage)
			return; // already related

		if (IsSupertypeAsynchronousMessage != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeAsynchronousMessage != null) {

				IsSupertypeAsynchronousMessage.clearBackPointerR1019To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"EventMessage_c.relateAcrossR1019To(AsynchronousMessage_c target)",
									"Relate performed across R1019 from Event Message to Asynchronous Message without unrelate of prior instance.");
				}
			}

			IsSupertypeAsynchronousMessage = target;
			if (IdAssigner.NULL_UUID.equals(target.getMsg_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_msg_id = target.getMsg_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1019To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1019", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1019From(AsynchronousMessage_c target) {
		unrelateAcrossR1019From(target, true);
	}
	public void unrelateAcrossR1019From(AsynchronousMessage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeAsynchronousMessage == null)
			return; // already unrelated

		if (target != IsSupertypeAsynchronousMessage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1019",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1019To(this);
		}

		if (IsSupertypeAsynchronousMessage != null) {

			m_msg_id = IsSupertypeAsynchronousMessage.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(m_msg_id)) {
				m_msg_id = IsSupertypeAsynchronousMessage
						.getMsg_idCachedValue();
			}
			IsSupertypeAsynchronousMessage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1019", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static EventMessage_c getOneMSG_EOnR1019(
			AsynchronousMessage_c[] targets) {
		return getOneMSG_EOnR1019(targets, null);
	}

	public static EventMessage_c getOneMSG_EOnR1019(
			AsynchronousMessage_c[] targets, ClassQueryInterface_c test) {
		EventMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_EOnR1019(targets[i], test);
			}
		}

		return ret_val;
	}

	public static EventMessage_c getOneMSG_EOnR1019(AsynchronousMessage_c target) {
		return getOneMSG_EOnR1019(target, null);
	}

	public static EventMessage_c getOneMSG_EOnR1019(
			AsynchronousMessage_c target, boolean loadComponent) {
		return getOneMSG_EOnR1019(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static EventMessage_c getOneMSG_EOnR1019(
			AsynchronousMessage_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_EOnR1019(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static EventMessage_c getOneMSG_EOnR1019(ModelRoot modelRoot,
			AsynchronousMessage_c target, ClassQueryInterface_c test) {
		return getOneMSG_EOnR1019(modelRoot, target, test, true);
	}

	public static EventMessage_c getOneMSG_EOnR1019(ModelRoot modelRoot,
			AsynchronousMessage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneMSG_EOnR1019(modelRoot, target, test);
	}
	private static EventMessage_c find_getOneMSG_EOnR1019(ModelRoot modelRoot,
			AsynchronousMessage_c target, ClassQueryInterface_c test) {
		if (target != null) {
			EventMessage_c source = (EventMessage_c) target.backPointer_IsSubtypeEventMessageIsSubtype_R1019;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static EventMessage_c[] getManyMSG_EsOnR1019(
			AsynchronousMessage_c[] targets) {
		return getManyMSG_EsOnR1019(targets, null);
	}
	public static EventMessage_c[] getManyMSG_EsOnR1019(
			AsynchronousMessage_c[] targets, boolean loadComponent) {
		return getManyMSG_EsOnR1019(targets, null, loadComponent);
	}
	public static EventMessage_c[] getManyMSG_EsOnR1019(
			AsynchronousMessage_c[] targets, ClassQueryInterface_c test) {
		return getManyMSG_EsOnR1019(targets, test, true);
	}

	public static EventMessage_c[] getManyMSG_EsOnR1019(
			AsynchronousMessage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new EventMessage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			EventMessage_c source = (EventMessage_c) targets[i].backPointer_IsSubtypeEventMessageIsSubtype_R1019;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			EventMessage_c[] ret_set = new EventMessage_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventMessage_c[0];
		}
	}

	public static EventMessage_c[] getManyMSG_EsOnR1019(
			AsynchronousMessage_c target) {
		if (target != null) {
			AsynchronousMessage_c[] targetArray = new AsynchronousMessage_c[1];
			targetArray[0] = target;
			return getManyMSG_EsOnR1019(targetArray);
		} else {
			EventMessage_c[] result = new EventMessage_c[0];
			return result;
		}
	}

	public static EventMessage_c[] getManyMSG_EsOnR1019(
			AsynchronousMessage_c target, boolean loadComponent) {
		if (target != null) {
			AsynchronousMessage_c[] targetArray = new AsynchronousMessage_c[1];
			targetArray[0] = target;
			return getManyMSG_EsOnR1019(targetArray, loadComponent);
		} else {
			EventMessage_c[] result = new EventMessage_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (GeneratesStateMachineEvent == null) {
			// R1009
			StateMachineEvent_c relInst40215 = (StateMachineEvent_c) baseRoot
					.getInstanceList(StateMachineEvent_c.class).get(
							new Object[]{m_smevt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40215 == null) {
				relInst40215 = (StateMachineEvent_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StateMachineEvent_c.class)
						.get(new Object[]{m_smevt_id});
			}
			if (relInst40215 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40215 = (StateMachineEvent_c) roots[i]
							.getInstanceList(StateMachineEvent_c.class).get(
									new Object[]{m_smevt_id});
					if (relInst40215 != null)
						break;
				}
			}
			//synchronized
			if (relInst40215 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40215) && !isProxy())) {
					relInst40215.relateAcrossR1009To(this, notifyChanges);
				}
			}
		}

		// R1019
		AsynchronousMessage_c relInst40216 = (AsynchronousMessage_c) baseRoot
				.getInstanceList(AsynchronousMessage_c.class).get(
						new Object[]{m_msg_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40216 == null) {
			relInst40216 = (AsynchronousMessage_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(AsynchronousMessage_c.class)
					.get(new Object[]{m_msg_id});
		}
		if (relInst40216 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40216 = (AsynchronousMessage_c) roots[i]
						.getInstanceList(AsynchronousMessage_c.class).get(
								new Object[]{m_msg_id});
				if (relInst40216 != null)
					break;
			}
		}
		//synchronized
		if (relInst40216 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40216) && !isProxy())) {
				relInst40216.relateAcrossR1019To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1009
		// SM_EVT
		inst = GeneratesStateMachineEvent;
		unrelateAcrossR1009From(GeneratesStateMachineEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R1019
		// MSG_AM
		inst = IsSupertypeAsynchronousMessage;
		unrelateAcrossR1019From(IsSupertypeAsynchronousMessage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(EventMessage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final EventMessage_c inst = (EventMessage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static EventMessage_c EventMessageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		EventMessage_c result = findEventMessageInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					EventMessage_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findEventMessageInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static EventMessage_c findEventMessageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				EventMessage_c x = (EventMessage_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static EventMessage_c EventMessageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return EventMessageInstance(modelRoot, test, true);
	}

	public static EventMessage_c EventMessageInstance(ModelRoot modelRoot) {
		return EventMessageInstance(modelRoot, null, true);
	}

	public static EventMessage_c[] EventMessageInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					EventMessage_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(EventMessage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				EventMessage_c x = (EventMessage_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				EventMessage_c[] ret_set = new EventMessage_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new EventMessage_c[0];
			}
		}
	}
	public static EventMessage_c[] EventMessageInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return EventMessageInstances(modelRoot, test, true);
	}
	public static EventMessage_c[] EventMessageInstances(ModelRoot modelRoot) {
		return EventMessageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Event Message.dispose call: ";
		StateMachineEvent_c testR1009Inst = StateMachineEvent_c
				.getOneSM_EVTOnR1009(this, false);

		if (testR1009Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1009 ";
		}
		AsynchronousMessage_c testR1019Inst2 = AsynchronousMessage_c
				.getOneMSG_AMOnR1019(this, false);

		if (testR1019Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1019 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Event Message", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("msg_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getMsg_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getMsg_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmevt_idLongBased() {
		if (GeneratesStateMachineEvent != null) {
			return GeneratesStateMachineEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (GeneratesStateMachineEvent != null) {
			return GeneratesStateMachineEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getMsg_idLongBased() {
		if (IsSupertypeAsynchronousMessage != null) {
			return IsSupertypeAsynchronousMessage.getMsg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMsg_id() {
		if (IsSupertypeAsynchronousMessage != null) {
			return IsSupertypeAsynchronousMessage.getMsg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeAsynchronousMessage != null);

	}

	public java.util.UUID getMsg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_msg_id))
			return m_msg_id;
		else
			return getMsg_id();
	}

	public void setMsg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_msg_id)) {
				return;
			}
		} else if (m_msg_id != null) {
			if (m_msg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Msg_id", m_msg_id, newValue, true);
		m_msg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Message", //$NON-NLS-1$
				" Operation entered: Event Message::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		EventMessage_c[] objs = EventMessage_c.EventMessageInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Message", //$NON-NLS-1$
				" Operation entered: Event Message::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class EventMessage_c_test40218_c implements ClassQueryInterface_c {
			EventMessage_c_test40218_c(java.util.UUID p40219) {
				m_p40219 = p40219;
			}
			private java.util.UUID m_p40219;
			public boolean evaluate(Object candidate) {
				EventMessage_c selected = (EventMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40219));
				return retval;
			}
		}

		EventMessage_c[] objs40217 = EventMessage_c.EventMessageInstances(
				modelRoot, new EventMessage_c_test40218_c(getMsg_id()));

		if (((objs40217.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Message", //$NON-NLS-1$
								"Consistency: Object: Event Message: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40217.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Event Message: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40217.length), e);
			}
			retval = false;

		}

		if (((objs40217.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Message", //$NON-NLS-1$
								"Consistency: Object: Event Message: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40217.length)
										+ " Msg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Message: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40217.length)
										+ " Msg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Event Message is a referring class in association: rel.Numb = 1009
		// The participating class is: State Machine Event
		class StateMachineEvent_c_test40223_c implements ClassQueryInterface_c {
			StateMachineEvent_c_test40223_c(java.util.UUID p40224) {
				m_p40224 = p40224;
			}
			private java.util.UUID m_p40224;
			public boolean evaluate(Object candidate) {
				StateMachineEvent_c selected = (StateMachineEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p40224));
				return retval;
			}
		}

		StateMachineEvent_c[] objs40222 = StateMachineEvent_c
				.StateMachineEventInstances(modelRoot,
						new StateMachineEvent_c_test40223_c(getSmevt_id()));

		if (((objs40222.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Message", //$NON-NLS-1$
								"Consistency: Object: Event Message: Association: 1009: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40222.length)
										+ " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Message: Association: 1009: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40222.length)
										+ " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Event Message is a subtype in association: rel.Numb = 1019
		// The supertype class is: Asynchronous Message
		class AsynchronousMessage_c_test40226_c
				implements
					ClassQueryInterface_c {
			AsynchronousMessage_c_test40226_c(java.util.UUID p40227) {
				m_p40227 = p40227;
			}
			private java.util.UUID m_p40227;
			public boolean evaluate(Object candidate) {
				AsynchronousMessage_c selected = (AsynchronousMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40227));
				return retval;
			}
		}

		AsynchronousMessage_c[] objs40225 = AsynchronousMessage_c
				.AsynchronousMessageInstances(modelRoot,
						new AsynchronousMessage_c_test40226_c(getMsg_id()));

		if (((objs40225.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Message", //$NON-NLS-1$
								"Consistency: Object: Event Message: Association: 1019: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40225.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Message: Association: 1019: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40225.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Message",
				" Operation entered: EventMessage::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR1009(this);

		if (((v_evt != null))) {

			this.unrelateAcrossR1009From(v_evt);

		}

		AsynchronousMessage_c v_em = AsynchronousMessage_c
				.getOneMSG_AMOnR1019(this);

		if (((v_em != null))) {

			this.unrelateAcrossR1019From(v_em);

		}

		MessageArgument_c[] v_arguments = MessageArgument_c
				.getManyMSG_AsOnR1001(Message_c
						.getManyMSG_MsOnR1018(AsynchronousMessage_c
								.getManyMSG_AMsOnR1019(this)));

		MessageArgument_c v_argument = null;
		for (int i37259 = 0; i37259 < v_arguments.length; i37259++) {
			v_argument = v_arguments[i37259];

			if (v_argument != null) {
				v_argument.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		AsynchronousMessage_c v_asyncMessage = AsynchronousMessage_c
				.getOneMSG_AMOnR1019(this);

		if (((v_asyncMessage != null))) {

			this.unrelateAcrossR1019From(v_asyncMessage);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Message",
				" Operation entered: EventMessage::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR1009(this);

		return v_evt.getMning();

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Event Message
