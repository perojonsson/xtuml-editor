package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.EventParameterReference_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_EVENT_PARAMETER_REFERENCE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class EventParameterReference_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public EventParameterReference_c(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_pp_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

		Object[] key = {m_value_id, m_sm_id, m_smedi_id, m_pp_id};
		addInstanceToMap(key);
	}
	static public EventParameterReference_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_pp_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);
		EventParameterReference_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id, p_m_sm_id, p_m_smedi_id, p_m_pp_id};
			new_inst = (EventParameterReference_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new EventParameterReference_c(modelRoot, p_m_value_id,
					p_m_sm_id, p_m_smedi_id, p_m_pp_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public EventParameterReference_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_value_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smedi_id,
			java.util.UUID p_m_pp_id) {
		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);
		EventParameterReference_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id, p_m_sm_id, p_m_smedi_id, p_m_pp_id};
			source = (EventParameterReference_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);

				return source;
			}
		}
		// there is no instance matching the id
		EventParameterReference_c new_inst = new EventParameterReference_c(
				modelRoot, p_m_value_id, p_m_sm_id, p_m_smedi_id, p_m_pp_id);
		return new_inst;
	}
	public EventParameterReference_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smedi_id = IdAssigner.NULL_UUID;
		m_pp_id = IdAssigner.NULL_UUID;
		Object[] key = {m_value_id, m_sm_id, m_smedi_id, m_pp_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id, m_sm_id, m_smedi_id, m_pp_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof EventParameterReference_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof EventParameterReference_c)) {
			return false;
		}

		EventParameterReference_c me = (EventParameterReference_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
						.equals(((EventParameterReference_c) elem)
								.getValue_id())) && this != elem)) {
			return false;
		}
		if (!getValue_id().equals(
				((EventParameterReference_c) elem).getValue_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((EventParameterReference_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((EventParameterReference_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmedi_id()) || IdAssigner.NULL_UUID
						.equals(((EventParameterReference_c) elem)
								.getSmedi_id())) && this != elem)) {
			return false;
		}
		if (!getSmedi_id().equals(
				((EventParameterReference_c) elem).getSmedi_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getPp_id()) || IdAssigner.NULL_UUID
						.equals(((EventParameterReference_c) elem).getPp_id())) && this != elem)) {
			return false;
		}
		if (!getPp_id().equals(((EventParameterReference_c) elem).getPp_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof EventParameterReference_c)) {
			return false;
		}

		EventParameterReference_c me = (EventParameterReference_c) elem;
		if (!getValue_idCachedValue().equals(
				((EventParameterReference_c) elem).getValue_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((EventParameterReference_c) elem).getSm_idCachedValue()))
			return false;
		if (!getSmedi_idCachedValue().equals(
				((EventParameterReference_c) elem).getSmedi_idCachedValue()))
			return false;
		if (!getPp_idCachedValue().equals(
				((EventParameterReference_c) elem).getPp_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smedi_id;
	private java.util.UUID m_pp_id;

	// declare association references from this class

	// referring navigation

	EventDatumValue_c EventDatumValue;
	public void relateAcrossR834To(EventDatumValue_c target) {
		relateAcrossR834To(target, true);
	}
	public void relateAcrossR834To(EventDatumValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == EventDatumValue)
			return; // already related

		if (EventDatumValue != target) {

			Object oldKey = getInstanceKey();

			if (EventDatumValue != null) {

				EventDatumValue.clearBackPointerR834To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"EventParameterReference_c.relateAcrossR834To(EventDatumValue_c target)",
									"Relate performed across R834 from Event Parameter Reference to Event Datum Value without unrelate of prior instance.");
				}
			}

			EventDatumValue = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR834To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR834From(EventDatumValue_c target) {
		unrelateAcrossR834From(target, true);
	}
	public void unrelateAcrossR834From(EventDatumValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (EventDatumValue == null)
			return; // already unrelated

		if (target != EventDatumValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R834",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR834To(this);
		}

		if (EventDatumValue != null) {

			m_value_id = EventDatumValue.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_value_id)) {
				m_value_id = EventDatumValue.getValue_idCachedValue();
			}
			EventDatumValue = null;
			target.removeRef();
		}
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			EventDatumValue_c[] targets) {
		return getOneV_EPROnR834(targets, null);
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			EventDatumValue_c[] targets, ClassQueryInterface_c test) {
		EventParameterReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_EPROnR834(targets[i], test);
			}
		}

		return ret_val;
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			EventDatumValue_c target) {
		return getOneV_EPROnR834(target, null);
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			EventDatumValue_c target, boolean loadComponent) {
		return getOneV_EPROnR834(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			EventDatumValue_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_EPROnR834(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			ModelRoot modelRoot, EventDatumValue_c target,
			ClassQueryInterface_c test) {
		return getOneV_EPROnR834(modelRoot, target, test, true);
	}

	public static EventParameterReference_c getOneV_EPROnR834(
			ModelRoot modelRoot, EventDatumValue_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_EPROnR834(modelRoot, target, test);
	}
	private static EventParameterReference_c find_getOneV_EPROnR834(
			ModelRoot modelRoot, EventDatumValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_EventParameterReference_R834) {
				for (int i = 0; i < target.backPointer_EventParameterReference_R834
						.size(); ++i) {
					EventParameterReference_c source = (EventParameterReference_c) target.backPointer_EventParameterReference_R834
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c[] targets) {
		return getManyV_EPRsOnR834(targets, null);
	}
	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c[] targets, boolean loadComponent) {
		return getManyV_EPRsOnR834(targets, null, loadComponent);
	}
	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c[] targets, ClassQueryInterface_c test) {
		return getManyV_EPRsOnR834(targets, test, true);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new EventParameterReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_EventParameterReference_R834) {
				for (int j = 0; j < targets[i].backPointer_EventParameterReference_R834
						.size(); ++j) {
					EventParameterReference_c source = (EventParameterReference_c) targets[i].backPointer_EventParameterReference_R834
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventParameterReference_c[0];
		}
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c target) {
		return getManyV_EPRsOnR834(target, null);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c target, boolean loadComponent) {
		return getManyV_EPRsOnR834(target, null, loadComponent);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c target, ClassQueryInterface_c test) {
		return getManyV_EPRsOnR834(target, test, true);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR834(
			EventDatumValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new EventParameterReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_EventParameterReference_R834) {
			for (int i = 0; i < target.backPointer_EventParameterReference_R834
					.size(); ++i) {
				EventParameterReference_c source = (EventParameterReference_c) target.backPointer_EventParameterReference_R834
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventParameterReference_c[0];
		}
	}

	// referring navigation

	StateMachineEventDataItem_c StateMachineEventDataItem;
	public void relateAcrossR846To(StateMachineEventDataItem_c target) {
		relateAcrossR846To(target, true);
	}
	public void relateAcrossR846To(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == StateMachineEventDataItem)
			return; // already related

		if (StateMachineEventDataItem != target) {

			Object oldKey = getInstanceKey();

			if (StateMachineEventDataItem != null) {

				StateMachineEventDataItem.clearBackPointerR846To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"EventParameterReference_c.relateAcrossR846To(StateMachineEventDataItem_c target)",
									"Relate performed across R846 from Event Parameter Reference to State Machine Event Data Item without unrelate of prior instance.");
				}
			}

			StateMachineEventDataItem = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			m_smedi_id = target.getSmedi_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR846To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR846From(StateMachineEventDataItem_c target) {
		unrelateAcrossR846From(target, true);
	}
	public void unrelateAcrossR846From(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (StateMachineEventDataItem == null)
			return; // already unrelated

		if (target != StateMachineEventDataItem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R846",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR846To(this);
		}

		if (StateMachineEventDataItem != null) {

			m_sm_id = StateMachineEventDataItem.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = StateMachineEventDataItem.getSm_idCachedValue();
			}
			m_smedi_id = StateMachineEventDataItem.getSmedi_id();
			StateMachineEventDataItem = null;
			target.removeRef();
		}
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			StateMachineEventDataItem_c[] targets) {
		return getOneV_EPROnR846(targets, null);
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		EventParameterReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_EPROnR846(targets[i], test);
			}
		}

		return ret_val;
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			StateMachineEventDataItem_c target) {
		return getOneV_EPROnR846(target, null);
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getOneV_EPROnR846(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_EPROnR846(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			ModelRoot modelRoot, StateMachineEventDataItem_c target,
			ClassQueryInterface_c test) {
		return getOneV_EPROnR846(modelRoot, target, test, true);
	}

	public static EventParameterReference_c getOneV_EPROnR846(
			ModelRoot modelRoot, StateMachineEventDataItem_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_EPROnR846(modelRoot, target, test);
	}
	private static EventParameterReference_c find_getOneV_EPROnR846(
			ModelRoot modelRoot, StateMachineEventDataItem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_EventParameterReference_R846) {
				for (int i = 0; i < target.backPointer_EventParameterReference_R846
						.size(); ++i) {
					EventParameterReference_c source = (EventParameterReference_c) target.backPointer_EventParameterReference_R846
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c[] targets) {
		return getManyV_EPRsOnR846(targets, null);
	}
	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c[] targets, boolean loadComponent) {
		return getManyV_EPRsOnR846(targets, null, loadComponent);
	}
	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		return getManyV_EPRsOnR846(targets, test, true);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new EventParameterReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_EventParameterReference_R846) {
				for (int j = 0; j < targets[i].backPointer_EventParameterReference_R846
						.size(); ++j) {
					EventParameterReference_c source = (EventParameterReference_c) targets[i].backPointer_EventParameterReference_R846
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventParameterReference_c[0];
		}
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c target) {
		return getManyV_EPRsOnR846(target, null);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getManyV_EPRsOnR846(target, null, loadComponent);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		return getManyV_EPRsOnR846(target, test, true);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR846(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new EventParameterReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_EventParameterReference_R846) {
			for (int i = 0; i < target.backPointer_EventParameterReference_R846
					.size(); ++i) {
				EventParameterReference_c source = (EventParameterReference_c) target.backPointer_EventParameterReference_R846
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventParameterReference_c[0];
		}
	}

	// referring navigation

	PropertyParameter_c PropertyParameter;
	public void relateAcrossR847To(PropertyParameter_c target) {
		relateAcrossR847To(target, true);
	}
	public void relateAcrossR847To(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == PropertyParameter)
			return; // already related

		if (PropertyParameter != target) {

			Object oldKey = getInstanceKey();

			if (PropertyParameter != null) {

				PropertyParameter.clearBackPointerR847To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"EventParameterReference_c.relateAcrossR847To(PropertyParameter_c target)",
									"Relate performed across R847 from Event Parameter Reference to Property Parameter without unrelate of prior instance.");
				}
			}

			PropertyParameter = target;
			m_pp_id = target.getPp_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR847To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR847From(PropertyParameter_c target) {
		unrelateAcrossR847From(target, true);
	}
	public void unrelateAcrossR847From(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (PropertyParameter == null)
			return; // already unrelated

		if (target != PropertyParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R847",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR847To(this);
		}

		if (PropertyParameter != null) {

			m_pp_id = PropertyParameter.getPp_id();
			PropertyParameter = null;
			target.removeRef();
		}
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			PropertyParameter_c[] targets) {
		return getOneV_EPROnR847(targets, null);
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		EventParameterReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_EPROnR847(targets[i], test);
			}
		}

		return ret_val;
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			PropertyParameter_c target) {
		return getOneV_EPROnR847(target, null);
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			PropertyParameter_c target, boolean loadComponent) {
		return getOneV_EPROnR847(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_EPROnR847(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			ModelRoot modelRoot, PropertyParameter_c target,
			ClassQueryInterface_c test) {
		return getOneV_EPROnR847(modelRoot, target, test, true);
	}

	public static EventParameterReference_c getOneV_EPROnR847(
			ModelRoot modelRoot, PropertyParameter_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_EPROnR847(modelRoot, target, test);
	}
	private static EventParameterReference_c find_getOneV_EPROnR847(
			ModelRoot modelRoot, PropertyParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_EventParameterReference_R847) {
				for (int i = 0; i < target.backPointer_EventParameterReference_R847
						.size(); ++i) {
					EventParameterReference_c source = (EventParameterReference_c) target.backPointer_EventParameterReference_R847
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c[] targets) {
		return getManyV_EPRsOnR847(targets, null);
	}
	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c[] targets, boolean loadComponent) {
		return getManyV_EPRsOnR847(targets, null, loadComponent);
	}
	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_EPRsOnR847(targets, test, true);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new EventParameterReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_EventParameterReference_R847) {
				for (int j = 0; j < targets[i].backPointer_EventParameterReference_R847
						.size(); ++j) {
					EventParameterReference_c source = (EventParameterReference_c) targets[i].backPointer_EventParameterReference_R847
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventParameterReference_c[0];
		}
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c target) {
		return getManyV_EPRsOnR847(target, null);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c target, boolean loadComponent) {
		return getManyV_EPRsOnR847(target, null, loadComponent);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getManyV_EPRsOnR847(target, test, true);
	}

	public static EventParameterReference_c[] getManyV_EPRsOnR847(
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new EventParameterReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_EventParameterReference_R847) {
			for (int i = 0; i < target.backPointer_EventParameterReference_R847
					.size(); ++i) {
				EventParameterReference_c source = (EventParameterReference_c) target.backPointer_EventParameterReference_R847
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventParameterReference_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (EventDatumValue == null) {
			// R834
			EventDatumValue_c relInst38241 = (EventDatumValue_c) baseRoot
					.getInstanceList(EventDatumValue_c.class).get(
							new Object[]{m_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38241 == null) {
				relInst38241 = (EventDatumValue_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(EventDatumValue_c.class)
						.get(new Object[]{m_value_id});
			}
			if (relInst38241 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38241 = (EventDatumValue_c) roots[i]
							.getInstanceList(EventDatumValue_c.class).get(
									new Object[]{m_value_id});
					if (relInst38241 != null)
						break;
				}
			}
			//synchronized
			if (relInst38241 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38241) && !isProxy())) {
					relInst38241.relateAcrossR834To(this, notifyChanges);
				}
			}
		}

		if (StateMachineEventDataItem == null) {
			// R846
			StateMachineEventDataItem_c relInst38242 = (StateMachineEventDataItem_c) baseRoot
					.getInstanceList(StateMachineEventDataItem_c.class).get(
							new Object[]{m_sm_id, m_smedi_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38242 == null) {
				relInst38242 = (StateMachineEventDataItem_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StateMachineEventDataItem_c.class)
						.get(new Object[]{m_sm_id, m_smedi_id});
			}
			if (relInst38242 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38242 = (StateMachineEventDataItem_c) roots[i]
							.getInstanceList(StateMachineEventDataItem_c.class)
							.get(new Object[]{m_sm_id, m_smedi_id});
					if (relInst38242 != null)
						break;
				}
			}
			//synchronized
			if (relInst38242 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38242) && !isProxy())) {
					relInst38242.relateAcrossR846To(this, notifyChanges);
				}
			}
		}

		if (PropertyParameter == null) {
			// R847
			PropertyParameter_c relInst38243 = (PropertyParameter_c) baseRoot
					.getInstanceList(PropertyParameter_c.class).get(
							new Object[]{m_pp_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38243 == null) {
				relInst38243 = (PropertyParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(PropertyParameter_c.class)
						.get(new Object[]{m_pp_id});
			}
			if (relInst38243 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38243 = (PropertyParameter_c) roots[i]
							.getInstanceList(PropertyParameter_c.class).get(
									new Object[]{m_pp_id});
					if (relInst38243 != null)
						break;
				}
			}
			//synchronized
			if (relInst38243 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38243) && !isProxy())) {
					relInst38243.relateAcrossR847To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R834
		// V_EDV
		inst = EventDatumValue;
		unrelateAcrossR834From(EventDatumValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R846
		// SM_EVTDI
		inst = StateMachineEventDataItem;
		unrelateAcrossR846From(StateMachineEventDataItem, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R847
		// C_PP
		inst = PropertyParameter;
		unrelateAcrossR847From(PropertyParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(EventParameterReference_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final EventParameterReference_c inst = (EventParameterReference_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static EventParameterReference_c EventParameterReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		EventParameterReference_c result = findEventParameterReferenceInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static EventParameterReference_c findEventParameterReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				EventParameterReference_c x = (EventParameterReference_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static EventParameterReference_c EventParameterReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return EventParameterReferenceInstance(modelRoot, test, true);
	}

	public static EventParameterReference_c EventParameterReferenceInstance(
			ModelRoot modelRoot) {
		return EventParameterReferenceInstance(modelRoot, null, true);
	}

	public static EventParameterReference_c[] EventParameterReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(EventParameterReference_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				EventParameterReference_c x = (EventParameterReference_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				EventParameterReference_c[] ret_set = new EventParameterReference_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new EventParameterReference_c[0];
			}
		}
	}
	public static EventParameterReference_c[] EventParameterReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return EventParameterReferenceInstances(modelRoot, test, true);
	}
	public static EventParameterReference_c[] EventParameterReferenceInstances(
			ModelRoot modelRoot) {
		return EventParameterReferenceInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Event Parameter Reference.dispose call: ";
		EventDatumValue_c testR834Inst = EventDatumValue_c.getOneV_EDVOnR834(
				this, false);

		if (testR834Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "834 ";
		}
		StateMachineEventDataItem_c testR846Inst = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR846(this, false);

		if (testR846Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "846 ";
		}
		PropertyParameter_c testR847Inst = PropertyParameter_c
				.getOneC_PPOnR847(this, false);

		if (testR847Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "847 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Event Parameter Reference", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smedi_id")) {
			return true;
		}
		if (attributeName.equals("pp_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (EventDatumValue != null) {
			return EventDatumValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (EventDatumValue != null) {
			return EventDatumValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSm_idLongBased() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		m_sm_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSmedi_idLongBased() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSmedi_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmedi_id() {
		if (StateMachineEventDataItem != null) {
			return StateMachineEventDataItem.getSmedi_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmedi_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smedi_id))
			return m_smedi_id;
		else
			return getSmedi_id();
	}

	public void setSmedi_id(java.util.UUID newValue) {
		m_smedi_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getPp_idLongBased() {
		if (PropertyParameter != null) {
			return PropertyParameter.getPp_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPp_id() {
		if (PropertyParameter != null) {
			return PropertyParameter.getPp_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPp_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_pp_id))
			return m_pp_id;
		else
			return getPp_id();
	}

	public void setPp_id(java.util.UUID newValue) {
		m_pp_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Event Parameter Reference", //$NON-NLS-1$
						" Operation entered: Event Parameter Reference::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		EventParameterReference_c[] objs = EventParameterReference_c
				.EventParameterReferenceInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Event Parameter Reference", //$NON-NLS-1$
						" Operation entered: Event Parameter Reference::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class EventParameterReference_c_test38245_c
				implements
					ClassQueryInterface_c {
			EventParameterReference_c_test38245_c(java.util.UUID p38246,
					java.util.UUID p38247, java.util.UUID p38248,
					java.util.UUID p38249) {
				m_p38246 = p38246;
				m_p38247 = p38247;
				m_p38248 = p38248;
				m_p38249 = p38249;
			}
			private java.util.UUID m_p38246;
			private java.util.UUID m_p38247;
			private java.util.UUID m_p38248;
			private java.util.UUID m_p38249;
			public boolean evaluate(Object candidate) {
				EventParameterReference_c selected = (EventParameterReference_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38246))
						& (selected.getSm_id().equals(m_p38247))
						& (selected.getSmedi_id().equals(m_p38248))
						& (selected.getPp_id().equals(m_p38249));
				return retval;
			}
		}

		EventParameterReference_c[] objs38244 = EventParameterReference_c
				.EventParameterReferenceInstances(modelRoot,
						new EventParameterReference_c_test38245_c(
								getValue_id(), getSm_id(), getSmedi_id(),
								getPp_id()));

		if (((objs38244.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Event Parameter Reference", //$NON-NLS-1$
								"Consistency: Object: Event Parameter Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38244.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Parameter Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38244.length), e);
			}
			retval = false;

		}

		if (((objs38244.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Event Parameter Reference", //$NON-NLS-1$
								"Consistency: Object: Event Parameter Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38244.length)
										+ " Value_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable" + " PP_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Parameter Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38244.length)
										+ " Value_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable" + " PP_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Event Parameter Reference is a referring class in association: rel.Numb = 834
		// The participating class is: Event Datum Value
		class EventDatumValue_c_test38253_c implements ClassQueryInterface_c {
			EventDatumValue_c_test38253_c(java.util.UUID p38254) {
				m_p38254 = p38254;
			}
			private java.util.UUID m_p38254;
			public boolean evaluate(Object candidate) {
				EventDatumValue_c selected = (EventDatumValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38254));
				return retval;
			}
		}

		EventDatumValue_c[] objs38252 = EventDatumValue_c
				.EventDatumValueInstances(modelRoot,
						new EventDatumValue_c_test38253_c(getValue_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38252.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Event Parameter Reference", //$NON-NLS-1$
								"Consistency: Object: Event Parameter Reference: Association: 834: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38252.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Parameter Reference: Association: 834: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38252.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Event Parameter Reference is a referring class in association: rel.Numb = 846
		// The participating class is: State Machine Event Data Item
		class StateMachineEventDataItem_c_test38256_c
				implements
					ClassQueryInterface_c {
			StateMachineEventDataItem_c_test38256_c(java.util.UUID p38257,
					java.util.UUID p38258) {
				m_p38257 = p38257;
				m_p38258 = p38258;
			}
			private java.util.UUID m_p38257;
			private java.util.UUID m_p38258;
			public boolean evaluate(Object candidate) {
				StateMachineEventDataItem_c selected = (StateMachineEventDataItem_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p38257))
						& (selected.getSmedi_id().equals(m_p38258));
				return retval;
			}
		}

		StateMachineEventDataItem_c[] objs38255 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstances(modelRoot,
						new StateMachineEventDataItem_c_test38256_c(getSm_id(),
								getSmedi_id()));

		if (((objs38255.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Event Parameter Reference", //$NON-NLS-1$
								"Consistency: Object: Event Parameter Reference: Association: 846: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38255.length)
										+ " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Parameter Reference: Association: 846: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38255.length)
										+ " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Event Parameter Reference is a referring class in association: rel.Numb = 847
		// The participating class is: Property Parameter
		class PropertyParameter_c_test38260_c implements ClassQueryInterface_c {
			PropertyParameter_c_test38260_c(java.util.UUID p38261) {
				m_p38261 = p38261;
			}
			private java.util.UUID m_p38261;
			public boolean evaluate(Object candidate) {
				PropertyParameter_c selected = (PropertyParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getPp_id().equals(m_p38261));
				return retval;
			}
		}

		PropertyParameter_c[] objs38259 = PropertyParameter_c
				.PropertyParameterInstances(modelRoot,
						new PropertyParameter_c_test38260_c(getPp_id()));

		if (((objs38259.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Event Parameter Reference", //$NON-NLS-1$
								"Consistency: Object: Event Parameter Reference: Association: 847: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38259.length)
										+ " PP_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Parameter Reference: Association: 847: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38259.length)
										+ " PP_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Parameter Reference",
				" Operation entered: EventParameterReference::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		EventDatumValue_c v_evtDataVal = EventDatumValue_c
				.getOneV_EDVOnR834(this);

		if ((v_evtDataVal != null)) {

			this.unrelateAcrossR834From(v_evtDataVal);

		}

		StateMachineEventDataItem_c v_evtdi = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR846(this);

		if ((v_evtdi != null)) {

			this.unrelateAcrossR846From(v_evtdi);

		}

		PropertyParameter_c v_propParm = PropertyParameter_c
				.getOneC_PPOnR847(this);

		if ((v_propParm != null)) {

			this.unrelateAcrossR847From(v_propParm);

		}

		delete();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Event Parameter Reference
