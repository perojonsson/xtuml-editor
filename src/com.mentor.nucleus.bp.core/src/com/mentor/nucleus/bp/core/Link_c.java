package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Link_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import java.util.concurrent.locks.ReentrantLock;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LINK extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Link_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Link_c(ModelRoot modelRoot, java.util.UUID p_m_link_id,
			java.util.UUID p_m_rel_id, java.util.UUID p_m_participation_id,
			java.util.UUID p_m_formalizing_participation_id,
			java.util.UUID p_m_associator_participation_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
		//extract 28 bit value only            
		m_link_idLongBased = 0xfffffff & p_m_link_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_participation_id = IdAssigner.preprocessUUID(p_m_participation_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_formalizing_participation_id = IdAssigner
				.preprocessUUID(p_m_formalizing_participation_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_associator_participation_id = IdAssigner
				.preprocessUUID(p_m_associator_participation_id);

		setUniqueId(m_link_id);
		Object[] key = {m_link_id};
		addInstanceToMap(key);
	}
	static public Link_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_link_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_participation_id,
			java.util.UUID p_m_formalizing_participation_id,
			java.util.UUID p_m_associator_participation_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Link_c.class);
		Link_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_link_id};
			new_inst = (Link_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
				//extract 28 bit value only            
				new_inst.m_link_idLongBased = 0xfffffff & p_m_link_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_participation_id = IdAssigner
						.preprocessUUID(p_m_participation_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_formalizing_participation_id = IdAssigner
						.preprocessUUID(p_m_formalizing_participation_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_associator_participation_id = IdAssigner
						.preprocessUUID(p_m_associator_participation_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Link_c(modelRoot, p_m_link_id, p_m_rel_id,
					p_m_participation_id, p_m_formalizing_participation_id,
					p_m_associator_participation_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Link_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_link_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_participation_id,
			java.util.UUID p_m_formalizing_participation_id,
			java.util.UUID p_m_associator_participation_id) {
		InstanceList instances = modelRoot.getInstanceList(Link_c.class);
		Link_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_link_id};
			source = (Link_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_link_id = IdAssigner.preprocessUUID(p_m_link_id);
				//extract 28 bit value only            
				source.m_link_idLongBased = 0xfffffff & p_m_link_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_participation_id = IdAssigner
						.preprocessUUID(p_m_participation_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_formalizing_participation_id = IdAssigner
						.preprocessUUID(p_m_formalizing_participation_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_associator_participation_id = IdAssigner
						.preprocessUUID(p_m_associator_participation_id);

				return source;
			}
		}
		// there is no instance matching the id
		Link_c new_inst = new Link_c(modelRoot, p_m_link_id, p_m_rel_id,
				p_m_participation_id, p_m_formalizing_participation_id,
				p_m_associator_participation_id);
		return new_inst;
	}
	public Link_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_link_id = idAssigner.createUUID();
		m_rel_id = IdAssigner.NULL_UUID;
		m_participation_id = IdAssigner.NULL_UUID;
		m_formalizing_participation_id = IdAssigner.NULL_UUID;
		m_associator_participation_id = IdAssigner.NULL_UUID;
		setUniqueId(m_link_id);
		Object[] key = {m_link_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_link_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_link_id != p_newKey) {

			m_link_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Link_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Link_c)) {
			return false;
		}

		Link_c me = (Link_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getLink_id()) || IdAssigner.NULL_UUID
						.equals(((Link_c) elem).getLink_id())) && this != elem)) {
			return false;
		}
		if (!getLink_id().equals(((Link_c) elem).getLink_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Link_c)) {
			return false;
		}

		Link_c me = (Link_c) elem;
		if (!getLink_id().equals(((Link_c) elem).getLink_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_link_id;
	private long m_link_idLongBased;
	private java.util.UUID m_rel_id;
	private java.util.UUID m_participation_id;
	private java.util.UUID m_formalizing_participation_id;
	private java.util.UUID m_associator_participation_id;

	// declare association references from this class

	// referring navigation

	LinkParticipation_c HasParticipantLinkParticipation;
	public void relateAcrossR2901To(LinkParticipation_c target) {
		relateAcrossR2901To(target, true);
	}
	public void relateAcrossR2901To(LinkParticipation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasParticipantLinkParticipation)
			return; // already related

		if (HasParticipantLinkParticipation != target) {

			Object oldKey = getInstanceKey();

			if (HasParticipantLinkParticipation != null) {

				HasParticipantLinkParticipation.clearBackPointerR2901To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Link_c.relateAcrossR2901To(LinkParticipation_c target)",
									"Relate performed across R2901 from Link to Link Participation without unrelate of prior instance.");
				}
			}

			HasParticipantLinkParticipation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			m_participation_id = target.getParticipation_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2901To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2901", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2901From(LinkParticipation_c target) {
		unrelateAcrossR2901From(target, true);
	}
	public void unrelateAcrossR2901From(LinkParticipation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasParticipantLinkParticipation == null)
			return; // already unrelated

		if (target != HasParticipantLinkParticipation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2901",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2901To(this);
		}

		if (HasParticipantLinkParticipation != null) {

			m_rel_id = HasParticipantLinkParticipation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = HasParticipantLinkParticipation
						.getRel_idCachedValue();
			}
			m_participation_id = HasParticipantLinkParticipation
					.getParticipation_id();
			HasParticipantLinkParticipation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2901", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Link_c getOneI_LNKOnR2901(LinkParticipation_c[] targets) {
		return getOneI_LNKOnR2901(targets, null);
	}

	public static Link_c getOneI_LNKOnR2901(LinkParticipation_c[] targets,
			ClassQueryInterface_c test) {
		Link_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_LNKOnR2901(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Link_c getOneI_LNKOnR2901(LinkParticipation_c target) {
		return getOneI_LNKOnR2901(target, null);
	}

	public static Link_c getOneI_LNKOnR2901(LinkParticipation_c target,
			boolean loadComponent) {
		return getOneI_LNKOnR2901(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Link_c getOneI_LNKOnR2901(LinkParticipation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_LNKOnR2901(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Link_c getOneI_LNKOnR2901(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test) {
		return getOneI_LNKOnR2901(modelRoot, target, test, true);
	}

	public static Link_c getOneI_LNKOnR2901(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_LNKOnR2901(modelRoot, target, test);
	}
	private static Link_c find_getOneI_LNKOnR2901(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Link_c source = (Link_c) target.backPointer_ParticipatesInLinkParticipatesIn_R2901;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Link_c[] getManyI_LNKsOnR2901(LinkParticipation_c[] targets) {
		return getManyI_LNKsOnR2901(targets, null);
	}
	public static Link_c[] getManyI_LNKsOnR2901(LinkParticipation_c[] targets,
			boolean loadComponent) {
		return getManyI_LNKsOnR2901(targets, null, loadComponent);
	}
	public static Link_c[] getManyI_LNKsOnR2901(LinkParticipation_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LNKsOnR2901(targets, test, true);
	}

	public static Link_c[] getManyI_LNKsOnR2901(LinkParticipation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Link_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Link_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Link_c source = (Link_c) targets[i].backPointer_ParticipatesInLinkParticipatesIn_R2901;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Link_c[] ret_set = new Link_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Link_c[0];
		}
	}

	public static Link_c[] getManyI_LNKsOnR2901(LinkParticipation_c target) {
		if (target != null) {
			LinkParticipation_c[] targetArray = new LinkParticipation_c[1];
			targetArray[0] = target;
			return getManyI_LNKsOnR2901(targetArray);
		} else {
			Link_c[] result = new Link_c[0];
			return result;
		}
	}

	public static Link_c[] getManyI_LNKsOnR2901(LinkParticipation_c target,
			boolean loadComponent) {
		if (target != null) {
			LinkParticipation_c[] targetArray = new LinkParticipation_c[1];
			targetArray[0] = target;
			return getManyI_LNKsOnR2901(targetArray, loadComponent);
		} else {
			Link_c[] result = new Link_c[0];
			return result;
		}
	}

	// referring navigation

	LinkParticipation_c HasFormalizingParticipantLinkParticipation;
	public void relateAcrossR2902To(LinkParticipation_c target) {
		relateAcrossR2902To(target, true);
	}
	public void relateAcrossR2902To(LinkParticipation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasFormalizingParticipantLinkParticipation)
			return; // already related

		if (HasFormalizingParticipantLinkParticipation != target) {

			Object oldKey = getInstanceKey();

			if (HasFormalizingParticipantLinkParticipation != null) {

				HasFormalizingParticipantLinkParticipation
						.clearBackPointerR2902To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Link_c.relateAcrossR2902To(LinkParticipation_c target)",
									"Relate performed across R2902 from Link to Link Participation without unrelate of prior instance.");
				}
			}

			HasFormalizingParticipantLinkParticipation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			m_formalizing_participation_id = target.getParticipation_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2902To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2902", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2902From(LinkParticipation_c target) {
		unrelateAcrossR2902From(target, true);
	}
	public void unrelateAcrossR2902From(LinkParticipation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasFormalizingParticipantLinkParticipation == null)
			return; // already unrelated

		if (target != HasFormalizingParticipantLinkParticipation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2902",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2902To(this);
		}

		if (HasFormalizingParticipantLinkParticipation != null) {

			m_rel_id = HasFormalizingParticipantLinkParticipation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = HasFormalizingParticipantLinkParticipation
						.getRel_idCachedValue();
			}
			m_formalizing_participation_id = HasFormalizingParticipantLinkParticipation
					.getParticipation_id();
			HasFormalizingParticipantLinkParticipation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2902", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Link_c getOneI_LNKOnR2902(LinkParticipation_c[] targets) {
		return getOneI_LNKOnR2902(targets, null);
	}

	public static Link_c getOneI_LNKOnR2902(LinkParticipation_c[] targets,
			ClassQueryInterface_c test) {
		Link_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_LNKOnR2902(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Link_c getOneI_LNKOnR2902(LinkParticipation_c target) {
		return getOneI_LNKOnR2902(target, null);
	}

	public static Link_c getOneI_LNKOnR2902(LinkParticipation_c target,
			boolean loadComponent) {
		return getOneI_LNKOnR2902(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Link_c getOneI_LNKOnR2902(LinkParticipation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_LNKOnR2902(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Link_c getOneI_LNKOnR2902(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test) {
		return getOneI_LNKOnR2902(modelRoot, target, test, true);
	}

	public static Link_c getOneI_LNKOnR2902(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_LNKOnR2902(modelRoot, target, test);
	}
	private static Link_c find_getOneI_LNKOnR2902(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Link_c source = (Link_c) target.backPointer_FormalizesLinkFormalizes_R2902;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Link_c[] getManyI_LNKsOnR2902(LinkParticipation_c[] targets) {
		return getManyI_LNKsOnR2902(targets, null);
	}
	public static Link_c[] getManyI_LNKsOnR2902(LinkParticipation_c[] targets,
			boolean loadComponent) {
		return getManyI_LNKsOnR2902(targets, null, loadComponent);
	}
	public static Link_c[] getManyI_LNKsOnR2902(LinkParticipation_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LNKsOnR2902(targets, test, true);
	}

	public static Link_c[] getManyI_LNKsOnR2902(LinkParticipation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Link_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Link_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Link_c source = (Link_c) targets[i].backPointer_FormalizesLinkFormalizes_R2902;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Link_c[] ret_set = new Link_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Link_c[0];
		}
	}

	public static Link_c[] getManyI_LNKsOnR2902(LinkParticipation_c target) {
		if (target != null) {
			LinkParticipation_c[] targetArray = new LinkParticipation_c[1];
			targetArray[0] = target;
			return getManyI_LNKsOnR2902(targetArray);
		} else {
			Link_c[] result = new Link_c[0];
			return result;
		}
	}

	public static Link_c[] getManyI_LNKsOnR2902(LinkParticipation_c target,
			boolean loadComponent) {
		if (target != null) {
			LinkParticipation_c[] targetArray = new LinkParticipation_c[1];
			targetArray[0] = target;
			return getManyI_LNKsOnR2902(targetArray, loadComponent);
		} else {
			Link_c[] result = new Link_c[0];
			return result;
		}
	}

	// referring navigation

	LinkParticipation_c HasAssociatorLinkParticipation;
	public void relateAcrossR2903To(LinkParticipation_c target) {
		relateAcrossR2903To(target, true);
	}
	public void relateAcrossR2903To(LinkParticipation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasAssociatorLinkParticipation)
			return; // already related

		if (HasAssociatorLinkParticipation != target) {

			Object oldKey = getInstanceKey();

			if (HasAssociatorLinkParticipation != null) {

				HasAssociatorLinkParticipation.clearBackPointerR2903To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Link_c.relateAcrossR2903To(LinkParticipation_c target)",
									"Relate performed across R2903 from Link to Link Participation without unrelate of prior instance.");
				}
			}

			HasAssociatorLinkParticipation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			m_associator_participation_id = target.getParticipation_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2903To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2903", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2903From(LinkParticipation_c target) {
		unrelateAcrossR2903From(target, true);
	}
	public void unrelateAcrossR2903From(LinkParticipation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasAssociatorLinkParticipation == null)
			return; // already unrelated

		if (target != HasAssociatorLinkParticipation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2903",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2903To(this);
		}

		if (HasAssociatorLinkParticipation != null) {

			m_rel_id = HasAssociatorLinkParticipation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = HasAssociatorLinkParticipation
						.getRel_idCachedValue();
			}
			m_associator_participation_id = HasAssociatorLinkParticipation
					.getParticipation_id();
			HasAssociatorLinkParticipation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2903", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Link_c getOneI_LNKOnR2903(LinkParticipation_c[] targets) {
		return getOneI_LNKOnR2903(targets, null);
	}

	public static Link_c getOneI_LNKOnR2903(LinkParticipation_c[] targets,
			ClassQueryInterface_c test) {
		Link_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_LNKOnR2903(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Link_c getOneI_LNKOnR2903(LinkParticipation_c target) {
		return getOneI_LNKOnR2903(target, null);
	}

	public static Link_c getOneI_LNKOnR2903(LinkParticipation_c target,
			boolean loadComponent) {
		return getOneI_LNKOnR2903(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Link_c getOneI_LNKOnR2903(LinkParticipation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_LNKOnR2903(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Link_c getOneI_LNKOnR2903(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test) {
		return getOneI_LNKOnR2903(modelRoot, target, test, true);
	}

	public static Link_c getOneI_LNKOnR2903(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_LNKOnR2903(modelRoot, target, test);
	}
	private static Link_c find_getOneI_LNKOnR2903(ModelRoot modelRoot,
			LinkParticipation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Link_c source = (Link_c) target.backPointer_IsAssociatorForLinkIsAssociatorFor_R2903;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Link_c[] getManyI_LNKsOnR2903(LinkParticipation_c[] targets) {
		return getManyI_LNKsOnR2903(targets, null);
	}
	public static Link_c[] getManyI_LNKsOnR2903(LinkParticipation_c[] targets,
			boolean loadComponent) {
		return getManyI_LNKsOnR2903(targets, null, loadComponent);
	}
	public static Link_c[] getManyI_LNKsOnR2903(LinkParticipation_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LNKsOnR2903(targets, test, true);
	}

	public static Link_c[] getManyI_LNKsOnR2903(LinkParticipation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Link_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Link_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Link_c source = (Link_c) targets[i].backPointer_IsAssociatorForLinkIsAssociatorFor_R2903;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Link_c[] ret_set = new Link_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Link_c[0];
		}
	}

	public static Link_c[] getManyI_LNKsOnR2903(LinkParticipation_c target) {
		if (target != null) {
			LinkParticipation_c[] targetArray = new LinkParticipation_c[1];
			targetArray[0] = target;
			return getManyI_LNKsOnR2903(targetArray);
		} else {
			Link_c[] result = new Link_c[0];
			return result;
		}
	}

	public static Link_c[] getManyI_LNKsOnR2903(LinkParticipation_c target,
			boolean loadComponent) {
		if (target != null) {
			LinkParticipation_c[] targetArray = new LinkParticipation_c[1];
			targetArray[0] = target;
			return getManyI_LNKsOnR2903(targetArray, loadComponent);
		} else {
			Link_c[] result = new Link_c[0];
			return result;
		}
	}

	// referring navigation

	Association_c IsInstanceOfAssociation;
	public void relateAcrossR2904To(Association_c target) {
		relateAcrossR2904To(target, true);
	}
	public void relateAcrossR2904To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsInstanceOfAssociation)
			return; // already related

		if (IsInstanceOfAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsInstanceOfAssociation != null) {

				IsInstanceOfAssociation.clearBackPointerR2904To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Link_c.relateAcrossR2904To(Association_c target)",
									"Relate performed across R2904 from Link to Association without unrelate of prior instance.");
				}
			}

			IsInstanceOfAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2904To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2904", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2904From(Association_c target) {
		unrelateAcrossR2904From(target, true);
	}
	public void unrelateAcrossR2904From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsInstanceOfAssociation == null)
			return; // already unrelated

		if (target != IsInstanceOfAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2904",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2904To(this);
		}

		if (IsInstanceOfAssociation != null) {

			m_rel_id = IsInstanceOfAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsInstanceOfAssociation.getRel_idCachedValue();
			}
			IsInstanceOfAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2904", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Link_c getOneI_LNKOnR2904(Association_c[] targets) {
		return getOneI_LNKOnR2904(targets, null);
	}

	public static Link_c getOneI_LNKOnR2904(Association_c[] targets,
			ClassQueryInterface_c test) {
		Link_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_LNKOnR2904(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Link_c getOneI_LNKOnR2904(Association_c target) {
		return getOneI_LNKOnR2904(target, null);
	}

	public static Link_c getOneI_LNKOnR2904(Association_c target,
			boolean loadComponent) {
		return getOneI_LNKOnR2904(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Link_c getOneI_LNKOnR2904(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_LNKOnR2904(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Link_c getOneI_LNKOnR2904(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneI_LNKOnR2904(modelRoot, target, test, true);
	}

	public static Link_c getOneI_LNKOnR2904(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_LNKOnR2904(modelRoot, target, test);
	}
	private static Link_c find_getOneI_LNKOnR2904(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasInstancesLinkHasInstances_R2904) {
				for (int i = 0; i < target.backPointer_HasInstancesLinkHasInstances_R2904
						.size(); ++i) {
					Link_c source = (Link_c) target.backPointer_HasInstancesLinkHasInstances_R2904
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Link_c[] getManyI_LNKsOnR2904(Association_c[] targets) {
		return getManyI_LNKsOnR2904(targets, null);
	}
	public static Link_c[] getManyI_LNKsOnR2904(Association_c[] targets,
			boolean loadComponent) {
		return getManyI_LNKsOnR2904(targets, null, loadComponent);
	}
	public static Link_c[] getManyI_LNKsOnR2904(Association_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LNKsOnR2904(targets, test, true);
	}

	public static Link_c[] getManyI_LNKsOnR2904(Association_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Link_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Link_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasInstancesLinkHasInstances_R2904) {
				for (int j = 0; j < targets[i].backPointer_HasInstancesLinkHasInstances_R2904
						.size(); ++j) {
					Link_c source = (Link_c) targets[i].backPointer_HasInstancesLinkHasInstances_R2904
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Link_c[] ret_set = new Link_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Link_c[0];
		}
	}

	public static Link_c[] getManyI_LNKsOnR2904(Association_c target) {
		return getManyI_LNKsOnR2904(target, null);
	}

	public static Link_c[] getManyI_LNKsOnR2904(Association_c target,
			boolean loadComponent) {
		return getManyI_LNKsOnR2904(target, null, loadComponent);
	}

	public static Link_c[] getManyI_LNKsOnR2904(Association_c target,
			ClassQueryInterface_c test) {
		return getManyI_LNKsOnR2904(target, test, true);
	}

	public static Link_c[] getManyI_LNKsOnR2904(Association_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Link_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasInstancesLinkHasInstances_R2904) {
			for (int i = 0; i < target.backPointer_HasInstancesLinkHasInstances_R2904
					.size(); ++i) {
				Link_c source = (Link_c) target.backPointer_HasInstancesLinkHasInstances_R2904
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Link_c[] ret_set = new Link_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Link_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (HasParticipantLinkParticipation == null) {
			// R2901
			LinkParticipation_c relInst40826 = (LinkParticipation_c) baseRoot
					.getInstanceList(LinkParticipation_c.class).get(
							new Object[]{m_rel_id, m_participation_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40826 == null) {
				relInst40826 = (LinkParticipation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(LinkParticipation_c.class)
						.get(new Object[]{m_rel_id, m_participation_id});
			}
			if (relInst40826 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40826 = (LinkParticipation_c) roots[i]
							.getInstanceList(LinkParticipation_c.class).get(
									new Object[]{m_rel_id, m_participation_id});
					if (relInst40826 != null)
						break;
				}
			}
			//synchronized
			if (relInst40826 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40826) && !isProxy())) {
					relInst40826.relateAcrossR2901To(this, notifyChanges);
				}
			}
		}

		if (HasFormalizingParticipantLinkParticipation == null) {
			// R2902
			LinkParticipation_c relInst40827 = (LinkParticipation_c) baseRoot
					.getInstanceList(LinkParticipation_c.class).get(
							new Object[]{m_rel_id,
									m_formalizing_participation_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40827 == null) {
				relInst40827 = (LinkParticipation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(LinkParticipation_c.class)
						.get(new Object[]{m_rel_id,
								m_formalizing_participation_id});
			}
			if (relInst40827 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40827 = (LinkParticipation_c) roots[i]
							.getInstanceList(LinkParticipation_c.class).get(
									new Object[]{m_rel_id,
											m_formalizing_participation_id});
					if (relInst40827 != null)
						break;
				}
			}
			//synchronized
			if (relInst40827 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40827) && !isProxy())) {
					relInst40827.relateAcrossR2902To(this, notifyChanges);
				}
			}
		}

		if (HasAssociatorLinkParticipation == null) {
			// R2903
			LinkParticipation_c relInst40828 = (LinkParticipation_c) baseRoot
					.getInstanceList(LinkParticipation_c.class).get(
							new Object[]{m_rel_id,
									m_associator_participation_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40828 == null) {
				relInst40828 = (LinkParticipation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(LinkParticipation_c.class)
						.get(new Object[]{m_rel_id,
								m_associator_participation_id});
			}
			if (relInst40828 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40828 = (LinkParticipation_c) roots[i]
							.getInstanceList(LinkParticipation_c.class).get(
									new Object[]{m_rel_id,
											m_associator_participation_id});
					if (relInst40828 != null)
						break;
				}
			}
			//synchronized
			if (relInst40828 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40828) && !isProxy())) {
					relInst40828.relateAcrossR2903To(this, notifyChanges);
				}
			}
		}

		if (IsInstanceOfAssociation == null) {
			// R2904
			Association_c relInst40829 = (Association_c) baseRoot
					.getInstanceList(Association_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40829 == null) {
				relInst40829 = (Association_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Association_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst40829 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40829 = (Association_c) roots[i].getInstanceList(
							Association_c.class).get(new Object[]{m_rel_id});
					if (relInst40829 != null)
						break;
				}
			}
			//synchronized
			if (relInst40829 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40829) && !isProxy())) {
					relInst40829.relateAcrossR2904To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R2901
		// I_LIP
		inst = HasParticipantLinkParticipation;
		unrelateAcrossR2901From(HasParticipantLinkParticipation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2902
		// I_LIP
		inst = HasFormalizingParticipantLinkParticipation;
		unrelateAcrossR2902From(HasFormalizingParticipantLinkParticipation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2903
		// I_LIP
		inst = HasAssociatorLinkParticipation;
		unrelateAcrossR2903From(HasAssociatorLinkParticipation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2904
		// R_REL
		inst = IsInstanceOfAssociation;
		unrelateAcrossR2904From(IsInstanceOfAssociation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Link_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Link_c inst = (Link_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Link_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Link_c LinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Link_c result = findLinkInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Link_c findLinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Link_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Link_c x = (Link_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Link_c LinkInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return LinkInstance(modelRoot, test, true);
	}

	public static Link_c LinkInstance(ModelRoot modelRoot) {
		return LinkInstance(modelRoot, null, true);
	}

	public static Link_c[] LinkInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Link_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Link_c x = (Link_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Link_c[] ret_set = new Link_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Link_c[0];
			}
		}
	}
	public static Link_c[] LinkInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return LinkInstances(modelRoot, test, true);
	}
	public static Link_c[] LinkInstances(ModelRoot modelRoot) {
		return LinkInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Link.dispose call: ";
		LinkParticipation_c testR2901Inst = LinkParticipation_c
				.getOneI_LIPOnR2901(this, false);

		if (testR2901Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2901 ";
		}
		LinkParticipation_c testR2902Inst = LinkParticipation_c
				.getOneI_LIPOnR2902(this, false);

		if (testR2902Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2902 ";
		}
		LinkParticipation_c testR2903Inst = LinkParticipation_c
				.getOneI_LIPOnR2903(this, false);

		if (testR2903Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2903 ";
		}
		Association_c testR2904Inst = Association_c.getOneR_RELOnR2904(this,
				false);

		if (testR2904Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2904 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Link", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("link_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		if (attributeName.equals("participation_id")) {
			return true;
		}
		if (attributeName.equals("formalizing_participation_id")) {
			return true;
		}
		if (attributeName.equals("associator_participation_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getLink_idLongBased() {
		if (m_link_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_link_id)) {
			return 0xfffffff & m_link_id.getLeastSignificantBits();
		}
		return m_link_idLongBased;
	}
	public java.util.UUID getLink_id() {
		return m_link_id;
	}

	public void setLink_id(java.util.UUID newValue) {
		m_link_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getRel_idLongBased() {
		if (HasParticipantLinkParticipation != null) {
			return HasParticipantLinkParticipation.getRel_idLongBased();
		}
		if (IsInstanceOfAssociation != null) {
			return IsInstanceOfAssociation.getRel_idLongBased();
		}
		if (HasFormalizingParticipantLinkParticipation != null) {
			return HasFormalizingParticipantLinkParticipation
					.getRel_idLongBased();
		}
		if (HasAssociatorLinkParticipation != null) {
			return HasAssociatorLinkParticipation.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (HasParticipantLinkParticipation != null) {
			return HasParticipantLinkParticipation.getRel_id();
		}
		if (IsInstanceOfAssociation != null) {
			return IsInstanceOfAssociation.getRel_id();
		}
		if (HasFormalizingParticipantLinkParticipation != null) {
			return HasFormalizingParticipantLinkParticipation.getRel_id();
		}
		if (HasAssociatorLinkParticipation != null) {
			return HasAssociatorLinkParticipation.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public long getParticipation_idLongBased() {
		if (HasParticipantLinkParticipation != null) {
			return HasParticipantLinkParticipation
					.getParticipation_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getParticipation_id() {
		if (HasParticipantLinkParticipation != null) {
			return HasParticipantLinkParticipation.getParticipation_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getParticipation_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_participation_id))
			return m_participation_id;
		else
			return getParticipation_id();
	}

	public void setParticipation_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_participation_id)) {
				return;
			}
		} else if (m_participation_id != null) {
			if (m_participation_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Participation_id", m_participation_id, newValue, false);
		m_participation_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getFormalizing_participation_idLongBased() {
		if (HasFormalizingParticipantLinkParticipation != null) {
			return HasFormalizingParticipantLinkParticipation
					.getParticipation_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getFormalizing_participation_id() {
		if (HasFormalizingParticipantLinkParticipation != null) {
			return HasFormalizingParticipantLinkParticipation
					.getParticipation_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getFormalizing_participation_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_formalizing_participation_id))
			return m_formalizing_participation_id;
		else
			return getFormalizing_participation_id();
	}

	public void setFormalizing_participation_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_formalizing_participation_id)) {
				return;
			}
		} else if (m_formalizing_participation_id != null) {
			if (m_formalizing_participation_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Formalizing_participation_id", m_formalizing_participation_id,
				newValue, false);
		m_formalizing_participation_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getAssociator_participation_idLongBased() {
		if (HasAssociatorLinkParticipation != null) {
			return HasAssociatorLinkParticipation
					.getParticipation_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAssociator_participation_id() {
		if (HasAssociatorLinkParticipation != null) {
			return HasAssociatorLinkParticipation.getParticipation_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAssociator_participation_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_associator_participation_id))
			return m_associator_participation_id;
		else
			return getAssociator_participation_id();
	}

	public void setAssociator_participation_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_associator_participation_id)) {
				return;
			}
		} else if (m_associator_participation_id != null) {
			if (m_associator_participation_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Associator_participation_id", m_associator_participation_id,
				newValue, false);
		m_associator_participation_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Link", //$NON-NLS-1$
				" Operation entered: Link::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Link_c[] objs = Link_c.LinkInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Link", //$NON-NLS-1$
				" Operation entered: Link::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Link_c_test40831_c implements ClassQueryInterface_c {
			Link_c_test40831_c(java.util.UUID p40832) {
				m_p40832 = p40832;
			}
			private java.util.UUID m_p40832;
			public boolean evaluate(Object candidate) {
				Link_c selected = (Link_c) candidate;
				boolean retval = false;
				retval = (selected.getLink_id().equals(m_p40832));
				return retval;
			}
		}

		Link_c[] objs40830 = Link_c.LinkInstances(modelRoot,
				new Link_c_test40831_c(getLink_id()));

		if (((objs40830.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link", //$NON-NLS-1$
								"Consistency: Object: Link: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40830.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Link: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40830.length), e);
			}
			retval = false;

		}

		if (((objs40830.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.CONSISTENCY, "Link", //$NON-NLS-1$
						"Consistency: Object: Link: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs40830.length)
								+ " Link_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Link: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40830.length)
								+ " Link_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link is a referring class in association: rel.Numb = 2901
		// The participating class is: Link Participation
		class LinkParticipation_c_test40836_c implements ClassQueryInterface_c {
			LinkParticipation_c_test40836_c(java.util.UUID p40837,
					java.util.UUID p40838) {
				m_p40837 = p40837;
				m_p40838 = p40838;
			}
			private java.util.UUID m_p40837;
			private java.util.UUID m_p40838;
			public boolean evaluate(Object candidate) {
				LinkParticipation_c selected = (LinkParticipation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40837))
						& (selected.getParticipation_id().equals(m_p40838));
				return retval;
			}
		}

		LinkParticipation_c[] objs40835 = LinkParticipation_c
				.LinkParticipationInstances(modelRoot,
						new LinkParticipation_c_test40836_c(getRel_id(),
								getParticipation_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40835.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link", //$NON-NLS-1$
								"Consistency: Object: Link: Association: 2901: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40835.length)
										+ " Rel_ID: " + "Not Printable" + " Participation_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link: Association: 2901: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40835.length)
										+ " Rel_ID: " + "Not Printable" + " Participation_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link is a referring class in association: rel.Numb = 2904
		// The participating class is: Association
		class Association_c_test40840_c implements ClassQueryInterface_c {
			Association_c_test40840_c(java.util.UUID p40841) {
				m_p40841 = p40841;
			}
			private java.util.UUID m_p40841;
			public boolean evaluate(Object candidate) {
				Association_c selected = (Association_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40841));
				return retval;
			}
		}

		Association_c[] objs40839 = Association_c.AssociationInstances(
				modelRoot, new Association_c_test40840_c(getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40839.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link", //$NON-NLS-1$
								"Consistency: Object: Link: Association: 2904: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40839.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link: Association: 2904: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40839.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link is a referring class in association: rel.Numb = 2902
		// The participating class is: Link Participation
		class LinkParticipation_c_test40843_c implements ClassQueryInterface_c {
			LinkParticipation_c_test40843_c(java.util.UUID p40844,
					java.util.UUID p40845) {
				m_p40844 = p40844;
				m_p40845 = p40845;
			}
			private java.util.UUID m_p40844;
			private java.util.UUID m_p40845;
			public boolean evaluate(Object candidate) {
				LinkParticipation_c selected = (LinkParticipation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40844))
						& (selected.getParticipation_id().equals(m_p40845));
				return retval;
			}
		}

		LinkParticipation_c[] objs40842 = LinkParticipation_c
				.LinkParticipationInstances(modelRoot,
						new LinkParticipation_c_test40843_c(getRel_id(),
								getFormalizing_participation_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40842.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link", //$NON-NLS-1$
								"Consistency: Object: Link: Association: 2902: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40842.length)
										+ " Rel_ID: " + "Not Printable" + " Formalizing_Participation_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link: Association: 2902: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40842.length)
										+ " Rel_ID: " + "Not Printable" + " Formalizing_Participation_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link is a referring class in association: rel.Numb = 2903
		// The participating class is: Link Participation
		class LinkParticipation_c_test40847_c implements ClassQueryInterface_c {
			LinkParticipation_c_test40847_c(java.util.UUID p40848,
					java.util.UUID p40849) {
				m_p40848 = p40848;
				m_p40849 = p40849;
			}
			private java.util.UUID m_p40848;
			private java.util.UUID m_p40849;
			public boolean evaluate(Object candidate) {
				LinkParticipation_c selected = (LinkParticipation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40848))
						& (selected.getParticipation_id().equals(m_p40849));
				return retval;
			}
		}

		LinkParticipation_c[] objs40846 = LinkParticipation_c
				.LinkParticipationInstances(modelRoot,
						new LinkParticipation_c_test40847_c(getRel_id(),
								getAssociator_participation_id()));

		if (((objs40846.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link", //$NON-NLS-1$
								"Consistency: Object: Link: Association: 2903: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40846.length)
										+ " Rel_ID: " + "Not Printable" + " Associator_Participation_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link: Association: 2903: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40846.length)
										+ " Rel_ID: " + "Not Printable" + " Associator_Participation_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Link",
				" Operation entered: Link::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		LinkParticipation_c v_OriginInst = LinkParticipation_c
				.getOneI_LIPOnR2901(this);

		LinkParticipation_c v_DestinationInst = LinkParticipation_c
				.getOneI_LIPOnR2902(this);

		LinkParticipation_c v_AssociatorInst = LinkParticipation_c
				.getOneI_LIPOnR2903(this);

		if (((v_OriginInst != null))) {

			if (v_OriginInst != null) {
				v_OriginInst.unrelateAcrossR2901From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_OriginInst != null) {
				v_OriginInst.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (((v_DestinationInst != null))) {

			if (v_DestinationInst != null) {
				v_DestinationInst.unrelateAcrossR2902From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_DestinationInst != null) {
				v_DestinationInst.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (((v_AssociatorInst != null))) {

			if (v_AssociatorInst != null) {
				v_AssociatorInst.unrelateAcrossR2903From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_AssociatorInst != null) {
				v_AssociatorInst.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Association_c v_association = Association_c.getOneR_RELOnR2904(this);

		if (((v_association != null))) {

			if (v_association != null) {
				v_association.unrelateAcrossR2904From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Link
