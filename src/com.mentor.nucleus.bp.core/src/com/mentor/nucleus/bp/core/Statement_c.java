package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Statement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_STATEMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Statement_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Statement_c(ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_block_id,
			java.util.UUID p_m_previous_statement_id, int p_m_linenumber,
			int p_m_startposition, String p_m_label) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//extract 28 bit value only            
		m_statement_idLongBased = 0xfffffff & p_m_statement_id
				.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_previous_statement_id = IdAssigner
				.preprocessUUID(p_m_previous_statement_id);
		m_linenumber = p_m_linenumber;
		m_startposition = p_m_startposition;
		m_label = p_m_label;

		setUniqueId(m_statement_id);
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public Statement_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			java.util.UUID p_m_previous_statement_id, int p_m_linenumber,
			int p_m_startposition, String p_m_label, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);
		Statement_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (Statement_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//extract 28 bit value only            
				new_inst.m_statement_idLongBased = 0xfffffff & p_m_statement_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_previous_statement_id = IdAssigner
						.preprocessUUID(p_m_previous_statement_id);
				new_inst.m_linenumber = p_m_linenumber;
				new_inst.m_startposition = p_m_startposition;
				new_inst.m_label = p_m_label;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Statement_c(modelRoot, p_m_statement_id,
					p_m_block_id, p_m_previous_statement_id, p_m_linenumber,
					p_m_startposition, p_m_label);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Statement_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			java.util.UUID p_m_previous_statement_id, int p_m_linenumber,
			int p_m_startposition, String p_m_label) {
		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);
		Statement_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (Statement_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//extract 28 bit value only            
				source.m_statement_idLongBased = 0xfffffff & p_m_statement_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_previous_statement_id = IdAssigner
						.preprocessUUID(p_m_previous_statement_id);
				source.m_linenumber = p_m_linenumber;
				source.m_startposition = p_m_startposition;
				source.m_label = p_m_label;

				return source;
			}
		}
		// there is no instance matching the id
		Statement_c new_inst = new Statement_c(modelRoot, p_m_statement_id,
				p_m_block_id, p_m_previous_statement_id, p_m_linenumber,
				p_m_startposition, p_m_label);
		return new_inst;
	}
	public Statement_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = idAssigner.createUUID();
		m_block_id = IdAssigner.NULL_UUID;
		m_previous_statement_id = IdAssigner.NULL_UUID;
		m_linenumber = -1;
		m_startposition = -1;
		m_label = "";
		setUniqueId(m_statement_id);
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Statement_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Statement_c)) {
			return false;
		}

		Statement_c me = (Statement_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((Statement_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(((Statement_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Statement_c)) {
			return false;
		}

		Statement_c me = (Statement_c) elem;
		if (!getStatement_id().equals(((Statement_c) elem).getStatement_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private long m_statement_idLongBased;
	private java.util.UUID m_block_id;
	private java.util.UUID m_previous_statement_id;
	private int m_linenumber;
	private int m_startposition;
	private String m_label;

	// declare association references from this class

	// referring navigation

	Statement_c SucceedsStatement;
	public void relateAcrossR661ToSucceeds(Statement_c target) {
		relateAcrossR661ToSucceeds(target, true);
	}
	public void relateAcrossR661ToSucceeds(Statement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SucceedsStatement)
			return; // already related

		if (SucceedsStatement != target) {

			Object oldKey = getInstanceKey();

			if (SucceedsStatement != null) {

				SucceedsStatement.clearBackPointerR661ToPrecedes(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Statement_c.relateAcrossR661ToSucceeds(Statement_c target)",
									"Relate performed across R661 from Statement to Statement without unrelate of prior instance.");
				}
			}

			SucceedsStatement = target;
			if (IdAssigner.NULL_UUID.equals(target.getBlock_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_block_id = target.getBlock_idCachedValue();
			}
			m_previous_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR661ToPrecedes(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR661FromSucceeds(Statement_c target) {
		unrelateAcrossR661FromSucceeds(target, true);
	}
	public void unrelateAcrossR661FromSucceeds(Statement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SucceedsStatement == null)
			return; // already unrelated

		if (target != SucceedsStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R661",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR661ToPrecedes(this);
		}

		if (SucceedsStatement != null) {

			m_block_id = SucceedsStatement.getBlock_id();
			if (IdAssigner.NULL_UUID.equals(m_block_id)) {
				m_block_id = SucceedsStatement.getBlock_idCachedValue();
			}
			m_previous_statement_id = SucceedsStatement.getStatement_id();
			SucceedsStatement = null;
			target.removeRef();
		}
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(Statement_c[] targets) {
		return getOneACT_SMTOnR661Precedes(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(
			Statement_c[] targets, ClassQueryInterface_c test) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SMTOnR661Precedes(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(Statement_c target) {
		return getOneACT_SMTOnR661Precedes(target, null);
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(Statement_c target,
			boolean loadComponent) {
		return getOneACT_SMTOnR661Precedes(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SMTOnR661Precedes(target.getModelRoot(), target,
					test);
		}
		return null;
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR661Precedes(modelRoot, target, test, true);
	}

	public static Statement_c getOneACT_SMTOnR661Precedes(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_SMTOnR661Precedes(modelRoot, target, test);
	}
	private static Statement_c find_getOneACT_SMTOnR661Precedes(
			ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Statement_c source = (Statement_c) target.backPointer_PrecedesStatementPrecedes_R661;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Statement_c[] getManyACT_SMTsOnR661Precedes(
			Statement_c[] targets) {
		return getManyACT_SMTsOnR661Precedes(targets, null);
	}
	public static Statement_c[] getManyACT_SMTsOnR661Precedes(
			Statement_c[] targets, boolean loadComponent) {
		return getManyACT_SMTsOnR661Precedes(targets, null, loadComponent);
	}
	public static Statement_c[] getManyACT_SMTsOnR661Precedes(
			Statement_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR661Precedes(targets, test, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR661Precedes(
			Statement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Statement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Statement_c source = (Statement_c) targets[i].backPointer_PrecedesStatementPrecedes_R661;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Statement_c[] ret_set = new Statement_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Statement_c[0];
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR661Precedes(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR661Precedes(targetArray);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR661Precedes(
			Statement_c target, boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR661Precedes(targetArray, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}
	}

	// referring navigation

	Block_c ContainsBlock;
	public void relateAcrossR602To(Block_c target) {
		relateAcrossR602To(target, true);
	}
	public void relateAcrossR602To(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainsBlock)
			return; // already related

		if (ContainsBlock != target) {

			Object oldKey = getInstanceKey();

			if (ContainsBlock != null) {

				ContainsBlock.clearBackPointerR602To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Statement_c.relateAcrossR602To(Block_c target)",
									"Relate performed across R602 from Statement to Block without unrelate of prior instance.");
				}
			}

			ContainsBlock = target;
			m_block_id = target.getBlock_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR602To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR602From(Block_c target) {
		unrelateAcrossR602From(target, true);
	}
	public void unrelateAcrossR602From(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainsBlock == null)
			return; // already unrelated

		if (target != ContainsBlock) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R602",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR602To(this);
		}

		if (ContainsBlock != null) {

			m_block_id = ContainsBlock.getBlock_id();
			ContainsBlock = null;
			target.removeRef();
		}
	}

	public static Statement_c getOneACT_SMTOnR602(Block_c[] targets) {
		return getOneACT_SMTOnR602(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR602(Block_c[] targets,
			ClassQueryInterface_c test) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_SMTOnR602(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR602(Block_c target) {
		return getOneACT_SMTOnR602(target, null);
	}

	public static Statement_c getOneACT_SMTOnR602(Block_c target,
			boolean loadComponent) {
		return getOneACT_SMTOnR602(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Statement_c getOneACT_SMTOnR602(Block_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_SMTOnR602(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Statement_c getOneACT_SMTOnR602(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR602(modelRoot, target, test, true);
	}

	public static Statement_c getOneACT_SMTOnR602(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_SMTOnR602(modelRoot, target, test);
	}
	private static Statement_c find_getOneACT_SMTOnR602(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainedByStatementContainedBy_R602) {
				for (int i = 0; i < target.backPointer_ContainedByStatementContainedBy_R602
						.size(); ++i) {
					Statement_c source = (Statement_c) target.backPointer_ContainedByStatementContainedBy_R602
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Statement_c[] getManyACT_SMTsOnR602(Block_c[] targets) {
		return getManyACT_SMTsOnR602(targets, null);
	}
	public static Statement_c[] getManyACT_SMTsOnR602(Block_c[] targets,
			boolean loadComponent) {
		return getManyACT_SMTsOnR602(targets, null, loadComponent);
	}
	public static Statement_c[] getManyACT_SMTsOnR602(Block_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR602(targets, test, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR602(Block_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Statement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainedByStatementContainedBy_R602) {
				for (int j = 0; j < targets[i].backPointer_ContainedByStatementContainedBy_R602
						.size(); ++j) {
					Statement_c source = (Statement_c) targets[i].backPointer_ContainedByStatementContainedBy_R602
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Statement_c[] ret_set = new Statement_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Statement_c[0];
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR602(Block_c target) {
		return getManyACT_SMTsOnR602(target, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR602(Block_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR602(target, null, loadComponent);
	}

	public static Statement_c[] getManyACT_SMTsOnR602(Block_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR602(target, test, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR602(Block_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Statement_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainedByStatementContainedBy_R602) {
			for (int i = 0; i < target.backPointer_ContainedByStatementContainedBy_R602
					.size(); ++i) {
				Statement_c source = (Statement_c) target.backPointer_ContainedByStatementContainedBy_R602
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Statement_c[] ret_set = new Statement_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Statement_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	GeneratePreexistingEvent_c backPointer_IsSubtypeGeneratePreexistingEventIsSubtype_R603;

	public void setGeneratePreexistingEventOrderInChildListR603(
			GeneratePreexistingEvent_c target, int index) {
		unrelateAcrossR603From(target);
		GeneratePreexistingEvent_c[] elements = GeneratePreexistingEvent_c
				.getManyE_GPRsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((GeneratePreexistingEvent_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((GeneratePreexistingEvent_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(GeneratePreexistingEvent_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(GeneratePreexistingEvent_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(GeneratePreexistingEvent_c target) {
		backPointer_IsSubtypeGeneratePreexistingEventIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(GeneratePreexistingEvent_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(GeneratePreexistingEvent_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(GeneratePreexistingEvent_c target) {
		if (target == backPointer_IsSubtypeGeneratePreexistingEventIsSubtype_R603) {
			backPointer_IsSubtypeGeneratePreexistingEventIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(
			GeneratePreexistingEvent_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			GeneratePreexistingEvent_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			GeneratePreexistingEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(
			GeneratePreexistingEvent_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(
			GeneratePreexistingEvent_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			GeneratePreexistingEvent_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(GeneratePreexistingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			GeneratePreexistingEvent_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			GeneratePreexistingEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			GeneratePreexistingEvent_c[] targetArray = new GeneratePreexistingEvent_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			GeneratePreexistingEvent_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			GeneratePreexistingEvent_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			GeneratePreexistingEvent_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	ForStmt_c backPointer_IsSubtypeForStmtIsSubtype_R603;

	public void setForStmtOrderInChildListR603(ForStmt_c target, int index) {
		unrelateAcrossR603From(target);
		ForStmt_c[] elements = ForStmt_c.getManyACT_FORsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((ForStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((ForStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(ForStmt_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(ForStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(ForStmt_c target) {
		backPointer_IsSubtypeForStmtIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(ForStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(ForStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(ForStmt_c target) {
		if (target == backPointer_IsSubtypeForStmtIsSubtype_R603) {
			backPointer_IsSubtypeForStmtIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(ForStmt_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(ForStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(ForStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(ForStmt_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(ForStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ForStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(ForStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(ForStmt_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ForStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ForStmt_c[] targetArray = new ForStmt_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(ForStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ForStmt_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ForStmt_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	WhileStmt_c backPointer_IsSubtypeWhileStmtIsSubtype_R603;

	public void setWhileStmtOrderInChildListR603(WhileStmt_c target, int index) {
		unrelateAcrossR603From(target);
		WhileStmt_c[] elements = WhileStmt_c.getManyACT_WHLsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((WhileStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((WhileStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(WhileStmt_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(WhileStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(WhileStmt_c target) {
		backPointer_IsSubtypeWhileStmtIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(WhileStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(WhileStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(WhileStmt_c target) {
		if (target == backPointer_IsSubtypeWhileStmtIsSubtype_R603) {
			backPointer_IsSubtypeWhileStmtIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(WhileStmt_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(WhileStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(WhileStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(WhileStmt_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(WhileStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(WhileStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(WhileStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(WhileStmt_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(WhileStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			WhileStmt_c[] targetArray = new WhileStmt_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(WhileStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(WhileStmt_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(WhileStmt_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	IfStmt_c backPointer_IsSubtypeIfStmtIsSubtype_R603;

	public void setIfStmtOrderInChildListR603(IfStmt_c target, int index) {
		unrelateAcrossR603From(target);
		IfStmt_c[] elements = IfStmt_c.getManyACT_IFsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((IfStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((IfStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(IfStmt_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(IfStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(IfStmt_c target) {
		backPointer_IsSubtypeIfStmtIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(IfStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(IfStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(IfStmt_c target) {
		if (target == backPointer_IsSubtypeIfStmtIsSubtype_R603) {
			backPointer_IsSubtypeIfStmtIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(IfStmt_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(IfStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(IfStmt_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(IfStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(IfStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(IfStmt_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(IfStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			IfStmt_c[] targetArray = new IfStmt_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(IfStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(IfStmt_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(IfStmt_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	ElseifStmt_c backPointer_IsSubtypeElseifStmtIsSubtype_R603;

	public void setElseifStmtOrderInChildListR603(ElseifStmt_c target, int index) {
		unrelateAcrossR603From(target);
		ElseifStmt_c[] elements = ElseifStmt_c.getManyACT_ELsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((ElseifStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((ElseifStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(ElseifStmt_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(ElseifStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(ElseifStmt_c target) {
		backPointer_IsSubtypeElseifStmtIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(ElseifStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(ElseifStmt_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(ElseifStmt_c target) {
		if (target == backPointer_IsSubtypeElseifStmtIsSubtype_R603) {
			backPointer_IsSubtypeElseifStmtIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(ElseifStmt_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(ElseifStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(ElseifStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(ElseifStmt_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(ElseifStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseifStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(ElseifStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(ElseifStmt_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseifStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ElseifStmt_c[] targetArray = new ElseifStmt_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseifStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseifStmt_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseifStmt_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	ElseStmt_c backPointer_IsSubtypeElseStmtIsSubtype_R603;

	public void setElseStmtOrderInChildListR603(ElseStmt_c target, int index) {
		unrelateAcrossR603From(target);
		ElseStmt_c[] elements = ElseStmt_c.getManyACT_EsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((ElseStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((ElseStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(ElseStmt_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(ElseStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(ElseStmt_c target) {
		backPointer_IsSubtypeElseStmtIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(ElseStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(ElseStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(ElseStmt_c target) {
		if (target == backPointer_IsSubtypeElseStmtIsSubtype_R603) {
			backPointer_IsSubtypeElseStmtIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(ElseStmt_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(ElseStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(ElseStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(ElseStmt_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(ElseStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(ElseStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(ElseStmt_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ElseStmt_c[] targetArray = new ElseStmt_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseStmt_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ElseStmt_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	BridgeInvocation_c backPointer_IsSubtypeBridgeInvocationIsSubtype_R603;

	public void setBridgeInvocationOrderInChildListR603(
			BridgeInvocation_c target, int index) {
		unrelateAcrossR603From(target);
		BridgeInvocation_c[] elements = BridgeInvocation_c
				.getManyACT_BRGsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((BridgeInvocation_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((BridgeInvocation_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(BridgeInvocation_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(BridgeInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(BridgeInvocation_c target) {
		backPointer_IsSubtypeBridgeInvocationIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(BridgeInvocation_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(BridgeInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(BridgeInvocation_c target) {
		if (target == backPointer_IsSubtypeBridgeInvocationIsSubtype_R603) {
			backPointer_IsSubtypeBridgeInvocationIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(BridgeInvocation_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(BridgeInvocation_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(BridgeInvocation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(BridgeInvocation_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(BridgeInvocation_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			BridgeInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(BridgeInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			BridgeInvocation_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			BridgeInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			BridgeInvocation_c[] targetArray = new BridgeInvocation_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			BridgeInvocation_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(BridgeInvocation_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			BridgeInvocation_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	FunctionInvocation_c backPointer_IsSubtypeFunctionInvocationIsSubtype_R603;

	public void setFunctionInvocationOrderInChildListR603(
			FunctionInvocation_c target, int index) {
		unrelateAcrossR603From(target);
		FunctionInvocation_c[] elements = FunctionInvocation_c
				.getManyACT_FNCsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((FunctionInvocation_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((FunctionInvocation_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(FunctionInvocation_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(FunctionInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(FunctionInvocation_c target) {
		backPointer_IsSubtypeFunctionInvocationIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(FunctionInvocation_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(FunctionInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(FunctionInvocation_c target) {
		if (target == backPointer_IsSubtypeFunctionInvocationIsSubtype_R603) {
			backPointer_IsSubtypeFunctionInvocationIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(FunctionInvocation_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			FunctionInvocation_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			FunctionInvocation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(FunctionInvocation_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(FunctionInvocation_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			FunctionInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(FunctionInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			FunctionInvocation_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			FunctionInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			FunctionInvocation_c[] targetArray = new FunctionInvocation_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			FunctionInvocation_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			FunctionInvocation_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			FunctionInvocation_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	ReturnStmt_c backPointer_IsSubtypeReturnStmtIsSubtype_R603;

	public void setReturnStmtOrderInChildListR603(ReturnStmt_c target, int index) {
		unrelateAcrossR603From(target);
		ReturnStmt_c[] elements = ReturnStmt_c.getManyACT_RETsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((ReturnStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((ReturnStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(ReturnStmt_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(ReturnStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(ReturnStmt_c target) {
		backPointer_IsSubtypeReturnStmtIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(ReturnStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(ReturnStmt_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(ReturnStmt_c target) {
		if (target == backPointer_IsSubtypeReturnStmtIsSubtype_R603) {
			backPointer_IsSubtypeReturnStmtIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(ReturnStmt_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(ReturnStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(ReturnStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(ReturnStmt_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(ReturnStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ReturnStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(ReturnStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(ReturnStmt_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ReturnStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ReturnStmt_c[] targetArray = new ReturnStmt_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(ReturnStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ReturnStmt_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(ReturnStmt_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	OperationInvocation_c backPointer_IsSubtypeOperationInvocationIsSubtype_R603;

	public void setOperationInvocationOrderInChildListR603(
			OperationInvocation_c target, int index) {
		unrelateAcrossR603From(target);
		OperationInvocation_c[] elements = OperationInvocation_c
				.getManyACT_TFMsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((OperationInvocation_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((OperationInvocation_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(OperationInvocation_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(OperationInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(OperationInvocation_c target) {
		backPointer_IsSubtypeOperationInvocationIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(OperationInvocation_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(OperationInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(OperationInvocation_c target) {
		if (target == backPointer_IsSubtypeOperationInvocationIsSubtype_R603) {
			backPointer_IsSubtypeOperationInvocationIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(
			OperationInvocation_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			OperationInvocation_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			OperationInvocation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(OperationInvocation_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(OperationInvocation_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			OperationInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(OperationInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			OperationInvocation_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			OperationInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			OperationInvocation_c[] targetArray = new OperationInvocation_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			OperationInvocation_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			OperationInvocation_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			OperationInvocation_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	AssignToMember_c backPointer_IsSubtypeAssignToMemberIsSubtype_R603;

	public void setAssignToMemberOrderInChildListR603(AssignToMember_c target,
			int index) {
		unrelateAcrossR603From(target);
		AssignToMember_c[] elements = AssignToMember_c
				.getManyACT_AIsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((AssignToMember_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((AssignToMember_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(AssignToMember_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(AssignToMember_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(AssignToMember_c target) {
		backPointer_IsSubtypeAssignToMemberIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(AssignToMember_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(AssignToMember_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(AssignToMember_c target) {
		if (target == backPointer_IsSubtypeAssignToMemberIsSubtype_R603) {
			backPointer_IsSubtypeAssignToMemberIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(AssignToMember_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(AssignToMember_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(AssignToMember_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(AssignToMember_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(AssignToMember_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			AssignToMember_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(AssignToMember_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(AssignToMember_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(AssignToMember_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			AssignToMember_c[] targetArray = new AssignToMember_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(AssignToMember_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(AssignToMember_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(AssignToMember_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Delete_c backPointer_IsSubtypeDeleteIsSubtype_R603;

	public void setDeleteOrderInChildListR603(Delete_c target, int index) {
		unrelateAcrossR603From(target);
		Delete_c[] elements = Delete_c.getManyACT_DELsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Delete_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Delete_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Delete_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Delete_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Delete_c target) {
		backPointer_IsSubtypeDeleteIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Delete_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Delete_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Delete_c target) {
		if (target == backPointer_IsSubtypeDeleteIsSubtype_R603) {
			backPointer_IsSubtypeDeleteIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Delete_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Delete_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Delete_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Delete_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Delete_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Delete_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Delete_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Delete_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Delete_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Delete_c[] targetArray = new Delete_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Delete_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Delete_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Delete_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	CreateNoVariable_c backPointer_IsSubtypeCreateNoVariableIsSubtype_R603;

	public void setCreateNoVariableOrderInChildListR603(
			CreateNoVariable_c target, int index) {
		unrelateAcrossR603From(target);
		CreateNoVariable_c[] elements = CreateNoVariable_c
				.getManyACT_CNVsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((CreateNoVariable_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((CreateNoVariable_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(CreateNoVariable_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(CreateNoVariable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(CreateNoVariable_c target) {
		backPointer_IsSubtypeCreateNoVariableIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(CreateNoVariable_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(CreateNoVariable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(CreateNoVariable_c target) {
		if (target == backPointer_IsSubtypeCreateNoVariableIsSubtype_R603) {
			backPointer_IsSubtypeCreateNoVariableIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(CreateNoVariable_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(CreateNoVariable_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(CreateNoVariable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(CreateNoVariable_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(CreateNoVariable_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			CreateNoVariable_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(CreateNoVariable_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			CreateNoVariable_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			CreateNoVariable_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			CreateNoVariable_c[] targetArray = new CreateNoVariable_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			CreateNoVariable_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(CreateNoVariable_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			CreateNoVariable_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Create_c backPointer_IsSubtypeCreateIsSubtype_R603;

	public void setCreateOrderInChildListR603(Create_c target, int index) {
		unrelateAcrossR603From(target);
		Create_c[] elements = Create_c.getManyACT_CRsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Create_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Create_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Create_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Create_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Create_c target) {
		backPointer_IsSubtypeCreateIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Create_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Create_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Create_c target) {
		if (target == backPointer_IsSubtypeCreateIsSubtype_R603) {
			backPointer_IsSubtypeCreateIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Create_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Create_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Create_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Create_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Create_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Create_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Create_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Create_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Create_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Create_c[] targetArray = new Create_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Create_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Create_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Create_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Select_c backPointer_IsSubtypeSelectIsSubtype_R603;

	public void setSelectOrderInChildListR603(Select_c target, int index) {
		unrelateAcrossR603From(target);
		Select_c[] elements = Select_c.getManyACT_SELsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Select_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Select_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Select_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Select_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Select_c target) {
		backPointer_IsSubtypeSelectIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Select_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Select_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Select_c target) {
		if (target == backPointer_IsSubtypeSelectIsSubtype_R603) {
			backPointer_IsSubtypeSelectIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Select_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Select_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Select_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Select_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Select_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Select_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Select_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Select_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Select_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Select_c[] targetArray = new Select_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Select_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Select_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Select_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	SelectFromInstances_c backPointer_IsSubtypeSelectFromInstancesIsSubtype_R603;

	public void setSelectFromInstancesOrderInChildListR603(
			SelectFromInstances_c target, int index) {
		unrelateAcrossR603From(target);
		SelectFromInstances_c[] elements = SelectFromInstances_c
				.getManyACT_FIOsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((SelectFromInstances_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((SelectFromInstances_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(SelectFromInstances_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(SelectFromInstances_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(SelectFromInstances_c target) {
		backPointer_IsSubtypeSelectFromInstancesIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(SelectFromInstances_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(SelectFromInstances_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(SelectFromInstances_c target) {
		if (target == backPointer_IsSubtypeSelectFromInstancesIsSubtype_R603) {
			backPointer_IsSubtypeSelectFromInstancesIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstances_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstances_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstances_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(SelectFromInstances_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(SelectFromInstances_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstances_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(SelectFromInstances_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstances_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstances_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SelectFromInstances_c[] targetArray = new SelectFromInstances_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstances_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstances_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstances_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	SelectFromInstancesWhere_c backPointer_IsSubtypeSelectFromInstancesWhereIsSubtype_R603;

	public void setSelectFromInstancesWhereOrderInChildListR603(
			SelectFromInstancesWhere_c target, int index) {
		unrelateAcrossR603From(target);
		SelectFromInstancesWhere_c[] elements = SelectFromInstancesWhere_c
				.getManyACT_FIWsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((SelectFromInstancesWhere_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((SelectFromInstancesWhere_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(SelectFromInstancesWhere_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(SelectFromInstancesWhere_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(SelectFromInstancesWhere_c target) {
		backPointer_IsSubtypeSelectFromInstancesWhereIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(SelectFromInstancesWhere_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(SelectFromInstancesWhere_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(SelectFromInstancesWhere_c target) {
		if (target == backPointer_IsSubtypeSelectFromInstancesWhereIsSubtype_R603) {
			backPointer_IsSubtypeSelectFromInstancesWhereIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstancesWhere_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstancesWhere_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstancesWhere_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstancesWhere_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(
			SelectFromInstancesWhere_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstancesWhere_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(SelectFromInstancesWhere_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstancesWhere_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstancesWhere_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SelectFromInstancesWhere_c[] targetArray = new SelectFromInstancesWhere_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstancesWhere_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstancesWhere_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SelectFromInstancesWhere_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	UnrelateUsing_c backPointer_IsSubtypeUnrelateUsingIsSubtype_R603;

	public void setUnrelateUsingOrderInChildListR603(UnrelateUsing_c target,
			int index) {
		unrelateAcrossR603From(target);
		UnrelateUsing_c[] elements = UnrelateUsing_c
				.getManyACT_URUsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((UnrelateUsing_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((UnrelateUsing_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(UnrelateUsing_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(UnrelateUsing_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(UnrelateUsing_c target) {
		backPointer_IsSubtypeUnrelateUsingIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(UnrelateUsing_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(UnrelateUsing_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(UnrelateUsing_c target) {
		if (target == backPointer_IsSubtypeUnrelateUsingIsSubtype_R603) {
			backPointer_IsSubtypeUnrelateUsingIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(UnrelateUsing_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(UnrelateUsing_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(UnrelateUsing_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(UnrelateUsing_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(UnrelateUsing_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			UnrelateUsing_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(UnrelateUsing_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(UnrelateUsing_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			UnrelateUsing_c[] targetArray = new UnrelateUsing_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(UnrelateUsing_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(UnrelateUsing_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(UnrelateUsing_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Unrelate_c backPointer_IsSubtypeUnrelateIsSubtype_R603;

	public void setUnrelateOrderInChildListR603(Unrelate_c target, int index) {
		unrelateAcrossR603From(target);
		Unrelate_c[] elements = Unrelate_c.getManyACT_UNRsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Unrelate_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Unrelate_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Unrelate_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Unrelate_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Unrelate_c target) {
		backPointer_IsSubtypeUnrelateIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Unrelate_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Unrelate_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Unrelate_c target) {
		if (target == backPointer_IsSubtypeUnrelateIsSubtype_R603) {
			backPointer_IsSubtypeUnrelateIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Unrelate_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Unrelate_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Unrelate_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Unrelate_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Unrelate_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Unrelate_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Unrelate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Unrelate_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Unrelate_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Unrelate_c[] targetArray = new Unrelate_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Unrelate_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Unrelate_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Unrelate_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	RelateUsing_c backPointer_IsSubtypeRelateUsingIsSubtype_R603;

	public void setRelateUsingOrderInChildListR603(RelateUsing_c target,
			int index) {
		unrelateAcrossR603From(target);
		RelateUsing_c[] elements = RelateUsing_c.getManyACT_RUsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((RelateUsing_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((RelateUsing_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(RelateUsing_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(RelateUsing_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(RelateUsing_c target) {
		backPointer_IsSubtypeRelateUsingIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(RelateUsing_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(RelateUsing_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(RelateUsing_c target) {
		if (target == backPointer_IsSubtypeRelateUsingIsSubtype_R603) {
			backPointer_IsSubtypeRelateUsingIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(RelateUsing_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(RelateUsing_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(RelateUsing_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(RelateUsing_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(RelateUsing_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(RelateUsing_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(RelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(RelateUsing_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(RelateUsing_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			RelateUsing_c[] targetArray = new RelateUsing_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(RelateUsing_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(RelateUsing_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(RelateUsing_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Relate_c backPointer_IsSubtypeRelateIsSubtype_R603;

	public void setRelateOrderInChildListR603(Relate_c target, int index) {
		unrelateAcrossR603From(target);
		Relate_c[] elements = Relate_c.getManyACT_RELsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Relate_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Relate_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Relate_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Relate_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Relate_c target) {
		backPointer_IsSubtypeRelateIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Relate_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Relate_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Relate_c target) {
		if (target == backPointer_IsSubtypeRelateIsSubtype_R603) {
			backPointer_IsSubtypeRelateIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Relate_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Relate_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Relate_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Relate_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Relate_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Relate_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Relate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Relate_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Relate_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Relate_c[] targetArray = new Relate_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Relate_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Relate_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Relate_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Control_c backPointer_IsSubtypeControlIsSubtype_R603;

	public void setControlOrderInChildListR603(Control_c target, int index) {
		unrelateAcrossR603From(target);
		Control_c[] elements = Control_c.getManyACT_CTLsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Control_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Control_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Control_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Control_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Control_c target) {
		backPointer_IsSubtypeControlIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Control_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Control_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Control_c target) {
		if (target == backPointer_IsSubtypeControlIsSubtype_R603) {
			backPointer_IsSubtypeControlIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Control_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Control_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Control_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Control_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Control_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Control_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Control_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Control_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Control_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Control_c[] targetArray = new Control_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Control_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Control_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Control_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Break_c backPointer_IsSubtypeBreakIsSubtype_R603;

	public void setBreakOrderInChildListR603(Break_c target, int index) {
		unrelateAcrossR603From(target);
		Break_c[] elements = Break_c.getManyACT_BRKsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Break_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Break_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Break_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Break_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Break_c target) {
		backPointer_IsSubtypeBreakIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Break_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Break_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Break_c target) {
		if (target == backPointer_IsSubtypeBreakIsSubtype_R603) {
			backPointer_IsSubtypeBreakIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Break_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Break_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Break_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Break_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Break_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Break_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Break_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Break_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Break_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Break_c[] targetArray = new Break_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Break_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Break_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Break_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Continue_c backPointer_IsSubtypeContinueIsSubtype_R603;

	public void setContinueOrderInChildListR603(Continue_c target, int index) {
		unrelateAcrossR603From(target);
		Continue_c[] elements = Continue_c.getManyACT_CONsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((Continue_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((Continue_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(Continue_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(Continue_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(Continue_c target) {
		backPointer_IsSubtypeContinueIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(Continue_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(Continue_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(Continue_c target) {
		if (target == backPointer_IsSubtypeContinueIsSubtype_R603) {
			backPointer_IsSubtypeContinueIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(Continue_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(Continue_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(Continue_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(Continue_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(Continue_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Continue_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(Continue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(Continue_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Continue_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Continue_c[] targetArray = new Continue_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(Continue_c target,
			ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Continue_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(Continue_c target,
			boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	EventSpecificationStatement_c backPointer_IsSubtypeEventSpecificationStatementIsSubtype_R603;

	public void setEventSpecificationStatementOrderInChildListR603(
			EventSpecificationStatement_c target, int index) {
		unrelateAcrossR603From(target);
		EventSpecificationStatement_c[] elements = EventSpecificationStatement_c
				.getManyE_ESSsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((EventSpecificationStatement_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((EventSpecificationStatement_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(EventSpecificationStatement_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(EventSpecificationStatement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(EventSpecificationStatement_c target) {
		backPointer_IsSubtypeEventSpecificationStatementIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(EventSpecificationStatement_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(EventSpecificationStatement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(EventSpecificationStatement_c target) {
		if (target == backPointer_IsSubtypeEventSpecificationStatementIsSubtype_R603) {
			backPointer_IsSubtypeEventSpecificationStatementIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(
			EventSpecificationStatement_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			EventSpecificationStatement_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			EventSpecificationStatement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(
			EventSpecificationStatement_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(
			EventSpecificationStatement_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			EventSpecificationStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(EventSpecificationStatement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			EventSpecificationStatement_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			EventSpecificationStatement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			EventSpecificationStatement_c[] targetArray = new EventSpecificationStatement_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			EventSpecificationStatement_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			EventSpecificationStatement_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			EventSpecificationStatement_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	InterfaceOperationInvocation_c backPointer_IsSubtypeInterfaceOperationInvocationIsSubtype_R603;

	public void setInterfaceOperationInvocationOrderInChildListR603(
			InterfaceOperationInvocation_c target, int index) {
		unrelateAcrossR603From(target);
		InterfaceOperationInvocation_c[] elements = InterfaceOperationInvocation_c
				.getManyACT_IOPsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((InterfaceOperationInvocation_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((InterfaceOperationInvocation_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(InterfaceOperationInvocation_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(InterfaceOperationInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(InterfaceOperationInvocation_c target) {
		backPointer_IsSubtypeInterfaceOperationInvocationIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(InterfaceOperationInvocation_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(InterfaceOperationInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(InterfaceOperationInvocation_c target) {
		if (target == backPointer_IsSubtypeInterfaceOperationInvocationIsSubtype_R603) {
			backPointer_IsSubtypeInterfaceOperationInvocationIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(
			InterfaceOperationInvocation_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(
			InterfaceOperationInvocation_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(
			InterfaceOperationInvocation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(
			InterfaceOperationInvocation_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(
			InterfaceOperationInvocation_c target, boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			InterfaceOperationInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(InterfaceOperationInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			InterfaceOperationInvocation_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			InterfaceOperationInvocation_c[] targetArray = new InterfaceOperationInvocation_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			InterfaceOperationInvocation_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			InterfaceOperationInvocation_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	SignalInvocation_c backPointer_IsSubtypeSignalInvocationIsSubtype_R603;

	public void setSignalInvocationOrderInChildListR603(
			SignalInvocation_c target, int index) {
		unrelateAcrossR603From(target);
		SignalInvocation_c[] elements = SignalInvocation_c
				.getManyACT_SGNsOnR603(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR603From((SignalInvocation_c) elements[i]);
			}
			count++;
		}
		relateAcrossR603To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR603To((SignalInvocation_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR603To(SignalInvocation_c target) {
		if (target != null) {
			target.relateAcrossR603To(this, true);
		}
	}

	public void relateAcrossR603To(SignalInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR603To(this, notifyChanges);
		}
	}

	public void setBackPointerR603To(SignalInvocation_c target) {
		backPointer_IsSubtypeSignalInvocationIsSubtype_R603 = target;
	}

	public void unrelateAcrossR603From(SignalInvocation_c target) {
		if (target != null) {
			target.unrelateAcrossR603From(this, true);
		}
	}

	public void unrelateAcrossR603From(SignalInvocation_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR603From(this, notifyChanges);
		}
	}

	public void clearBackPointerR603To(SignalInvocation_c target) {
		if (target == backPointer_IsSubtypeSignalInvocationIsSubtype_R603) {
			backPointer_IsSubtypeSignalInvocationIsSubtype_R603 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR603(SignalInvocation_c[] targets) {
		return getOneACT_SMTOnR603(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR603(SignalInvocation_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_SMTOnR603(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR603(SignalInvocation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR603(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR603(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR603(SignalInvocation_c target) {
		return getOneACT_SMTOnR603(target, true);
	}
	public static Statement_c getOneACT_SMTOnR603(SignalInvocation_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.IsSupertypeStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SignalInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR603(SignalInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].IsSupertypeStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR603(
			SignalInvocation_c[] targets) {
		return getManyACT_SMTsOnR603(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SignalInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SignalInvocation_c[] targetArray = new SignalInvocation_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR603(targetArray, test, loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SignalInvocation_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(SignalInvocation_c target) {
		return getManyACT_SMTsOnR603(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR603(
			SignalInvocation_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR603(target, null, loadComponent);
	}

	// referred to navigation

	Statement_c backPointer_PrecedesStatementPrecedes_R661;

	public void setStatementOrderInChildListR661(Statement_c target, int index) {
		unrelateAcrossR661FromPrecedes(target);
		Statement_c[] elements = Statement_c
				.getManyACT_SMTsOnR661Precedes(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR661FromPrecedes((Statement_c) elements[i]);
			}
			count++;
		}
		relateAcrossR661ToPrecedes(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR661ToPrecedes((Statement_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR661ToPrecedes(Statement_c target) {
		if (target != null) {
			target.relateAcrossR661ToSucceeds(this, true);
		}
	}

	public void relateAcrossR661ToPrecedes(Statement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR661ToSucceeds(this, notifyChanges);
		}
	}

	public void setBackPointerR661ToPrecedes(Statement_c target) {
		backPointer_PrecedesStatementPrecedes_R661 = target;
	}

	public void unrelateAcrossR661FromPrecedes(Statement_c target) {
		if (target != null) {
			target.unrelateAcrossR661FromSucceeds(this, true);
		}
	}

	public void unrelateAcrossR661FromPrecedes(Statement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR661FromSucceeds(this, notifyChanges);
		}
	}

	public void clearBackPointerR661ToPrecedes(Statement_c target) {
		if (target == backPointer_PrecedesStatementPrecedes_R661) {
			backPointer_PrecedesStatementPrecedes_R661 = null;
		}
	}

	public static Statement_c getOneACT_SMTOnR661Succeeds(Statement_c[] targets) {
		return getOneACT_SMTOnR661Succeeds(targets, null);
	}

	public static Statement_c getOneACT_SMTOnR661Succeeds(
			Statement_c[] targets, ClassQueryInterface_c test) {
		return getOneACT_SMTOnR661Succeeds(targets, test, true);
	}

	public static Statement_c getOneACT_SMTOnR661Succeeds(
			Statement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		Statement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Statement_c candidate_val = getOneACT_SMTOnR661Succeeds(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_SMTOnR661Succeeds(targets[i],
							loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Statement_c getOneACT_SMTOnR661Succeeds(Statement_c target) {
		return getOneACT_SMTOnR661Succeeds(target, true);
	}
	public static Statement_c getOneACT_SMTOnR661Succeeds(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.SucceedsStatement;
		} else {
			return null;
		}
	}

	public static Statement_c[] getManyACT_SMTsOnR661Succeeds(
			Statement_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR661Succeeds(targets, test, true);
	}

	public static Statement_c [] getManyACT_SMTsOnR661Succeeds(Statement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Statement_c[0];
  
  
  LinkedHashSet<Statement_c> elementsSet = new LinkedHashSet<Statement_c>();
  for (int i = 0; i < targets.length; i++) {
    Statement_c associate = targets[i].SucceedsStatement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Statement_c[] result = new Statement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Statement_c[] getManyACT_SMTsOnR661Succeeds(
			Statement_c[] targets) {
		return getManyACT_SMTsOnR661Succeeds(targets, null);
	}

	public static Statement_c[] getManyACT_SMTsOnR661Succeeds(
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_SMTsOnR661Succeeds(targetArray, test,
					loadComponent);
		} else {
			Statement_c[] result = new Statement_c[0];
			return result;
		}

	}

	public static Statement_c[] getManyACT_SMTsOnR661Succeeds(
			Statement_c target, ClassQueryInterface_c test) {
		return getManyACT_SMTsOnR661Succeeds(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR661Succeeds(Statement_c target) {
		return getManyACT_SMTsOnR661Succeeds(target, null, true);
	}

	public static Statement_c[] getManyACT_SMTsOnR661Succeeds(
			Statement_c target, boolean loadComponent) {
		return getManyACT_SMTsOnR661Succeeds(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (SucceedsStatement == null) {          
      // R661
	  instances = baseRoot.getInstanceList(Statement_c.class);
      Statement_c relInst57654 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           Statement_c source = (Statement_c)cursor.next() ;
           if (     source.getStatement_id().equals(m_previous_statement_id) && 
     source.getBlock_idCachedValue().equals(m_block_id) 		){
  		relInst57654 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst57654 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57654) && !isProxy())) {
	      relInst57654.relateAcrossR661ToPrecedes(this, notifyChanges);
	  }
	  }
	}
	          

	if (ContainsBlock == null) {          
      // R602
      Block_c relInst57655 = (Block_c) baseRoot.getInstanceList(Block_c.class).get(new Object[] {m_block_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57655 == null) {
      			relInst57655 = (Block_c) Ooaofooa.getDefaultInstance().getInstanceList(Block_c.class).get(new Object[] {m_block_id});
      		}
			if (relInst57655 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57655 = (Block_c) roots[i].getInstanceList(Block_c.class).get(new Object[] {m_block_id});
					if (relInst57655 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57655 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57655) && !isProxy())) {
	      relInst57655.relateAcrossR602To(this, notifyChanges);
	  }
	  }
	}
	          
	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R661
		// ACT_SMT
		inst = SucceedsStatement;
		unrelateAcrossR661FromSucceeds(SucceedsStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R602
		// ACT_BLK
		inst = ContainsBlock;
		unrelateAcrossR602From(ContainsBlock, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Statement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Statement_c inst = (Statement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Statement_c StatementInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Statement_c result = findStatementInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static Statement_c findStatementInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Statement_c x = (Statement_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Statement_c StatementInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return StatementInstance(modelRoot, test, true);
	}

	public static Statement_c StatementInstance(ModelRoot modelRoot) {
		return StatementInstance(modelRoot, null, true);
	}

	public static Statement_c[] StatementInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Statement_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Statement_c x = (Statement_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Statement_c[] ret_set = new Statement_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Statement_c[0];
			}
		}
	}
	public static Statement_c[] StatementInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return StatementInstances(modelRoot, test, true);
	}
	public static Statement_c[] StatementInstances(ModelRoot modelRoot) {
		return StatementInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Statement.dispose call: ";
		GeneratePreexistingEvent_c testR603Inst1 = GeneratePreexistingEvent_c
				.getOneE_GPROnR603(this, false);

		if (testR603Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		ForStmt_c testR603Inst2 = ForStmt_c.getOneACT_FOROnR603(this, false);

		if (testR603Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		WhileStmt_c testR603Inst3 = WhileStmt_c
				.getOneACT_WHLOnR603(this, false);

		if (testR603Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		IfStmt_c testR603Inst4 = IfStmt_c.getOneACT_IFOnR603(this, false);

		if (testR603Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		ElseifStmt_c testR603Inst5 = ElseifStmt_c.getOneACT_ELOnR603(this,
				false);

		if (testR603Inst5 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		ElseStmt_c testR603Inst6 = ElseStmt_c.getOneACT_EOnR603(this, false);

		if (testR603Inst6 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		BridgeInvocation_c testR603Inst7 = BridgeInvocation_c
				.getOneACT_BRGOnR603(this, false);

		if (testR603Inst7 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		FunctionInvocation_c testR603Inst8 = FunctionInvocation_c
				.getOneACT_FNCOnR603(this, false);

		if (testR603Inst8 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		ReturnStmt_c testR603Inst9 = ReturnStmt_c.getOneACT_RETOnR603(this,
				false);

		if (testR603Inst9 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		OperationInvocation_c testR603Inst10 = OperationInvocation_c
				.getOneACT_TFMOnR603(this, false);

		if (testR603Inst10 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		AssignToMember_c testR603Inst11 = AssignToMember_c.getOneACT_AIOnR603(
				this, false);

		if (testR603Inst11 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Delete_c testR603Inst12 = Delete_c.getOneACT_DELOnR603(this, false);

		if (testR603Inst12 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		CreateNoVariable_c testR603Inst13 = CreateNoVariable_c
				.getOneACT_CNVOnR603(this, false);

		if (testR603Inst13 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Create_c testR603Inst14 = Create_c.getOneACT_CROnR603(this, false);

		if (testR603Inst14 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Select_c testR603Inst15 = Select_c.getOneACT_SELOnR603(this, false);

		if (testR603Inst15 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		SelectFromInstances_c testR603Inst16 = SelectFromInstances_c
				.getOneACT_FIOOnR603(this, false);

		if (testR603Inst16 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		SelectFromInstancesWhere_c testR603Inst17 = SelectFromInstancesWhere_c
				.getOneACT_FIWOnR603(this, false);

		if (testR603Inst17 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		UnrelateUsing_c testR603Inst18 = UnrelateUsing_c.getOneACT_URUOnR603(
				this, false);

		if (testR603Inst18 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Unrelate_c testR603Inst19 = Unrelate_c.getOneACT_UNROnR603(this, false);

		if (testR603Inst19 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		RelateUsing_c testR603Inst20 = RelateUsing_c.getOneACT_RUOnR603(this,
				false);

		if (testR603Inst20 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Relate_c testR603Inst21 = Relate_c.getOneACT_RELOnR603(this, false);

		if (testR603Inst21 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Control_c testR603Inst22 = Control_c.getOneACT_CTLOnR603(this, false);

		if (testR603Inst22 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Break_c testR603Inst23 = Break_c.getOneACT_BRKOnR603(this, false);

		if (testR603Inst23 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Continue_c testR603Inst24 = Continue_c.getOneACT_CONOnR603(this, false);

		if (testR603Inst24 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		EventSpecificationStatement_c testR603Inst25 = EventSpecificationStatement_c
				.getOneE_ESSOnR603(this, false);

		if (testR603Inst25 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		InterfaceOperationInvocation_c testR603Inst26 = InterfaceOperationInvocation_c
				.getOneACT_IOPOnR603(this, false);

		if (testR603Inst26 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		SignalInvocation_c testR603Inst27 = SignalInvocation_c
				.getOneACT_SGNOnR603(this, false);

		if (testR603Inst27 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Statement_c testR661Inst = Statement_c.getOneACT_SMTOnR661Precedes(
				this, false);

		if (testR661Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "661 ";
		}
		testR661Inst = Statement_c.getOneACT_SMTOnR661Succeeds(this, false);

		if (testR661Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "661 ";
		}
		Block_c testR602Inst = Block_c.getOneACT_BLKOnR602(this, false);

		if (testR602Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "602 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Statement", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("block_id")) {
			return true;
		}
		if (attributeName.equals("previous_statement_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (m_statement_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_statement_id)) {
			return 0xfffffff & m_statement_id.getLeastSignificantBits();
		}
		return m_statement_idLongBased;
	}
	public java.util.UUID getStatement_id() {
		return m_statement_id;
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getBlock_idLongBased() {
		if (ContainsBlock != null) {
			return ContainsBlock.getBlock_idLongBased();
		}
		if (SucceedsStatement != null) {
			return SucceedsStatement.getBlock_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBlock_id() {
		if (ContainsBlock != null) {
			return ContainsBlock.getBlock_id();
		}
		if (SucceedsStatement != null) {
			return SucceedsStatement.getBlock_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBlock_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_block_id))
			return m_block_id;
		else
			return getBlock_id();
	}

	public long getPrevious_statement_idLongBased() {
		if (SucceedsStatement != null) {
			return SucceedsStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPrevious_statement_id() {
		if (SucceedsStatement != null) {
			return SucceedsStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPrevious_statement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_previous_statement_id))
			return m_previous_statement_id;
		else
			return getPrevious_statement_id();
	}

	public void setPrevious_statement_id(java.util.UUID newValue) {
		m_previous_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getLinenumber() {
		return m_linenumber;
	}

	public void setLinenumber(int newValue) {
		m_linenumber = newValue;
	}
	public int getStartposition() {
		return m_startposition;
	}

	public void setStartposition(int newValue) {
		m_startposition = newValue;
	}
	public String getLabel() {
		ModelRoot modelRoot = getModelRoot();
		Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c
				.getOneACT_BLKOnR602(this));

		String v_result = "Unknown Activity";

		if (((v_body != null))) {

			v_result = v_body.getLabel();

		}

		return v_result + " line: " + Gd_c.Int_to_string(getLinenumber());

	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement", //$NON-NLS-1$
				" Operation entered: Statement::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Statement_c[] objs = Statement_c.StatementInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement", //$NON-NLS-1$
				" Operation entered: Statement::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Statement_c_test57657_c implements ClassQueryInterface_c {
			Statement_c_test57657_c(java.util.UUID p57658, java.util.UUID p57659) {
				m_p57658 = p57658;
				m_p57659 = p57659;
			}
			private java.util.UUID m_p57658;
			private java.util.UUID m_p57659;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57658))
						& (selected.getBlock_id().equals(m_p57659));
				return retval;
			}
		}

		Statement_c[] objs57656 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57657_c(getStatement_id(), getBlock_id()));

		if (((objs57656.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57656.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs57656.length), e);
			}
			retval = false;

		}

		if (((objs57656.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57656.length)
										+ " Statement_ID: " + "Not Printable" + " Block_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57656.length)
										+ " Statement_ID: " + "Not Printable" + " Block_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		class Statement_c_test57661_c implements ClassQueryInterface_c {
			Statement_c_test57661_c(java.util.UUID p57662) {
				m_p57662 = p57662;
			}
			private java.util.UUID m_p57662;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57662));
				return retval;
			}
		}

		Statement_c[] objs57660 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57661_c(getStatement_id()));

		if (((objs57660.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57660.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Statement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs57660.length), e);
			}
			retval = false;

		}

		if (((objs57660.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57660.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Statement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57660.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Statement is a referring class in association: rel.Numb = 602
		// The participating class is: Block
		class Block_c_test57665_c implements ClassQueryInterface_c {
			Block_c_test57665_c(java.util.UUID p57666) {
				m_p57666 = p57666;
			}
			private java.util.UUID m_p57666;
			public boolean evaluate(Object candidate) {
				Block_c selected = (Block_c) candidate;
				boolean retval = false;
				retval = (selected.getBlock_id().equals(m_p57666));
				return retval;
			}
		}

		Block_c[] objs57664 = Block_c.BlockInstances(modelRoot,
				new Block_c_test57665_c(getBlock_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57664.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Association: 602: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57664.length)
										+ " Block_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Statement: Association: 602: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57664.length)
										+ " Block_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Statement is a referring class in association: rel.Numb = 661
		// The participating class is: Statement
		class Statement_c_test57668_c implements ClassQueryInterface_c {
			Statement_c_test57668_c(java.util.UUID p57669, java.util.UUID p57670) {
				m_p57669 = p57669;
				m_p57670 = p57670;
			}
			private java.util.UUID m_p57669;
			private java.util.UUID m_p57670;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getBlock_id().equals(m_p57669))
						& (selected.getStatement_id().equals(m_p57670));
				return retval;
			}
		}

		Statement_c[] objs57667 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57668_c(getBlock_id(),
						getPrevious_statement_id()));

		if (((objs57667.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Association: 661: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57667.length)
										+ " Block_ID: " + "Not Printable" + " Previous_Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Statement: Association: 661: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57667.length)
										+ " Block_ID: " + "Not Printable" + " Previous_Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Statement is a participating class in association: rel.Numb = 661
		// Object: Statement
		class Statement_c_test57672_c implements ClassQueryInterface_c {
			Statement_c_test57672_c(java.util.UUID p57673, java.util.UUID p57674) {
				m_p57673 = p57673;
				m_p57674 = p57674;
			}
			private java.util.UUID m_p57673;
			private java.util.UUID m_p57674;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getPrevious_statement_id().equals(m_p57673))
						& (selected.getBlock_id().equals(m_p57674));
				return retval;
			}
		}

		Statement_c[] objs57671 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57672_c(getStatement_id(), getBlock_id()));

		if (((objs57671.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Association: 661: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57671.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Statement: Association: 661: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57671.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 603
		int objs57675 = 0;
		// Subtype Object: Generate Preexisting Event
		class GeneratePreexistingEvent_c_test57676_c
				implements
					ClassQueryInterface_c {
			GeneratePreexistingEvent_c_test57676_c(java.util.UUID p57677) {
				m_p57677 = p57677;
			}
			private java.util.UUID m_p57677;
			public boolean evaluate(Object candidate) {
				GeneratePreexistingEvent_c selected = (GeneratePreexistingEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57677));
				return retval;
			}
		}

		GeneratePreexistingEvent_c[] objs57678 = GeneratePreexistingEvent_c
				.GeneratePreexistingEventInstances(modelRoot,
						new GeneratePreexistingEvent_c_test57676_c(
								getStatement_id()));

		objs57675 = objs57675 + objs57678.length;
		// Subtype Object: For Stmt
		class ForStmt_c_test57679_c implements ClassQueryInterface_c {
			ForStmt_c_test57679_c(java.util.UUID p57680) {
				m_p57680 = p57680;
			}
			private java.util.UUID m_p57680;
			public boolean evaluate(Object candidate) {
				ForStmt_c selected = (ForStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57680));
				return retval;
			}
		}

		ForStmt_c[] objs57681 = ForStmt_c.ForStmtInstances(modelRoot,
				new ForStmt_c_test57679_c(getStatement_id()));

		objs57675 = objs57675 + objs57681.length;
		// Subtype Object: While Stmt
		class WhileStmt_c_test57682_c implements ClassQueryInterface_c {
			WhileStmt_c_test57682_c(java.util.UUID p57683) {
				m_p57683 = p57683;
			}
			private java.util.UUID m_p57683;
			public boolean evaluate(Object candidate) {
				WhileStmt_c selected = (WhileStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57683));
				return retval;
			}
		}

		WhileStmt_c[] objs57684 = WhileStmt_c.WhileStmtInstances(modelRoot,
				new WhileStmt_c_test57682_c(getStatement_id()));

		objs57675 = objs57675 + objs57684.length;
		// Subtype Object: If Stmt
		class IfStmt_c_test57685_c implements ClassQueryInterface_c {
			IfStmt_c_test57685_c(java.util.UUID p57686) {
				m_p57686 = p57686;
			}
			private java.util.UUID m_p57686;
			public boolean evaluate(Object candidate) {
				IfStmt_c selected = (IfStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57686));
				return retval;
			}
		}

		IfStmt_c[] objs57687 = IfStmt_c.IfStmtInstances(modelRoot,
				new IfStmt_c_test57685_c(getStatement_id()));

		objs57675 = objs57675 + objs57687.length;
		// Subtype Object: ElseIf Stmt
		class ElseifStmt_c_test57688_c implements ClassQueryInterface_c {
			ElseifStmt_c_test57688_c(java.util.UUID p57689) {
				m_p57689 = p57689;
			}
			private java.util.UUID m_p57689;
			public boolean evaluate(Object candidate) {
				ElseifStmt_c selected = (ElseifStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57689));
				return retval;
			}
		}

		ElseifStmt_c[] objs57690 = ElseifStmt_c.ElseifStmtInstances(modelRoot,
				new ElseifStmt_c_test57688_c(getStatement_id()));

		objs57675 = objs57675 + objs57690.length;
		// Subtype Object: Else Stmt
		class ElseStmt_c_test57691_c implements ClassQueryInterface_c {
			ElseStmt_c_test57691_c(java.util.UUID p57692) {
				m_p57692 = p57692;
			}
			private java.util.UUID m_p57692;
			public boolean evaluate(Object candidate) {
				ElseStmt_c selected = (ElseStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57692));
				return retval;
			}
		}

		ElseStmt_c[] objs57693 = ElseStmt_c.ElseStmtInstances(modelRoot,
				new ElseStmt_c_test57691_c(getStatement_id()));

		objs57675 = objs57675 + objs57693.length;
		// Subtype Object: Bridge Invocation
		class BridgeInvocation_c_test57694_c implements ClassQueryInterface_c {
			BridgeInvocation_c_test57694_c(java.util.UUID p57695) {
				m_p57695 = p57695;
			}
			private java.util.UUID m_p57695;
			public boolean evaluate(Object candidate) {
				BridgeInvocation_c selected = (BridgeInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57695));
				return retval;
			}
		}

		BridgeInvocation_c[] objs57696 = BridgeInvocation_c
				.BridgeInvocationInstances(modelRoot,
						new BridgeInvocation_c_test57694_c(getStatement_id()));

		objs57675 = objs57675 + objs57696.length;
		// Subtype Object: Function Invocation
		class FunctionInvocation_c_test57697_c implements ClassQueryInterface_c {
			FunctionInvocation_c_test57697_c(java.util.UUID p57698) {
				m_p57698 = p57698;
			}
			private java.util.UUID m_p57698;
			public boolean evaluate(Object candidate) {
				FunctionInvocation_c selected = (FunctionInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57698));
				return retval;
			}
		}

		FunctionInvocation_c[] objs57699 = FunctionInvocation_c
				.FunctionInvocationInstances(modelRoot,
						new FunctionInvocation_c_test57697_c(getStatement_id()));

		objs57675 = objs57675 + objs57699.length;
		// Subtype Object: Return Stmt
		class ReturnStmt_c_test57700_c implements ClassQueryInterface_c {
			ReturnStmt_c_test57700_c(java.util.UUID p57701) {
				m_p57701 = p57701;
			}
			private java.util.UUID m_p57701;
			public boolean evaluate(Object candidate) {
				ReturnStmt_c selected = (ReturnStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57701));
				return retval;
			}
		}

		ReturnStmt_c[] objs57702 = ReturnStmt_c.ReturnStmtInstances(modelRoot,
				new ReturnStmt_c_test57700_c(getStatement_id()));

		objs57675 = objs57675 + objs57702.length;
		// Subtype Object: Operation Invocation
		class OperationInvocation_c_test57703_c
				implements
					ClassQueryInterface_c {
			OperationInvocation_c_test57703_c(java.util.UUID p57704) {
				m_p57704 = p57704;
			}
			private java.util.UUID m_p57704;
			public boolean evaluate(Object candidate) {
				OperationInvocation_c selected = (OperationInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57704));
				return retval;
			}
		}

		OperationInvocation_c[] objs57705 = OperationInvocation_c
				.OperationInvocationInstances(
						modelRoot,
						new OperationInvocation_c_test57703_c(getStatement_id()));

		objs57675 = objs57675 + objs57705.length;
		// Subtype Object: Assign to Member
		class AssignToMember_c_test57706_c implements ClassQueryInterface_c {
			AssignToMember_c_test57706_c(java.util.UUID p57707) {
				m_p57707 = p57707;
			}
			private java.util.UUID m_p57707;
			public boolean evaluate(Object candidate) {
				AssignToMember_c selected = (AssignToMember_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57707));
				return retval;
			}
		}

		AssignToMember_c[] objs57708 = AssignToMember_c
				.AssignToMemberInstances(modelRoot,
						new AssignToMember_c_test57706_c(getStatement_id()));

		objs57675 = objs57675 + objs57708.length;
		// Subtype Object: Delete
		class Delete_c_test57709_c implements ClassQueryInterface_c {
			Delete_c_test57709_c(java.util.UUID p57710) {
				m_p57710 = p57710;
			}
			private java.util.UUID m_p57710;
			public boolean evaluate(Object candidate) {
				Delete_c selected = (Delete_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57710));
				return retval;
			}
		}

		Delete_c[] objs57711 = Delete_c.DeleteInstances(modelRoot,
				new Delete_c_test57709_c(getStatement_id()));

		objs57675 = objs57675 + objs57711.length;
		// Subtype Object: Create No Variable
		class CreateNoVariable_c_test57712_c implements ClassQueryInterface_c {
			CreateNoVariable_c_test57712_c(java.util.UUID p57713) {
				m_p57713 = p57713;
			}
			private java.util.UUID m_p57713;
			public boolean evaluate(Object candidate) {
				CreateNoVariable_c selected = (CreateNoVariable_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57713));
				return retval;
			}
		}

		CreateNoVariable_c[] objs57714 = CreateNoVariable_c
				.CreateNoVariableInstances(modelRoot,
						new CreateNoVariable_c_test57712_c(getStatement_id()));

		objs57675 = objs57675 + objs57714.length;
		// Subtype Object: Create
		class Create_c_test57715_c implements ClassQueryInterface_c {
			Create_c_test57715_c(java.util.UUID p57716) {
				m_p57716 = p57716;
			}
			private java.util.UUID m_p57716;
			public boolean evaluate(Object candidate) {
				Create_c selected = (Create_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57716));
				return retval;
			}
		}

		Create_c[] objs57717 = Create_c.CreateInstances(modelRoot,
				new Create_c_test57715_c(getStatement_id()));

		objs57675 = objs57675 + objs57717.length;
		// Subtype Object: Select
		class Select_c_test57718_c implements ClassQueryInterface_c {
			Select_c_test57718_c(java.util.UUID p57719) {
				m_p57719 = p57719;
			}
			private java.util.UUID m_p57719;
			public boolean evaluate(Object candidate) {
				Select_c selected = (Select_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57719));
				return retval;
			}
		}

		Select_c[] objs57720 = Select_c.SelectInstances(modelRoot,
				new Select_c_test57718_c(getStatement_id()));

		objs57675 = objs57675 + objs57720.length;
		// Subtype Object: Select From Instances
		class SelectFromInstances_c_test57721_c
				implements
					ClassQueryInterface_c {
			SelectFromInstances_c_test57721_c(java.util.UUID p57722) {
				m_p57722 = p57722;
			}
			private java.util.UUID m_p57722;
			public boolean evaluate(Object candidate) {
				SelectFromInstances_c selected = (SelectFromInstances_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57722));
				return retval;
			}
		}

		SelectFromInstances_c[] objs57723 = SelectFromInstances_c
				.SelectFromInstancesInstances(
						modelRoot,
						new SelectFromInstances_c_test57721_c(getStatement_id()));

		objs57675 = objs57675 + objs57723.length;
		// Subtype Object: Select From Instances Where
		class SelectFromInstancesWhere_c_test57724_c
				implements
					ClassQueryInterface_c {
			SelectFromInstancesWhere_c_test57724_c(java.util.UUID p57725) {
				m_p57725 = p57725;
			}
			private java.util.UUID m_p57725;
			public boolean evaluate(Object candidate) {
				SelectFromInstancesWhere_c selected = (SelectFromInstancesWhere_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57725));
				return retval;
			}
		}

		SelectFromInstancesWhere_c[] objs57726 = SelectFromInstancesWhere_c
				.SelectFromInstancesWhereInstances(modelRoot,
						new SelectFromInstancesWhere_c_test57724_c(
								getStatement_id()));

		objs57675 = objs57675 + objs57726.length;
		// Subtype Object: Unrelate Using
		class UnrelateUsing_c_test57727_c implements ClassQueryInterface_c {
			UnrelateUsing_c_test57727_c(java.util.UUID p57728) {
				m_p57728 = p57728;
			}
			private java.util.UUID m_p57728;
			public boolean evaluate(Object candidate) {
				UnrelateUsing_c selected = (UnrelateUsing_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57728));
				return retval;
			}
		}

		UnrelateUsing_c[] objs57729 = UnrelateUsing_c.UnrelateUsingInstances(
				modelRoot, new UnrelateUsing_c_test57727_c(getStatement_id()));

		objs57675 = objs57675 + objs57729.length;
		// Subtype Object: Unrelate
		class Unrelate_c_test57730_c implements ClassQueryInterface_c {
			Unrelate_c_test57730_c(java.util.UUID p57731) {
				m_p57731 = p57731;
			}
			private java.util.UUID m_p57731;
			public boolean evaluate(Object candidate) {
				Unrelate_c selected = (Unrelate_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57731));
				return retval;
			}
		}

		Unrelate_c[] objs57732 = Unrelate_c.UnrelateInstances(modelRoot,
				new Unrelate_c_test57730_c(getStatement_id()));

		objs57675 = objs57675 + objs57732.length;
		// Subtype Object: Relate Using
		class RelateUsing_c_test57733_c implements ClassQueryInterface_c {
			RelateUsing_c_test57733_c(java.util.UUID p57734) {
				m_p57734 = p57734;
			}
			private java.util.UUID m_p57734;
			public boolean evaluate(Object candidate) {
				RelateUsing_c selected = (RelateUsing_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57734));
				return retval;
			}
		}

		RelateUsing_c[] objs57735 = RelateUsing_c.RelateUsingInstances(
				modelRoot, new RelateUsing_c_test57733_c(getStatement_id()));

		objs57675 = objs57675 + objs57735.length;
		// Subtype Object: Relate
		class Relate_c_test57736_c implements ClassQueryInterface_c {
			Relate_c_test57736_c(java.util.UUID p57737) {
				m_p57737 = p57737;
			}
			private java.util.UUID m_p57737;
			public boolean evaluate(Object candidate) {
				Relate_c selected = (Relate_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57737));
				return retval;
			}
		}

		Relate_c[] objs57738 = Relate_c.RelateInstances(modelRoot,
				new Relate_c_test57736_c(getStatement_id()));

		objs57675 = objs57675 + objs57738.length;
		// Subtype Object: Control
		class Control_c_test57739_c implements ClassQueryInterface_c {
			Control_c_test57739_c(java.util.UUID p57740) {
				m_p57740 = p57740;
			}
			private java.util.UUID m_p57740;
			public boolean evaluate(Object candidate) {
				Control_c selected = (Control_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57740));
				return retval;
			}
		}

		Control_c[] objs57741 = Control_c.ControlInstances(modelRoot,
				new Control_c_test57739_c(getStatement_id()));

		objs57675 = objs57675 + objs57741.length;
		// Subtype Object: Break
		class Break_c_test57742_c implements ClassQueryInterface_c {
			Break_c_test57742_c(java.util.UUID p57743) {
				m_p57743 = p57743;
			}
			private java.util.UUID m_p57743;
			public boolean evaluate(Object candidate) {
				Break_c selected = (Break_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57743));
				return retval;
			}
		}

		Break_c[] objs57744 = Break_c.BreakInstances(modelRoot,
				new Break_c_test57742_c(getStatement_id()));

		objs57675 = objs57675 + objs57744.length;
		// Subtype Object: Continue
		class Continue_c_test57745_c implements ClassQueryInterface_c {
			Continue_c_test57745_c(java.util.UUID p57746) {
				m_p57746 = p57746;
			}
			private java.util.UUID m_p57746;
			public boolean evaluate(Object candidate) {
				Continue_c selected = (Continue_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57746));
				return retval;
			}
		}

		Continue_c[] objs57747 = Continue_c.ContinueInstances(modelRoot,
				new Continue_c_test57745_c(getStatement_id()));

		objs57675 = objs57675 + objs57747.length;
		// Subtype Object: Event Specification Statement
		class EventSpecificationStatement_c_test57748_c
				implements
					ClassQueryInterface_c {
			EventSpecificationStatement_c_test57748_c(java.util.UUID p57749) {
				m_p57749 = p57749;
			}
			private java.util.UUID m_p57749;
			public boolean evaluate(Object candidate) {
				EventSpecificationStatement_c selected = (EventSpecificationStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57749));
				return retval;
			}
		}

		EventSpecificationStatement_c[] objs57750 = EventSpecificationStatement_c
				.EventSpecificationStatementInstances(modelRoot,
						new EventSpecificationStatement_c_test57748_c(
								getStatement_id()));

		objs57675 = objs57675 + objs57750.length;
		// Subtype Object: Interface Operation Invocation
		class InterfaceOperationInvocation_c_test57751_c
				implements
					ClassQueryInterface_c {
			InterfaceOperationInvocation_c_test57751_c(java.util.UUID p57752) {
				m_p57752 = p57752;
			}
			private java.util.UUID m_p57752;
			public boolean evaluate(Object candidate) {
				InterfaceOperationInvocation_c selected = (InterfaceOperationInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57752));
				return retval;
			}
		}

		InterfaceOperationInvocation_c[] objs57753 = InterfaceOperationInvocation_c
				.InterfaceOperationInvocationInstances(modelRoot,
						new InterfaceOperationInvocation_c_test57751_c(
								getStatement_id()));

		objs57675 = objs57675 + objs57753.length;
		// Subtype Object: Signal Invocation
		class SignalInvocation_c_test57754_c implements ClassQueryInterface_c {
			SignalInvocation_c_test57754_c(java.util.UUID p57755) {
				m_p57755 = p57755;
			}
			private java.util.UUID m_p57755;
			public boolean evaluate(Object candidate) {
				SignalInvocation_c selected = (SignalInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57755));
				return retval;
			}
		}

		SignalInvocation_c[] objs57756 = SignalInvocation_c
				.SignalInvocationInstances(modelRoot,
						new SignalInvocation_c_test57754_c(getStatement_id()));

		objs57675 = objs57675 + objs57756.length;
		if (objs57675 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Statement", //$NON-NLS-1$
								"Consistency: Object: Statement: Association: 603: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57675)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Statement: Association: 603: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57675), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement",
				" Operation entered: Statement::Dispose");
		final ModelRoot modelRoot = getModelRoot();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement",
				" Operation entered: Statement::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute
	public boolean Checkbreakpoint(final java.util.UUID p_Stack_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement",
				" Operation entered: Statement::Checkbreakpoint");
		final ModelRoot modelRoot = getModelRoot();
		return false;

	} // End checkBreakpoint
	public boolean Stepin() {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement",
				" Operation entered: Statement::Stepin");
		final ModelRoot modelRoot = getModelRoot();
		return false;

	} // End stepIn
	public void Setupnextstatement(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement",
				" Operation entered: Statement::Setupnextstatement");
		final ModelRoot modelRoot = getModelRoot();

	} // End setupNextStatement
	public void Popuptoblock(final java.util.UUID p_Block_id,
			final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Statement",
				" Operation entered: Statement::Popuptoblock");
		final ModelRoot modelRoot = getModelRoot();

	} // End popUpToBlock

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Statement
