package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.EventIgnored_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_EVENT_IGNORED extends genericEvent_c {
	public abstract int getEvtcode();
}

public class EventIgnored_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public EventIgnored_c(ModelRoot modelRoot, java.util.UUID p_m_smstt_id,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id, String p_m_descrip) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
		m_descrip = p_m_descrip;

		Object[] key = {m_smevt_id, m_sm_id, m_smspd_id, m_smstt_id};
		addInstanceToMap(key);
	}
	static public EventIgnored_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id,
			String p_m_descrip, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(EventIgnored_c.class);
		EventIgnored_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smevt_id, p_m_sm_id, p_m_smspd_id, p_m_smstt_id};
			new_inst = (EventIgnored_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				new_inst.m_descrip = p_m_descrip;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new EventIgnored_c(modelRoot, p_m_smstt_id,
					p_m_smevt_id, p_m_sm_id, p_m_smspd_id, p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public EventIgnored_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id,
			String p_m_descrip) {
		InstanceList instances = modelRoot
				.getInstanceList(EventIgnored_c.class);
		EventIgnored_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smevt_id, p_m_sm_id, p_m_smspd_id, p_m_smstt_id};
			source = (EventIgnored_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				source.m_descrip = p_m_descrip;

				return source;
			}
		}
		// there is no instance matching the id
		EventIgnored_c new_inst = new EventIgnored_c(modelRoot, p_m_smstt_id,
				p_m_smevt_id, p_m_sm_id, p_m_smspd_id, p_m_descrip);
		return new_inst;
	}
	public EventIgnored_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smstt_id = IdAssigner.NULL_UUID;
		m_smevt_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		m_descrip = "";
		Object[] key = {m_smevt_id, m_sm_id, m_smspd_id, m_smstt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smevt_id, m_sm_id, m_smspd_id, m_smstt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smevt_id != p_newKey) {

			m_smevt_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof EventIgnored_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof EventIgnored_c)) {
			return false;
		}

		EventIgnored_c me = (EventIgnored_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((EventIgnored_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(((EventIgnored_c) elem).getSmevt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((EventIgnored_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((EventIgnored_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmspd_id()) || IdAssigner.NULL_UUID
						.equals(((EventIgnored_c) elem).getSmspd_id())) && this != elem)) {
			return false;
		}
		if (!getSmspd_id().equals(((EventIgnored_c) elem).getSmspd_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmstt_id()) || IdAssigner.NULL_UUID
						.equals(((EventIgnored_c) elem).getSmstt_id())) && this != elem)) {
			return false;
		}
		if (!getSmstt_id().equals(((EventIgnored_c) elem).getSmstt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof EventIgnored_c)) {
			return false;
		}

		EventIgnored_c me = (EventIgnored_c) elem;
		if (!getSmevt_idCachedValue().equals(
				((EventIgnored_c) elem).getSmevt_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((EventIgnored_c) elem).getSm_idCachedValue()))
			return false;
		if (!getSmspd_idCachedValue().equals(
				((EventIgnored_c) elem).getSmspd_idCachedValue()))
			return false;
		if (!getSmstt_idCachedValue().equals(
				((EventIgnored_c) elem).getSmstt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smstt_id;
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smspd_id;
	private String m_descrip;

	// declare association references from this class

	// referring navigation

	StateEventMatrixEntry_c IsSupertypeStateEventMatrixEntry;
	public void relateAcrossR504To(StateEventMatrixEntry_c target) {
		relateAcrossR504To(target, true);
	}
	public void relateAcrossR504To(StateEventMatrixEntry_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStateEventMatrixEntry)
			return; // already related

		if (IsSupertypeStateEventMatrixEntry != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStateEventMatrixEntry != null) {

				IsSupertypeStateEventMatrixEntry.clearBackPointerR504To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"EventIgnored_c.relateAcrossR504To(StateEventMatrixEntry_c target)",
									"Relate performed across R504 from Event Ignored to State Event Matrix Entry without unrelate of prior instance.");
				}
			}

			IsSupertypeStateEventMatrixEntry = target;
			if (IdAssigner.NULL_UUID.equals(target.getSmstt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smstt_id = target.getSmstt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmspd_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smspd_id = target.getSmspd_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR504To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "504", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR504From(StateEventMatrixEntry_c target) {
		unrelateAcrossR504From(target, true);
	}
	public void unrelateAcrossR504From(StateEventMatrixEntry_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStateEventMatrixEntry == null)
			return; // already unrelated

		if (target != IsSupertypeStateEventMatrixEntry) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R504",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR504To(this);
		}

		if (IsSupertypeStateEventMatrixEntry != null) {

			m_smstt_id = IsSupertypeStateEventMatrixEntry.getSmstt_id();
			if (IdAssigner.NULL_UUID.equals(m_smstt_id)) {
				m_smstt_id = IsSupertypeStateEventMatrixEntry
						.getSmstt_idCachedValue();
			}
			m_smevt_id = IsSupertypeStateEventMatrixEntry.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = IsSupertypeStateEventMatrixEntry
						.getSmevt_idCachedValue();
			}
			m_sm_id = IsSupertypeStateEventMatrixEntry.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeStateEventMatrixEntry
						.getSm_idCachedValue();
			}
			m_smspd_id = IsSupertypeStateEventMatrixEntry.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(m_smspd_id)) {
				m_smspd_id = IsSupertypeStateEventMatrixEntry
						.getSmspd_idCachedValue();
			}
			IsSupertypeStateEventMatrixEntry = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "504", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(
			StateEventMatrixEntry_c[] targets) {
		return getOneSM_EIGNOnR504(targets, null);
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(
			StateEventMatrixEntry_c[] targets, ClassQueryInterface_c test) {
		EventIgnored_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_EIGNOnR504(targets[i], test);
			}
		}

		return ret_val;
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(
			StateEventMatrixEntry_c target) {
		return getOneSM_EIGNOnR504(target, null);
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(
			StateEventMatrixEntry_c target, boolean loadComponent) {
		return getOneSM_EIGNOnR504(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(
			StateEventMatrixEntry_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_EIGNOnR504(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(ModelRoot modelRoot,
			StateEventMatrixEntry_c target, ClassQueryInterface_c test) {
		return getOneSM_EIGNOnR504(modelRoot, target, test, true);
	}

	public static EventIgnored_c getOneSM_EIGNOnR504(ModelRoot modelRoot,
			StateEventMatrixEntry_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_EIGNOnR504(modelRoot, target, test);
	}
	private static EventIgnored_c find_getOneSM_EIGNOnR504(ModelRoot modelRoot,
			StateEventMatrixEntry_c target, ClassQueryInterface_c test) {
		if (target != null) {
			EventIgnored_c source = (EventIgnored_c) target.backPointer_IsSubtypeEventIgnoredIsSubtype_R504;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static EventIgnored_c[] getManySM_EIGNsOnR504(
			StateEventMatrixEntry_c[] targets) {
		return getManySM_EIGNsOnR504(targets, null);
	}
	public static EventIgnored_c[] getManySM_EIGNsOnR504(
			StateEventMatrixEntry_c[] targets, boolean loadComponent) {
		return getManySM_EIGNsOnR504(targets, null, loadComponent);
	}
	public static EventIgnored_c[] getManySM_EIGNsOnR504(
			StateEventMatrixEntry_c[] targets, ClassQueryInterface_c test) {
		return getManySM_EIGNsOnR504(targets, test, true);
	}

	public static EventIgnored_c[] getManySM_EIGNsOnR504(
			StateEventMatrixEntry_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new EventIgnored_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(EventIgnored_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			EventIgnored_c source = (EventIgnored_c) targets[i].backPointer_IsSubtypeEventIgnoredIsSubtype_R504;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			EventIgnored_c[] ret_set = new EventIgnored_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new EventIgnored_c[0];
		}
	}

	public static EventIgnored_c[] getManySM_EIGNsOnR504(
			StateEventMatrixEntry_c target) {
		if (target != null) {
			StateEventMatrixEntry_c[] targetArray = new StateEventMatrixEntry_c[1];
			targetArray[0] = target;
			return getManySM_EIGNsOnR504(targetArray);
		} else {
			EventIgnored_c[] result = new EventIgnored_c[0];
			return result;
		}
	}

	public static EventIgnored_c[] getManySM_EIGNsOnR504(
			StateEventMatrixEntry_c target, boolean loadComponent) {
		if (target != null) {
			StateEventMatrixEntry_c[] targetArray = new StateEventMatrixEntry_c[1];
			targetArray[0] = target;
			return getManySM_EIGNsOnR504(targetArray, loadComponent);
		} else {
			EventIgnored_c[] result = new EventIgnored_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R504
		StateEventMatrixEntry_c relInst39232 = (StateEventMatrixEntry_c) baseRoot
				.getInstanceList(StateEventMatrixEntry_c.class).get(
						new Object[]{m_smspd_id, m_smevt_id, m_sm_id,
								m_smstt_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39232 == null) {
			relInst39232 = (StateEventMatrixEntry_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(StateEventMatrixEntry_c.class)
					.get(new Object[]{m_smspd_id, m_smevt_id, m_sm_id,
							m_smstt_id});
		}
		if (relInst39232 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39232 = (StateEventMatrixEntry_c) roots[i]
						.getInstanceList(StateEventMatrixEntry_c.class).get(
								new Object[]{m_smspd_id, m_smevt_id, m_sm_id,
										m_smstt_id});
				if (relInst39232 != null)
					break;
			}
		}
		//synchronized
		if (relInst39232 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39232) && !isProxy())) {
				relInst39232.relateAcrossR504To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R504
		// SM_SEME
		inst = IsSupertypeStateEventMatrixEntry;
		unrelateAcrossR504From(IsSupertypeStateEventMatrixEntry, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(EventIgnored_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final EventIgnored_c inst = (EventIgnored_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(EventIgnored_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static EventIgnored_c EventIgnoredInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		EventIgnored_c result = findEventIgnoredInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					EventIgnored_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findEventIgnoredInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static EventIgnored_c findEventIgnoredInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(EventIgnored_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				EventIgnored_c x = (EventIgnored_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static EventIgnored_c EventIgnoredInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return EventIgnoredInstance(modelRoot, test, true);
	}

	public static EventIgnored_c EventIgnoredInstance(ModelRoot modelRoot) {
		return EventIgnoredInstance(modelRoot, null, true);
	}

	public static EventIgnored_c[] EventIgnoredInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					EventIgnored_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(EventIgnored_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				EventIgnored_c x = (EventIgnored_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				EventIgnored_c[] ret_set = new EventIgnored_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new EventIgnored_c[0];
			}
		}
	}
	public static EventIgnored_c[] EventIgnoredInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return EventIgnoredInstances(modelRoot, test, true);
	}
	public static EventIgnored_c[] EventIgnoredInstances(ModelRoot modelRoot) {
		return EventIgnoredInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Event Ignored.dispose call: ";
		StateEventMatrixEntry_c testR504Inst1 = StateEventMatrixEntry_c
				.getOneSM_SEMEOnR504(this, false);

		if (testR504Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "504 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Event Ignored", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smstt_id")) {
			return true;
		}
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmspd_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmspd_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmstt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmstt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmstt_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmstt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmstt_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmstt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStateEventMatrixEntry != null);

	}

	public java.util.UUID getSmstt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smstt_id))
			return m_smstt_id;
		else
			return getSmstt_id();
	}

	public void setSmstt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smstt_id)) {
				return;
			}
		} else if (m_smstt_id != null) {
			if (m_smstt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smstt_id", m_smstt_id, newValue, true);
		m_smstt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmevt_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (IsSupertypeStateEventMatrixEntry != null) {
			return IsSupertypeStateEventMatrixEntry.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Ignored", //$NON-NLS-1$
				" Operation entered: Event Ignored::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		EventIgnored_c[] objs = EventIgnored_c.EventIgnoredInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Ignored", //$NON-NLS-1$
				" Operation entered: Event Ignored::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class EventIgnored_c_test39234_c implements ClassQueryInterface_c {
			EventIgnored_c_test39234_c(java.util.UUID p39235,
					java.util.UUID p39236, java.util.UUID p39237,
					java.util.UUID p39238) {
				m_p39235 = p39235;
				m_p39236 = p39236;
				m_p39237 = p39237;
				m_p39238 = p39238;
			}
			private java.util.UUID m_p39235;
			private java.util.UUID m_p39236;
			private java.util.UUID m_p39237;
			private java.util.UUID m_p39238;
			public boolean evaluate(Object candidate) {
				EventIgnored_c selected = (EventIgnored_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39235))
						& (selected.getSm_id().equals(m_p39236))
						& (selected.getSmspd_id().equals(m_p39237))
						& (selected.getSmstt_id().equals(m_p39238));
				return retval;
			}
		}

		EventIgnored_c[] objs39233 = EventIgnored_c.EventIgnoredInstances(
				modelRoot, new EventIgnored_c_test39234_c(getSmevt_id(),
						getSm_id(), getSmspd_id(), getSmstt_id()));

		if (((objs39233.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Ignored", //$NON-NLS-1$
								"Consistency: Object: Event Ignored: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39233.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Event Ignored: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39233.length), e);
			}
			retval = false;

		}

		if (((objs39233.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Ignored", //$NON-NLS-1$
								"Consistency: Object: Event Ignored: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39233.length)
										+ " SMevt_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable" + " SMstt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Ignored: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39233.length)
										+ " SMevt_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMspd_ID: " + "Not Printable" + " SMstt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Event Ignored is a subtype in association: rel.Numb = 504
		// The supertype class is: State Event Matrix Entry
		class StateEventMatrixEntry_c_test39242_c
				implements
					ClassQueryInterface_c {
			StateEventMatrixEntry_c_test39242_c(java.util.UUID p39243,
					java.util.UUID p39244, java.util.UUID p39245,
					java.util.UUID p39246) {
				m_p39243 = p39243;
				m_p39244 = p39244;
				m_p39245 = p39245;
				m_p39246 = p39246;
			}
			private java.util.UUID m_p39243;
			private java.util.UUID m_p39244;
			private java.util.UUID m_p39245;
			private java.util.UUID m_p39246;
			public boolean evaluate(Object candidate) {
				StateEventMatrixEntry_c selected = (StateEventMatrixEntry_c) candidate;
				boolean retval = false;
				retval = (selected.getSmstt_id().equals(m_p39243))
						& (selected.getSmevt_id().equals(m_p39244))
						& (selected.getSm_id().equals(m_p39245))
						& (selected.getSmspd_id().equals(m_p39246));
				return retval;
			}
		}

		StateEventMatrixEntry_c[] objs39241 = StateEventMatrixEntry_c
				.StateEventMatrixEntryInstances(modelRoot,
						new StateEventMatrixEntry_c_test39242_c(getSmstt_id(),
								getSmevt_id(), getSm_id(), getSmspd_id()));

		if (((objs39241.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Event Ignored", //$NON-NLS-1$
								"Consistency: Object: Event Ignored: Association: 504: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39241.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Event Ignored: Association: 504: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39241.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Ignored",
				" Operation entered: EventIgnored::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return "Event Ignored";

	} // End get_name
	public String Get_label() {
		Ooaofooa.log.println(ILogger.OPERATION, "Event Ignored",
				" Operation entered: EventIgnored::Get_label");
		final ModelRoot modelRoot = getModelRoot();
		StateEventMatrixEntry_c v_seme = StateEventMatrixEntry_c
				.getOneSM_SEMEOnR504(this);

		if ((v_seme != null)) {

			StateMachineEvent_c v_event = StateMachineEvent_c
					.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR503(v_seme));

			StateMachineState_c v_state = StateMachineState_c
					.getOneSM_STATEOnR503(v_seme);

			if (((v_state != null) && (v_event != null))) {

				return v_event.getDrv_lbl() + "/" + v_state.getName();

			}

			else {

				return "";

			}

		}

		else {

			return "";

		}

	} // End get_label

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Event Ignored
