package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActivityDiagramAction_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTIVITY_DIAGRAM_ACTION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ActivityDiagramAction_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ActivityDiagramAction_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			String p_m_name, String p_m_descrip) {
		super(modelRoot);
		m_name = p_m_name;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);

		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ActivityDiagramAction_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, String p_m_name, String p_m_descrip,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ActivityDiagramAction_c.class);
		ActivityDiagramAction_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ActivityDiagramAction_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_name = p_m_name;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ActivityDiagramAction_c(modelRoot, p_m_id, p_m_name,
					p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ActivityDiagramAction_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, String p_m_name, String p_m_descrip) {
		InstanceList instances = modelRoot
				.getInstanceList(ActivityDiagramAction_c.class);
		ActivityDiagramAction_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ActivityDiagramAction_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_name = p_m_name;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);

				return source;
			}
		}
		// there is no instance matching the id
		ActivityDiagramAction_c new_inst = new ActivityDiagramAction_c(
				modelRoot, p_m_id, p_m_name, p_m_descrip);
		return new_inst;
	}
	public ActivityDiagramAction_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_name = "";
		m_descrip = "";
		m_id = IdAssigner.NULL_UUID;
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ActivityDiagramAction_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ActivityDiagramAction_c)) {
			return false;
		}

		ActivityDiagramAction_c me = (ActivityDiagramAction_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ActivityDiagramAction_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ActivityDiagramAction_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ActivityDiagramAction_c)) {
			return false;
		}

		ActivityDiagramAction_c me = (ActivityDiagramAction_c) elem;
		if (!getIdCachedValue().equals(
				((ActivityDiagramAction_c) elem).getIdCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_name;
	private String m_descrip;
	private java.util.UUID m_id;

	// declare association references from this class

	// referring navigation

	ActionNode_c IsSupertypeActionNode;
	public void relateAcrossR1107To(ActionNode_c target) {
		relateAcrossR1107To(target, true);
	}
	public void relateAcrossR1107To(ActionNode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeActionNode)
			return; // already related

		if (IsSupertypeActionNode != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeActionNode != null) {

				IsSupertypeActionNode.clearBackPointerR1107To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActivityDiagramAction_c.relateAcrossR1107To(ActionNode_c target)",
									"Relate performed across R1107 from Activity Diagram Action to Action Node without unrelate of prior instance.");
				}
			}

			IsSupertypeActionNode = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1107To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1107", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1107From(ActionNode_c target) {
		unrelateAcrossR1107From(target, true);
	}
	public void unrelateAcrossR1107From(ActionNode_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeActionNode == null)
			return; // already unrelated

		if (target != IsSupertypeActionNode) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1107",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1107To(this);
		}

		if (IsSupertypeActionNode != null) {

			m_id = IsSupertypeActionNode.getId();
			if (IdAssigner.NULL_UUID.equals(m_id)) {
				m_id = IsSupertypeActionNode.getIdCachedValue();
			}
			IsSupertypeActionNode = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1107", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(
			ActionNode_c[] targets) {
		return getOneA_GAOnR1107(targets, null);
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(
			ActionNode_c[] targets, ClassQueryInterface_c test) {
		ActivityDiagramAction_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_GAOnR1107(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(ActionNode_c target) {
		return getOneA_GAOnR1107(target, null);
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(
			ActionNode_c target, boolean loadComponent) {
		return getOneA_GAOnR1107(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(
			ActionNode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_GAOnR1107(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(
			ModelRoot modelRoot, ActionNode_c target, ClassQueryInterface_c test) {
		return getOneA_GAOnR1107(modelRoot, target, test, true);
	}

	public static ActivityDiagramAction_c getOneA_GAOnR1107(
			ModelRoot modelRoot, ActionNode_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneA_GAOnR1107(modelRoot, target, test);
	}
	private static ActivityDiagramAction_c find_getOneA_GAOnR1107(
			ModelRoot modelRoot, ActionNode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ActivityDiagramAction_c source = (ActivityDiagramAction_c) target.backPointer_IsSubtypeActivityDiagramActionIsSubtype_R1107;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActivityDiagramAction_c[] getManyA_GAsOnR1107(
			ActionNode_c[] targets) {
		return getManyA_GAsOnR1107(targets, null);
	}
	public static ActivityDiagramAction_c[] getManyA_GAsOnR1107(
			ActionNode_c[] targets, boolean loadComponent) {
		return getManyA_GAsOnR1107(targets, null, loadComponent);
	}
	public static ActivityDiagramAction_c[] getManyA_GAsOnR1107(
			ActionNode_c[] targets, ClassQueryInterface_c test) {
		return getManyA_GAsOnR1107(targets, test, true);
	}

	public static ActivityDiagramAction_c[] getManyA_GAsOnR1107(
			ActionNode_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActivityDiagramAction_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActivityDiagramAction_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActivityDiagramAction_c source = (ActivityDiagramAction_c) targets[i].backPointer_IsSubtypeActivityDiagramActionIsSubtype_R1107;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActivityDiagramAction_c[] ret_set = new ActivityDiagramAction_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActivityDiagramAction_c[0];
		}
	}

	public static ActivityDiagramAction_c[] getManyA_GAsOnR1107(
			ActionNode_c target) {
		if (target != null) {
			ActionNode_c[] targetArray = new ActionNode_c[1];
			targetArray[0] = target;
			return getManyA_GAsOnR1107(targetArray);
		} else {
			ActivityDiagramAction_c[] result = new ActivityDiagramAction_c[0];
			return result;
		}
	}

	public static ActivityDiagramAction_c[] getManyA_GAsOnR1107(
			ActionNode_c target, boolean loadComponent) {
		if (target != null) {
			ActionNode_c[] targetArray = new ActionNode_c[1];
			targetArray[0] = target;
			return getManyA_GAsOnR1107(targetArray, loadComponent);
		} else {
			ActivityDiagramAction_c[] result = new ActivityDiagramAction_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1107
		ActionNode_c relInst58615 = (ActionNode_c) baseRoot.getInstanceList(
				ActionNode_c.class).get(new Object[]{m_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58615 == null) {
			relInst58615 = (ActionNode_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ActionNode_c.class)
					.get(new Object[]{m_id});
		}
		if (relInst58615 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58615 = (ActionNode_c) roots[i].getInstanceList(
						ActionNode_c.class).get(new Object[]{m_id});
				if (relInst58615 != null)
					break;
			}
		}
		//synchronized
		if (relInst58615 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58615) && !isProxy())) {
				relInst58615.relateAcrossR1107To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1107
		// A_ACT
		inst = IsSupertypeActionNode;
		unrelateAcrossR1107From(IsSupertypeActionNode, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActivityDiagramAction_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActivityDiagramAction_c inst = (ActivityDiagramAction_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ActivityDiagramAction_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ActivityDiagramAction_c ActivityDiagramActionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ActivityDiagramAction_c result = findActivityDiagramActionInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ActivityDiagramAction_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findActivityDiagramActionInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ActivityDiagramAction_c findActivityDiagramActionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ActivityDiagramAction_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActivityDiagramAction_c x = (ActivityDiagramAction_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ActivityDiagramAction_c ActivityDiagramActionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ActivityDiagramActionInstance(modelRoot, test, true);
	}

	public static ActivityDiagramAction_c ActivityDiagramActionInstance(
			ModelRoot modelRoot) {
		return ActivityDiagramActionInstance(modelRoot, null, true);
	}

	public static ActivityDiagramAction_c[] ActivityDiagramActionInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ActivityDiagramAction_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ActivityDiagramAction_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActivityDiagramAction_c x = (ActivityDiagramAction_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ActivityDiagramAction_c[] ret_set = new ActivityDiagramAction_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActivityDiagramAction_c[0];
			}
		}
	}
	public static ActivityDiagramAction_c[] ActivityDiagramActionInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ActivityDiagramActionInstances(modelRoot, test, true);
	}
	public static ActivityDiagramAction_c[] ActivityDiagramActionInstances(
			ModelRoot modelRoot) {
		return ActivityDiagramActionInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Activity Diagram Action.dispose call: ";
		ActionNode_c testR1107Inst3 = ActionNode_c.getOneA_ACTOnR1107(this,
				false);

		if (testR1107Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1107 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Activity Diagram Action",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getIdCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getName() {
		return m_name;
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, true);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIdLongBased() {
		if (IsSupertypeActionNode != null) {
			return IsSupertypeActionNode.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (IsSupertypeActionNode != null) {
			return IsSupertypeActionNode.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeActionNode != null);

	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public void setId(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_id)) {
				return;
			}
		} else if (m_id != null) {
			if (m_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id",
				m_id, newValue, true);
		m_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Activity Diagram Action", //$NON-NLS-1$
						" Operation entered: Activity Diagram Action::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ActivityDiagramAction_c[] objs = ActivityDiagramAction_c
				.ActivityDiagramActionInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Activity Diagram Action", //$NON-NLS-1$
						" Operation entered: Activity Diagram Action::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ActivityDiagramAction_c_test58617_c
				implements
					ClassQueryInterface_c {
			ActivityDiagramAction_c_test58617_c(java.util.UUID p58618) {
				m_p58618 = p58618;
			}
			private java.util.UUID m_p58618;
			public boolean evaluate(Object candidate) {
				ActivityDiagramAction_c selected = (ActivityDiagramAction_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58618));
				return retval;
			}
		}

		ActivityDiagramAction_c[] objs58616 = ActivityDiagramAction_c
				.ActivityDiagramActionInstances(modelRoot,
						new ActivityDiagramAction_c_test58617_c(getId()));

		if (((objs58616.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Activity Diagram Action", //$NON-NLS-1$
								"Consistency: Object: Activity Diagram Action: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58616.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Diagram Action: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58616.length), e);
			}
			retval = false;

		}

		if (((objs58616.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Activity Diagram Action", //$NON-NLS-1$
								"Consistency: Object: Activity Diagram Action: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58616.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Diagram Action: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58616.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Activity Diagram Action is a subtype in association: rel.Numb = 1107
		// The supertype class is: Action Node
		class ActionNode_c_test58622_c implements ClassQueryInterface_c {
			ActionNode_c_test58622_c(java.util.UUID p58623) {
				m_p58623 = p58623;
			}
			private java.util.UUID m_p58623;
			public boolean evaluate(Object candidate) {
				ActionNode_c selected = (ActionNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58623));
				return retval;
			}
		}

		ActionNode_c[] objs58621 = ActionNode_c.ActionNodeInstances(modelRoot,
				new ActionNode_c_test58622_c(getId()));

		if (((objs58621.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Activity Diagram Action", //$NON-NLS-1$
								"Consistency: Object: Activity Diagram Action: Association: 1107: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58621.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Activity Diagram Action: Association: 1107: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58621.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public boolean Incomingedgeallowed() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Activity Diagram Action",
						" Operation entered: ActivityDiagramAction::Incomingedgeallowed");
		final ModelRoot modelRoot = getModelRoot();
		ActivityEdge_c v_edge = ActivityEdge_c.getOneA_EOnR1103(ActivityNode_c
				.getManyA_NsOnR1105(ActionNode_c.getManyA_ACTsOnR1107(this)));

		return (v_edge == null);

	} // End incomingEdgeAllowed
	public boolean Outgoingedgeallowed() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Activity Diagram Action",
						" Operation entered: ActivityDiagramAction::Outgoingedgeallowed");
		final ModelRoot modelRoot = getModelRoot();
		ActivityEdge_c v_edge = ActivityEdge_c.getOneA_EOnR1104(ActivityNode_c
				.getManyA_NsOnR1105(ActionNode_c.getManyA_ACTsOnR1107(this)));

		return (v_edge == null);

	} // End outgoingEdgeAllowed
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getId();

	} // End get_ooa_id
	public int Get_style() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		return Style_c.RoundBox;

	} // End get_style
	public int Get_text_style(final int p_At, final int p_Comp_num,
			final int p_Ent_num) {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Get_text_style");
		final ModelRoot modelRoot = getModelRoot();
		return Style_c.None;

	} // End get_text_style
	public int Get_compartments() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Get_compartments");
		final ModelRoot modelRoot = getModelRoot();
		return 1;

	} // End get_compartments
	public int Get_entries(final int p_Comp_num) {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Get_entries");
		final ModelRoot modelRoot = getModelRoot();
		return 1;

	} // End get_entries
	public String Get_compartment_text(final int p_At, final int p_Comp_num,
			final int p_Ent_num) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Activity Diagram Action",
						" Operation entered: ActivityDiagramAction::Get_compartment_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		if ((p_At == Justification_c.Center)) {

			v_result = getName();

		}

		return v_result;

	} // End get_compartment_text
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		String v_name = "Unnamed Action";

		String v_success = Ooaofooa.Getnewelementname(modelRoot,
				Converttoinstance(), v_name, false);

		if ((!v_success.equals(""))) {

			setName(v_success);

		}

		else {

			Dispose();

		}

	} // End initialize
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ActionNode_c v_parent = ActionNode_c.getOneA_ACTOnR1107(this);

		if (((v_parent != null))) {

			if (v_parent != null) {
				v_parent.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			return;

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Activity Diagram Action",
				" Operation entered: ActivityDiagramAction::Converttoinstance");
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Activity Diagram Action
