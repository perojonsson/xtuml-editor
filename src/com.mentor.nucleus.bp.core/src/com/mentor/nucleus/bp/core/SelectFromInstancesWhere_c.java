package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SelectFromInstancesWhere_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SELECT_FROM_INSTANCES_WHERE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SelectFromInstancesWhere_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SelectFromInstancesWhere_c(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_var_id,
			boolean p_m_is_implicit, String p_m_cardinality,
			java.util.UUID p_m_where_clause_value_id,
			java.util.UUID p_m_obj_id, int p_m_extentlinenumber,
			int p_m_extentcolumn) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
		m_is_implicit = p_m_is_implicit;
		m_cardinality = p_m_cardinality;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_where_clause_value_id = IdAssigner
				.preprocessUUID(p_m_where_clause_value_id);
		m_extentlinenumber = p_m_extentlinenumber;
		m_extentcolumn = p_m_extentcolumn;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public SelectFromInstancesWhere_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_var_id,
			boolean p_m_is_implicit, String p_m_cardinality,
			java.util.UUID p_m_where_clause_value_id,
			java.util.UUID p_m_obj_id, int p_m_extentlinenumber,
			int p_m_extentcolumn, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);
		SelectFromInstancesWhere_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (SelectFromInstancesWhere_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
				new_inst.m_is_implicit = p_m_is_implicit;
				new_inst.m_cardinality = p_m_cardinality;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_where_clause_value_id = IdAssigner
						.preprocessUUID(p_m_where_clause_value_id);
				new_inst.m_extentlinenumber = p_m_extentlinenumber;
				new_inst.m_extentcolumn = p_m_extentcolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SelectFromInstancesWhere_c(modelRoot,
					p_m_statement_id, p_m_var_id, p_m_is_implicit,
					p_m_cardinality, p_m_where_clause_value_id, p_m_obj_id,
					p_m_extentlinenumber, p_m_extentcolumn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SelectFromInstancesWhere_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_var_id, boolean p_m_is_implicit,
			String p_m_cardinality, java.util.UUID p_m_where_clause_value_id,
			java.util.UUID p_m_obj_id, int p_m_extentlinenumber,
			int p_m_extentcolumn) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);
		SelectFromInstancesWhere_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (SelectFromInstancesWhere_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
				source.m_is_implicit = p_m_is_implicit;
				source.m_cardinality = p_m_cardinality;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_where_clause_value_id = IdAssigner
						.preprocessUUID(p_m_where_clause_value_id);
				source.m_extentlinenumber = p_m_extentlinenumber;
				source.m_extentcolumn = p_m_extentcolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		SelectFromInstancesWhere_c new_inst = new SelectFromInstancesWhere_c(
				modelRoot, p_m_statement_id, p_m_var_id, p_m_is_implicit,
				p_m_cardinality, p_m_where_clause_value_id, p_m_obj_id,
				p_m_extentlinenumber, p_m_extentcolumn);
		return new_inst;
	}
	public SelectFromInstancesWhere_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_var_id = IdAssigner.NULL_UUID;
		m_cardinality = "";
		m_where_clause_value_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SelectFromInstancesWhere_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SelectFromInstancesWhere_c)) {
			return false;
		}

		SelectFromInstancesWhere_c me = (SelectFromInstancesWhere_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((SelectFromInstancesWhere_c) elem)
								.getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(
				((SelectFromInstancesWhere_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SelectFromInstancesWhere_c)) {
			return false;
		}

		SelectFromInstancesWhere_c me = (SelectFromInstancesWhere_c) elem;
		if (!getStatement_idCachedValue().equals(
				((SelectFromInstancesWhere_c) elem)
						.getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_var_id;
	private boolean m_is_implicit;
	private String m_cardinality;
	private java.util.UUID m_where_clause_value_id;
	private int m_extentlinenumber;
	private int m_extentcolumn;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	Variable_c ResultVariable;
	public void relateAcrossR665To(Variable_c target) {
		relateAcrossR665To(target, true);
	}
	public void relateAcrossR665To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ResultVariable)
			return; // already related

		if (ResultVariable != target) {

			Object oldKey = getInstanceKey();

			if (ResultVariable != null) {

				ResultVariable.clearBackPointerR665To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectFromInstancesWhere_c.relateAcrossR665To(Variable_c target)",
									"Relate performed across R665 from Select From Instances Where to Variable without unrelate of prior instance.");
				}
			}

			ResultVariable = target;
			m_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR665To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR665From(Variable_c target) {
		unrelateAcrossR665From(target, true);
	}
	public void unrelateAcrossR665From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ResultVariable == null)
			return; // already unrelated

		if (target != ResultVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R665",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR665To(this);
		}

		if (ResultVariable != null) {

			m_var_id = ResultVariable.getVar_id();
			ResultVariable = null;
			target.removeRef();
		}
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			Variable_c[] targets) {
		return getOneACT_FIWOnR665(targets, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			Variable_c[] targets, ClassQueryInterface_c test) {
		SelectFromInstancesWhere_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FIWOnR665(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			Variable_c target) {
		return getOneACT_FIWOnR665(target, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			Variable_c target, boolean loadComponent) {
		return getOneACT_FIWOnR665(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FIWOnR665(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test) {
		return getOneACT_FIWOnR665(modelRoot, target, test, true);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR665(
			ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_FIWOnR665(modelRoot, target, test);
	}
	private static SelectFromInstancesWhere_c find_getOneACT_FIWOnR665(
			ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_SelectFromInstancesWhere_R665) {
				for (int i = 0; i < target.backPointer_SelectFromInstancesWhere_R665
						.size(); ++i) {
					SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) target.backPointer_SelectFromInstancesWhere_R665
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c[] targets) {
		return getManyACT_FIWsOnR665(targets, null);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c[] targets, boolean loadComponent) {
		return getManyACT_FIWsOnR665(targets, null, loadComponent);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_FIWsOnR665(targets, test, true);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectFromInstancesWhere_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_SelectFromInstancesWhere_R665) {
				for (int j = 0; j < targets[i].backPointer_SelectFromInstancesWhere_R665
						.size(); ++j) {
					SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) targets[i].backPointer_SelectFromInstancesWhere_R665
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectFromInstancesWhere_c[0];
		}
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c target) {
		return getManyACT_FIWsOnR665(target, null);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c target, boolean loadComponent) {
		return getManyACT_FIWsOnR665(target, null, loadComponent);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c target, ClassQueryInterface_c test) {
		return getManyACT_FIWsOnR665(target, test, true);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR665(
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new SelectFromInstancesWhere_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_SelectFromInstancesWhere_R665) {
			for (int i = 0; i < target.backPointer_SelectFromInstancesWhere_R665
					.size(); ++i) {
				SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) target.backPointer_SelectFromInstancesWhere_R665
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectFromInstancesWhere_c[0];
		}
	}

	// referring navigation

	Value_c WhereClauseValue;
	public void relateAcrossR610To(Value_c target) {
		relateAcrossR610To(target, true);
	}
	public void relateAcrossR610To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == WhereClauseValue)
			return; // already related

		if (WhereClauseValue != target) {

			Object oldKey = getInstanceKey();

			if (WhereClauseValue != null) {

				WhereClauseValue.clearBackPointerR610To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectFromInstancesWhere_c.relateAcrossR610To(Value_c target)",
									"Relate performed across R610 from Select From Instances Where to Value without unrelate of prior instance.");
				}
			}

			WhereClauseValue = target;
			m_where_clause_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR610To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR610From(Value_c target) {
		unrelateAcrossR610From(target, true);
	}
	public void unrelateAcrossR610From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (WhereClauseValue == null)
			return; // already unrelated

		if (target != WhereClauseValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R610",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR610To(this);
		}

		if (WhereClauseValue != null) {

			m_where_clause_value_id = WhereClauseValue.getValue_id();
			WhereClauseValue = null;
			target.removeRef();
		}
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(
			Value_c[] targets) {
		return getOneACT_FIWOnR610(targets, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(
			Value_c[] targets, ClassQueryInterface_c test) {
		SelectFromInstancesWhere_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FIWOnR610(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(Value_c target) {
		return getOneACT_FIWOnR610(target, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(
			Value_c target, boolean loadComponent) {
		return getOneACT_FIWOnR610(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(
			Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FIWOnR610(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		return getOneACT_FIWOnR610(modelRoot, target, test, true);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR610(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_FIWOnR610(modelRoot, target, test);
	}
	private static SelectFromInstancesWhere_c find_getOneACT_FIWOnR610(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) target.backPointer_SelectFromInstancesWhere_R610;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR610(
			Value_c[] targets) {
		return getManyACT_FIWsOnR610(targets, null);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR610(
			Value_c[] targets, boolean loadComponent) {
		return getManyACT_FIWsOnR610(targets, null, loadComponent);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR610(
			Value_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_FIWsOnR610(targets, test, true);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR610(
			Value_c[] targets, ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectFromInstancesWhere_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) targets[i].backPointer_SelectFromInstancesWhere_R610;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectFromInstancesWhere_c[0];
		}
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR610(
			Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_FIWsOnR610(targetArray);
		} else {
			SelectFromInstancesWhere_c[] result = new SelectFromInstancesWhere_c[0];
			return result;
		}
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR610(
			Value_c target, boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_FIWsOnR610(targetArray, loadComponent);
		} else {
			SelectFromInstancesWhere_c[] result = new SelectFromInstancesWhere_c[0];
			return result;
		}
	}

	// referring navigation

	ModelClass_c FromExtentOfModelClass;
	public void relateAcrossR676To(ModelClass_c target) {
		relateAcrossR676To(target, true);
	}
	public void relateAcrossR676To(ModelClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == FromExtentOfModelClass)
			return; // already related

		if (FromExtentOfModelClass != target) {

			Object oldKey = getInstanceKey();

			if (FromExtentOfModelClass != null) {

				FromExtentOfModelClass.clearBackPointerR676To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectFromInstancesWhere_c.relateAcrossR676To(ModelClass_c target)",
									"Relate performed across R676 from Select From Instances Where to Model Class without unrelate of prior instance.");
				}
			}

			FromExtentOfModelClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR676To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR676From(ModelClass_c target) {
		unrelateAcrossR676From(target, true);
	}
	public void unrelateAcrossR676From(ModelClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (FromExtentOfModelClass == null)
			return; // already unrelated

		if (target != FromExtentOfModelClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R676",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR676To(this);
		}

		if (FromExtentOfModelClass != null) {

			m_obj_id = FromExtentOfModelClass.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = FromExtentOfModelClass.getObj_idCachedValue();
			}
			FromExtentOfModelClass = null;
			target.removeRef();
		}
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelClass_c[] targets) {
		return getOneACT_FIWOnR676(targets, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		SelectFromInstancesWhere_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FIWOnR676(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelClass_c target) {
		return getOneACT_FIWOnR676(target, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelClass_c target, boolean loadComponent) {
		return getOneACT_FIWOnR676(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FIWOnR676(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test) {
		return getOneACT_FIWOnR676(modelRoot, target, test, true);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR676(
			ModelRoot modelRoot, ModelClass_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_FIWOnR676(modelRoot, target, test);
	}
	private static SelectFromInstancesWhere_c find_getOneACT_FIWOnR676(
			ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_SelectFromInstancesWhere_R676) {
				for (int i = 0; i < target.backPointer_SelectFromInstancesWhere_R676
						.size(); ++i) {
					SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) target.backPointer_SelectFromInstancesWhere_R676
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c[] targets) {
		return getManyACT_FIWsOnR676(targets, null);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c[] targets, boolean loadComponent) {
		return getManyACT_FIWsOnR676(targets, null, loadComponent);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_FIWsOnR676(targets, test, true);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectFromInstancesWhere_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_SelectFromInstancesWhere_R676) {
				for (int j = 0; j < targets[i].backPointer_SelectFromInstancesWhere_R676
						.size(); ++j) {
					SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) targets[i].backPointer_SelectFromInstancesWhere_R676
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectFromInstancesWhere_c[0];
		}
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c target) {
		return getManyACT_FIWsOnR676(target, null);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c target, boolean loadComponent) {
		return getManyACT_FIWsOnR676(target, null, loadComponent);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c target, ClassQueryInterface_c test) {
		return getManyACT_FIWsOnR676(target, test, true);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR676(
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SelectFromInstancesWhere_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_SelectFromInstancesWhere_R676) {
			for (int i = 0; i < target.backPointer_SelectFromInstancesWhere_R676
					.size(); ++i) {
				SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) target.backPointer_SelectFromInstancesWhere_R676
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectFromInstancesWhere_c[0];
		}
	}

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SelectFromInstancesWhere_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from Select From Instances Where to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			Statement_c[] targets) {
		return getOneACT_FIWOnR603(targets, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			Statement_c[] targets, ClassQueryInterface_c test) {
		SelectFromInstancesWhere_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FIWOnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			Statement_c target) {
		return getOneACT_FIWOnR603(target, null);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			Statement_c target, boolean loadComponent) {
		return getOneACT_FIWOnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FIWOnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_FIWOnR603(modelRoot, target, test, true);
	}

	public static SelectFromInstancesWhere_c getOneACT_FIWOnR603(
			ModelRoot modelRoot, Statement_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_FIWOnR603(modelRoot, target, test);
	}
	private static SelectFromInstancesWhere_c find_getOneACT_FIWOnR603(
			ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) target.backPointer_IsSubtypeSelectFromInstancesWhereIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR603(
			Statement_c[] targets) {
		return getManyACT_FIWsOnR603(targets, null);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR603(
			Statement_c[] targets, boolean loadComponent) {
		return getManyACT_FIWsOnR603(targets, null, loadComponent);
	}
	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR603(
			Statement_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_FIWsOnR603(targets, test, true);
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR603(
			Statement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SelectFromInstancesWhere_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SelectFromInstancesWhere_c source = (SelectFromInstancesWhere_c) targets[i].backPointer_IsSubtypeSelectFromInstancesWhereIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SelectFromInstancesWhere_c[0];
		}
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR603(
			Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_FIWsOnR603(targetArray);
		} else {
			SelectFromInstancesWhere_c[] result = new SelectFromInstancesWhere_c[0];
			return result;
		}
	}

	public static SelectFromInstancesWhere_c[] getManyACT_FIWsOnR603(
			Statement_c target, boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_FIWsOnR603(targetArray, loadComponent);
		} else {
			SelectFromInstancesWhere_c[] result = new SelectFromInstancesWhere_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ResultVariable == null) {
			// R665
			Variable_c relInst39418 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39418 == null) {
				relInst39418 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_var_id});
			}
			if (relInst39418 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39418 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_var_id});
					if (relInst39418 != null)
						break;
				}
			}
			//synchronized
			if (relInst39418 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39418) && !isProxy())) {
					relInst39418.relateAcrossR665To(this, notifyChanges);
				}
			}
		}

		if (WhereClauseValue == null) {
			// R610
			Value_c relInst39419 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_where_clause_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39419 == null) {
				relInst39419 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_where_clause_value_id});
			}
			if (relInst39419 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39419 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(
							new Object[]{m_where_clause_value_id});
					if (relInst39419 != null)
						break;
				}
			}
			//synchronized
			if (relInst39419 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39419) && !isProxy())) {
					relInst39419.relateAcrossR610To(this, notifyChanges);
				}
			}
		}

		if (FromExtentOfModelClass == null) {
			// R676
			ModelClass_c relInst39420 = (ModelClass_c) baseRoot
					.getInstanceList(ModelClass_c.class).get(
							new Object[]{m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39420 == null) {
				relInst39420 = (ModelClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ModelClass_c.class)
						.get(new Object[]{m_obj_id});
			}
			if (relInst39420 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39420 = (ModelClass_c) roots[i].getInstanceList(
							ModelClass_c.class).get(new Object[]{m_obj_id});
					if (relInst39420 != null)
						break;
				}
			}
			//synchronized
			if (relInst39420 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39420) && !isProxy())) {
					relInst39420.relateAcrossR676To(this, notifyChanges);
				}
			}
		}

		// R603
		Statement_c relInst39421 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39421 == null) {
			relInst39421 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst39421 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39421 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst39421 != null)
					break;
			}
		}
		//synchronized
		if (relInst39421 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39421) && !isProxy())) {
				relInst39421.relateAcrossR603To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R665
		// V_VAR
		inst = ResultVariable;
		unrelateAcrossR665From(ResultVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R610
		// V_VAL
		inst = WhereClauseValue;
		unrelateAcrossR610From(WhereClauseValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R676
		// O_OBJ
		inst = FromExtentOfModelClass;
		unrelateAcrossR676From(FromExtentOfModelClass, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SelectFromInstancesWhere_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SelectFromInstancesWhere_c inst = (SelectFromInstancesWhere_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SelectFromInstancesWhere_c SelectFromInstancesWhereInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SelectFromInstancesWhere_c result = findSelectFromInstancesWhereInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static SelectFromInstancesWhere_c findSelectFromInstancesWhereInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SelectFromInstancesWhere_c x = (SelectFromInstancesWhere_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static SelectFromInstancesWhere_c SelectFromInstancesWhereInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SelectFromInstancesWhereInstance(modelRoot, test, true);
	}

	public static SelectFromInstancesWhere_c SelectFromInstancesWhereInstance(
			ModelRoot modelRoot) {
		return SelectFromInstancesWhereInstance(modelRoot, null, true);
	}

	public static SelectFromInstancesWhere_c[] SelectFromInstancesWhereInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SelectFromInstancesWhere_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SelectFromInstancesWhere_c x = (SelectFromInstancesWhere_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SelectFromInstancesWhere_c[] ret_set = new SelectFromInstancesWhere_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SelectFromInstancesWhere_c[0];
			}
		}
	}
	public static SelectFromInstancesWhere_c[] SelectFromInstancesWhereInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SelectFromInstancesWhereInstances(modelRoot, test, true);
	}
	public static SelectFromInstancesWhere_c[] SelectFromInstancesWhereInstances(
			ModelRoot modelRoot) {
		return SelectFromInstancesWhereInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Select From Instances Where.dispose call: ";
		Variable_c testR665Inst = Variable_c.getOneV_VAROnR665(this, false);

		if (testR665Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "665 ";
		}
		Value_c testR610Inst = Value_c.getOneV_VALOnR610(this, false);

		if (testR610Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "610 ";
		}
		ModelClass_c testR676Inst = ModelClass_c.getOneO_OBJOnR676(this, false);

		if (testR676Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "676 ";
		}
		Statement_c testR603Inst1 = Statement_c
				.getOneACT_SMTOnR603(this, false);

		if (testR603Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Select From Instances Where", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("var_id")) {
			return true;
		}
		if (attributeName.equals("where_clause_value_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getVar_idLongBased() {
		if (ResultVariable != null) {
			return ResultVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getVar_id() {
		if (ResultVariable != null) {
			return ResultVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getVar_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_var_id))
			return m_var_id;
		else
			return getVar_id();
	}

	public void setVar_id(java.util.UUID newValue) {
		m_var_id = IdAssigner.preprocessUUID(newValue);
	}
	public boolean getIs_implicit() {
		return m_is_implicit;
	}

	public void setIs_implicit(boolean newValue) {
		m_is_implicit = newValue;
	}
	public String getCardinality() {
		return m_cardinality;
	}

	public void setCardinality(String newValue) {
		m_cardinality = newValue;
	}
	public long getWhere_clause_value_idLongBased() {
		if (WhereClauseValue != null) {
			return WhereClauseValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getWhere_clause_value_id() {
		if (WhereClauseValue != null) {
			return WhereClauseValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getWhere_clause_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_where_clause_value_id))
			return m_where_clause_value_id;
		else
			return getWhere_clause_value_id();
	}

	public void setWhere_clause_value_id(java.util.UUID newValue) {
		m_where_clause_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getExtentlinenumber() {
		return m_extentlinenumber;
	}

	public void setExtentlinenumber(int newValue) {
		m_extentlinenumber = newValue;
	}
	public int getExtentcolumn() {
		return m_extentcolumn;
	}

	public void setExtentcolumn(int newValue) {
		m_extentcolumn = newValue;
	}
	public long getObj_idLongBased() {
		if (FromExtentOfModelClass != null) {
			return FromExtentOfModelClass.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (FromExtentOfModelClass != null) {
			return FromExtentOfModelClass.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		m_obj_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Select From Instances Where", //$NON-NLS-1$
						" Operation entered: Select From Instances Where::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SelectFromInstancesWhere_c[] objs = SelectFromInstancesWhere_c
				.SelectFromInstancesWhereInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Select From Instances Where", //$NON-NLS-1$
						" Operation entered: Select From Instances Where::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SelectFromInstancesWhere_c_test39423_c
				implements
					ClassQueryInterface_c {
			SelectFromInstancesWhere_c_test39423_c(java.util.UUID p39424) {
				m_p39424 = p39424;
			}
			private java.util.UUID m_p39424;
			public boolean evaluate(Object candidate) {
				SelectFromInstancesWhere_c selected = (SelectFromInstancesWhere_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39424));
				return retval;
			}
		}

		SelectFromInstancesWhere_c[] objs39422 = SelectFromInstancesWhere_c
				.SelectFromInstancesWhereInstances(modelRoot,
						new SelectFromInstancesWhere_c_test39423_c(
								getStatement_id()));

		if (((objs39422.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Select From Instances Where", //$NON-NLS-1$
								"Consistency: Object: Select From Instances Where: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39422.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select From Instances Where: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39422.length), e);
			}
			retval = false;

		}

		if (((objs39422.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Select From Instances Where", //$NON-NLS-1$
								"Consistency: Object: Select From Instances Where: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39422.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select From Instances Where: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39422.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Select From Instances Where is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test39428_c implements ClassQueryInterface_c {
			Statement_c_test39428_c(java.util.UUID p39429) {
				m_p39429 = p39429;
			}
			private java.util.UUID m_p39429;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39429));
				return retval;
			}
		}

		Statement_c[] objs39427 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test39428_c(getStatement_id()));

		if (((objs39427.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Select From Instances Where", //$NON-NLS-1$
								"Consistency: Object: Select From Instances Where: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39427.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select From Instances Where: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39427.length), e);
			}
			retval = false;

		}

		// Select From Instances Where is a referring class in association: rel.Numb = 665
		// The participating class is: Variable
		class Variable_c_test39431_c implements ClassQueryInterface_c {
			Variable_c_test39431_c(java.util.UUID p39432) {
				m_p39432 = p39432;
			}
			private java.util.UUID m_p39432;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p39432));
				return retval;
			}
		}

		Variable_c[] objs39430 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test39431_c(getVar_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39430.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Select From Instances Where", //$NON-NLS-1$
								"Consistency: Object: Select From Instances Where: Association: 665: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39430.length)
										+ " Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select From Instances Where: Association: 665: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39430.length)
										+ " Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Select From Instances Where is a referring class in association: rel.Numb = 610
		// The participating class is: Value
		class Value_c_test39434_c implements ClassQueryInterface_c {
			Value_c_test39434_c(java.util.UUID p39435) {
				m_p39435 = p39435;
			}
			private java.util.UUID m_p39435;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p39435));
				return retval;
			}
		}

		Value_c[] objs39433 = Value_c.ValueInstances(modelRoot,
				new Value_c_test39434_c(getWhere_clause_value_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39433.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Select From Instances Where", //$NON-NLS-1$
								"Consistency: Object: Select From Instances Where: Association: 610: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39433.length)
										+ " Where_Clause_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select From Instances Where: Association: 610: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39433.length)
										+ " Where_Clause_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Select From Instances Where is a referring class in association: rel.Numb = 676
		// The participating class is: Model Class
		class ModelClass_c_test39437_c implements ClassQueryInterface_c {
			ModelClass_c_test39437_c(java.util.UUID p39438) {
				m_p39438 = p39438;
			}
			private java.util.UUID m_p39438;
			public boolean evaluate(Object candidate) {
				ModelClass_c selected = (ModelClass_c) candidate;
				boolean retval = false;
				retval = (selected.getObj_id().equals(m_p39438));
				return retval;
			}
		}

		ModelClass_c[] objs39436 = ModelClass_c.ModelClassInstances(modelRoot,
				new ModelClass_c_test39437_c(getObj_id()));

		if (((objs39436.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Select From Instances Where", //$NON-NLS-1$
								"Consistency: Object: Select From Instances Where: Association: 676: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39436.length)
										+ " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Select From Instances Where: Association: 676: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39436.length)
										+ " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Select From Instances Where",
				" Operation entered: SelectFromInstancesWhere::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR676(this);

		if (((v_obj != null))) {

			this.unrelateAcrossR676From(v_obj);

		}

		Variable_c v_var = Variable_c.getOneV_VAROnR665(this);

		if (((v_var != null))) {

			this.unrelateAcrossR665From(v_var);

			if ((!v_var.getDeclared())) {

				if (v_var != null) {
					v_var.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

		Value_c v_val = Value_c.getOneV_VALOnR610(this);

		if (((v_val != null))) {

			this.unrelateAcrossR610From(v_val);

			if (v_val != null) {
				v_val.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Select From Instances Where",
				" Operation entered: SelectFromInstancesWhere::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Select From Instances Where
