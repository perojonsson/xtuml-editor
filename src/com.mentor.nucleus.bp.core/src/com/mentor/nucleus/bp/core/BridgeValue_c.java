      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.BridgeValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_BRIDGE_VALUE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class BridgeValue_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public BridgeValue_c(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_brg_id,
       boolean      p_m_parmlistok,
       int          p_m_externalentitykeyletterslinenumber,
       int          p_m_externalentitykeyletterscolumn)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       m_parmlistok = p_m_parmlistok;
       m_externalentitykeyletterslinenumber = p_m_externalentitykeyletterslinenumber;
       m_externalentitykeyletterscolumn = p_m_externalentitykeyletterscolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_brg_id = IdAssigner.preprocessUUID(p_m_brg_id);
        
    Object [] key = {m_value_id};
    addInstanceToMap(key);
  }
  static public BridgeValue_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_brg_id,
       boolean      p_m_parmlistok,
       int          p_m_externalentitykeyletterslinenumber,
       int          p_m_externalentitykeyletterscolumn, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);
      BridgeValue_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_value_id};
          new_inst = (BridgeValue_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       new_inst.m_parmlistok = p_m_parmlistok;
       new_inst.m_externalentitykeyletterslinenumber = p_m_externalentitykeyletterslinenumber;
       new_inst.m_externalentitykeyletterscolumn = p_m_externalentitykeyletterscolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_brg_id = IdAssigner.preprocessUUID(p_m_brg_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new BridgeValue_c(modelRoot,
p_m_value_id,
p_m_brg_id,
p_m_parmlistok,
p_m_externalentitykeyletterslinenumber,
p_m_externalentitykeyletterscolumn
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public BridgeValue_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_brg_id,
       boolean      p_m_parmlistok,
       int          p_m_externalentitykeyletterslinenumber,
       int          p_m_externalentitykeyletterscolumn){
    InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);
    BridgeValue_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_value_id
            };
        source = (BridgeValue_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       source.m_parmlistok = p_m_parmlistok;
       source.m_externalentitykeyletterslinenumber = p_m_externalentitykeyletterslinenumber;
       source.m_externalentitykeyletterscolumn = p_m_externalentitykeyletterscolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_brg_id = IdAssigner.preprocessUUID(p_m_brg_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    BridgeValue_c new_inst = new BridgeValue_c(modelRoot,
p_m_value_id,
p_m_brg_id,
p_m_parmlistok,
p_m_externalentitykeyletterslinenumber,
p_m_externalentitykeyletterscolumn
);
    return new_inst;
  }
  public BridgeValue_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_value_id = IdAssigner.NULL_UUID;   
     m_brg_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_value_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_value_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_value_id !=  p_newKey ){
	
		m_value_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof BridgeValue_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof BridgeValue_c)) {
           return false;
       }
       
       BridgeValue_c me = (BridgeValue_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID.equals(((BridgeValue_c)elem).getValue_id())) && this != elem)) {
      	return false;
      }
      if (!getValue_id().equals(((BridgeValue_c)elem).getValue_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof BridgeValue_c)) {
           return false;
       }
       
       BridgeValue_c me = (BridgeValue_c)elem;
      if (!getValue_idCachedValue().equals(((BridgeValue_c)elem).getValue_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_value_id ;
  private boolean      m_parmlistok ;
  private int          m_externalentitykeyletterslinenumber ;
  private int          m_externalentitykeyletterscolumn ;
  private java.util.UUID         m_brg_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Value_c IsSupertypeValue ;
public void relateAcrossR801To(Value_c target)
{
	relateAcrossR801To(target, true);
}
public void relateAcrossR801To(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeValue) return;  // already related

    if ( IsSupertypeValue != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeValue != null) {
    
        IsSupertypeValue.clearBackPointerR801To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"BridgeValue_c.relateAcrossR801To(Value_c target)", 
			"Relate performed across R801 from Bridge Value to Value without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeValue = target ;
        m_value_id = target.getValue_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR801To(this);
        target.addRef();
    }
}
public void unrelateAcrossR801From(Value_c target)
{
	unrelateAcrossR801From(target, true);
}
public void unrelateAcrossR801From(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeValue == null) return;  // already unrelated
	
	if (target != IsSupertypeValue) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R801", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR801To(this);
    }
    

      if(IsSupertypeValue != null) {
      
        m_value_id = IsSupertypeValue.getValue_id();
        IsSupertypeValue = null ;
        target.removeRef();
    }
}

  
    
      
public static BridgeValue_c getOneV_BRVOnR801(Value_c [] targets)
{
    return getOneV_BRVOnR801(targets, null);
}

public static BridgeValue_c getOneV_BRVOnR801(Value_c [] targets, ClassQueryInterface_c test)
{
    BridgeValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_BRVOnR801(targets[i], test);
        }
    }

    return ret_val;
}

public static BridgeValue_c getOneV_BRVOnR801(Value_c target)
{
  return getOneV_BRVOnR801(target, null);
}

public static BridgeValue_c getOneV_BRVOnR801(Value_c target, boolean loadComponent)
{
    return getOneV_BRVOnR801(target.getModelRoot(), target, null, loadComponent);
}

public static BridgeValue_c getOneV_BRVOnR801(Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_BRVOnR801(target.getModelRoot(), target, test);
  }
  return null;
}

public static BridgeValue_c getOneV_BRVOnR801(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
	return getOneV_BRVOnR801(modelRoot, target, test, true);
}

public static BridgeValue_c getOneV_BRVOnR801(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_BRVOnR801(modelRoot,target,test);
}
private static BridgeValue_c find_getOneV_BRVOnR801(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    BridgeValue_c source = (BridgeValue_c)target.backPointer_IsSubtypeBridgeValueIsSubtype_R801;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static BridgeValue_c [] getManyV_BRVsOnR801(Value_c [] targets)
{
  return getManyV_BRVsOnR801(targets, null);
}
public static BridgeValue_c [] getManyV_BRVsOnR801(Value_c [] targets, boolean loadComponent)
{
  return getManyV_BRVsOnR801(targets, null, loadComponent);
}
public static BridgeValue_c [] getManyV_BRVsOnR801(Value_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_BRVsOnR801(targets, test, true);
}

public static BridgeValue_c [] getManyV_BRVsOnR801(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new BridgeValue_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      BridgeValue_c source = (BridgeValue_c)targets[i].backPointer_IsSubtypeBridgeValueIsSubtype_R801;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	BridgeValue_c[] ret_set = new BridgeValue_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new BridgeValue_c[0];
  }
  }

public static BridgeValue_c [] getManyV_BRVsOnR801(Value_c target)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyV_BRVsOnR801(targetArray);
  } else {
    BridgeValue_c [] result = new BridgeValue_c [0] ;
  return result ;
}
}

public static BridgeValue_c [] getManyV_BRVsOnR801(Value_c target, boolean loadComponent)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyV_BRVsOnR801(targetArray, loadComponent);
  } else {
    BridgeValue_c [] result = new BridgeValue_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Bridge_c Bridge ;
public void relateAcrossR828To(Bridge_c target)
{
	relateAcrossR828To(target, true);
}
public void relateAcrossR828To(Bridge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == Bridge) return;  // already related

    if ( Bridge != target ) {
    
    Object oldKey = getInstanceKey();

    if (Bridge != null) {
    
        Bridge.clearBackPointerR828To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"BridgeValue_c.relateAcrossR828To(Bridge_c target)", 
			"Relate performed across R828 from Bridge Value to Bridge without unrelate of prior instance.");  
		}
    }
                
    	Bridge = target ;
        m_brg_id = target.getBrg_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR828To(this);
        target.addRef();
    }
}
public void unrelateAcrossR828From(Bridge_c target)
{
	unrelateAcrossR828From(target, true);
}
public void unrelateAcrossR828From(Bridge_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (Bridge == null) return;  // already unrelated
	
	if (target != Bridge) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R828", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR828To(this);
    }
    

      if(Bridge != null) {
      
        m_brg_id = Bridge.getBrg_id();
        Bridge = null ;
        target.removeRef();
    }
}

  
    
      
public static BridgeValue_c getOneV_BRVOnR828(Bridge_c [] targets)
{
    return getOneV_BRVOnR828(targets, null);
}

public static BridgeValue_c getOneV_BRVOnR828(Bridge_c [] targets, ClassQueryInterface_c test)
{
    BridgeValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_BRVOnR828(targets[i], test);
        }
    }

    return ret_val;
}

public static BridgeValue_c getOneV_BRVOnR828(Bridge_c target)
{
  return getOneV_BRVOnR828(target, null);
}

public static BridgeValue_c getOneV_BRVOnR828(Bridge_c target, boolean loadComponent)
{
    return getOneV_BRVOnR828(target.getModelRoot(), target, null, loadComponent);
}

public static BridgeValue_c getOneV_BRVOnR828(Bridge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_BRVOnR828(target.getModelRoot(), target, test);
  }
  return null;
}

public static BridgeValue_c getOneV_BRVOnR828(ModelRoot modelRoot, Bridge_c target, ClassQueryInterface_c test)
{
	return getOneV_BRVOnR828(modelRoot, target, test, true);
}

public static BridgeValue_c getOneV_BRVOnR828(ModelRoot modelRoot, Bridge_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_BRVOnR828(modelRoot,target,test);
}
private static BridgeValue_c find_getOneV_BRVOnR828(ModelRoot modelRoot, Bridge_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_BridgeValue_R828) {
	    for ( int i = 0; i < target.backPointer_BridgeValue_R828.size(); ++i ) {
	      BridgeValue_c source = (BridgeValue_c)target.backPointer_BridgeValue_R828.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c [] targets)
{
  return getManyV_BRVsOnR828(targets, null);
}
public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c [] targets, boolean loadComponent)
{
  return getManyV_BRVsOnR828(targets, null, loadComponent);
}
public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_BRVsOnR828(targets, test, true);
}

public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new BridgeValue_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_BridgeValue_R828) {
	    for (int j = 0; j < targets[i].backPointer_BridgeValue_R828.size(); ++j) {
	      BridgeValue_c source = (BridgeValue_c)targets[i].backPointer_BridgeValue_R828.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	BridgeValue_c[] ret_set = new BridgeValue_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new BridgeValue_c[0];
  }
  }

public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c target)
{
  return getManyV_BRVsOnR828(target, null);
}

public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c target, boolean loadComponent)
{
  return getManyV_BRVsOnR828(target, null, loadComponent);
}

public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c target, ClassQueryInterface_c test)
{
	return getManyV_BRVsOnR828(target, test, true);
}

public static BridgeValue_c [] getManyV_BRVsOnR828(Bridge_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new BridgeValue_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_BridgeValue_R828) {
    for (int i = 0; i < target.backPointer_BridgeValue_R828.size(); ++i) {
      BridgeValue_c source = (BridgeValue_c)target.backPointer_BridgeValue_R828.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		BridgeValue_c[] ret_set = new BridgeValue_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new BridgeValue_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ActualParameter_c> backPointer_HasActualParameterHas_R810 = new ArrayList<ActualParameter_c>();

public void setActualParameterOrderInChildListR810(ActualParameter_c target, int index) {
	unrelateAcrossR810From(target);
	ActualParameter_c[] elements = ActualParameter_c.getManyV_PARsOnR810(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR810From((ActualParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR810To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR810To((ActualParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR810To(ActualParameter_c target)
{
  if (target != null) {
    target.relateAcrossR810To(this, true) ;
  }
}

public void relateAcrossR810To(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR810To(this, notifyChanges) ;
  }
}

public void setBackPointerR810To(ActualParameter_c target)
{
  	synchronized (backPointer_HasActualParameterHas_R810) {
		backPointer_HasActualParameterHas_R810.add(target);
	}
}

public void unrelateAcrossR810From(ActualParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR810From(this, true) ;
  }
}

public void unrelateAcrossR810From(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR810From(this, notifyChanges) ;
  }
}

public void clearBackPointerR810To(ActualParameter_c target)
{
  synchronized (backPointer_HasActualParameterHas_R810) {
	    backPointer_HasActualParameterHas_R810.remove(target);
	}
}

public static BridgeValue_c getOneV_BRVOnR810(ActualParameter_c [] targets)
{
    return getOneV_BRVOnR810(targets, null);
}

public static BridgeValue_c getOneV_BRVOnR810(ActualParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_BRVOnR810(targets, test, true);
}

public static BridgeValue_c getOneV_BRVOnR810(ActualParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    BridgeValue_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             BridgeValue_c candidate_val = getOneV_BRVOnR810(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_BRVOnR810(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static BridgeValue_c getOneV_BRVOnR810(ActualParameter_c target)
{
	return getOneV_BRVOnR810(target, true);
}
public static BridgeValue_c getOneV_BRVOnR810(ActualParameter_c target, boolean loadComponent)
{
  if (target != null) {
    return target.BridgeValue ;
  } else {
    return null;
  }
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_BRVsOnR810(targets, test, true);
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new BridgeValue_c[0];
  
  
  LinkedHashSet<BridgeValue_c> elementsSet = new LinkedHashSet<BridgeValue_c>();
  for (int i = 0; i < targets.length; i++) {
    BridgeValue_c associate = targets[i].BridgeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  BridgeValue_c[] result = new BridgeValue_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c [] targets)
{
  return getManyV_BRVsOnR810(targets, null);
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActualParameter_c [] targetArray = new ActualParameter_c[1];
    targetArray[0] = target;
    return getManyV_BRVsOnR810(targetArray, test, loadComponent);
  } else {
    BridgeValue_c [] result = new BridgeValue_c [0] ;
    return result ;
  }
  
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyV_BRVsOnR810(target, null, true);
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c target)
{
    return getManyV_BRVsOnR810(target, null, true);
}

public static BridgeValue_c [] getManyV_BRVsOnR810(ActualParameter_c target, boolean loadComponent)
{
    return getManyV_BRVsOnR810(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R801
      Value_c relInst38271 = (Value_c) baseRoot.getInstanceList(Value_c.class).get(new Object[] {m_value_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38271 == null) {
      			relInst38271 = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).get(new Object[] {m_value_id});
      		}
			if (relInst38271 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38271 = (Value_c) roots[i].getInstanceList(Value_c.class).get(new Object[] {m_value_id});
					if (relInst38271 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38271 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38271) && !isProxy())) {
	      relInst38271.relateAcrossR801To(this, notifyChanges);
	  }
	  }
	          

	if (Bridge == null) {          
      // R828
      Bridge_c relInst38272 = (Bridge_c) baseRoot.getInstanceList(Bridge_c.class).get(new Object[] {m_brg_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38272 == null) {
      			relInst38272 = (Bridge_c) Ooaofooa.getDefaultInstance().getInstanceList(Bridge_c.class).get(new Object[] {m_brg_id});
      		}
			if (relInst38272 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38272 = (Bridge_c) roots[i].getInstanceList(Bridge_c.class).get(new Object[] {m_brg_id});
					if (relInst38272 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38272 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38272) && !isProxy())) {
	      relInst38272.relateAcrossR828To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R801
      // V_VAL
		  inst=IsSupertypeValue;
			unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R828
      // S_BRG
		  inst=Bridge;
			unrelateAcrossR828From(Bridge, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final BridgeValue_c inst = (BridgeValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static BridgeValue_c BridgeValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		BridgeValue_c result=findBridgeValueInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static BridgeValue_c findBridgeValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				BridgeValue_c x = (BridgeValue_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static BridgeValue_c BridgeValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return BridgeValueInstance(modelRoot,test,true);
  }
  
  public static BridgeValue_c BridgeValueInstance(ModelRoot modelRoot)
  {
	 return BridgeValueInstance(modelRoot,null,true);
  }

  public static BridgeValue_c [] BridgeValueInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(BridgeValue_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					BridgeValue_c x = (BridgeValue_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				BridgeValue_c[] ret_set = new BridgeValue_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new BridgeValue_c[0];
			}		
		} 
  }
  public static BridgeValue_c [] BridgeValueInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  BridgeValueInstances(modelRoot,test,true);
  }
  public static BridgeValue_c [] BridgeValueInstances(ModelRoot modelRoot)
  {
	return BridgeValueInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Bridge Value.dispose call: ";
	Value_c testR801Inst4 = Value_c.getOneV_VALOnR801(this, false);

	if ( testR801Inst4 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "801 ";
	}
	ActualParameter_c testR810Inst = ActualParameter_c.getOneV_PAROnR810(this, false);

	if ( testR810Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "810 ";	
	}
	Bridge_c testR828Inst = Bridge_c.getOneS_BRGOnR828(this, false);

	if ( testR828Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "828 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Bridge Value", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("value_id")){
         return true;
      }
      if(attributeName.equals("brg_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getValue_idLongBased()
  {
    if ( IsSupertypeValue != null )
    {
      return IsSupertypeValue.getValue_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getValue_id()
  {
    if ( IsSupertypeValue != null )
    {
      return IsSupertypeValue.getValue_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeValue != null );
 
 }                  

  public java.util.UUID getValue_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_value_id) )
      return m_value_id;
    else
      return getValue_id();
  }
  
  public void setValue_id(java.util.UUID newValue)
  {
   m_value_id = IdAssigner.preprocessUUID(newValue);
  }
  public boolean getParmlistok()
  {
    return m_parmlistok ;
  }


  public void setParmlistok(boolean newValue)
  {
   m_parmlistok = newValue ;
  }
  public int getExternalentitykeyletterslinenumber()
  {
    return m_externalentitykeyletterslinenumber ;
  }


  public void setExternalentitykeyletterslinenumber(int newValue)
  {
   m_externalentitykeyletterslinenumber = newValue ;
  }
  public int getExternalentitykeyletterscolumn()
  {
    return m_externalentitykeyletterscolumn ;
  }


  public void setExternalentitykeyletterscolumn(int newValue)
  {
   m_externalentitykeyletterscolumn = newValue ;
  }
  public long getBrg_idLongBased()
  {
    if ( Bridge != null )
    {
      return Bridge.getBrg_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getBrg_id()
  {
    if ( Bridge != null )
    {
      return Bridge.getBrg_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getBrg_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_brg_id) )
      return m_brg_id;
    else
      return getBrg_id();
  }
  
  public void setBrg_id(java.util.UUID newValue)
  {
   m_brg_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Bridge Value", //$NON-NLS-1$
	  " Operation entered: Bridge Value::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     BridgeValue_c [] objs = BridgeValue_c.BridgeValueInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Bridge Value", //$NON-NLS-1$
	  " Operation entered: Bridge Value::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class BridgeValue_c_test38274_c implements ClassQueryInterface_c
    {
	  BridgeValue_c_test38274_c( java.util.UUID            p38275 ) {
	  m_p38275 = p38275;
	  }
	  private java.util.UUID             m_p38275; 
	  public boolean evaluate (Object candidate)
	  {
	      BridgeValue_c selected = (BridgeValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p38275));
	      return retval;
	  }
    }

    BridgeValue_c [] objs38273 = 
    BridgeValue_c.BridgeValueInstances(modelRoot, new BridgeValue_c_test38274_c(getValue_id())) ;

    if ( (  (objs38273.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Bridge Value", //$NON-NLS-1$
           "Consistency: Object: Bridge Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38273.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Bridge Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38273.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38273.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Bridge Value", //$NON-NLS-1$
           "Consistency: Object: Bridge Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38273.length )  + " Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Bridge Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38273.length )  + " Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Bridge Value is a subtype in association: rel.Numb = 801
          // The supertype class is: Value
    class Value_c_test38279_c implements ClassQueryInterface_c
    {
	  Value_c_test38279_c( java.util.UUID            p38280 ) {
	  m_p38280 = p38280;
	  }
	  private java.util.UUID             m_p38280; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p38280));
	      return retval;
	  }
    }

    Value_c [] objs38278 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test38279_c(getValue_id())) ;

    if ( (  (objs38278.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Bridge Value", //$NON-NLS-1$
           "Consistency: Object: Bridge Value: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38278.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Bridge Value: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38278.length )  , e); 
      }
      retval = false;

    }

          // Bridge Value is a referring class in association: rel.Numb = 828
          // The participating class is: Bridge
    class Bridge_c_test38282_c implements ClassQueryInterface_c
    {
	  Bridge_c_test38282_c( java.util.UUID            p38283 ) {
	  m_p38283 = p38283;
	  }
	  private java.util.UUID             m_p38283; 
	  public boolean evaluate (Object candidate)
	  {
	      Bridge_c selected = (Bridge_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBrg_id().equals(m_p38283));
	      return retval;
	  }
    }

    Bridge_c [] objs38281 = 
    Bridge_c.BridgeInstances(modelRoot, new Bridge_c_test38282_c(getBrg_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs38281.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Bridge Value", //$NON-NLS-1$
           "Consistency: Object: Bridge Value: Association: 828: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38281.length )  + " Brg_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Bridge Value: Association: 828: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38281.length )  + " Brg_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Bridge Value is a participating class in association: rel.Numb = 810
             // Object: Actual Parameter
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Bridge Value", " Operation entered: BridgeValue::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Bridge_c v_brg = Bridge_c.getOneS_BRGOnR828(this);


if ( (  !  (v_brg == null)) )
{

this.unrelateAcrossR828From(v_brg);



}

ActualParameter_c [] v_parm_set = ActualParameter_c.getManyV_PARsOnR810(this);


ActualParameter_c  v_parm = null;
for ( int i37050 = 0; i37050 < v_parm_set.length; i37050++)
{
  v_parm = v_parm_set[i37050] ;

this.unrelateAcrossR810From(v_parm);


if (v_parm != null) {
v_parm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

delete() ;



   } // End dispose
  public  void Getvalue(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Bridge Value", " Operation entered: BridgeValue::Getvalue") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End getValue
  public  boolean      Setupparametervalues(final java.util.UUID         p_Stack_frame_id,final java.util.UUID         p_Target_stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Bridge Value", " Operation entered: BridgeValue::Setupparametervalues") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End setupParameterValues

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Bridge Value
