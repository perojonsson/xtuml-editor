package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ElseifStmt_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ELSEIF_STMT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ElseifStmt_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ElseifStmt_c(ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_block_id, java.util.UUID p_m_value_id,
			java.util.UUID p_m_if_statement_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_if_statement_id = IdAssigner.preprocessUUID(p_m_if_statement_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public ElseifStmt_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			java.util.UUID p_m_value_id, java.util.UUID p_m_if_statement_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);
		ElseifStmt_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (ElseifStmt_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_if_statement_id = IdAssigner
						.preprocessUUID(p_m_if_statement_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ElseifStmt_c(modelRoot, p_m_statement_id,
					p_m_block_id, p_m_value_id, p_m_if_statement_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ElseifStmt_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			java.util.UUID p_m_value_id, java.util.UUID p_m_if_statement_id) {
		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);
		ElseifStmt_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (ElseifStmt_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_if_statement_id = IdAssigner
						.preprocessUUID(p_m_if_statement_id);

				return source;
			}
		}
		// there is no instance matching the id
		ElseifStmt_c new_inst = new ElseifStmt_c(modelRoot, p_m_statement_id,
				p_m_block_id, p_m_value_id, p_m_if_statement_id);
		return new_inst;
	}
	public ElseifStmt_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_block_id = IdAssigner.NULL_UUID;
		m_value_id = IdAssigner.NULL_UUID;
		m_if_statement_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ElseifStmt_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ElseifStmt_c)) {
			return false;
		}

		ElseifStmt_c me = (ElseifStmt_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((ElseifStmt_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(((ElseifStmt_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ElseifStmt_c)) {
			return false;
		}

		ElseifStmt_c me = (ElseifStmt_c) elem;
		if (!getStatement_idCachedValue().equals(
				((ElseifStmt_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_block_id;
	private java.util.UUID m_value_id;
	private java.util.UUID m_if_statement_id;

	// declare association references from this class

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseifStmt_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from ElseIf Stmt to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static ElseifStmt_c getOneACT_ELOnR603(Statement_c[] targets) {
		return getOneACT_ELOnR603(targets, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		ElseifStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_ELOnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseifStmt_c getOneACT_ELOnR603(Statement_c target) {
		return getOneACT_ELOnR603(target, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR603(Statement_c target,
			boolean loadComponent) {
		return getOneACT_ELOnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseifStmt_c getOneACT_ELOnR603(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_ELOnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseifStmt_c getOneACT_ELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_ELOnR603(modelRoot, target, test, true);
	}

	public static ElseifStmt_c getOneACT_ELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_ELOnR603(modelRoot, target, test);
	}
	private static ElseifStmt_c find_getOneACT_ELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ElseifStmt_c source = (ElseifStmt_c) target.backPointer_IsSubtypeElseifStmtIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR603(Statement_c[] targets) {
		return getManyACT_ELsOnR603(targets, null);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR603(Statement_c[] targets,
			boolean loadComponent) {
		return getManyACT_ELsOnR603(targets, null, loadComponent);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR603(targets, test, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseifStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ElseifStmt_c source = (ElseifStmt_c) targets[i].backPointer_IsSubtypeElseifStmtIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ElseifStmt_c[] ret_set = new ElseifStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseifStmt_c[0];
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR603(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR603(targetArray);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR603(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR603(targetArray, loadComponent);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}
	}

	// referring navigation

	IfStmt_c IfStmt;
	public void relateAcrossR682To(IfStmt_c target) {
		relateAcrossR682To(target, true);
	}
	public void relateAcrossR682To(IfStmt_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IfStmt)
			return; // already related

		if (IfStmt != target) {

			Object oldKey = getInstanceKey();

			if (IfStmt != null) {

				IfStmt.clearBackPointerR682To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseifStmt_c.relateAcrossR682To(IfStmt_c target)",
									"Relate performed across R682 from ElseIf Stmt to If Stmt without unrelate of prior instance.");
				}
			}

			IfStmt = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_if_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR682To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR682From(IfStmt_c target) {
		unrelateAcrossR682From(target, true);
	}
	public void unrelateAcrossR682From(IfStmt_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IfStmt == null)
			return; // already unrelated

		if (target != IfStmt) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R682",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR682To(this);
		}

		if (IfStmt != null) {

			m_if_statement_id = IfStmt.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_if_statement_id)) {
				m_if_statement_id = IfStmt.getStatement_idCachedValue();
			}
			IfStmt = null;
			target.removeRef();
		}
	}

	public static ElseifStmt_c getOneACT_ELOnR682(IfStmt_c[] targets) {
		return getOneACT_ELOnR682(targets, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR682(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		ElseifStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_ELOnR682(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseifStmt_c getOneACT_ELOnR682(IfStmt_c target) {
		return getOneACT_ELOnR682(target, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR682(IfStmt_c target,
			boolean loadComponent) {
		return getOneACT_ELOnR682(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseifStmt_c getOneACT_ELOnR682(IfStmt_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_ELOnR682(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseifStmt_c getOneACT_ELOnR682(ModelRoot modelRoot,
			IfStmt_c target, ClassQueryInterface_c test) {
		return getOneACT_ELOnR682(modelRoot, target, test, true);
	}

	public static ElseifStmt_c getOneACT_ELOnR682(ModelRoot modelRoot,
			IfStmt_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_ELOnR682(modelRoot, target, test);
	}
	private static ElseifStmt_c find_getOneACT_ELOnR682(ModelRoot modelRoot,
			IfStmt_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasElseifStmtHas_R682) {
				for (int i = 0; i < target.backPointer_HasElseifStmtHas_R682
						.size(); ++i) {
					ElseifStmt_c source = (ElseifStmt_c) target.backPointer_HasElseifStmtHas_R682
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c[] targets) {
		return getManyACT_ELsOnR682(targets, null);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c[] targets,
			boolean loadComponent) {
		return getManyACT_ELsOnR682(targets, null, loadComponent);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR682(targets, test, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseifStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasElseifStmtHas_R682) {
				for (int j = 0; j < targets[i].backPointer_HasElseifStmtHas_R682
						.size(); ++j) {
					ElseifStmt_c source = (ElseifStmt_c) targets[i].backPointer_HasElseifStmtHas_R682
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ElseifStmt_c[] ret_set = new ElseifStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseifStmt_c[0];
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c target) {
		return getManyACT_ELsOnR682(target, null);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c target,
			boolean loadComponent) {
		return getManyACT_ELsOnR682(target, null, loadComponent);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR682(target, test, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR682(IfStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ElseifStmt_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasElseifStmtHas_R682) {
			for (int i = 0; i < target.backPointer_HasElseifStmtHas_R682.size(); ++i) {
				ElseifStmt_c source = (ElseifStmt_c) target.backPointer_HasElseifStmtHas_R682
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ElseifStmt_c[] ret_set = new ElseifStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseifStmt_c[0];
		}
	}

	// referring navigation

	Block_c ControlsBlock;
	public void relateAcrossR658To(Block_c target) {
		relateAcrossR658To(target, true);
	}
	public void relateAcrossR658To(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ControlsBlock)
			return; // already related

		if (ControlsBlock != target) {

			Object oldKey = getInstanceKey();

			if (ControlsBlock != null) {

				ControlsBlock.clearBackPointerR658To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseifStmt_c.relateAcrossR658To(Block_c target)",
									"Relate performed across R658 from ElseIf Stmt to Block without unrelate of prior instance.");
				}
			}

			ControlsBlock = target;
			m_block_id = target.getBlock_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR658To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR658From(Block_c target) {
		unrelateAcrossR658From(target, true);
	}
	public void unrelateAcrossR658From(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ControlsBlock == null)
			return; // already unrelated

		if (target != ControlsBlock) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R658",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR658To(this);
		}

		if (ControlsBlock != null) {

			m_block_id = ControlsBlock.getBlock_id();
			ControlsBlock = null;
			target.removeRef();
		}
	}

	public static ElseifStmt_c getOneACT_ELOnR658(Block_c[] targets) {
		return getOneACT_ELOnR658(targets, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR658(Block_c[] targets,
			ClassQueryInterface_c test) {
		ElseifStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_ELOnR658(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseifStmt_c getOneACT_ELOnR658(Block_c target) {
		return getOneACT_ELOnR658(target, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR658(Block_c target,
			boolean loadComponent) {
		return getOneACT_ELOnR658(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseifStmt_c getOneACT_ELOnR658(Block_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_ELOnR658(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseifStmt_c getOneACT_ELOnR658(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		return getOneACT_ELOnR658(modelRoot, target, test, true);
	}

	public static ElseifStmt_c getOneACT_ELOnR658(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_ELOnR658(modelRoot, target, test);
	}
	private static ElseifStmt_c find_getOneACT_ELOnR658(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ElseifStmt_c source = (ElseifStmt_c) target.backPointer_ElseifStmt_R658;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR658(Block_c[] targets) {
		return getManyACT_ELsOnR658(targets, null);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR658(Block_c[] targets,
			boolean loadComponent) {
		return getManyACT_ELsOnR658(targets, null, loadComponent);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR658(Block_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR658(targets, test, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR658(Block_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseifStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ElseifStmt_c source = (ElseifStmt_c) targets[i].backPointer_ElseifStmt_R658;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ElseifStmt_c[] ret_set = new ElseifStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseifStmt_c[0];
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR658(Block_c target) {
		if (target != null) {
			Block_c[] targetArray = new Block_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR658(targetArray);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR658(Block_c target,
			boolean loadComponent) {
		if (target != null) {
			Block_c[] targetArray = new Block_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR658(targetArray, loadComponent);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}
	}

	// referring navigation

	Value_c TestResultValue;
	public void relateAcrossR659To(Value_c target) {
		relateAcrossR659To(target, true);
	}
	public void relateAcrossR659To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == TestResultValue)
			return; // already related

		if (TestResultValue != target) {

			Object oldKey = getInstanceKey();

			if (TestResultValue != null) {

				TestResultValue.clearBackPointerR659To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ElseifStmt_c.relateAcrossR659To(Value_c target)",
									"Relate performed across R659 from ElseIf Stmt to Value without unrelate of prior instance.");
				}
			}

			TestResultValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR659To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR659From(Value_c target) {
		unrelateAcrossR659From(target, true);
	}
	public void unrelateAcrossR659From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (TestResultValue == null)
			return; // already unrelated

		if (target != TestResultValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R659",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR659To(this);
		}

		if (TestResultValue != null) {

			m_value_id = TestResultValue.getValue_id();
			TestResultValue = null;
			target.removeRef();
		}
	}

	public static ElseifStmt_c getOneACT_ELOnR659(Value_c[] targets) {
		return getOneACT_ELOnR659(targets, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR659(Value_c[] targets,
			ClassQueryInterface_c test) {
		ElseifStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_ELOnR659(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ElseifStmt_c getOneACT_ELOnR659(Value_c target) {
		return getOneACT_ELOnR659(target, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR659(Value_c target,
			boolean loadComponent) {
		return getOneACT_ELOnR659(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ElseifStmt_c getOneACT_ELOnR659(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_ELOnR659(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ElseifStmt_c getOneACT_ELOnR659(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneACT_ELOnR659(modelRoot, target, test, true);
	}

	public static ElseifStmt_c getOneACT_ELOnR659(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_ELOnR659(modelRoot, target, test);
	}
	private static ElseifStmt_c find_getOneACT_ELOnR659(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ElseifStmt_c source = (ElseifStmt_c) target.backPointer_ElseifStmt_R659;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR659(Value_c[] targets) {
		return getManyACT_ELsOnR659(targets, null);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR659(Value_c[] targets,
			boolean loadComponent) {
		return getManyACT_ELsOnR659(targets, null, loadComponent);
	}
	public static ElseifStmt_c[] getManyACT_ELsOnR659(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR659(targets, test, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR659(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ElseifStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ElseifStmt_c source = (ElseifStmt_c) targets[i].backPointer_ElseifStmt_R659;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ElseifStmt_c[] ret_set = new ElseifStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ElseifStmt_c[0];
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR659(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR659(targetArray);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR659(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR659(targetArray, loadComponent);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	IfStmt_c backPointer_IfStmt_R690;

	public void setIfStmtOrderInChildListR690(IfStmt_c target, int index) {
		unrelateAcrossR690From(target);
		IfStmt_c[] elements = IfStmt_c.getManyACT_IFsOnR690(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR690From((IfStmt_c) elements[i]);
			}
			count++;
		}
		relateAcrossR690To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR690To((IfStmt_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR690To(IfStmt_c target) {
		if (target != null) {
			target.relateAcrossR690To(this, true);
		}
	}

	public void relateAcrossR690To(IfStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR690To(this, notifyChanges);
		}
	}

	public void setBackPointerR690To(IfStmt_c target) {
		backPointer_IfStmt_R690 = target;
	}

	public void unrelateAcrossR690From(IfStmt_c target) {
		if (target != null) {
			target.unrelateAcrossR690From(this, true);
		}
	}

	public void unrelateAcrossR690From(IfStmt_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR690From(this, notifyChanges);
		}
	}

	public void clearBackPointerR690To(IfStmt_c target) {
		if (target == backPointer_IfStmt_R690) {
			backPointer_IfStmt_R690 = null;
		}
	}

	public static ElseifStmt_c getOneACT_ELOnR690(IfStmt_c[] targets) {
		return getOneACT_ELOnR690(targets, null);
	}

	public static ElseifStmt_c getOneACT_ELOnR690(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getOneACT_ELOnR690(targets, test, true);
	}

	public static ElseifStmt_c getOneACT_ELOnR690(IfStmt_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ElseifStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ElseifStmt_c candidate_val = getOneACT_ELOnR690(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneACT_ELOnR690(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ElseifStmt_c getOneACT_ELOnR690(IfStmt_c target) {
		return getOneACT_ELOnR690(target, true);
	}
	public static ElseifStmt_c getOneACT_ELOnR690(IfStmt_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.WasExecutingWhenHaltedElseifStmt;
		} else {
			return null;
		}
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR690(IfStmt_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR690(targets, test, true);
	}

	public static ElseifStmt_c [] getManyACT_ELsOnR690(IfStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ElseifStmt_c[0];
  
  
  LinkedHashSet<ElseifStmt_c> elementsSet = new LinkedHashSet<ElseifStmt_c>();
  for (int i = 0; i < targets.length; i++) {
    ElseifStmt_c associate = targets[i].WasExecutingWhenHaltedElseifStmt;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ElseifStmt_c[] result = new ElseifStmt_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ElseifStmt_c[] getManyACT_ELsOnR690(IfStmt_c[] targets) {
		return getManyACT_ELsOnR690(targets, null);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR690(IfStmt_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			IfStmt_c[] targetArray = new IfStmt_c[1];
			targetArray[0] = target;
			return getManyACT_ELsOnR690(targetArray, test, loadComponent);
		} else {
			ElseifStmt_c[] result = new ElseifStmt_c[0];
			return result;
		}

	}

	public static ElseifStmt_c[] getManyACT_ELsOnR690(IfStmt_c target,
			ClassQueryInterface_c test) {
		return getManyACT_ELsOnR690(target, null, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR690(IfStmt_c target) {
		return getManyACT_ELsOnR690(target, null, true);
	}

	public static ElseifStmt_c[] getManyACT_ELsOnR690(IfStmt_c target,
			boolean loadComponent) {
		return getManyACT_ELsOnR690(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R603
		Statement_c relInst57902 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst57902 == null) {
			relInst57902 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst57902 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst57902 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst57902 != null)
					break;
			}
		}
		//synchronized
		if (relInst57902 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst57902) && !isProxy())) {
				relInst57902.relateAcrossR603To(this, notifyChanges);
			}
		}

		if (IfStmt == null) {
			// R682
			IfStmt_c relInst57903 = (IfStmt_c) baseRoot.getInstanceList(
					IfStmt_c.class).get(new Object[]{m_if_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57903 == null) {
				relInst57903 = (IfStmt_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(IfStmt_c.class)
						.get(new Object[]{m_if_statement_id});
			}
			if (relInst57903 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57903 = (IfStmt_c) roots[i].getInstanceList(
							IfStmt_c.class)
							.get(new Object[]{m_if_statement_id});
					if (relInst57903 != null)
						break;
				}
			}
			//synchronized
			if (relInst57903 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57903) && !isProxy())) {
					relInst57903.relateAcrossR682To(this, notifyChanges);
				}
			}
		}

		if (ControlsBlock == null) {
			// R658
			Block_c relInst57904 = (Block_c) baseRoot.getInstanceList(
					Block_c.class).get(new Object[]{m_block_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57904 == null) {
				relInst57904 = (Block_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Block_c.class)
						.get(new Object[]{m_block_id});
			}
			if (relInst57904 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57904 = (Block_c) roots[i].getInstanceList(
							Block_c.class).get(new Object[]{m_block_id});
					if (relInst57904 != null)
						break;
				}
			}
			//synchronized
			if (relInst57904 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57904) && !isProxy())) {
					relInst57904.relateAcrossR658To(this, notifyChanges);
				}
			}
		}

		if (TestResultValue == null) {
			// R659
			Value_c relInst57905 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57905 == null) {
				relInst57905 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_value_id});
			}
			if (relInst57905 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57905 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_value_id});
					if (relInst57905 != null)
						break;
				}
			}
			//synchronized
			if (relInst57905 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57905) && !isProxy())) {
					relInst57905.relateAcrossR659To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R682
		// ACT_IF
		inst = IfStmt;
		unrelateAcrossR682From(IfStmt, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R658
		// ACT_BLK
		inst = ControlsBlock;
		unrelateAcrossR658From(ControlsBlock, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R659
		// V_VAL
		inst = TestResultValue;
		unrelateAcrossR659From(TestResultValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ElseifStmt_c inst = (ElseifStmt_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ElseifStmt_c ElseifStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ElseifStmt_c result = findElseifStmtInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static ElseifStmt_c findElseifStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElseifStmt_c x = (ElseifStmt_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ElseifStmt_c ElseifStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ElseifStmtInstance(modelRoot, test, true);
	}

	public static ElseifStmt_c ElseifStmtInstance(ModelRoot modelRoot) {
		return ElseifStmtInstance(modelRoot, null, true);
	}

	public static ElseifStmt_c[] ElseifStmtInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ElseifStmt_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ElseifStmt_c x = (ElseifStmt_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ElseifStmt_c[] ret_set = new ElseifStmt_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ElseifStmt_c[0];
			}
		}
	}
	public static ElseifStmt_c[] ElseifStmtInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ElseifStmtInstances(modelRoot, test, true);
	}
	public static ElseifStmt_c[] ElseifStmtInstances(ModelRoot modelRoot) {
		return ElseifStmtInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the ElseIf Stmt.dispose call: ";
		Statement_c testR603Inst5 = Statement_c
				.getOneACT_SMTOnR603(this, false);

		if (testR603Inst5 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		IfStmt_c testR690Inst = IfStmt_c.getOneACT_IFOnR690(this, false);

		if (testR690Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "690 ";
		}
		IfStmt_c testR682Inst = IfStmt_c.getOneACT_IFOnR682(this, false);

		if (testR682Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "682 ";
		}
		Block_c testR658Inst = Block_c.getOneACT_BLKOnR658(this, false);

		if (testR658Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "658 ";
		}
		Value_c testR659Inst = Value_c.getOneV_VALOnR659(this, false);

		if (testR659Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "659 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "ElseIf Stmt", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("block_id")) {
			return true;
		}
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("if_statement_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getBlock_idLongBased() {
		if (ControlsBlock != null) {
			return ControlsBlock.getBlock_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBlock_id() {
		if (ControlsBlock != null) {
			return ControlsBlock.getBlock_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBlock_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_block_id))
			return m_block_id;
		else
			return getBlock_id();
	}

	public void setBlock_id(java.util.UUID newValue) {
		m_block_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getValue_idLongBased() {
		if (TestResultValue != null) {
			return TestResultValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (TestResultValue != null) {
			return TestResultValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getIf_statement_idLongBased() {
		if (IfStmt != null) {
			return IfStmt.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getIf_statement_id() {
		if (IfStmt != null) {
			return IfStmt.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIf_statement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_if_statement_id))
			return m_if_statement_id;
		else
			return getIf_statement_id();
	}

	public void setIf_statement_id(java.util.UUID newValue) {
		m_if_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "ElseIf Stmt", //$NON-NLS-1$
				" Operation entered: ElseIf Stmt::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ElseifStmt_c[] objs = ElseifStmt_c.ElseifStmtInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "ElseIf Stmt", //$NON-NLS-1$
				" Operation entered: ElseIf Stmt::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ElseifStmt_c_test57907_c implements ClassQueryInterface_c {
			ElseifStmt_c_test57907_c(java.util.UUID p57908) {
				m_p57908 = p57908;
			}
			private java.util.UUID m_p57908;
			public boolean evaluate(Object candidate) {
				ElseifStmt_c selected = (ElseifStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57908));
				return retval;
			}
		}

		ElseifStmt_c[] objs57906 = ElseifStmt_c.ElseifStmtInstances(modelRoot,
				new ElseifStmt_c_test57907_c(getStatement_id()));

		if (((objs57906.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57906.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: ElseIf Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs57906.length), e);
			}
			retval = false;

		}

		if (((objs57906.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57906.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: ElseIf Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57906.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// ElseIf Stmt is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test57912_c implements ClassQueryInterface_c {
			Statement_c_test57912_c(java.util.UUID p57913) {
				m_p57913 = p57913;
			}
			private java.util.UUID m_p57913;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57913));
				return retval;
			}
		}

		Statement_c[] objs57911 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57912_c(getStatement_id()));

		if (((objs57911.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57911.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: ElseIf Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57911.length), e);
			}
			retval = false;

		}

		// ElseIf Stmt is a referring class in association: rel.Numb = 658
		// The participating class is: Block
		class Block_c_test57915_c implements ClassQueryInterface_c {
			Block_c_test57915_c(java.util.UUID p57916) {
				m_p57916 = p57916;
			}
			private java.util.UUID m_p57916;
			public boolean evaluate(Object candidate) {
				Block_c selected = (Block_c) candidate;
				boolean retval = false;
				retval = (selected.getBlock_id().equals(m_p57916));
				return retval;
			}
		}

		Block_c[] objs57914 = Block_c.BlockInstances(modelRoot,
				new Block_c_test57915_c(getBlock_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57914.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Association: 658: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57914.length)
										+ " Block_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: ElseIf Stmt: Association: 658: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57914.length)
										+ " Block_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// ElseIf Stmt is a referring class in association: rel.Numb = 659
		// The participating class is: Value
		class Value_c_test57918_c implements ClassQueryInterface_c {
			Value_c_test57918_c(java.util.UUID p57919) {
				m_p57919 = p57919;
			}
			private java.util.UUID m_p57919;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p57919));
				return retval;
			}
		}

		Value_c[] objs57917 = Value_c.ValueInstances(modelRoot,
				new Value_c_test57918_c(getValue_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57917.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Association: 659: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57917.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: ElseIf Stmt: Association: 659: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57917.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// ElseIf Stmt is a referring class in association: rel.Numb = 682
		// The participating class is: If Stmt
		class IfStmt_c_test57921_c implements ClassQueryInterface_c {
			IfStmt_c_test57921_c(java.util.UUID p57922) {
				m_p57922 = p57922;
			}
			private java.util.UUID m_p57922;
			public boolean evaluate(Object candidate) {
				IfStmt_c selected = (IfStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57922));
				return retval;
			}
		}

		IfStmt_c[] objs57920 = IfStmt_c.IfStmtInstances(modelRoot,
				new IfStmt_c_test57921_c(getIf_statement_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57920.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Association: 682: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57920.length)
										+ " If_Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: ElseIf Stmt: Association: 682: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57920.length)
										+ " If_Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// ElseIf Stmt is a participating class in association: rel.Numb = 690
		// Object: If Stmt
		class IfStmt_c_test57924_c implements ClassQueryInterface_c {
			IfStmt_c_test57924_c(java.util.UUID p57925) {
				m_p57925 = p57925;
			}
			private java.util.UUID m_p57925;
			public boolean evaluate(Object candidate) {
				IfStmt_c selected = (IfStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getElif_statement_id().equals(m_p57925));
				return retval;
			}
		}

		IfStmt_c[] objs57923 = IfStmt_c.IfStmtInstances(modelRoot,
				new IfStmt_c_test57924_c(getStatement_id()));

		if (((objs57923.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"ElseIf Stmt", //$NON-NLS-1$
								"Consistency: Object: ElseIf Stmt: Association: 690: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57923.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: ElseIf Stmt: Association: 690: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57923.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "ElseIf Stmt",
				" Operation entered: ElseifStmt::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Value_c v_val = Value_c.getOneV_VALOnR659(this);

		if (((v_val != null))) {

			this.unrelateAcrossR659From(v_val);

			if (v_val != null) {
				v_val.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Block_c v_blk = Block_c.getOneACT_BLKOnR658(this);

		if (((v_blk != null))) {

			this.unrelateAcrossR658From(v_blk);

			if (v_blk != null) {
				v_blk.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		delete();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end ElseIf Stmt
