package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.LiteralEnumerator_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LITERAL_ENUMERATOR extends genericEvent_c {
	public abstract int getEvtcode();
}

public class LiteralEnumerator_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public LiteralEnumerator_c(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_enum_id,
			int p_m_datatypenamelinenumber, int p_m_datatypenamecolumn) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_enum_id = IdAssigner.preprocessUUID(p_m_enum_id);
		m_datatypenamelinenumber = p_m_datatypenamelinenumber;
		m_datatypenamecolumn = p_m_datatypenamecolumn;

		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}
	static public LiteralEnumerator_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_enum_id,
			int p_m_datatypenamelinenumber, int p_m_datatypenamecolumn,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);
		LiteralEnumerator_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			new_inst = (LiteralEnumerator_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_enum_id = IdAssigner.preprocessUUID(p_m_enum_id);
				new_inst.m_datatypenamelinenumber = p_m_datatypenamelinenumber;
				new_inst.m_datatypenamecolumn = p_m_datatypenamecolumn;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new LiteralEnumerator_c(modelRoot, p_m_value_id,
					p_m_enum_id, p_m_datatypenamelinenumber,
					p_m_datatypenamecolumn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public LiteralEnumerator_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_enum_id,
			int p_m_datatypenamelinenumber, int p_m_datatypenamecolumn) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);
		LiteralEnumerator_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			source = (LiteralEnumerator_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_enum_id = IdAssigner.preprocessUUID(p_m_enum_id);
				source.m_datatypenamelinenumber = p_m_datatypenamelinenumber;
				source.m_datatypenamecolumn = p_m_datatypenamecolumn;

				return source;
			}
		}
		// there is no instance matching the id
		LiteralEnumerator_c new_inst = new LiteralEnumerator_c(modelRoot,
				p_m_value_id, p_m_enum_id, p_m_datatypenamelinenumber,
				p_m_datatypenamecolumn);
		return new_inst;
	}
	public LiteralEnumerator_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_enum_id = IdAssigner.NULL_UUID;
		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof LiteralEnumerator_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof LiteralEnumerator_c)) {
			return false;
		}

		LiteralEnumerator_c me = (LiteralEnumerator_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
						.equals(((LiteralEnumerator_c) elem).getValue_id())) && this != elem)) {
			return false;
		}
		if (!getValue_id().equals(((LiteralEnumerator_c) elem).getValue_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof LiteralEnumerator_c)) {
			return false;
		}

		LiteralEnumerator_c me = (LiteralEnumerator_c) elem;
		if (!getValue_idCachedValue().equals(
				((LiteralEnumerator_c) elem).getValue_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_enum_id;
	private int m_datatypenamelinenumber;
	private int m_datatypenamecolumn;

	// declare association references from this class

	// referring navigation

	Value_c IsSupertypeValue;
	public void relateAcrossR801To(Value_c target) {
		relateAcrossR801To(target, true);
	}
	public void relateAcrossR801To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeValue)
			return; // already related

		if (IsSupertypeValue != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeValue != null) {

				IsSupertypeValue.clearBackPointerR801To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LiteralEnumerator_c.relateAcrossR801To(Value_c target)",
									"Relate performed across R801 from Literal Enumerator to Value without unrelate of prior instance.");
				}
			}

			IsSupertypeValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR801To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR801From(Value_c target) {
		unrelateAcrossR801From(target, true);
	}
	public void unrelateAcrossR801From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeValue == null)
			return; // already unrelated

		if (target != IsSupertypeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R801",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR801To(this);
		}

		if (IsSupertypeValue != null) {

			m_value_id = IsSupertypeValue.getValue_id();
			IsSupertypeValue = null;
			target.removeRef();
		}
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(Value_c[] targets) {
		return getOneV_LENOnR801(targets, null);
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		LiteralEnumerator_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_LENOnR801(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(Value_c target) {
		return getOneV_LENOnR801(target, null);
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(Value_c target,
			boolean loadComponent) {
		return getOneV_LENOnR801(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_LENOnR801(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_LENOnR801(modelRoot, target, test, true);
	}

	public static LiteralEnumerator_c getOneV_LENOnR801(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_LENOnR801(modelRoot, target, test);
	}
	private static LiteralEnumerator_c find_getOneV_LENOnR801(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			LiteralEnumerator_c source = (LiteralEnumerator_c) target.backPointer_IsSubtypeLiteralEnumeratorIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR801(Value_c[] targets) {
		return getManyV_LENsOnR801(targets, null);
	}
	public static LiteralEnumerator_c[] getManyV_LENsOnR801(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_LENsOnR801(targets, null, loadComponent);
	}
	public static LiteralEnumerator_c[] getManyV_LENsOnR801(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_LENsOnR801(targets, test, true);
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR801(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LiteralEnumerator_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			LiteralEnumerator_c source = (LiteralEnumerator_c) targets[i].backPointer_IsSubtypeLiteralEnumeratorIsSubtype_R801;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			LiteralEnumerator_c[] ret_set = new LiteralEnumerator_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LiteralEnumerator_c[0];
		}
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR801(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_LENsOnR801(targetArray);
		} else {
			LiteralEnumerator_c[] result = new LiteralEnumerator_c[0];
			return result;
		}
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR801(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_LENsOnR801(targetArray, loadComponent);
		} else {
			LiteralEnumerator_c[] result = new LiteralEnumerator_c[0];
			return result;
		}
	}

	// referring navigation

	Enumerator_c HasValueEnumerator;
	public void relateAcrossR824To(Enumerator_c target) {
		relateAcrossR824To(target, true);
	}
	public void relateAcrossR824To(Enumerator_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasValueEnumerator)
			return; // already related

		if (HasValueEnumerator != target) {

			Object oldKey = getInstanceKey();

			if (HasValueEnumerator != null) {

				HasValueEnumerator.clearBackPointerR824To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LiteralEnumerator_c.relateAcrossR824To(Enumerator_c target)",
									"Relate performed across R824 from Literal Enumerator to Enumerator without unrelate of prior instance.");
				}
			}

			HasValueEnumerator = target;
			m_enum_id = target.getEnum_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR824To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR824From(Enumerator_c target) {
		unrelateAcrossR824From(target, true);
	}
	public void unrelateAcrossR824From(Enumerator_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HasValueEnumerator == null)
			return; // already unrelated

		if (target != HasValueEnumerator) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R824",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR824To(this);
		}

		if (HasValueEnumerator != null) {

			m_enum_id = HasValueEnumerator.getEnum_id();
			HasValueEnumerator = null;
			target.removeRef();
		}
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(Enumerator_c[] targets) {
		return getOneV_LENOnR824(targets, null);
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(Enumerator_c[] targets,
			ClassQueryInterface_c test) {
		LiteralEnumerator_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_LENOnR824(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(Enumerator_c target) {
		return getOneV_LENOnR824(target, null);
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(Enumerator_c target,
			boolean loadComponent) {
		return getOneV_LENOnR824(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(Enumerator_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_LENOnR824(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(ModelRoot modelRoot,
			Enumerator_c target, ClassQueryInterface_c test) {
		return getOneV_LENOnR824(modelRoot, target, test, true);
	}

	public static LiteralEnumerator_c getOneV_LENOnR824(ModelRoot modelRoot,
			Enumerator_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_LENOnR824(modelRoot, target, test);
	}
	private static LiteralEnumerator_c find_getOneV_LENOnR824(
			ModelRoot modelRoot, Enumerator_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824) {
				for (int i = 0; i < target.backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824
						.size(); ++i) {
					LiteralEnumerator_c source = (LiteralEnumerator_c) target.backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c[] targets) {
		return getManyV_LENsOnR824(targets, null);
	}
	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c[] targets, boolean loadComponent) {
		return getManyV_LENsOnR824(targets, null, loadComponent);
	}
	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c[] targets, ClassQueryInterface_c test) {
		return getManyV_LENsOnR824(targets, test, true);
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LiteralEnumerator_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824) {
				for (int j = 0; j < targets[i].backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824
						.size(); ++j) {
					LiteralEnumerator_c source = (LiteralEnumerator_c) targets[i].backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			LiteralEnumerator_c[] ret_set = new LiteralEnumerator_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LiteralEnumerator_c[0];
		}
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR824(Enumerator_c target) {
		return getManyV_LENsOnR824(target, null);
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c target, boolean loadComponent) {
		return getManyV_LENsOnR824(target, null, loadComponent);
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c target, ClassQueryInterface_c test) {
		return getManyV_LENsOnR824(target, test, true);
	}

	public static LiteralEnumerator_c[] getManyV_LENsOnR824(
			Enumerator_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new LiteralEnumerator_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824) {
			for (int i = 0; i < target.backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824
					.size(); ++i) {
				LiteralEnumerator_c source = (LiteralEnumerator_c) target.backPointer_IsValueOfLiteralEnumeratorIsValueOf_R824
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			LiteralEnumerator_c[] ret_set = new LiteralEnumerator_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LiteralEnumerator_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R801
		Value_c relInst38154 = (Value_c) baseRoot
				.getInstanceList(Value_c.class).get(new Object[]{m_value_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38154 == null) {
			relInst38154 = (Value_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Value_c.class)
					.get(new Object[]{m_value_id});
		}
		if (relInst38154 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38154 = (Value_c) roots[i]
						.getInstanceList(Value_c.class).get(
								new Object[]{m_value_id});
				if (relInst38154 != null)
					break;
			}
		}
		//synchronized
		if (relInst38154 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38154) && !isProxy())) {
				relInst38154.relateAcrossR801To(this, notifyChanges);
			}
		}

		if (HasValueEnumerator == null) {
			// R824
			Enumerator_c relInst38155 = (Enumerator_c) baseRoot
					.getInstanceList(Enumerator_c.class).get(
							new Object[]{m_enum_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38155 == null) {
				relInst38155 = (Enumerator_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Enumerator_c.class)
						.get(new Object[]{m_enum_id});
			}
			if (relInst38155 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38155 = (Enumerator_c) roots[i].getInstanceList(
							Enumerator_c.class).get(new Object[]{m_enum_id});
					if (relInst38155 != null)
						break;
				}
			}
			//synchronized
			if (relInst38155 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38155) && !isProxy())) {
					relInst38155.relateAcrossR824To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R801
		// V_VAL
		inst = IsSupertypeValue;
		unrelateAcrossR801From(IsSupertypeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R824
		// S_ENUM
		inst = HasValueEnumerator;
		unrelateAcrossR824From(HasValueEnumerator, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LiteralEnumerator_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LiteralEnumerator_c inst = (LiteralEnumerator_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static LiteralEnumerator_c LiteralEnumeratorInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		LiteralEnumerator_c result = findLiteralEnumeratorInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static LiteralEnumerator_c findLiteralEnumeratorInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LiteralEnumerator_c x = (LiteralEnumerator_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static LiteralEnumerator_c LiteralEnumeratorInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LiteralEnumeratorInstance(modelRoot, test, true);
	}

	public static LiteralEnumerator_c LiteralEnumeratorInstance(
			ModelRoot modelRoot) {
		return LiteralEnumeratorInstance(modelRoot, null, true);
	}

	public static LiteralEnumerator_c[] LiteralEnumeratorInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LiteralEnumerator_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LiteralEnumerator_c x = (LiteralEnumerator_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				LiteralEnumerator_c[] ret_set = new LiteralEnumerator_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LiteralEnumerator_c[0];
			}
		}
	}
	public static LiteralEnumerator_c[] LiteralEnumeratorInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LiteralEnumeratorInstances(modelRoot, test, true);
	}
	public static LiteralEnumerator_c[] LiteralEnumeratorInstances(
			ModelRoot modelRoot) {
		return LiteralEnumeratorInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Literal Enumerator.dispose call: ";
		Value_c testR801Inst17 = Value_c.getOneV_VALOnR801(this, false);

		if (testR801Inst17 != null) {
			delete_error = true;
			errorMsg = errorMsg + "801 ";
		}
		Enumerator_c testR824Inst = Enumerator_c
				.getOneS_ENUMOnR824(this, false);

		if (testR824Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "824 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Literal Enumerator",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("enum_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (IsSupertypeValue != null) {
			return IsSupertypeValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeValue != null);

	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getEnum_idLongBased() {
		if (HasValueEnumerator != null) {
			return HasValueEnumerator.getEnum_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getEnum_id() {
		if (HasValueEnumerator != null) {
			return HasValueEnumerator.getEnum_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEnum_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_enum_id))
			return m_enum_id;
		else
			return getEnum_id();
	}

	public void setEnum_id(java.util.UUID newValue) {
		m_enum_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getDatatypenamelinenumber() {
		return m_datatypenamelinenumber;
	}

	public void setDatatypenamelinenumber(int newValue) {
		m_datatypenamelinenumber = newValue;
	}
	public int getDatatypenamecolumn() {
		return m_datatypenamecolumn;
	}

	public void setDatatypenamecolumn(int newValue) {
		m_datatypenamecolumn = newValue;
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Literal Enumerator", //$NON-NLS-1$
						" Operation entered: Literal Enumerator::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		LiteralEnumerator_c[] objs = LiteralEnumerator_c
				.LiteralEnumeratorInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Enumerator", //$NON-NLS-1$
				" Operation entered: Literal Enumerator::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class LiteralEnumerator_c_test38157_c implements ClassQueryInterface_c {
			LiteralEnumerator_c_test38157_c(java.util.UUID p38158) {
				m_p38158 = p38158;
			}
			private java.util.UUID m_p38158;
			public boolean evaluate(Object candidate) {
				LiteralEnumerator_c selected = (LiteralEnumerator_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38158));
				return retval;
			}
		}

		LiteralEnumerator_c[] objs38156 = LiteralEnumerator_c
				.LiteralEnumeratorInstances(modelRoot,
						new LiteralEnumerator_c_test38157_c(getValue_id()));

		if (((objs38156.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Literal Enumerator", //$NON-NLS-1$
								"Consistency: Object: Literal Enumerator: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38156.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Enumerator: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38156.length), e);
			}
			retval = false;

		}

		if (((objs38156.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Literal Enumerator", //$NON-NLS-1$
								"Consistency: Object: Literal Enumerator: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38156.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Enumerator: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38156.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Literal Enumerator is a subtype in association: rel.Numb = 801
		// The supertype class is: Value
		class Value_c_test38162_c implements ClassQueryInterface_c {
			Value_c_test38162_c(java.util.UUID p38163) {
				m_p38163 = p38163;
			}
			private java.util.UUID m_p38163;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p38163));
				return retval;
			}
		}

		Value_c[] objs38161 = Value_c.ValueInstances(modelRoot,
				new Value_c_test38162_c(getValue_id()));

		if (((objs38161.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Literal Enumerator", //$NON-NLS-1$
								"Consistency: Object: Literal Enumerator: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38161.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Enumerator: Association: 801: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38161.length), e);
			}
			retval = false;

		}

		// Literal Enumerator is a referring class in association: rel.Numb = 824
		// The participating class is: Enumerator
		class Enumerator_c_test38165_c implements ClassQueryInterface_c {
			Enumerator_c_test38165_c(java.util.UUID p38166) {
				m_p38166 = p38166;
			}
			private java.util.UUID m_p38166;
			public boolean evaluate(Object candidate) {
				Enumerator_c selected = (Enumerator_c) candidate;
				boolean retval = false;
				retval = (selected.getEnum_id().equals(m_p38166));
				return retval;
			}
		}

		Enumerator_c[] objs38164 = Enumerator_c.EnumeratorInstances(modelRoot,
				new Enumerator_c_test38165_c(getEnum_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38164.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Literal Enumerator", //$NON-NLS-1$
								"Consistency: Object: Literal Enumerator: Association: 824: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38164.length)
										+ " Enum_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Literal Enumerator: Association: 824: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38164.length)
										+ " Enum_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public Object Getvalue() {
		Ooaofooa.log.println(ILogger.OPERATION, "Literal Enumerator",
				" Operation entered: LiteralEnumerator::Getvalue");
		final ModelRoot modelRoot = getModelRoot();
		Enumerator_c v_enum = Enumerator_c.getOneS_ENUMOnR824(this);

		DataType_c v_edt = DataType_c.getOneS_DTOnR17(EnumerationDataType_c
				.getOneS_EDTOnR27(v_enum));

		return Gd_c.String_to_instance(v_edt.getName() + "::"
				+ v_enum.getName());

	} // End getValue

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Literal Enumerator
