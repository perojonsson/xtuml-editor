      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.IfStmt_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_IF_STMT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class IfStmt_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public IfStmt_c(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       java.util.UUID         p_m_block_id,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_elif_statement_id,
       java.util.UUID         p_m_else_statement_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_elif_statement_id = IdAssigner.preprocessUUID(p_m_elif_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_else_statement_id = IdAssigner.preprocessUUID(p_m_else_statement_id);
        
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }
  static public IfStmt_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       java.util.UUID         p_m_block_id,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_elif_statement_id,
       java.util.UUID         p_m_else_statement_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);
      IfStmt_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_statement_id};
          new_inst = (IfStmt_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_elif_statement_id = IdAssigner.preprocessUUID(p_m_elif_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_else_statement_id = IdAssigner.preprocessUUID(p_m_else_statement_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new IfStmt_c(modelRoot,
p_m_statement_id,
p_m_block_id,
p_m_value_id,
p_m_elif_statement_id,
p_m_else_statement_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public IfStmt_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       java.util.UUID         p_m_block_id,
       java.util.UUID         p_m_value_id,
       java.util.UUID         p_m_elif_statement_id,
       java.util.UUID         p_m_else_statement_id){
    InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);
    IfStmt_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_statement_id
            };
        source = (IfStmt_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_elif_statement_id = IdAssigner.preprocessUUID(p_m_elif_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_else_statement_id = IdAssigner.preprocessUUID(p_m_else_statement_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    IfStmt_c new_inst = new IfStmt_c(modelRoot,
p_m_statement_id,
p_m_block_id,
p_m_value_id,
p_m_elif_statement_id,
p_m_else_statement_id
);
    return new_inst;
  }
  public IfStmt_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_statement_id = IdAssigner.NULL_UUID;   
     m_block_id = IdAssigner.NULL_UUID;   
     m_value_id = IdAssigner.NULL_UUID;   
     m_elif_statement_id = IdAssigner.NULL_UUID;   
     m_else_statement_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_statement_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_statement_id !=  p_newKey ){
	
		m_statement_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof IfStmt_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof IfStmt_c)) {
           return false;
       }
       
       IfStmt_c me = (IfStmt_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID.equals(((IfStmt_c)elem).getStatement_id())) && this != elem)) {
      	return false;
      }
      if (!getStatement_id().equals(((IfStmt_c)elem).getStatement_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof IfStmt_c)) {
           return false;
       }
       
       IfStmt_c me = (IfStmt_c)elem;
      if (!getStatement_idCachedValue().equals(((IfStmt_c)elem).getStatement_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_statement_id ;
  private java.util.UUID         m_block_id ;
  private java.util.UUID         m_value_id ;
  private java.util.UUID         m_elif_statement_id ;
  private java.util.UUID         m_else_statement_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Statement_c IsSupertypeStatement ;
public void relateAcrossR603To(Statement_c target)
{
	relateAcrossR603To(target, true);
}
public void relateAcrossR603To(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeStatement) return;  // already related

    if ( IsSupertypeStatement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeStatement != null) {
    
        IsSupertypeStatement.clearBackPointerR603To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"IfStmt_c.relateAcrossR603To(Statement_c target)", 
			"Relate performed across R603 from If Stmt to Statement without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeStatement = target ;
        m_statement_id = target.getStatement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR603To(this);
        target.addRef();
    }
}
public void unrelateAcrossR603From(Statement_c target)
{
	unrelateAcrossR603From(target, true);
}
public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeStatement == null) return;  // already unrelated
	
	if (target != IsSupertypeStatement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R603", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR603To(this);
    }
    

      if(IsSupertypeStatement != null) {
      
        m_statement_id = IsSupertypeStatement.getStatement_id();
        IsSupertypeStatement = null ;
        target.removeRef();
    }
}

  
    
      
public static IfStmt_c getOneACT_IFOnR603(Statement_c [] targets)
{
    return getOneACT_IFOnR603(targets, null);
}

public static IfStmt_c getOneACT_IFOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IFOnR603(targets[i], test);
        }
    }

    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR603(Statement_c target)
{
  return getOneACT_IFOnR603(target, null);
}

public static IfStmt_c getOneACT_IFOnR603(Statement_c target, boolean loadComponent)
{
    return getOneACT_IFOnR603(target.getModelRoot(), target, null, loadComponent);
}

public static IfStmt_c getOneACT_IFOnR603(Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IFOnR603(target.getModelRoot(), target, test);
  }
  return null;
}

public static IfStmt_c getOneACT_IFOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
	return getOneACT_IFOnR603(modelRoot, target, test, true);
}

public static IfStmt_c getOneACT_IFOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IFOnR603(modelRoot,target,test);
}
private static IfStmt_c find_getOneACT_IFOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    IfStmt_c source = (IfStmt_c)target.backPointer_IsSubtypeIfStmtIsSubtype_R603;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static IfStmt_c [] getManyACT_IFsOnR603(Statement_c [] targets)
{
  return getManyACT_IFsOnR603(targets, null);
}
public static IfStmt_c [] getManyACT_IFsOnR603(Statement_c [] targets, boolean loadComponent)
{
  return getManyACT_IFsOnR603(targets, null, loadComponent);
}
public static IfStmt_c [] getManyACT_IFsOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR603(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR603(Statement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new IfStmt_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      IfStmt_c source = (IfStmt_c)targets[i].backPointer_IsSubtypeIfStmtIsSubtype_R603;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	IfStmt_c[] ret_set = new IfStmt_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new IfStmt_c[0];
  }
  }

public static IfStmt_c [] getManyACT_IFsOnR603(Statement_c target)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR603(targetArray);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}

public static IfStmt_c [] getManyACT_IFsOnR603(Statement_c target, boolean loadComponent)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR603(targetArray, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Block_c ControlsBlock ;
public void relateAcrossR607To(Block_c target)
{
	relateAcrossR607To(target, true);
}
public void relateAcrossR607To(Block_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ControlsBlock) return;  // already related

    if ( ControlsBlock != target ) {
    
    Object oldKey = getInstanceKey();

    if (ControlsBlock != null) {
    
        ControlsBlock.clearBackPointerR607To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"IfStmt_c.relateAcrossR607To(Block_c target)", 
			"Relate performed across R607 from If Stmt to Block without unrelate of prior instance.");  
		}
    }
                
    	ControlsBlock = target ;
        m_block_id = target.getBlock_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR607To(this);
        target.addRef();
    }
}
public void unrelateAcrossR607From(Block_c target)
{
	unrelateAcrossR607From(target, true);
}
public void unrelateAcrossR607From(Block_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ControlsBlock == null) return;  // already unrelated
	
	if (target != ControlsBlock) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R607", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR607To(this);
    }
    

      if(ControlsBlock != null) {
      
        m_block_id = ControlsBlock.getBlock_id();
        ControlsBlock = null ;
        target.removeRef();
    }
}

  
    
      
public static IfStmt_c getOneACT_IFOnR607(Block_c [] targets)
{
    return getOneACT_IFOnR607(targets, null);
}

public static IfStmt_c getOneACT_IFOnR607(Block_c [] targets, ClassQueryInterface_c test)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IFOnR607(targets[i], test);
        }
    }

    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR607(Block_c target)
{
  return getOneACT_IFOnR607(target, null);
}

public static IfStmt_c getOneACT_IFOnR607(Block_c target, boolean loadComponent)
{
    return getOneACT_IFOnR607(target.getModelRoot(), target, null, loadComponent);
}

public static IfStmt_c getOneACT_IFOnR607(Block_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IFOnR607(target.getModelRoot(), target, test);
  }
  return null;
}

public static IfStmt_c getOneACT_IFOnR607(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test)
{
	return getOneACT_IFOnR607(modelRoot, target, test, true);
}

public static IfStmt_c getOneACT_IFOnR607(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IFOnR607(modelRoot,target,test);
}
private static IfStmt_c find_getOneACT_IFOnR607(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    IfStmt_c source = (IfStmt_c)target.backPointer_IfStmt_R607;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static IfStmt_c [] getManyACT_IFsOnR607(Block_c [] targets)
{
  return getManyACT_IFsOnR607(targets, null);
}
public static IfStmt_c [] getManyACT_IFsOnR607(Block_c [] targets, boolean loadComponent)
{
  return getManyACT_IFsOnR607(targets, null, loadComponent);
}
public static IfStmt_c [] getManyACT_IFsOnR607(Block_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR607(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR607(Block_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new IfStmt_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      IfStmt_c source = (IfStmt_c)targets[i].backPointer_IfStmt_R607;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	IfStmt_c[] ret_set = new IfStmt_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new IfStmt_c[0];
  }
  }

public static IfStmt_c [] getManyACT_IFsOnR607(Block_c target)
{
  if (target != null) {
    Block_c [] targetArray = new Block_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR607(targetArray);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}

public static IfStmt_c [] getManyACT_IFsOnR607(Block_c target, boolean loadComponent)
{
  if (target != null) {
    Block_c [] targetArray = new Block_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR607(targetArray, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Value_c TestResultValue ;
public void relateAcrossR625To(Value_c target)
{
	relateAcrossR625To(target, true);
}
public void relateAcrossR625To(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == TestResultValue) return;  // already related

    if ( TestResultValue != target ) {
    
    Object oldKey = getInstanceKey();

    if (TestResultValue != null) {
    
        TestResultValue.clearBackPointerR625To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"IfStmt_c.relateAcrossR625To(Value_c target)", 
			"Relate performed across R625 from If Stmt to Value without unrelate of prior instance.");  
		}
    }
                
    	TestResultValue = target ;
        m_value_id = target.getValue_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR625To(this);
        target.addRef();
    }
}
public void unrelateAcrossR625From(Value_c target)
{
	unrelateAcrossR625From(target, true);
}
public void unrelateAcrossR625From(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (TestResultValue == null) return;  // already unrelated
	
	if (target != TestResultValue) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R625", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR625To(this);
    }
    

      if(TestResultValue != null) {
      
        m_value_id = TestResultValue.getValue_id();
        TestResultValue = null ;
        target.removeRef();
    }
}

  
    
      
public static IfStmt_c getOneACT_IFOnR625(Value_c [] targets)
{
    return getOneACT_IFOnR625(targets, null);
}

public static IfStmt_c getOneACT_IFOnR625(Value_c [] targets, ClassQueryInterface_c test)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IFOnR625(targets[i], test);
        }
    }

    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR625(Value_c target)
{
  return getOneACT_IFOnR625(target, null);
}

public static IfStmt_c getOneACT_IFOnR625(Value_c target, boolean loadComponent)
{
    return getOneACT_IFOnR625(target.getModelRoot(), target, null, loadComponent);
}

public static IfStmt_c getOneACT_IFOnR625(Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IFOnR625(target.getModelRoot(), target, test);
  }
  return null;
}

public static IfStmt_c getOneACT_IFOnR625(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
	return getOneACT_IFOnR625(modelRoot, target, test, true);
}

public static IfStmt_c getOneACT_IFOnR625(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IFOnR625(modelRoot,target,test);
}
private static IfStmt_c find_getOneACT_IFOnR625(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    IfStmt_c source = (IfStmt_c)target.backPointer_IfStmt_R625;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static IfStmt_c [] getManyACT_IFsOnR625(Value_c [] targets)
{
  return getManyACT_IFsOnR625(targets, null);
}
public static IfStmt_c [] getManyACT_IFsOnR625(Value_c [] targets, boolean loadComponent)
{
  return getManyACT_IFsOnR625(targets, null, loadComponent);
}
public static IfStmt_c [] getManyACT_IFsOnR625(Value_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR625(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR625(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new IfStmt_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      IfStmt_c source = (IfStmt_c)targets[i].backPointer_IfStmt_R625;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	IfStmt_c[] ret_set = new IfStmt_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new IfStmt_c[0];
  }
  }

public static IfStmt_c [] getManyACT_IFsOnR625(Value_c target)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR625(targetArray);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}

public static IfStmt_c [] getManyACT_IFsOnR625(Value_c target, boolean loadComponent)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR625(targetArray, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ElseifStmt_c WasExecutingWhenHaltedElseifStmt ;
public void relateAcrossR690To(ElseifStmt_c target)
{
	relateAcrossR690To(target, true);
}
public void relateAcrossR690To(ElseifStmt_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == WasExecutingWhenHaltedElseifStmt) return;  // already related

    if ( WasExecutingWhenHaltedElseifStmt != target ) {
    
    Object oldKey = getInstanceKey();

    if (WasExecutingWhenHaltedElseifStmt != null) {
    
        WasExecutingWhenHaltedElseifStmt.clearBackPointerR690To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"IfStmt_c.relateAcrossR690To(ElseifStmt_c target)", 
			"Relate performed across R690 from If Stmt to ElseIf Stmt without unrelate of prior instance.");  
		}
    }
                
    	WasExecutingWhenHaltedElseifStmt = target ;
        if(IdAssigner.NULL_UUID.equals(target.getStatement_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_elif_statement_id = target.getStatement_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR690To(this);
        target.addRef();
    }
}
public void unrelateAcrossR690From(ElseifStmt_c target)
{
	unrelateAcrossR690From(target, true);
}
public void unrelateAcrossR690From(ElseifStmt_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (WasExecutingWhenHaltedElseifStmt == null) return;  // already unrelated
	
	if (target != WasExecutingWhenHaltedElseifStmt) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R690", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR690To(this);
    }
    

      if(WasExecutingWhenHaltedElseifStmt != null) {
      
        m_elif_statement_id = WasExecutingWhenHaltedElseifStmt.getStatement_id();
        if(IdAssigner.NULL_UUID.equals(m_elif_statement_id))
        {
          m_elif_statement_id = WasExecutingWhenHaltedElseifStmt.getStatement_idCachedValue();
        }       
        WasExecutingWhenHaltedElseifStmt = null ;
        target.removeRef();
    }
}

  
    
      
public static IfStmt_c getOneACT_IFOnR690(ElseifStmt_c [] targets)
{
    return getOneACT_IFOnR690(targets, null);
}

public static IfStmt_c getOneACT_IFOnR690(ElseifStmt_c [] targets, ClassQueryInterface_c test)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IFOnR690(targets[i], test);
        }
    }

    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR690(ElseifStmt_c target)
{
  return getOneACT_IFOnR690(target, null);
}

public static IfStmt_c getOneACT_IFOnR690(ElseifStmt_c target, boolean loadComponent)
{
    return getOneACT_IFOnR690(target.getModelRoot(), target, null, loadComponent);
}

public static IfStmt_c getOneACT_IFOnR690(ElseifStmt_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IFOnR690(target.getModelRoot(), target, test);
  }
  return null;
}

public static IfStmt_c getOneACT_IFOnR690(ModelRoot modelRoot, ElseifStmt_c target, ClassQueryInterface_c test)
{
	return getOneACT_IFOnR690(modelRoot, target, test, true);
}

public static IfStmt_c getOneACT_IFOnR690(ModelRoot modelRoot, ElseifStmt_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IFOnR690(modelRoot,target,test);
}
private static IfStmt_c find_getOneACT_IFOnR690(ModelRoot modelRoot, ElseifStmt_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    IfStmt_c source = (IfStmt_c)target.backPointer_IfStmt_R690;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static IfStmt_c [] getManyACT_IFsOnR690(ElseifStmt_c [] targets)
{
  return getManyACT_IFsOnR690(targets, null);
}
public static IfStmt_c [] getManyACT_IFsOnR690(ElseifStmt_c [] targets, boolean loadComponent)
{
  return getManyACT_IFsOnR690(targets, null, loadComponent);
}
public static IfStmt_c [] getManyACT_IFsOnR690(ElseifStmt_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR690(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR690(ElseifStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new IfStmt_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      IfStmt_c source = (IfStmt_c)targets[i].backPointer_IfStmt_R690;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	IfStmt_c[] ret_set = new IfStmt_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new IfStmt_c[0];
  }
  }

public static IfStmt_c [] getManyACT_IFsOnR690(ElseifStmt_c target)
{
  if (target != null) {
    ElseifStmt_c [] targetArray = new ElseifStmt_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR690(targetArray);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}

public static IfStmt_c [] getManyACT_IFsOnR690(ElseifStmt_c target, boolean loadComponent)
{
  if (target != null) {
    ElseifStmt_c [] targetArray = new ElseifStmt_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR690(targetArray, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ElseStmt_c WasExecutingWhenHaltedElseStmt ;
public void relateAcrossR692To(ElseStmt_c target)
{
	relateAcrossR692To(target, true);
}
public void relateAcrossR692To(ElseStmt_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == WasExecutingWhenHaltedElseStmt) return;  // already related

    if ( WasExecutingWhenHaltedElseStmt != target ) {
    
    Object oldKey = getInstanceKey();

    if (WasExecutingWhenHaltedElseStmt != null) {
    
        WasExecutingWhenHaltedElseStmt.clearBackPointerR692To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"IfStmt_c.relateAcrossR692To(ElseStmt_c target)", 
			"Relate performed across R692 from If Stmt to Else Stmt without unrelate of prior instance.");  
		}
    }
                
    	WasExecutingWhenHaltedElseStmt = target ;
        if(IdAssigner.NULL_UUID.equals(target.getStatement_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_else_statement_id = target.getStatement_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR692To(this);
        target.addRef();
    }
}
public void unrelateAcrossR692From(ElseStmt_c target)
{
	unrelateAcrossR692From(target, true);
}
public void unrelateAcrossR692From(ElseStmt_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (WasExecutingWhenHaltedElseStmt == null) return;  // already unrelated
	
	if (target != WasExecutingWhenHaltedElseStmt) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R692", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR692To(this);
    }
    

      if(WasExecutingWhenHaltedElseStmt != null) {
      
        m_else_statement_id = WasExecutingWhenHaltedElseStmt.getStatement_id();
        if(IdAssigner.NULL_UUID.equals(m_else_statement_id))
        {
          m_else_statement_id = WasExecutingWhenHaltedElseStmt.getStatement_idCachedValue();
        }       
        WasExecutingWhenHaltedElseStmt = null ;
        target.removeRef();
    }
}

  
    
      
public static IfStmt_c getOneACT_IFOnR692(ElseStmt_c [] targets)
{
    return getOneACT_IFOnR692(targets, null);
}

public static IfStmt_c getOneACT_IFOnR692(ElseStmt_c [] targets, ClassQueryInterface_c test)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_IFOnR692(targets[i], test);
        }
    }

    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR692(ElseStmt_c target)
{
  return getOneACT_IFOnR692(target, null);
}

public static IfStmt_c getOneACT_IFOnR692(ElseStmt_c target, boolean loadComponent)
{
    return getOneACT_IFOnR692(target.getModelRoot(), target, null, loadComponent);
}

public static IfStmt_c getOneACT_IFOnR692(ElseStmt_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_IFOnR692(target.getModelRoot(), target, test);
  }
  return null;
}

public static IfStmt_c getOneACT_IFOnR692(ModelRoot modelRoot, ElseStmt_c target, ClassQueryInterface_c test)
{
	return getOneACT_IFOnR692(modelRoot, target, test, true);
}

public static IfStmt_c getOneACT_IFOnR692(ModelRoot modelRoot, ElseStmt_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_IFOnR692(modelRoot,target,test);
}
private static IfStmt_c find_getOneACT_IFOnR692(ModelRoot modelRoot, ElseStmt_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    IfStmt_c source = (IfStmt_c)target.backPointer_IfStmt_R692;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static IfStmt_c [] getManyACT_IFsOnR692(ElseStmt_c [] targets)
{
  return getManyACT_IFsOnR692(targets, null);
}
public static IfStmt_c [] getManyACT_IFsOnR692(ElseStmt_c [] targets, boolean loadComponent)
{
  return getManyACT_IFsOnR692(targets, null, loadComponent);
}
public static IfStmt_c [] getManyACT_IFsOnR692(ElseStmt_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR692(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR692(ElseStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new IfStmt_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      IfStmt_c source = (IfStmt_c)targets[i].backPointer_IfStmt_R692;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	IfStmt_c[] ret_set = new IfStmt_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new IfStmt_c[0];
  }
  }

public static IfStmt_c [] getManyACT_IFsOnR692(ElseStmt_c target)
{
  if (target != null) {
    ElseStmt_c [] targetArray = new ElseStmt_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR692(targetArray);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}

public static IfStmt_c [] getManyACT_IFsOnR692(ElseStmt_c target, boolean loadComponent)
{
  if (target != null) {
    ElseStmt_c [] targetArray = new ElseStmt_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR692(targetArray, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ElseifStmt_c> backPointer_HasElseifStmtHas_R682 = new ArrayList<ElseifStmt_c>();

public void setElseifStmtOrderInChildListR682(ElseifStmt_c target, int index) {
	unrelateAcrossR682From(target);
	ElseifStmt_c[] elements = ElseifStmt_c.getManyACT_ELsOnR682(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR682From((ElseifStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR682To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR682To((ElseifStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR682To(ElseifStmt_c target)
{
  if (target != null) {
    target.relateAcrossR682To(this, true) ;
  }
}

public void relateAcrossR682To(ElseifStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR682To(this, notifyChanges) ;
  }
}

public void setBackPointerR682To(ElseifStmt_c target)
{
  	synchronized (backPointer_HasElseifStmtHas_R682) {
		backPointer_HasElseifStmtHas_R682.add(target);
	}
}

public void unrelateAcrossR682From(ElseifStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR682From(this, true) ;
  }
}

public void unrelateAcrossR682From(ElseifStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR682From(this, notifyChanges) ;
  }
}

public void clearBackPointerR682To(ElseifStmt_c target)
{
  synchronized (backPointer_HasElseifStmtHas_R682) {
	    backPointer_HasElseifStmtHas_R682.remove(target);
	}
}

public static IfStmt_c getOneACT_IFOnR682(ElseifStmt_c [] targets)
{
    return getOneACT_IFOnR682(targets, null);
}

public static IfStmt_c getOneACT_IFOnR682(ElseifStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_IFOnR682(targets, test, true);
}

public static IfStmt_c getOneACT_IFOnR682(ElseifStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             IfStmt_c candidate_val = getOneACT_IFOnR682(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_IFOnR682(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR682(ElseifStmt_c target)
{
	return getOneACT_IFOnR682(target, true);
}
public static IfStmt_c getOneACT_IFOnR682(ElseifStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IfStmt ;
  } else {
    return null;
  }
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR682(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new IfStmt_c[0];
  
  
  LinkedHashSet<IfStmt_c> elementsSet = new LinkedHashSet<IfStmt_c>();
  for (int i = 0; i < targets.length; i++) {
    IfStmt_c associate = targets[i].IfStmt;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  IfStmt_c[] result = new IfStmt_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c [] targets)
{
  return getManyACT_IFsOnR682(targets, null);
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElseifStmt_c [] targetArray = new ElseifStmt_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR682(targetArray, test, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
    return result ;
  }
  
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_IFsOnR682(target, null, true);
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c target)
{
    return getManyACT_IFsOnR682(target, null, true);
}

public static IfStmt_c [] getManyACT_IFsOnR682(ElseifStmt_c target, boolean loadComponent)
{
    return getManyACT_IFsOnR682(target, null, loadComponent);
}


    
  
  
// referred to navigation

ElseStmt_c backPointer_HasElseStmtHas_R683;

public void setElseStmtOrderInChildListR683(ElseStmt_c target, int index) {
	unrelateAcrossR683From(target);
	ElseStmt_c[] elements = ElseStmt_c.getManyACT_EsOnR683(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR683From((ElseStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR683To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR683To((ElseStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR683To(ElseStmt_c target)
{
  if (target != null) {
    target.relateAcrossR683To(this, true) ;
  }
}

public void relateAcrossR683To(ElseStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR683To(this, notifyChanges) ;
  }
}

public void setBackPointerR683To(ElseStmt_c target)
{
    backPointer_HasElseStmtHas_R683 = target;
}

public void unrelateAcrossR683From(ElseStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR683From(this, true) ;
  }
}

public void unrelateAcrossR683From(ElseStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR683From(this, notifyChanges) ;
  }
}

public void clearBackPointerR683To(ElseStmt_c target)
{
	if (target == backPointer_HasElseStmtHas_R683) {
		backPointer_HasElseStmtHas_R683 = null;
	}
}

public static IfStmt_c getOneACT_IFOnR683(ElseStmt_c [] targets)
{
    return getOneACT_IFOnR683(targets, null);
}

public static IfStmt_c getOneACT_IFOnR683(ElseStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_IFOnR683(targets, test, true);
}

public static IfStmt_c getOneACT_IFOnR683(ElseStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    IfStmt_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             IfStmt_c candidate_val = getOneACT_IFOnR683(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_IFOnR683(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static IfStmt_c getOneACT_IFOnR683(ElseStmt_c target)
{
	return getOneACT_IFOnR683(target, true);
}
public static IfStmt_c getOneACT_IFOnR683(ElseStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IfStmt ;
  } else {
    return null;
  }
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_IFsOnR683(targets, test, true);
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new IfStmt_c[0];
  
  
  LinkedHashSet<IfStmt_c> elementsSet = new LinkedHashSet<IfStmt_c>();
  for (int i = 0; i < targets.length; i++) {
    IfStmt_c associate = targets[i].IfStmt;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  IfStmt_c[] result = new IfStmt_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c [] targets)
{
  return getManyACT_IFsOnR683(targets, null);
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElseStmt_c [] targetArray = new ElseStmt_c[1];
    targetArray[0] = target;
    return getManyACT_IFsOnR683(targetArray, test, loadComponent);
  } else {
    IfStmt_c [] result = new IfStmt_c [0] ;
    return result ;
  }
  
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_IFsOnR683(target, null, true);
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c target)
{
    return getManyACT_IFsOnR683(target, null, true);
}

public static IfStmt_c [] getManyACT_IFsOnR683(ElseStmt_c target, boolean loadComponent)
{
    return getManyACT_IFsOnR683(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R603
      Statement_c relInst57836 = (Statement_c) baseRoot.getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57836 == null) {
      			relInst57836 = (Statement_c) Ooaofooa.getDefaultInstance().getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
      		}
			if (relInst57836 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57836 = (Statement_c) roots[i].getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
					if (relInst57836 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57836 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57836) && !isProxy())) {
	      relInst57836.relateAcrossR603To(this, notifyChanges);
	  }
	  }
	          

	if (ControlsBlock == null) {          
      // R607
      Block_c relInst57837 = (Block_c) baseRoot.getInstanceList(Block_c.class).get(new Object[] {m_block_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57837 == null) {
      			relInst57837 = (Block_c) Ooaofooa.getDefaultInstance().getInstanceList(Block_c.class).get(new Object[] {m_block_id});
      		}
			if (relInst57837 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57837 = (Block_c) roots[i].getInstanceList(Block_c.class).get(new Object[] {m_block_id});
					if (relInst57837 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57837 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57837) && !isProxy())) {
	      relInst57837.relateAcrossR607To(this, notifyChanges);
	  }
	  }
	}
	          

	if (TestResultValue == null) {          
      // R625
      Value_c relInst57838 = (Value_c) baseRoot.getInstanceList(Value_c.class).get(new Object[] {m_value_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57838 == null) {
      			relInst57838 = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).get(new Object[] {m_value_id});
      		}
			if (relInst57838 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57838 = (Value_c) roots[i].getInstanceList(Value_c.class).get(new Object[] {m_value_id});
					if (relInst57838 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57838 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57838) && !isProxy())) {
	      relInst57838.relateAcrossR625To(this, notifyChanges);
	  }
	  }
	}
	          

	if (WasExecutingWhenHaltedElseifStmt == null) {          
      // R690
      ElseifStmt_c relInst57839 = (ElseifStmt_c) baseRoot.getInstanceList(ElseifStmt_c.class).get(new Object[] {m_elif_statement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57839 == null) {
      			relInst57839 = (ElseifStmt_c) Ooaofooa.getDefaultInstance().getInstanceList(ElseifStmt_c.class).get(new Object[] {m_elif_statement_id});
      		}
			if (relInst57839 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57839 = (ElseifStmt_c) roots[i].getInstanceList(ElseifStmt_c.class).get(new Object[] {m_elif_statement_id});
					if (relInst57839 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57839 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57839) && !isProxy())) {
	      relInst57839.relateAcrossR690To(this, notifyChanges);
	  }
	  }
	}
	          

	if (WasExecutingWhenHaltedElseStmt == null) {          
      // R692
      ElseStmt_c relInst57840 = (ElseStmt_c) baseRoot.getInstanceList(ElseStmt_c.class).get(new Object[] {m_else_statement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57840 == null) {
      			relInst57840 = (ElseStmt_c) Ooaofooa.getDefaultInstance().getInstanceList(ElseStmt_c.class).get(new Object[] {m_else_statement_id});
      		}
			if (relInst57840 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57840 = (ElseStmt_c) roots[i].getInstanceList(ElseStmt_c.class).get(new Object[] {m_else_statement_id});
					if (relInst57840 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57840 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57840) && !isProxy())) {
	      relInst57840.relateAcrossR692To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R603
      // ACT_SMT
		  inst=IsSupertypeStatement;
			unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R607
      // ACT_BLK
		  inst=ControlsBlock;
			unrelateAcrossR607From(ControlsBlock, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R625
      // V_VAL
		  inst=TestResultValue;
			unrelateAcrossR625From(TestResultValue, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R690
      // ACT_EL
		  inst=WasExecutingWhenHaltedElseifStmt;
			unrelateAcrossR690From(WasExecutingWhenHaltedElseifStmt, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R692
      // ACT_E
		  inst=WasExecutingWhenHaltedElseStmt;
			unrelateAcrossR692From(WasExecutingWhenHaltedElseStmt, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final IfStmt_c inst = (IfStmt_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static IfStmt_c IfStmtInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		IfStmt_c result=findIfStmtInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static IfStmt_c findIfStmtInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				IfStmt_c x = (IfStmt_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static IfStmt_c IfStmtInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return IfStmtInstance(modelRoot,test,true);
  }
  
  public static IfStmt_c IfStmtInstance(ModelRoot modelRoot)
  {
	 return IfStmtInstance(modelRoot,null,true);
  }

  public static IfStmt_c [] IfStmtInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(IfStmt_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					IfStmt_c x = (IfStmt_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				IfStmt_c[] ret_set = new IfStmt_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new IfStmt_c[0];
			}		
		} 
  }
  public static IfStmt_c [] IfStmtInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  IfStmtInstances(modelRoot,test,true);
  }
  public static IfStmt_c [] IfStmtInstances(ModelRoot modelRoot)
  {
	return IfStmtInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the If Stmt.dispose call: ";
	Statement_c testR603Inst4 = Statement_c.getOneACT_SMTOnR603(this, false);

	if ( testR603Inst4 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "603 ";
	}
	Block_c testR607Inst = Block_c.getOneACT_BLKOnR607(this, false);

	if ( testR607Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "607 ";
	}
	Value_c testR625Inst = Value_c.getOneV_VALOnR625(this, false);

	if ( testR625Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "625 ";
	}
	ElseifStmt_c testR682Inst = ElseifStmt_c.getOneACT_ELOnR682(this, false);

	if ( testR682Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "682 ";	
	}
	ElseStmt_c testR683Inst = ElseStmt_c.getOneACT_EOnR683(this, false);

	if ( testR683Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "683 ";	
	}
	ElseifStmt_c testR690Inst = ElseifStmt_c.getOneACT_ELOnR690(this, false);

	if ( testR690Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "690 ";
	}
	ElseStmt_c testR692Inst = ElseStmt_c.getOneACT_EOnR692(this, false);

	if ( testR692Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "692 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "If Stmt", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("statement_id")){
         return true;
      }
      if(attributeName.equals("block_id")){
         return true;
      }
      if(attributeName.equals("value_id")){
         return true;
      }
      if(attributeName.equals("elif_statement_id")){
         return true;
      }
      if(attributeName.equals("else_statement_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getStatement_idLongBased()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getStatement_id()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeStatement != null );
 
 }                  

  public java.util.UUID getStatement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_statement_id) )
      return m_statement_id;
    else
      return getStatement_id();
  }
  
  public void setStatement_id(java.util.UUID newValue)
  {
   m_statement_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getBlock_idLongBased()
  {
    if ( ControlsBlock != null )
    {
      return ControlsBlock.getBlock_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getBlock_id()
  {
    if ( ControlsBlock != null )
    {
      return ControlsBlock.getBlock_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getBlock_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_block_id) )
      return m_block_id;
    else
      return getBlock_id();
  }
  
  public void setBlock_id(java.util.UUID newValue)
  {
   m_block_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getValue_idLongBased()
  {
    if ( TestResultValue != null )
    {
      return TestResultValue.getValue_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getValue_id()
  {
    if ( TestResultValue != null )
    {
      return TestResultValue.getValue_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getValue_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_value_id) )
      return m_value_id;
    else
      return getValue_id();
  }
  
  public void setValue_id(java.util.UUID newValue)
  {
   m_value_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getElif_statement_idLongBased()
  {
    if ( WasExecutingWhenHaltedElseifStmt != null )
    {
      return WasExecutingWhenHaltedElseifStmt.getStatement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElif_statement_id()
  {
    if ( WasExecutingWhenHaltedElseifStmt != null )
    {
      return WasExecutingWhenHaltedElseifStmt.getStatement_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getElif_statement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_elif_statement_id) )
      return m_elif_statement_id;
    else
      return getElif_statement_id();
  }
  
  public void setElif_statement_id(java.util.UUID newValue)
  {
   m_elif_statement_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getElse_statement_idLongBased()
  {
    if ( WasExecutingWhenHaltedElseStmt != null )
    {
      return WasExecutingWhenHaltedElseStmt.getStatement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getElse_statement_id()
  {
    if ( WasExecutingWhenHaltedElseStmt != null )
    {
      return WasExecutingWhenHaltedElseStmt.getStatement_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getElse_statement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_else_statement_id) )
      return m_else_statement_id;
    else
      return getElse_statement_id();
  }
  
  public void setElse_statement_id(java.util.UUID newValue)
  {
   m_else_statement_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "If Stmt", //$NON-NLS-1$
	  " Operation entered: If Stmt::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     IfStmt_c [] objs = IfStmt_c.IfStmtInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "If Stmt", //$NON-NLS-1$
	  " Operation entered: If Stmt::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class IfStmt_c_test57842_c implements ClassQueryInterface_c
    {
	  IfStmt_c_test57842_c( java.util.UUID            p57843 ) {
	  m_p57843 = p57843;
	  }
	  private java.util.UUID             m_p57843; 
	  public boolean evaluate (Object candidate)
	  {
	      IfStmt_c selected = (IfStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p57843));
	      return retval;
	  }
    }

    IfStmt_c [] objs57841 = 
    IfStmt_c.IfStmtInstances(modelRoot, new IfStmt_c_test57842_c(getStatement_id())) ;

    if ( (  (objs57841.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57841.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57841.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57841.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57841.length )  + " Statement_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57841.length )  + " Statement_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // If Stmt is a subtype in association: rel.Numb = 603
          // The supertype class is: Statement
    class Statement_c_test57847_c implements ClassQueryInterface_c
    {
	  Statement_c_test57847_c( java.util.UUID            p57848 ) {
	  m_p57848 = p57848;
	  }
	  private java.util.UUID             m_p57848; 
	  public boolean evaluate (Object candidate)
	  {
	      Statement_c selected = (Statement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p57848));
	      return retval;
	  }
    }

    Statement_c [] objs57846 = 
    Statement_c.StatementInstances(modelRoot, new Statement_c_test57847_c(getStatement_id())) ;

    if ( (  (objs57846.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57846.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57846.length )  , e); 
      }
      retval = false;

    }

          // If Stmt is a referring class in association: rel.Numb = 607
          // The participating class is: Block
    class Block_c_test57850_c implements ClassQueryInterface_c
    {
	  Block_c_test57850_c( java.util.UUID            p57851 ) {
	  m_p57851 = p57851;
	  }
	  private java.util.UUID             m_p57851; 
	  public boolean evaluate (Object candidate)
	  {
	      Block_c selected = (Block_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p57851));
	      return retval;
	  }
    }

    Block_c [] objs57849 = 
    Block_c.BlockInstances(modelRoot, new Block_c_test57850_c(getBlock_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57849.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Association: 607: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57849.length )  + " Block_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Association: 607: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57849.length )  + " Block_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // If Stmt is a referring class in association: rel.Numb = 625
          // The participating class is: Value
    class Value_c_test57853_c implements ClassQueryInterface_c
    {
	  Value_c_test57853_c( java.util.UUID            p57854 ) {
	  m_p57854 = p57854;
	  }
	  private java.util.UUID             m_p57854; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p57854));
	      return retval;
	  }
    }

    Value_c [] objs57852 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test57853_c(getValue_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57852.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Association: 625: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57852.length )  + " Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Association: 625: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57852.length )  + " Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // If Stmt is a referring class in association: rel.Numb = 690
          // The participating class is: ElseIf Stmt
    class ElseifStmt_c_test57856_c implements ClassQueryInterface_c
    {
	  ElseifStmt_c_test57856_c( java.util.UUID            p57857 ) {
	  m_p57857 = p57857;
	  }
	  private java.util.UUID             m_p57857; 
	  public boolean evaluate (Object candidate)
	  {
	      ElseifStmt_c selected = (ElseifStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p57857));
	      return retval;
	  }
    }

    ElseifStmt_c [] objs57855 = 
    ElseifStmt_c.ElseifStmtInstances(modelRoot, new ElseifStmt_c_test57856_c(getElif_statement_id())) ;

    if ( (  (objs57855.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Association: 690: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57855.length )  + " Elif_Statement_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Association: 690: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57855.length )  + " Elif_Statement_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // If Stmt is a referring class in association: rel.Numb = 692
          // The participating class is: Else Stmt
    class ElseStmt_c_test57859_c implements ClassQueryInterface_c
    {
	  ElseStmt_c_test57859_c( java.util.UUID            p57860 ) {
	  m_p57860 = p57860;
	  }
	  private java.util.UUID             m_p57860; 
	  public boolean evaluate (Object candidate)
	  {
	      ElseStmt_c selected = (ElseStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p57860));
	      return retval;
	  }
    }

    ElseStmt_c [] objs57858 = 
    ElseStmt_c.ElseStmtInstances(modelRoot, new ElseStmt_c_test57859_c(getElse_statement_id())) ;

    if ( (  (objs57858.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Association: 692: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57858.length )  + " Else_Statement_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Association: 692: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57858.length )  + " Else_Statement_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // If Stmt is a participating class in association: rel.Numb = 682
             // Object: ElseIf Stmt
          // If Stmt is a participating class in association: rel.Numb = 683
             // Object: Else Stmt
    class ElseStmt_c_test57862_c implements ClassQueryInterface_c
    {
	  ElseStmt_c_test57862_c( java.util.UUID            p57863 ) {
	  m_p57863 = p57863;
	  }
	  private java.util.UUID             m_p57863; 
	  public boolean evaluate (Object candidate)
	  {
	      ElseStmt_c selected = (ElseStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIf_statement_id().equals(m_p57863));
	      return retval;
	  }
    }

    ElseStmt_c [] objs57861 = 
    ElseStmt_c.ElseStmtInstances(modelRoot, new ElseStmt_c_test57862_c(getStatement_id())) ;

    if ( (  (objs57861.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "If Stmt", //$NON-NLS-1$
           "Consistency: Object: If Stmt: Association: 683: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57861.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: If Stmt: Association: 683: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57861.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "If Stmt", " Operation entered: IfStmt::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Block_c v_blk = Block_c.getOneACT_BLKOnR607(this);


if ( (  (v_blk != null)) )
{

this.unrelateAcrossR607From(v_blk);


if (v_blk != null) {
v_blk.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ElseStmt_c v_els = ElseStmt_c.getOneACT_EOnR683(this);


if ( (  (v_els != null)) )
{

this.unrelateAcrossR683From(v_els);



}

Statement_c v_stmt = Statement_c.getOneACT_SMTOnR603(this);


if ( (  (v_stmt != null)) )
{

this.unrelateAcrossR603From(v_stmt);



}

ElseifStmt_c [] v_elfs = ElseifStmt_c.getManyACT_ELsOnR682(this);


ElseifStmt_c  v_elf = null;
for ( int i55414 = 0; i55414 < v_elfs.length; i55414++)
{
  v_elf = v_elfs[i55414] ;

this.unrelateAcrossR682From(v_elf);



}

Value_c v_val = Value_c.getOneV_VALOnR625(this);


if ( (  (v_val != null)) )
{

this.unrelateAcrossR625From(v_val);


if (v_val != null) {
v_val.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ElseifStmt_c v_exec_elif_stmt = ElseifStmt_c.getOneACT_ELOnR690(this);


if ( (  (v_exec_elif_stmt != null)) )
{

this.unrelateAcrossR690From(v_exec_elif_stmt);



}

ElseStmt_c v_exec_else_stmt = ElseStmt_c.getOneACT_EOnR692(this);


if ( (  (v_exec_else_stmt != null)) )
{

this.unrelateAcrossR692From(v_exec_else_stmt);



}

delete() ;



   } // End dispose
  public  void Execute(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "If Stmt", " Operation entered: IfStmt::Execute") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End execute

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end If Stmt
