package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.LinkParticipation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import java.util.concurrent.locks.ReentrantLock;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LINK_PARTICIPATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class LinkParticipation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public LinkParticipation_c(ModelRoot modelRoot,
			java.util.UUID p_m_participation_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_inst_id, String p_m_label) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
		m_label = p_m_label;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_participation_id = IdAssigner.preprocessUUID(p_m_participation_id);
		//extract 28 bit value only            
		m_participation_idLongBased = 0xfffffff & p_m_participation_id
				.getLeastSignificantBits();

		setUniqueId(m_participation_id);
		Object[] key = {m_rel_id, m_participation_id};
		addInstanceToMap(key);
	}
	static public LinkParticipation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_participation_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_inst_id, String p_m_label, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);
		LinkParticipation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_rel_id, p_m_participation_id};
			new_inst = (LinkParticipation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
				new_inst.m_label = p_m_label;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_participation_id = IdAssigner
						.preprocessUUID(p_m_participation_id);
				//extract 28 bit value only            
				new_inst.m_participation_idLongBased = 0xfffffff & p_m_participation_id
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new LinkParticipation_c(modelRoot, p_m_participation_id,
					p_m_rel_id, p_m_inst_id, p_m_label);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public LinkParticipation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_participation_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_inst_id, String p_m_label) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);
		LinkParticipation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_rel_id, p_m_participation_id};
			source = (LinkParticipation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
				source.m_label = p_m_label;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_participation_id = IdAssigner
						.preprocessUUID(p_m_participation_id);
				//extract 28 bit value only            
				source.m_participation_idLongBased = 0xfffffff & p_m_participation_id
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		LinkParticipation_c new_inst = new LinkParticipation_c(modelRoot,
				p_m_participation_id, p_m_rel_id, p_m_inst_id, p_m_label);
		return new_inst;
	}
	public LinkParticipation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_inst_id = IdAssigner.NULL_UUID;
		m_label = "";
		m_rel_id = IdAssigner.NULL_UUID;
		m_participation_id = idAssigner.createUUID();
		setUniqueId(m_participation_id);
		Object[] key = {m_rel_id, m_participation_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_rel_id, m_participation_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_rel_id != p_newKey) {

			m_rel_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof LinkParticipation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof LinkParticipation_c)) {
			return false;
		}

		LinkParticipation_c me = (LinkParticipation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((LinkParticipation_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((LinkParticipation_c) elem).getRel_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getParticipation_id()) || IdAssigner.NULL_UUID
						.equals(((LinkParticipation_c) elem)
								.getParticipation_id())) && this != elem)) {
			return false;
		}
		if (!getParticipation_id().equals(
				((LinkParticipation_c) elem).getParticipation_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof LinkParticipation_c)) {
			return false;
		}

		LinkParticipation_c me = (LinkParticipation_c) elem;
		if (!getRel_idCachedValue().equals(
				((LinkParticipation_c) elem).getRel_idCachedValue()))
			return false;
		if (!getParticipation_id().equals(
				((LinkParticipation_c) elem).getParticipation_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_inst_id;
	private String m_label;
	private java.util.UUID m_rel_id;
	private java.util.UUID m_participation_id;
	private long m_participation_idLongBased;

	// declare association references from this class

	// referring navigation

	Instance_c Instance;
	public void relateAcrossR2958To(Instance_c target) {
		relateAcrossR2958To(target, true);
	}
	public void relateAcrossR2958To(Instance_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Instance)
			return; // already related

		if (Instance != target) {

			Object oldKey = getInstanceKey();

			if (Instance != null) {

				Instance.clearBackPointerR2958To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LinkParticipation_c.relateAcrossR2958To(Instance_c target)",
									"Relate performed across R2958 from Link Participation to Instance without unrelate of prior instance.");
				}
			}

			Instance = target;
			m_inst_id = target.getInst_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2958To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2958", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2958From(Instance_c target) {
		unrelateAcrossR2958From(target, true);
	}
	public void unrelateAcrossR2958From(Instance_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (Instance == null)
			return; // already unrelated

		if (target != Instance) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2958",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2958To(this);
		}

		if (Instance != null) {

			m_inst_id = Instance.getInst_id();
			Instance = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2958", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(Instance_c[] targets) {
		return getOneI_LIPOnR2958(targets, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(Instance_c[] targets,
			ClassQueryInterface_c test) {
		LinkParticipation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_LIPOnR2958(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(Instance_c target) {
		return getOneI_LIPOnR2958(target, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(Instance_c target,
			boolean loadComponent) {
		return getOneI_LIPOnR2958(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(Instance_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_LIPOnR2958(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(ModelRoot modelRoot,
			Instance_c target, ClassQueryInterface_c test) {
		return getOneI_LIPOnR2958(modelRoot, target, test, true);
	}

	public static LinkParticipation_c getOneI_LIPOnR2958(ModelRoot modelRoot,
			Instance_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneI_LIPOnR2958(modelRoot, target, test);
	}
	private static LinkParticipation_c find_getOneI_LIPOnR2958(
			ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_LinkParticipation_R2958) {
				for (int i = 0; i < target.backPointer_LinkParticipation_R2958
						.size(); ++i) {
					LinkParticipation_c source = (LinkParticipation_c) target.backPointer_LinkParticipation_R2958
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2958(
			Instance_c[] targets) {
		return getManyI_LIPsOnR2958(targets, null);
	}
	public static LinkParticipation_c[] getManyI_LIPsOnR2958(
			Instance_c[] targets, boolean loadComponent) {
		return getManyI_LIPsOnR2958(targets, null, loadComponent);
	}
	public static LinkParticipation_c[] getManyI_LIPsOnR2958(
			Instance_c[] targets, ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2958(targets, test, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2958(
			Instance_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LinkParticipation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_LinkParticipation_R2958) {
				for (int j = 0; j < targets[i].backPointer_LinkParticipation_R2958
						.size(); ++j) {
					LinkParticipation_c source = (LinkParticipation_c) targets[i].backPointer_LinkParticipation_R2958
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			LinkParticipation_c[] ret_set = new LinkParticipation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LinkParticipation_c[0];
		}
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2958(Instance_c target) {
		return getManyI_LIPsOnR2958(target, null);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2958(Instance_c target,
			boolean loadComponent) {
		return getManyI_LIPsOnR2958(target, null, loadComponent);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2958(Instance_c target,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2958(target, test, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2958(Instance_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new LinkParticipation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_LinkParticipation_R2958) {
			for (int i = 0; i < target.backPointer_LinkParticipation_R2958
					.size(); ++i) {
				LinkParticipation_c source = (LinkParticipation_c) target.backPointer_LinkParticipation_R2958
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			LinkParticipation_c[] ret_set = new LinkParticipation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LinkParticipation_c[0];
		}
	}

	// referring navigation

	Association_c Association;
	public void relateAcrossR2959To(Association_c target) {
		relateAcrossR2959To(target, true);
	}
	public void relateAcrossR2959To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Association)
			return; // already related

		if (Association != target) {

			Object oldKey = getInstanceKey();

			if (Association != null) {

				Association.clearBackPointerR2959To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LinkParticipation_c.relateAcrossR2959To(Association_c target)",
									"Relate performed across R2959 from Link Participation to Association without unrelate of prior instance.");
				}
			}

			Association = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2959To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2959", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR2959From(Association_c target) {
		unrelateAcrossR2959From(target, true);
	}
	public void unrelateAcrossR2959From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (Association == null)
			return; // already unrelated

		if (target != Association) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R2959",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2959To(this);
		}

		if (Association != null) {

			m_rel_id = Association.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = Association.getRel_idCachedValue();
			}
			Association = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2959", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(Association_c[] targets) {
		return getOneI_LIPOnR2959(targets, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(
			Association_c[] targets, ClassQueryInterface_c test) {
		LinkParticipation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneI_LIPOnR2959(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(Association_c target) {
		return getOneI_LIPOnR2959(target, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(Association_c target,
			boolean loadComponent) {
		return getOneI_LIPOnR2959(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneI_LIPOnR2959(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneI_LIPOnR2959(modelRoot, target, test, true);
	}

	public static LinkParticipation_c getOneI_LIPOnR2959(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneI_LIPOnR2959(modelRoot, target, test);
	}
	private static LinkParticipation_c find_getOneI_LIPOnR2959(
			ModelRoot modelRoot, Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_LinkParticipation_R2959) {
				for (int i = 0; i < target.backPointer_LinkParticipation_R2959
						.size(); ++i) {
					LinkParticipation_c source = (LinkParticipation_c) target.backPointer_LinkParticipation_R2959
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c[] targets) {
		return getManyI_LIPsOnR2959(targets, null);
	}
	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c[] targets, boolean loadComponent) {
		return getManyI_LIPsOnR2959(targets, null, loadComponent);
	}
	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c[] targets, ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2959(targets, test, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LinkParticipation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_LinkParticipation_R2959) {
				for (int j = 0; j < targets[i].backPointer_LinkParticipation_R2959
						.size(); ++j) {
					LinkParticipation_c source = (LinkParticipation_c) targets[i].backPointer_LinkParticipation_R2959
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			LinkParticipation_c[] ret_set = new LinkParticipation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LinkParticipation_c[0];
		}
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c target) {
		return getManyI_LIPsOnR2959(target, null);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c target, boolean loadComponent) {
		return getManyI_LIPsOnR2959(target, null, loadComponent);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c target, ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2959(target, test, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2959(
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new LinkParticipation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_LinkParticipation_R2959) {
			for (int i = 0; i < target.backPointer_LinkParticipation_R2959
					.size(); ++i) {
				LinkParticipation_c source = (LinkParticipation_c) target.backPointer_LinkParticipation_R2959
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			LinkParticipation_c[] ret_set = new LinkParticipation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LinkParticipation_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	Link_c backPointer_ParticipatesInLinkParticipatesIn_R2901;

	public void setLinkOrderInChildListR2901(Link_c target, int index) {
		unrelateAcrossR2901From(target);
		Link_c[] elements = Link_c.getManyI_LNKsOnR2901(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR2901From((Link_c) elements[i]);
			}
			count++;
		}
		relateAcrossR2901To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR2901To((Link_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR2901To(Link_c target) {
		if (target != null) {
			target.relateAcrossR2901To(this, true);
		}
	}

	public void relateAcrossR2901To(Link_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR2901To(this, notifyChanges);
		}
	}

	public void setBackPointerR2901To(Link_c target) {
		backPointer_ParticipatesInLinkParticipatesIn_R2901 = target;
	}

	public void unrelateAcrossR2901From(Link_c target) {
		if (target != null) {
			target.unrelateAcrossR2901From(this, true);
		}
	}

	public void unrelateAcrossR2901From(Link_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR2901From(this, notifyChanges);
		}
	}

	public void clearBackPointerR2901To(Link_c target) {
		if (target == backPointer_ParticipatesInLinkParticipatesIn_R2901) {
			backPointer_ParticipatesInLinkParticipatesIn_R2901 = null;
		}
	}

	public static LinkParticipation_c getOneI_LIPOnR2901(Link_c[] targets) {
		return getOneI_LIPOnR2901(targets, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2901(Link_c[] targets,
			ClassQueryInterface_c test) {
		return getOneI_LIPOnR2901(targets, test, true);
	}

	public static LinkParticipation_c getOneI_LIPOnR2901(Link_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		LinkParticipation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LinkParticipation_c candidate_val = getOneI_LIPOnR2901(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneI_LIPOnR2901(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LinkParticipation_c getOneI_LIPOnR2901(Link_c target) {
		return getOneI_LIPOnR2901(target, true);
	}
	public static LinkParticipation_c getOneI_LIPOnR2901(Link_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.HasParticipantLinkParticipation;
		} else {
			return null;
		}
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2901(Link_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2901(targets, test, true);
	}

	public static LinkParticipation_c [] getManyI_LIPsOnR2901(Link_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LinkParticipation_c[0];
  
  
  LinkedHashSet<LinkParticipation_c> elementsSet = new LinkedHashSet<LinkParticipation_c>();
  for (int i = 0; i < targets.length; i++) {
    LinkParticipation_c associate = targets[i].HasParticipantLinkParticipation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LinkParticipation_c[] result = new LinkParticipation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LinkParticipation_c[] getManyI_LIPsOnR2901(Link_c[] targets) {
		return getManyI_LIPsOnR2901(targets, null);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2901(Link_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Link_c[] targetArray = new Link_c[1];
			targetArray[0] = target;
			return getManyI_LIPsOnR2901(targetArray, test, loadComponent);
		} else {
			LinkParticipation_c[] result = new LinkParticipation_c[0];
			return result;
		}

	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2901(Link_c target,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2901(target, null, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2901(Link_c target) {
		return getManyI_LIPsOnR2901(target, null, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2901(Link_c target,
			boolean loadComponent) {
		return getManyI_LIPsOnR2901(target, null, loadComponent);
	}

	// referred to navigation

	Link_c backPointer_FormalizesLinkFormalizes_R2902;

	public void setLinkOrderInChildListR2902(Link_c target, int index) {
		unrelateAcrossR2902From(target);
		Link_c[] elements = Link_c.getManyI_LNKsOnR2902(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR2902From((Link_c) elements[i]);
			}
			count++;
		}
		relateAcrossR2902To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR2902To((Link_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR2902To(Link_c target) {
		if (target != null) {
			target.relateAcrossR2902To(this, true);
		}
	}

	public void relateAcrossR2902To(Link_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR2902To(this, notifyChanges);
		}
	}

	public void setBackPointerR2902To(Link_c target) {
		backPointer_FormalizesLinkFormalizes_R2902 = target;
	}

	public void unrelateAcrossR2902From(Link_c target) {
		if (target != null) {
			target.unrelateAcrossR2902From(this, true);
		}
	}

	public void unrelateAcrossR2902From(Link_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR2902From(this, notifyChanges);
		}
	}

	public void clearBackPointerR2902To(Link_c target) {
		if (target == backPointer_FormalizesLinkFormalizes_R2902) {
			backPointer_FormalizesLinkFormalizes_R2902 = null;
		}
	}

	public static LinkParticipation_c getOneI_LIPOnR2902(Link_c[] targets) {
		return getOneI_LIPOnR2902(targets, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2902(Link_c[] targets,
			ClassQueryInterface_c test) {
		return getOneI_LIPOnR2902(targets, test, true);
	}

	public static LinkParticipation_c getOneI_LIPOnR2902(Link_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		LinkParticipation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LinkParticipation_c candidate_val = getOneI_LIPOnR2902(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneI_LIPOnR2902(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LinkParticipation_c getOneI_LIPOnR2902(Link_c target) {
		return getOneI_LIPOnR2902(target, true);
	}
	public static LinkParticipation_c getOneI_LIPOnR2902(Link_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.HasFormalizingParticipantLinkParticipation;
		} else {
			return null;
		}
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2902(Link_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2902(targets, test, true);
	}

	public static LinkParticipation_c [] getManyI_LIPsOnR2902(Link_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LinkParticipation_c[0];
  
  
  LinkedHashSet<LinkParticipation_c> elementsSet = new LinkedHashSet<LinkParticipation_c>();
  for (int i = 0; i < targets.length; i++) {
    LinkParticipation_c associate = targets[i].HasFormalizingParticipantLinkParticipation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LinkParticipation_c[] result = new LinkParticipation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LinkParticipation_c[] getManyI_LIPsOnR2902(Link_c[] targets) {
		return getManyI_LIPsOnR2902(targets, null);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2902(Link_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Link_c[] targetArray = new Link_c[1];
			targetArray[0] = target;
			return getManyI_LIPsOnR2902(targetArray, test, loadComponent);
		} else {
			LinkParticipation_c[] result = new LinkParticipation_c[0];
			return result;
		}

	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2902(Link_c target,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2902(target, null, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2902(Link_c target) {
		return getManyI_LIPsOnR2902(target, null, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2902(Link_c target,
			boolean loadComponent) {
		return getManyI_LIPsOnR2902(target, null, loadComponent);
	}

	// referred to navigation

	Link_c backPointer_IsAssociatorForLinkIsAssociatorFor_R2903;

	public void setLinkOrderInChildListR2903(Link_c target, int index) {
		unrelateAcrossR2903From(target);
		Link_c[] elements = Link_c.getManyI_LNKsOnR2903(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR2903From((Link_c) elements[i]);
			}
			count++;
		}
		relateAcrossR2903To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR2903To((Link_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR2903To(Link_c target) {
		if (target != null) {
			target.relateAcrossR2903To(this, true);
		}
	}

	public void relateAcrossR2903To(Link_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR2903To(this, notifyChanges);
		}
	}

	public void setBackPointerR2903To(Link_c target) {
		backPointer_IsAssociatorForLinkIsAssociatorFor_R2903 = target;
	}

	public void unrelateAcrossR2903From(Link_c target) {
		if (target != null) {
			target.unrelateAcrossR2903From(this, true);
		}
	}

	public void unrelateAcrossR2903From(Link_c target, boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR2903From(this, notifyChanges);
		}
	}

	public void clearBackPointerR2903To(Link_c target) {
		if (target == backPointer_IsAssociatorForLinkIsAssociatorFor_R2903) {
			backPointer_IsAssociatorForLinkIsAssociatorFor_R2903 = null;
		}
	}

	public static LinkParticipation_c getOneI_LIPOnR2903(Link_c[] targets) {
		return getOneI_LIPOnR2903(targets, null);
	}

	public static LinkParticipation_c getOneI_LIPOnR2903(Link_c[] targets,
			ClassQueryInterface_c test) {
		return getOneI_LIPOnR2903(targets, test, true);
	}

	public static LinkParticipation_c getOneI_LIPOnR2903(Link_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		LinkParticipation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LinkParticipation_c candidate_val = getOneI_LIPOnR2903(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneI_LIPOnR2903(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LinkParticipation_c getOneI_LIPOnR2903(Link_c target) {
		return getOneI_LIPOnR2903(target, true);
	}
	public static LinkParticipation_c getOneI_LIPOnR2903(Link_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.HasAssociatorLinkParticipation;
		} else {
			return null;
		}
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2903(Link_c[] targets,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2903(targets, test, true);
	}

	public static LinkParticipation_c [] getManyI_LIPsOnR2903(Link_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LinkParticipation_c[0];
  
  
  LinkedHashSet<LinkParticipation_c> elementsSet = new LinkedHashSet<LinkParticipation_c>();
  for (int i = 0; i < targets.length; i++) {
    LinkParticipation_c associate = targets[i].HasAssociatorLinkParticipation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LinkParticipation_c[] result = new LinkParticipation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LinkParticipation_c[] getManyI_LIPsOnR2903(Link_c[] targets) {
		return getManyI_LIPsOnR2903(targets, null);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2903(Link_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			Link_c[] targetArray = new Link_c[1];
			targetArray[0] = target;
			return getManyI_LIPsOnR2903(targetArray, test, loadComponent);
		} else {
			LinkParticipation_c[] result = new LinkParticipation_c[0];
			return result;
		}

	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2903(Link_c target,
			ClassQueryInterface_c test) {
		return getManyI_LIPsOnR2903(target, null, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2903(Link_c target) {
		return getManyI_LIPsOnR2903(target, null, true);
	}

	public static LinkParticipation_c[] getManyI_LIPsOnR2903(Link_c target,
			boolean loadComponent) {
		return getManyI_LIPsOnR2903(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (Instance == null) {
			// R2958
			Instance_c relInst40800 = (Instance_c) baseRoot.getInstanceList(
					Instance_c.class).get(new Object[]{m_inst_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40800 == null) {
				relInst40800 = (Instance_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Instance_c.class)
						.get(new Object[]{m_inst_id});
			}
			if (relInst40800 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40800 = (Instance_c) roots[i].getInstanceList(
							Instance_c.class).get(new Object[]{m_inst_id});
					if (relInst40800 != null)
						break;
				}
			}
			//synchronized
			if (relInst40800 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40800) && !isProxy())) {
					relInst40800.relateAcrossR2958To(this, notifyChanges);
				}
			}
		}

		if (Association == null) {
			// R2959
			Association_c relInst40801 = (Association_c) baseRoot
					.getInstanceList(Association_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40801 == null) {
				relInst40801 = (Association_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Association_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst40801 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40801 = (Association_c) roots[i].getInstanceList(
							Association_c.class).get(new Object[]{m_rel_id});
					if (relInst40801 != null)
						break;
				}
			}
			//synchronized
			if (relInst40801 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40801) && !isProxy())) {
					relInst40801.relateAcrossR2959To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R2958
		// I_INS
		inst = Instance;
		unrelateAcrossR2958From(Instance, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2959
		// R_REL
		inst = Association;
		unrelateAcrossR2959From(Association, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LinkParticipation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LinkParticipation_c inst = (LinkParticipation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static LinkParticipation_c LinkParticipationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		LinkParticipation_c result = findLinkParticipationInstance(modelRoot,
				test, loadComponent);
		return result;
	}
	private static LinkParticipation_c findLinkParticipationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LinkParticipation_c x = (LinkParticipation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static LinkParticipation_c LinkParticipationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LinkParticipationInstance(modelRoot, test, true);
	}

	public static LinkParticipation_c LinkParticipationInstance(
			ModelRoot modelRoot) {
		return LinkParticipationInstance(modelRoot, null, true);
	}

	public static LinkParticipation_c[] LinkParticipationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkParticipation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LinkParticipation_c x = (LinkParticipation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				LinkParticipation_c[] ret_set = new LinkParticipation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LinkParticipation_c[0];
			}
		}
	}
	public static LinkParticipation_c[] LinkParticipationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LinkParticipationInstances(modelRoot, test, true);
	}
	public static LinkParticipation_c[] LinkParticipationInstances(
			ModelRoot modelRoot) {
		return LinkParticipationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Link Participation.dispose call: ";
		Instance_c testR2958Inst = Instance_c.getOneI_INSOnR2958(this, false);

		if (testR2958Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2958 ";
		}
		Association_c testR2959Inst = Association_c.getOneR_RELOnR2959(this,
				false);

		if (testR2959Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2959 ";
		}
		Link_c testR2901Inst = Link_c.getOneI_LNKOnR2901(this, false);

		if (testR2901Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2901 ";
		}
		Link_c testR2902Inst = Link_c.getOneI_LNKOnR2902(this, false);

		if (testR2902Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2902 ";
		}
		Link_c testR2903Inst = Link_c.getOneI_LNKOnR2903(this, false);

		if (testR2903Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "2903 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Link Participation",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("inst_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		if (attributeName.equals("participation_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getInst_idLongBased() {
		if (Instance != null) {
			return Instance.getInst_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getInst_id() {
		if (Instance != null) {
			return Instance.getInst_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getInst_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_inst_id))
			return m_inst_id;
		else
			return getInst_id();
	}

	public void setInst_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_inst_id)) {
				return;
			}
		} else if (m_inst_id != null) {
			if (m_inst_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Inst_id", m_inst_id, newValue, false);
		m_inst_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getLabel() {
		ModelRoot modelRoot = getModelRoot();
		Association_c v_assoc = Association_c.getOneR_RELOnR2959(this);

		if ((v_assoc != null)) {

			String v_phrase = "";

			Link_c v_origin = Link_c.getOneI_LNKOnR2901(this);

			Link_c v_associator = Link_c.getOneI_LNKOnR2903(this);

			if (((v_associator == null))) {

				SimpleAssociation_c v_simp = SimpleAssociation_c
						.getOneR_SIMPOnR206(v_assoc);

				if (((v_simp != null))) {

					if (((v_origin != null))) {

						ClassAsSimpleParticipant_c[] v_parts = ClassAsSimpleParticipant_c
								.getManyR_PARTsOnR207(v_simp);

						ClassAsSimpleParticipant_c v_part = null;
						for (int i37339 = 0; i37339 < v_parts.length; i37339++) {
							v_part = v_parts[i37339];

							v_phrase = v_part.getTxt_phrs();

						}

					}

					else {

						ClassAsSimpleFormalizer_c v_form = ClassAsSimpleFormalizer_c
								.getOneR_FORMOnR208(v_simp);

						if (((v_form != null))) {

							v_phrase = v_form.getTxt_phrs();

						}

						else {

							ClassAsSimpleParticipant_c[] v_parts = ClassAsSimpleParticipant_c
									.getManyR_PARTsOnR207(v_simp);

							ClassAsSimpleParticipant_c v_part = null;
							for (int i37340 = 0; i37340 < v_parts.length; i37340++) {
								v_part = v_parts[i37340];

								v_phrase = v_part.getTxt_phrs();

								break;

							}

						}

					}

				}

				LinkedAssociation_c v_linked = LinkedAssociation_c
						.getOneR_ASSOCOnR206(v_assoc);

				if (((v_linked != null))) {

					if (((v_origin != null))) {

						ClassAsAssociatedOtherSide_c v_aoth = ClassAsAssociatedOtherSide_c
								.getOneR_AOTHOnR210(v_linked);

						if (((v_aoth != null))) {

							v_phrase = v_aoth.getTxt_phrs();

						}

					}

					else {

						ClassAsAssociatedOneSide_c v_aone = ClassAsAssociatedOneSide_c
								.getOneR_AONEOnR209(v_linked);

						if (((v_aone != null))) {

							v_phrase = v_aone.getTxt_phrs();

						}

					}

				}

			}

			if ((!v_phrase.equals(""))) {

				return v_assoc.Get_name() + "." + Util_c.Gettic() + v_phrase
						+ Util_c.Gettic();

			}

			else {

				return v_assoc.Get_name();

			}

		}

		else {

			return "Unknown Association";

		}

	}

	public long getRel_idLongBased() {
		if (Association != null) {
			return Association.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (Association != null) {
			return Association.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public void setRel_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_rel_id)) {
				return;
			}
		} else if (m_rel_id != null) {
			if (m_rel_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Rel_id", m_rel_id, newValue, false);
		m_rel_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getParticipation_idLongBased() {
		if (m_participation_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_participation_id)) {
			return 0xfffffff & m_participation_id.getLeastSignificantBits();
		}
		return m_participation_idLongBased;
	}
	public java.util.UUID getParticipation_id() {
		return m_participation_id;
	}

	public void setParticipation_id(java.util.UUID newValue) {
		m_participation_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Link Participation", //$NON-NLS-1$
						" Operation entered: Link Participation::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		LinkParticipation_c[] objs = LinkParticipation_c
				.LinkParticipationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Link Participation", //$NON-NLS-1$
				" Operation entered: Link Participation::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class LinkParticipation_c_test40803_c implements ClassQueryInterface_c {
			LinkParticipation_c_test40803_c(java.util.UUID p40804,
					java.util.UUID p40805) {
				m_p40804 = p40804;
				m_p40805 = p40805;
			}
			private java.util.UUID m_p40804;
			private java.util.UUID m_p40805;
			public boolean evaluate(Object candidate) {
				LinkParticipation_c selected = (LinkParticipation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40804))
						& (selected.getParticipation_id().equals(m_p40805));
				return retval;
			}
		}

		LinkParticipation_c[] objs40802 = LinkParticipation_c
				.LinkParticipationInstances(modelRoot,
						new LinkParticipation_c_test40803_c(getRel_id(),
								getParticipation_id()));

		if (((objs40802.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40802.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40802.length), e);
			}
			retval = false;

		}

		if (((objs40802.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40802.length)
										+ " Rel_ID: " + "Not Printable" + " Participation_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40802.length)
										+ " Rel_ID: " + "Not Printable" + " Participation_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link Participation is a referring class in association: rel.Numb = 2958
		// The participating class is: Instance
		class Instance_c_test40809_c implements ClassQueryInterface_c {
			Instance_c_test40809_c(java.util.UUID p40810) {
				m_p40810 = p40810;
			}
			private java.util.UUID m_p40810;
			public boolean evaluate(Object candidate) {
				Instance_c selected = (Instance_c) candidate;
				boolean retval = false;
				retval = (selected.getInst_id().equals(m_p40810));
				return retval;
			}
		}

		Instance_c[] objs40808 = Instance_c.InstanceInstances(modelRoot,
				new Instance_c_test40809_c(getInst_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40808.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Association: 2958: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40808.length)
										+ " Inst_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Association: 2958: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40808.length)
										+ " Inst_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link Participation is a referring class in association: rel.Numb = 2959
		// The participating class is: Association
		class Association_c_test40812_c implements ClassQueryInterface_c {
			Association_c_test40812_c(java.util.UUID p40813) {
				m_p40813 = p40813;
			}
			private java.util.UUID m_p40813;
			public boolean evaluate(Object candidate) {
				Association_c selected = (Association_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40813));
				return retval;
			}
		}

		Association_c[] objs40811 = Association_c.AssociationInstances(
				modelRoot, new Association_c_test40812_c(getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs40811.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Association: 2959: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40811.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Association: 2959: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40811.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Link Participation is a participating class in association: rel.Numb = 2901
		// Object: Link
		class Link_c_test40815_c implements ClassQueryInterface_c {
			Link_c_test40815_c(java.util.UUID p40816, java.util.UUID p40817) {
				m_p40816 = p40816;
				m_p40817 = p40817;
			}
			private java.util.UUID m_p40816;
			private java.util.UUID m_p40817;
			public boolean evaluate(Object candidate) {
				Link_c selected = (Link_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40816))
						& (selected.getParticipation_id().equals(m_p40817));
				return retval;
			}
		}

		Link_c[] objs40814 = Link_c.LinkInstances(modelRoot,
				new Link_c_test40815_c(getRel_id(), getParticipation_id()));

		if (((objs40814.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Association: 2901: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40814.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Association: 2901: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40814.length), e);
			}
			retval = false;

		}

		// Link Participation is a participating class in association: rel.Numb = 2902
		// Object: Link
		class Link_c_test40819_c implements ClassQueryInterface_c {
			Link_c_test40819_c(java.util.UUID p40820, java.util.UUID p40821) {
				m_p40820 = p40820;
				m_p40821 = p40821;
			}
			private java.util.UUID m_p40820;
			private java.util.UUID m_p40821;
			public boolean evaluate(Object candidate) {
				Link_c selected = (Link_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40820))
						& (selected.getFormalizing_participation_id()
								.equals(m_p40821));
				return retval;
			}
		}

		Link_c[] objs40818 = Link_c.LinkInstances(modelRoot,
				new Link_c_test40819_c(getRel_id(), getParticipation_id()));

		if (((objs40818.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Association: 2902: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40818.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Association: 2902: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40818.length), e);
			}
			retval = false;

		}

		// Link Participation is a participating class in association: rel.Numb = 2903
		// Object: Link
		class Link_c_test40823_c implements ClassQueryInterface_c {
			Link_c_test40823_c(java.util.UUID p40824, java.util.UUID p40825) {
				m_p40824 = p40824;
				m_p40825 = p40825;
			}
			private java.util.UUID m_p40824;
			private java.util.UUID m_p40825;
			public boolean evaluate(Object candidate) {
				Link_c selected = (Link_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p40824))
						& (selected.getAssociator_participation_id()
								.equals(m_p40825));
				return retval;
			}
		}

		Link_c[] objs40822 = Link_c.LinkInstances(modelRoot,
				new Link_c_test40823_c(getRel_id(), getParticipation_id()));

		if (((objs40822.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Link Participation", //$NON-NLS-1$
								"Consistency: Object: Link Participation: Association: 2903: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40822.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Link Participation: Association: 2903: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40822.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Link Participation",
				" Operation entered: LinkParticipation::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Link_c v_partLink = Link_c.getOneI_LNKOnR2901(this);

		if (((v_partLink != null))) {

			if (v_partLink != null) {
				v_partLink.unrelateAcrossR2901From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_partLink != null) {
				v_partLink.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Link_c v_formalizingLink = Link_c.getOneI_LNKOnR2902(this);

		if (((v_formalizingLink != null))) {

			if (v_formalizingLink != null) {
				v_formalizingLink.unrelateAcrossR2902From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_formalizingLink != null) {
				v_formalizingLink.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Link_c v_associatorLink = Link_c.getOneI_LNKOnR2903(this);

		if (((v_associatorLink != null))) {

			if (v_associatorLink != null) {
				v_associatorLink.unrelateAcrossR2903From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_associatorLink != null) {
				v_associatorLink.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Instance_c v_ins = Instance_c.getOneI_INSOnR2958(this);

		if (((v_ins != null))) {

			if (v_ins != null) {
				v_ins.unrelateAcrossR2958From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

		}

		Association_c v_rel = Association_c.getOneR_RELOnR2959(this);

		if (((v_rel != null))) {

			if (v_rel != null) {
				v_rel.unrelateAcrossR2959From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Link Participation
