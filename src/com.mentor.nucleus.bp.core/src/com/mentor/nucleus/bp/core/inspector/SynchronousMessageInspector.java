package com.mentor.nucleus.bp.core.inspector;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/inspector/SynchronousMessageInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_object_inspector.inc
// Version:      $Revision: 1.23 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class SynchronousMessage_c from the traversal mechanisms that it provides to
// model diff.
//
import com.mentor.nucleus.bp.core.*;

import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import java.util.*;

/**
 * This file adapts the meta-model entity; 'SynchronousMessage_c' to provide 
 * support of traversing to its children and parents.
 * <p>
 * Do not edit this class, it was created using the Mentor Graphics
 * MC-Java code generator product.
 * </p>
 */
public class SynchronousMessageInspector extends BaseModelClassInspector {

  private String parentAssoc;
  
  public SynchronousMessageInspector(MetadataSortingManager sortingManager){
    super(sortingManager);
  }

  /**
   * @see IModelClassInspector#getParent(Object)
   * Returns the parent(s) of this node
   */
  public Object getParent(Object arg) {
    ClassInstanceParticipant_c result1 = ClassInstanceParticipant_c.getOneSQ_CIPOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result1 != null) {
        return result1;
    }               
    ExternalEntityParticipant_c result2 = ExternalEntityParticipant_c.getOneSQ_EEPOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result2 != null) {
        return result2;
    }               
    FunctionPackageParticipant_c result3 = FunctionPackageParticipant_c.getOneSQ_FPPOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result3 != null) {
        return result3;
    }               
    PackageParticipant_c result4 = PackageParticipant_c.getOneSQ_PPOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result4 != null) {
        return result4;
    }               
    ClassParticipant_c result5 = ClassParticipant_c.getOneSQ_CPOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result5 != null) {
        return result5;
    }               
    Lifespan_c result6 = Lifespan_c.getOneSQ_LSOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result6 != null) {
        return result6;
    }               
    ComponentParticipant_c result7 = ComponentParticipant_c.getOneSQ_COPOnR930(InteractionParticipant_c.getOneSQ_POnR1007(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result7 != null) {
        return result7;
    }               
    Communication_c result8 = Communication_c.getOneCOMM_COMMOnR1135(MessageInCommunication_c.getOneCOMM_MICOnR1135(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result8 != null) {
        return result8;
    }               
    Package_c result9 = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(Message_c.getOneMSG_MOnR1018((SynchronousMessage_c)arg)));
     if (result9 != null) {
        return result9;
    }               
        return null;    //No parent found           
  }
  	  
  /**
   * @see IModelClassInspector#getChildRelations(Object)
   * Returns the children of this node
   */
  public ObjectElement[] getChildRelations(Object arg) {
    int resultSize = 0;
    MessageArgument_c [] v_informalmessagearguments = 
MessageArgument_c.getManyMSG_AsOnR1013(
InformalArgument_c.getManyMSG_IAsOnR1013(
MessageArgument_c.getManyMSG_AsOnR1000(
Message_c.getManyMSG_MsOnR1018(
(SynchronousMessage_c)arg)
)
)
)
;



    sort(v_informalmessagearguments);
    MessageArgument_c [] v_messagearguments = 
MessageArgument_c.getManyMSG_AsOnR1001(
Message_c.getManyMSG_MsOnR1018(
(SynchronousMessage_c)arg)
)
;



    sort(v_messagearguments);
    List<ObjectElement> result = new ArrayList<ObjectElement> ();
    for (int i = 0 ; i < v_informalmessagearguments.length ; i++) {   
        result.add(new ObjectElement("v_informalmessagearguments", ObjectElement.RELATION_ROLE_ELEMENT, v_informalmessagearguments[i], arg, false));
    }
    for (int i = 0 ; i < v_messagearguments.length ; i++) {   
        result.add(new ObjectElement("v_messagearguments", ObjectElement.RELATION_ROLE_ELEMENT, v_messagearguments[i], arg, false));
    }
    return result.toArray(new ObjectElement[result.size()]);
  }
  /**
   * @see IModelClassInspector#hasChildren(Object)
   * Returns true if this node has any children
   */
  public boolean hasChildRelations(Object arg) {
    MessageArgument_c [] v_informalmessagearguments = 
MessageArgument_c.getManyMSG_AsOnR1013(
InformalArgument_c.getManyMSG_IAsOnR1013(
MessageArgument_c.getManyMSG_AsOnR1000(
Message_c.getManyMSG_MsOnR1018(
(SynchronousMessage_c)arg)
)
)
)
;



    if (v_informalmessagearguments.length > 0) return true;
    MessageArgument_c [] v_messagearguments = 
MessageArgument_c.getManyMSG_AsOnR1001(
Message_c.getManyMSG_MsOnR1018(
(SynchronousMessage_c)arg)
)
;



    if (v_messagearguments.length > 0) return true;
    return false;
  }
  
  public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
  	Object[] details = new Object[4];
	if(details[0] == null && referentialClass == InformalSynchronousMessage_c.class) {
		details[0] = InformalSynchronousMessage_c.getOneMSG_ISMOnR1020(
(SynchronousMessage_c)arg)
;



;
		details[1] = arg;
		details[2] = "1020";
		details[3] = "";
	}
	if(details[0] == null && referentialClass == BridgeMessage_c.class) {
		details[0] = BridgeMessage_c.getOneMSG_BOnR1020(
(SynchronousMessage_c)arg)
;



;
		details[1] = arg;
		details[2] = "1020";
		details[3] = "";
	}
	if(details[0] == null && referentialClass == OperationMessage_c.class) {
		details[0] = OperationMessage_c.getOneMSG_OOnR1020(
(SynchronousMessage_c)arg)
;



;
		details[1] = arg;
		details[2] = "1020";
		details[3] = "";
	}
	if(details[0] == null && referentialClass == FunctionMessage_c.class) {
		details[0] = FunctionMessage_c.getOneMSG_FOnR1020(
(SynchronousMessage_c)arg)
;



;
		details[1] = arg;
		details[2] = "1020";
		details[3] = "";
	}
	if(details[0] == null && referentialClass == InterfaceOperationMessage_c.class) {
		details[0] = InterfaceOperationMessage_c.getOneMSG_IOPOnR1020(
(SynchronousMessage_c)arg)
;



;
		details[1] = arg;
		details[2] = "1020";
		details[3] = "";
	}
	return details;
  }
  
  /**
  * @seee IModelClassInspector#getReferentials(Object)
  * Returns the an array of Role Objects specifying the referenctial attibutes of
  * this model element
  * Role Name: <T_TPS.NameOnly>
  * Role Value: <Chain_result>
  * Role Type: "Referential"
  */
  public ObjectElement[] getReferentials(Object arg) {
     List<ObjectElement> referentials = new ArrayList<ObjectElement>();
        Object referential = InformalSynchronousMessage_c.getOneMSG_ISMOnR1020(
(SynchronousMessage_c)arg)

;
    if(!(referential == null)) {
     referentials.add(new ObjectElement ("referential_Informal_Message", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
    }
        referential = BridgeMessage_c.getOneMSG_BOnR1020(
(SynchronousMessage_c)arg)

;
    if(!(referential == null)) {
     referentials.add(new ObjectElement ("referential_Formal_Bridge_Operation", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
    }
        referential = OperationMessage_c.getOneMSG_OOnR1020(
(SynchronousMessage_c)arg)

;
    if(!(referential == null)) {
     referentials.add(new ObjectElement ("referential_Formal_Operation", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
    }
        referential = FunctionMessage_c.getOneMSG_FOnR1020(
(SynchronousMessage_c)arg)

;
    if(!(referential == null)) {
     referentials.add(new ObjectElement ("referential_Formal_Function", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
    }
        referential = InterfaceOperationMessage_c.getOneMSG_IOPOnR1020(
(SynchronousMessage_c)arg)

;
    if(!(referential == null)) {
     referentials.add(new ObjectElement ("referential_Formal_Interface_Operation", ObjectElement.REFERENTIAL_ATTRIBUTE_ELEMENT, referential, arg, false));
    }
    return referentials.toArray(new ObjectElement [referentials.size()]);        
  }

  /**
  * @seee IModelClassInspector#getAttributes(Object)
  * Returns the an array of Role objects that give the attibutes of the model 
  * element it self e.g.
  * Role Name: "Name"
  * Role Value: metaModelElement.getName()
  * Role Type: "Primitive"
  */
  public ObjectElement[] getAttributes(Object arg) {
    ObjectElement attrSet[] = new ObjectElement[9];
      attrSet[0] = new ObjectElement("InformalName", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getInformalname"), arg, "getInformalname", true);
      attrSet[1] = new ObjectElement("Descrip", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getDescrip"), arg, "getDescrip", true);
      attrSet[2] = new ObjectElement("GuardCondition", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getGuardcondition"), arg, "getGuardcondition", true);
      attrSet[3] = new ObjectElement("ResultTarget", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getResulttarget"), arg, "getResulttarget", true);
      attrSet[4] = new ObjectElement("ReturnValue", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getReturnvalue"), arg, "getReturnvalue", true);
      attrSet[5] = new ObjectElement("isFormal", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getIsformal"), arg, "getIsformal", true);
      attrSet[5].setDerived();
      attrSet[6] = new ObjectElement("SequenceNumb", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getSequencenumb"), arg, "getSequencenumb", true);
    ObjectElement compAttrSet[] = new ObjectElement[7];    
    for (int i = 0; i < 7 ; i++) {
        compAttrSet[i] = attrSet[i];
    }
    return compAttrSet;
  }

    /**
     * Return configured image if none exists for the element type
     */
    public Image getImage(Object element) {
		Image image = CorePlugin.getImageFor(element, false);
		if(image != null) {
			return image;
		}
		return CorePlugin.getImageFor("SynchronousMessage.gif");
	}

  /**
  * Returns a "slot number" to be used when comparing and merging tree elements
  * that contain multiple children.  All model element inspector's contain this 
  * function, but it only returns a value for cases where it a parent element
  * in a tree and the parent has multiple children.
  * 
  * @returns 0 if this is not a "parent" in the tree OR if the parent has less 
  * than 2 children. 
  */
	@Override
	public int getTreeDifferenceSlot(Object element) {
    	if (element instanceof MessageArgument_c) {
			return 1;
		}
    	if (element instanceof MessageArgument_c) {
			return 2;
		}
    	if (element instanceof InformalSynchronousMessage_c) {
			return 3;
		}
    	if (element instanceof BridgeMessage_c) {
			return 4;
		}
    	if (element instanceof OperationMessage_c) {
			return 5;
		}
    	if (element instanceof FunctionMessage_c) {
			return 6;
		}
    	if (element instanceof InterfaceOperationMessage_c) {
			return 7;
		}
		return 0;
	}

	}       

