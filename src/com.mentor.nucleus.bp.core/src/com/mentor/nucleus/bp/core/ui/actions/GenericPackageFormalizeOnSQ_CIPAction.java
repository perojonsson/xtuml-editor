package com.mentor.nucleus.bp.core.ui.actions;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/ui/GenericPackageFormalizeOnSQ_CIPAction.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_selection_dialog_action.inc
// Version:      $Revision: 1.10 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is the main BridgePoint entry point for the action that
// opens a selection dialog for Formalizes.
//

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PlatformUI;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.ui.*;
import com.mentor.nucleus.bp.core.util.*;
import com.mentor.nucleus.bp.core.ui.dialogs.*;
import org.osgi.service.prefs.*;
import com.mentor.nucleus.bp.core.ui.preferences.*;

public class GenericPackageFormalizeOnSQ_CIPAction
		implements
			IObjectActionDelegate {

	/**
	 * Constructor for GenericPackageFormalizeOnSQ_CIPAction.
	 */
	public GenericPackageFormalizeOnSQ_CIPAction() {
		super();
	}
	/**
	 * @see IObjectActionDelegate#setActivePart(IAction, IWorkbenchPart)
	 */
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		// The part is mainly needed to locate the selection provider, and
		// we cache our selection in core so no action is needed here.
	}
	/**
	 * @see IActionDelegate#run(IAction)
	 */
	public void run(IAction action) {
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		SQ_CIP_GenericPackageFormalize(structuredSelection);
	}
	/**
	 * @see IActionDelegate#selectionChanged(IAction, ISelection)
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		// do nothing
	}
	public static void SQ_CIP_GenericPackageFormalize(
			IStructuredSelection selection) {
		// Assign the context selection variables with the action context 
		// Assign the context selection variable with the action context 
		Object context = selection.iterator().next();
		ClassInstanceParticipant_c v_element = (ClassInstanceParticipant_c) context;
		// select related by where USER::selectExisting
		ModelClass_c v_existingElement = ModelClass_c
				.getOneO_OBJOnR934(v_element);

		// ensure that all Model Classs are loaded
		PersistenceManager.ensureAllInstancesLoaded(v_element.getModelRoot(),
				ModelClass_c.class);
		// now find all the elements that should be shown 
		ModelClass_c[] elements = getElements(v_element);
		PackageableElement_c pe = PackageableElement_c
				.getOnePE_PEOnR8001(InteractionParticipant_c
						.getOneSQ_POnR930(v_element));
		Package_c pkg = Package_c.getOneEP_PKGOnR8000(pe);
		Component_c comp = Component_c.getOneC_COnR8003(pe);
		ElementSelectionDialog dialog = new ElementSelectionDialog(PlatformUI
				.getWorkbench().getActiveWorkbenchWindow().getShell(),
				elements, "class", true, v_existingElement, true, pkg);
		dialog.setBlockOnOpen(true);
		dialog.setTitle("Formalize Selection");
		int result = dialog.open();
		if (result == Window.OK) {
			ModelClass_c v_selectedElement = (ModelClass_c) dialog.getResult()[0];
			if (v_selectedElement != null) {

				TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
						.startTransactionsOnSelectedModelRoots("Generic Package Formalize");
				try {
					// Ensure that actions take place between Verifier Activity executions
					Ooaofooa.beginSaveOperation();
					if (((v_element != null))) {

						if (((v_selectedElement != null))) {

							if (v_element != null) {
								v_element.Formalize(v_selectedElement
										.getObj_id());
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Attempted to call an operation on a null instance.",
												t);
							}

						}

					}

					// end critical section
					Ooaofooa.endSaveOperation();
					// catch all exceptions and cancel the transactions
				} catch (Exception e) {
					Ooaofooa.endSaveOperation();
					TransactionUtil.cancelTransactions(transactionGroup, e);
					CorePlugin.logError(
							"Transaction: Generic Package Formalize failed", e);//$NON-NLS-1$
				}
				TransactionUtil.endTransactions(transactionGroup);
			}
		}

	}
	public static ModelClass_c[] getElements(ClassInstanceParticipant_c v_element) {
      List<ModelClass_c> elementList = new ArrayList<ModelClass_c>();
      PackageableElement_c pe = PackageableElement_c.getOnePE_PEOnR8001(InteractionParticipant_c.getOneSQ_POnR930(v_element));
      Package_c pkg = Package_c.getOneEP_PKGOnR8000(pe);
      Component_c comp = Component_c.getOneC_COnR8003(pe);
        Ooaofooa[] instancesUnderSystem = Ooaofooa.getInstancesUnderSystem(v_element.getModelRoot());
        for(int i = 0; i < instancesUnderSystem.length; i++) {
    	  ModelClass_c[] elementInstances = ModelClass_c.ModelClassInstances(instancesUnderSystem[i]);
    	  for(int j = 0; j < elementInstances.length; j++) {
		  	ModelClass_c elem = elementInstances[j];
						if(instancesUnderSystem[i].getInstanceList(Domain_c.class).isEmpty()) {
    			  elementList.add(elem);
					}
    	  }
        }
		SystemModel_c sys = ((Ooaofooa)v_element.getModelRoot()).getRoot();
		if (sys.getUseglobals()) {
		  PackageableElement_c[] pes = PackageableElement_c.
		             getManyPE_PEsOnR9100(GlobalElementInSystem_c.
				                                     getManyG_EISsOnR9100(sys));
          ModelClass_c[] elementInstances = ModelClass_c.getManyO_OBJsOnR8001(pes);
  	      for(int j = 0; j < elementInstances.length; j++) {
		  	ModelClass_c elem = elementInstances[j];
			if (!elementList.contains(elem)) {
			  // add elements once only
    		  elementList.add(elem);
		    }
  	      }
		}
		if (Pref_c.Getsystemboolean(
				"com.mentor.nucleus.bp.ui.project.references", sys.getName()) == true) {
			SystemModel_c[] systems = SystemModel_c.SystemModelInstances(Ooaofooa.getDefaultInstance());
			for (int i = 0; i < systems.length; i++) {
				if (systems[i] != sys && systems[i].getUseglobals()) {
					instancesUnderSystem = Ooaofooa.getInstancesUnderSystem(systems[i].getName());
					for (int j = 0; j < instancesUnderSystem.length; j++) {
						ModelClass_c[] elementInstances = ModelClass_c.ModelClassInstances(instancesUnderSystem[j]);
						for (int k = 0; k < elementInstances.length; k++) {
							ModelClass_c elem = elementInstances[k];
							if (instancesUnderSystem[j].getInstanceList(
									ComponentPackage_c.class).isEmpty()) {
								elementList.add(elem);
							}
						}
					}
				}
			}
		}
	return elementList.toArray(new ModelClass_c[elementList.size()]);
  } // end getElements(ClassInstanceParticipant_c) 
} // end GenericPackageFormalizeOnSQ_CIPAction

