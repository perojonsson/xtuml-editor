      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassIdentifier_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_CLASS_IDENTIFIER extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ClassIdentifier_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ClassIdentifier_c(ModelRoot modelRoot,
       int          p_m_oid_id,
       java.util.UUID         p_m_obj_id)
  {
    super(modelRoot);
       m_oid_id = p_m_oid_id;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
        
    Object [] key = {new UUID(0, new Long(m_oid_id)),m_obj_id};
    addInstanceToMap(key);
  }
  static public ClassIdentifier_c createProxy(ModelRoot modelRoot,
       int          p_m_oid_id,
       java.util.UUID         p_m_obj_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);
      ClassIdentifier_c new_inst = null;
      synchronized(instances) {
          Object[] key = {new UUID(0, new Long(p_m_oid_id)),p_m_obj_id};
          new_inst = (ClassIdentifier_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_oid_id = p_m_oid_id;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ClassIdentifier_c(modelRoot,
p_m_oid_id,
p_m_obj_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ClassIdentifier_c resolveInstance(ModelRoot modelRoot,
       int          p_m_oid_id,
       java.util.UUID         p_m_obj_id){
    InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);
    ClassIdentifier_c source = null;
    synchronized(instances) {
        Object [] key = {
        new UUID(0, new Long(p_m_oid_id))
        ,
        p_m_obj_id
            };
        source = (ClassIdentifier_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_oid_id = p_m_oid_id;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ClassIdentifier_c new_inst = new ClassIdentifier_c(modelRoot,
p_m_oid_id,
p_m_obj_id
);
    return new_inst;
  }
  public ClassIdentifier_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_obj_id = IdAssigner.NULL_UUID;   
    Object [] key = {new UUID(0, new Long(m_oid_id)),m_obj_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {new UUID(0, new Long(m_oid_id)),m_obj_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p6
		// round p7
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_obj_id !=  p_newKey ){
	
		m_obj_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ClassIdentifier_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ClassIdentifier_c)) {
           return false;
       }
       
       ClassIdentifier_c me = (ClassIdentifier_c)elem;
      if (getOid_id() != ((ClassIdentifier_c)elem).getOid_id()) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID.equals(((ClassIdentifier_c)elem).getObj_id())) && this != elem)) {
      	return false;
      }
      if (!getObj_id().equals(((ClassIdentifier_c)elem).getObj_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ClassIdentifier_c)) {
           return false;
       }
       
       ClassIdentifier_c me = (ClassIdentifier_c)elem;
      if (getOid_id() != ((ClassIdentifier_c)elem).getOid_id()) return false;
      if (!getObj_idCachedValue().equals(((ClassIdentifier_c)elem).getObj_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private int          m_oid_id ;
  private java.util.UUID         m_obj_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ModelClass_c IdentifiesModelClass ;
public void relateAcrossR104To(ModelClass_c target)
{
	relateAcrossR104To(target, true);
}
public void relateAcrossR104To(ModelClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IdentifiesModelClass) return;  // already related

    if ( IdentifiesModelClass != target ) {
    
    Object oldKey = getInstanceKey();

    if (IdentifiesModelClass != null) {
    
        IdentifiesModelClass.clearBackPointerR104To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ClassIdentifier_c.relateAcrossR104To(ModelClass_c target)", 
			"Relate performed across R104 from Class Identifier to Model Class without unrelate of prior instance.");  
		}
    }
                
    	IdentifiesModelClass = target ;
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR104To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "104", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR104From(ModelClass_c target)
{
	unrelateAcrossR104From(target, true);
}
public void unrelateAcrossR104From(ModelClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IdentifiesModelClass == null) return;  // already unrelated
	
	if (target != IdentifiesModelClass) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R104", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR104To(this);
    }
    

      if(IdentifiesModelClass != null) {
      
        m_obj_id = IdentifiesModelClass.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = IdentifiesModelClass.getObj_idCachedValue();
        }       
        IdentifiesModelClass = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "104", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ClassIdentifier_c getOneO_IDOnR104(ModelClass_c [] targets)
{
    return getOneO_IDOnR104(targets, null);
}

public static ClassIdentifier_c getOneO_IDOnR104(ModelClass_c [] targets, ClassQueryInterface_c test)
{
    ClassIdentifier_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_IDOnR104(targets[i], test);
        }
    }

    return ret_val;
}

public static ClassIdentifier_c getOneO_IDOnR104(ModelClass_c target)
{
  return getOneO_IDOnR104(target, null);
}

public static ClassIdentifier_c getOneO_IDOnR104(ModelClass_c target, boolean loadComponent)
{
    return getOneO_IDOnR104(target.getModelRoot(), target, null, loadComponent);
}

public static ClassIdentifier_c getOneO_IDOnR104(ModelClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_IDOnR104(target.getModelRoot(), target, test);
  }
  return null;
}

public static ClassIdentifier_c getOneO_IDOnR104(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test)
{
	return getOneO_IDOnR104(modelRoot, target, test, true);
}

public static ClassIdentifier_c getOneO_IDOnR104(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_IDOnR104(modelRoot,target,test);
}
private static ClassIdentifier_c find_getOneO_IDOnR104(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104) {
	    for ( int i = 0; i < target.backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104.size(); ++i ) {
	      ClassIdentifier_c source = (ClassIdentifier_c)target.backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c [] targets)
{
  return getManyO_IDsOnR104(targets, null);
}
public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c [] targets, boolean loadComponent)
{
  return getManyO_IDsOnR104(targets, null, loadComponent);
}
public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_IDsOnR104(targets, test, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ClassIdentifier_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104) {
	    for (int j = 0; j < targets[i].backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104.size(); ++j) {
	      ClassIdentifier_c source = (ClassIdentifier_c)targets[i].backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ClassIdentifier_c[] ret_set = new ClassIdentifier_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ClassIdentifier_c[0];
  }
  }

public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c target)
{
  return getManyO_IDsOnR104(target, null);
}

public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c target, boolean loadComponent)
{
  return getManyO_IDsOnR104(target, null, loadComponent);
}

public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c target, ClassQueryInterface_c test)
{
	return getManyO_IDsOnR104(target, test, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR104(ModelClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ClassIdentifier_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104) {
    for (int i = 0; i < target.backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104.size(); ++i) {
      ClassIdentifier_c source = (ClassIdentifier_c)target.backPointer_IsIdentifiedByClassIdentifierIsIdentifiedBy_R104.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ClassIdentifier_c[] ret_set = new ClassIdentifier_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ClassIdentifier_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ClassIdentifierAttribute_c> backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105 = new ArrayList<ClassIdentifierAttribute_c>();

public void setClassIdentifierAttributeOrderInChildListR105(ClassIdentifierAttribute_c target, int index) {
	unrelateAcrossR105From(target);
	ClassIdentifierAttribute_c[] elements = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR105From((ClassIdentifierAttribute_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR105To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR105To((ClassIdentifierAttribute_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR105To(ClassIdentifierAttribute_c target)
{
  if (target != null) {
    target.relateAcrossR105To(this, true) ;
  }
}

public void relateAcrossR105To(ClassIdentifierAttribute_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR105To(this, notifyChanges) ;
  }
}

public void setBackPointerR105To(ClassIdentifierAttribute_c target)
{
  	synchronized (backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105) {
		backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.add(target);
	}
}

public void unrelateAcrossR105From(ClassIdentifierAttribute_c target)
{
  if (target != null) {
    target.unrelateAcrossR105From(this, true) ;
  }
}

public void unrelateAcrossR105From(ClassIdentifierAttribute_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR105From(this, notifyChanges) ;
  }
}

public void clearBackPointerR105To(ClassIdentifierAttribute_c target)
{
  synchronized (backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105) {
	    backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.remove(target);
	}
}

public static ClassIdentifier_c getOneO_IDOnR105(ClassIdentifierAttribute_c [] targets)
{
    return getOneO_IDOnR105(targets, null);
}

public static ClassIdentifier_c getOneO_IDOnR105(ClassIdentifierAttribute_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IDOnR105(targets, test, true);
}

public static ClassIdentifier_c getOneO_IDOnR105(ClassIdentifierAttribute_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ClassIdentifier_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ClassIdentifier_c candidate_val = getOneO_IDOnR105(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IDOnR105(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ClassIdentifier_c getOneO_IDOnR105(ClassIdentifierAttribute_c target)
{
	return getOneO_IDOnR105(target, true);
}
public static ClassIdentifier_c getOneO_IDOnR105(ClassIdentifierAttribute_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsPartOfClassIdentifier ;
  } else {
    return null;
  }
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IDsOnR105(targets, test, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassIdentifier_c[0];
  
  
  LinkedHashSet<ClassIdentifier_c> elementsSet = new LinkedHashSet<ClassIdentifier_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsPartOfClassIdentifier == null)
	  targets[i].loadProxy();
    ClassIdentifier_c associate = targets[i].IsPartOfClassIdentifier;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ClassIdentifier_c[] result = new ClassIdentifier_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c [] targets)
{
  return getManyO_IDsOnR105(targets, null);
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassIdentifierAttribute_c [] targetArray = new ClassIdentifierAttribute_c[1];
    targetArray[0] = target;
    return getManyO_IDsOnR105(targetArray, test, loadComponent);
  } else {
    ClassIdentifier_c [] result = new ClassIdentifier_c [0] ;
    return result ;
  }
  
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IDsOnR105(target, null, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c target)
{
    return getManyO_IDsOnR105(target, null, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(ClassIdentifierAttribute_c target, boolean loadComponent)
{
    return getManyO_IDsOnR105(target, null, loadComponent);
}

public static ClassIdentifier_c getOneO_IDOnR105(Attribute_c target)
{
  return ClassIdentifier_c.getOneO_IDOnR105(ClassIdentifierAttribute_c.getOneO_OIDAOnR105(target)) ;
}

public static ClassIdentifier_c getOneO_IDOnR105(Attribute_c target,
    ClassQueryInterface_c test)
{
  return ClassIdentifier_c.getOneO_IDOnR105(ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(target), test) ;
}

public static ClassIdentifier_c [] getManyO_IDsOnR105(Attribute_c target,
    ClassQueryInterface_c test)
{
	return getManyO_IDsOnR105(target, test, true);
}
public static ClassIdentifier_c [] getManyO_IDsOnR105(Attribute_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ClassIdentifierAttribute_c [] associators = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(target, loadComponent) ;
    return ClassIdentifier_c.getManyO_IDsOnR105(associators, test, loadComponent) ;
}
public static ClassIdentifier_c [] getManyO_IDsOnR105(Attribute_c target)
{
    return getManyO_IDsOnR105(target, null, true);
}
public static ClassIdentifier_c [] getManyO_IDsOnR105(Attribute_c target, boolean loadComponent)
{
    return getManyO_IDsOnR105(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ReferredToClassInAssoc_c> backPointer_IdentifiesForThisAssociationReferredToClassInAssocIdentifiesForThisAssociation_R109 = new ArrayList<ReferredToClassInAssoc_c>();

public void setReferredToClassInAssocOrderInChildListR109(ReferredToClassInAssoc_c target, int index) {
	unrelateAcrossR109From(target);
	ReferredToClassInAssoc_c[] elements = ReferredToClassInAssoc_c.getManyR_RTOsOnR109(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR109From((ReferredToClassInAssoc_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR109To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR109To((ReferredToClassInAssoc_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR109To(ReferredToClassInAssoc_c target)
{
  if (target != null) {
    target.relateAcrossR109To(this, true) ;
  }
}

public void relateAcrossR109To(ReferredToClassInAssoc_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR109To(this, notifyChanges) ;
  }
}

public void setBackPointerR109To(ReferredToClassInAssoc_c target)
{
  	synchronized (backPointer_IdentifiesForThisAssociationReferredToClassInAssocIdentifiesForThisAssociation_R109) {
		backPointer_IdentifiesForThisAssociationReferredToClassInAssocIdentifiesForThisAssociation_R109.add(target);
	}
}

public void unrelateAcrossR109From(ReferredToClassInAssoc_c target)
{
  if (target != null) {
    target.unrelateAcrossR109From(this, true) ;
  }
}

public void unrelateAcrossR109From(ReferredToClassInAssoc_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR109From(this, notifyChanges) ;
  }
}

public void clearBackPointerR109To(ReferredToClassInAssoc_c target)
{
  synchronized (backPointer_IdentifiesForThisAssociationReferredToClassInAssocIdentifiesForThisAssociation_R109) {
	    backPointer_IdentifiesForThisAssociationReferredToClassInAssocIdentifiesForThisAssociation_R109.remove(target);
	}
}

public static ClassIdentifier_c getOneO_IDOnR109(ReferredToClassInAssoc_c [] targets)
{
    return getOneO_IDOnR109(targets, null);
}

public static ClassIdentifier_c getOneO_IDOnR109(ReferredToClassInAssoc_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_IDOnR109(targets, test, true);
}

public static ClassIdentifier_c getOneO_IDOnR109(ReferredToClassInAssoc_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ClassIdentifier_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ClassIdentifier_c candidate_val = getOneO_IDOnR109(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_IDOnR109(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ClassIdentifier_c getOneO_IDOnR109(ReferredToClassInAssoc_c target)
{
	return getOneO_IDOnR109(target, true);
}
public static ClassIdentifier_c getOneO_IDOnR109(ReferredToClassInAssoc_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsIdentifiedInThisAssociationByClassIdentifier != null){
		target.IsIdentifiedInThisAssociationByClassIdentifier.loadProxy();
	}
	}
    return target.IsIdentifiedInThisAssociationByClassIdentifier ;
  } else {
    return null;
  }
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_IDsOnR109(targets, test, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassIdentifier_c[0];
  
  
  LinkedHashSet<ClassIdentifier_c> elementsSet = new LinkedHashSet<ClassIdentifier_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsIdentifiedInThisAssociationByClassIdentifier == null)
	  targets[i].loadProxy();
    ClassIdentifier_c associate = targets[i].IsIdentifiedInThisAssociationByClassIdentifier;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ClassIdentifier_c[] result = new ClassIdentifier_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c [] targets)
{
  return getManyO_IDsOnR109(targets, null);
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ReferredToClassInAssoc_c [] targetArray = new ReferredToClassInAssoc_c[1];
    targetArray[0] = target;
    return getManyO_IDsOnR109(targetArray, test, loadComponent);
  } else {
    ClassIdentifier_c [] result = new ClassIdentifier_c [0] ;
    return result ;
  }
  
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c target,
    ClassQueryInterface_c test)
{
    return getManyO_IDsOnR109(target, null, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c target)
{
    return getManyO_IDsOnR109(target, null, true);
}

public static ClassIdentifier_c [] getManyO_IDsOnR109(ReferredToClassInAssoc_c target, boolean loadComponent)
{
    return getManyO_IDsOnR109(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IdentifiesModelClass == null) {          
      // R104
      ModelClass_c relInst38735 = (ModelClass_c) baseRoot.getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38735 == null) {
      			relInst38735 = (ModelClass_c) Ooaofooa.getDefaultInstance().getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
      		}
			if (relInst38735 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38735 = (ModelClass_c) roots[i].getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
					if (relInst38735 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38735 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38735) && !isProxy())) {
	      relInst38735.relateAcrossR104To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R104
      // O_OBJ
		  inst=IdentifiesModelClass;
			unrelateAcrossR104From(IdentifiesModelClass, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassIdentifier_c inst = (ClassIdentifier_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ClassIdentifier_c ClassIdentifierInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ClassIdentifier_c result=findClassIdentifierInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ClassIdentifier_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findClassIdentifierInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ClassIdentifier_c findClassIdentifierInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ClassIdentifier_c x = (ClassIdentifier_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ClassIdentifier_c ClassIdentifierInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ClassIdentifierInstance(modelRoot,test,true);
  }
  
  public static ClassIdentifier_c ClassIdentifierInstance(ModelRoot modelRoot)
  {
	 return ClassIdentifierInstance(modelRoot,null,true);
  }

  public static ClassIdentifier_c [] ClassIdentifierInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ClassIdentifier_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ClassIdentifier_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ClassIdentifier_c x = (ClassIdentifier_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ClassIdentifier_c[] ret_set = new ClassIdentifier_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassIdentifier_c[0];
			}		
		} 
  }
  public static ClassIdentifier_c [] ClassIdentifierInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ClassIdentifierInstances(modelRoot,test,true);
  }
  public static ClassIdentifier_c [] ClassIdentifierInstances(ModelRoot modelRoot)
  {
	return ClassIdentifierInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Class Identifier.dispose call: ";
	ModelClass_c testR104Inst = ModelClass_c.getOneO_OBJOnR104(this, false);

	if ( testR104Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "104 ";
	}
	ClassIdentifierAttribute_c testR105Inst = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(this, false);

	if ( testR105Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "105 ";
	}
	ReferredToClassInAssoc_c testR109Inst = ReferredToClassInAssoc_c.getOneR_RTOOnR109(this, false);

	if ( testR109Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "109 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Class Identifier", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("obj_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    longID= getOid_id();
    
	      result.append(longID+"_");
    tempID= getObj_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getObj_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public int getOid_id()
  {
    return m_oid_id ;
  }


  public void setOid_id(int newValue)
  {
    if(m_oid_id == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Oid_id", new Integer(m_oid_id), new Integer(newValue),true);

   m_oid_id = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getObj_idLongBased()
  {
    if ( IdentifiesModelClass != null )
    {
      return IdentifiesModelClass.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getObj_id()
  {
    if ( IdentifiesModelClass != null )
    {
      return IdentifiesModelClass.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getObj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_obj_id) )
      return m_obj_id;
    else
      return getObj_id();
  }
  
  public void setObj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_obj_id)){
	        return;
	    }
	}else if(m_obj_id != null){
	    if(m_obj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Obj_id", m_obj_id, newValue,true); 
   m_obj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Class Identifier", //$NON-NLS-1$
	  " Operation entered: Class Identifier::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ClassIdentifier_c [] objs = ClassIdentifier_c.ClassIdentifierInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Class Identifier", //$NON-NLS-1$
	  " Operation entered: Class Identifier::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ClassIdentifier_c_test38737_c implements ClassQueryInterface_c
    {
	  ClassIdentifier_c_test38737_c( int             p38738, java.util.UUID            p38739 ) {
	       m_p38738 = p38738; 
m_p38739 = p38739;
	  }
	  private int              m_p38738; private java.util.UUID             m_p38739; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassIdentifier_c selected = (ClassIdentifier_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOid_id() == (m_p38738)) & (selected.getObj_id().equals(m_p38739));
	      return retval;
	  }
    }

    ClassIdentifier_c [] objs38736 = 
    ClassIdentifier_c.ClassIdentifierInstances(modelRoot, new ClassIdentifier_c_test38737_c(getOid_id(), getObj_id())) ;

    if ( (  (objs38736.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Class Identifier", //$NON-NLS-1$
           "Consistency: Object: Class Identifier: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38736.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Class Identifier: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38736.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38736.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Class Identifier", //$NON-NLS-1$
           "Consistency: Object: Class Identifier: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38736.length )  + " Oid_ID: " + Integer.toString(getOid_id())  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Class Identifier: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38736.length )  + " Oid_ID: " + Integer.toString(getOid_id())  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Class Identifier is a referring class in association: rel.Numb = 104
          // The participating class is: Model Class
    class ModelClass_c_test38743_c implements ClassQueryInterface_c
    {
	  ModelClass_c_test38743_c( java.util.UUID            p38744 ) {
	  m_p38744 = p38744;
	  }
	  private java.util.UUID             m_p38744; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelClass_c selected = (ModelClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getObj_id().equals(m_p38744));
	      return retval;
	  }
    }

    ModelClass_c [] objs38742 = 
    ModelClass_c.ModelClassInstances(modelRoot, new ModelClass_c_test38743_c(getObj_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs38742.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Class Identifier", //$NON-NLS-1$
           "Consistency: Object: Class Identifier: Association: 104: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38742.length )  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Class Identifier: Association: 104: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38742.length )  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 105
            // Link Object: Class Identifier Attribute
            // Other Side Class: Attribute
          // Class Identifier is a participating class in association: rel.Numb = 109
             // Object: Referred To Class in Assoc
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier", " Operation entered: ClassIdentifier::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR104(this);


this.unrelateAcrossR104From(v_obj);


ReferredToClassInAssoc_c [] v_rtos = ReferredToClassInAssoc_c.getManyR_RTOsOnR109(this);


ReferredToClassInAssoc_c  v_rto = null;
for ( int i37125 = 0; i37125 < v_rtos.length; i37125++)
{
  v_rto = v_rtos[i37125] ;

if (v_rto != null) {
v_rto.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ClassIdentifierAttribute_c [] v_oidas = ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(this);


ClassIdentifierAttribute_c  v_oida = null;
for ( int i37126 = 0; i37126 < v_oidas.length; i37126++)
{
  v_oida = v_oidas[i37126] ;

if (v_oida != null) {
v_oida.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier", " Operation entered: ClassIdentifier::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "*" + Gd_c.Int_to_string(			    
getOid_id() + 1);



   } // End get_name
  public static boolean      Hasattributes(ModelRoot modelRoot,final java.util.UUID         p_Obj_id,final int          p_Oid_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier", " Operation entered: ClassIdentifier::Hasattributes") ; 
  class ClassIdentifier_test37362_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ClassIdentifier_c selected = (ClassIdentifier_c)candidate;
		return selected.getObj_id().equals(p_Obj_id) && selected.getOid_id() == p_Oid_id ;
	}
  }
ClassIdentifier_c v_oid = ClassIdentifier_c.ClassIdentifierInstance(modelRoot, new ClassIdentifier_test37362_c()) ;


ClassIdentifierAttribute_c v_oida = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(v_oid);


return   (v_oida != null);



   } // End hasAttributes

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Class Identifier
